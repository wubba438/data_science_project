redis,"Redis is an in-memory database that persists on disk. The data model is key-value, but many different kind of values are supported: Strings, Lists, Sets, Sorted Sets, Hashes, Streams, HyperLogLogs, Bitmaps."
username,timestamp,url,sha,message
antirez,2019-09-06 10:24:40,https://api.github.com/repos/antirez/redis/git/commits/ae8cab3296e71df1130aec59c679d682bec440ae,ae8cab3296e71df1130aec59c679d682bec440ae,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2019-09-06 10:24:26,https://api.github.com/repos/antirez/redis/git/commits/a092f20d87f6e435c5b68b8e217ae0d54dd12715,a092f20d87f6e435c5b68b8e217ae0d54dd12715,handleClientsBlockedOnKeys() refactoring.
antirez,2019-09-05 11:30:26,https://api.github.com/repos/antirez/redis/git/commits/86aade9a024c3582665903d0cc0c5692c6677cfd,86aade9a024c3582665903d0cc0c5692c6677cfd,"Merge pull request #6364 from oranagra/fix_module_aux_when

Fix to module aux data rdb format for backwards compatibility with old check-rdb"
oranagra,2019-09-05 11:11:37,https://api.github.com/repos/antirez/redis/git/commits/3bfcae247a1c51788940bd4d2f32751ead451e42,3bfcae247a1c51788940bd4d2f32751ead451e42,"Fix to module aux data rdb format for backwards compatibility with old check-rdb

When implementing the code that saves and loads these aux fields we used rdb
format that was added for that in redis 5.0, but then we added the 'when' field
which meant that the old redis-check-rdb won't be able to skip these.
this fix adds an opcode as if that 'when' is part of the module data."
antirez,2019-09-05 11:05:57,https://api.github.com/repos/antirez/redis/git/commits/89ad0ca566f222368f2346a539dff0a057985a83,89ad0ca566f222368f2346a539dff0a057985a83,Fix handleClientsBlockedOnKeys() names in comments.
antirez,2019-09-04 15:55:46,https://api.github.com/repos/antirez/redis/git/commits/12c56a8e752e5f01429ebf3cd9b70d1d9ebf1a14,12c56a8e752e5f01429ebf3cd9b70d1d9ebf1a14,"redis-cli: always report server errors on read errors.

Before this commit we may have not consumer buffers when a read error is
encountered. Such buffers may contain errors that are important clues
for the user: for instance a protocol error in the payload we send in
pipe mode will cause the server to abort the connection. If the user
does not get the protocol error, debugging what is happening can be a
nightmare.

This commit fixes issue #3756."
antirez,2019-09-04 15:20:37,https://api.github.com/repos/antirez/redis/git/commits/f7090f43add8de1fa67458e9d2fc934fc31c67cd,f7090f43add8de1fa67458e9d2fc934fc31c67cd,"AOF: be future-proof and close the file pointer.

Currently useless but we release the fake client, so better to do a full
cleanup. Thanks to @TomMD reporting this in #6353."
antirez,2019-09-04 11:01:07,https://api.github.com/repos/antirez/redis/git/commits/b2e10131c09bdb166fc5c1dd6f510042644a6adc,b2e10131c09bdb166fc5c1dd6f510042644a6adc,"Rio: fix flag name, function is never used btw.

Thanks to @tnclong for reporting the problem."
antirez,2019-09-02 10:50:47,https://api.github.com/repos/antirez/redis/git/commits/06d490342f51cff316588a7a45124cc410b7d050,06d490342f51cff316588a7a45124cc410b7d050,RESP3: fix cases of NULL reported instead of empty aggregate.
antirez,2019-09-02 09:41:16,https://api.github.com/repos/antirez/redis/git/commits/b12ccc840e6959027715d8bbc6f6d372ea2fd18f,b12ccc840e6959027715d8bbc6f6d372ea2fd18f,"Cluster: abort loading nodes data if vars arguments are unbalanced.

See for reference PR #6337. Thanks to @git-hulk for spotting this."
antirez,2019-08-31 12:46:21,https://api.github.com/repos/antirez/redis/git/commits/e57067b677bc084b983802aa112b4b1a372e2a10,e57067b677bc084b983802aa112b4b1a372e2a10,"More strict checks and better comments in flushSlaveOutputBuffers().

Related to #6296."
antirez,2019-08-31 12:41:28,https://api.github.com/repos/antirez/redis/git/commits/2303ba1441989d9501f4a97f07cdc3efd9536117,2303ba1441989d9501f4a97f07cdc3efd9536117,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2019-08-31 12:40:09,https://api.github.com/repos/antirez/redis/git/commits/ca5ccc58c59801a81a99e42aa52b5fe05b2c0f86,ca5ccc58c59801a81a99e42aa52b5fe05b2c0f86,Improve comment in flushSlavesOutputBuffers().
antirez,2019-08-31 12:39:33,https://api.github.com/repos/antirez/redis/git/commits/16435e02bfa80ff7254e8b062256494cb77ad708,16435e02bfa80ff7254e8b062256494cb77ad708,"Merge pull request #6296 from soloestoy/flushSlavesOutputBuffers-bugfix

networking: flushSlavesOutputBuffers bugfix"
antirez,2019-08-22 18:02:17,https://api.github.com/repos/antirez/redis/git/commits/d5536e048068e76807c519e90740bab99ee42eca,d5536e048068e76807c519e90740bab99ee42eca,"Merge pull request #6307 from oranagra/register_rm_reply_with_cstring

RM_ReplyWithCString was missing registration"
oranagra,2019-08-07 10:05:33,https://api.github.com/repos/antirez/redis/git/commits/0a97149dec49b654ed8e9c68dc7704ddd699d273,0a97149dec49b654ed8e9c68dc7704ddd699d273,RM_ReplyWithCString was missing registration
antirez,2019-08-05 15:38:15,https://api.github.com/repos/antirez/redis/git/commits/0e9b5adbd394837d711d8db34539a60cb181ba5b,0e9b5adbd394837d711d8db34539a60cb181ba5b,Replication: clarify why repl_put_online_on_ack exists at all.
antirez,2019-08-02 18:24:27,https://api.github.com/repos/antirez/redis/git/commits/5e0faf4959169547f5b943639fcf4eab0bb3f3a2,5e0faf4959169547f5b943639fcf4eab0bb3f3a2,tracking_collisions.c: sha1 + crc64 implemented.
antirez,2019-08-02 18:13:16,https://api.github.com/repos/antirez/redis/git/commits/a368209b1d92987462e4f359b59443a2cad9ef7d,a368209b1d92987462e4f359b59443a2cad9ef7d,"tracking_collisions.c: initial skeleton.

... of a program to just test the hashing functions collisions on a 24
bit output with strings that are very likely Redis key names, and names
of a kind that are particularly prone to collisions."
soloestoy,2019-08-02 09:17:19,https://api.github.com/repos/antirez/redis/git/commits/d3f7eb0c87e9d4c9b7c33c01d4c8569083ae9363,d3f7eb0c87e9d4c9b7c33c01d4c8569083ae9363,networking: flushSlavesOutputBuffers bugfix
antirez,2019-07-31 17:04:29,https://api.github.com/repos/antirez/redis/git/commits/583933e2d6b4c2721554ab77c33a9c0bc7672fa6,583933e2d6b4c2721554ab77c33a9c0bc7672fa6,"Fix regression causing EXEC to appear in the slow log.

This was recently introduced with PR #6266."
antirez,2019-07-31 10:03:10,https://api.github.com/repos/antirez/redis/git/commits/2a8a63af444d526bb3cdffcd77762dd3605147c6,2a8a63af444d526bb3cdffcd77762dd3605147c6,Make EMBSTR case of #6261 more obvious.
antirez,2019-07-31 09:54:11,https://api.github.com/repos/antirez/redis/git/commits/f899c31fbceb9d00c3739c65b9eea8065565a1e1,f899c31fbceb9d00c3739c65b9eea8065565a1e1,"Merge pull request #6261 from chendq8/robj

make memory usage consistent of robj with OBJ_ENCODING_INT"
antirez,2019-07-31 09:12:46,https://api.github.com/repos/antirez/redis/git/commits/fc5c2052b5749a6a88220a5020db7e1f7056bccf,fc5c2052b5749a6a88220a5020db7e1f7056bccf,"Merge pull request #6266 from madolson/dev-unstable-hide-auth-and-hello

Hide HELLO and AUTH from slowlog and monitor"
antirez,2019-07-31 08:37:17,https://api.github.com/repos/antirez/redis/git/commits/e1b13b4d391e85f440ef8807e03bf3541fbc23dc,e1b13b4d391e85f440ef8807e03bf3541fbc23dc,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2019-07-31 08:36:23,https://api.github.com/repos/antirez/redis/git/commits/b2079cb508a1944841abf39715d8a2d522452467,b2079cb508a1944841abf39715d8a2d522452467,HyperLogLog: fix the fix of a corruption bug.
antirez,2019-07-30 16:24:38,https://api.github.com/repos/antirez/redis/git/commits/f0c10d43602496c960ea683639757a576c374503,f0c10d43602496c960ea683639757a576c374503,"Merge pull request #6277 from devnexen/fbsd_get_rss

Updating resident memory request impl on FreeBSD."
antirez,2019-07-30 09:50:44,https://api.github.com/repos/antirez/redis/git/commits/f42846e8c7127c8e84b6938a6bd73e2363b4a90c,f42846e8c7127c8e84b6938a6bd73e2363b4a90c,"Merge pull request #6264 from oranagra/modules_api_aux_rdb

Implement module api for aux data in rdb"
antirez,2019-07-30 09:41:48,https://api.github.com/repos/antirez/redis/git/commits/ce72cac0f84b5c900cb80f59de914fa1ee90da9c,ce72cac0f84b5c900cb80f59de914fa1ee90da9c,"Merge pull request #6269 from wubostc/patch-1

Reduce the calling stack"
antirez,2019-07-30 09:20:51,https://api.github.com/repos/antirez/redis/git/commits/e4b3c8bbc3d01176dee434a6ae8e8e10bb74703a,e4b3c8bbc3d01176dee434a6ae8e8e10bb74703a,"emptyDbGeneric(): call signalFlushDb() before deleting the keys.

This was broken since a refactoring performed recently by myself."
antirez,2019-07-30 08:24:28,https://api.github.com/repos/antirez/redis/git/commits/cc8125a779ad534571bac5904350cf409f09c467,cc8125a779ad534571bac5904350cf409f09c467,"Merge pull request #6282 from JohnSully/hll_corruption

Fix HLL corruption bug"
JohnSully,2019-07-29 22:11:52,https://api.github.com/repos/antirez/redis/git/commits/d659654f53c276a5a96e8559793ffdb9051957fd,d659654f53c276a5a96e8559793ffdb9051957fd,Fix HLL corruption bug
devnexen,2019-07-28 13:33:57,https://api.github.com/repos/antirez/redis/git/commits/f1c6c658ac030b37efe0f9bb17f290c0b647d514,f1c6c658ac030b37efe0f9bb17f290c0b647d514,Updating resident memory request impl on FreeBSD.
antirez,2019-07-25 17:18:26,https://api.github.com/repos/antirez/redis/git/commits/505a855000ef8f1fbea9cb41841fa8708175bba4,505a855000ef8f1fbea9cb41841fa8708175bba4,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2019-07-25 17:17:58,https://api.github.com/repos/antirez/redis/git/commits/0714581e0cca93c0034d6ad1c1d72847c1e57ffe,0714581e0cca93c0034d6ad1c1d72847c1e57ffe,Mark diskless loads as experimental in redis.conf.
antirez,2019-07-25 16:48:46,https://api.github.com/repos/antirez/redis/git/commits/5591a14c0a1099ac62a4e0f17335bf9a817c5413,5591a14c0a1099ac62a4e0f17335bf9a817c5413,"Merge pull request #6248 from oranagra/module-log

RM_Log - add support for logging without a context or context without module"
antirez,2019-07-24 09:45:19,https://api.github.com/repos/antirez/redis/git/commits/fde5e737dcaf13f8121ebbc027c617bc593c3bd2,fde5e737dcaf13f8121ebbc027c617bc593c3bd2,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2019-07-24 09:45:10,https://api.github.com/repos/antirez/redis/git/commits/e53a26b5d8cf8529064f841a4587a54b1f77c4e4,e53a26b5d8cf8529064f841a4587a54b1f77c4e4,Client side caching: document tracking-table-max-fill in redis.conf.
antirez,2019-07-24 09:38:11,https://api.github.com/repos/antirez/redis/git/commits/0b780a54771155ba477007ecb027e534f32376ff,0b780a54771155ba477007ecb027e534f32376ff,Example redis.conf: stay under 80 cols.
antirez,2019-07-24 09:35:01,https://api.github.com/repos/antirez/redis/git/commits/32efd9adf8d9ea2005495433f77fdbd4fac09c3a,32efd9adf8d9ea2005495433f77fdbd4fac09c3a,Client side caching: config option for table fill rate.
antirez,2019-07-24 09:33:53,https://api.github.com/repos/antirez/redis/git/commits/a67d0411e7273d9a5619db1889d1143228b0d577,a67d0411e7273d9a5619db1889d1143228b0d577,Remove experimental warning from diskless replication.
wubostc,2019-07-24 08:22:26,https://api.github.com/repos/antirez/redis/git/commits/48f4cfb6016ebc9cc08963305d316516ac84aa73,48f4cfb6016ebc9cc08963305d316516ac84aa73,Reduce the calling stack
antirez,2019-07-23 15:05:10,https://api.github.com/repos/antirez/redis/git/commits/dbee7ca007f72810b8655267340ce2dc790306bc,dbee7ca007f72810b8655267340ce2dc790306bc,"Merge pull request #6265 from madolson/dev-unstable-remove-create-object

Removed unnecessary creation of Redis objects"
antirez,2019-07-23 09:02:14,https://api.github.com/repos/antirez/redis/git/commits/c98e7717bb741016b87a69901327e1fafac17425,c98e7717bb741016b87a69901327e1fafac17425,Client side caching: show tracking slots usage in INFO.
antirez,2019-07-23 08:57:22,https://api.github.com/repos/antirez/redis/git/commits/9268493e8d9a67bddff9b27f0f7b3f2cd020a227,9268493e8d9a67bddff9b27f0f7b3f2cd020a227,Client side caching: implement full slot limit function.
antirez,2019-07-23 07:43:41,https://api.github.com/repos/antirez/redis/git/commits/47ce1cebeb080d908537a7c24a56b8fbfe0e6451,47ce1cebeb080d908537a7c24a56b8fbfe0e6451,"Merge pull request #6267 from soloestoy/opt-claim-trackingtable

Client side caching: do not reclaim tracking table if it's empty"
soloestoy,2019-07-23 07:25:00,https://api.github.com/repos/antirez/redis/git/commits/9012e587ca6f7c7ef54e86a782910625fe3dc3e9,9012e587ca6f7c7ef54e86a782910625fe3dc3e9,Client side caching: do not reclaim tracking table if it's empty
madolson,2019-07-19 17:22:40,https://api.github.com/repos/antirez/redis/git/commits/7d2175471030422b06f68aa4a420618baef76545,7d2175471030422b06f68aa4a420618baef76545,Hide HELLO and AUTH from slowlog and monitor
madolson,2019-07-07 01:32:58,https://api.github.com/repos/antirez/redis/git/commits/8fe173452ab28c062ecc38e31a7b51f93c6150c7,8fe173452ab28c062ecc38e31a7b51f93c6150c7,Removed unecessary creation of Redis objects
oranagra,2019-07-21 14:41:03,https://api.github.com/repos/antirez/redis/git/commits/3b6aeea44cf8bdc64214a5f145da55453722a9a2,3b6aeea44cf8bdc64214a5f145da55453722a9a2,"Implement module api for aux data in rdb

Other changes:
* fix memory leak in error handling of rdb loading of type OBJ_MODULE"
antirez,2019-07-22 16:59:53,https://api.github.com/repos/antirez/redis/git/commits/c41f94d2a3d9ca33ceefcdf67cc50c949d3a9657,c41f94d2a3d9ca33ceefcdf67cc50c949d3a9657,Client side caching: split invalidation into key / slot.
antirez,2019-07-22 16:45:47,https://api.github.com/repos/antirez/redis/git/commits/09c06698e99e2745d93e8d4595fba58b3763b22f,09c06698e99e2745d93e8d4595fba58b3763b22f,"Client side caching: redis-cli ability to enable tracking.

This is extremely useful in order to simulate an high load of requests
about different keys, and force Redis to track a lot of informations
about several clients, to simulate real world workloads."
antirez,2019-07-22 10:37:43,https://api.github.com/repos/antirez/redis/git/commits/436d02dd7bbbacc3dc2132db30bb061ee108da8f,436d02dd7bbbacc3dc2132db30bb061ee108da8f,"Move signalFlushedDb() into a better place.

Now that the call also invalidates client side caching slots, it is
important that after an internal flush operation we both send the
notifications to the clients and, at the same time, are able to reclaim
the memory of the tracking table. This may even fix a few edge cases
related to MULTI/EXEC + WATCH during resync, not sure, but in general
looks more correct."
antirez,2019-07-22 10:31:46,https://api.github.com/repos/antirez/redis/git/commits/7d3992a80aa7ba744aa446bc7292c7b7a5616e0b,7d3992a80aa7ba744aa446bc7292c7b7a5616e0b,Client side caching: reclaim the tracking table on FLUSHALL.
antirez,2019-07-22 10:29:54,https://api.github.com/repos/antirez/redis/git/commits/842b44dc46cc143fb28f8cadbff1fda9c81e09e2,842b44dc46cc143fb28f8cadbff1fda9c81e09e2,"Client side caching: call the invalidation functions always.

Otherwise what happens is that the tracking table will never get garbage
collected if there are no longer clients with tracking enabled.
Now the invalidation function immediately checks if there is any table
allocated, otherwise it returns ASAP, so the overhead when the feature
is not used should be near zero."
antirez,2019-07-22 10:10:51,https://api.github.com/repos/antirez/redis/git/commits/f850201c6407d5504b08f2630f525a353a7ef740,f850201c6407d5504b08f2630f525a353a7ef740,Client side caching: don't hash the key if not needed.
antirez,2019-07-22 09:47:44,https://api.github.com/repos/antirez/redis/git/commits/e00442eb139c833f35406440a956e03679842034,e00442eb139c833f35406440a956e03679842034,Clinet side caching: take count of used caching slots.
antirez,2019-07-19 09:12:39,https://api.github.com/repos/antirez/redis/git/commits/bc5cb168f504c188c7e67ca61853fd73c341fa62,bc5cb168f504c188c7e67ca61853fd73c341fa62,"RDB: fix MODULE_AUX loading by continuing to next opcode.

Thanks to @JohnSully for noticing this problem."
antirez,2019-07-18 16:59:38,https://api.github.com/repos/antirez/redis/git/commits/5f450e49280ce01d5329798d87136f109761433a,5f450e49280ce01d5329798d87136f109761433a,RDB: make sure to abort on LZF encoding error.
antirez,2019-07-18 16:51:45,https://api.github.com/repos/antirez/redis/git/commits/bd0f06c18ccea62cb5e0fff018a5eaa876d3f90e,bd0f06c18ccea62cb5e0fff018a5eaa876d3f90e,"RDB: handle encoding errors with rdbExitReportCorruptRDB().

Without such change, the diskless replicas, when loading RDB files from
the socket will not abort when a broken RDB file gets loaded. This is
potentially unsafe, because right now Redis is not able to guarantee
that encoding errors are safe from the POV of memory corruptions (for
instance the LZF library may not be safe against untrusted data?) so
better to abort when the RDB file we are going to load is corrupted.

Instead I/O errors are still returned to the caller without aborting,
so that in case of short read the diskless replica can try again."
antirez,2019-07-18 14:41:37,https://api.github.com/repos/antirez/redis/git/commits/41ed85bd268c9e1f1afe05e9ed317d5d55d8eeef,41ed85bd268c9e1f1afe05e9ed317d5d55d8eeef,"Merge pull request #6252 from soloestoy/tracking-flushdb

Tracking flushdb"
antirez,2019-07-18 10:37:55,https://api.github.com/repos/antirez/redis/git/commits/947319cadd2d239eae9e269ed2f6ef6f240bee95,947319cadd2d239eae9e269ed2f6ef6f240bee95,RDB: update rdbLoadRio comment about EOF condition.
soloestoy,2019-07-18 08:46:19,https://api.github.com/repos/antirez/redis/git/commits/f59119aad68e92f7c08c37ab0dac9355be741198,f59119aad68e92f7c08c37ab0dac9355be741198,Client side caching: filter clients untracking
antirez,2019-07-17 15:30:02,https://api.github.com/repos/antirez/redis/git/commits/42b6305964cb3a5461402652773ceacf5dec49fd,42b6305964cb3a5461402652773ceacf5dec49fd,RDB: try to make error handling code more readable.
antirez,2019-07-17 14:46:04,https://api.github.com/repos/antirez/redis/git/commits/6b72b04a37e7a17bb1adc822d0685f6fd39886ff,6b72b04a37e7a17bb1adc822d0685f6fd39886ff,Rio: when in error condition avoid doing the operation.
antirez,2019-07-17 10:45:01,https://api.github.com/repos/antirez/redis/git/commits/5189db3d818a7058283bad4f53fe88a59ef76ff1,5189db3d818a7058283bad4f53fe88a59ef76ff1,RDB: modify rdbReportError() var name for clarity.
antirez,2019-07-17 10:36:11,https://api.github.com/repos/antirez/redis/git/commits/48d91cf4cc53e820dafa3c6d5efdf4e5a06c2c29,48d91cf4cc53e820dafa3c6d5efdf4e5a06c2c29,Rio: remember read/write error conditions.
oranagra,2019-07-16 08:00:34,https://api.github.com/repos/antirez/redis/git/commits/c56b4ddc6f216ff751f9e8e94d345eee30d9997c,c56b4ddc6f216ff751f9e8e94d345eee30d9997c,"prevent diskless replica from terminating on short read

now that replica can read rdb directly from the socket, it should avoid exiting
on short read and instead try to re-sync.

this commit tries to have minimal effects on non-diskless rdb reading.
and includes a test that tries to trigger this scenario on various read cases."
soloestoy,2019-07-17 12:33:52,https://api.github.com/repos/antirez/redis/git/commits/6191ea90a1ec8b3ebeab65e8b783b2cb6714c0d4,6191ea90a1ec8b3ebeab65e8b783b2cb6714c0d4,Client side caching: implement trackingInvalidateKeysOnFlush()
oranagra,2019-07-17 12:08:18,https://api.github.com/repos/antirez/redis/git/commits/6e07fac40542ae00ea0a3a2522482bbbd547a2da,6e07fac40542ae00ea0a3a2522482bbbd547a2da,"RM_Log - add support for logging without a context or context without module

for instance detached thread safe contexts, or various callbacks that don't
provide a context."
antirez,2019-07-17 10:26:38,https://api.github.com/repos/antirez/redis/git/commits/241d18d954289fcccd98a1183cd0d161dbf7acb1,241d18d954289fcccd98a1183cd0d161dbf7acb1,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2019-07-16 16:33:55,https://api.github.com/repos/antirez/redis/git/commits/5827b69861079ea8c88408525d526c94adab5e97,5827b69861079ea8c88408525d526c94adab5e97,"Merge pull request #6185 from AlexRenCN/unstable

fix readme.md，Redis data types should add `t_stream.c`."
antirez,2019-07-15 21:41:57,https://api.github.com/repos/antirez/redis/git/commits/4b2579a0644e469edb80e7c979f44ec7f2724368,4b2579a0644e469edb80e7c979f44ec7f2724368,"Merge pull request #5779 from madolson/dev-unstable-geo-bugfix

Fixed a rounding bug in geo.tcl"
antirez,2019-07-12 11:08:46,https://api.github.com/repos/antirez/redis/git/commits/3f1c84751a7e665c8831475cd23be1e93285d032,3f1c84751a7e665c8831475cd23be1e93285d032,"Merge pull request #6196 from AngusP/resp3

[RESP3, Minor] in networking.c double representation for -infiinity leaves out comma"
antirez,2019-07-12 10:36:33,https://api.github.com/repos/antirez/redis/git/commits/6100a82a3ab03f6e822844392eb0dfcabcd01b42,6100a82a3ab03f6e822844392eb0dfcabcd01b42,"Merge pull request #5738 from bmerry/fix-swapdb-int-overflow

Make dbSwapDatabases take args as long"
antirez,2019-07-12 10:18:33,https://api.github.com/repos/antirez/redis/git/commits/54c4e7f86c280f6a3050fdce17039c1572124007,54c4e7f86c280f6a3050fdce17039c1572124007,Vertically compact code in aofWrite().
antirez,2019-07-10 17:48:44,https://api.github.com/repos/antirez/redis/git/commits/2a99f199bc806a5659c4d7ce0ea588c4ea6c1f6d,2a99f199bc806a5659c4d7ce0ea588c4ea6c1f6d,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2019-07-10 17:46:46,https://api.github.com/repos/antirez/redis/git/commits/dad0e916ff04fbe84c6260037679e0e3250221a0,dad0e916ff04fbe84c6260037679e0e3250221a0,Client side caching: filter clients no longer there.
antirez,2019-07-10 17:43:24,https://api.github.com/repos/antirez/redis/git/commits/7567323071f8b5762d65e37d7a1777d28fbde9e7,7567323071f8b5762d65e37d7a1777d28fbde9e7,"Merge pull request #6198 from oranagra/skiplist-mem-usage

missing per-skiplist overheads in MEMORY USAGE"
antirez,2019-07-10 16:17:07,https://api.github.com/repos/antirez/redis/git/commits/c7aaf8db4d532c40c832557f71e76466eb0c819f,c7aaf8db4d532c40c832557f71e76466eb0c819f,"Client side caching: implement CLIENT GETREDIR.

This subcommand may simplify the writing of Redis client libraries
using the tracking feature and/or improve observability and debugging
capabilities."
antirez,2019-07-10 16:08:31,https://api.github.com/repos/antirez/redis/git/commits/923e4fb312d819b3dfe4a0b24d475309aad5660e,923e4fb312d819b3dfe4a0b24d475309aad5660e,Client side caching: add tracking clients in INFO.
antirez,2019-07-10 10:36:14,https://api.github.com/repos/antirez/redis/git/commits/7c9f6ebc8f77bbf3dc06008fb27036ad91667809,7c9f6ebc8f77bbf3dc06008fb27036ad91667809,Diskless replica: fix disklessLoadRestoreBackups() bug.
antirez,2019-07-10 09:42:26,https://api.github.com/repos/antirez/redis/git/commits/3bbb9a14133725e03012ad73b0b0c9f57f11a333,3bbb9a14133725e03012ad73b0b0c9f57f11a333,Diskless replica: refactoring of DBs backups.
antirez,2019-07-10 07:34:21,https://api.github.com/repos/antirez/redis/git/commits/3300e98ff003709554adf54c4da86c39dd2160d9,3300e98ff003709554adf54c4da86c39dd2160d9,Diskless replica: fix mispelled var name.
antirez,2019-07-08 16:39:59,https://api.github.com/repos/antirez/redis/git/commits/dfcbeaf11572516e13d619db9a82e2bfebe392a5,dfcbeaf11572516e13d619db9a82e2bfebe392a5,Diskless replica: a few aesthetic changes to rio.c
antirez,2019-07-08 16:32:47,https://api.github.com/repos/antirez/redis/git/commits/81b18fa3a0926b60a59083eee144cbf3d0e2fd64,81b18fa3a0926b60a59083eee144cbf3d0e2fd64,Diskless replica: a few aesthetic changes to replication.c.
antirez,2019-07-08 16:10:16,https://api.github.com/repos/antirez/redis/git/commits/d984732b3517dae198422080a6adf0cc96c1dd92,d984732b3517dae198422080a6adf0cc96c1dd92,"Merge pull request #6193 from oranagra/diskless_slave_refresh3

diskless replication on slave side (don't store rdb to file), plus some other related fixes"
oranagra,2019-07-01 12:22:29,https://api.github.com/repos/antirez/redis/git/commits/2de544cfcc6d1aa7cf6d0c75a6116f7fc27b6fd6,2de544cfcc6d1aa7cf6d0c75a6116f7fc27b6fd6,"diskless replication on slave side (don't store rdb to file), plus some other related fixes

The implementation of the diskless replication was currently diskless only on the master side.
The slave side was still storing the received rdb file to the disk before loading it back in and parsing it.

This commit adds two modes to load rdb directly from socket:
1) when-empty
2) using ""swapdb""
the third mode of using diskless slave by flushdb is risky and currently not included.

other changes:
--------------
distinguish between aof configuration and state so that we can re-enable aof only when sync eventually
succeeds (and not when exiting from readSyncBulkPayload after a failed attempt)
also a CONFIG GET and INFO during rdb loading would have lied

When loading rdb from the network, don't kill the server on short read (that can be a network error)

Fix rdb check when performed on preamble AOF

tests:
run replication tests for diskless slave too
make replication test a bit more aggressive
Add test for diskless load swapdb"
antirez,2019-07-08 10:53:34,https://api.github.com/repos/antirez/redis/git/commits/722446510faf0debf0d309708b2ed4fe4d939319,722446510faf0debf0d309708b2ed4fe4d939319,"Merge pull request #6116 from AngusP/scan-types

SCAN: New Feature `SCAN cursor [TYPE type]` modifier suggested in issue #6107"
AngusP,2019-07-08 10:04:37,https://api.github.com/repos/antirez/redis/git/commits/6eb52e200ce3af68433b69e50e2a5044f7074b08,6eb52e200ce3af68433b69e50e2a5044f7074b08,"Change typeNameCanonicalize -> getObjectTypeName, and other style changes"
antirez,2019-07-07 15:49:17,https://api.github.com/repos/antirez/redis/git/commits/4c4b7023dd335794ba31a4d0acea10ddf39df61e,4c4b7023dd335794ba31a4d0acea10ddf39df61e,"Merge pull request #6210 from gkorland/patch-3

fix build tracking.c should be tracking.o"
gkorland,2019-07-07 15:28:15,https://api.github.com/repos/antirez/redis/git/commits/2d07883cab2bc301f20ceb291904dfafa359f2f6,2d07883cab2bc301f20ceb291904dfafa359f2f6,"fix build tracking.c should be tracking.o

thanks to @rafie"
antirez,2019-07-07 15:13:11,https://api.github.com/repos/antirez/redis/git/commits/e8ae07aabfebf655e98c59c53d827c09b6cf66c7,e8ae07aabfebf655e98c59c53d827c09b6cf66c7,"Merge pull request #6162 from madolson/dev-unstable-config-refactor

Refactored yesno configs so there is less duplication"
antirez,2019-07-07 15:01:29,https://api.github.com/repos/antirez/redis/git/commits/677e95e2f5ee903682ce44a7bfd9558a22577926,677e95e2f5ee903682ce44a7bfd9558a22577926,"Merge pull request #6161 from swilly22/redismodule-loading-ctx-flag

Extend REDISMODULE_CTX_FLAGS to indicate if redis is  loading"
antirez,2019-07-05 18:25:18,https://api.github.com/repos/antirez/redis/git/commits/a714004738025aeed957d748997d1be0f8ee1a7f,a714004738025aeed957d748997d1be0f8ee1a7f,"Merge pull request #6022 from itamarhaber/RedisModule_ReplyWithCString

Adds RedisModule_ReplyWithCString"
antirez,2019-07-05 10:24:28,https://api.github.com/repos/antirez/redis/git/commits/6b29f2d83d0b15878b2de603a62d2fcb01a2ddc0,6b29f2d83d0b15878b2de603a62d2fcb01a2ddc0,Client side caching: RESP2 support.
antirez,2019-07-04 16:34:53,https://api.github.com/repos/antirez/redis/git/commits/f099def7339ad064aeae632d48405ada1ce266e0,f099def7339ad064aeae632d48405ada1ce266e0,Merge branch 'unstable' of github.com:/antirez/redis into unstable
oranagra,2019-07-04 07:02:26,https://api.github.com/repos/antirez/redis/git/commits/41c5ebcab6b1b2f9eabe78af88e75de841f8e0e5,41c5ebcab6b1b2f9eabe78af88e75de841f8e0e5,"missing per-skiplist overheads in MEMORY USAGE

these had severe impact for small zsets, for instance ones with just one
element that is longer than 64 (causing it not to be ziplist encoded)"
antirez,2019-07-04 12:06:44,https://api.github.com/repos/antirez/redis/git/commits/3e43aed1acd222806afb7fc51907a0a4358f0f38,3e43aed1acd222806afb7fc51907a0a4358f0f38,Client side caching: fix invalidate message len and content.
antirez,2019-07-03 17:16:20,https://api.github.com/repos/antirez/redis/git/commits/46edb55de94cd5d8ebf2dd910092ddaf53181fb8,46edb55de94cd5d8ebf2dd910092ddaf53181fb8,Client side caching: implement trackingInvalidateKey().
antirez,2019-07-03 10:42:16,https://api.github.com/repos/antirez/redis/git/commits/506764b3f87789bfe219da0b07b79f01917bff9f,506764b3f87789bfe219da0b07b79f01917bff9f,Client side caching: hook inside call() for tracking.
antirez,2019-07-03 09:58:20,https://api.github.com/repos/antirez/redis/git/commits/db16a861a1ca2f43f340c68c00a47b69a15a6f03,db16a861a1ca2f43f340c68c00a47b69a15a6f03,Client side caching: CLIENT TRACKING subcommand.
AngusP,2019-07-02 13:28:48,https://api.github.com/repos/antirez/redis/git/commits/593f6656c1c6ce71eccd71496bb0e62c5f0741b7,593f6656c1c6ce71eccd71496bb0e62c5f0741b7,"RESP3 double representation for -infinity is `,-inf\r\n`, not `-inf\r\n`"
antirez,2019-06-30 10:19:04,https://api.github.com/repos/antirez/redis/git/commits/c29f3bcf2e8d9fa4ebc11834ac4504eaf0393cf7,c29f3bcf2e8d9fa4ebc11834ac4504eaf0393cf7,Client side caching: enable tracking mode.
antirez,2019-06-30 00:08:41,https://api.github.com/repos/antirez/redis/git/commits/45d64f229eaa0fa17e56bf0589da78d81065344c,45d64f229eaa0fa17e56bf0589da78d81065344c,Client side caching: fields and flags for tracking mode.
antirez,2019-06-29 13:09:38,https://api.github.com/repos/antirez/redis/git/commits/a28d7918d7ba229666670f29f8202cc67f4f3a1a,a28d7918d7ba229666670f29f8202cc67f4f3a1a,Client side caching: add new file and description.
AlexRenCN,2019-06-25 10:34:35,https://api.github.com/repos/antirez/redis/git/commits/2d236d7aecbf12373618191b7ef4b2365d487c6f,2d236d7aecbf12373618191b7ef4b2365d487c6f,fix readme.md，Redis data types should add `t_stream.c`.
madolson,2019-05-31 19:05:18,https://api.github.com/repos/antirez/redis/git/commits/dd51fc5a4aa90ccd6897ed268883d4f72b15ed53,dd51fc5a4aa90ccd6897ed268883d4f72b15ed53,Refactored yesno configs so there was less duplication
AngusP,2019-06-13 16:49:33,https://api.github.com/repos/antirez/redis/git/commits/38cd5fd9f66aecc0d9a09892701cb938a48d61b1,38cd5fd9f66aecc0d9a09892701cb938a48d61b1,Spelling cannonical -> canonical
swilly22,2019-06-12 12:37:19,https://api.github.com/repos/antirez/redis/git/commits/f54d95e803cb9dc017e1d40e1a0051101d5cb7dd,f54d95e803cb9dc017e1d40e1a0051101d5cb7dd,Extend REDISMODULE_CTX_FLAGS to indicate if redis is currently loading from either RDB or AOF
AngusP,2019-06-10 16:41:44,https://api.github.com/repos/antirez/redis/git/commits/e2adea21884260dc983242cc483f4602104146e5,e2adea21884260dc983242cc483f4602104146e5,"Add char* typeNameCanonicalize(robj*) to remove duplicate code between SCAN and TYPE commands,
and to keep OBJ_* enum to string canonicalization in one place."
antirez,2019-06-07 20:54:52,https://api.github.com/repos/antirez/redis/git/commits/0cabe0cfa7290d9b14596ec38e0d0a22df65d1df,0cabe0cfa7290d9b14596ec38e0d0a22df65d1df,"Merge pull request #6149 from madolson/acl-spelling

Fixed some spelling issues in ACL codepath including a user facing error"
madolson,2019-06-07 20:20:22,https://api.github.com/repos/antirez/redis/git/commits/dd5f4378718c95eeb753ddc5cb083cd76de5694a,dd5f4378718c95eeb753ddc5cb083cd76de5694a,Fixed some spelling issues in ACL codepath including user facing error
antirez,2019-06-05 15:29:50,https://api.github.com/repos/antirez/redis/git/commits/de035c94816722dd923e4aedd852869de79a5185,de035c94816722dd923e4aedd852869de79a5185,"Merge pull request #6148 from artix75/redis_bm_dev

Redis Benchmark: prevent CONFIG failure from exiting program"
artix75,2019-06-05 14:34:55,https://api.github.com/repos/antirez/redis/git/commits/d3ed53f11b66d8af4b2334e8651a2eded880d086,d3ed53f11b66d8af4b2334e8651a2eded880d086,Redis Benchmark: prevent CONFIG failure from exiting program
AngusP,2019-05-22 15:39:04,https://api.github.com/repos/antirez/redis/git/commits/bf963253ecfd367b49081a26c1b5c410558aecfc,bf963253ecfd367b49081a26c1b5c410558aecfc,"Implement `SCAN cursor [TYPE type]` modifier suggested in issue #6107.

Add tests to check basic functionality of this optional keyword, and also tested with
a module (redisgraph). Checked quickly with valgrind, no issues.

Copies name the type name canonicalisation code from `typeCommand`, perhaps this would
be better factored out to prevent the two diverging and both needing to be edited to
add new `OBJ_*` types, but this is a little fiddly with C strings.

The [redis-doc](https://github.com/antirez/redis-doc/blob/master/commands.json) repo
will need to be updated with this new arg if accepted.

A quirk to be aware of here is that the GEO commands are backed by zsets not their own
type, so they're not distinguishable from other zsets.

Additionally, for sparse types this has the same behaviour as `MATCH` in that it may
return many empty results before giving something, even for large `COUNT`s."
antirez,2019-05-15 15:48:40,https://api.github.com/repos/antirez/redis/git/commits/fd0ee469ab165d0e005e9fe1fca1c4f5c604cd56,fd0ee469ab165d0e005e9fe1fca1c4f5c604cd56,"Merge pull request #6100 from chrizel/typo-fixes

Typo fixes in CONTRIBUTING"
chrizel,2019-05-15 14:10:48,https://api.github.com/repos/antirez/redis/git/commits/7fababd44e8b8b2df53cad0906ec5ab7c678dd44,7fababd44e8b8b2df53cad0906ec5ab7c678dd44,Typo fixes in CONTRIBUTING
antirez,2019-05-15 10:46:01,https://api.github.com/repos/antirez/redis/git/commits/fd9407dfc8dcf61628a060c6af7f92749169a5d3,fd9407dfc8dcf61628a060c6af7f92749169a5d3,Update CONTRIBUTING with present info.
antirez,2019-05-15 10:16:43,https://api.github.com/repos/antirez/redis/git/commits/074d24df1e82b5c794a5da9fb6cda5b77b60b27b,074d24df1e82b5c794a5da9fb6cda5b77b60b27b,"Narrow the effects of PR #6029 to the exact state.

CLIENT PAUSE may be used, in other contexts, for a long time making all
the slaves time out. Better for now to be more specific about what
should disable senidng PINGs.

An alternative to that would be to virtually refresh the slave
interactions when clients are paused, however for now I went for this
more conservative solution."
antirez,2019-05-15 10:03:19,https://api.github.com/repos/antirez/redis/git/commits/caf74e507e6535dab58ce6f3db19f8b594b5f7ca,caf74e507e6535dab58ce6f3db19f8b594b5f7ca,"Merge pull request #6029 from chendq8/clientpause

fix cluster failover time out"
antirez,2019-05-14 14:54:59,https://api.github.com/repos/antirez/redis/git/commits/1a1ba483900005dab36e6749b112735593561f30,1a1ba483900005dab36e6749b112735593561f30,"Test: fix slowlog test false positive.

In fast systems ""SLOWLOG RESET"" is fast enough to don't be logged even
when the time limit is ""1"" sometimes. Leading to false positives such
as:

[err]: SLOWLOG - can be disabled in tests/unit/slowlog.tcl
Expected '1' to be equal to '0'"
antirez,2019-05-13 15:30:02,https://api.github.com/repos/antirez/redis/git/commits/9724ca4e22678038c511d312a78df6e8d9d29374,9724ca4e22678038c511d312a78df6e8d9d29374,Make comment in getClientOutputBufferMemoryUsage() describing the present.
antirez,2019-05-13 15:27:06,https://api.github.com/repos/antirez/redis/git/commits/4f4676a1420a446e4233c04a80f2009aa819b21f,4f4676a1420a446e4233c04a80f2009aa819b21f,"Fix test false positive introduced by threaded I/O.

Now clients that are ready to be terminated asynchronously are processed
more often in beforeSleep() instead of being processed in serverCron().
This means that the test will not be able to catch the moment the client
was terminated, also note that the 'omem' figure now changes in big
steps, because of the new client output buffers layout.

So we have to change the test range in order to accomodate for that.
Yet the test is useful enough to be worth taking, even if its precision
is reduced by this commit. Probably if we get more problems, a thing
that makes sense is just to check that the limit is < 200k. That's more
than enough actually."
antirez,2019-05-10 16:06:40,https://api.github.com/repos/antirez/redis/git/commits/e633254ccf7c0342e981dbeb8687e54bf4a15c64,e633254ccf7c0342e981dbeb8687e54bf4a15c64,"Merge pull request #6053 from soloestoy/enhance-aof-fsync-everysec

aof: enhance AOF_FSYNC_EVERYSEC, more details in #5985"
antirez,2019-05-10 10:39:35,https://api.github.com/repos/antirez/redis/git/commits/34f6d9470105d5493871a30431a12deba658c8ef,34f6d9470105d5493871a30431a12deba658c8ef,"Merge pull request #6074 from trevor211/fixActiveExpire

Do not active expire keys in the background when the switch is off."
antirez,2019-05-10 10:37:07,https://api.github.com/repos/antirez/redis/git/commits/1e9b8d853d77c223418c5bd0f4cc48ef1e767bf5,1e9b8d853d77c223418c5bd0f4cc48ef1e767bf5,"Merge pull request #6080 from soloestoy/fix-makefile

Makefile: 1TD -> STD"
antirez,2019-05-10 10:32:47,https://api.github.com/repos/antirez/redis/git/commits/2903c56bdaa49df9f6fee9939b16077145138d49,2903c56bdaa49df9f6fee9939b16077145138d49,"Merge pull request #6073 from yossigo/fix/blocked-client-id

Preserve client->id for blocked clients."
antirez,2019-05-10 10:28:12,https://api.github.com/repos/antirez/redis/git/commits/6b490e33c438fa84d1baacd2315b040cbd6a3d7f,6b490e33c438fa84d1baacd2315b040cbd6a3d7f,"Merge pull request #6081 from Happy4Code/mod_comments

change the comments there may have a mis type"
antirez,2019-05-10 10:27:47,https://api.github.com/repos/antirez/redis/git/commits/891f4a38f66f78502ee189e76c8a222d77855bad,891f4a38f66f78502ee189e76c8a222d77855bad,"Merge pull request #6077 from zltl/patch-7

delete sdsTest() from REDIS_TEST in server.c to fix build failed"
antirez,2019-05-10 10:25:18,https://api.github.com/repos/antirez/redis/git/commits/433f7638141e1490a7d1165b99dd35d81ca38bf8,433f7638141e1490a7d1165b99dd35d81ca38bf8,"Merge pull request #6083 from tangquanawj/fix-inappropriate-add-operation-code

fix-inappropriate-add-operation-code"
antirez,2019-05-10 10:23:59,https://api.github.com/repos/antirez/redis/git/commits/402b0d0bd12add7516365f5375717f400d84d1d3,402b0d0bd12add7516365f5375717f400d84d1d3,"Merge pull request #6086 from yongman/fix-uint64-in-defrag

Fix uint64_t hash value in active defrag"
antirez,2019-05-10 10:23:42,https://api.github.com/repos/antirez/redis/git/commits/19c3d5b743ec2f14c2d20af95c2bef35c4f87a6d,19c3d5b743ec2f14c2d20af95c2bef35c4f87a6d,"Merge pull request #6087 from AngusP/linux-build-warnings

[Minor] Fix build warnings on Linux"
antirez,2019-05-10 10:22:19,https://api.github.com/repos/antirez/redis/git/commits/1212f22858e3414277ad8ccf54ae67cc224ab775,1212f22858e3414277ad8ccf54ae67cc224ab775,"Merge pull request #6091 from soloestoy/fix-test-skip-till

test cases: skiptill -> skip-till"
soloestoy,2019-05-10 08:27:25,https://api.github.com/repos/antirez/redis/git/commits/c64aec9ce7ead321f7b29f6a2a29649b36d4a4a0,c64aec9ce7ead321f7b29f6a2a29649b36d4a4a0,test cases: skiptill -> skip-till
AngusP,2019-05-08 11:13:45,https://api.github.com/repos/antirez/redis/git/commits/a1fb0be1d7c1228c7b1c076426cbdf30f9489077,a1fb0be1d7c1228c7b1c076426cbdf30f9489077,Enlarge error buffer in redis-check-aof.c to remove compiler warning of output truncation through snprintf format string
AngusP,2019-05-08 10:36:31,https://api.github.com/repos/antirez/redis/git/commits/bea09a7fa6c2d332d6b298fb7a91cc04099faf47,bea09a7fa6c2d332d6b298fb7a91cc04099faf47,Add <strings.h> include to deps/hiredis/read.c to fix Implicit Declaration of strcasecmp warning
yongman,2019-05-08 08:13:42,https://api.github.com/repos/antirez/redis/git/commits/fb4ee7f0c5ad81cae88a10587d5246a1b4f4dd84,fb4ee7f0c5ad81cae88a10587d5246a1b4f4dd84,Fix uint64_t hash value in active defrag
tangquanawj,2019-05-08 04:53:56,https://api.github.com/repos/antirez/redis/git/commits/842dd85b264f7d77a12273f8b2e7700ce99dd610,842dd85b264f7d77a12273f8b2e7700ce99dd610,"Update ziplist.c

Hi, @antirez

In the code, to get the size of ziplist, ""unsigned int bytes = ZIPLIST_HEADER_SIZE+1;"" is correct, 
but why not make it more readable and easy to understand"
antirez,2019-05-07 08:25:13,https://api.github.com/repos/antirez/redis/git/commits/f674e83215af5f15096bf53a27de6c4ccf21faae,f674e83215af5f15096bf53a27de6c4ccf21faae,"Merge pull request #6082 from soloestoy/fix-config-rewrite-memleak

fix memory leak when rewrite config file"
soloestoy,2019-05-07 07:59:16,https://api.github.com/repos/antirez/redis/git/commits/48d591a010bbe4cf0c09a4d84a55ee3f31e5664f,48d591a010bbe4cf0c09a4d84a55ee3f31e5664f,fix memory leak when rewrite config file
soloestoy,2019-05-07 05:35:27,https://api.github.com/repos/antirez/redis/git/commits/340a723b87eff9df140bfb1de239ea65e318fee1,340a723b87eff9df140bfb1de239ea65e318fee1,Makefile: 1TD -> STD
antirez,2019-05-06 16:05:33,https://api.github.com/repos/antirez/redis/git/commits/a72ab70fee267759c1e22ddb76b7945a55b7b12c,a72ab70fee267759c1e22ddb76b7945a55b7b12c,"Merge pull request #6070 from oranagra/stabilize_repl_tests

make replication tests more stable on slow machines"
antirez,2019-04-30 13:59:23,https://api.github.com/repos/antirez/redis/git/commits/3d053dbb6dea51d59709913e9c0e9f96cc1d24f8,3d053dbb6dea51d59709913e9c0e9f96cc1d24f8,Threaded IO: handleClientsWithPendingReadsUsingThreads top comment.
antirez,2019-04-30 13:55:02,https://api.github.com/repos/antirez/redis/git/commits/5baeb14cf3ca8eb345a7a7352bf482542168728e,5baeb14cf3ca8eb345a7a7352bf482542168728e,Threaded IO: configuration directive for turning on/off reads.
antirez,2019-04-30 13:39:27,https://api.github.com/repos/antirez/redis/git/commits/1c0c436757f278565b400c36e763531d073ef4bb,1c0c436757f278565b400c36e763531d073ef4bb,Threaded IO: ability to disable reads from threaded path.
antirez,2019-04-29 10:46:23,https://api.github.com/repos/antirez/redis/git/commits/90d720e7a5777ec34c93258d97592d8c6b439988,90d720e7a5777ec34c93258d97592d8c6b439988,Threaded IO: put fflush() inside tio_debug conditional.
antirez,2019-04-26 17:29:50,https://api.github.com/repos/antirez/redis/git/commits/6ab6a97fe6991d1496a3c8efa52280db3a3df3eb,6ab6a97fe6991d1496a3c8efa52280db3a3df3eb,Threaded IO: parsing WIP 2: refactoring to parse from thread.
antirez,2019-04-12 15:18:10,https://api.github.com/repos/antirez/redis/git/commits/647a66ebba5d12d461e830f174a1c90a4e96c5cd,647a66ebba5d12d461e830f174a1c90a4e96c5cd,Threaded IO: parsing WIP 1: set current_client in a better scoped way.
antirez,2019-04-08 11:12:10,https://api.github.com/repos/antirez/redis/git/commits/463ccf86642ae35e18cf0c84be4e8e9e7c905c70,463ccf86642ae35e18cf0c84be4e8e9e7c905c70,"Threaded IO: logging should be safe in I/O threads.

Potentially it is possible that we get interleaved writes, even if
serverLog() makes sure to write into a buffer and then use printf(), so
even this should be ok. However in general POSIX guarantees that writing
to the same file pointer object from multiple threads is safe. Anyway
currently we *reopen* the file at each call, but for the standard output
logging.

The logging functions actually also access global configuration while
performing the log (for instance in order to check the log level, the
log filename and so forth), however dunring the I/O threads execution
we cannot alter such shared state in any way."
antirez,2019-03-31 20:06:00,https://api.github.com/repos/antirez/redis/git/commits/8d7d2be24fb74234603667e8da4de2d2f466aff1,8d7d2be24fb74234603667e8da4de2d2f466aff1,Threaded IO: process read queue before stopping threads.
antirez,2019-03-31 19:59:50,https://api.github.com/repos/antirez/redis/git/commits/63a0ffd36a99083b909e2110a7604fe335656a8d,63a0ffd36a99083b909e2110a7604fe335656a8d,Threaded IO: read side WIP 3.
antirez,2019-03-31 13:58:54,https://api.github.com/repos/antirez/redis/git/commits/a2245f8ff146629159d8c52d60713a262fa1b69a,a2245f8ff146629159d8c52d60713a262fa1b69a,Threaded IO: read side WIP 2.
antirez,2019-03-30 10:26:58,https://api.github.com/repos/antirez/redis/git/commits/dd5b105c73a02389987e457cebbeaa801ba16977,dd5b105c73a02389987e457cebbeaa801ba16977,Threaded IO: read side WIP.
antirez,2019-03-27 17:59:39,https://api.github.com/repos/antirez/redis/git/commits/74591fb5bddc995dfaa51c05b3362e7675187b0f,74591fb5bddc995dfaa51c05b3362e7675187b0f,Threaded IO: hide more debugging printfs under conditional.
antirez,2019-03-27 17:58:45,https://api.github.com/repos/antirez/redis/git/commits/9814b2a5f3e91eafb21ff1fe865a161abf71045f,9814b2a5f3e91eafb21ff1fe865a161abf71045f,Threaded IO: make num of I/O threads configurable.
antirez,2019-03-27 17:39:13,https://api.github.com/repos/antirez/redis/git/commits/30091dc29f5a1aa9e751ab5cbec0b525cd4d0f49,30091dc29f5a1aa9e751ab5cbec0b525cd4d0f49,Threaded IO: use main thread if num of threads is 1.
antirez,2019-03-25 15:33:23,https://api.github.com/repos/antirez/redis/git/commits/ea35a81c42a738a73ec4505b69e1b0d16e31fb34,ea35a81c42a738a73ec4505b69e1b0d16e31fb34,Threaded IO: 3rd version: use the mutex only to stop the thread.
antirez,2019-03-25 11:56:48,https://api.github.com/repos/antirez/redis/git/commits/6f4f36c0fb9498cee4289655036f6dd12a0bbebb,6f4f36c0fb9498cee4289655036f6dd12a0bbebb,Threaded IO: second attempt without signaling conditions.
antirez,2019-03-25 11:16:13,https://api.github.com/repos/antirez/redis/git/commits/a2dbd9bd977b814ed69500538c3125c51c4963b5,a2dbd9bd977b814ed69500538c3125c51c4963b5,Threaded IO: allow to disable debug printf.
antirez,2017-10-24 06:35:05,https://api.github.com/repos/antirez/redis/git/commits/f468e653b5e683f945b0a4a6665c3155cc768a45,f468e653b5e683f945b0a4a6665c3155cc768a45,"Threaded IO: implement handleClientsWithPendingWritesUsingThreads().

This is just an experiment for now, there are a couple of race
conditions, mostly harmless for the performance gain experiment that
this commit represents so far.

The general idea here is to take Redis single threaded and instead
fan-out on expansive kernel calls: write(2) in this case, but the same
concept could be easily implemented for read(2) and protcol parsing.

However just threading writes like in this commit, is enough to evaluate
if the approach is sounding."
trevor211,2019-05-06 03:46:07,https://api.github.com/repos/antirez/redis/git/commits/1c0913dc4e22701726b3a39386a17a83058ad24c,1c0913dc4e22701726b3a39386a17a83058ad24c,Do not active expire keys in the background when the switch is off.
yossigo,2019-05-05 17:32:53,https://api.github.com/repos/antirez/redis/git/commits/9f3679880a7cebc3ce73142e2e19ae3e1150f457,9f3679880a7cebc3ce73142e2e19ae3e1150f457,Preserve client->id for blocked clients.
oranagra,2019-05-05 05:19:52,https://api.github.com/repos/antirez/redis/git/commits/ba809f26d4bd81d23fa929d0c018f235ab298564,ba809f26d4bd81d23fa929d0c018f235ab298564,"make replication tests more stable on slow machines

solving few replication related tests race conditions which fail on slow machines

bugfix in slave buffers test: since the test is executed twice, each time with
a different commands count, the threshold for the delta can't be a constant."
antirez,2019-05-02 07:48:02,https://api.github.com/repos/antirez/redis/git/commits/0a6090bfd8fbec26f682ff0a1dc7a43699e0c9b7,0a6090bfd8fbec26f682ff0a1dc7a43699e0c9b7,"Merge pull request #6051 from vattezhang/unstable

 fix: benchmark auth fails when server have requirepass"
soloestoy,2019-04-29 06:38:28,https://api.github.com/repos/antirez/redis/git/commits/bcac165fabcbec43843800e3f2fcb69a201d8b50,bcac165fabcbec43843800e3f2fcb69a201d8b50,"aof: enhance AOF_FSYNC_EVERYSEC, more details in #5985"
antirez,2019-04-26 15:32:21,https://api.github.com/repos/antirez/redis/git/commits/843de8b786562d8d77c78d83a971060adc61f77a,843de8b786562d8d77c78d83a971060adc61f77a,"Merge pull request #5971 from devnexen/unstable

build fix"
antirez,2019-04-26 15:31:42,https://api.github.com/repos/antirez/redis/git/commits/5ba908fa5ff43f092e28d425230cdbfc2796421a,5ba908fa5ff43f092e28d425230cdbfc2796421a,"Merge pull request #6002 from yongman/fix-memleak-in-bitfield

Fix memleak in bitfieldCommand"
antirez,2019-04-26 15:25:20,https://api.github.com/repos/antirez/redis/git/commits/5c5197fe4f40ad697d5350529989f38122327bd1,5c5197fe4f40ad697d5350529989f38122327bd1,"Merge pull request #6013 from rouzier/fix/stream_iterator_init

Fix stream interator start and end key initialize"
antirez,2019-04-26 15:17:55,https://api.github.com/repos/antirez/redis/git/commits/2d450d1315ea7fc0f285ad2a97a35ac90eb87503,2d450d1315ea7fc0f285ad2a97a35ac90eb87503,"Merge pull request #6039 from git-hulk/fix/benchmark-coredump-in-arguments

FIX: coredump in redis-benchmark"
abhaynahar,2019-04-25 08:20:25,https://api.github.com/repos/antirez/redis/git/commits/162208f94d57b95ef57a3615549f244691213234,162208f94d57b95ef57a3615549f244691213234,removed obsolete warning as per - https://github.com/antirez/redis/issues/5291
vattezhang,2019-04-26 11:47:07,https://api.github.com/repos/antirez/redis/git/commits/4e38ced4886446efb70f96685a6a6dfa344095d4,4e38ced4886446efb70f96685a6a6dfa344095d4,fix: benchmark auth fails when server have requirepass
vattezhang,2019-04-26 10:50:51,https://api.github.com/repos/antirez/redis/git/commits/bc36404c79b50e80583d4a98a7211bd239fc88f9,bc36404c79b50e80583d4a98a7211bd239fc88f9, update
vattezhang,2019-04-26 10:47:11,https://api.github.com/repos/antirez/redis/git/commits/d3d96b041a7880f0d1c7ae0853dc844d24bf7340,d3d96b041a7880f0d1c7ae0853dc844d24bf7340,Merge github.com:antirez/redis into unstable
git-hulk,2019-04-23 12:08:14,https://api.github.com/repos/antirez/redis/git/commits/fa97ef34ca5899ef482c543d7122a41fba8e4509,fa97ef34ca5899ef482c543d7122a41fba8e4509,FIX: core dump in redis-benchmark when the `-r` is the last arg
itamarhaber,2019-04-16 14:38:33,https://api.github.com/repos/antirez/redis/git/commits/c184b32d4c8a59614b29d11c72ba2007c8d147d5,c184b32d4c8a59614b29d11c72ba2007c8d147d5,"Uses addReplyBulkCString

Signed-off-by: Itamar Haber <itamar@redislabs.com>"
itamarhaber,2019-04-16 14:15:23,https://api.github.com/repos/antirez/redis/git/commits/26d9d4ec2c38c12dd99733db4e415a8bcfd01dc0,26d9d4ec2c38c12dd99733db4e415a8bcfd01dc0,"Adds RedisModule_ReplyWithCString

Signed-off-by: Itamar Haber <itamar@redislabs.com>"
antirez,2019-04-15 14:50:48,https://api.github.com/repos/antirez/redis/git/commits/4a5057000a3af2b970f7e8044ee199fc5d256dd8,4a5057000a3af2b970f7e8044ee199fc5d256dd8,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2019-04-15 14:50:26,https://api.github.com/repos/antirez/redis/git/commits/487601d85d95acf71414dee8328e65e8b4fafe08,487601d85d95acf71414dee8328e65e8b4fafe08,Test: disable module testing for now.
rouzier,2019-04-11 16:19:02,https://api.github.com/repos/antirez/redis/git/commits/3ccdcbc0880e4f6a6e577bed29826064d03c9509,3ccdcbc0880e4f6a6e577bed29826064d03c9509,Fix start and end key initialize
antirez,2019-04-11 14:56:23,https://api.github.com/repos/antirez/redis/git/commits/d044e33c20d5448945c763d1421c154953156e5c,d044e33c20d5448945c763d1421c154953156e5c,"Merge pull request #5961 from yossigo/modules-tests

Modules tests"
antirez,2019-04-10 16:53:27,https://api.github.com/repos/antirez/redis/git/commits/9e67691ffb4709535b56a089a973c3f89bfbe231,9e67691ffb4709535b56a089a973c3f89bfbe231,Aesthetic change to #5962 to conform to Redis style.
antirez,2019-04-10 16:41:36,https://api.github.com/repos/antirez/redis/git/commits/6de5d25062ef884beb6f9425b86dbc2b81e733fe,6de5d25062ef884beb6f9425b86dbc2b81e733fe,"Merge pull request #5962 from oranagra/module_blocked_reply

slave corrupts replication stream when module blocked client uses large reply (or POSTPONED_ARRAY)"
yongman,2019-04-09 01:24:22,https://api.github.com/repos/antirez/redis/git/commits/d490752d58ecd0a815bdbbb350b550919fcc7a4a,d490752d58ecd0a815bdbbb350b550919fcc7a4a,Fix memleak in bitfieldCommand
antirez,2019-04-08 16:08:37,https://api.github.com/repos/antirez/redis/git/commits/c24e32041b91ac32626e8d8eee1c062942e25f27,c24e32041b91ac32626e8d8eee1c062942e25f27,"ACL: Fix memory leak in ACLResetSubcommandsForCommand().

This commit fixes bug reported at #5998. Thanks to @tomcat1102."
antirez,2019-04-08 16:06:50,https://api.github.com/repos/antirez/redis/git/commits/f8a9708aa705b6493ef63a82e42ed428997b817a,f8a9708aa705b6493ef63a82e42ed428997b817a,ACL: regression test for #5998.
antirez,2019-04-08 15:39:22,https://api.github.com/repos/antirez/redis/git/commits/75648f99a5ba41812c115f83f8b668f030acfaee,75648f99a5ba41812c115f83f8b668f030acfaee,Fix assert comparison in fetchClusterSlotsConfiguration().
devnexen,2019-03-28 06:38:16,https://api.github.com/repos/antirez/redis/git/commits/4de88828d9d64b7d64b5ee75f9fb8d25aa1dfaa5,4de88828d9d64b7d64b5ee75f9fb8d25aa1dfaa5,build fix
oranagra,2019-03-24 11:10:55,https://api.github.com/repos/antirez/redis/git/commits/acba2fc9b4c8082e5344d2d53e51dc4c1c37942c,acba2fc9b4c8082e5344d2d53e51dc4c1c37942c,"slave corrupts replication stream when module blocked client uses large reply (or POSTPONED_ARRAY)

when redis appends the blocked client reply list to the real client, it didn't
bother to check if it is in fact the master client. so a slave executing that
module command will send replies to the master, causing the master to send the
slave error responses, which will mess up the replication offset
(slave will advance it's replication offset, and the master does not)"
yossigo,2019-03-24 10:03:03,https://api.github.com/repos/antirez/redis/git/commits/ec0b6bd2c35a617101a2e874307be8ae9b504ac0,ec0b6bd2c35a617101a2e874307be8ae9b504ac0,Add runtest-moduleapi with commandfilter coverage.
yossigo,2019-03-24 10:00:33,https://api.github.com/repos/antirez/redis/git/commits/822a992f913484162ce508fdb073d8f2ddb6d7c8,822a992f913484162ce508fdb073d8f2ddb6d7c8,fix: missing initialization.
antirez,2019-03-22 16:43:49,https://api.github.com/repos/antirez/redis/git/commits/5e8caca0366e5fdf5fc36292c86964360203de77,5e8caca0366e5fdf5fc36292c86964360203de77,"Merge pull request #5944 from yossigo/command-filtering

Command Filtering API"
antirez,2019-03-22 16:41:40,https://api.github.com/repos/antirez/redis/git/commits/fcac34295529c570fb28f9427f9825f914ef0ed2,fcac34295529c570fb28f9427f9825f914ef0ed2,"Merge pull request #3830 from oranagra/diskless_capa_pr

several bugfixes to diskless replication"
antirez,2019-03-22 16:41:00,https://api.github.com/repos/antirez/redis/git/commits/122f42844adf8aa30f6e7455d0617131d0379985,122f42844adf8aa30f6e7455d0617131d0379985,"Merge pull request #5945 from dvirsky/miss_notification

Added keyspace miss notifications support"
oranagra,2017-03-21 14:20:02,https://api.github.com/repos/antirez/redis/git/commits/29b0a5769576327af24b592f5e2d745fe884c73c,29b0a5769576327af24b592f5e2d745fe884c73c,diskless fork kept streaming RDB to a disconnected slave
yossigo,2019-03-21 17:47:43,https://api.github.com/repos/antirez/redis/git/commits/6c0a5fde3d0d90c85f086ca955f9473fe41797b3,6c0a5fde3d0d90c85f086ca955f9473fe41797b3,"CommandFilter API: REDISMODULE_CMDFILTER_NOSELF.

Add a flag to automatically protect filters from being called
recursively by their own module."
yossigo,2019-03-21 17:45:41,https://api.github.com/repos/antirez/redis/git/commits/4ea3ed896b286c8f2bf192e07e1c36802a3a1c38,4ea3ed896b286c8f2bf192e07e1c36802a3a1c38,CommandFilter API: fix UnregisterCommandFilter.
antirez,2019-03-21 16:21:25,https://api.github.com/repos/antirez/redis/git/commits/b3408e9a9b1bdf8ea59bf80d715c695a113820f3,b3408e9a9b1bdf8ea59bf80d715c695a113820f3,"More sensible name for function: restartAOFAfterSYNC().

Related to #3829."
antirez,2019-03-21 16:18:24,https://api.github.com/repos/antirez/redis/git/commits/9588fd52ac3333d0bf3243523ec9a165fa18f87e,9588fd52ac3333d0bf3243523ec9a165fa18f87e,"Mostly aesthetic changes to restartAOF().

See #3829."
antirez,2019-03-21 16:15:55,https://api.github.com/repos/antirez/redis/git/commits/544373ea66def918b50e6619f299cea28b8563e0,544373ea66def918b50e6619f299cea28b8563e0,"Merge pull request #3829 from oranagra/restart_aof_pr

bugfix to restartAOF, exit will never happen"
yossigo,2019-03-21 12:44:49,https://api.github.com/repos/antirez/redis/git/commits/e2626f69eccc7addf9283285a6849f798e882af8,e2626f69eccc7addf9283285a6849f798e882af8,"CommandFilter API: Add unregister option.

A filter handle is returned and can be used to unregister a filter.  In
the future it can also be used to further configure or manipulate the
filter.

Filters are now automatically unregistered when a module unloads."
antirez,2019-03-21 12:39:38,https://api.github.com/repos/antirez/redis/git/commits/d75c36ee4830137bf06d4a979c7a23d2d79e9b29,d75c36ee4830137bf06d4a979c7a23d2d79e9b29,"Merge pull request #5390 from oranagra/lookup_key_write

change SORT and SPOP to use lookupKeyWrite rather than lookupKeyRead"
antirez,2019-03-21 11:18:55,https://api.github.com/repos/antirez/redis/git/commits/9dabbd1ab072f3abced48b4995d9ef3e745f0608,9dabbd1ab072f3abced48b4995d9ef3e745f0608,Alter coding style in #4696 to conform to Redis code base.
antirez,2019-03-21 11:18:04,https://api.github.com/repos/antirez/redis/git/commits/5c47e2e96451fd4f2e45159f0ad1d6ac4a409bc5,5c47e2e96451fd4f2e45159f0ad1d6ac4a409bc5,"Merge pull request #4696 from oranagra/zrealloc_fix

Fix zrealloc to behave similarly to je_realloc when size is 0"
antirez,2019-03-21 10:54:09,https://api.github.com/repos/antirez/redis/git/commits/5c21eca66eb2d83f32c8531e84ed63e29156d714,5c21eca66eb2d83f32c8531e84ed63e29156d714,"Merge pull request #5243 from oranagra/sigterm_log

Add log when server dies of SIGTERM during loading"
antirez,2019-03-21 10:53:27,https://api.github.com/repos/antirez/redis/git/commits/ce518cea79fcfb656c7366bf964f81d43b300f16,ce518cea79fcfb656c7366bf964f81d43b300f16,"Merge pull request #5391 from oranagra/touch_flags

getKeysFromCommand for TOUCH only extracted the first key."
antirez,2019-03-21 10:49:25,https://api.github.com/repos/antirez/redis/git/commits/684b140a1355bbad45df4e13109c8cd6edb0960e,684b140a1355bbad45df4e13109c8cd6edb0960e,"Merge pull request #3650 from yossigo/key_name_from_module_io

Add RedisModule_GetKeyNameFromIO()"
dvirsky,2019-03-21 10:48:37,https://api.github.com/repos/antirez/redis/git/commits/bc269c85e1d7ff15a377aff5197a1a670c65aab9,bc269c85e1d7ff15a377aff5197a1a670c65aab9,remove extra linebreak
dvirsky,2019-03-21 10:47:51,https://api.github.com/repos/antirez/redis/git/commits/4a0ee5c6ac7908ee41e69c2d7ace55f698d94418,4a0ee5c6ac7908ee41e69c2d7ace55f698d94418,Added missing REDISMODULE_NOTIFY_KEY_MISS flag to REDISMODULE_NOTIFY_ALL
dvirsky,2019-03-21 09:47:14,https://api.github.com/repos/antirez/redis/git/commits/99c2fe0bcf9876daf774fa7df4939cadc7972129,99c2fe0bcf9876daf774fa7df4939cadc7972129,added special flag for keyspace miss notifications
oranagra,2019-03-20 15:46:19,https://api.github.com/repos/antirez/redis/git/commits/b2e03f83292e65602a6c7dcaad1f6977f39f0b30,b2e03f83292e65602a6c7dcaad1f6977f39f0b30,"diskless replication - notify slave when rdb transfer failed

in diskless replication - master was not notifing the slave that rdb transfer
terminated on error, and lets slave wait for replication timeout"
oranagra,2017-02-23 11:13:44,https://api.github.com/repos/antirez/redis/git/commits/c9e2900efc1ed33727356df114fb716442ae2ce6,c9e2900efc1ed33727356df114fb716442ae2ce6,"bugfix to restartAOF, exit will never happen since retry will get negative.

also reduce an excess sleep"
oranagra,2018-09-27 15:03:47,https://api.github.com/repos/antirez/redis/git/commits/747174388f305148b0832dd97b9754e2a64bdfef,747174388f305148b0832dd97b9754e2a64bdfef,"change SORT and SPOP to use lookupKeyWrite rather than lookupKeyRead

like in SUNIONSTORE etc, commands that perform writes are expected to open
all keys, even input keys, with lookupKeyWrite"
oranagra,2018-09-27 15:12:31,https://api.github.com/repos/antirez/redis/git/commits/385f6190a3a9f8d2d5775bd058aaa2173dc05c8c,385f6190a3a9f8d2d5775bd058aaa2173dc05c8c,"getKeysFromCommand for TOUCH only extracted the first key.

also, airty for COMMAND command was wrong."
yossigo,2019-03-19 17:48:47,https://api.github.com/repos/antirez/redis/git/commits/dd8b4be46baf86dc4f5e2c787a72b9d31faecdc0,dd8b4be46baf86dc4f5e2c787a72b9d31faecdc0,CommandFilter API: Extend documentation.
dvirsky,2019-03-19 11:11:37,https://api.github.com/repos/antirez/redis/git/commits/8620a434a058aa5c66cccf2cc571e4337c73d12b,8620a434a058aa5c66cccf2cc571e4337c73d12b,Added keyspace miss notifications support
yossigo,2019-03-18 21:07:28,https://api.github.com/repos/antirez/redis/git/commits/a9a6a894e82442600f11d97d23f70b90316ca0a4,a9a6a894e82442600f11d97d23f70b90316ca0a4,CommandFilter API: hellofilter and tests.
yossigo,2019-03-18 21:06:38,https://api.github.com/repos/antirez/redis/git/commits/325fc1cb2e2e15a99e5d012184d177dc19257036,325fc1cb2e2e15a99e5d012184d177dc19257036,CommandFilter API: Support Lua and RM_call() flows.
yossigo,2019-03-18 21:05:52,https://api.github.com/repos/antirez/redis/git/commits/2a5aeef79f894b80024d49ec1036ac03ae7ac5c5,2a5aeef79f894b80024d49ec1036ac03ae7ac5c5,CommandFilter API: More cleanup.
yossigo,2019-03-18 17:34:52,https://api.github.com/repos/antirez/redis/git/commits/9095e4dc9bbb8c0311e0df2af556295ca6ce92ca,9095e4dc9bbb8c0311e0df2af556295ca6ce92ca,Add command filter Module API tests.
yossigo,2019-03-18 16:36:46,https://api.github.com/repos/antirez/redis/git/commits/67111320835ee46498ea0e4de07dab5cb59584da,67111320835ee46498ea0e4de07dab5cb59584da,Add command filtering argument handling API.
antirez,2019-03-18 14:49:52,https://api.github.com/repos/antirez/redis/git/commits/3eaa2cdc44a9b0742f0695f44911b92547995836,3eaa2cdc44a9b0742f0695f44911b92547995836,MANIFESTO: simplicity and lock-in.
antirez,2019-03-18 14:38:43,https://api.github.com/repos/antirez/redis/git/commits/a5af648fdddaf93e89735a8577b56f12379d1dd2,a5af648fdddaf93e89735a8577b56f12379d1dd2,MANIFESTO v2.
yossigo,2018-02-23 14:19:37,https://api.github.com/repos/antirez/redis/git/commits/c3e187190b5e48e69f666c8faa2100253a9b536e,c3e187190b5e48e69f666c8faa2100253a9b536e,Initial command filter experiment.
antirez,2019-03-18 10:34:40,https://api.github.com/repos/antirez/redis/git/commits/14b17c3615108fdbca5e7fe4d2c3f0e8b7454521,14b17c3615108fdbca5e7fe4d2c3f0e8b7454521,replicaofCommand() refactoring: stay into 80 cols.
antirez,2019-03-18 10:15:39,https://api.github.com/repos/antirez/redis/git/commits/b78ac354f41e370a4dc21ac01981cb0ccd0a1b7d,b78ac354f41e370a4dc21ac01981cb0ccd0a1b7d,"redis-check-aof: fix potential overflow.

Bug signaled by @vattezhang in PR #5940 but fixed differently."
antirez,2019-03-16 08:15:12,https://api.github.com/repos/antirez/redis/git/commits/8ea906a3e8f3e125baa9cf54f6027921d3822b02,8ea906a3e8f3e125baa9cf54f6027921d3822b02,HyperLogLog: fix comment in hllCount().
antirez,2019-03-15 16:16:06,https://api.github.com/repos/antirez/redis/git/commits/e216ceaf0e099536fe3658a29dcb725d812364e0,e216ceaf0e099536fe3658a29dcb725d812364e0,HyperLogLog: handle wrong offset in the base case.
antirez,2019-03-15 16:13:19,https://api.github.com/repos/antirez/redis/git/commits/dca7358279bb6449f93e01f7d2806639b8e9ec4b,dca7358279bb6449f93e01f7d2806639b8e9ec4b,HyperLogLog: speedup fuzz test.
antirez,2019-03-15 16:10:16,https://api.github.com/repos/antirez/redis/git/commits/a4b90be9fcd5e1668ac941cabce3b1ab38dbe326,a4b90be9fcd5e1668ac941cabce3b1ab38dbe326,HyperLogLog: enlarge reghisto variable for safety.
antirez,2019-03-15 12:52:29,https://api.github.com/repos/antirez/redis/git/commits/4208666797b5831eefc022ae46ab5747200cd671,4208666797b5831eefc022ae46ab5747200cd671,HyperLogLog: dense/sparse repr parsing fuzz test.
JohnSully,2019-03-14 18:02:16,https://api.github.com/repos/antirez/redis/git/commits/9f13b2bd4967334b1701c6eccdf53760cb13f79e,9f13b2bd4967334b1701c6eccdf53760cb13f79e,Fix hyperloglog corruption
yossigo,2016-11-30 19:47:02,https://api.github.com/repos/antirez/redis/git/commits/a88264d934744b23c02d92a3ba3fccbe070af0b4,a88264d934744b23c02d92a3ba3fccbe070af0b4,Add RedisModule_GetKeyNameFromIO().
antirez,2019-03-14 16:51:14,https://api.github.com/repos/antirez/redis/git/commits/74d6af8f8094b6d9e2e4bb7ea4eca1941f6412c0,74d6af8f8094b6d9e2e4bb7ea4eca1941f6412c0,Fix ZPOP return type when COUNT=0. Related to #5799.
antirez,2019-03-14 16:06:59,https://api.github.com/repos/antirez/redis/git/commits/052e03495f3e6da64d814f80a5dae91721009317,052e03495f3e6da64d814f80a5dae91721009317,Fix objectSetLRUOrLFU() when LFU underflows.
antirez,2019-03-14 11:47:36,https://api.github.com/repos/antirez/redis/git/commits/d292a516181293b54bb7b8d25e0647ae74b5ea62,d292a516181293b54bb7b8d25e0647ae74b5ea62,Improve comments after merging #5834.
antirez,2019-03-14 11:41:31,https://api.github.com/repos/antirez/redis/git/commits/0cce98f2f98cd90d799f75719756d8cffa3a3c84,0cce98f2f98cd90d799f75719756d8cffa3a3c84,"Merge pull request #5834 from guybe7/trim_module_sds

Trim SDS free space of retained module strings"
antirez,2019-03-14 11:30:10,https://api.github.com/repos/antirez/redis/git/commits/178114e766dd996d884a1c28a9186368d7788621,178114e766dd996d884a1c28a9186368d7788621,"Merge pull request #5931 from guybe7/fix_notify_classes

Fix mismatching keyspace notification classes"
guybe7,2019-03-14 11:11:16,https://api.github.com/repos/antirez/redis/git/commits/b2eb48df89d8513a359faa677146d3c36e6266ab,b2eb48df89d8513a359faa677146d3c36e6266ab,Fix mismatching keyspace notification classes
antirez,2019-03-14 10:44:56,https://api.github.com/repos/antirez/redis/git/commits/d3cd2e9a4a6f6f1ed5c410f40ec6c3310d2b44b8,d3cd2e9a4a6f6f1ed5c410f40ec6c3310d2b44b8,"Merge pull request #4742 from guybe7/zrangebylex_leak

Fix zlexrangespec mem-leak in genericZrangebylexCommand"
antirez,2019-03-14 10:43:55,https://api.github.com/repos/antirez/redis/git/commits/ec03f2db6b9e761f1fc712dcd5798e4675461881,ec03f2db6b9e761f1fc712dcd5798e4675461881,"Merge pull request #4904 from guybe7/memtoll_fix

Use memtoll() in 'CONFIG SET client-output-buffer-limit'"
antirez,2019-03-14 10:35:01,https://api.github.com/repos/antirez/redis/git/commits/190b63f9933b5bbc6659cb651c2c78a76732eced,190b63f9933b5bbc6659cb651c2c78a76732eced,"Merge pull request #5812 from guybe7/fix_string2ld

Increase string2ld's buffer size (and fix HINCRBYFLOAT)"
antirez,2019-03-14 10:32:03,https://api.github.com/repos/antirez/redis/git/commits/01ace0b240df2801988e80b13796902bd796f2fd,01ace0b240df2801988e80b13796902bd796f2fd,"Merge pull request #5694 from guybe7/rm_log_args

Check server.verbosity in RM_LogRaw"
antirez,2019-03-14 10:29:24,https://api.github.com/repos/antirez/redis/git/commits/ebf727419229d98bb3bbd3f77f0f975f8201d6bf,ebf727419229d98bb3bbd3f77f0f975f8201d6bf,"Merge pull request #5799 from guybe7/zpop_zero_count

ZPOP should return an empty array if COUNT=0"
antirez,2019-03-14 10:24:48,https://api.github.com/repos/antirez/redis/git/commits/6fd4af1f1208059d0a1eeebd8941756bd6403d81,6fd4af1f1208059d0a1eeebd8941756bd6403d81,Merge branch 'sharedapi' into unstable
vattezhang,2019-03-13 12:46:33,https://api.github.com/repos/antirez/redis/git/commits/ad223e204222dca7758eb540a455bca93e62b861,ad223e204222dca7758eb540a455bca93e62b861,fix: fix benchmark cannot exit when NOAUTH err happens
vattezhang,2019-03-13 12:26:54,https://api.github.com/repos/antirez/redis/git/commits/31110f1caf52fbf09092093fb9f009e3a528b302,31110f1caf52fbf09092093fb9f009e3a528b302,Merge branch 'unstable' of github.com:antirez/redis into unstable
antirez,2019-03-13 11:34:29,https://api.github.com/repos/antirez/redis/git/commits/2537b2140fc45187f8a723505892870b362260d6,2537b2140fc45187f8a723505892870b362260d6,"Merge pull request #5787 from soloestoy/bugfix-xgroup-create-with-mkstream

Streams: checkType before XGROUP CREATE"
antirez,2019-03-13 11:27:35,https://api.github.com/repos/antirez/redis/git/commits/71499ab1c61bd5a24c3e41c89168e4adc0a70b3f,71499ab1c61bd5a24c3e41c89168e4adc0a70b3f,"Merge pull request #5893 from itamarhaber/bzpop-arity

Fixes BZ[REV]POP's arity"
antirez,2019-03-13 11:26:43,https://api.github.com/repos/antirez/redis/git/commits/c49abcb794ce7fc5566bda0baaf9c60bf0c551dc,c49abcb794ce7fc5566bda0baaf9c60bf0c551dc,"Merge pull request #5898 from bsolomon1124/make-uninstall-tgt

Provide an uninstall target in Makefile"
antirez,2019-03-13 11:22:23,https://api.github.com/repos/antirez/redis/git/commits/372cbc37e7bb6e883966669f1825a1c121692196,372cbc37e7bb6e883966669f1825a1c121692196,"Merge pull request #5884 from chendq8/cluster_failover

Reduce 100ms of cluster failover time on Manual mode"
antirez,2019-03-13 11:19:03,https://api.github.com/repos/antirez/redis/git/commits/46a8cb2d187d830a97c9f9b4735e8ded806bf9c3,46a8cb2d187d830a97c9f9b4735e8ded806bf9c3,"Merge pull request #5910 from bsolomon1124/install-server-osx-note

Note that install_server.sh is not for Mac OSX"
antirez,2019-03-13 11:18:32,https://api.github.com/repos/antirez/redis/git/commits/84d6ce4f56c346cf35d7b3a8f11de6961268408c,84d6ce4f56c346cf35d7b3a8f11de6961268408c,"Merge pull request #5901 from artix75/bm_threads_cluster_dev

Redis Benchmark: add multithread idle mode"
antirez,2019-03-13 11:18:08,https://api.github.com/repos/antirez/redis/git/commits/53d1dc170cdf3e46f6b2e6d063fa7ad6ce218248,53d1dc170cdf3e46f6b2e6d063fa7ad6ce218248,"Merge pull request #5921 from vattezhang/unstable_temp

fix: fix the if condition in clusterManagerShowClusterInfo"
antirez,2019-03-13 10:55:46,https://api.github.com/repos/antirez/redis/git/commits/3e648907ee4c50458f07dc4a525f094063cd5ba3,3e648907ee4c50458f07dc4a525f094063cd5ba3,"Merge pull request #5907 from spjwebster/xclaim-increment-delivery-count

Increment delivery counter on XCLAIM unless RETRYCOUNT specified"
antirez,2019-03-13 10:52:07,https://api.github.com/repos/antirez/redis/git/commits/610aff32517536e02d8ddd2600e9813fd7905f99,610aff32517536e02d8ddd2600e9813fd7905f99,"Merge pull request #5924 from swilly22/redismodule-replicated-cmd-ctx-flag

document additional flag of RM_GetContextFlags"
antirez,2019-03-13 10:47:48,https://api.github.com/repos/antirez/redis/git/commits/02dab200260fc79cd6c52a9d774ea240671b7558,02dab200260fc79cd6c52a9d774ea240671b7558,"Merge pull request #5894 from soloestoy/fix-rdb-warning

Fix compile some warnings"
soloestoy,2019-03-13 08:54:34,https://api.github.com/repos/antirez/redis/git/commits/5a3d3d8be414d201abb670313f2801aeadd9ba69,5a3d3d8be414d201abb670313f2801aeadd9ba69,Fix compile warning in redis-cli.c
swilly22,2019-03-13 06:22:40,https://api.github.com/repos/antirez/redis/git/commits/89bf4db4fa41aaedac59c720e837f9e3235d5ad7,89bf4db4fa41aaedac59c720e837f9e3235d5ad7,document additional flag of RM_GetContextFlags
spjwebster,2019-03-12 20:27:53,https://api.github.com/repos/antirez/redis/git/commits/dfcb227b5066275df18734ea7a6ab19212e57f1f,dfcb227b5066275df18734ea7a6ab19212e57f1f,Only increment delivery count if JUSTID option is omitted
antirez,2019-03-12 17:10:28,https://api.github.com/repos/antirez/redis/git/commits/e5acc5ef4f1b163d5a98cf54895c2c6c7d9327fd,e5acc5ef4f1b163d5a98cf54895c2c6c7d9327fd,"Merge pull request #2774 from rouzier/blocking-list-commands-support-milliseconds-floating

Added millisecond resolution for blpop command && friends"
antirez,2019-03-12 16:25:21,https://api.github.com/repos/antirez/redis/git/commits/fba6e26e87da051dfc4aa55272b78861694f6ee2,fba6e26e87da051dfc4aa55272b78861694f6ee2,"Merge pull request #5913 from wurongxin1987/unstable

fix a bufferoverflow bug"
antirez,2019-03-12 16:21:17,https://api.github.com/repos/antirez/redis/git/commits/b0bc602bb3f38e5b26a912c6395a0fdc3404c909,b0bc602bb3f38e5b26a912c6395a0fdc3404c909,"Merge pull request #5900 from artix75/cluster_backup

Cluster Manager: add importing/migrating nodes to backup info"
antirez,2019-03-12 16:20:52,https://api.github.com/repos/antirez/redis/git/commits/c02b414e9a46cb3085aa06e56ed470270d78a15b,c02b414e9a46cb3085aa06e56ed470270d78a15b,"Merge pull request #5903 from soloestoy/sunionstore-lazyfree

try lazyfree temp set in SUNION & SDIFF"
antirez,2019-03-12 16:17:19,https://api.github.com/repos/antirez/redis/git/commits/45645aee7f73fa63cad38226126fbfede65b9431,45645aee7f73fa63cad38226126fbfede65b9431,"Merge pull request #5915 from swilly22/redismodule-replicated-cmd-ctx-flag

Extend REDISMODULE_CTX_FLAGS to indicate if command was sent by master"
artix75,2019-03-12 16:07:19,https://api.github.com/repos/antirez/redis/git/commits/5284d67e376eee1a01eece66a6d0e3273051f359,5284d67e376eee1a01eece66a6d0e3273051f359,"Redis Benchmark: fix possible usage of freed pointer (getRedisConfig)

Fixes issue #5912"
antirez,2019-03-12 16:03:02,https://api.github.com/repos/antirez/redis/git/commits/f63bbb4335165b222c4549e1a149ec49261b2ecf,f63bbb4335165b222c4549e1a149ec49261b2ecf,"Merge pull request #5920 from chendq8/aofrewrite

remove temp-rewriteaof-xxx.aof when interrupt aofrewrite"
vattezhang,2019-03-12 14:01:02,https://api.github.com/repos/antirez/redis/git/commits/bdc783b472769e9881b42ed8c45583ab98a791e8,bdc783b472769e9881b42ed8c45583ab98a791e8,fix: fix the if condition in clusterManagerShowClusterInfo
vattezhang,2019-03-12 13:52:20,https://api.github.com/repos/antirez/redis/git/commits/270a11143320c7dcc100d4ed0b6bfc7a4bd40b31,270a11143320c7dcc100d4ed0b6bfc7a4bd40b31,Merge branch 'unstable' of github.com:antirez/redis into unstable
swilly22,2019-03-11 08:02:19,https://api.github.com/repos/antirez/redis/git/commits/468860ae18b11486f734c476bc2930de7860abe1,468860ae18b11486f734c476bc2930de7860abe1,Extend REDISMODULE_CTX_FLAGS to indicate if command was sent by master
antirez,2019-03-10 08:48:06,https://api.github.com/repos/antirez/redis/git/commits/8a46d32be2eaf07b6b2e8c3757e4d9f59cd1ab64,8a46d32be2eaf07b6b2e8c3757e4d9f59cd1ab64,Make comment in #5911 stay inside 80 cols.
antirez,2019-03-10 08:45:55,https://api.github.com/repos/antirez/redis/git/commits/55acac04b439b758bfcc0bdc3d956df288044e29,55acac04b439b758bfcc0bdc3d956df288044e29,"Merge pull request #5911 from JohnSully/unstable

Replicas aren't allowed to run the replicaof command"
wurongxin1987,2019-03-10 07:30:32,https://api.github.com/repos/antirez/redis/git/commits/0298d3ad1833c0085ebc26baeda58dc3a511de25,0298d3ad1833c0085ebc26baeda58dc3a511de25,fix a bufferoverflow bug
JohnSully,2019-03-09 16:03:59,https://api.github.com/repos/antirez/redis/git/commits/5b52bc738bcf0881d07805dc300aeee9cf555b77,5b52bc738bcf0881d07805dc300aeee9cf555b77,Replicas aren't allowed to run the replicaof command
bsolomon1124,2019-03-09 15:21:15,https://api.github.com/repos/antirez/redis/git/commits/79660e4ff43b55fee1eaa70a27263c4cc3c905a4,79660e4ff43b55fee1eaa70a27263c4cc3c905a4,"Note that install_server.sh is not for Mac OSX

It will fail pretty quickly since there is no -f
readlink flag there."
spjwebster,2019-03-08 17:09:11,https://api.github.com/repos/antirez/redis/git/commits/f1e7df4b7c0dfb8ceaaa2e844b2b29024e8dfbcc,f1e7df4b7c0dfb8ceaaa2e844b2b29024e8dfbcc,"Increment delivery counter on XCLAIM unless RETRYCOUNT specified

The XCLAIM docs state the XCLAIM increments the delivery counter for
messages. This PR makes the code match the documentation - which seems
like the desired behaviour - whilst still allowing RETRYCOUNT to be
specified manually.

My understanding of the way streamPropagateXCLAIM() works is that this
change will safely propagate to replicas since retry count is pulled
directly from the streamNACK struct.

Fixes #5194"
antirez,2019-03-08 15:53:20,https://api.github.com/repos/antirez/redis/git/commits/0f03312c2331a3a54ada93515c961494f5b4a505,0f03312c2331a3a54ada93515c961494f5b4a505,"Merge pull request #5902 from zhouyuan/wip_cleanup

server.h: remove dead code"
artix75,2019-03-08 10:05:02,https://api.github.com/repos/antirez/redis/git/commits/8fadebfcca0d514fd6949eaa72599ab5e163bd4c,8fadebfcca0d514fd6949eaa72599ab5e163bd4c,Redis Benchmark: handle CLUSTERDOWN error
soloestoy,2019-03-07 14:08:04,https://api.github.com/repos/antirez/redis/git/commits/0137f1a2e33b6f14d7e365adddcf6299a4014b50,0137f1a2e33b6f14d7e365adddcf6299a4014b50,try lazyfree temp set in SUNION & SDIFF
zhouyuan,2019-03-07 10:35:27,https://api.github.com/repos/antirez/redis/git/commits/feb4ebff45c5eb9e6aaabe3c1391d4844a480541,feb4ebff45c5eb9e6aaabe3c1391d4844a480541,"server.h: remove dead code

hashTypeTryObjectEncoding() is not used now"
artix75,2019-03-07 10:30:09,https://api.github.com/repos/antirez/redis/git/commits/c389ad0d52d7770f2b1b1e48608bbbd171bc5a3e,c389ad0d52d7770f2b1b1e48608bbbd171bc5a3e,Redis Benchmark: fix key randomization with zero keyspacelen
artix75,2019-03-07 10:14:03,https://api.github.com/repos/antirez/redis/git/commits/0e963e068d15e56254987c12e5aba9162e208099,0e963e068d15e56254987c12e5aba9162e208099,"Redis Benchmark: add multithread idle mode

Fix issue #5891"
bsolomon1124,2019-03-07 02:24:45,https://api.github.com/repos/antirez/redis/git/commits/d5b24d31d73d80f27feed5334d9c79eec00afc31,d5b24d31d73d80f27feed5334d9c79eec00afc31,"Provide an uninstall target in Makefile

On `make uninstall`, removes:

- /usr/local/bin/redis-benchmark
- /usr/local/bin/redis-check-aof
- /usr/local/bin/redis-check-rdb
- /usr/local/bin/redis-cli
- /usr/local/bin/redis-sentinel
- /usr/local/bin/redis-server

(Only the src/ versions are removed in `make clean`)"
artix75,2019-03-06 15:38:36,https://api.github.com/repos/antirez/redis/git/commits/93e51239ce1d3778cbe068223221365a1ce7ad89,93e51239ce1d3778cbe068223221365a1ce7ad89,Cluster Manager: add importing/migrating nodes to backup info
antirez,2019-03-05 14:51:37,https://api.github.com/repos/antirez/redis/git/commits/c33cb4938a6debf999a9af312498a4ab91271c81,c33cb4938a6debf999a9af312498a4ab91271c81,ACL: GENPASS subcommand.
soloestoy,2019-03-04 11:43:00,https://api.github.com/repos/antirez/redis/git/commits/fb81d1b3f891746e886f44cad5df96a29e6b9f51,fb81d1b3f891746e886f44cad5df96a29e6b9f51,Fix compile warning when log aux field
itamarhaber,2019-03-03 21:10:45,https://api.github.com/repos/antirez/redis/git/commits/cd2743c0e6b7702535b410db4e51f6d5e22a7d4c,cd2743c0e6b7702535b410db4e51f6d5e22a7d4c,Fixes BZ[REV]POP's arity
antirez,2019-03-02 20:19:21,https://api.github.com/repos/antirez/redis/git/commits/4edb1d7e100a75a4cf7d804e716744dbb815733f,4edb1d7e100a75a4cf7d804e716744dbb815733f,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2019-03-02 20:17:40,https://api.github.com/repos/antirez/redis/git/commits/b9b140e2e2f900bc7a9396e813862b46e86af364,b9b140e2e2f900bc7a9396e813862b46e86af364,"Use the RDB info fields to provide info to users.

Fix #5790 and 5878.

Maybe a better option was to have such fields named with the first
byte '%' as those are info fields for specification, however now to
break it in a backward incompatible way is not an option, so let's use
the fields actively to provide info when sensible, otherwise ignore
when they are not really helpful."
antirez,2019-03-01 17:43:13,https://api.github.com/repos/antirez/redis/git/commits/56cf4138447590915bd160320a6eec6daaecdab9,56cf4138447590915bd160320a6eec6daaecdab9,"Merge pull request #5888 from artix75/cluster_backup

Cluster Manager (redis-cli): new ""backup"" command"
antirez,2019-03-01 17:39:58,https://api.github.com/repos/antirez/redis/git/commits/537d859288b3d37bde572a3954525d83b9dd5304,537d859288b3d37bde572a3954525d83b9dd5304,"Merge pull request #5889 from artix75/bm_threads_cluster_dev

Redis benchmark: multithread support and cluster support"
artix75,2019-03-01 17:15:44,https://api.github.com/repos/antirez/redis/git/commits/cb1be1ca8115eb0fcd7768f7d6aa51f70f548c45,cb1be1ca8115eb0fcd7768f7d6aa51f70f548c45,Redis benchmark: update help with threads/cluster options
artix75,2019-02-15 11:31:00,https://api.github.com/repos/antirez/redis/git/commits/a79b84ab7f5079149afdd965e63134883380c06e,a79b84ab7f5079149afdd965e63134883380c06e,Redis benchmark: fix default hset test key
artix75,2019-02-11 16:57:20,https://api.github.com/repos/antirez/redis/git/commits/4e78d5cd40f388819a0d304c915c589788ac6137,4e78d5cd40f388819a0d304c915c589788ac6137,Redis Benchmark: update slots configuration after MOVED/ASK reply
artix75,2019-02-05 18:18:25,https://api.github.com/repos/antirez/redis/git/commits/daaff484a6d6e2f132dea2091cc4d3e8cb629cf3,daaff484a6d6e2f132dea2091cc4d3e8cb629cf3,Redis Benchmark: use atomic var for liveclients in 'createClient'
artix75,2019-02-05 18:13:50,https://api.github.com/repos/antirez/redis/git/commits/834809cbb34a3b9aa8ca2209ad09883a1a9239e2,834809cbb34a3b9aa8ca2209ad09883a1a9239e2,Redis Benchmark: display 'save' and 'appendonly' configuration
artix75,2019-01-18 17:13:35,https://api.github.com/repos/antirez/redis/git/commits/649c947a0f0da5de89754866e852d2fb3d356970,649c947a0f0da5de89754866e852d2fb3d356970,Redis benchmark: add {tag} to all default tests
artix75,2019-01-18 16:31:32,https://api.github.com/repos/antirez/redis/git/commits/eb8b4feef7866e49cecb81ffd39cf4d5546740f1,eb8b4feef7866e49cecb81ffd39cf4d5546740f1,Redis benchmark: fixed issued with config.hostip and code cleanup
artix75,2019-01-17 16:40:15,https://api.github.com/repos/antirez/redis/git/commits/f95e01266eb42d7442f3b62242957e9e99e3ac90,f95e01266eb42d7442f3b62242957e9e99e3ac90,Redis benchmark: configurable thread count in cluster mode and fixes
artix75,2018-10-25 15:38:17,https://api.github.com/repos/antirez/redis/git/commits/5fd5799cf91fb8612d03a4d4292f25cfc73e1f84,5fd5799cf91fb8612d03a4d4292f25cfc73e1f84,"Various changes to redis-benchmark thread and cluster support

- MOVED or ASK replies are now handled in cluster mode.
- Only the first slot per node is used in cluster mode.
- Mutlithreading: reduced usage of mutexes in favor of atomic vars."
artix75,2018-09-29 10:59:03,https://api.github.com/repos/antirez/redis/git/commits/434f7613041045d6794bde8b93aa1e733bbab6ca,434f7613041045d6794bde8b93aa1e733bbab6ca,Redis benchmark: table-based slot hashtag placeholder replacement in cluster mode.
artix75,2018-09-24 15:25:28,https://api.github.com/repos/antirez/redis/git/commits/dfd3cc5f783630c1611ff2922f6f1f1171be44f5,dfd3cc5f783630c1611ff2922f6f1f1171be44f5,Added basic support for clusters to redis-benchmark.
artix75,2018-07-31 08:45:00,https://api.github.com/repos/antirez/redis/git/commits/563885d6d936594068af7b4593e2cc7ac66a0aa4,563885d6d936594068af7b4593e2cc7ac66a0aa4,Thread support for redis-benchmark.
artix75,2019-03-01 16:40:22,https://api.github.com/repos/antirez/redis/git/commits/e6156a39bd67cd7d20d19d89650507c4f5b4da44,e6156a39bd67cd7d20d19d89650507c4f5b4da44,"Cluster Manager backup: remove --cluster-ignore-issue option

Always save the backup, even if there are problems in the cluster.
Just display a warn message and save ""cluster_errors"" property
inside the json."
artix75,2019-02-25 17:14:50,https://api.github.com/repos/antirez/redis/git/commits/5e4dfc5c974463e9df867ff049853f7be3772d6e,5e4dfc5c974463e9df867ff049853f7be3772d6e,"Cluster Manager: check cluster before backup

- Prevent cluster backup if cluster has issues and needs to be fixed.
  This behaviour can be overridden by adding the option
  '--cluster-ignore-issues'"
artix75,2019-02-15 19:37:18,https://api.github.com/repos/antirez/redis/git/commits/fb020ab090f6059bc8dbcfae3d333f9997fba5c3,fb020ab090f6059bc8dbcfae3d333f9997fba5c3,Cluster Manager: 'backup' command
antirez,2019-03-01 16:29:19,https://api.github.com/repos/antirez/redis/git/commits/b19e8b9a2c84694cd2586983a260ae6dc36afc86,b19e8b9a2c84694cd2586983a260ae6dc36afc86,"Merge pull request #5875 from chendq8/partialsync

fix:Slave will do full sync when restart with SHUTDOWN SAVE on cluster mode"
antirez,2019-03-01 15:55:09,https://api.github.com/repos/antirez/redis/git/commits/80b8f9febcc025073076becceaf0bf8bcf0c4bac,80b8f9febcc025073076becceaf0bf8bcf0c4bac,"Merge pull request #5873 from madolson/dev-unstable-minor-benchmark-precision-fix

Updated redis-benchmark so it doesn't show 1 value above 2ms"
antirez,2019-03-01 15:51:02,https://api.github.com/repos/antirez/redis/git/commits/5f2a256ca9b815f50f7eead442b7d9c7954ca5a7,5f2a256ca9b815f50f7eead442b7d9c7954ca5a7,"Merge pull request #5881 from artix75/cluster_manager_join_issues

Cluster Manager: create command checks for issues during ""CLUSTER MEET"""
artix75,2019-02-28 15:57:14,https://api.github.com/repos/antirez/redis/git/commits/6cd64c6a986cb77c8273f1eee95212ade036af41,6cd64c6a986cb77c8273f1eee95212ade036af41,Cluster Manager: change join issue message
artix75,2019-02-26 16:26:31,https://api.github.com/repos/antirez/redis/git/commits/23ad3faa50e0f3f91770735a8e0552bfc185af1e,23ad3faa50e0f3f91770735a8e0552bfc185af1e,Cluster Manager: change text alert clusterManagerWaitForClusterJoin
artix75,2019-01-17 17:22:30,https://api.github.com/repos/antirez/redis/git/commits/2593fb9c0cd55cff13713ec5366a9cdc91d8a052,2593fb9c0cd55cff13713ec5366a9cdc91d8a052,Cluster Manager: code cleanup
artix75,2019-01-09 17:49:38,https://api.github.com/repos/antirez/redis/git/commits/6e9864fe0de08f6297b1b89fd143605e6ff99ec2,6e9864fe0de08f6297b1b89fd143605e6ff99ec2,Cluster Manager: fix bus error in clusterManagerGetLinkStatus
artix75,2018-06-06 18:14:58,https://api.github.com/repos/antirez/redis/git/commits/121adc604b4cee16fd5af15456bbb7665f37ce71,121adc604b4cee16fd5af15456bbb7665f37ce71,Cluster Manager: fix memory leaks in clusterManagerGetDisconnectedLinks
artix75,2018-06-06 16:45:31,https://api.github.com/repos/antirez/redis/git/commits/b013d2c4dbea97544239deebe7a8f5a19f2b5604,b013d2c4dbea97544239deebe7a8f5a19f2b5604,Cluster Manager: fix memory leak in clusterManagerWaitForClusterJoin
artix75,2018-06-06 15:28:29,https://api.github.com/repos/antirez/redis/git/commits/3578aabc0528e087b80e8b69378abd50b1e1633a,3578aabc0528e087b80e8b69378abd50b1e1633a,Cluster Manager: improve join issue checking
artix75,2018-05-23 16:00:42,https://api.github.com/repos/antirez/redis/git/commits/2f499304aafd865e40f121389834a871d4f441cc,2f499304aafd865e40f121389834a871d4f441cc,Cluster Manager: check for unreachable nodes during cluster join.
antirez,2019-02-27 21:33:22,https://api.github.com/repos/antirez/redis/git/commits/9b0b0b3942b10f4b89cfcff25573cb8ea10e1013,9b0b0b3942b10f4b89cfcff25573cb8ea10e1013,"Merge pull request #3649 from Alkorin/fixTypo

Fix typo (unsupproted => unsupported) in error message"
antirez,2019-02-27 21:21:00,https://api.github.com/repos/antirez/redis/git/commits/74fdfc3763059c1f4a46177e9c138b642bd57973,74fdfc3763059c1f4a46177e9c138b642bd57973,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2019-02-27 21:20:31,https://api.github.com/repos/antirez/redis/git/commits/68c75f248e9b0b4e4930372e2d09f3898de0a21c,68c75f248e9b0b4e4930372e2d09f3898de0a21c,"Gopher: reply in gopher mode only if argv[0] starts with slash.

As documented but never implemented."
antirez,2019-02-27 14:45:03,https://api.github.com/repos/antirez/redis/git/commits/88b720672c93c551a66af46b970bab000c3d0cec,88b720672c93c551a66af46b970bab000c3d0cec,"Merge pull request #5877 from vattezhang/unstable_sentinel_cmd

fix: fix sentinel command table and new flags format"
vattezhang,2019-02-27 13:35:58,https://api.github.com/repos/antirez/redis/git/commits/9d632230b65f978758721275bd8abf874361ba4d,9d632230b65f978758721275bd8abf874361ba4d,fix: fix sentinel command table and new flags format
vattezhang,2019-02-27 13:20:00,https://api.github.com/repos/antirez/redis/git/commits/0f0f787a37e6411a02d9a992ecc7bb8af7decf9a,0f0f787a37e6411a02d9a992ecc7bb8af7decf9a,fix: fix sentinel command table and new flags format
chendq8,2019-02-27 09:22:08,https://api.github.com/repos/antirez/redis/git/commits/49816941a45f9337ce7c0d3b0b70356f79f54ffa,49816941a45f9337ce7c0d3b0b70356f79f54ffa,"Merge pull request #2 from antirez/unstable

merge from redis"
antirez,2019-02-27 08:34:50,https://api.github.com/repos/antirez/redis/git/commits/f311a529be198f1c844dc4b5dcaf59da684a69ca,f311a529be198f1c844dc4b5dcaf59da684a69ca,Make PR #5872 more compatible with Redis coding style.
antirez,2019-02-27 08:31:57,https://api.github.com/repos/antirez/redis/git/commits/0dcb00388723cfc4e136bec8457235c84d74f0c8,0dcb00388723cfc4e136bec8457235c84d74f0c8,"Merge pull request #5872 from madolson/dev-unstable-acl-setuser-fix

Updated acl setuser to be all or nothing"
madolson,2019-02-24 00:12:00,https://api.github.com/repos/antirez/redis/git/commits/b79efef5d688b37c1bdf404f15e39bf36e7d6bd0,b79efef5d688b37c1bdf404f15e39bf36e7d6bd0,Updated redis-benchmark so it doesn't show 1 value above 2ms at higher precision
madolson,2019-02-23 23:15:48,https://api.github.com/repos/antirez/redis/git/commits/075a3b889355c38cc831aac002cf6eb61cc5f36e,075a3b889355c38cc831aac002cf6eb61cc5f36e,Updated acl setuser to be all or nothing
antirez,2019-02-25 17:16:58,https://api.github.com/repos/antirez/redis/git/commits/a7780f716ea34899050d3b2b2b9241c09624c0d0,a7780f716ea34899050d3b2b2b9241c09624c0d0,Merge branch 'gopher' into unstable
antirez,2019-02-25 16:20:43,https://api.github.com/repos/antirez/redis/git/commits/40a01a945d0161efe2b9206f1cfae84256f2d822,40a01a945d0161efe2b9206f1cfae84256f2d822,Gopher: document the feature in redis.conf.
antirez,2019-02-25 15:56:58,https://api.github.com/repos/antirez/redis/git/commits/21f92e9e340f9371ee06ca87f3b16dbe0dbf0fea,21f92e9e340f9371ee06ca87f3b16dbe0dbf0fea,RESP3: SETNAME option for HELLO.
antirez,2019-02-25 15:55:16,https://api.github.com/repos/antirez/redis/git/commits/d4d15315a87adf3ccaba8d21e2ca29008641edef,d4d15315a87adf3ccaba8d21e2ca29008641edef,RESP3: AUTH option for HELLO.
antirez,2019-02-25 15:51:49,https://api.github.com/repos/antirez/redis/git/commits/5748439770de8a1aa4fdc10a7af22bf809d039ab,5748439770de8a1aa4fdc10a7af22bf809d039ab,RESP3: refactoring of CLIENT SETNAME to implement SETNAME in HELLO.
antirez,2019-02-25 15:40:58,https://api.github.com/repos/antirez/redis/git/commits/3b420034bb692eb871f914c1a90b556c86c3a9eb,3b420034bb692eb871f914c1a90b556c86c3a9eb,RESP3: allow HELLO to be used with version = 2.
antirez,2019-02-25 15:37:00,https://api.github.com/repos/antirez/redis/git/commits/36d15882153eeafe2eb5ec5a4d9138ae5c8c9afd,36d15882153eeafe2eb5ec5a4d9138ae5c8c9afd,ACL: authCommand() refactored into ACLAuthenticateUser().
antirez,2019-02-25 15:33:36,https://api.github.com/repos/antirez/redis/git/commits/87594a7470063ad095a58f32c04594533ebd485f,87594a7470063ad095a58f32c04594533ebd485f,ACL: move AUTH implementation in acl.c.
antirez,2019-02-24 20:38:15,https://api.github.com/repos/antirez/redis/git/commits/e247c9ac6ac5dafc3127a1d1fbe696f5087fbc38,e247c9ac6ac5dafc3127a1d1fbe696f5087fbc38,Gopher: don't add the Lastline.
antirez,2019-02-22 11:45:13,https://api.github.com/repos/antirez/redis/git/commits/07473feaebd9af228baddd6c28ded0da42dab255,07473feaebd9af228baddd6c28ded0da42dab255,ACL: fix ACLSaveToFile() return value.
antirez,2019-02-22 11:41:57,https://api.github.com/repos/antirez/redis/git/commits/2bea3929d0ba3ba066185102c14370e4269213e6,2bea3929d0ba3ba066185102c14370e4269213e6,ACL: less error prone error handling in ACLSaveToFile().
antirez,2019-02-22 10:17:39,https://api.github.com/repos/antirez/redis/git/commits/8b087dff3409969210db1299a7aa4a504e3e2fd8,8b087dff3409969210db1299a7aa4a504e3e2fd8,Gopher: TODO list.
antirez,2019-02-22 09:28:31,https://api.github.com/repos/antirez/redis/git/commits/2d3cad684c67e96ff59ee5a69f14dea6f5850910,2d3cad684c67e96ff59ee5a69f14dea6f5850910,"Merge pull request #5850 from artix75/dev

Cluster Manager: fix replica assignment anti-affinity (create)"
antirez,2019-02-22 09:27:37,https://api.github.com/repos/antirez/redis/git/commits/21b8560e959bc3affb543cfe5867e1721de70f19,21b8560e959bc3affb543cfe5867e1721de70f19,"Merge pull request #5858 from madolson/dev-unstable-acl-deluser

Making deleting users better defined and update documentation"
antirez,2019-02-22 09:25:17,https://api.github.com/repos/antirez/redis/git/commits/3a7fd48e30dc5f4835d48db03c0bd1d7c5e7110b,3a7fd48e30dc5f4835d48db03c0bd1d7c5e7110b,"Merge pull request #5859 from madolson/dev-unstable-networking-cleanup

Refactored manual computation of object length"
antirez,2019-02-22 09:21:24,https://api.github.com/repos/antirez/redis/git/commits/f94d711c8373288995623090d83a02bfdd347342,f94d711c8373288995623090d83a02bfdd347342,Gopher: basic serving of string type.
antirez,2019-02-21 22:13:08,https://api.github.com/repos/antirez/redis/git/commits/e00b22e090c68434b9f44986b2ac9fa9b8d96896,e00b22e090c68434b9f44986b2ac9fa9b8d96896,Gopher: initial request handling.
madolson,2019-02-20 03:52:57,https://api.github.com/repos/antirez/redis/git/commits/9131fc56d69cb4bb2bf2e5d29636f22c3036f4e9,9131fc56d69cb4bb2bf2e5d29636f22c3036f4e9,Refactored manual computation of object length
madolson,2019-02-21 00:34:54,https://api.github.com/repos/antirez/redis/git/commits/fdc4003d23dfc287380174f219548c12bee07475,fdc4003d23dfc287380174f219548c12bee07475,Making deleting users better defined and update documentation
antirez,2019-02-21 16:23:17,https://api.github.com/repos/antirez/redis/git/commits/3de9ccf190e22f46d6ba7b7167d32ee5c8505bd6,3de9ccf190e22f46d6ba7b7167d32ee5c8505bd6,Gopher: config setting to turn support on/off.
antirez,2019-02-21 16:03:19,https://api.github.com/repos/antirez/redis/git/commits/624568ae3f842b0cab96569e784fff40bdbfdf8b,624568ae3f842b0cab96569e784fff40bdbfdf8b,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2019-02-21 16:03:06,https://api.github.com/repos/antirez/redis/git/commits/291e6bccf32e8b6e792482f577304df8f0636903,291e6bccf32e8b6e792482f577304df8f0636903,ACL: remove leak in ACLLoadFromFile().
antirez,2019-02-21 16:01:08,https://api.github.com/repos/antirez/redis/git/commits/91aecf013858e1a83c46a8880472009282587773,91aecf013858e1a83c46a8880472009282587773,ACL: implement ACL SAVE.
antirez,2019-02-21 15:50:28,https://api.github.com/repos/antirez/redis/git/commits/484af7aa7a3b84067bfd5f37703baff911db608f,484af7aa7a3b84067bfd5f37703baff911db608f,ACL: ACLSaveToFile() implemented.
antirez,2019-02-21 15:31:33,https://api.github.com/repos/antirez/redis/git/commits/e4f3a2eecd571aabe2497b0eca5cb4679295289b,e4f3a2eecd571aabe2497b0eca5cb4679295289b,ACL: add LOAD subcommand to ACL HELP.
antirez,2019-02-21 11:54:15,https://api.github.com/repos/antirez/redis/git/commits/967a98f57018672fe2804f66f0e88ce2af7e2871,967a98f57018672fe2804f66f0e88ce2af7e2871,"Merge pull request #4811 from oranagra/cli-diskless-repl

Add redis-cli support for diskless replication (CAPA EOF)"
antirez,2019-02-21 11:22:09,https://api.github.com/repos/antirez/redis/git/commits/a8921c062dcd0a0faeb0da83b335f49663502853,a8921c062dcd0a0faeb0da83b335f49663502853,"Merge pull request #5856 from oranagra/cli-bigkeys

redis-cli add support for --memkeys, fix --bigkeys for module types"
oranagra,2019-02-21 10:06:18,https://api.github.com/repos/antirez/redis/git/commits/b6de51206e8fd79269d05f0fed3f396683d75446,b6de51206e8fd79269d05f0fed3f396683d75446,"redis-cli add support for --memkeys, fix --bigkeys for module types

* bigkeys used to fail on databases with module type keys
* new code adds more types when it discovers them, but has no way to know element count in modules types yet
* bigkeys was missing XLEN command for streams
* adding --memkeys and --memkeys-samples to make use of the MEMORY USAGE command

see #5167, #5175"
artix75,2019-02-20 14:36:12,https://api.github.com/repos/antirez/redis/git/commits/0f28754021a66f2fe77dee1dd712220a741dc203,0f28754021a66f2fe77dee1dd712220a741dc203,"Cluster Manager: fix replica assigment anti-affinity (create)

Fix issue #5849"
antirez,2019-02-19 16:29:51,https://api.github.com/repos/antirez/redis/git/commits/35ffbead5c309ad90c130a885fce1e44613c7467,35ffbead5c309ad90c130a885fce1e44613c7467,Use dictGetFairRandomKey() for RANDOMKEY as well.
antirez,2019-02-19 16:27:42,https://api.github.com/repos/antirez/redis/git/commits/25b392f90c3436d8db44111194070d6e3eeea5cc,25b392f90c3436d8db44111194070d6e3eeea5cc,"Set dictGetFairRandomKey() samples to 20 for final version.

Distribution improves dramatically: tests show it clearly. Better to
have a slower implementation than a wrong one, because random member
extraction should be correct or tends to be useless for a number of
tasks."
antirez,2019-02-19 16:25:58,https://api.github.com/repos/antirez/redis/git/commits/f284e37f24629bad61530f02937a2b13fedd6283,f284e37f24629bad61530f02937a2b13fedd6283,showfreq.rb: collect more data for better graphs.
antirez,2019-02-19 11:01:26,https://api.github.com/repos/antirez/redis/git/commits/f1b3a485b4b9d1b36df32d8161a89ffefbcaba07,f1b3a485b4b9d1b36df32d8161a89ffefbcaba07,Improve README of better-random-member directory.
antirez,2019-02-18 17:47:49,https://api.github.com/repos/antirez/redis/git/commits/a317349cb2363e2bf8f151cb4d9614dd508e9d0e,a317349cb2363e2bf8f151cb4d9614dd508e9d0e,Add showfreq.rb to SRANDMEMBER analysis tools.
antirez,2019-02-18 17:38:40,https://api.github.com/repos/antirez/redis/git/commits/1613f7a57250c318c20292ea33746341b30031c7,1613f7a57250c318c20292ea33746341b30031c7,"Limit sampling size in dictGetFairRandomKey().

This way the implementation is almost as fast as the original one, but
the distribution is not too bad."
antirez,2019-02-18 17:27:18,https://api.github.com/repos/antirez/redis/git/commits/61a01793ed23a2b1cb3c468bd4057ddc7ba0e739,61a01793ed23a2b1cb3c468bd4057ddc7ba0e739,Better distribution for set get-random-element operations.
vattezhang,2019-02-18 14:48:55,https://api.github.com/repos/antirez/redis/git/commits/4cc43a96f67e155a3526a29816510536ef9380c7,4cc43a96f67e155a3526a29816510536ef9380c7,"benchmark: add auth check in benchmark
    When we run benchmark but forget to set the right requirepass, benchmark should return error."
antirez,2019-02-18 11:39:00,https://api.github.com/repos/antirez/redis/git/commits/e6948b8f2847896d3c6443744a53f7c3f79a1984,e6948b8f2847896d3c6443744a53f7c3f79a1984,showdist.rb utility for SRANDMEMBER analysis added.
antirez,2019-02-14 12:19:45,https://api.github.com/repos/antirez/redis/git/commits/86802d4f2681baa04869fabfbd0ca6c2fe0a94d7,86802d4f2681baa04869fabfbd0ca6c2fe0a94d7,"redis-benchmark: default precision=1, integer ms after 2 milliseconds.

Reltaed to discussion and PR #5840."
antirez,2019-02-14 12:01:26,https://api.github.com/repos/antirez/redis/git/commits/da86481e5b732202dbfdc6442de8b66a59e3f7e3,da86481e5b732202dbfdc6442de8b66a59e3f7e3,"Merge pull request #5840 from madolson/dev-unstable-benchmark-latency

Updated redis benchmark with us precision support"
madolson,2019-02-13 21:03:31,https://api.github.com/repos/antirez/redis/git/commits/f9bababaa77726969e829950d246bc8618877372,f9bababaa77726969e829950d246bc8618877372,Rename variable
madolson,2019-01-31 18:44:17,https://api.github.com/repos/antirez/redis/git/commits/93640b0a9df65a4d962d65b0e690491ad1b95031,93640b0a9df65a4d962d65b0e690491ad1b95031,Updated redis benchmark with us precision support
antirez,2019-02-13 17:59:59,https://api.github.com/repos/antirez/redis/git/commits/fd7484cde2d9eb1f659232934ffef46da192b3a0,fd7484cde2d9eb1f659232934ffef46da192b3a0,"Merge pull request #5836 from soloestoy/fix-acl-warning

ACL: show categories in COMMAND reply"
soloestoy,2019-02-13 16:12:10,https://api.github.com/repos/antirez/redis/git/commits/14507457a08acb6886dc8ae37dba8511ffc18939,14507457a08acb6886dc8ae37dba8511ffc18939,"ACL: show categories in COMMAND reply

Adding another new filed categories at the end of
command reply, it's easy to read and distinguish
flags and categories, also compatible with old format."
antirez,2019-02-13 15:30:44,https://api.github.com/repos/antirez/redis/git/commits/e819c2ef5b6f6b7c196cc7c00c543c4af8c703a7,e819c2ef5b6f6b7c196cc7c00c543c4af8c703a7,"ACL: tag LASTSAVE as dangerous.

That's not REALLY needed, but... right now with LASTSAVE being the only
command tagged as ""admin"" but not ""dangerous"" what happens is that after
rewrites the rewrite engine will produce from the rules:

    user default on +@all ~* -@dangerous nopass

The rewrite:

    user default on nopass ~* +@all -@admin -@dangerous +lastsave

Which is correct but will have users wondering about why LASTSAVE has
something special.

Since LASTSAVE after all also leaks information about the underlying
server configuration, that may not be great for SAAS vendors, let's tag
it as dangerous as well and forget about this issue :-)"
soloestoy,2019-02-13 03:47:10,https://api.github.com/repos/antirez/redis/git/commits/a65094dae811770c904f9ec5bb54c41caf5d9f66,a65094dae811770c904f9ec5bb54c41caf5d9f66,ACL: fix cat type format warning
antirez,2019-02-12 17:23:00,https://api.github.com/repos/antirez/redis/git/commits/fb7bfc17cdfff18631c5394e1770bb8306634b7a,fb7bfc17cdfff18631c5394e1770bb8306634b7a,ACL: Document masteruser option in redis.conf.
antirez,2019-02-12 16:06:26,https://api.github.com/repos/antirez/redis/git/commits/bfdcfbb3ed906c005c1411ddd4945738da7214c3,bfdcfbb3ed906c005c1411ddd4945738da7214c3,ACL: fix setting of FAST flag.
antirez,2019-02-12 16:02:45,https://api.github.com/repos/antirez/redis/git/commits/b9c97c0b2e58826efe797e53fec4558fd7f7b95d,b9c97c0b2e58826efe797e53fec4558fd7f7b95d,ACL: CAT subcommand implemented.
guybe7,2019-02-12 13:21:21,https://api.github.com/repos/antirez/redis/git/commits/bdd9a8002a6fcc93135eb4125da703b87a1959fa,bdd9a8002a6fcc93135eb4125da703b87a1959fa,"Trim SDS free space of retained module strings

In some cases processMultibulkBuffer uses sdsMakeRoomFor to
expand the querybuf, but later in some cases it uses that query
buffer as is for an argv element (see ""Optimization""), which means
that the sds in argv may have a lot of wasted space, and then in case
modules keep that argv RedisString inside their data structure, this
space waste will remain for long (until restarted from rdb)."
antirez,2019-02-12 09:27:59,https://api.github.com/repos/antirez/redis/git/commits/a22815b4e9cfaf607378596d1ed715f71d6762c2,a22815b4e9cfaf607378596d1ed715f71d6762c2,"Merge pull request #5833 from soloestoy/masteruser

ACL: add masteruser configuration for replication"
soloestoy,2019-02-12 08:44:50,https://api.github.com/repos/antirez/redis/git/commits/ea9d3aefec76f5798510e09c9b2c8046e7eb2b8f,ea9d3aefec76f5798510e09c9b2c8046e7eb2b8f,"ACL: add masteruser configuration for replication

In mostly production environment, normal user's behavior should be
limited.

Now in redis ACL mechanism we can do it like that:

    user default on +@all ~* -@dangerous nopass
    user admin on +@all ~* >someSeriousPassword

Then the default normal user can not execute dangerous commands like
FLUSHALL/KEYS.

But some admin commands are in dangerous category too like PSYNC,
and the configurations above will forbid replica from sync with master.

Finally I think we could add a new configuration for replication,
it is masteruser option, like this:

    masteruser admin
    masterauth someSeriousPassword

Then replica will try AUTH admin someSeriousPassword and get privilege
to execute PSYNC. If masteruser is NULL, replica would AUTH with only
masterauth like before."
antirez,2019-02-12 08:44:25,https://api.github.com/repos/antirez/redis/git/commits/d5e4a7f43976d14241c56dd65754189fd8569087,d5e4a7f43976d14241c56dd65754189fd8569087,"ACL: when client->user is NULL the client is a superuser.

Related to #5832."
antirez,2019-02-12 08:43:50,https://api.github.com/repos/antirez/redis/git/commits/cc6d05a1f7d928216b2dd712f2d4e4d5f9f37674,cc6d05a1f7d928216b2dd712f2d4e4d5f9f37674,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2019-02-12 08:42:14,https://api.github.com/repos/antirez/redis/git/commits/efeebb616f5052db9ad5b02a5bf3491cdd9d9afb,efeebb616f5052db9ad5b02a5bf3491cdd9d9afb,"Merge pull request #5832 from soloestoy/show-client-user

ACL: show client's user"
soloestoy,2019-02-12 08:03:58,https://api.github.com/repos/antirez/redis/git/commits/0f42447a0ec841f0b3e83328ac16a573012e2880,0f42447a0ec841f0b3e83328ac16a573012e2880,ACL: show client's user
antirez,2019-02-11 16:17:14,https://api.github.com/repos/antirez/redis/git/commits/85cadafabfa85f596241a64c205979b9287f2542,85cadafabfa85f596241a64c205979b9287f2542,"Merge pull request #5831 from lamby/x32-warnings

Don't assume the __x86_64__ pointer size to avoid warnings on x32"
lamby,2019-02-11 16:07:26,https://api.github.com/repos/antirez/redis/git/commits/d0089cf2082bafabbce15ec35057f403ce881d81,d0089cf2082bafabbce15ec35057f403ce881d81,"Don't assume the __x86_64__ pointer size to avoid warnings on x32.

__x86_64__ is defined on the on the x32 architecture and the conditionals in
debug.c therefore assume the size of (void*) etc:

  debug.c: In function 'getMcontextEip':
  debug.c:757:12: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
       return (void*) uc->uc_mcontext.gregs[16]; /* Linux 64 */
              ^
  debug.c: In function 'logRegisters':
  debug.c:920:21: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
       logStackContent((void**)uc->uc_mcontext.gregs[15]);

We can remedy this by checking for __ILP32__ first. See:

  https://wiki.debian.org/ArchitectureSpecificsMemo

... for more info."
antirez,2019-02-11 16:00:51,https://api.github.com/repos/antirez/redis/git/commits/f0c7cfa459082768235db764b2847ae850ea9d33,f0c7cfa459082768235db764b2847ae850ea9d33,"ACL: return error when removing a non existing password.

Otherwise it's very simple for an human mistake to think a password is
removed because of a typo in the ACL SETUSER myuser <somepass command
line."
antirez,2019-02-11 15:47:02,https://api.github.com/repos/antirez/redis/git/commits/f8a6132f1517a2d7520a11ed216d225e3e3fade5,f8a6132f1517a2d7520a11ed216d225e3e3fade5,"ACL: refactor+fix AUTH check in processCommand().

The part that is fixed is that now if the default user is off whatever
is its configuration the user is not considered authenticated."
antirez,2019-02-11 15:28:31,https://api.github.com/repos/antirez/redis/git/commits/df346bca3938de04dbf9794edc2dbaee64d5fc68,df346bca3938de04dbf9794edc2dbaee64d5fc68,"ACL: ACLFreeUserAndKillClients(): free user later.

Soon or later we may have code in freeClient() that may have to deal
with ACLs. Imagine for instance the command proposed multiple times (not
sure if this will ever be accepted but still...):

    ONCLOSE DEL mykey

Accumulating commands to run when a client is disconnected. Now the
function is compatible with such use cases.

Related to #5829."
soloestoy,2019-02-11 14:24:15,https://api.github.com/repos/antirez/redis/git/commits/2ce96c0fa7ec8532dc78a7f0e7a18b1105fe8151,2ce96c0fa7ec8532dc78a7f0e7a18b1105fe8151,ACL: kill the old users clients after load aclfile
antirez,2019-02-08 11:40:42,https://api.github.com/repos/antirez/redis/git/commits/3df1eb85ca6b8a9c26b4bf9bb79c7d6172c60032,3df1eb85ca6b8a9c26b4bf9bb79c7d6172c60032,ACL: add command fingerprint for CAT subcommand.
antirez,2019-02-08 11:38:41,https://api.github.com/repos/antirez/redis/git/commits/d453936b52ced6e0fbf74a59c1df4147a9870d37,d453936b52ced6e0fbf74a59c1df4147a9870d37,ACL: add arity check in ACL command where missing.
antirez,2019-02-08 10:50:39,https://api.github.com/repos/antirez/redis/git/commits/d4890c20c10d91e990b8af044a233d3e1da7bda0,d4890c20c10d91e990b8af044a233d3e1da7bda0,"ACL: ignore modules commands when adding categories.

We can't trust modules commands flagging, so module commands must be
always explicitly added, with the exception of +@all that will include
everything. However something like +@readonly should not include command
from modules that may be potentially dangerous: our categories must be
safe and reliable and modules may not be like that."
antirez,2019-02-08 08:52:07,https://api.github.com/repos/antirez/redis/git/commits/af8761e4f22c41727a1b2db9109fde4a7520b0be,af8761e4f22c41727a1b2db9109fde4a7520b0be,ACL: some documentation inside redis.conf.
antirez,2019-02-07 16:20:03,https://api.github.com/repos/antirez/redis/git/commits/80f987726d8ccf9ffc0ce73599226e0e14f26a8a,80f987726d8ccf9ffc0ce73599226e0e14f26a8a,ACL: load ACL file at startup. Prevent silly configurations.
antirez,2019-02-07 16:07:35,https://api.github.com/repos/antirez/redis/git/commits/db30727547d7b48b73f92c19bebad2aef1514dfe,db30727547d7b48b73f92c19bebad2aef1514dfe,ACL: ACLLoadFromFile(): several errors fixed to make it work.
antirez,2019-02-07 16:00:35,https://api.github.com/repos/antirez/redis/git/commits/d26c9b5307843fd163fca0e4bd2171ede1c8effc,d26c9b5307843fd163fca0e4bd2171ede1c8effc,"ACL: ACLLoadFromFile(), restore DefaultUser global."
antirez,2019-02-07 15:53:35,https://api.github.com/repos/antirez/redis/git/commits/6a7545e4d4d3a817091c1ae0be360fae37548053,6a7545e4d4d3a817091c1ae0be360fae37548053,ACL: fix fgets wrong buffer size.
antirez,2019-02-07 15:47:14,https://api.github.com/repos/antirez/redis/git/commits/cbed35efd34c08a7610d18269e5860cd874480f9,cbed35efd34c08a7610d18269e5860cd874480f9,ACL: add assertion and fix comment typo.
antirez,2019-02-07 15:20:42,https://api.github.com/repos/antirez/redis/git/commits/7a86ba22e001d0b46bff9bf62f5c762471fd53ec,7a86ba22e001d0b46bff9bf62f5c762471fd53ec,ACL: fix a few ACLLoadFromFile() errors and finish ACLFreeUsersSet().
antirez,2019-02-07 11:57:21,https://api.github.com/repos/antirez/redis/git/commits/1790be1496d14efd6af65c8df2271e0b112740cb,1790be1496d14efd6af65c8df2271e0b112740cb,ACL: WIP: preserve the old config on loading errors.
antirez,2019-02-07 11:20:30,https://api.github.com/repos/antirez/redis/git/commits/0f0240b526a43eb1323a19f7b706bec68992073c,0f0240b526a43eb1323a19f7b706bec68992073c,ACL: implement LOAD subcommand plus some minor rafactoring.
antirez,2019-02-07 11:04:25,https://api.github.com/repos/antirez/redis/git/commits/72e8a080c2d61e008a4134537b3470ed077d5ebc,72e8a080c2d61e008a4134537b3470ed077d5ebc,ACL: fix and complete ACLLoadFromFile() loading step.
antirez,2019-02-06 15:44:55,https://api.github.com/repos/antirez/redis/git/commits/bbdf02338d865e0bf12b004be966a76ab8a71019,bbdf02338d865e0bf12b004be966a76ab8a71019,ACL: now ACLLoadFromFile() validates against fake user.
antirez,2019-02-06 15:19:17,https://api.github.com/repos/antirez/redis/git/commits/0d3fb9f7f13c75c8d0c54c2faddc9e72f5dc5452,0d3fb9f7f13c75c8d0c54c2faddc9e72f5dc5452,ACL: refactoring creation of unlinked users.
antirez,2019-02-06 11:39:11,https://api.github.com/repos/antirez/redis/git/commits/e1e0f993d8e669bc9aad71a072fea70d98661fd1,e1e0f993d8e669bc9aad71a072fea70d98661fd1,ACL: initial design for ACLLoadFromFile() function.
antirez,2019-02-05 16:59:05,https://api.github.com/repos/antirez/redis/git/commits/7604ab7118d1154e9120ea41a88d9c214f2202c3,7604ab7118d1154e9120ea41a88d9c214f2202c3,ACL: redis.conf: mark old ACL-alike stuff as deprecated.
antirez,2019-02-05 16:49:52,https://api.github.com/repos/antirez/redis/git/commits/cc116736c1306f53869510a768cb8bb4d6c6b04c,cc116736c1306f53869510a768cb8bb4d6c6b04c,ACL: ability to configure an external ACL file.
antirez,2019-02-05 09:52:05,https://api.github.com/repos/antirez/redis/git/commits/416c640156626978843e03cf573925a75d01c67a,416c640156626978843e03cf573925a75d01c67a,ACL: change behavior of redefined user. Last line counts.
antirez,2019-02-05 09:48:17,https://api.github.com/repos/antirez/redis/git/commits/775bf6193d774280ed19b7cf79fee0987ec83853,775bf6193d774280ed19b7cf79fee0987ec83853,ACL: implement rewriting of users in redis.conf.
antirez,2019-02-04 15:58:35,https://api.github.com/repos/antirez/redis/git/commits/2262dd184dc567561ef008d136e11def6e6abbe5,2262dd184dc567561ef008d136e11def6e6abbe5,ACL: fix user/rule inverted error message.
antirez,2019-02-04 15:39:07,https://api.github.com/repos/antirez/redis/git/commits/623b17425ef5af170c4bbc7aca9c07b57bc68adf,623b17425ef5af170c4bbc7aca9c07b57bc68adf,ACL: load the defined users at server startup.
antirez,2019-02-04 15:35:15,https://api.github.com/repos/antirez/redis/git/commits/500b3e128fc312a6aae113975b9f2f585f476500,500b3e128fc312a6aae113975b9f2f585f476500,ACL: implement ACLLoadConfiguredUsers().
antirez,2019-02-04 12:04:35,https://api.github.com/repos/antirez/redis/git/commits/68fd4a97fa52b1bca8e3dd8c0c2fc5b72714d824,68fd4a97fa52b1bca8e3dd8c0c2fc5b72714d824,ACL: better error reporting in users configuration errors.
antirez,2019-02-04 12:00:38,https://api.github.com/repos/antirez/redis/git/commits/b166c41eddec664e64c1e268266d38c3f26edaa2,b166c41eddec664e64c1e268266d38c3f26edaa2,ACL: make ACLAppendUserForLoading() able to report bad argument.
antirez,2019-02-04 11:55:26,https://api.github.com/repos/antirez/redis/git/commits/21e84cdae254b715b15e48734fbd8484b2c14810,21e84cdae254b715b15e48734fbd8484b2c14810,ACL: initial appending of users in user loading list.
antirez,2019-02-01 12:02:41,https://api.github.com/repos/antirez/redis/git/commits/8f16e1ea912110d5459a4ddd370a93485408311c,8f16e1ea912110d5459a4ddd370a93485408311c,ACL: implement ACLAppendUserForLoading().
antirez,2019-02-01 11:20:09,https://api.github.com/repos/antirez/redis/git/commits/b8323d98e967206e2922dfc30fa2223292bfef5f,b8323d98e967206e2922dfc30fa2223292bfef5f,ACL: skeleton and first ideas for postponed user loading.
antirez,2019-02-01 10:37:20,https://api.github.com/repos/antirez/redis/git/commits/1769c222486d1deb33b394899eccab35be975c96,1769c222486d1deb33b394899eccab35be975c96,"ACL: set modules help clients to the root user.

It does not make much sense to limit what modules can do: the admin
should instead limit what module commnads an user may call. So
RedisModule_Call() and other module operations should be able to execute
everything they want: the limitation should be posed by the API exported
by the module itself."
antirez,2019-02-01 07:17:24,https://api.github.com/repos/antirez/redis/git/commits/b6372f16c414e5f8a20164e6b1b82fc4c133be68,b6372f16c414e5f8a20164e6b1b82fc4c133be68,ACL: assign ACL command ID to modules commands.
antirez,2019-01-31 17:33:14,https://api.github.com/repos/antirez/redis/git/commits/ec1aee031c847dc3929b2556633ffa33eaf3a5e2,ec1aee031c847dc3929b2556633ffa33eaf3a5e2,ACL: implement DELUSER.
antirez,2019-01-31 17:32:49,https://api.github.com/repos/antirez/redis/git/commits/74b7afdf71e7e06f998e5955b4a088290534acb9,74b7afdf71e7e06f998e5955b4a088290534acb9,ACL: check arity of LIST / USERS subcommand.
antirez,2019-01-31 16:04:42,https://api.github.com/repos/antirez/redis/git/commits/bc9b118e05722afb557cdc1631294ce985d445da,bc9b118e05722afb557cdc1631294ce985d445da,ACL: don't emit useless flags in ACLDescribeUser().
antirez,2019-01-31 16:01:28,https://api.github.com/repos/antirez/redis/git/commits/0f1b06aa40daa8341e493193c9e8d859591c2e29,0f1b06aa40daa8341e493193c9e8d859591c2e29,ACL: implement LIST and USERS subcommands.
antirez,2019-01-31 15:49:22,https://api.github.com/repos/antirez/redis/git/commits/c7cd10dfe96e91582d7e341b20334464d5c51830,c7cd10dfe96e91582d7e341b20334464d5c51830,"ACL: flags refactoring, function to describe user."
antirez,2019-01-30 15:02:25,https://api.github.com/repos/antirez/redis/git/commits/479f7f7af4c4778c4c6fc0a93b807c98af08a353,479f7f7af4c4778c4c6fc0a93b807c98af08a353,ACL: add function to return ACLSetUser() string errors.
antirez,2019-01-30 14:59:45,https://api.github.com/repos/antirez/redis/git/commits/0960259835587401d6ac5d96b0c89a7ca60232c9,0960259835587401d6ac5d96b0c89a7ca60232c9,ACL: don't allow patterns after the * pattern.
antirez,2019-01-30 14:52:36,https://api.github.com/repos/antirez/redis/git/commits/77471dfe864e33ca1dd915ecae4dc5b75636fcb6,77471dfe864e33ca1dd915ecae4dc5b75636fcb6,ACL: implement keys field in ACL GETUSER.
antirez,2019-01-30 11:01:23,https://api.github.com/repos/antirez/redis/git/commits/f021da5e30324c398b3a927d97e638ea93cca46d,f021da5e30324c398b3a927d97e638ea93cca46d,Acl: Test: check command rules synthesis.
antirez,2019-01-30 10:50:30,https://api.github.com/repos/antirez/redis/git/commits/9db2c84984739008c5cd911943ea97775fc32045,9db2c84984739008c5cd911943ea97775fc32045,ACL: free memory leak when freeing subcommands array.
antirez,2019-01-30 07:25:08,https://api.github.com/repos/antirez/redis/git/commits/36a0168cfd6c335f9a2ce8ff8d0814e7dfd87722,36a0168cfd6c335f9a2ce8ff8d0814e7dfd87722,"ACL: return error when adding subcommands of fully added commands.

It's almost certainly an error from the user side."
antirez,2019-01-30 07:20:31,https://api.github.com/repos/antirez/redis/git/commits/9c2e64db9c098cd4357103d08ff751d584bc4f26,9c2e64db9c098cd4357103d08ff751d584bc4f26,ACL: remove leak in ACLSetUser().
antirez,2019-01-30 07:17:33,https://api.github.com/repos/antirez/redis/git/commits/efce73a001ab8f30a8191814d1dadb55c7974d02,efce73a001ab8f30a8191814d1dadb55c7974d02,ACL: ACLDescribeUserCommandRules(): emit subcommands.
antirez,2019-01-30 07:09:05,https://api.github.com/repos/antirez/redis/git/commits/9ae8e3fefa034952fac2910628b5a7f3fb4277a0,9ae8e3fefa034952fac2910628b5a7f3fb4277a0,ACL: clear the subcommands array when setting category bits.
antirez,2019-01-29 17:54:21,https://api.github.com/repos/antirez/redis/git/commits/feba39d3187fc4c705268dfdfd06786bf5f1531d,feba39d3187fc4c705268dfdfd06786bf5f1531d,ACL: finish/fix ACLDescribeUserCommandRules() first version.
antirez,2019-01-29 17:41:11,https://api.github.com/repos/antirez/redis/git/commits/4db92e59287b7b577bd0efa74d78a01c8f3cb56d,4db92e59287b7b577bd0efa74d78a01c8f3cb56d,ACL: ACLDescribeUserCommandRules(): add final commands.
antirez,2019-01-29 16:25:02,https://api.github.com/repos/antirez/redis/git/commits/11f64c68866538db402e3f327ac59789b373cc35,11f64c68866538db402e3f327ac59789b373cc35,ACL: initial design for ACLDescribeUserCommandRules() and helpers.
antirez,2019-01-29 09:12:22,https://api.github.com/repos/antirez/redis/git/commits/4380423d40afa9c12e8018b7d5da4fe0f5ce5c3e,4380423d40afa9c12e8018b7d5da4fe0f5ce5c3e,ACL: enforce ACLs in Lua scripts as well.
antirez,2019-01-28 17:40:54,https://api.github.com/repos/antirez/redis/git/commits/acd168a70b647098c4976283963e46cd1e8af158,acd168a70b647098c4976283963e46cd1e8af158,ACL: refactoring and fix of adding subcommands to users.
antirez,2019-01-28 17:29:22,https://api.github.com/repos/antirez/redis/git/commits/e103fd42087e90eab08f1619bb09bd654847c2f0,e103fd42087e90eab08f1619bb09bd654847c2f0,ACL: Test: check subcommands (test fails).
antirez,2019-01-28 17:27:41,https://api.github.com/repos/antirez/redis/git/commits/7fb9e2b4ce0f29fe0eeeb5f74b1310e54144f63a,7fb9e2b4ce0f29fe0eeeb5f74b1310e54144f63a,"ACL: reset the subcommands table on +@all / -@all.

This also is a bugfix because after -@all the previously enabled
subcommands would remain valid."
antirez,2019-01-28 17:15:59,https://api.github.com/repos/antirez/redis/git/commits/097d57f56e856920010c164da499b62ad06b9c2a,097d57f56e856920010c164da499b62ad06b9c2a,ACL: fix crash when checking for subcommands.
guybe7,2019-01-28 15:58:11,https://api.github.com/repos/antirez/redis/git/commits/b0c8d6c227e172ec93d9b1f1c0f0ac49f8575a8f,b0c8d6c227e172ec93d9b1f1c0f0ac49f8575a8f,"Increase string2ld's buffer size (and fix HINCRBYFLOAT)

The string representation of `long double` may take
up to ~5000 chars (see PR #3745).

Before this fix HINCRBYFLOAT would never overflow (since
the string could not exceed 256 chars). Now it can."
antirez,2019-01-28 11:40:07,https://api.github.com/repos/antirez/redis/git/commits/f4c39db45022ce3177d8aea7873d40dbdf300da2,f4c39db45022ce3177d8aea7873d40dbdf300da2,"ACL: Test: nopass user flag, commands/groups +/- rules."
antirez,2019-01-28 11:33:14,https://api.github.com/repos/antirez/redis/git/commits/26f98bca9707340bb5a4ddf4d097c81bdb3118d7,26f98bca9707340bb5a4ddf4d097c81bdb3118d7,ACL: Test: check default behavior and keys ACLs.
antirez,2019-01-28 11:13:25,https://api.github.com/repos/antirez/redis/git/commits/6320aa49f38bbba1fa265942b47a8a5ef4f3b4e3,6320aa49f38bbba1fa265942b47a8a5ef4f3b4e3,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2019-01-28 11:12:04,https://api.github.com/repos/antirez/redis/git/commits/621547b4a2bb434dc20a4587dabdfb8be0a40c38,621547b4a2bb434dc20a4587dabdfb8be0a40c38,ACL: Test: add the acl tests as default unit.
antirez,2019-01-28 11:11:11,https://api.github.com/repos/antirez/redis/git/commits/4b9b128c4951405031fc94ca5ed172c12a846eb5,4b9b128c4951405031fc94ca5ed172c12a846eb5,ACL: remove leak when removing passwords/patterns.
antirez,2019-01-28 11:06:25,https://api.github.com/repos/antirez/redis/git/commits/6cec82b94374075405d791827e3a2d55a1c06366,6cec82b94374075405d791827e3a2d55a1c06366,ACL: Test: check passwords validity and removal.
antirez,2019-01-28 10:44:10,https://api.github.com/repos/antirez/redis/git/commits/3c67c1c3940e13351eab2310681bef09b3c3642d,3c67c1c3940e13351eab2310681bef09b3c3642d,ACL: Test: enabled/disabled user.
antirez,2019-01-28 10:39:58,https://api.github.com/repos/antirez/redis/git/commits/9fc1ce2f05d377d7c8d461b2b7cd7dfff3618b3d,9fc1ce2f05d377d7c8d461b2b7cd7dfff3618b3d,ACL: create unit test.
antirez,2019-01-27 11:16:14,https://api.github.com/repos/antirez/redis/git/commits/4e6abe2bbbf65fc116a323f9ba517126472fba2f,4e6abe2bbbf65fc116a323f9ba517126472fba2f,"Merge pull request #5808 from ArkayZheng/ArkayWork

Fix the output of serverLog in replication.c"
antirez,2019-01-26 11:51:43,https://api.github.com/repos/antirez/redis/git/commits/af72a3149099fc7cdcc0b5bd77be905cff4ca540,af72a3149099fc7cdcc0b5bd77be905cff4ca540,ACL: fix command bit check.
ArkayZheng,2019-01-25 13:48:23,https://api.github.com/repos/antirez/redis/git/commits/76f20729fc6eeb40f3c1a5598ead18b111fa52bf,76f20729fc6eeb40f3c1a5598ead18b111fa52bf,Fix the output bug in rename exceptions.
antirez,2019-01-25 12:27:33,https://api.github.com/repos/antirez/redis/git/commits/b7750a936ff4390a8e32ce97ba30c4ca9459452f,b7750a936ff4390a8e32ce97ba30c4ca9459452f,"ACL: remove the ALLCOMMANDS user flag at a safer place.

This fixes -@<category> as a side effect."
antirez,2019-01-25 12:07:20,https://api.github.com/repos/antirez/redis/git/commits/eb840f9bc5e44d56a6a0c525955aef37276cfabd,eb840f9bc5e44d56a6a0c525955aef37276cfabd,ACL: fix command ID assignment off by one error.
antirez,2019-01-25 12:00:49,https://api.github.com/repos/antirez/redis/git/commits/53ba09e08a9793e9de9ea9a40d7a1cc1d6d8a3bf,53ba09e08a9793e9de9ea9a40d7a1cc1d6d8a3bf,ACL: remove useless NULL check.
antirez,2019-01-25 12:00:30,https://api.github.com/repos/antirez/redis/git/commits/d5fe17dc11cc982f8d2e394cb54746f29ea0bc2d,d5fe17dc11cc982f8d2e394cb54746f29ea0bc2d,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2019-01-25 12:00:17,https://api.github.com/repos/antirez/redis/git/commits/1aa9fa37e3c884e50546d11bf140ef5193908a64,1aa9fa37e3c884e50546d11bf140ef5193908a64,"Merge pull request #5806 from soloestoy/bugfix-acl-check-key-pattern

Bugfix in ACLCheckCommandPerm"
soloestoy,2019-01-25 11:35:18,https://api.github.com/repos/antirez/redis/git/commits/0de83bcc62cec57a3e0bd5912fd3862f25654ddb,0de83bcc62cec57a3e0bd5912fd3862f25654ddb,ACL: fix memory leak when key patterns no match
soloestoy,2019-01-25 11:06:18,https://api.github.com/repos/antirez/redis/git/commits/8fc0079366fcf7c75cbfd4864c448ca9aae5c835,8fc0079366fcf7c75cbfd4864c448ca9aae5c835,ACL: check patterns instead of passwords in ACLCheckCommandPerm
antirez,2019-01-25 10:47:50,https://api.github.com/repos/antirez/redis/git/commits/b82d35688331ebfe9a84641de94ad6c87595e829,b82d35688331ebfe9a84641de94ad6c87595e829,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2019-01-25 10:47:45,https://api.github.com/repos/antirez/redis/git/commits/5cc3b557f6ab15edf65114054a978da06de632b2,5cc3b557f6ab15edf65114054a978da06de632b2,"Merge pull request #5804 from artix75/dev

Cluster Manager: remove unused code elements"
antirez,2019-01-25 10:27:34,https://api.github.com/repos/antirez/redis/git/commits/510327df0b05b21e1e03df4f73ba5cfe954ce790,510327df0b05b21e1e03df4f73ba5cfe954ce790,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2019-01-25 10:27:21,https://api.github.com/repos/antirez/redis/git/commits/e545b30f978cceae818897d7398450ca291835e3,e545b30f978cceae818897d7398450ca291835e3,"Merge pull request #5801 from soloestoy/fix-getuser-null-pointer

ACL: fix null pointer in getuser"
antirez,2019-01-24 17:15:46,https://api.github.com/repos/antirez/redis/git/commits/7b4f3cc33aa11a035eb28a1b46cd7a73af8b59fd,7b4f3cc33aa11a035eb28a1b46cd7a73af8b59fd,ACL: + and - opcode for categories implemented.
antirez,2019-01-24 17:11:09,https://api.github.com/repos/antirez/redis/git/commits/e8bf9b03ed4c0c051ffe955c45292f686484040b,e8bf9b03ed4c0c051ffe955c45292f686484040b,ACL: ACLSetUserCommandBitsForCategory() low level API.
artix75,2019-01-24 16:29:38,https://api.github.com/repos/antirez/redis/git/commits/9fb160b13028edfd5431e3236798c00497e1390b,9fb160b13028edfd5431e3236798c00497e1390b,Cluster Manager: remove unused code elements
antirez,2019-01-23 15:59:09,https://api.github.com/repos/antirez/redis/git/commits/f99e0f59efeea13cc91af680f21571a62286e163,f99e0f59efeea13cc91af680f21571a62286e163,ACL: populate category flags from command table.
soloestoy,2019-01-23 15:57:18,https://api.github.com/repos/antirez/redis/git/commits/496497f81a2c64975c7bbb9bd45bef9a2db91687,496497f81a2c64975c7bbb9bd45bef9a2db91687,ACL: fix null pointer in getuser
antirez,2019-01-23 15:47:29,https://api.github.com/repos/antirez/redis/git/commits/91ec53ed13b37681274d22ea19816b7bcc30d71e,91ec53ed13b37681274d22ea19816b7bcc30d71e,ACL: define category names and flags.
antirez,2019-01-23 11:15:10,https://api.github.com/repos/antirez/redis/git/commits/c5e717c637cbb1c80e1259560ebf995fb7920628,c5e717c637cbb1c80e1259560ebf995fb7920628,ACL: command categories added to the command table.
antirez,2019-01-23 10:21:02,https://api.github.com/repos/antirez/redis/git/commits/b8ff73894a076b98380c62ae051be6abfffe47e8,b8ff73894a076b98380c62ae051be6abfffe47e8,ACL: improve top comments of the command table.
antirez,2019-01-23 10:14:39,https://api.github.com/repos/antirez/redis/git/commits/932a1196d8d18fb659677068cf88bdcc08ff7ef6,932a1196d8d18fb659677068cf88bdcc08ff7ef6,ACL: mark more commands as read-only commands.
antirez,2019-01-23 10:05:54,https://api.github.com/repos/antirez/redis/git/commits/effb84be176b3b8300b5b1498fc6c86ee7f60a71,effb84be176b3b8300b5b1498fc6c86ee7f60a71,ACL: specify better the +@all semantics in comments.
guybe7,2019-01-23 09:11:57,https://api.github.com/repos/antirez/redis/git/commits/25029568358e70ac92c6048af4001f4c379ab788,25029568358e70ac92c6048af4001f4c379ab788,ZPOP should return an empty array if COUNT=0
antirez,2019-01-23 07:14:56,https://api.github.com/repos/antirez/redis/git/commits/b270322ff9d008ceafcaac68a89967d2b34d8626,b270322ff9d008ceafcaac68a89967d2b34d8626,ACL: ACLUserCanExecuteFutureCommands() function added.
antirez,2019-01-23 07:10:57,https://api.github.com/repos/antirez/redis/git/commits/70e541b7bc022c7eeb325130c9fadbf02b116b15,70e541b7bc022c7eeb325130c9fadbf02b116b15,"ACL: better define name, and the idea of reserved ID."
antirez,2019-01-22 18:02:50,https://api.github.com/repos/antirez/redis/git/commits/711e514ea4ac27709de822f73c8c87a7fa6ddfd2,711e514ea4ac27709de822f73c8c87a7fa6ddfd2,ACL: update comments in command flags.
antirez,2019-01-22 16:50:19,https://api.github.com/repos/antirez/redis/git/commits/e97481d4f4423d59e4ce7be7479063c1b18309c4,e97481d4f4423d59e4ce7be7479063c1b18309c4,ACL: remove no longer existing flag from comment.
antirez,2019-01-22 16:46:49,https://api.github.com/repos/antirez/redis/git/commits/82d194c1ab1223df807061df058d7dc443fb39d7,82d194c1ab1223df807061df058d7dc443fb39d7,ACL: populate command table with new flags.
antirez,2019-01-22 12:29:06,https://api.github.com/repos/antirez/redis/git/commits/9e4fb96ca12476b1c7468b143efca86b478bfb4a,9e4fb96ca12476b1c7468b143efca86b478bfb4a,"ACL: review of Redis command table and new flags format.

However the code is yet not able to parse the new flags format."
antirez,2019-01-21 17:23:28,https://api.github.com/repos/antirez/redis/git/commits/561661b145598a00bfad42460fc0c09f40df8071,561661b145598a00bfad42460fc0c09f40df8071,ACL: setuser nocommands / -@all implemented.
antirez,2019-01-21 17:21:02,https://api.github.com/repos/antirez/redis/git/commits/8dfeb4fba129662364cb630fafc95f6b1c6fd781,8dfeb4fba129662364cb630fafc95f6b1c6fd781,ACL: setuser reset implemented.
antirez,2019-01-21 17:18:39,https://api.github.com/repos/antirez/redis/git/commits/9e5c38282b57e437392d411e826c61286f3debb2,9e5c38282b57e437392d411e826c61286f3debb2,ACL: setuser resetkeys implemented.
antirez,2019-01-21 16:09:58,https://api.github.com/repos/antirez/redis/git/commits/2263d6e173c1c3566d5384e5d69ea01b9a06266a,2263d6e173c1c3566d5384e5d69ea01b9a06266a,ACL: specify better the command denied error.
antirez,2019-01-21 16:08:54,https://api.github.com/repos/antirez/redis/git/commits/53321c3c2c8f3d7c71d9f261d6e16563be85e3dd,53321c3c2c8f3d7c71d9f261d6e16563be85e3dd,ACL: subcommand matching.
antirez,2019-01-18 17:16:03,https://api.github.com/repos/antirez/redis/git/commits/4078755ddb69b3ed62579d08a0bea60f34da3e65,4078755ddb69b3ed62579d08a0bea60f34da3e65,ACL: setting single commands ACLs implementation.
antirez,2019-01-18 12:39:28,https://api.github.com/repos/antirez/redis/git/commits/10f121295c68ef0e2f5a71fdae14b4b3b5e2a62d,10f121295c68ef0e2f5a71fdae14b4b3b5e2a62d,ACL: GetUserCommandBit() is a much better name for the function.
antirez,2019-01-18 12:37:37,https://api.github.com/repos/antirez/redis/git/commits/48eeec5fb408f71966f9a7b8da28995ac7c9e07d,48eeec5fb408f71966f9a7b8da28995ac7c9e07d,ACL: user commands bitmap check refactoring for new features.
antirez,2019-01-18 12:24:53,https://api.github.com/repos/antirez/redis/git/commits/dbdc68a658014c54d588bbdae96276edcb0e061e,dbdc68a658014c54d588bbdae96276edcb0e061e,ACL: handle command IDs in case insensitive way.
antirez,2019-01-22 16:29:37,https://api.github.com/repos/antirez/redis/git/commits/94460440b7ada26d27e81d0fa5fcef1b3f0f68c7,94460440b7ada26d27e81d0fa5fcef1b3f0f68c7,"Merge pull request #5743 from AngusP/forever-repeat-cli

Redis CLI: Fix broken interval and repeat behaviour (incluing in cluster mode)"
antirez,2019-01-22 16:28:45,https://api.github.com/repos/antirez/redis/git/commits/ed356c3a79e2e83e00d29914b7b4958793d68d35,ed356c3a79e2e83e00d29914b7b4958793d68d35,"Merge pull request #5795 from zhicheng/fix-double-free-issue

fix clusterManagerGetAntiAffinityScore double free otypes"
antirez,2019-01-21 16:14:04,https://api.github.com/repos/antirez/redis/git/commits/7c53e5bdc45e0faf0087e4d0d2abe3dc5c76071e,7c53e5bdc45e0faf0087e4d0d2abe3dc5c76071e,"Merge pull request #5796 from soloestoy/fix-acl-compile-warning

ACL: fix compile warnings"
antirez,2019-01-21 10:28:44,https://api.github.com/repos/antirez/redis/git/commits/4dc69497f509956d298455492fe5ab98a9738cb6,4dc69497f509956d298455492fe5ab98a9738cb6,Refactoring: always kill AOF/RDB child via helper functions.
antirez,2019-01-21 10:21:12,https://api.github.com/repos/antirez/redis/git/commits/5f42bfce0507308e05937df9336441e59a1b8b90,5f42bfce0507308e05937df9336441e59a1b8b90,"Merge pull request #5798 from trevor211/fixChildInfoPipeFdLeak

Fix child info pipe fd leak when child process gets killed."
antirez,2019-01-21 10:20:56,https://api.github.com/repos/antirez/redis/git/commits/adfaf548e3ad151e31ba84dbb7e6c59982e2c2b8,adfaf548e3ad151e31ba84dbb7e6c59982e2c2b8,Merge branch 'unstable' into fixChildInfoPipeFdLeak
antirez,2019-01-21 10:15:43,https://api.github.com/repos/antirez/redis/git/commits/cfdc800a5ff5a2bb02ccd1e21c1c36e6cb5a474d,cfdc800a5ff5a2bb02ccd1e21c1c36e6cb5a474d,Remove non semantical newline space from PR #5797.
antirez,2019-01-21 10:14:48,https://api.github.com/repos/antirez/redis/git/commits/9f939610f3c9ee26e3d4aec507ef7ec8f9c0d02d,9f939610f3c9ee26e3d4aec507ef7ec8f9c0d02d,"Merge pull request #5797 from trevor211/fixUpdateDictResizePolicy

Fix update dict resize policy"
trevor211,2019-01-21 09:48:45,https://api.github.com/repos/antirez/redis/git/commits/440385de143902a77338091cf658d15381e028fa,440385de143902a77338091cf658d15381e028fa,Fix child info pipe fd leak when child process gets killed.
trevor211,2019-01-21 09:33:18,https://api.github.com/repos/antirez/redis/git/commits/f004a3e7ff01dfb8952fc424a68f780486c846ba,f004a3e7ff01dfb8952fc424a68f780486c846ba,Update dict resize policy when rdb child process gets killed.
trevor211,2019-01-21 09:27:36,https://api.github.com/repos/antirez/redis/git/commits/3f0c2b1fa28870b15259b4d4fac92732e4c36976,3f0c2b1fa28870b15259b4d4fac92732e4c36976,Update dict resize policy when aof rewrite process gets killed.
soloestoy,2019-01-21 06:53:46,https://api.github.com/repos/antirez/redis/git/commits/ab1992c9c6a985e196e66b5ea185c65e1e69e666,ab1992c9c6a985e196e66b5ea185c65e1e69e666,ACL: fix compile warnings
zhicheng,2019-01-19 03:38:36,https://api.github.com/repos/antirez/redis/git/commits/c90cf3d82f3288762441f2c287a21301c8be0ae7,c90cf3d82f3288762441f2c287a21301c8be0ae7,fix clusterManagerGetAntiAffinityScore double free otypes
antirez,2019-01-18 10:49:30,https://api.github.com/repos/antirez/redis/git/commits/c8391388c221b9255a7b6536c3f43438f36b8e2b,c8391388c221b9255a7b6536c3f43438f36b8e2b,ACL: remove server.requirepass + some refactoring.
antirez,2019-01-18 10:30:40,https://api.github.com/repos/antirez/redis/git/commits/7de6e30241127b60d4bf716a3399473320afe571,7de6e30241127b60d4bf716a3399473320afe571,ACL: fix config get requirepass.
antirez,2019-01-18 10:26:29,https://api.github.com/repos/antirez/redis/git/commits/ac6e49de4884eb1c2508179b903b0dfadde0f0b9,ac6e49de4884eb1c2508179b903b0dfadde0f0b9,ACL: implement resetpass directive and adjust test.
antirez,2019-01-17 17:33:36,https://api.github.com/repos/antirez/redis/git/commits/2c66c525f93539dab5e4fb71327fda2a9672cf3b,2c66c525f93539dab5e4fb71327fda2a9672cf3b,ACL: configure the master connection without user.
antirez,2019-01-17 17:30:23,https://api.github.com/repos/antirez/redis/git/commits/b87815c1f800690c90bbc6c50bbe62878841d0b9,b87815c1f800690c90bbc6c50bbe62878841d0b9,"ACL: AUTH + no default user password raises an error.

This way the behavior is very similar to the past one.
This is useful in order to remember the user she probably failed to
configure a password correctly."
antirez,2019-01-17 17:22:22,https://api.github.com/repos/antirez/redis/git/commits/636424c0ce6d162e13c4b00b01ad43bba06c580b,636424c0ce6d162e13c4b00b01ad43bba06c580b,ACL: change requirepass stop condition to use ACLs.
antirez,2019-01-17 17:19:04,https://api.github.com/repos/antirez/redis/git/commits/0526d1538beaa36567e595becf8f890e92d109aa,0526d1538beaa36567e595becf8f890e92d109aa,ACL: partial implementation of ACL GETUSER.
antirez,2019-01-17 17:05:43,https://api.github.com/repos/antirez/redis/git/commits/7b65605ab27e00cfdd58db048da398e27d783038,7b65605ab27e00cfdd58db048da398e27d783038,ACL: reimplement requirepass option in term of ACLs.
antirez,2019-01-16 17:31:05,https://api.github.com/repos/antirez/redis/git/commits/4a3419acfcaa178237a09e769aa34163d1391d09,4a3419acfcaa178237a09e769aa34163d1391d09,ACL: fix and improve ACL key checking.
antirez,2019-01-16 12:50:00,https://api.github.com/repos/antirez/redis/git/commits/dbae371090780b81ccecfc0d24aa46715b873f36,dbae371090780b81ccecfc0d24aa46715b873f36,ACL: create the user pattern list ASAP.
antirez,2019-01-16 12:39:04,https://api.github.com/repos/antirez/redis/git/commits/f78b3ede2735397704fd452619efcbdac37254f6,f78b3ede2735397704fd452619efcbdac37254f6,ACL: key matching implemented.
antirez,2019-01-16 12:29:04,https://api.github.com/repos/antirez/redis/git/commits/0db42d4ba8148a1e493f2da208d4bcf509716870,0db42d4ba8148a1e493f2da208d4bcf509716870,ACL: implement the key match opcode in ACLSetUser().
soloestoy,2019-01-16 11:19:10,https://api.github.com/repos/antirez/redis/git/commits/645d44d545ec958b9f541d4b7473ec021331ab04,645d44d545ec958b9f541d4b7473ec021331ab04,"Streams: checkType before XGROUP CREATE

Fix issue #5785, in case create group on a key is not stream."
antirez,2019-01-15 17:28:43,https://api.github.com/repos/antirez/redis/git/commits/ff92c069475bd6f0ebbaca009ad3168c9d359851,ff92c069475bd6f0ebbaca009ad3168c9d359851,ACL: fix command exec check by returning.
antirez,2019-01-15 17:26:44,https://api.github.com/repos/antirez/redis/git/commits/c79b01f4baf8948a22fdca96a73710466b4fcd41,c79b01f4baf8948a22fdca96a73710466b4fcd41,ACL: the AUTH command can be always executed.
antirez,2019-01-15 17:16:20,https://api.github.com/repos/antirez/redis/git/commits/cca64672f418aa793ed36fcb6da8977ea11b240a,cca64672f418aa793ed36fcb6da8977ea11b240a,ACL: AUTH uses users. ACL WHOAMI implemented.
antirez,2019-01-15 16:57:49,https://api.github.com/repos/antirez/redis/git/commits/35fe59935ef809956f593cd4973387665d2d072f,35fe59935ef809956f593cd4973387665d2d072f,ACL: automatically authenticate the nopass default user.
antirez,2019-01-15 12:45:16,https://api.github.com/repos/antirez/redis/git/commits/52e99229874d92507cb768a665ed16185c4fbffa,52e99229874d92507cb768a665ed16185c4fbffa,"ACL: AUTH command new form, using the ACL subsystem."
antirez,2019-01-15 12:16:31,https://api.github.com/repos/antirez/redis/git/commits/b39409bcf8ee67cab100c5ffc6664c058a6b3333,b39409bcf8ee67cab100c5ffc6664c058a6b3333,"ACL: nopass user setting.

This is needed in order to model the current behavior of authenticating
the connection directly when no password is set. Now with ACLs this will
be obtained by setting the default user as ""nopass"" user. Moreover this
flag can be used in order to create other users that do not require any
password but will work with ""AUTH username <any-password>""."
antirez,2019-01-15 11:58:54,https://api.github.com/repos/antirez/redis/git/commits/4f7ff85b8871a1048044c94338cf56b30c17dbcf,4f7ff85b8871a1048044c94338cf56b30c17dbcf,ACL: ability to set/remove user passwords.
antirez,2019-01-15 08:36:12,https://api.github.com/repos/antirez/redis/git/commits/7aea02fa87b3b900d65102a5029a52871994ac15,7aea02fa87b3b900d65102a5029a52871994ac15,ACL: initial implementation of the ACL command.
madolson,2019-01-15 07:26:19,https://api.github.com/repos/antirez/redis/git/commits/b00e1891c04bd375bb7d9877397c675335f8b40c,b00e1891c04bd375bb7d9877397c675335f8b40c,Fixed a rounding bug in geo.tcl
antirez,2019-01-14 17:35:21,https://api.github.com/repos/antirez/redis/git/commits/a2e376ba5293e2b1f67c856add6eb61fbd1e7692,a2e376ba5293e2b1f67c856add6eb61fbd1e7692,ACL: ACLCheckCommandPerm() implementation WIP.
antirez,2019-01-14 16:01:49,https://api.github.com/repos/antirez/redis/git/commits/733438fe23f67559d4da922c749664ed5db5dfc9,733438fe23f67559d4da922c749664ed5db5dfc9,"RESP3: Populate new fields for the AOF fake client.

However we should remove this fake client ad-hoc creation, and replace
it with the proper call to createClient(-1), and then adjust the fake
client as we like."
antirez,2019-01-14 15:09:29,https://api.github.com/repos/antirez/redis/git/commits/09391369b871eb9def03a61bafa40c7cfedda6a7,09391369b871eb9def03a61bafa40c7cfedda6a7,ACL: fix field name typo causing segfault.
antirez,2019-01-14 12:22:56,https://api.github.com/repos/antirez/redis/git/commits/a0a4fb85ff33cddd2e71799f240ff3eda3cec01f,a0a4fb85ff33cddd2e71799f240ff3eda3cec01f,ACL: Fix compilation by adding prototype and c->cmd fix.
antirez,2019-01-14 12:21:21,https://api.github.com/repos/antirez/redis/git/commits/2da2e452ab49e7a7d7f45229e1d9c3a8ce02811a,2da2e452ab49e7a7d7f45229e1d9c3a8ce02811a,ACL: ACLLCOMMAND flags.
antirez,2019-01-14 12:20:45,https://api.github.com/repos/antirez/redis/git/commits/648411eb7dcd5a16cfbd146823cff8aeeb269369,648411eb7dcd5a16cfbd146823cff8aeeb269369,ACL: Add hook in processCommand() to check the ACLs before call().
antirez,2019-01-14 12:19:50,https://api.github.com/repos/antirez/redis/git/commits/f95152d4c840ae4540224ad788f2f8e4a782b677,f95152d4c840ae4540224ad788f2f8e4a782b677,ACL: Add skeleton for function checking ability to execute a command.
antirez,2019-01-14 12:19:42,https://api.github.com/repos/antirez/redis/git/commits/4376575d833cfb66a904c0035b5ca69dffad5179,4376575d833cfb66a904c0035b5ca69dffad5179,"ACL: ACLSetUser(), add allcommands in comment."
antirez,2019-01-14 12:18:12,https://api.github.com/repos/antirez/redis/git/commits/67754ae021d5cb29dc9555a59847b652833a6e20,67754ae021d5cb29dc9555a59847b652833a6e20,"ACL: ACLSetUser(), fix flag and add allcommands +@all opcode."
antirez,2019-01-11 12:03:50,https://api.github.com/repos/antirez/redis/git/commits/e7d15e4820f660e412974ae46b6b9ea61e59ace3,e7d15e4820f660e412974ae46b6b9ea61e59ace3,ACL: implement to first trivial opcodes in ACLSetUser().
antirez,2019-01-11 10:32:41,https://api.github.com/repos/antirez/redis/git/commits/aced0328e3fb532496afa1a30eb4227316aef3bd,aced0328e3fb532496afa1a30eb4227316aef3bd,ACL: avoid a radix tree lookup for the default user.
antirez,2019-01-11 10:30:09,https://api.github.com/repos/antirez/redis/git/commits/7f8314760a764a1cfb7405b414e71fc6eba79d90,7f8314760a764a1cfb7405b414e71fc6eba79d90,ACL: modify comment from PR.
antirez,2019-01-11 10:27:09,https://api.github.com/repos/antirez/redis/git/commits/6078d85b525f6595893610c99efd8c47bf4b3137,6078d85b525f6595893610c99efd8c47bf4b3137,"Merge pull request #5769 from charsyam/feature/fix-segmentfault-when-server-starts

fix segmentfault when server start in unstable branch"
antirez,2019-01-11 10:25:55,https://api.github.com/repos/antirez/redis/git/commits/4b72d087e9b3cbbe831d90d6612dfcba5922f1d2,4b72d087e9b3cbbe831d90d6612dfcba5922f1d2,"ACL: ACLSetUser(), initial ideas in comments."
charsyam,2019-01-11 10:12:06,https://api.github.com/repos/antirez/redis/git/commits/45952df700c57d8a0062317959845120a66acc38,45952df700c57d8a0062317959845120a66acc38,fix segmentfault when server start
antirez,2019-01-11 10:02:55,https://api.github.com/repos/antirez/redis/git/commits/dc4f7ad106b69cd6208becd39f35d263b4d1e61b,dc4f7ad106b69cd6208becd39f35d263b4d1e61b,ACL: create the default user.
antirez,2019-01-10 16:01:12,https://api.github.com/repos/antirez/redis/git/commits/6bb6a6d3a8fb017e6b2e981c76d44ebe56b25b65,6bb6a6d3a8fb017e6b2e981c76d44ebe56b25b65,ACL: implement ACLCreateUser().
antirez,2019-01-10 15:40:45,https://api.github.com/repos/antirez/redis/git/commits/e4846b028d77b6ee3ee2bdc386104eeba8ba7c85,e4846b028d77b6ee3ee2bdc386104eeba8ba7c85,ACL: implement ACLGetUserByName().
antirez,2019-01-10 15:39:32,https://api.github.com/repos/antirez/redis/git/commits/29c88a9ce593639599076bd1f564306e38ea7428,29c88a9ce593639599076bd1f564306e38ea7428,ACL: initialization function.
antirez,2019-01-10 15:35:55,https://api.github.com/repos/antirez/redis/git/commits/e9a902a95802367462cf42d9f950498ccf00b74b,e9a902a95802367462cf42d9f950498ccf00b74b,ACL: split acl.c into clear sections.
antirez,2019-01-10 15:33:48,https://api.github.com/repos/antirez/redis/git/commits/4278104acc054d09623ca2389107b46a79a7a336,4278104acc054d09623ca2389107b46a79a7a336,ACL: add a reference to the user in each client.
antirez,2019-01-10 11:47:52,https://api.github.com/repos/antirez/redis/git/commits/4729f71495b008788e356476ed12b1a0ddfa11ca,4729f71495b008788e356476ed12b1a0ddfa11ca,ACL: improved version of the user structure.
antirez,2019-01-09 20:47:43,https://api.github.com/repos/antirez/redis/git/commits/45ff9f33d663c9d2db6a76f739d8c8f507808182,45ff9f33d663c9d2db6a76f739d8c8f507808182,ACL: ACLCheckUserCredentials() next id should be static.
antirez,2019-01-09 20:31:29,https://api.github.com/repos/antirez/redis/git/commits/7fc882c57854e952c866a7925e574dbf5db162bd,7fc882c57854e952c866a7925e574dbf5db162bd,ACL: use a fixed table for command IDs.
antirez,2019-01-09 16:23:23,https://api.github.com/repos/antirez/redis/git/commits/010b24f864134bc8f52228e6bbf6f8c52cecd5b6,010b24f864134bc8f52228e6bbf6f8c52cecd5b6,ACL: set the command ID while populating the commands table.
antirez,2019-01-09 16:20:47,https://api.github.com/repos/antirez/redis/git/commits/91f1d8026b6697ee0649c7d2a8955be563e31863,91f1d8026b6697ee0649c7d2a8955be563e31863,ACL: introduce the concept of command ID.
antirez,2019-01-09 16:09:30,https://api.github.com/repos/antirez/redis/git/commits/42271cff2dcd0a30ef337e7284e134053c91f852,42271cff2dcd0a30ef337e7284e134053c91f852,ACL: fix ACLCheckUserCredentials() usage in AUTH.
antirez,2018-12-21 16:24:14,https://api.github.com/repos/antirez/redis/git/commits/f5d918b2bb1bae3c84dee635ac13526779e9294c,f5d918b2bb1bae3c84dee635ac13526779e9294c,ACL: HELLO should stop if the user is not authenticated.
antirez,2018-12-21 16:16:22,https://api.github.com/repos/antirez/redis/git/commits/b43d70df568d85ba0fb79c9e0129d4654ef471ee,b43d70df568d85ba0fb79c9e0129d4654ef471ee,ACL: refactoring of the original authentication code.
antirez,2018-12-21 16:11:52,https://api.github.com/repos/antirez/redis/git/commits/4d80b0e9657bed6db68debdc5aeab62121d27835,4d80b0e9657bed6db68debdc5aeab62121d27835,RESP3: allow HELLO during busy script and not authenticated states.
antirez,2018-12-19 16:56:50,https://api.github.com/repos/antirez/redis/git/commits/9018388c3f2d183f5110b57649d3239bd699291e,9018388c3f2d183f5110b57649d3239bd699291e,RESP3: Allow any command in RESP3 Pub/Sub mode.
antirez,2018-12-19 16:55:07,https://api.github.com/repos/antirez/redis/git/commits/a4f8f4a8246965c28a2ed3906a0567fbbfe09440,a4f8f4a8246965c28a2ed3906a0567fbbfe09440,"RESP3: PING should reply normally in RESP3 Pub/Sub mode.

Because in RESP3 commands can be sent in the Pub/Sub connection without
problems, so it's better if in such mode there is no exception about
PING."
antirez,2018-12-19 16:41:15,https://api.github.com/repos/antirez/redis/git/commits/eaaac0889223406bef4e7ee34d75616ac6599b36,eaaac0889223406bef4e7ee34d75616ac6599b36,RESP3: Pubsub messages in new push format if client is in RESP3 mode.
antirez,2018-12-18 11:33:51,https://api.github.com/repos/antirez/redis/git/commits/bc75a94e2d00ff0cccde475de0980a89bbc641e9,bc75a94e2d00ff0cccde475de0980a89bbc641e9,RESP3: pubsub messages API completely refactored.
antirez,2018-12-18 11:19:24,https://api.github.com/repos/antirez/redis/git/commits/798a32919291968d9ea44e6266ba5f8d505f4263,798a32919291968d9ea44e6266ba5f8d505f4263,RESP3: extract code to send pubsub messages into functions.
antirez,2018-12-17 15:59:19,https://api.github.com/repos/antirez/redis/git/commits/709a6612eb07a8d9fd78c3421baff5fb8e8d698c,709a6612eb07a8d9fd78c3421baff5fb8e8d698c,"RESP3: addReplyString() -> addReplyProto().

The function naming was totally nuts. Let's fix it as we break PRs
anyway with RESP3 refactoring and changes."
antirez,2018-12-10 16:11:42,https://api.github.com/repos/antirez/redis/git/commits/7d4b600f5df045eb08f49bb33af9a4a75cb480b2,7d4b600f5df045eb08f49bb33af9a4a75cb480b2,RESP3: redis-cli support for boolean in TTY output.
antirez,2018-12-10 16:10:11,https://api.github.com/repos/antirez/redis/git/commits/dfa9d2c74ca8b4bc66390d49d1d52cb6b325e16e,dfa9d2c74ca8b4bc66390d49d1d52cb6b325e16e,RESP3: hiredis: implement bool type.
antirez,2018-12-10 15:55:20,https://api.github.com/repos/antirez/redis/git/commits/e2911703855cd499e3323fcb750eac3847d1e18f,e2911703855cd499e3323fcb750eac3847d1e18f,RESP3: verbatim reply API + DEBUG PROTOCOL support.
antirez,2018-12-10 15:39:27,https://api.github.com/repos/antirez/redis/git/commits/afba21129769f10604559a7a62fc39ac711faf27,afba21129769f10604559a7a62fc39ac711faf27,RESP3: DEBUG PROTOCOL: boolean types.
antirez,2018-12-10 11:35:28,https://api.github.com/repos/antirez/redis/git/commits/8042afb246daaaaeb5a76614b2791c082ecb6654,8042afb246daaaaeb5a76614b2791c082ecb6654,RESP3: Fix addReplyBool() RESP2/3 output.
antirez,2018-12-10 11:31:10,https://api.github.com/repos/antirez/redis/git/commits/4e2dd54df0a0fc305024a0b0df9d8a604ab7f6e1,4e2dd54df0a0fc305024a0b0df9d8a604ab7f6e1,RESP3: DEBUG PROTOCOL: fix strcasecmp() check.
antirez,2018-12-10 11:27:18,https://api.github.com/repos/antirez/redis/git/commits/795ad670f9f3e2c09f8fb4c26b11a080def4420e,795ad670f9f3e2c09f8fb4c26b11a080def4420e,RESP3: DEBUG PROTOCOL command. Only types already supported by API.
antirez,2018-12-07 15:42:49,https://api.github.com/repos/antirez/redis/git/commits/c3bf646ef34e7fca0c58b87ef308ed975e53e7e6,c3bf646ef34e7fca0c58b87ef308ed975e53e7e6,RESP3: fix DEBUG DIGEST-VALUE with new API.
antirez,2018-12-06 10:44:17,https://api.github.com/repos/antirez/redis/git/commits/62b2642c518bf3cc19b2578598f79598b54309e8,62b2642c518bf3cc19b2578598f79598b54309e8,RESP3: redis-cli: show the double as received from Redis.
antirez,2018-12-06 10:43:11,https://api.github.com/repos/antirez/redis/git/commits/045b1f633977926e37a8c77ccd311734abb56749,045b1f633977926e37a8c77ccd311734abb56749,RESP3: hiredis: save the original double string.
antirez,2018-12-06 10:33:58,https://api.github.com/repos/antirez/redis/git/commits/ee4c355a3e5f46ed9ce5749228f9c15e2b1be427,ee4c355a3e5f46ed9ce5749228f9c15e2b1be427,RESP3: hiredis: implement null type.
antirez,2018-12-06 10:29:53,https://api.github.com/repos/antirez/redis/git/commits/b8134dbfa734426c43741e8cd50bbdc5a7295dd1,b8134dbfa734426c43741e8cd50bbdc5a7295dd1,RESP3: hiredis: fix double implementation.
antirez,2018-12-06 10:23:23,https://api.github.com/repos/antirez/redis/git/commits/a2b2d88f384c4ad3e812cceccd4720a9c650207c,a2b2d88f384c4ad3e812cceccd4720a9c650207c,RESP3: hiredis: initial double implementation.
antirez,2018-12-05 11:22:37,https://api.github.com/repos/antirez/redis/git/commits/005915b5c3ed1fcb79e3e0ed6b5d41c057ef5a3b,005915b5c3ed1fcb79e3e0ed6b5d41c057ef5a3b,RESP3: hiredis: map and set display for TTY output.
antirez,2018-12-05 11:00:47,https://api.github.com/repos/antirez/redis/git/commits/24a05e39f0e358d8332f82fb827d05c894462476,24a05e39f0e358d8332f82fb827d05c894462476,RESP3: hiredis: fix hiredis.c assert for new types.
antirez,2018-12-05 10:59:55,https://api.github.com/repos/antirez/redis/git/commits/d4a4375d0510732e9578f9b54ab4cd7e85345393,d4a4375d0510732e9578f9b54ab4cd7e85345393,RESP3: hiredis: free map and set replies.
antirez,2018-12-05 10:55:29,https://api.github.com/repos/antirez/redis/git/commits/eb3c5a70d48f83c3222553fb0bf8c2c61395e886,eb3c5a70d48f83c3222553fb0bf8c2c61395e886,RESP3: hiredis: fix read.c assert for new types.
antirez,2018-12-04 18:01:33,https://api.github.com/repos/antirez/redis/git/commits/d5c54f0b3a908595afead2cbcd93555f2886f22f,d5c54f0b3a908595afead2cbcd93555f2886f22f,RESP3: hiredis updated with recent version + some RESP3 support.
antirez,2018-12-04 17:00:35,https://api.github.com/repos/antirez/redis/git/commits/809e3a44a7b53f26ba6bfe49012a88a5203fae3e,809e3a44a7b53f26ba6bfe49012a88a5203fae3e,RESP3: addReplyBool() implemented.
antirez,2018-12-04 11:46:16,https://api.github.com/repos/antirez/redis/git/commits/4f0860cbfd84bb28c895eae525a7168014dc37f8,4f0860cbfd84bb28c895eae525a7168014dc37f8,RESP3: initial implementation of the HELLO command.
antirez,2018-12-03 18:18:28,https://api.github.com/repos/antirez/redis/git/commits/e5fdd6b6bfa769d83a49643bf58cbe681ed2dfe2,e5fdd6b6bfa769d83a49643bf58cbe681ed2dfe2,RESP3: fix HMGET bug introduced with RESP3 changes.
antirez,2018-12-03 17:08:00,https://api.github.com/repos/antirez/redis/git/commits/0652b05caf32ea6ff5d9aeb17607f35446df55c4,0652b05caf32ea6ff5d9aeb17607f35446df55c4,RESP3: fix genericHgetallCommand() assert.
antirez,2018-12-03 17:02:57,https://api.github.com/repos/antirez/redis/git/commits/c2e5be04214acea0bb93f21155333853ab73641a,c2e5be04214acea0bb93f21155333853ab73641a,RESP3: fix zrangeGenericCommand() proto dependent array len.
antirez,2018-12-03 15:24:04,https://api.github.com/repos/antirez/redis/git/commits/8a0391fbc957983d2f42fdc6e9f7da625178d8f5,8a0391fbc957983d2f42fdc6e9f7da625178d8f5,RESP3: t_stream.c updated.
antirez,2018-11-30 16:12:32,https://api.github.com/repos/antirez/redis/git/commits/baf5b3f93a5ac1efeef6c8b18ae5c61cbbbacb45,baf5b3f93a5ac1efeef6c8b18ae5c61cbbbacb45,RESP3: module.c updated.
antirez,2018-11-30 16:10:51,https://api.github.com/repos/antirez/redis/git/commits/920611a4197cd2606504e6ce4bf66ee213c76b36,920611a4197cd2606504e6ce4bf66ee213c76b36,RESP3: latency.c updated.
antirez,2018-11-30 15:37:48,https://api.github.com/repos/antirez/redis/git/commits/ddb98ad56f9e9eb658f79ee8faf2b027e97c0af7,ddb98ad56f9e9eb658f79ee8faf2b027e97c0af7,RESP3: hyperloglog.c updated.
antirez,2018-11-30 15:36:55,https://api.github.com/repos/antirez/redis/git/commits/3fd78f41e868c4ecf5b1a3b238dfb2ebe81ff579,3fd78f41e868c4ecf5b1a3b238dfb2ebe81ff579,RESP3: restore the concept of null array for RESP2 compat.
antirez,2018-11-30 15:32:06,https://api.github.com/repos/antirez/redis/git/commits/2ad6e875ba0db0a1d2f78df2b7e651010137b576,2ad6e875ba0db0a1d2f78df2b7e651010137b576,RESP3: add shared.nullarray for better RESP2 compat.
antirez,2018-11-30 15:31:02,https://api.github.com/repos/antirez/redis/git/commits/1a17cdfadf43ae6179dc7556caae579436066a2f,1a17cdfadf43ae6179dc7556caae579436066a2f,RESP3: addReplyNullArray() added for better RESP2 compat.
antirez,2018-11-30 10:07:07,https://api.github.com/repos/antirez/redis/git/commits/86c30a92f984a764ba5f4e941bf04119b173f7cb,86c30a92f984a764ba5f4e941bf04119b173f7cb,RESP3: geo.c updated.
antirez,2018-11-30 09:50:33,https://api.github.com/repos/antirez/redis/git/commits/071da9844ce7b22bd08ea0234655d6482f2d01ad,071da9844ce7b22bd08ea0234655d6482f2d01ad,RESP3: blocked.c updated.
antirez,2018-11-30 09:46:55,https://api.github.com/repos/antirez/redis/git/commits/9705c12d85b5428d4923476889a16a55f3589593,9705c12d85b5428d4923476889a16a55f3589593,RESP3: sentinel.c updated.
antirez,2018-11-30 09:40:54,https://api.github.com/repos/antirez/redis/git/commits/3a3d806989ea5ee17482c0a085788adb48fd5917,3a3d806989ea5ee17482c0a085788adb48fd5917,RESP3: bitops.c updated.
antirez,2018-11-30 08:41:54,https://api.github.com/repos/antirez/redis/git/commits/317f8b9d383f1b7f171aef7ea29f9e05abf0ba83,317f8b9d383f1b7f171aef7ea29f9e05abf0ba83,RESP3: most null replies converted.
antirez,2018-11-27 10:58:55,https://api.github.com/repos/antirez/redis/git/commits/1b7298e66ae002b9011c22d8270436506a9dc9b1,1b7298e66ae002b9011c22d8270436506a9dc9b1,RESP3: addReplyNull() added.
antirez,2018-11-26 17:57:37,https://api.github.com/repos/antirez/redis/git/commits/fc9a3de97df95294903e1135c8daf5e29bba76c3,fc9a3de97df95294903e1135c8daf5e29bba76c3,RESP3: remove other pointless shared object.
antirez,2018-11-26 17:55:05,https://api.github.com/repos/antirez/redis/git/commits/b7e8b734c92d623f51869e70c874dd03fc9023d2,b7e8b734c92d623f51869e70c874dd03fc9023d2,RESP3: remove certain constants to spot places to fix.
antirez,2018-11-26 15:44:00,https://api.github.com/repos/antirez/redis/git/commits/a1feda2388d556e6bc0c2f831e0b2f90f5f71abd,a1feda2388d556e6bc0c2f831e0b2f90f5f71abd,RESP3: Scripting RESP3 mode set/map protocol -> Lua conversion.
antirez,2018-11-26 15:22:27,https://api.github.com/repos/antirez/redis/git/commits/9330bcc7eef8598145d20d19133b56a09faf3e88,9330bcc7eef8598145d20d19133b56a09faf3e88,RESP3: Fix API in scripting.c leaving Lua conversions RESP2.
antirez,2018-11-26 15:20:01,https://api.github.com/repos/antirez/redis/git/commits/f07f3d729fcd037885d54287fa670dc25243977e,f07f3d729fcd037885d54287fa670dc25243977e,RESP3: Use new aggregate reply API in slowlog.c.
antirez,2018-11-26 15:17:19,https://api.github.com/repos/antirez/redis/git/commits/feb6b318325d8982e2f1e424f0dcf75ed86f5c50,feb6b318325d8982e2f1e424f0dcf75ed86f5c50,RESP3: Use new aggregate reply API in t_set.c.
antirez,2018-11-23 11:40:01,https://api.github.com/repos/antirez/redis/git/commits/dcbd40cea4497936e20100f14bf7ad4b010d1803,dcbd40cea4497936e20100f14bf7ad4b010d1803,RESP3: Use new aggregate reply API in cluster.c.
antirez,2018-11-23 11:22:27,https://api.github.com/repos/antirez/redis/git/commits/c7f80e4f1a6374b3ea3791fb6f80bcaba09e1604,c7f80e4f1a6374b3ea3791fb6f80bcaba09e1604,RESP3: Make WITHSCORES reply back with a flat array in RESP2.
antirez,2018-11-21 16:27:25,https://api.github.com/repos/antirez/redis/git/commits/fe67418ba4222dc5580aab36524e3125855ee754,fe67418ba4222dc5580aab36524e3125855ee754,RESP3: Use new deferred len API in object.c.
antirez,2018-11-21 15:20:17,https://api.github.com/repos/antirez/redis/git/commits/13966522ea739d5f810153d2bf5525cf02482048,13966522ea739d5f810153d2bf5525cf02482048,RESP3: bring RESP2 compatibility to previous changes.
antirez,2018-11-21 11:49:39,https://api.github.com/repos/antirez/redis/git/commits/e14aabf9369aae4faf20a40b63e616e47f43d9c5,e14aabf9369aae4faf20a40b63e616e47f43d9c5,RESP3: addReply*Len() support for RESP2 backward comp.
antirez,2018-11-21 10:53:18,https://api.github.com/repos/antirez/redis/git/commits/1ac692664708108eaa38476a3b9549c9dcca3764,1ac692664708108eaa38476a3b9549c9dcca3764,RESP3: put RESP version in the client structure.
antirez,2018-11-09 12:16:21,https://api.github.com/repos/antirez/redis/git/commits/f44e00b6910513d0dc31a1711a6dcc81526aa77d,f44e00b6910513d0dc31a1711a6dcc81526aa77d,RESP3: Use new API and types in t_hash.c.
antirez,2018-11-09 11:59:00,https://api.github.com/repos/antirez/redis/git/commits/b5076547167eef56187a7c8be2c75d80d37d7b16,b5076547167eef56187a7c8be2c75d80d37d7b16,RESP3: Use new deferred len API in dict.c.
antirez,2018-11-08 16:54:50,https://api.github.com/repos/antirez/redis/git/commits/cdd10193c5bcd85eabf6924d57e1d5357c670d03,cdd10193c5bcd85eabf6924d57e1d5357c670d03,RESP3: Use new deferred len API in config.c.
antirez,2018-11-08 15:24:54,https://api.github.com/repos/antirez/redis/git/commits/470c28380f1323593a660e5fa63a0ba21c6fafed,470c28380f1323593a660e5fa63a0ba21c6fafed,RESP3: Use new deferred len API in t_zset.c.
antirez,2018-11-08 12:28:04,https://api.github.com/repos/antirez/redis/git/commits/a577230a58800a9dc88d29b75d2ada605dd85d17,a577230a58800a9dc88d29b75d2ada605dd85d17,RESP3: Use new deferred len API in t_string.c.
antirez,2018-11-08 12:27:34,https://api.github.com/repos/antirez/redis/git/commits/07bce54093b29342f63d7a4a250ebc626dae5343,07bce54093b29342f63d7a4a250ebc626dae5343,RESP3: Use new deferred len API in replication.c.
antirez,2018-11-08 12:05:50,https://api.github.com/repos/antirez/redis/git/commits/073293693e84b412ad3eaed392f79643a4b2d7a5,073293693e84b412ad3eaed392f79643a4b2d7a5,RESP3: Use new deferred len API in server.c.
antirez,2018-11-08 11:28:56,https://api.github.com/repos/antirez/redis/git/commits/57c5a766a23130cb47a801200abc2ca7cf4a2a38,57c5a766a23130cb47a801200abc2ca7cf4a2a38,RESP3: Aggregate deferred lengths functions.
antirez,2018-11-07 16:40:35,https://api.github.com/repos/antirez/redis/git/commits/914ee43108c5a742c160c7a50d190c15714f9c66,914ee43108c5a742c160c7a50d190c15714f9c66,RESP3: Double replies and aggregate lengths initial functions.
antirez,2019-01-09 09:12:09,https://api.github.com/repos/antirez/redis/git/commits/511298578a7363637e55aafdbaf9fcd7f6cbb402,511298578a7363637e55aafdbaf9fcd7f6cbb402,"Merge pull request #5746 from UmanShahzad/old-geohash-docs

Remove documentation about geohash-int in deps repo."
antirez,2019-01-09 09:11:27,https://api.github.com/repos/antirez/redis/git/commits/14400d073ba7ba74ed54ad45a4ec24af74a3dd13,14400d073ba7ba74ed54ad45a4ec24af74a3dd13,"Merge pull request #5729 from artix75/cluster_manager_fix_cmd

Cluster Manager del-node: use CLUSTER RESET in place of SHUTDOWN"
antirez,2019-01-09 09:10:53,https://api.github.com/repos/antirez/redis/git/commits/896be4c908ddca6d4bfa1e751432585b4b3ff535,896be4c908ddca6d4bfa1e751432585b4b3ff535,"Merge pull request #5751 from chenyang8094/unstable

Update ae.c"
chenyang8094,2019-01-06 07:01:25,https://api.github.com/repos/antirez/redis/git/commits/30d8d05cd677d1cc9f5a9bf85337af43416422ec,30d8d05cd677d1cc9f5a9bf85337af43416422ec,"Update ae.c

Update comment"
AngusP,2019-01-02 19:21:49,https://api.github.com/repos/antirez/redis/git/commits/2925bdc63bcf62acd8a536cc629f4a54d64b370c,2925bdc63bcf62acd8a536cc629f4a54d64b370c,Add comment explaining negative repeat
AngusP,2019-01-02 18:50:58,https://api.github.com/repos/antirez/redis/git/commits/2f6ed9333f082b9cd27bfab05013521b88f077c7,2f6ed9333f082b9cd27bfab05013521b88f077c7,"Fix broken interval and repeat bahaviour in redis-cli (incluing cluster mode)

This addresses two problems, one where infinite (negative) repeat count is broken for all types for Redis,
and another specific to cluster mode where redirection is needed.

Now allows and works correctly for negative (i.e. -1) repeat values passed with `-r` argument to redis-cli
as documented here https://redis.io/topics/rediscli#continuously-run-the-same-command which seems to have
regressed as a feature in 95b988 (though that commit removed bad integer wrap-around to `0` behaviour).

This broken behaviour exists currently (e50458), and redis-cli will just exit immediately with repeat `-r <= 0`
as opposed to send commands indefinitely as it should with `-r < 0`

Additionally prevents a repeat * interval seconds hang/time spent doing nothing at the start before issuing
commands in cluster mode (`-c`), where the command needed to redirect to a slot on another node, as commands
where failing and waiting to be reissued but this was fully repeated before being reissued. For example,

        redis-cli -c -r 10 -i 0.5 INCR test_key_not_on_6379

Would hang and show nothing for 5 seconds (10 * 0.5) before showing

        (integer) 1
        (integer) 2
        (integer) 3
        (integer) 4
        (integer) 5
        (integer) 6
        (integer) 7
        (integer) 8
        (integer) 9
        (integer) 10

at half second intervals as intended."
bmerry,2018-12-31 09:51:03,https://api.github.com/repos/antirez/redis/git/commits/6b818efeb62356358ea5a5187fd02889940d4bd0,6b818efeb62356358ea5a5187fd02889940d4bd0,"Make dbSwapDatabases take args as long

This prevents an integer overflow bug. Closes #5737."
artix75,2018-12-27 16:20:38,https://api.github.com/repos/antirez/redis/git/commits/17797660f133b4d0491098f656944f46757e2edd,17797660f133b4d0491098f656944f46757e2edd,"Cluster Manager del-node: use CLUSTER RESET in place of SHUTDOWN

See issue #5687"
antirez,2018-12-21 10:39:15,https://api.github.com/repos/antirez/redis/git/commits/e504583b7806d946da9c3627784d551a742be4d0,e504583b7806d946da9c3627784d551a742be4d0,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-12-20 16:44:51,https://api.github.com/repos/antirez/redis/git/commits/8a87de130ff9389273516993f9aaec1f75cbb22a,8a87de130ff9389273516993f9aaec1f75cbb22a,Modules shared API: export new core APIs.
antirez,2018-12-20 16:40:55,https://api.github.com/repos/antirez/redis/git/commits/d3eb0028e937fe8c6b435bcb3760f676dcc0920f,d3eb0028e937fe8c6b435bcb3760f676dcc0920f,Modules shared API: also unregister the module as user.
antirez,2018-12-20 16:31:55,https://api.github.com/repos/antirez/redis/git/commits/9403b3d7a39ea80f95ae71f386d6949f52284426,9403b3d7a39ea80f95ae71f386d6949f52284426,Modules shared API: prevent unloading of used modules.
antirez,2018-12-20 16:16:39,https://api.github.com/repos/antirez/redis/git/commits/6bb8cdaebe74f9c79bb754ccd7a7f05fe8385f81,6bb8cdaebe74f9c79bb754ccd7a7f05fe8385f81,Modules shared API: unregister APIs function.
antirez,2018-12-20 11:06:24,https://api.github.com/repos/antirez/redis/git/commits/27f6e9bb9b6614bf4e49d9c53087f21de09cdb1a,27f6e9bb9b6614bf4e49d9c53087f21de09cdb1a,"Modules shared API: initial core functions.

Based on ideas and code in PR #5560 by @MeirShpilraien."
antirez,2018-12-20 16:56:38,https://api.github.com/repos/antirez/redis/git/commits/850b64c1166a1c36e9aa1b12a265b49982d776a0,850b64c1166a1c36e9aa1b12a265b49982d776a0,Revert shared APIs to modify the design.
MeirShpilraien,2018-12-09 12:32:55,https://api.github.com/repos/antirez/redis/git/commits/ab37289fa6035a774d7438f8a7342d3177fdc1be,ab37289fa6035a774d7438f8a7342d3177fdc1be,added module ability to register api to be used by other modules
antirez,2018-12-19 16:34:35,https://api.github.com/repos/antirez/redis/git/commits/638db2fc0195445fb1e85050c5e410d9f5187940,638db2fc0195445fb1e85050c5e410d9f5187940,"Merge pull request #5713 from artix75/cluster_manager_fix_cmd

Cluster Manager: enable --cluster-replace also for 'fix' command."
artix75,2018-12-19 16:27:58,https://api.github.com/repos/antirez/redis/git/commits/503fd229e4181e932ba74b3ca8a222712d80ebca,503fd229e4181e932ba74b3ca8a222712d80ebca,Cluster Manager: enable --cluster-replace also for 'fix' command.
antirez,2018-12-19 16:24:38,https://api.github.com/repos/antirez/redis/git/commits/f07205e48cab5577dbae10ac7540369ccbfcc9c5,f07205e48cab5577dbae10ac7540369ccbfcc9c5,"Merge pull request #5709 from artix75/cluster_manager_fix_cmd

Fixed memory leak in clusterManagerCompareKeysValues."
artix75,2018-12-18 17:39:21,https://api.github.com/repos/antirez/redis/git/commits/cc29590188a22eb73cfbbef39fce73c7467b1edf,cc29590188a22eb73cfbbef39fce73c7467b1edf,Fixed memory leak in clusterManagerCompareKeysValues.
antirez,2018-12-18 17:27:38,https://api.github.com/repos/antirez/redis/git/commits/0d166674f93d5eed0a0ddcaaaa9869dc754cf4ba,0d166674f93d5eed0a0ddcaaaa9869dc754cf4ba,"Merge pull request #5708 from artix75/cluster_manager_fix_cmd

Cluster Manager: compare key values after BUSYKEY error (migration)."
artix75,2018-12-18 16:38:57,https://api.github.com/repos/antirez/redis/git/commits/143bfa1e6e65cf8be1eaad0b8169e2d95ca62f9a,143bfa1e6e65cf8be1eaad0b8169e2d95ca62f9a,"Cluster Manager: compare key values after BUSYKEY error (migration).

If a key exists in the target node during a migration (BUSYKEY),
the value of the key on both nodes (source and target) will be compared.
If the key has the same value on both keys, the migration will be
automatically retried with the REPLACE argument in order to override
the target's key.

If the key has different values, the behaviour will depend on such
cases:
- In case of 'fix' command, the migration will stop and the user
  will be warned to manually check the key(s).
- In other cases (ie. reshard), if the user launched the command
  with the --cluster-replace option, the migration will be
  retried with the REPLACE argument, elsewhere the migration will
  stop and the user will be warned."
guybe7,2018-12-13 12:57:38,https://api.github.com/repos/antirez/redis/git/commits/ed88f77d6dcd36e0c62faa484491530bd6739d38,ed88f77d6dcd36e0c62faa484491530bd6739d38,Check server.verbosity in RM_LogRaw
antirez,2018-12-12 12:39:53,https://api.github.com/repos/antirez/redis/git/commits/81008bf99e131a2e56ccf467a6c60debb522759f,81008bf99e131a2e56ccf467a6c60debb522759f,"Merge pull request #5691 from artix75/cluster_manager_fix_cmd

Cluster Manager: avoid using reply error messages to check slot status."
artix75,2018-12-12 12:23:08,https://api.github.com/repos/antirez/redis/git/commits/d935cfcb89fe70a0d9c039605d1df38d0be59db7,d935cfcb89fe70a0d9c039605d1df38d0be59db7,"Cluster Manager: avoid using reply error messages to check slot status.

Slot assignment status is now checked by using CLUSTER SLOTS.
Furthermore, one memory leak has been fixed."
antirez,2018-12-12 10:55:30,https://api.github.com/repos/antirez/redis/git/commits/009a9292694491ff9eec78c024d38b0b5ca83f2e,009a9292694491ff9eec78c024d38b0b5ca83f2e,Remove debugging printf from replication.tcl test.
antirez,2018-12-12 10:37:15,https://api.github.com/repos/antirez/redis/git/commits/129f2d2746ca80451d8c84b223b568298020b125,129f2d2746ca80451d8c84b223b568298020b125,"freeMemoryIfNeeded() small refactoring.

Related to issue #5686 and PR #5689."
antirez,2018-12-12 10:29:10,https://api.github.com/repos/antirez/redis/git/commits/7ae184bfea90cf3e146ac06af0cc5c04d7628a22,7ae184bfea90cf3e146ac06af0cc5c04d7628a22,"Merge pull request #5689 from soloestoy/donot-evict-when-AOF-loading

evict: don't care about mem if loading"
antirez,2018-12-11 16:50:18,https://api.github.com/repos/antirez/redis/git/commits/03e2bb0cfd1ad6dba920e72b3d212cc3abb97d98,03e2bb0cfd1ad6dba920e72b3d212cc3abb97d98,"Crashing is too much in addReplyErrorLength().

See #5663."
soloestoy,2018-12-11 16:25:24,https://api.github.com/repos/antirez/redis/git/commits/b9cd89d1089a488b82517ad8f7899dde10cf7c25,b9cd89d1089a488b82517ad8f7899dde10cf7c25,"evict: don't care about mem if loading

When loading data, we call processEventsWhileBlocked
to process events and execute commands.
But if we are loading AOF it's dangerous, because
processCommand would call freeMemoryIfNeeded to evict,
and that will break data consistency, see issue #5686."
antirez,2018-12-11 12:30:04,https://api.github.com/repos/antirez/redis/git/commits/0110e46f6ea654d1d8ef985cf317243f58f5ac70,0110e46f6ea654d1d8ef985cf317243f58f5ac70,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-12-11 12:29:30,https://api.github.com/repos/antirez/redis/git/commits/a31ca8d75375a196bb4a2393db9f9d2307416d8f,a31ca8d75375a196bb4a2393db9f9d2307416d8f,"stringmatchlen() fuzz test added.

Verified to be able to trigger at least #5632. Does not report other
issues."
antirez,2018-12-11 12:18:52,https://api.github.com/repos/antirez/redis/git/commits/c710d4afdccc0c797745bc3264f3f32a4cdd85da,c710d4afdccc0c797745bc3264f3f32a4cdd85da,"Fix stringmatchlen() read past buffer bug.

See #5632."
antirez,2018-12-11 12:03:09,https://api.github.com/repos/antirez/redis/git/commits/f77edf423405179fe91fd00a1544c82aa070fe69,f77edf423405179fe91fd00a1544c82aa070fe69,"Merge pull request #5665 from louiszhw/unstable

fix comments fault discription"
antirez,2018-12-11 12:02:28,https://api.github.com/repos/antirez/redis/git/commits/e8529d1b1e98aba5021592025c5eb2dac1c2727a,e8529d1b1e98aba5021592025c5eb2dac1c2727a,"Merge pull request #4264 from lsytj0413/unstable

fix a typo: craeted -> created"
antirez,2018-12-11 11:57:25,https://api.github.com/repos/antirez/redis/git/commits/11d399dded8555781bd4a29968a390a23adae7f2,11d399dded8555781bd4a29968a390a23adae7f2,"Merge pull request #5684 from soloestoy/ignore-multi-cmd-flags-loading-aof

multi: ignore multiState's cmd_flags when loading AOF"
soloestoy,2018-12-11 11:53:54,https://api.github.com/repos/antirez/redis/git/commits/6100be7d827bc1329b156b165a4e08fd91cbc115,6100be7d827bc1329b156b165a4e08fd91cbc115,fix typo
soloestoy,2018-12-11 11:47:36,https://api.github.com/repos/antirez/redis/git/commits/1530c0a7dd10f67ff5a1622c107478c6d8275867,1530c0a7dd10f67ff5a1622c107478c6d8275867,multi: ignore multiState's cmd_flags when loading AOF
antirez,2018-12-11 10:39:18,https://api.github.com/repos/antirez/redis/git/commits/274531396caedd710595f46cc14010ed68a0c931,274531396caedd710595f46cc14010ed68a0c931,"Reject EXEC containing write commands against RO replica.

Thanks to @soloestoy for discovering this issue in #5667.
This is an alternative fix in order to avoid both cycling the clients
and also disconnecting clients just having valid read-only transactions
pending."
antirez,2018-12-11 07:23:54,https://api.github.com/repos/antirez/redis/git/commits/086363babf0e47162d975a265bd8d77e8d49dfb1,086363babf0e47162d975a265bd8d77e8d49dfb1,"Merge pull request #5681 from artix75/cluster_manager_fix_cmd

Cluster manager fix cmd"
artix75,2018-12-10 17:01:13,https://api.github.com/repos/antirez/redis/git/commits/27ddb2ba3a8759b306501882bd76760640e6705a,27ddb2ba3a8759b306501882bd76760640e6705a,"Cluster Manager:
- Multiple owners checking in 'fix'/'check' commands is now
  optional (using --cluster-search-multiple-owners).
- Updated help."
artix75,2018-12-05 19:09:09,https://api.github.com/repos/antirez/redis/git/commits/0c1336caf4ba34ee7a41c21fb12756b542a0d2e8,0c1336caf4ba34ee7a41c21fb12756b542a0d2e8,"Cluster Manager:
    - FixOpenSlot now correctly updates in-memory cluster configuration.
    - Improved output messages."
artix75,2018-11-30 19:48:52,https://api.github.com/repos/antirez/redis/git/commits/1a56fc913e70d61449c79b643f4ab241ece3cbec,1a56fc913e70d61449c79b643f4ab241ece3cbec,"Cluster Manager: 'fix' command now handles open slots with migrating state
in one node and importing state in multiple nodes."
artix75,2018-11-28 15:59:16,https://api.github.com/repos/antirez/redis/git/commits/d5f7703367c83f46683d220fed785c18504dd5ca,d5f7703367c83f46683d220fed785c18504dd5ca,"Cluster Manager: setting new slot owner is now handled atomically
in 'fix' command."
artix75,2018-11-27 11:26:56,https://api.github.com/repos/antirez/redis/git/commits/eaac9f9e930d8959d681b7d03d7411bfb18db3a7,eaac9f9e930d8959d681b7d03d7411bfb18db3a7,Cluster Manager: code cleanup.
artix75,2018-11-22 10:47:59,https://api.github.com/repos/antirez/redis/git/commits/5bf13eaaf8f444bb547b00ed5ecd727a93cd8399,5bf13eaaf8f444bb547b00ed5ecd727a93cd8399,"Cluster Manager: check/fix commands now handle multiple owners even if
all slots are covered and not open."
antirez,2018-12-07 16:09:56,https://api.github.com/repos/antirez/redis/git/commits/5bfd8ae25301820ae3c321a838263925e70849b5,5bfd8ae25301820ae3c321a838263925e70849b5,"Merge pull request #5626 from soloestoy/remove-useless-code

remove useless tryObjectEncoding in debug assert"
antirez,2018-12-07 16:09:10,https://api.github.com/repos/antirez/redis/git/commits/03629ba0b6073836577bec1b537925e1c914c404,03629ba0b6073836577bec1b537925e1c914c404,"Merge pull request #5633 from oranagra/frag_bytes_signed

fix #5580, display fragmentation and rss overhead bytes as signed"
antirez,2018-12-07 16:07:14,https://api.github.com/repos/antirez/redis/git/commits/cdab4c3e0911197487a54f1ebe86f51a9a0fcac0,cdab4c3e0911197487a54f1ebe86f51a9a0fcac0,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-12-07 16:06:55,https://api.github.com/repos/antirez/redis/git/commits/7e0cc2bb91dc610b68d2e063728a4416efd19885,7e0cc2bb91dc610b68d2e063728a4416efd19885,Remove no longer relevant comment in processCommand().
antirez,2018-12-07 16:03:48,https://api.github.com/repos/antirez/redis/git/commits/c6341ce3730cbe6c224c75311e79d5c50d238886,c6341ce3730cbe6c224c75311e79d5c50d238886,"Merge pull request #5673 from soloestoy/check-current-client-after-freememory

networking: current_client should not be NULL when trim qb_pos"
antirez,2018-12-07 15:41:54,https://api.github.com/repos/antirez/redis/git/commits/5a0b7212c9c3a672cb47fa2a773bc6cf1c2c4f17,5a0b7212c9c3a672cb47fa2a773bc6cf1c2c4f17,DEBUG DIGEST-VALUE implemented.
antirez,2018-12-07 15:30:33,https://api.github.com/repos/antirez/redis/git/commits/e9400e8efdad01c93b80624805b7ddb2d7ec99ec,e9400e8efdad01c93b80624805b7ddb2d7ec99ec,DEBUG DIGEST refactoring: extract function to digest a value.
antirez,2018-12-07 11:27:32,https://api.github.com/repos/antirez/redis/git/commits/0006c989d2cde8475c7daa56a6e11d7ba72dbd91,0006c989d2cde8475c7daa56a6e11d7ba72dbd91,"Merge pull request #5271 from funny-falcon/cli-migrate-replace

redis-cli reshard/rebalance: ability to force replacement on existing keys"
soloestoy,2018-12-07 11:14:33,https://api.github.com/repos/antirez/redis/git/commits/28c42814956a40f6c7b432a9692e1f1d7437925c,28c42814956a40f6c7b432a9692e1f1d7437925c,networking: current_client should not be NULL when trim qb_pos
funny-falcon,2018-08-22 14:56:13,https://api.github.com/repos/antirez/redis/git/commits/74f942cfa5386b501c0b23733d97ee9a69ad8888,74f942cfa5386b501c0b23733d97ee9a69ad8888,redis-cli reshard/rebalance: ability to force replacement on existing keys
antirez,2018-12-07 10:30:07,https://api.github.com/repos/antirez/redis/git/commits/9f87ef93993b386c22ea673c8f2f1f298f0d8bc9,9f87ef93993b386c22ea673c8f2f1f298f0d8bc9,"Merge pull request #5460 from krallin/env-password

cli: pass auth through REDISCLI_AUTH"
antirez,2018-12-07 10:28:18,https://api.github.com/repos/antirez/redis/git/commits/75c181ee2b91a456ec5a3ac46e1d9f2ad06fe706,75c181ee2b91a456ec5a3ac46e1d9f2ad06fe706,"Merge pull request #5664 from yongman/fix-rediscli-output-format

Fix cluster call reply format readable"
lsytj0413,2017-08-29 06:44:05,https://api.github.com/repos/antirez/redis/git/commits/6aa9606995bc8ae55f01f7713bc9ed8dc88070f1,6aa9606995bc8ae55f01f7713bc9ed8dc88070f1,fix a typo: craeted -> created
louiszhw,2018-12-05 09:15:02,https://api.github.com/repos/antirez/redis/git/commits/b1e35d324404a5017cd925f701211692ed62d495,b1e35d324404a5017cd925f701211692ed62d495,fix comments fault discription
antirez,2018-12-04 17:09:43,https://api.github.com/repos/antirez/redis/git/commits/430a987f4e6c7a011b0841042e4bf34ef7d4b19b,430a987f4e6c7a011b0841042e4bf34ef7d4b19b,"Merge pull request #5663 from madolson/dev_monitor_crash

Fixed a serverPanic when sending an invalid command to a monitor client"
yongman,2018-12-04 09:36:42,https://api.github.com/repos/antirez/redis/git/commits/dfe81b33fe610ccdc205f5b5e49f94f8aa8fbefc,dfe81b33fe610ccdc205f5b5e49f94f8aa8fbefc,Fix cluster call reply format readable
madolson,2018-12-04 07:17:17,https://api.github.com/repos/antirez/redis/git/commits/e2c1f80b464a3a6dde961bb30bff9a39c17c6b29,e2c1f80b464a3a6dde961bb30bff9a39c17c6b29,Fixed a serverPanic when sending an invalid command to a monitor client
oranagra,2018-12-02 13:29:20,https://api.github.com/repos/antirez/redis/git/commits/b587c54c24d0cfdc3cfb22303553ea5e780b87c1,b587c54c24d0cfdc3cfb22303553ea5e780b87c1,"fix #5580, display fragmentation and rss overhead bytes as signed

these metrics become negative when RSS is smaller than the used_memory.
This can easily happen when the program allocated a lot of memory and haven't
written to it yet, in which case the kernel doesn't allocate any pages to the process"
soloestoy,2018-11-30 04:05:46,https://api.github.com/repos/antirez/redis/git/commits/0da171b3a675ee0897e7d566a6dcefd02fb671c4,0da171b3a675ee0897e7d566a6dcefd02fb671c4,remove useless tryObjectEncoding in debug assert
antirez,2018-11-28 17:17:05,https://api.github.com/repos/antirez/redis/git/commits/46a51cdcdc0bd92473163068c2ec3bef4dffe63c,46a51cdcdc0bd92473163068c2ec3bef4dffe63c,"Merge pull request #5549 from oranagra/fix_test_races

fix small test suite race conditions"
antirez,2018-11-28 17:16:04,https://api.github.com/repos/antirez/redis/git/commits/4c544394eb2c1d2bd6d28750604821fffcb01c3d,4c544394eb2c1d2bd6d28750604821fffcb01c3d,"Merge pull request #5562 from soloestoy/memory-usage-more-accurate

MEMORY command: make USAGE more accurate"
antirez,2018-11-28 17:13:04,https://api.github.com/repos/antirez/redis/git/commits/04a5189b5039f886c7813013243ac5d425fc97e6,04a5189b5039f886c7813013243ac5d425fc97e6,"Merge pull request #5594 from yongman/fix-rediscli-fixcoverage

Fix choose a random master node for slot assignment"
soloestoy,2018-11-28 17:01:47,https://api.github.com/repos/antirez/redis/git/commits/d56c63134340ce155a49c03364819b9266a67a52,d56c63134340ce155a49c03364819b9266a67a52,"MEMORY command: make USAGE more accurate

In MEMORY USAGE command, we count the key argv[2] into usage,
but the argument in command may contains free spaces because of
sdsMakeRoomFor. But the key in db never contains free spaces
because we use sdsdup when dbAdd, so using the real key to
count the usage is more accurate."
antirez,2018-11-28 16:14:21,https://api.github.com/repos/antirez/redis/git/commits/d403208d51e82e5eb4010b418beea2683869ce0e,d403208d51e82e5eb4010b418beea2683869ce0e,"Merge pull request #5572 from Weiliang-Li/patch3-util

fix comment typo in util.c"
antirez,2018-11-28 16:12:32,https://api.github.com/repos/antirez/redis/git/commits/fc022031d38e1a5f88b7e4bd9ebc27dd43837818,fc022031d38e1a5f88b7e4bd9ebc27dd43837818,Merge branch 'unstable' of github.com:/antirez/redis into unstable
QuChen88,2018-11-12 23:28:39,https://api.github.com/repos/antirez/redis/git/commits/c99f1206b7f30c642868be1ff902d56ceb0321ef,c99f1206b7f30c642868be1ff902d56ceb0321ef,Add unit test for stream XCLAIM command.
antirez,2018-11-28 16:06:51,https://api.github.com/repos/antirez/redis/git/commits/ef00633759193f0fe3554801bcffb9fcb19dc3d3,ef00633759193f0fe3554801bcffb9fcb19dc3d3,"Merge pull request #5597 from lamby/clarify-socket-creation-error-message

Clarify the ""Creating Server TCP listening socket"" error message"
antirez,2018-11-28 16:06:17,https://api.github.com/repos/antirez/redis/git/commits/1eca933d6f477bd25829c3783f90655b82e2985f,1eca933d6f477bd25829c3783f90655b82e2985f,"Merge pull request #5598 from lamby/dont-treat-unsupported-protocols-as-fatal-errors

Don't treat unsupported protocols as fatal errors"
antirez,2018-11-28 16:01:33,https://api.github.com/repos/antirez/redis/git/commits/1dd8d2c7ef5d816be8362f22d96bce5bca5e6ccb,1dd8d2c7ef5d816be8362f22d96bce5bca5e6ccb,"Merge pull request #5599 from devnexen/backtrace_support_on_bsd

Backtrace/register dump on BSD."
antirez,2018-11-28 15:53:32,https://api.github.com/repos/antirez/redis/git/commits/6a6471aad5e4f8d6cbab677b918b14cdee416296,6a6471aad5e4f8d6cbab677b918b14cdee416296,"Merge pull request #4737 from guybe7/zlexcount_fix

Don't call sdscmp() with shared.maxstring or shared.minstring"
antirez,2018-11-28 15:24:50,https://api.github.com/repos/antirez/redis/git/commits/edd3939bef97ada7943d9093308fdb68800c0cc3,edd3939bef97ada7943d9093308fdb68800c0cc3,"Abort instead of crashing when loading bad stream master key.

See #5612."
devnexen,2018-11-25 08:10:26,https://api.github.com/repos/antirez/redis/git/commits/ac086b1932eae5bc47c30c502c56e87b60525e10,ac086b1932eae5bc47c30c502c56e87b60525e10,"OpenBSD support.

Special treatment here as backtrace support is optional,
cannot be found via pkg-config and similar neither."
devnexen,2018-11-24 15:49:45,https://api.github.com/repos/antirez/redis/git/commits/69ca9078684f66366c461092bdb46172c27b845d,69ca9078684f66366c461092bdb46172c27b845d,"Backtrace/register dump on BSD.

FreeBSD/DragonFlyBSD does have backtrace only it does not
belong to libc."
lamby,2018-11-23 16:43:01,https://api.github.com/repos/antirez/redis/git/commits/fbff351406ec924f48898badc7a25576a2c1b7b3,fbff351406ec924f48898badc7a25576a2c1b7b3,"Don't treat unsupported protocols as fatal errors

If we encounter an unsupported protocol in the ""bind"" list, don't
ipso-facto consider it a fatal error. We continue to abort startup if
there are no listening sockets at all.

This ensures that the lack of IPv6 support does not prevent Redis from
starting on Debian where we try to bind to the ::1 interface by default
(via ""bind 127.0.0.1 ::1""). A machine with IPv6 disabled (such as some
container systems) would simply fail to start Redis after the initiall
call to apt(8).

This is similar to the case for where ""bind"" is not specified:

  https://github.com/antirez/redis/issues/3894

... and was based on the corresponding PR:

  https://github.com/antirez/redis/pull/4108

... but also adds EADDRNOTAVAIL to the list of errors to catch which I
believe is missing from there.

This issue was raised in Debian as both <https://bugs.debian.org/900284>
& <https://bugs.debian.org/914354>."
lamby,2018-11-23 16:57:01,https://api.github.com/repos/antirez/redis/git/commits/9cfcf37968c9890e6f183461f382528cfbe4d375,9cfcf37968c9890e6f183461f382528cfbe4d375,"Clarify the ""Creating Server TCP listening socket"" error.

This really helps spot it in the logs, otherwise it does not look like a
warning/error. For example:

  Creating Server TCP listening socket ::1:6379: bind: Cannot assign requested address

... is not nearly as clear as:

  Could not create server TCP listening listening socket ::1:6379: bind: Cannot assign requested address"
yongman,2018-11-23 15:51:16,https://api.github.com/repos/antirez/redis/git/commits/221dfbd322227ac35b43f0a10855b02f9095ed72,221dfbd322227ac35b43f0a10855b02f9095ed72,fix typo
yongman,2018-11-23 08:58:55,https://api.github.com/repos/antirez/redis/git/commits/2961c891616a6d60e28aea748c3c2422cb4f90b6,2961c891616a6d60e28aea748c3c2422cb4f90b6,Fix choose a random master node for slot assignment
antirez,2018-11-22 10:16:30,https://api.github.com/repos/antirez/redis/git/commits/0c12ebf6e79b3665e0dfa313f27492446b477758,0c12ebf6e79b3665e0dfa313f27492446b477758,"Merge pull request #5553 from devnexen/dflybsd_build_fix

DragonFlyBSD little build fix"
antirez,2018-11-22 10:10:56,https://api.github.com/repos/antirez/redis/git/commits/f3601fcb13c65db6899b5d2c08248457bcf03b0c,f3601fcb13c65db6899b5d2c08248457bcf03b0c,"Merge pull request #5590 from yongman/fix-cluster-fix-command

Fix command error when fixing open slots"
yongman,2018-11-21 15:01:35,https://api.github.com/repos/antirez/redis/git/commits/2f76829dc7ed1c76a2ac17bd6dc9cf7c3b5d7cb5,2f76829dc7ed1c76a2ac17bd6dc9cf7c3b5d7cb5,skip slave nodes when sending cluster setslot command
antirez,2018-11-20 09:38:59,https://api.github.com/repos/antirez/redis/git/commits/8acc07e6f097f20701813f9caa01e038e4226886,8acc07e6f097f20701813f9caa01e038e4226886,"Merge pull request #5579 from yongman/fix-rediscli-pointer-access

Fix pointer access and memory leak in redis-cli."
antirez,2018-11-19 16:19:23,https://api.github.com/repos/antirez/redis/git/commits/30a455f14a55f99a1df17035fedcceb1e8b60b9a,30a455f14a55f99a1df17035fedcceb1e8b60b9a,Test: regression test for #5570.
antirez,2018-11-19 16:00:30,https://api.github.com/repos/antirez/redis/git/commits/2bd6802fa1bd48260022435e9a040b8233d6cdfc,2bd6802fa1bd48260022435e9a040b8233d6cdfc,"Stream: fix XREADGROUP history reading of deleted messages.

This commit fixes #5570. It is a similar bug to one fixed a few weeks
ago and is due to the range API to be called with NULL as ""end ID""
parameter instead of repeating again the start ID, to be sure that we
selectively issue the entry with a given ID, or we get zero returned
(and we know we should emit a NULL reply)."
antirez,2018-11-19 15:51:09,https://api.github.com/repos/antirez/redis/git/commits/18d0759b14cee97430c08af3d6674929b62390a0,18d0759b14cee97430c08af3d6674929b62390a0,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-11-19 15:50:54,https://api.github.com/repos/antirez/redis/git/commits/db8d7d3dc4912cce0b64432e9282be7b2b596794,db8d7d3dc4912cce0b64432e9282be7b2b596794,Test: regression test for #5577.
antirez,2018-11-19 15:41:09,https://api.github.com/repos/antirez/redis/git/commits/29251f58e279738da6d45c5af3d12f35259f3d45,29251f58e279738da6d45c5af3d12f35259f3d45,"Streams: fix XREADGROUP history reading when CG last_id is low.

This fixes the issue reported in #5570.
This was fixed the hard way, that is, propagating more information to
the lower level API about this being a request to read just the history,
so that the code is simpler and less likely to regress."
antirez,2018-11-19 15:26:02,https://api.github.com/repos/antirez/redis/git/commits/3830ef2483c6adab646f847f96b93f76701f1d43,3830ef2483c6adab646f847f96b93f76701f1d43,t_stream.c comment resized to 80 cols.
yongman,2018-11-16 09:20:53,https://api.github.com/repos/antirez/redis/git/commits/64324901f22946a93226e0af56a6e59b2290be09,64324901f22946a93226e0af56a6e59b2290be09,Fix pointer access and memory leak in redis-cli.
oranagra,2018-11-11 07:22:42,https://api.github.com/repos/antirez/redis/git/commits/d0850369c4a06d6362dbaf12d873e54d6ce931cc,d0850369c4a06d6362dbaf12d873e54d6ce931cc,fix small test suite race conditions
devnexen,2018-11-11 18:49:55,https://api.github.com/repos/antirez/redis/git/commits/4e0af5efd42edacda09f6569f063cbfb1fe56fe9,4e0af5efd42edacda09f6569f063cbfb1fe56fe9,DragonFlyBSD little build fix
antirez,2018-11-08 11:12:28,https://api.github.com/repos/antirez/redis/git/commits/7721fe83e92dee581f8703e178f8368dce86abdf,7721fe83e92dee581f8703e178f8368dce86abdf,"Merge pull request #5507 from devnexen/clang_build_fix_warnings

Fix clang build."
devnexen,2018-11-08 10:13:52,https://api.github.com/repos/antirez/redis/git/commits/1d9866632709e7d4256e8050e7b4ba81a61bcf71,1d9866632709e7d4256e8050e7b4ba81a61bcf71,only FreeBSD change/little warning addressing
antirez,2018-11-07 11:54:46,https://api.github.com/repos/antirez/redis/git/commits/0cb798ea2b3ccb163c0add8137276dba31916293,0cb798ea2b3ccb163c0add8137276dba31916293,"Fix cluster-replica-no-failover option name.

Thanks to @NicolasLM, see issue #5537."
antirez,2018-11-06 17:15:51,https://api.github.com/repos/antirez/redis/git/commits/560cdf359f8a600358a7221c469d7085751d054b,560cdf359f8a600358a7221c469d7085751d054b,MEMORY command: make strcasecmp() conditional like the following.
antirez,2018-11-06 17:13:17,https://api.github.com/repos/antirez/redis/git/commits/249cd9381d25738edaa6aac5c2fdc0f772e9aa89,249cd9381d25738edaa6aac5c2fdc0f772e9aa89,"Merge pull request #4526 from itamarhaber/memory_help

Standardizes `MEMORY HELP` subcommand"
antirez,2018-11-06 12:00:15,https://api.github.com/repos/antirez/redis/git/commits/e93387c1d3bba0647092e96838a80910662eb415,e93387c1d3bba0647092e96838a80910662eb415,"Merge pull request #5526 from valentino-redislabs/init-server-hz

fix short period of server.hz being uninitialised"
antirez,2018-11-06 11:28:08,https://api.github.com/repos/antirez/redis/git/commits/1423abd15b1a766c1c37648084c9671040d9c012,1423abd15b1a766c1c37648084c9671040d9c012,"Merge pull request #5520 from itamarhaber/latency_help

Adds HELP to LATENCY"
antirez,2018-11-06 11:05:24,https://api.github.com/repos/antirez/redis/git/commits/d9e822a14bfbca8ea0599052e6ec87b63e7be76f,d9e822a14bfbca8ea0599052e6ec87b63e7be76f,"Merge pull request #5529 from yongman/fix-rediscli-malloc

fix zmalloc in clusterManagerComputeReshardTable"
antirez,2018-11-06 11:05:06,https://api.github.com/repos/antirez/redis/git/commits/0e2f56d0a12a9f6bf94638cf78e716298325f9dd,0e2f56d0a12a9f6bf94638cf78e716298325f9dd,"Merge pull request #5528 from artix75/cluster_manager_fix_cmd

Cluster manager fix cmd"
yongman,2018-11-06 02:51:19,https://api.github.com/repos/antirez/redis/git/commits/4e74d9cf558918f682adbf2be750998bfca7e950,4e74d9cf558918f682adbf2be750998bfca7e950,fix malloc in clusterManagerComputeReshardTable
artix75,2018-11-05 13:19:45,https://api.github.com/repos/antirez/redis/git/commits/3a2d82ae8ef4f9b088bf8a2d43fec11ca8639729,3a2d82ae8ef4f9b088bf8a2d43fec11ca8639729,Cluster Manager: removed unused var.
artix75,2018-11-03 11:04:59,https://api.github.com/repos/antirez/redis/git/commits/18ddbf0352cc1a5ae3248f06abed9a0ee59a4edf,18ddbf0352cc1a5ae3248f06abed9a0ee59a4edf,"Cluster Manager: further improvements to ""fix"":
- clusterManagerFixOpenSlot: ensure that the
  slot is unassigned before ADDSLOTS
- clusterManagerFixSlotsCoverage: after cold
  migration, the slot configuration
  is now updated on all the nodes."
artix75,2018-11-02 16:08:25,https://api.github.com/repos/antirez/redis/git/commits/d6f0a9ac72034d95e6005662eb992eefe161bab2,d6f0a9ac72034d95e6005662eb992eefe161bab2,Cluster Manager: fixed string parsing issue in clusterManagerGetConfigSignature
artix75,2018-10-23 14:14:45,https://api.github.com/repos/antirez/redis/git/commits/2e9859cbfc204b8a76275e0dcc0ff87c10db2792,2e9859cbfc204b8a76275e0dcc0ff87c10db2792,Cluster Manager: better fix subcommand.
artix75,2018-10-08 14:55:56,https://api.github.com/repos/antirez/redis/git/commits/be3a9dbb6fede6ab6b9bd6b1d2efae07543df1e8,be3a9dbb6fede6ab6b9bd6b1d2efae07543df1e8,Cluster Manager: fixed typos in comments.
artix75,2018-10-08 14:21:41,https://api.github.com/repos/antirez/redis/git/commits/ab270a977785df58461efb4a58f127193e387b13,ab270a977785df58461efb4a58f127193e387b13,Cluster Manager: fixed 'DELSLOT' subcommand typo.
antirez,2018-11-05 12:16:00,https://api.github.com/repos/antirez/redis/git/commits/6ba50784b5ce2e4eae74da00536ebbc1f81984ae,6ba50784b5ce2e4eae74da00536ebbc1f81984ae,"Fix XCLAIM missing entry bug.

This bug had a double effect:

1. Sometimes entries may not be emitted, producing broken protocol where
the array length was greater than the emitted entires, blocking the
client waiting for more data.

2. Some other time the right entry was claimed, but a wrong entry was
returned to the client.

This fix should correct both the instances."
antirez,2018-11-05 12:07:14,https://api.github.com/repos/antirez/redis/git/commits/514bbdd670a940fbd516493425656b9de76f2e7c,514bbdd670a940fbd516493425656b9de76f2e7c,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-11-05 12:06:01,https://api.github.com/repos/antirez/redis/git/commits/e7c579e1fe0fdcdf631e27a5fd17e36f621ddef3,e7c579e1fe0fdcdf631e27a5fd17e36f621ddef3,Improve streamReplyWithRange() top comment.
valentinogeron,2018-11-05 09:13:02,https://api.github.com/repos/antirez/redis/git/commits/eae8d0582638dcc5ffd686e3165faa05424b3f33,eae8d0582638dcc5ffd686e3165faa05424b3f33,"fix short period of server.hz being uninitialized

server.hz was uninitialized between initServerConfig and initServer.
this can lead to someone (e.g. queued modules) doing createObject,
and accessing an uninitialized variable, that can potentially be 0,
and lead to a crash."
antirez,2018-11-03 23:25:11,https://api.github.com/repos/antirez/redis/git/commits/d790e2db2ebdd558c0c54f88ebf06f7884c2a387,d790e2db2ebdd558c0c54f88ebf06f7884c2a387,"Merge pull request #5521 from michael-grunder/mstime-32bit-fix

Use typedef'd mstime_t instead of time_t"
michael-grunder,2018-11-03 22:13:28,https://api.github.com/repos/antirez/redis/git/commits/5fa41e0c84e46bb1fa417d6bfb60d9429734fd5f,5fa41e0c84e46bb1fa417d6bfb60d9429734fd5f,"Use typedef'd mstime_t instead of time_t

This fixes an overflow on 32-bit systems."
itamarhaber,2018-11-02 20:58:16,https://api.github.com/repos/antirez/redis/git/commits/e039c85bb42d7c9c9bb35a9993191a3fae90c907,e039c85bb42d7c9c9bb35a9993191a3fae90c907,"Adds HELP to LATENCY

Signed-off-by: Itamar Haber <itamar@redislabs.com>"
antirez,2018-10-31 15:36:12,https://api.github.com/repos/antirez/redis/git/commits/edce5150bf56df76fd7ca41c595a63a145550ed8,edce5150bf56df76fd7ca41c595a63a145550ed8,"Merge pull request #5511 from gkorland/patch-1

Fix some typos"
gkorland,2018-10-31 15:33:53,https://api.github.com/repos/antirez/redis/git/commits/48d8b3d8ac8de4db033d8836986065b8a41e01dc,48d8b3d8ac8de4db033d8836986065b8a41e01dc,Fix some typos
antirez,2018-10-31 11:56:47,https://api.github.com/repos/antirez/redis/git/commits/fa675256c127963c74ea68f8bab22ef105bada02,fa675256c127963c74ea68f8bab22ef105bada02,"Add support for Sentinel authentication.

So far it was not possible to setup Sentinel with authentication
enabled. This commit introduces this feature: every Sentinel will try to
authenticate with other sentinels using the same password it is
configured to accept clients with.

So for instance if a Sentinel has a ""requirepass"" configuration
statemnet set to ""foo"", it will use the ""foo"" password to authenticate
with every other Sentinel it connects to. So basically to add the
""requirepass"" to all the Sentinels configurations is enough in order to
make sure that:

1) Clients will require the password to access the Sentinels instances.
2) Each Sentinel will use the same password to connect and authenticate
   with every other Sentinel in the group.

Related to #3279 and #3329."
antirez,2018-10-31 11:37:48,https://api.github.com/repos/antirez/redis/git/commits/666b3437e684ae4ebe382006031d920c70c11275,666b3437e684ae4ebe382006031d920c70c11275,"Disable protected mode in Sentinel mode.

Sentinel must be exposed, so protected mode is just an issue for users
in case Redis was started in Sentinel mode.

Related to #3279 and #3329."
antirez,2018-10-31 10:46:28,https://api.github.com/repos/antirez/redis/git/commits/06a4acb7d36a51206507b88984678d91b5db2645,06a4acb7d36a51206507b88984678d91b5db2645,"When replica kills a pending RDB save during SYNC, log it.

This logs what happens in the context of the fix in PR #5367."
antirez,2018-10-31 10:42:04,https://api.github.com/repos/antirez/redis/git/commits/6204d8c1395939c449dcc4a81466e77cfd8974d7,6204d8c1395939c449dcc4a81466e77cfd8974d7,"Merge pull request #5367 from nUl1/fullresync-stopbgsave

Prevent RDB autosave from overwriting full resync results"
devnexen,2018-10-31 09:53:25,https://api.github.com/repos/antirez/redis/git/commits/e84d327fc1eab94ce3d9b1f63b71549c6b001963,e84d327fc1eab94ce3d9b1f63b71549c6b001963,Merge branch 'clang_build_fix_warnings' of https://github.com/devnexen/redis into clang_build_fix_warnings
devnexen,2018-10-31 09:53:07,https://api.github.com/repos/antirez/redis/git/commits/cf2f5e19d9e3579a37ec82e2953fb1e606ddbc59,cf2f5e19d9e3579a37ec82e2953fb1e606ddbc59,tweak form feedback
devnexen,2018-10-30 21:41:49,https://api.github.com/repos/antirez/redis/git/commits/9d6fbf0e0019e7a2f6e11375bf01f7a02208a735,9d6fbf0e0019e7a2f6e11375bf01f7a02208a735,allow flavors
dcarlier-afilias,2018-10-30 14:34:45,https://api.github.com/repos/antirez/redis/git/commits/a21d1522c79363d54794016d29a7b8af60c30960,a21d1522c79363d54794016d29a7b8af60c30960,allow flavors
devnexen,2018-10-30 13:23:43,https://api.github.com/repos/antirez/redis/git/commits/6534b3e09ed23324e22a4b57382707f52e22ee81,6534b3e09ed23324e22a4b57382707f52e22ee81,"Fix clang build.

Some math functions require c11 standard."
antirez,2018-10-30 12:38:41,https://api.github.com/repos/antirez/redis/git/commits/0c875c7751e3672f20225ab3b20fdb0322a8e4ad,0c875c7751e3672f20225ab3b20fdb0322a8e4ad,"asyncCloseClientOnOutputBufferLimitReached(): don't free fake clients.

Fake clients are used in special situations and are not linked to the
normal clients list, freeing them will always result in Redis crashing
in one way or the other.

It's not common to send replies to fake clients, but we have one usage
in the modules API. When a client is blocked, we associate to the
blocked client object (that is safe to manipulate in a thread), a fake
client that accumulates replies. So because of this bug there was
the problem described in issue #5443.

The fix was verified to work with the provided example module. To write
a regression is very hard and unlikely to be triggered in the future."
antirez,2018-10-29 17:25:14,https://api.github.com/repos/antirez/redis/git/commits/f1408b1729c06332b2737dd874eb2132ef010db4,f1408b1729c06332b2737dd874eb2132ef010db4,"Merge pull request #5489 from devnexen/unstable

Fix non Linux build."
devnexen,2018-10-26 14:12:47,https://api.github.com/repos/antirez/redis/git/commits/ae3bfe583e2f6c0c0cab02cd6fbbcaee86a3ba5b,ae3bfe583e2f6c0c0cab02cd6fbbcaee86a3ba5b,needs it for the global
devnexen,2018-10-26 14:02:09,https://api.github.com/repos/antirez/redis/git/commits/0b73d0a8d2b3cb36127ffa33ec2d37f403de6944,0b73d0a8d2b3cb36127ffa33ec2d37f403de6944,"Fix non Linux build.

timezone global is a linux-ism whereas it is a function under BSD.
Here a helper to get the timezone value in a more portable manner."
antirez,2018-10-25 11:08:58,https://api.github.com/repos/antirez/redis/git/commits/b8febe60b44e0ddfd5e22a7c6a4c4b33e49a2a83,b8febe60b44e0ddfd5e22a7c6a4c4b33e49a2a83,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-10-25 11:08:48,https://api.github.com/repos/antirez/redis/git/commits/f5494b186260edd794679be8e2173e5cc7cd6977,f5494b186260edd794679be8e2173e5cc7cd6977,Add command fingerprint comment for XSETID.
antirez,2018-10-25 11:00:19,https://api.github.com/repos/antirez/redis/git/commits/6dde56bf93a95e2a71a5a1247487ac45568a3e97,6dde56bf93a95e2a71a5a1247487ac45568a3e97,"Merge pull request #5454 from soloestoy/multi-oom

MULTI: OOM err if cannot free enough memory in MULTI/EXEC context"
antirez,2018-10-25 09:50:15,https://api.github.com/repos/antirez/redis/git/commits/998001fbf2aeb58286c440cd55804bf43f87b30e,998001fbf2aeb58286c440cd55804bf43f87b30e,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-10-25 09:50:04,https://api.github.com/repos/antirez/redis/git/commits/12d5be1bf2474b0da9c5deb8d835daba0624ad07,12d5be1bf2474b0da9c5deb8d835daba0624ad07,"Merge pull request #5459 from itamarhaber/xpending_count_underflow

A fix to XPENDING's count underflow"
antirez,2018-10-25 09:36:24,https://api.github.com/repos/antirez/redis/git/commits/6e11ef30e02932917ba53c72cf66681f42ea487d,6e11ef30e02932917ba53c72cf66681f42ea487d,Fix XRANGE COUNT option for value of 0.
antirez,2018-10-24 14:28:44,https://api.github.com/repos/antirez/redis/git/commits/f06e8c331c98e8b307af94a36cd45948a963956b,f06e8c331c98e8b307af94a36cd45948a963956b,Fix typo in streamReplyWithRange() top comment.
antirez,2018-10-24 10:31:28,https://api.github.com/repos/antirez/redis/git/commits/e8c108e938463de04bf3b7a3cd3f1dd78cfa6aaa,e8c108e938463de04bf3b7a3cd3f1dd78cfa6aaa,"Merge pull request #5469 from soloestoy/stat-key-miss-if-expired

if we read a expired key, misses++"
antirez,2018-10-24 10:28:28,https://api.github.com/repos/antirez/redis/git/commits/a2131f907a752e62c78ea6bb719daf9fe2f91402,a2131f907a752e62c78ea6bb719daf9fe2f91402,"Merge pull request #5453 from damz/pr/aof-buffer-evict

Overhead is the allocated size of the AOF buffer, not its length"
antirez,2018-10-24 10:26:27,https://api.github.com/repos/antirez/redis/git/commits/8749fc3f6721b70c4b64e94c96577d25424b25fc,8749fc3f6721b70c4b64e94c96577d25424b25fc,Simplify part of the #5470 patch.
antirez,2018-10-24 10:23:59,https://api.github.com/repos/antirez/redis/git/commits/3c89fb5ffd59c701071952fd89e58fefd0a84920,3c89fb5ffd59c701071952fd89e58fefd0a84920,"Merge pull request #5470 from soloestoy/keys-no-trigger-expire

do not delete expired keys in KEYS command"
antirez,2018-10-22 15:43:48,https://api.github.com/repos/antirez/redis/git/commits/54e8dd11ff4296b6633775c29e62222ed0244960,54e8dd11ff4296b6633775c29e62222ed0244960,Use guide comments to make changes in #5462 more obvious.
antirez,2018-10-22 15:41:43,https://api.github.com/repos/antirez/redis/git/commits/0f18d8e0ed529bbb4699c8b2072656019a0dd726,0f18d8e0ed529bbb4699c8b2072656019a0dd726,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-10-22 15:40:37,https://api.github.com/repos/antirez/redis/git/commits/3f6893a4e294e90c2cd333c31b822dc131b0ee41,3f6893a4e294e90c2cd333c31b822dc131b0ee41,"Merge pull request #5462 from youjiali1995/fix-migrate-expired-keys

migrate: fix mismatch of RESTORE reply when some keys have expired."
antirez,2018-10-22 10:24:02,https://api.github.com/repos/antirez/redis/git/commits/c33ef454f09b4e6eefcad77b773d112223837c36,c33ef454f09b4e6eefcad77b773d112223837c36,Remove useless complexity from MSET implementation.
antirez,2018-10-22 10:17:08,https://api.github.com/repos/antirez/redis/git/commits/2f8912c36ccf5226f7777b132d66cb3f1c4f551b,2f8912c36ccf5226f7777b132d66cb3f1c4f551b,"Merge pull request #5451 from hujiecs/unstable

several typos fixed, optimize MSETNX to avoid unnecessary loop"
hujiecs,2018-10-21 02:37:36,https://api.github.com/repos/antirez/redis/git/commits/e610dbce14af98cbac60ee53248788e80f1ec6a0,e610dbce14af98cbac60ee53248788e80f1ec6a0,fix typo in config.c
hujiecs,2018-10-20 04:18:56,https://api.github.com/repos/antirez/redis/git/commits/63e41ee19236d88799935e38e517b2a918cacbb3,63e41ee19236d88799935e38e517b2a918cacbb3,fix typo
krallin,2018-10-17 19:04:35,https://api.github.com/repos/antirez/redis/git/commits/f24ad5d83140eee04bd1cda8ee19bced0de26c11,f24ad5d83140eee04bd1cda8ee19bced0de26c11,"cli: pass auth through REDISCLI_AUTH

This adds support for passing a password through a REDISCLI_AUTH
environment variable (which is safer than the CLI), which might often be
safer than passing it through a CLI argument.

Passing a password this way does not trigger the warning about passing a
password through CLI arguments, and CLI arguments take precedence over
it."
soloestoy,2018-10-19 10:16:29,https://api.github.com/repos/antirez/redis/git/commits/5ddd507624aad7d07558e684a962b7505214ae74,5ddd507624aad7d07558e684a962b7505214ae74,"if we read a expired key, misses++"
soloestoy,2018-10-19 10:00:57,https://api.github.com/repos/antirez/redis/git/commits/7ab9cba59bb8999d80d90571632fc37bac67c165,7ab9cba59bb8999d80d90571632fc37bac67c165,do not delete expired keys in KEYS command
antirez,2018-10-19 08:39:57,https://api.github.com/repos/antirez/redis/git/commits/f30b18f4de94e3235546b1dc8fe2be2028be2b80,f30b18f4de94e3235546b1dc8fe2be2028be2b80,"Fix again stack generation on the Raspberry Pi.

The fix was removed by c8ca71d40 attempting to fix the stack generation
on ARM64, without testing if it would still work on ARM32.
Now it should work both sides."
youjiali1995,2018-10-18 10:57:51,https://api.github.com/repos/antirez/redis/git/commits/a6499ecac21e685c9d95dc749cd928412d4f689b,a6499ecac21e685c9d95dc749cd928412d4f689b,migrate: fix mismatch of RESTORE reply when some keys have expired.
itamarhaber,2018-10-17 16:33:11,https://api.github.com/repos/antirez/redis/git/commits/edeaf85cab10b2d9bc151363779f70822d679472,edeaf85cab10b2d9bc151363779f70822d679472,Plugs a potential underflow
antirez,2018-10-17 15:20:05,https://api.github.com/repos/antirez/redis/git/commits/144832ee67c058dfec9910e8953588d23ae3224c,144832ee67c058dfec9910e8953588d23ae3224c,"Streams: use bulk replies instead of status replies.

They play better with Lua scripting, otherwise Lua will see status
replies as ""ok"" = ""string"" which is very odd, and actually as @oranagra
reasoned in issue #5456 in the rest of the Redis code base there was no
such concern as saving a few bytes when the protocol is emitted."
itamarhaber,2018-10-17 13:13:55,https://api.github.com/repos/antirez/redis/git/commits/acb3b552800c6ee95a36d49b24332b7a6dd93f59,acb3b552800c6ee95a36d49b24332b7a6dd93f59,Corrects inline documentation of syntax
antirez,2018-10-17 11:00:35,https://api.github.com/repos/antirez/redis/git/commits/fdb575993f947425920aadc5a321daf22f0198c3,fdb575993f947425920aadc5a321daf22f0198c3,Fix conditional in XGROUP.
antirez,2018-10-17 10:57:15,https://api.github.com/repos/antirez/redis/git/commits/ad78b50f62c88b6396c5ee86cda89fc2313f77af,ad78b50f62c88b6396c5ee86cda89fc2313f77af,Update help.h for redis-cli.
antirez,2018-10-17 10:11:06,https://api.github.com/repos/antirez/redis/git/commits/56871aeb600c19a0ec4d06a60cfc19a9fdf7b1e1,56871aeb600c19a0ec4d06a60cfc19a9fdf7b1e1,Tests for XGROUP CREATE MKSTREAM.
antirez,2018-10-17 10:10:52,https://api.github.com/repos/antirez/redis/git/commits/492fd5c01105ee5dc1aa73a0f19a7201e86b9815,492fd5c01105ee5dc1aa73a0f19a7201e86b9815,Fix XGROUP CREATE MKSTREAM handling of .
antirez,2018-10-17 10:04:03,https://api.github.com/repos/antirez/redis/git/commits/2e3d403349af7e23a263632cd876479241d5d72e,2e3d403349af7e23a263632cd876479241d5d72e,"Process MKSTREAM option of XGROUP CREATE at a later time.

This avoids issues with having to replicate a command that produced
errors."
antirez,2018-10-17 09:36:03,https://api.github.com/repos/antirez/redis/git/commits/ab11c5ebd1adc9c6b794f275b74d5ad697c65ffe,ab11c5ebd1adc9c6b794f275b74d5ad697c65ffe,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-10-17 09:27:09,https://api.github.com/repos/antirez/redis/git/commits/cb27dd1a6802000eb896e0a0b5c8d50ea994655a,cb27dd1a6802000eb896e0a0b5c8d50ea994655a,XGROUP CREATE: MKSTREAM option for automatic stream creation.
soloestoy,2018-10-17 08:40:45,https://api.github.com/repos/antirez/redis/git/commits/e2de7e75248a928280d6c739e9020d8c8adc1c0f,e2de7e75248a928280d6c739e9020d8c8adc1c0f,MULTI: OOM err if cannot free enough memory in MULTI/EXEC context
antirez,2018-10-17 05:50:32,https://api.github.com/repos/antirez/redis/git/commits/3f7bc5a5d2c41b8d6be4c462a2a3b24c55ccc431,3f7bc5a5d2c41b8d6be4c462a2a3b24c55ccc431,"Merge pull request #5333 from soloestoy/stream-commands-flag

Scripting & Streams: some commands need right flags"
damz,2018-10-16 18:47:42,https://api.github.com/repos/antirez/redis/git/commits/29e488cbb083f857cad7de68931082195a43c738,29e488cbb083f857cad7de68931082195a43c738,"Overhead is the allocated size of the AOF buffer, not its length"
antirez,2018-10-16 16:56:55,https://api.github.com/repos/antirez/redis/git/commits/2f8f29aa0e63a198aa628296ce617214b3ae1575,2f8f29aa0e63a198aa628296ce617214b3ae1575,"Merge pull request #5452 from soloestoy/xsetid-lastid

Streams: rewrite empty streams with certain lastid"
soloestoy,2018-10-16 15:56:26,https://api.github.com/repos/antirez/redis/git/commits/c2e4c64db46460a1ceeb24b0887976a766acb8e7,c2e4c64db46460a1ceeb24b0887976a766acb8e7,Streams: Tests modified XSTREAM -> XSETID
soloestoy,2018-10-16 15:47:27,https://api.github.com/repos/antirez/redis/git/commits/a273ce9578c4fd6e7a04b2f597785d603fefa1fa,a273ce9578c4fd6e7a04b2f597785d603fefa1fa,Streams: rewrite empty streams with certain lastid
antirez,2018-10-16 15:28:56,https://api.github.com/repos/antirez/redis/git/commits/b4f8268371c941b3e1a28bfcb41c55923899afbc,b4f8268371c941b3e1a28bfcb41c55923899afbc,"Tests modified to use XADD MAXLEN 0 + XSETID.

See #5426."
antirez,2018-10-16 14:48:31,https://api.github.com/repos/antirez/redis/git/commits/c1689166b71f298aec40db877e125c76c178b0ba,c1689166b71f298aec40db877e125c76c178b0ba,"Streams: rewrite empty streams with XADD MAXLEN 0. Use XSETID.

Related to #5426."
antirez,2018-10-16 14:46:13,https://api.github.com/repos/antirez/redis/git/commits/ea78a1db329961d53ec420ac01ddb7cde42795ba,ea78a1db329961d53ec420ac01ddb7cde42795ba,"XSETID: accept IDs based on last entry.

Related to #5426."
antirez,2018-10-16 11:17:14,https://api.github.com/repos/antirez/redis/git/commits/e3446fea9eab842415ca3a3bffee0ba2745c78e5,e3446fea9eab842415ca3a3bffee0ba2745c78e5,"Streams: XSTREAM SETID -> XSETID.

Keep vanilla stream commands at toplevel, see #5426."
antirez,2018-10-16 11:10:36,https://api.github.com/repos/antirez/redis/git/commits/af09df08d79b45302bd2d5de5d7086b18778eb44,af09df08d79b45302bd2d5de5d7086b18778eb44,"Merge pull request #5426 from soloestoy/feature-xstream

Bugfix data inconsistency after aof rewrite, and add XSTREAM command."
hujiecs,2018-10-16 07:48:03,https://api.github.com/repos/antirez/redis/git/commits/297950e8b817dbf3f2dbbbff497fdf3a047cc8f2,297950e8b817dbf3f2dbbbff497fdf3a047cc8f2,"several typos fixed, optimize MSETNX to avoid unnecessary loop"
antirez,2018-10-15 11:01:58,https://api.github.com/repos/antirez/redis/git/commits/1caabd59b2f746f7c35900486c072e35898cb232,1caabd59b2f746f7c35900486c072e35898cb232,"Merge pull request #5416 from halaei/fix-timer-selected-db

fix timer context selected database"
antirez,2018-10-15 10:01:17,https://api.github.com/repos/antirez/redis/git/commits/3640e029d657e59f2d2c6483f0a2e5256f97afef,3640e029d657e59f2d2c6483f0a2e5256f97afef,"Make comment about nack->consumer test for minidle more obvious.

Related to #5437."
antirez,2018-10-15 09:52:24,https://api.github.com/repos/antirez/redis/git/commits/0b1784b1884ff04848b0532cc384fd2811f6eee4,0b1784b1884ff04848b0532cc384fd2811f6eee4,"Streams: use propagate_last_id itself as streamPropagateGroupID trigger.

Avoid storing the dirty value. See #5437."
antirez,2018-10-15 09:50:13,https://api.github.com/repos/antirez/redis/git/commits/820b1e6e7d561fd3aa1ee3527977b44fc8ddca49,820b1e6e7d561fd3aa1ee3527977b44fc8ddca49,"Streams: better naming: lastid_updated -> propagate_last_id.

See #5437 but also I updated a previous usage of the same var name."
antirez,2018-10-15 09:47:21,https://api.github.com/repos/antirez/redis/git/commits/440574d62413a636da7deba81d26a50eca087650,440574d62413a636da7deba81d26a50eca087650,"Merge pull request #5437 from soloestoy/fix-xclaim

Fix xclaim"
antirez,2018-10-15 09:15:24,https://api.github.com/repos/antirez/redis/git/commits/2c26278222b22fd7b485148ee4359a002f87d691,2c26278222b22fd7b485148ee4359a002f87d691,"Merge pull request #5440 from scadgek/patch-1

fixed typos in readme"
antirez,2018-10-15 09:01:37,https://api.github.com/repos/antirez/redis/git/commits/b2fd9f7e7cda64ba9b4863c141913bf31b519522,b2fd9f7e7cda64ba9b4863c141913bf31b519522,redis.conf typo fixed: ingore -> ignore.
antirez,2018-10-13 12:17:32,https://api.github.com/repos/antirez/redis/git/commits/f54cde3a15f3ad0850215c22f3f7b628bf1f817c,f54cde3a15f3ad0850215c22f3f7b628bf1f817c,Rax: radix tree updated to latest version from antirez/rax.
antirez,2018-10-13 12:17:11,https://api.github.com/repos/antirez/redis/git/commits/3c140e7bcd9856c4a2faf3154fcf8f390645c8f3,3c140e7bcd9856c4a2faf3154fcf8f390645c8f3,Test: avoid time related false positive in RESTORE test.
scadgek,2018-10-12 19:56:51,https://api.github.com/repos/antirez/redis/git/commits/7f999d2925c05612630621502b85ab93f3b8ca46,7f999d2925c05612630621502b85ab93f3b8ca46,fixed typos in readme
soloestoy,2018-10-11 13:46:47,https://api.github.com/repos/antirez/redis/git/commits/5cc052230355b61442fa911b5fc4150ea098b4de,5cc052230355b61442fa911b5fc4150ea098b4de,"Streams: panic if streamID invalid after check, should not be possible."
soloestoy,2018-10-11 13:44:20,https://api.github.com/repos/antirez/redis/git/commits/08ae522ff942cd9ff5386a73ead6b27846766a8f,08ae522ff942cd9ff5386a73ead6b27846766a8f,Streams: propagate lastid in XCLAIM when it has effect
soloestoy,2018-10-11 13:20:46,https://api.github.com/repos/antirez/redis/git/commits/183ef7ae9bbc91d3bba0735df1669e95dc53a24e,183ef7ae9bbc91d3bba0735df1669e95dc53a24e,"Streams: XCLAIM ignore minidle if NACK is created by FORCE

Because the NACK->consumer is NULL, if idletime < minidle
the NACK does not belong to any consumer, then redis will crash
in XPENDING."
soloestoy,2018-10-11 13:12:09,https://api.github.com/repos/antirez/redis/git/commits/4dc48a0d11fb7765a1a9b7a5908d9c9e64c10b8e,4dc48a0d11fb7765a1a9b7a5908d9c9e64c10b8e,Streams: bugfix XCLAIM should propagate group name not consumer name
antirez,2018-10-11 11:00:55,https://api.github.com/repos/antirez/redis/git/commits/91685eeeb1462edfc12da2e079e76bdbeec0eddb,91685eeeb1462edfc12da2e079e76bdbeec0eddb,LOLWUT: capitalize Nees.
antirez,2018-10-10 15:37:37,https://api.github.com/repos/antirez/redis/git/commits/fbfd61b4714d3f0fabc6cb842b29e13262d5ab30,fbfd61b4714d3f0fabc6cb842b29e13262d5ab30,"Test: cgroup propagation test also for NOACK variant.

Related to #5433."
antirez,2018-10-10 15:32:17,https://api.github.com/repos/antirez/redis/git/commits/cfad5e45872a826fd751074ef564923cd7dfa25d,cfad5e45872a826fd751074ef564923cd7dfa25d,"Test: consumer group last ID slave propagation test.

This is a regression for #5433."
antirez,2018-10-10 10:51:39,https://api.github.com/repos/antirez/redis/git/commits/1048b5d13a44a0d56535ab68f883a3a0dd0bb9d5,1048b5d13a44a0d56535ab68f883a3a0dd0bb9d5,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-10-10 10:51:02,https://api.github.com/repos/antirez/redis/git/commits/c9d9ae7baaf717607db3d4ad81597dc99d0c002c,c9d9ae7baaf717607db3d4ad81597dc99d0c002c,"Fix propagation of consumer groups last ID.

Issue #5433."
antirez,2018-10-10 09:03:25,https://api.github.com/repos/antirez/redis/git/commits/4eedb0bf94026002d3c5627405d59270d71f7cc1,4eedb0bf94026002d3c5627405d59270d71f7cc1,changelog.tcl: get optional argument for number of commits.
antirez,2018-10-09 16:02:56,https://api.github.com/repos/antirez/redis/git/commits/29bfe4655c111e8a1b00431696fff724dca904f6,29bfe4655c111e8a1b00431696fff724dca904f6,"Merge pull request #5428 from soloestoy/client-protected

Avoid recreate write handler for protected client."
soloestoy,2018-10-09 12:34:11,https://api.github.com/repos/antirez/redis/git/commits/35b7296ff4ec8170a8a076bbf0f462c178b3df5f,35b7296ff4ec8170a8a076bbf0f462c178b3df5f,Avoid recreate write handler for protected client.
antirez,2018-10-09 11:25:53,https://api.github.com/repos/antirez/redis/git/commits/8e2bbe91050342b1d87a44b2bb3bf557047efe59,8e2bbe91050342b1d87a44b2bb3bf557047efe59,"Free protected clients asynchronously.

Related to #4840.

Note that when we re-enter the event loop with aeProcessEvents() we
don't process timers, nor before/after sleep callbacks, so we should
never end calling freeClientsInAsyncFreeQueue() when re-entering the
loop."
antirez,2018-10-09 11:18:25,https://api.github.com/repos/antirez/redis/git/commits/929c686ccee0aacc567a9892931ae46c82a2e8cd,929c686ccee0aacc567a9892931ae46c82a2e8cd,"Actually use the protectClient() API where needed.

Related to #4804."
antirez,2018-10-09 11:15:41,https://api.github.com/repos/antirez/redis/git/commits/69c30965eb15ed86acadd8e9db79feb7b7633497,69c30965eb15ed86acadd8e9db79feb7b7633497,"Introduce protectClient() + some refactoring.

The idea is to have an API for the cases like -BUSY state and DEBUG
RELOAD where we have to manually deinstall the read handler.
See #4804."
antirez,2018-10-09 10:56:08,https://api.github.com/repos/antirez/redis/git/commits/6660458a4c349bcca7a733003b47a7230553c58e,6660458a4c349bcca7a733003b47a7230553c58e,"Merge pull request #4804 from soloestoy/fix-debug-load

debug: avoid free client unexpectedly when reload & loadaof"
antirez,2018-10-09 09:51:04,https://api.github.com/repos/antirez/redis/git/commits/db86dfb9856f0c507b286e2107b92cc04d6affa0,db86dfb9856f0c507b286e2107b92cc04d6affa0,"aof.c: improve indentation and change warning message.

Related to #5201.

I removed the !!! Warning part since compared to the other errors, a
missing EXEC is in theory a normal happening in the AOF file, at least
in theory: may happen in a differnet number of situations, and it's
probably better to don't give the user the feeling that something really
bad happened."
antirez,2018-10-09 09:47:04,https://api.github.com/repos/antirez/redis/git/commits/1a476b69adbcac12a8348375d941f965ff7977a9,1a476b69adbcac12a8348375d941f965ff7977a9,"Merge pull request #5201 from soloestoy/abort-if-lost-exec-aof-load

AOF: discard if we lost EXEC when loading aof"
soloestoy,2018-10-09 08:22:30,https://api.github.com/repos/antirez/redis/git/commits/480e2994369de43e3b13019ee9995906d68dd14e,480e2994369de43e3b13019ee9995906d68dd14e,Streams: rewrite id in XSTREAM CREATE *
soloestoy,2018-10-09 07:45:58,https://api.github.com/repos/antirez/redis/git/commits/3094eb36263e602731840ededd301ff21e7981d4,3094eb36263e602731840ededd301ff21e7981d4,Streams: add tests for aof rewrite
soloestoy,2018-10-08 13:23:38,https://api.github.com/repos/antirez/redis/git/commits/b3e80d2f654a66358c53addffd34945363cce2bb,b3e80d2f654a66358c53addffd34945363cce2bb,Stream & AOF: rewrite stream in correct way
soloestoy,2018-10-09 07:21:08,https://api.github.com/repos/antirez/redis/git/commits/5f3adbee33d555d436b03d19f32ce903da36252b,5f3adbee33d555d436b03d19f32ce903da36252b,Streams: add tests for XSTREAM command
soloestoy,2018-10-09 05:11:02,https://api.github.com/repos/antirez/redis/git/commits/ec511fa709f3c8fc74d26ca52114dcb9add754cc,ec511fa709f3c8fc74d26ca52114dcb9add754cc,"Streams: add a new command XTREAM

XSTREAM CREATE <key> <id or *> -- Create a new empty stream.
XSTREAM SETID <key> <id or $>  -- Set the current stream ID."
antirez,2018-10-08 10:05:20,https://api.github.com/repos/antirez/redis/git/commits/3e78344d878fbbd6fdc566c210f5d834f7ac147e,3e78344d878fbbd6fdc566c210f5d834f7ac147e,"Refactoring of XADD / XTRIM MAXLEN rewriting.

See #5141."
antirez,2018-10-08 10:00:00,https://api.github.com/repos/antirez/redis/git/commits/e5f1de144807373b2f42f82bb44829a8a4cc85cd,e5f1de144807373b2f42f82bb44829a8a4cc85cd,"Merge pull request #5141 from soloestoy/fix-xtrim-inconsistency

Fix XTRIM and XADD with MAXLEN inconsistency"
antirez,2018-10-08 09:34:42,https://api.github.com/repos/antirez/redis/git/commits/8507c3f26e3435de0d44122d9be206fd1b8265dc,8507c3f26e3435de0d44122d9be206fd1b8265dc,"Merge pull request #5422 from ziyasal/patch-1

Fix typo in the comment of raxSeekGreatest function"
ziyasal,2018-10-07 11:37:58,https://api.github.com/repos/antirez/redis/git/commits/534c3bc21a256e113265ff1af6724af5ac4c9f9c,534c3bc21a256e113265ff1af6724af5ac4c9f9c,Fix typo
antirez,2018-10-05 16:30:45,https://api.github.com/repos/antirez/redis/git/commits/3d07ed983e8bc55e7d066558de0244bc77dbeba3,3d07ed983e8bc55e7d066558de0244bc77dbeba3,Fix typo in replicationCron() comment.
antirez,2018-10-05 16:29:23,https://api.github.com/repos/antirez/redis/git/commits/ce8b6ede3477b63023dc458ac43bb798536d460e,ce8b6ede3477b63023dc458ac43bb798536d460e,Fix typo in design comment of bio.c.
antirez,2018-10-04 15:34:06,https://api.github.com/repos/antirez/redis/git/commits/68c0e6e3313a5d76a6f352f8e9cd0376d9d52737,68c0e6e3313a5d76a6f352f8e9cd0376d9d52737,xclaimCommand(): fix comment typos.
halaei,2018-10-04 13:32:10,https://api.github.com/repos/antirez/redis/git/commits/87264235cc59f9ad2b478e2d4d7c3104cceb9fdc,87264235cc59f9ad2b478e2d4d7c3104cceb9fdc,fix timer context selected database
antirez,2018-10-02 17:44:54,https://api.github.com/repos/antirez/redis/git/commits/32e0d2376fe91e76be04bb62825af5d95737b13e,32e0d2376fe91e76be04bb62825af5d95737b13e,streamAppendItem(): Update the radix tree pointer only if changed.
antirez,2018-10-02 17:36:33,https://api.github.com/repos/antirez/redis/git/commits/9d4f51e1ff84af82157a3f2b07741ef1cb0a813e,9d4f51e1ff84af82157a3f2b07741ef1cb0a813e,"Listpack: optionally force reallocation on inserts.

This is useful in order to spot bugs where we fail
at updating the pointer returned by the insertion
function. Normally often the same pointer is returned,
making it harder than needed to spot bugs.

Related to #5210."
antirez,2018-10-02 14:26:30,https://api.github.com/repos/antirez/redis/git/commits/73a78adf13ca37ba101a66a4f3d13e2a129f636c,73a78adf13ca37ba101a66a4f3d13e2a129f636c,Fix printf type mismatch in genRedisInfoString().
antirez,2018-10-02 14:20:40,https://api.github.com/repos/antirez/redis/git/commits/c7c3b23787cb403bb17051fe6f805725f3bd1ae4,c7c3b23787cb403bb17051fe6f805725f3bd1ae4,"streamIteratorRemoveEntry(): set back lp only if pointer changed.

Most of the times the pointer will remain the same since integers of
similar size don't take more space in listpacks.

Related to #5210."
antirez,2018-10-02 14:18:55,https://api.github.com/repos/antirez/redis/git/commits/9fe7cd8f14592b7293bd9dcef88f8c230277948f,9fe7cd8f14592b7293bd9dcef88f8c230277948f,"Merge pull request #5210 from soloestoy/raxinsert-in-xdel

Streams: update listpack with new pointer in XDEL"
antirez,2018-10-02 14:09:22,https://api.github.com/repos/antirez/redis/git/commits/2b09884faf85d3fbd58a85ad1902e090099101f1,2b09884faf85d3fbd58a85ad1902e090099101f1,"Merge pull request #5392 from soloestoy/bugfix-brpoplpush

bugfix: replace lastcmd with cmd when rewrite BRPOPLPUSH as RPOPLPUSH"
antirez,2018-10-02 14:03:05,https://api.github.com/repos/antirez/redis/git/commits/e19a06d2dd43473d87e002f59e9469b3548a10dd,e19a06d2dd43473d87e002f59e9469b3548a10dd,"Merge pull request #5242 from oranagra/script_mem

script cache memory in INFO and MEMORY includes both script code and overheads"
antirez,2018-10-01 11:30:42,https://api.github.com/repos/antirez/redis/git/commits/fe43406929dbf6e6316f53f891370850cd8e1c3f,fe43406929dbf6e6316f53f891370850cd8e1c3f,"Merge pull request #5397 from bmerry/fix-bad-zmalloc-size

Fix invalid use of sdsZmallocSize on an embedded string"
antirez,2018-10-01 11:28:53,https://api.github.com/repos/antirez/redis/git/commits/9ce638695cebc0e88f6cad213ecec480c75eee26,9ce638695cebc0e88f6cad213ecec480c75eee26,"Merge pull request #5398 from bmerry/fix-zrealloc-accounting

Fix incorrect memory usage accounting in zrealloc"
antirez,2018-10-01 11:24:49,https://api.github.com/repos/antirez/redis/git/commits/cd2ee8b1139873121cee10916678ed12a4d6b60e,cd2ee8b1139873121cee10916678ed12a4d6b60e,"Merge pull request #5396 from oranagra/cmdstats_exec

fix #5024 - commandstats for multi-exec were logged as EXEC."
antirez,2018-10-01 11:22:33,https://api.github.com/repos/antirez/redis/git/commits/1da93f85cc553ae5cc80488b5d9aed1d3499b647,1da93f85cc553ae5cc80488b5d9aed1d3499b647,"Merge pull request #5400 from halaei/fix-dict-get-on-not-found

fix dict get on not found"
halaei,2018-10-01 10:27:25,https://api.github.com/repos/antirez/redis/git/commits/86fb7b20bfb4bb29a73b48a483d487749bd41de4,86fb7b20bfb4bb29a73b48a483d487749bd41de4,fix dict get on not found
antirez,2018-10-01 09:38:58,https://api.github.com/repos/antirez/redis/git/commits/9e0e5ccbf4600bde74309bd6de3e6a722357498e,9e0e5ccbf4600bde74309bd6de3e6a722357498e,Fix XINFO comment for consistency.
bmerry,2018-09-30 09:49:03,https://api.github.com/repos/antirez/redis/git/commits/8fd1031b10dec256d5b365b278815f9d8444e601,8fd1031b10dec256d5b365b278815f9d8444e601,"Fix incorrect memory usage accounting in zrealloc

When HAVE_MALLOC_SIZE is false, each call to zrealloc causes used_memory
to increase by PREFIX_SIZE more than it should, due to mis-matched
accounting between the original zmalloc (which includes PREFIX size in
its increment) and zrealloc (which misses it from its decrement).

I've also supplied a command-line test to easily demonstrate the
problem. It's not wired into the test framework, because I don't know
TCL so I'm not sure how to automate it."
oranagra,2018-09-30 08:37:19,https://api.github.com/repos/antirez/redis/git/commits/f03aed3ca9b5e45635707b1b28011cedbd8914bc,f03aed3ca9b5e45635707b1b28011cedbd8914bc,"fix #5024 - commandstats for multi-exec were logged as EXEC.

this was broken a while back by ba9154d7e7bf959b002533384319a1e90545447b
the purpose of which was to fix commandstats for GEOADD"
bmerry,2018-09-29 19:48:08,https://api.github.com/repos/antirez/redis/git/commits/ecc48369ce2f890922e462bfe82e4e26cbb8beba,ecc48369ce2f890922e462bfe82e4e26cbb8beba,"Fix invalid use of sdsZmallocSize on an embedded string

sdsZmallocSize assumes a dynamically allocated SDS. When given a string
object created by createEmbeddedStringObject, it calls zmalloc_size on a
pointer that isn't the one returned by zmalloc"
antirez,2018-09-28 11:00:41,https://api.github.com/repos/antirez/redis/git/commits/08c26591e38c8797e554ee209f7c2a718df302ab,08c26591e38c8797e554ee209f7c2a718df302ab,"Try to avoid issues with GCC pragmas and older compilers.

See issue #5394."
soloestoy,2018-09-28 04:06:43,https://api.github.com/repos/antirez/redis/git/commits/fc9b4e79589c049276ff4c7cf536b49d700f8cee,fc9b4e79589c049276ff4c7cf536b49d700f8cee,"bugfix: replace lastcmd with cmd when rewrite BRPOPLPUSH as RPOPLPUSH

There are two problems if we use lastcmd:

1. BRPOPLPUSH cannot be rewrited as RPOPLPUSH in multi/exec
    In mulit/exec context, the lastcmd is exec.
2. Redis will crash when execute RPOPLPUSH loading from AOF
    In fakeClient, the lastcmd is NULL."
antirez,2018-09-27 15:01:32,https://api.github.com/repos/antirez/redis/git/commits/5aa347b3774891b8babf1347bde451382f514dea,5aa347b3774891b8babf1347bde451382f514dea,Modules: hellodict example WIP #3: KEYRANGE.
antirez,2018-09-27 09:46:22,https://api.github.com/repos/antirez/redis/git/commits/0aecb135c9fa0839d9f65f855a84957e3e54d747,0aecb135c9fa0839d9f65f855a84957e3e54d747,Modules: Modules: dictionary API WIP #13: Compare API exported.
antirez,2018-09-27 09:43:48,https://api.github.com/repos/antirez/redis/git/commits/80bde9844b7a88650bfd047dc913cc1da444e49c,80bde9844b7a88650bfd047dc913cc1da444e49c,Modules: Modules: dictionary API WIP #12: DictCompare API.
antirez,2018-09-27 09:39:58,https://api.github.com/repos/antirez/redis/git/commits/7af83a0c11615d4c131ce0a81560450d7d7632c5,7af83a0c11615d4c131ce0a81560450d7d7632c5,Modules: Modules: dictionary API WIP #11: DictCompareC API.
antirez,2018-09-27 09:22:43,https://api.github.com/repos/antirez/redis/git/commits/20f047965c1382219616e27afa51d72c0001895c,20f047965c1382219616e27afa51d72c0001895c,Modules: hellodict example WIP #1: GET command.
antirez,2018-09-26 15:52:07,https://api.github.com/repos/antirez/redis/git/commits/880ca077195bdb483d6d7e7b0f8c713dc7a16b67,880ca077195bdb483d6d7e7b0f8c713dc7a16b67,Modules: hellodict example WIP #1: SET command.
antirez,2018-09-26 15:42:00,https://api.github.com/repos/antirez/redis/git/commits/bbe18eacda69797aded8686a63e853b11fd4e222,bbe18eacda69797aded8686a63e853b11fd4e222,Modules: remove useless defines in hellotimer.c
antirez,2018-09-26 15:41:08,https://api.github.com/repos/antirez/redis/git/commits/6c3bfb00fc17ac1a1c3ba75d2945f8d189415c8f,6c3bfb00fc17ac1a1c3ba75d2945f8d189415c8f,Modules: fix top comment of hellotimer.c
antirez,2018-09-26 11:39:16,https://api.github.com/repos/antirez/redis/git/commits/bec4bfaa0b4bb63336ebbbbf893e3f9db0000423,bec4bfaa0b4bb63336ebbbbf893e3f9db0000423,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-09-26 11:39:01,https://api.github.com/repos/antirez/redis/git/commits/1e585d01deb133e1d000cb3cefe4f8e60ab8f129,1e585d01deb133e1d000cb3cefe4f8e60ab8f129,Modules: dictionary API WIP #10: export API to modules.
antirez,2018-09-25 15:18:50,https://api.github.com/repos/antirez/redis/git/commits/1d6711a7645cd11bea2e55a438e7a25891117cd6,1d6711a7645cd11bea2e55a438e7a25891117cd6,"Merge pull request #5373 from gkorland/patch-5

add missing argument to function doc"
antirez,2018-09-25 15:15:34,https://api.github.com/repos/antirez/redis/git/commits/cf7475b9b85db45637250ee2cbadba5540760e27,cf7475b9b85db45637250ee2cbadba5540760e27,"Merge pull request #5377 from Chupaka/patch-1

Fix typo in comment"
antirez,2018-09-25 14:49:46,https://api.github.com/repos/antirez/redis/git/commits/3ff82790e11bac25db7d0e75d8a27382526161c5,3ff82790e11bac25db7d0e75d8a27382526161c5,Modules: dictionary API WIP #9: iterator returning string object.
antirez,2018-09-25 14:24:32,https://api.github.com/repos/antirez/redis/git/commits/fb1d5717dedf731ed2678b0340b34ea6bcbc64f7,fb1d5717dedf731ed2678b0340b34ea6bcbc64f7,Modules: dictionary API WIP #8: Iterator next/prev.
antirez,2018-09-25 10:58:15,https://api.github.com/repos/antirez/redis/git/commits/58ac1f8bbe0f705e59b25b40fa00477dd79cc5e9,58ac1f8bbe0f705e59b25b40fa00477dd79cc5e9,"Modules: dictionary API WIP #7: don't store the context.

Storing the context is useless, because we can't really reuse that
later. For instance in the API RM_DictNext() that returns a
RedisModuleString for the next key iterated, the user should pass the
new context, because we may run the keys of the dictionary in a
different context of the one where the dictionary was created. Also the
dictionary may be created without a context, but we may still demand
automatic memory management for the returned strings while iterating."
antirez,2018-09-25 10:45:02,https://api.github.com/repos/antirez/redis/git/commits/b6c794acf62223b9b46a14541f3b749969b378bf,b6c794acf62223b9b46a14541f3b749969b378bf,Modules: dictionary API WIP #6: implement automatic memory management.
antirez,2018-09-25 10:31:43,https://api.github.com/repos/antirez/redis/git/commits/448d696549dc156fc26f93208d4e2a52d655dcea,448d696549dc156fc26f93208d4e2a52d655dcea,"Modules: dictionary API work in progress #5: rename API for consistency.

By using the ""C"" suffix for functions getting pointer/len, we can do the
same in the future for other modules APIs that need a variant with
pointer/len and that are now accepting a RedisModuleString."
antirez,2018-09-24 15:20:00,https://api.github.com/repos/antirez/redis/git/commits/c7e0c410d6b22ae70907bd135f95420f45d3ac89,c7e0c410d6b22ae70907bd135f95420f45d3ac89,"Modules: change RedisModuleString API to allow NULL context.

The burden of having to always create RedisModuleString objects within a
module context was too much, especially now that we have threaded
operations and modules are doing more interesting things. The context in
the string API is currently only used for automatic memory managemnet,
so now the API was modified so that the user can opt-out this feature by
passing a NULL context."
antirez,2018-09-24 14:43:47,https://api.github.com/repos/antirez/redis/git/commits/3968550135f48b8caf3dee76fc50a5e4fe4af1fb,3968550135f48b8caf3dee76fc50a5e4fe4af1fb,Modules: dictionary API work in progress #4: reseek API.
Chupaka,2018-09-24 13:14:36,https://api.github.com/repos/antirez/redis/git/commits/3a27b3d0d85d56ecd758b56c6af477ae5ff08a76,3a27b3d0d85d56ecd758b56c6af477ae5ff08a76,Fix typo in comment
antirez,2018-09-24 09:44:45,https://api.github.com/repos/antirez/redis/git/commits/14b2f7b033ab7445146ba44940297cb97473aebe,14b2f7b033ab7445146ba44940297cb97473aebe,Modules: dictionary API work in progress #3: Iterator creation.
antirez,2018-09-24 09:16:50,https://api.github.com/repos/antirez/redis/git/commits/bb64c7d8b25b6253172d9af41a600a0640a725d3,bb64c7d8b25b6253172d9af41a600a0640a725d3,Modules: dictionary API work in progress #2: Del API.
antirez,2018-09-21 15:54:06,https://api.github.com/repos/antirez/redis/git/commits/c5e0bc1070f7b8cbe6c2b3467cd03646bcc96318,c5e0bc1070f7b8cbe6c2b3467cd03646bcc96318,Modules: dictionary API work in progress #1.
gkorland,2018-09-20 23:46:31,https://api.github.com/repos/antirez/redis/git/commits/8b87876094d8897ecca25cb161b9ceadc975279f,8b87876094d8897ecca25cb161b9ceadc975279f,add missing argument to function doc
antirez,2018-09-19 14:17:20,https://api.github.com/repos/antirez/redis/git/commits/0d6f11f4d1748d0e8b35032338a1f4d927838a49,0d6f11f4d1748d0e8b35032338a1f4d927838a49,Module cluster flags: use RM_SetClusterFlags() in the example.
antirez,2018-09-19 10:02:37,https://api.github.com/repos/antirez/redis/git/commits/3213e8de921ef55896f740fb55e9469bbe2a22c4,3213e8de921ef55896f740fb55e9469bbe2a22c4,Module cluster flags: add RM_SetClusterFlags() API.
antirez,2018-09-19 09:43:37,https://api.github.com/repos/antirez/redis/git/commits/777cc5b98738df0156b1c822d7fb7851b5ffb4a6,777cc5b98738df0156b1c822d7fb7851b5ffb4a6,Module cluster flags: add hooks for NO_FAILOVER flag.
antirez,2018-09-19 09:31:22,https://api.github.com/repos/antirez/redis/git/commits/c202ba2b35100b557946d578d67085791997e2f0,c202ba2b35100b557946d578d67085791997e2f0,Module cluster flags: add hooks for NO_REDIRECTION flag.
antirez,2018-09-19 09:20:52,https://api.github.com/repos/antirez/redis/git/commits/744fe7f348c82a6f55aab43f140a540d298747cf,744fe7f348c82a6f55aab43f140a540d298747cf,Module cluster flags: initial vars / defines added.
antirez,2018-09-18 11:22:05,https://api.github.com/repos/antirez/redis/git/commits/7cdf272d46ad9b658ef8f5d8485af0eeb17cae6d,7cdf272d46ad9b658ef8f5d8485af0eeb17cae6d,Modules: rename the reused static client to something more general.
antirez,2018-09-18 11:19:33,https://api.github.com/repos/antirez/redis/git/commits/9df1f73e4c32b2bfc54471761b64f2b86c5b913b,9df1f73e4c32b2bfc54471761b64f2b86c5b913b,Modules: associate a fake client to timer context callback.
antirez,2018-09-18 11:15:36,https://api.github.com/repos/antirez/redis/git/commits/bf18044082aaf740dc8292907f990f6c2b0b600a,bf18044082aaf740dc8292907f990f6c2b0b600a,"Modules: associate a fake client to cluster message context callback.

Fixes #5354."
artix75,2018-09-17 13:52:47,https://api.github.com/repos/antirez/redis/git/commits/81c4be42c188d68ed347333addffe062a33d238f,81c4be42c188d68ed347333addffe062a33d238f,"Cluster Manager: clusterManagerFixOpenSlot now counts node's keys in slot
if node is neither migrating nor importing."
antirez,2018-09-17 14:24:52,https://api.github.com/repos/antirez/redis/git/commits/12fd92bf67d51dbdd7d993606b8ac5d365a20174,12fd92bf67d51dbdd7d993606b8ac5d365a20174,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-09-17 14:24:07,https://api.github.com/repos/antirez/redis/git/commits/9f43264f861b30546c1af90345b153241de1f118,9f43264f861b30546c1af90345b153241de1f118,"Revert ""fix repeat argument issue and reduce unnessary loop times for redis-cli.""

Reverts commit 9505dd2011ef7143670b68247ff1818ffbad9768
since the commit introduced the very serious bug issue #5286."
antirez,2018-09-17 13:42:50,https://api.github.com/repos/antirez/redis/git/commits/54871412c29b799aa324fed2b0ae091e769737ad,54871412c29b799aa324fed2b0ae091e769737ad,"Merge pull request #5348 from gkorland/patch-2

No need to return ""OK"""
antirez,2018-09-17 13:41:24,https://api.github.com/repos/antirez/redis/git/commits/f39bb4107cd22986b3d206f40c1fa0208401e41a,f39bb4107cd22986b3d206f40c1fa0208401e41a,"Merge pull request #5352 from gkorland/patch-3

typo fix"
antirez,2018-09-17 13:35:07,https://api.github.com/repos/antirez/redis/git/commits/394b974920cee6b83c7a1cf01bb43d8e0580a8ae,394b974920cee6b83c7a1cf01bb43d8e0580a8ae,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-09-17 13:29:01,https://api.github.com/repos/antirez/redis/git/commits/378218d746b04039827f53a2e92e32f19be02ca6,378218d746b04039827f53a2e92e32f19be02ca6,Sentinel: document how to undo a renamed command.
antirez,2018-09-17 13:20:10,https://api.github.com/repos/antirez/redis/git/commits/bd33014f90a4dfba61f090b4556d7e985ecd5cbe,bd33014f90a4dfba61f090b4556d7e985ecd5cbe,"Merge pull request #5357 from gkorland/patch-4

RedisModule_HashSet call must end with NULL"
gkorland,2018-09-17 11:15:39,https://api.github.com/repos/antirez/redis/git/commits/3176f8e9553bbc7202a35c1c7ae4d208dd0f7fb8,3176f8e9553bbc7202a35c1c7ae4d208dd0f7fb8,"Merge pull request #1 from gkorland/patch-5

Fix few typos"
gkorland,2018-09-17 11:13:46,https://api.github.com/repos/antirez/redis/git/commits/3b0f0086156e79e0c7e13c8e7118799b9b40dd08,3b0f0086156e79e0c7e13c8e7118799b9b40dd08,Fix few typos
gkorland,2018-09-17 10:54:56,https://api.github.com/repos/antirez/redis/git/commits/44f9e0d7c7fa32ba19d9fb106781be4b28798e53,44f9e0d7c7fa32ba19d9fb106781be4b28798e53,"RedisModule_HashSet call must end with NULL

Extended the RedisModule_HashSet doc to mark that each call must end with NULL"
gkorland,2018-09-16 12:21:21,https://api.github.com/repos/antirez/redis/git/commits/b2fc998ad64d17ed8e1bb3d3fed9a2cd5815553d,b2fc998ad64d17ed8e1bb3d3fed9a2cd5815553d,typo fix
antirez,2018-09-14 10:35:59,https://api.github.com/repos/antirez/redis/git/commits/c560ade831ad6196d51cd42fd533ed3664837e54,c560ade831ad6196d51cd42fd533ed3664837e54,LOLWUT: split the command from version-specific implementations.
antirez,2018-09-13 19:43:15,https://api.github.com/repos/antirez/redis/git/commits/411f4b4c1272d2c11561c5e7317788b6177f49d1,411f4b4c1272d2c11561c5e7317788b6177f49d1,Slave removal: add a few forgotten aliases for CONFIG SET.
antirez,2018-09-13 19:35:52,https://api.github.com/repos/antirez/redis/git/commits/9849cf2df5945d67df6cdf84812e73e3f31f7228,9849cf2df5945d67df6cdf84812e73e3f31f7228,"LOLWUT: add Redis version in the output.

This creates an incentive to run the command and as a side effect
experience the art piece inside."
gkorland,2018-09-13 12:42:17,https://api.github.com/repos/antirez/redis/git/commits/62015d4fb0805f350906b088a0c1036f8c5120cb,62015d4fb0805f350906b088a0c1036f8c5120cb,"No need to return ""OK"" 

No need to return ""+OK"" in this case since the result is an Array of all the nodes"
antirez,2018-09-13 07:03:36,https://api.github.com/repos/antirez/redis/git/commits/d23cae5f062ee41e7c866d9872960cb436e567b4,d23cae5f062ee41e7c866d9872960cb436e567b4,LOLWUT: Ness -> Nees.
antirez,2018-09-13 06:31:55,https://api.github.com/repos/antirez/redis/git/commits/ffbf8f4b8e87f1974a1488d5269659eccbb162e6,ffbf8f4b8e87f1974a1488d5269659eccbb162e6,LOLWUT: Limit maximum CPU effort.
antirez,2018-09-13 06:29:55,https://api.github.com/repos/antirez/redis/git/commits/5c9a7b891fc823fa1b5df09ec53b31db11e96145,5c9a7b891fc823fa1b5df09ec53b31db11e96145,LOLWUT: change padding conditional to a more direct one.
antirez,2018-09-13 06:08:56,https://api.github.com/repos/antirez/redis/git/commits/02817d8b3daf2daf4b7d6a77853c62b31a9b4d5e,02817d8b3daf2daf4b7d6a77853c62b31a9b4d5e,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-09-13 06:08:28,https://api.github.com/repos/antirez/redis/git/commits/4dc37c240e6c924c0e492e0ca5f3fd90f9b68fef,4dc37c240e6c924c0e492e0ca5f3fd90f9b68fef,"LOLWUT: fix crash when col < 2.

Close #5345."
antirez,2018-09-12 19:30:27,https://api.github.com/repos/antirez/redis/git/commits/b278d352c5d2565aa15c85ba1c4adfa3760bdd63,b278d352c5d2565aa15c85ba1c4adfa3760bdd63,"Merge pull request #5343 from slobo/patch-1

Fix spelling descrive -> describe"
slobo,2018-09-12 19:10:07,https://api.github.com/repos/antirez/redis/git/commits/30377f154f4e03d9f313e4c8b7134c59dcc64a73,30377f154f4e03d9f313e4c8b7134c59dcc64a73,Fix spelling descrive -> describe
antirez,2018-09-12 15:53:00,https://api.github.com/repos/antirez/redis/git/commits/690560e8dbd72b443621bfe00f66737f062e2ec1,690560e8dbd72b443621bfe00f66737f062e2ec1,LOLWUT: fix structure typo in comment.
antirez,2018-09-12 10:40:37,https://api.github.com/repos/antirez/redis/git/commits/cf0abff567928d14e139b3537cd47dcb313bbda3,cf0abff567928d14e139b3537cd47dcb313bbda3,LOLWUT: Fix license copyright year.
antirez,2018-09-12 10:28:28,https://api.github.com/repos/antirez/redis/git/commits/77bdfb53393cda586ddcdb961fbd9600574d54a6,77bdfb53393cda586ddcdb961fbd9600574d54a6,LOLWUT: increase the translation factor.
antirez,2018-09-12 10:26:33,https://api.github.com/repos/antirez/redis/git/commits/0dd8fd062dfec81b52e27f785e397b84bc52bf1e,0dd8fd062dfec81b52e27f785e397b84bc52bf1e,LOLWUT: change default size to fit a normal terminal better.
antirez,2018-09-12 09:34:10,https://api.github.com/repos/antirez/redis/git/commits/43385c437530cc240b4a2e85c2035c590d26367c,43385c437530cc240b4a2e85c2035c590d26367c,LOLWUT: wrap it into a proper command.
antirez,2018-09-12 09:16:07,https://api.github.com/repos/antirez/redis/git/commits/eac2a79cf55d9cc3042d8b7beb263d59d1b7d9eb,eac2a79cf55d9cc3042d8b7beb263d59d1b7d9eb,LOLWUT: draw Schotter by Georg Nees.
antirez,2018-09-12 08:35:13,https://api.github.com/repos/antirez/redis/git/commits/2ead41e05bf0be48595e0c01d19947e6f4132f41,2ead41e05bf0be48595e0c01d19947e6f4132f41,LOLWUT: draw rotated squares using trivial trigonometry.
antirez,2018-09-11 19:15:43,https://api.github.com/repos/antirez/redis/git/commits/a974531d1a0f7a475e1b47a330f12f11b4320d5c,a974531d1a0f7a475e1b47a330f12f11b4320d5c,LOLWUT: draw lines using Bresenham algorithm.
antirez,2018-09-11 15:32:57,https://api.github.com/repos/antirez/redis/git/commits/7777379814a3e3b64bbc30d07ffb366ce9240759,7777379814a3e3b64bbc30d07ffb366ce9240759,LOLWUT: Rendering of the virtual canvas to a string.
antirez,2018-09-11 14:29:31,https://api.github.com/repos/antirez/redis/git/commits/096c74c8867fd1ae3f9f91320750fd8ae5d58218,096c74c8867fd1ae3f9f91320750fd8ae5d58218,LOLWUT: show the output verbatim in redis-cli.
antirez,2018-09-11 14:09:24,https://api.github.com/repos/antirez/redis/git/commits/2dbf2047ac327aed53794c215a35655b662cdee5,2dbf2047ac327aed53794c215a35655b662cdee5,LOLWUT: canvas structure and BSD license on top.
antirez,2018-09-11 14:04:25,https://api.github.com/repos/antirez/redis/git/commits/65ce839d09ca3045ef94a10e441622dbb7fe36aa,65ce839d09ca3045ef94a10e441622dbb7fe36aa,LOLWUT: Emit Braille unicode according to pixel pattern.
vrana,2018-09-11 09:30:46,https://api.github.com/repos/antirez/redis/git/commits/cb51bb4320d2240001e8fc4a522d59fb28259703,cb51bb4320d2240001e8fc4a522d59fb28259703,Slave removal: capitalize Replica
antirez,2018-09-11 09:03:28,https://api.github.com/repos/antirez/redis/git/commits/4cf8fdbbd359f9ff8dea28f9877262bd56616051,4cf8fdbbd359f9ff8dea28f9877262bd56616051,Slave removal: remove slave from integration tests descriptions.
antirez,2018-09-11 08:57:50,https://api.github.com/repos/antirez/redis/git/commits/52e7192e4aeaddea17b593f97a5bcc962e5b2b58,52e7192e4aeaddea17b593f97a5bcc962e5b2b58,Slave removal: remove slave from top-level tests descriptions.
antirez,2018-09-11 08:54:09,https://api.github.com/repos/antirez/redis/git/commits/0c1d28e2d0e06ced55c17e7908ece1645e7e0b6f,0c1d28e2d0e06ced55c17e7908ece1645e7e0b6f,Slave removal: remove slave from object.c.
antirez,2018-09-11 08:51:47,https://api.github.com/repos/antirez/redis/git/commits/3841236074d6e318a4f47a69ce21780ecc83a22a,3841236074d6e318a4f47a69ce21780ecc83a22a,Slave removal: remove slave from the README.
antirez,2018-09-11 08:39:24,https://api.github.com/repos/antirez/redis/git/commits/db146de0860b43fc801a32338c7013e21226db21,db146de0860b43fc801a32338c7013e21226db21,Slave removal: server.c logs fixed.
antirez,2018-09-10 15:55:34,https://api.github.com/repos/antirez/redis/git/commits/f74c7394d77ef813bb649202f934e760634a24f0,f74c7394d77ef813bb649202f934e760634a24f0,"Slave removal: remove slave from sentinel.conf when possible.

All the occurrences translated, but the ones referring to SLAVEOF
must be intact because that describe the actual Sentinel -> Redis
protocol. In theory we could send REPLICAOF to Redis instances, but
actually this would prevent Sentinel to be compatible with older Redis
instances."
antirez,2018-09-10 15:51:46,https://api.github.com/repos/antirez/redis/git/commits/ca6aed02f8264a431e674180a430e4f62438fb9c,ca6aed02f8264a431e674180a430e4f62438fb9c,"Slave removal: replace very few things in Sentinel.

SENTINEL REPLICAS was added as an alias, in the configuration rewriting
now it uses known-replica, however all the rest is basically at API
level of logged events and messages having to do with the protocol, so
there is very little to do here compared to the Redis core itself, to
preserve compatibility."
antirez,2018-09-10 15:09:01,https://api.github.com/repos/antirez/redis/git/commits/1051d9383773f26b5a56dc1380006c841b7d59a8,1051d9383773f26b5a56dc1380006c841b7d59a8,Slave removal: scripting.c logs and other stuff fixed.
antirez,2018-09-10 15:07:33,https://api.github.com/repos/antirez/redis/git/commits/61b7a176ef34f654e2502da99c91215aae04ccb6,61b7a176ef34f654e2502da99c91215aae04ccb6,Slave removal: replication.c logs fixed.
antirez,2018-09-10 15:02:44,https://api.github.com/repos/antirez/redis/git/commits/cff5f36d94aa34df6a9b62d0bc71bdb8b38116fb,cff5f36d94aa34df6a9b62d0bc71bdb8b38116fb,Slave removal: networking.c logs fixed.
antirez,2018-09-10 14:46:14,https://api.github.com/repos/antirez/redis/git/commits/05e8db24ed22c14d26959a413161dd1092eea706,05e8db24ed22c14d26959a413161dd1092eea706,Slave removal: blocked.c logs fixed.
antirez,2018-09-10 14:39:51,https://api.github.com/repos/antirez/redis/git/commits/c9bab6f30231e0ba19c03970073921f17894a83b,c9bab6f30231e0ba19c03970073921f17894a83b,Slave removal: Make obvious in redis.conf what a replica is.
antirez,2018-09-10 14:37:23,https://api.github.com/repos/antirez/redis/git/commits/8296e5c8464e406af946edb5d520f4c0c2b67997,8296e5c8464e406af946edb5d520f4c0c2b67997,Slave removal: slave mode -> replica mode text in redis-cli.
antirez,2018-09-10 10:56:02,https://api.github.com/repos/antirez/redis/git/commits/a67181f88ae7cb42b3b2978ff3b15fcd6706a7cb,a67181f88ae7cb42b3b2978ff3b15fcd6706a7cb,Slave removal: fix typo of replicaof.
antirez,2018-09-10 10:27:37,https://api.github.com/repos/antirez/redis/git/commits/6f3d357d8feca56b524d680360faf99d3801920c,6f3d357d8feca56b524d680360faf99d3801920c,Slave removal: slave -> replica in redis.conf and output buffer option.
antirez,2018-09-10 10:22:20,https://api.github.com/repos/antirez/redis/git/commits/6f5848613956cb2e662bbdc675bbaaf7be42574a,6f5848613956cb2e662bbdc675bbaaf7be42574a,"Slave removal: config.c converted + config rewriting hacks.

Aliases added for all the commands mentioning slave. Moreover CONFIG
REWRITE will use the new names, and will be able to reuse the old lines
mentioning the old options."
antirez,2018-09-10 08:49:03,https://api.github.com/repos/antirez/redis/git/commits/a9419e23867f10a99927fb3e1689071c60cfe11c,a9419e23867f10a99927fb3e1689071c60cfe11c,Slave removal: Convert cluster.c log messages and command names.
antirez,2018-09-10 08:46:28,https://api.github.com/repos/antirez/redis/git/commits/f579b774490d119df579413e747a1e02ad863462,f579b774490d119df579413e747a1e02ad863462,"Slave removal: redis-cli --slave -> --replica.

--slave alias remains but is undocumented, just for backward
compatibiltiy."
antirez,2018-09-10 08:43:39,https://api.github.com/repos/antirez/redis/git/commits/ef2c7a5bbb6d62b2f970bbb4a12d149d2d09faaf,ef2c7a5bbb6d62b2f970bbb4a12d149d2d09faaf,Slave removal: SLAVEOF -> REPLICAOF. SLAVEOF is now an alias.
antirez,2018-09-07 10:31:27,https://api.github.com/repos/antirez/redis/git/commits/14629278e3b5f0af862c3085007b70d9d6ea68f1,14629278e3b5f0af862c3085007b70d9d6ea68f1,"Merge pull request #5307 from mesbahamin/use_geohash_defines_in_check

Use geohash limit defines in constraint check"
antirez,2018-09-07 10:28:22,https://api.github.com/repos/antirez/redis/git/commits/83b8eaa6386f4449c99d6e76c44f3035a20172eb,83b8eaa6386f4449c99d6e76c44f3035a20172eb,"Merge pull request #5239 from jeffreylovitz/cli-help-fix

CLI Help text loop verifies arg count"
antirez,2018-09-07 10:10:35,https://api.github.com/repos/antirez/redis/git/commits/a62b8410ef42cc9fe30bef68c6da0feef88727c0,a62b8410ef42cc9fe30bef68c6da0feef88727c0,"Merge pull request #5322 from youjiali1995/fix-sentinel-randomize

sentinel: fix randomized sentinelTimer."
antirez,2018-09-07 10:06:02,https://api.github.com/repos/antirez/redis/git/commits/aba57a1bb7146063267ded6fbb3fd014546b855a,aba57a1bb7146063267ded6fbb3fd014546b855a,"Merge pull request #5324 from youjiali1995/fix-bio

bio: fix bioWaitStepOfType."
antirez,2018-09-06 15:41:31,https://api.github.com/repos/antirez/redis/git/commits/596749e75f0a3e541124a5c6df0952e1741c4fbd,596749e75f0a3e541124a5c6df0952e1741c4fbd,"Merge pull request #5331 from Weiliang-Li/patch-redis-cli

fix usage typo in redis-cli"
soloestoy,2018-09-06 12:52:05,https://api.github.com/repos/antirez/redis/git/commits/8d24f8b46b3c544fef33427ca1f2582d92c59dd4,8d24f8b46b3c544fef33427ca1f2582d92c59dd4,"Scripting & Streams: some commands need right flags

xadd with id * generates random stream id

xadd & xtrim with approximate maxlen count may
trim stream randomly

xinfo may get random radix-tree-keys/nodes

xpending may get random idletime

xclaim: master and slave may have different
idletime in stream"
antirez,2018-09-05 17:47:29,https://api.github.com/repos/antirez/redis/git/commits/6bd0d342dd566ced07dcad07c35f449b59f6c0cc,6bd0d342dd566ced07dcad07c35f449b59f6c0cc,Fix scripting tests now that we default to commands repl.
antirez,2018-09-05 17:33:56,https://api.github.com/repos/antirez/redis/git/commits/7895835df6aeb2a2d499bc499ae6cb340228908f,7895835df6aeb2a2d499bc499ae6cb340228908f,"Use commands (effects) replication by default in scripts.

See issue #5250 and issue #5292 for more info."
antirez,2018-09-05 13:48:08,https://api.github.com/repos/antirez/redis/git/commits/7e11825ef4467ccc64f961761ea050a3df4853ba,7e11825ef4467ccc64f961761ea050a3df4853ba,"Safer script stop condition on OOM.

Here the idea is that we do not want freeMemoryIfNeeded() to propagate a
DEL command before the script and change what happens in the script
execution once it reaches the slave. For example see this potential
issue (in the words of @soloestoy):

On master, we run the following script:

    if redis.call('get','key')
    then
        redis.call('set','xxx','yyy')
    end
    redis.call('set','c','d')

Then when redis attempts to execute redis.call('set','xxx','yyy'), we call freeMemoryIfNeeded(), and the key may get deleted, and because redis.call('set','xxx','yyy') has already been executed on master, this script will be replicated to slave.

But the slave received ""DEL key"" before the script, and will ignore maxmemory, so after that master has xxx and c, slave has only one key c.

Note that this patch (and other related work) was authored collaboratively in
issue #5250 with the help of @soloestoy and @oranagra.

Related to issue #5250."
antirez,2018-09-05 11:20:12,https://api.github.com/repos/antirez/redis/git/commits/092e4de613af1464d7592cd51e12bd1c87dd0645,092e4de613af1464d7592cd51e12bd1c87dd0645,"Propagate read-only scripts as SCRIPT LOAD.

See issue #5250 and the new comments added to the code in this commit
for details."
antirez,2018-09-05 11:10:05,https://api.github.com/repos/antirez/redis/git/commits/51b627d916dc7930879558f7c627dc16022612a8,51b627d916dc7930879558f7c627dc16022612a8,"Don't perform eviction when re-entering the event loop.

Related to #5250."
youjiali1995,2018-09-05 08:51:13,https://api.github.com/repos/antirez/redis/git/commits/c328834832808cf8be9c30122a48b8234ebebed1,c328834832808cf8be9c30122a48b8234ebebed1,bio: fix bioWaitStepOfType.
youjiali1995,2018-09-05 02:32:18,https://api.github.com/repos/antirez/redis/git/commits/a8322f44b3f537a58d6e8a63dd02c66e2d7ed2e4,a8322f44b3f537a58d6e8a63dd02c66e2d7ed2e4,sentinel: fix randomized sentinelTimer.
antirez,2018-09-04 11:29:24,https://api.github.com/repos/antirez/redis/git/commits/4e5e0d3719ffed0d3a687fa2082655f97e16167c,4e5e0d3719ffed0d3a687fa2082655f97e16167c,"Clarify why remaining may be zero in readQueryFromClient().

See #5304."
antirez,2018-09-04 11:26:06,https://api.github.com/repos/antirez/redis/git/commits/ff57b8d550b4ef90f33dc89d7179b05ad6d1258d,ff57b8d550b4ef90f33dc89d7179b05ad6d1258d,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-09-04 11:25:28,https://api.github.com/repos/antirez/redis/git/commits/2ef829d65c1174438d33ca91bc4b9284639ad742,2ef829d65c1174438d33ca91bc4b9284639ad742,"Merge pull request #5304 from soloestoy/fix-unexpected-readlen

networking: fix unexpected negative or zero readlen"
antirez,2018-09-04 10:58:04,https://api.github.com/repos/antirez/redis/git/commits/e4298d11e268b5222c3b14f728df71e8132fadb3,e4298d11e268b5222c3b14f728df71e8132fadb3,"Merge pull request #5321 from maya-rv/patch-1

Fix typo"
antirez,2018-09-04 10:49:50,https://api.github.com/repos/antirez/redis/git/commits/d60c17cbb3ae0a4b1a435f0b6fc986a60449ebec,d60c17cbb3ae0a4b1a435f0b6fc986a60449ebec,"Merge pull request #5315 from soloestoy/optimize-parsing-large-bulk

networking: optimize parsing large bulk greater than 32k"
maya-rv,2018-09-04 10:32:02,https://api.github.com/repos/antirez/redis/git/commits/227965221ab443f21b27fa0a3636d6232c496b45,227965221ab443f21b27fa0a3636d6232c496b45,Fix typo
antirez,2018-09-03 16:39:18,https://api.github.com/repos/antirez/redis/git/commits/6c001bfc0ddf8e7a93e86dad250e416166253d85,6c001bfc0ddf8e7a93e86dad250e416166253d85,Unblocked clients API refactoring. See #4418.
antirez,2018-09-03 16:31:02,https://api.github.com/repos/antirez/redis/git/commits/2b689ad641f19573b3b6141b45452da90ca32df4,2b689ad641f19573b3b6141b45452da90ca32df4,"Merge pull request #4418 from soloestoy/fix-multiple-unblock

fix multiple unblock for clientsArePaused()"
antirez,2018-09-03 16:17:25,https://api.github.com/repos/antirez/redis/git/commits/3e7349fdaf8cdbf96e595750034af43e6d6c56f0,3e7349fdaf8cdbf96e595750034af43e6d6c56f0,"Make pending buffer processing safe for CLIENT_MASTER client.

Related to #5305."
soloestoy,2018-09-03 16:02:18,https://api.github.com/repos/antirez/redis/git/commits/247d2a734b0434e0f461902f64d32cb6e587709c,247d2a734b0434e0f461902f64d32cb6e587709c,"networking: optimize parsing large bulk greater than 32k

If we are going to read a large object from network
try to make it likely that it will start at c->querybuf
boundary so that we can optimize object creation
avoiding a large copy of data.

But only when the data we have not parsed is less than
or equal to ll+2. If the data length is greater than
ll+2, trimming querybuf is just a waste of time, because
at this time the querybuf contains not only our bulk.

It's easy to reproduce the that:

Time1: call `client pause 10000` on slave.

Time2: redis-benchmark -t set -r 10000 -d 33000 -n 10000.

Then slave hung after 10 seconds."
soloestoy,2018-09-03 06:36:48,https://api.github.com/repos/antirez/redis/git/commits/2290c4bee1904d4418fd1fa9192a3fbc13bf38b0,2290c4bee1904d4418fd1fa9192a3fbc13bf38b0,"if master is already unblocked, do not unblock it twice"
soloestoy,2017-11-06 08:21:35,https://api.github.com/repos/antirez/redis/git/commits/e3dfd8c811e12b6b1d3f7febf732b23fdaab497b,e3dfd8c811e12b6b1d3f7febf732b23fdaab497b,fix multiple unblock for clientsArePaused()
mesbahamin,2018-09-02 07:06:20,https://api.github.com/repos/antirez/redis/git/commits/a036c64c01b38aceebfcfd467da04ed3f95fd363,a036c64c01b38aceebfcfd467da04ed3f95fd363,"Use geohash limit defines in constraint check

Slight robustness improvement, especially if the limit values are
changed, as was suggested in antires/redis#4291 [1].

[1] https://github.com/antirez/redis/pull/4291"
antirez,2018-08-31 14:43:38,https://api.github.com/repos/antirez/redis/git/commits/febe102bf6d94428779f3943aea5947893301912,febe102bf6d94428779f3943aea5947893301912,"Test: processing of master stream in slave -BUSY state.

See #5297."
antirez,2018-08-31 14:07:03,https://api.github.com/repos/antirez/redis/git/commits/7fa493912e5de72edd7b1720d1a7d1f4287998f8,7fa493912e5de72edd7b1720d1a7d1f4287998f8,"After slave Lua script leaves busy state, re-process the master buffer.

Technically speaking we don't really need to put the master client in
the clients that need to be processed, since in practice the PING
commands from the master will take care, however it is conceptually more
sane to do so."
antirez,2018-08-30 15:40:58,https://api.github.com/repos/antirez/redis/git/commits/9ab91b8c6c599aedad1c5f0521e2036dcf1d0566,9ab91b8c6c599aedad1c5f0521e2036dcf1d0566,"While the slave is busy, just accumulate master input.

Processing command from the master while the slave is in busy state is
not correct, however we cannot, also, just reply -BUSY to the
replication stream commands from the master. The correct solution is to
stop processing data from the master, but just accumulate the stream
into the buffers and resume the processing later.

Related to #5297."
antirez,2018-08-30 09:46:42,https://api.github.com/repos/antirez/redis/git/commits/83af8ef1fdbfb69dd53cedc8e772184b096a5da8,83af8ef1fdbfb69dd53cedc8e772184b096a5da8,"Allow scripts to timeout even if from the master instance.

However the master scripts will be impossible to kill.

Related to #5297."
antirez,2018-08-29 16:14:46,https://api.github.com/repos/antirez/redis/git/commits/f5b29c6444c85a56dc1c60a9c6ee308b779be838,f5b29c6444c85a56dc1c60a9c6ee308b779be838,"Allow scripts to timeout on slaves as well.

See reasoning in #5297."
soloestoy,2018-08-31 03:49:27,https://api.github.com/repos/antirez/redis/git/commits/dce7cefb7ca5b8efad865fca14c16d773a106e3d,dce7cefb7ca5b8efad865fca14c16d773a106e3d,"networking: fix unexpected negative or zero readlen

To avoid copying buffers to create a large Redis Object which
exceeding PROTO_IOBUF_LEN 32KB, we just read the remaining data
we need, which may less than PROTO_IOBUF_LEN. But the remaining
len may be zero, if the bulklen+2 equals sdslen(c->querybuf),
in client pause context.

For example:

Time1:

python
>>> import os, socket
>>> server=""127.0.0.1""
>>> port=6379
>>> data1=""*3\r\n$3\r\nset\r\n$1\r\na\r\n$33000\r\n""
>>> data2="""".join(""x"" for _ in range(33000)) + ""\r\n""
>>> data3=""\n\n""
>>> s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
>>> s.settimeout(10)
>>> s.connect((server, port))
>>> s.send(data1)
28

Time2:

redis-cli client pause 10000

Time3:

>>> s.send(data2)
33002
>>> s.send(data3)
2
>>> s.send(data3)
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
socket.error: [Errno 104] Connection reset by peer

To fix that, we should check if remaining is greater than zero."
antirez,2018-08-29 14:19:13,https://api.github.com/repos/antirez/redis/git/commits/d05f5c8f642e720f287ce39448ac52f45b13efda,d05f5c8f642e720f287ce39448ac52f45b13efda,"Merge pull request #5268 from 0xtonyxia/fix-latency-cmd-comments2

Revise the comments of latency command."
antirez,2018-08-29 14:18:11,https://api.github.com/repos/antirez/redis/git/commits/476eea95dad37aa2c11cd82627926b9d117e052a,476eea95dad37aa2c11cd82627926b9d117e052a,"Merge pull request #4216 from lamby/did-not-received-typos

Correct ""did not received"" -> ""did not receive"" typos/grammar."
antirez,2018-08-29 14:13:42,https://api.github.com/repos/antirez/redis/git/commits/bd9259d12dfea67022d0401702142bb2b5033728,bd9259d12dfea67022d0401702142bb2b5033728,"Merge pull request #5282 from soloestoy/remove-duplicate-bind-in-sentinel.conf

remove duplicate bind in sentinel.conf"
antirez,2018-08-29 10:26:01,https://api.github.com/repos/antirez/redis/git/commits/ed5cc77ce0ffecc1742587debae944e1bf04128c,ed5cc77ce0ffecc1742587debae944e1bf04128c,"Merge pull request #5296 from soloestoy/command-script-flag2

Supplement to PR #4835, just take info/memory/command as random commands"
soloestoy,2018-08-29 10:23:05,https://api.github.com/repos/antirez/redis/git/commits/7d39c149c4ad3cf09fe58f2639ca58b4353294f0,7d39c149c4ad3cf09fe58f2639ca58b4353294f0,"Supplement to PR #4835, just take info/memory/command as random commands"
antirez,2018-08-29 10:13:50,https://api.github.com/repos/antirez/redis/git/commits/0e21efdb1cf6761af4eea086769cecbeefdb2415,0e21efdb1cf6761af4eea086769cecbeefdb2415,"Merge pull request #4835 from soloestoy/command-script-flag

some commands' flags should be set correctly, issue #4834"
soloestoy,2018-04-10 12:41:21,https://api.github.com/repos/antirez/redis/git/commits/32844178ac711535903eb4ecbd6d2774200ea951,32844178ac711535903eb4ecbd6d2774200ea951,"some commands' flags should be set correctly, issue #4834"
antirez,2018-08-27 11:19:31,https://api.github.com/repos/antirez/redis/git/commits/5b4bec9d336655889641b134791dfdd2adc864cf,5b4bec9d336655889641b134791dfdd2adc864cf,"Merge pull request #5265 from oranagra/stabilize_tests

Fix unstable tests on slow machines."
antirez,2018-08-27 10:34:29,https://api.github.com/repos/antirez/redis/git/commits/5941022b524bd8b7017af3811083ed42a85de000,5941022b524bd8b7017af3811083ed42a85de000,Document slave-ignore-maxmemory in redis.conf.
antirez,2018-08-27 10:27:17,https://api.github.com/repos/antirez/redis/git/commits/e245a2046af680a18f74cb76c2a23f5711149501,e245a2046af680a18f74cb76c2a23f5711149501,Make slave-ignore-maxmemory configurable.
antirez,2018-08-27 10:09:08,https://api.github.com/repos/antirez/redis/git/commits/067647a78315cfa81bf489128afd6f4ae1388603,067647a78315cfa81bf489128afd6f4ae1388603,"Introduce repl_slave_ignore_maxmemory flag internally.

Note: this breaks backward compatibility with Redis 4, since now slaves
by default are exact copies of masters and do not try to evict keys
independently."
antirez,2018-08-27 09:57:44,https://api.github.com/repos/antirez/redis/git/commits/abf52c7cf412e2b7fd1235cb85248d23db295b48,abf52c7cf412e2b7fd1235cb85248d23db295b48,Better variable meaning in processCommand().
antirez,2018-08-27 10:17:14,https://api.github.com/repos/antirez/redis/git/commits/66b5afdaa4bf53b66e4d09fe6c3ebbfff283d1c4,66b5afdaa4bf53b66e4d09fe6c3ebbfff283d1c4,Re-apply rebased #2358.
antirez,2018-08-27 10:14:10,https://api.github.com/repos/antirez/redis/git/commits/c241f5160752753c271366547e2ada8617f1e684,c241f5160752753c271366547e2ada8617f1e684,Fix build errors caused by #2358.
soloestoy,2018-08-27 04:07:24,https://api.github.com/repos/antirez/redis/git/commits/e711e6f614c71187ca39b5b171f063a2025de1a0,e711e6f614c71187ca39b5b171f063a2025de1a0,remove duplicate bind in sentinel.conf
antirez,2018-08-26 14:31:24,https://api.github.com/repos/antirez/redis/git/commits/19880ab85166165e65a9e2713d244bb31c7573f5,19880ab85166165e65a9e2713d244bb31c7573f5,"Merge pull request #5248 from soloestoy/rewrite-brpoplpush

rewrite BRPOPLPUSH as RPOPLPUSH to propagate"
antirez,2018-08-26 14:30:49,https://api.github.com/repos/antirez/redis/git/commits/80e16956529ba0999cfe30a171693c8f3d3a4098,80e16956529ba0999cfe30a171693c8f3d3a4098,"Merge pull request #5244 from soloestoy/optimize-pipeline

pipeline: do not sdsrange querybuf unless all commands processed"
lamby,2018-08-26 12:45:39,https://api.github.com/repos/antirez/redis/git/commits/132be8aed5c7669f3061d2861eb2570c9f41dc19,132be8aed5c7669f3061d2861eb2570c9f41dc19,"Correct ""did not received"" -> ""did not receive"" typos/grammar."
antirez,2018-08-26 09:25:44,https://api.github.com/repos/antirez/redis/git/commits/46d89a9abb5550b8b425c179e3c92d10e64f41fe,46d89a9abb5550b8b425c179e3c92d10e64f41fe,"Merge pull request #2992 from lamby/source-date-epoch

Use SOURCE_DATE_EPOCH over unreproducible uname + date calls."
antirez,2018-08-26 09:23:41,https://api.github.com/repos/antirez/redis/git/commits/590717782fad214921361917ff511b0c27617c50,590717782fad214921361917ff511b0c27617c50,"Merge pull request #2358 from lamby/config-set-maxmemory-grammar

Tidy grammar in CONFIG SET maxmemory warning."
antirez,2018-08-26 09:19:51,https://api.github.com/repos/antirez/redis/git/commits/8d519a85f42d18aa69efed1a1f6d97cdb12fb6eb,8d519a85f42d18aa69efed1a1f6d97cdb12fb6eb,"Merge pull request #2292 from lamby/sentinel-conf-defaults

Make some defaults explicit in the sentinel.conf for package maintainers"
lamby,2018-08-25 19:49:29,https://api.github.com/repos/antirez/redis/git/commits/f63e81c202cac6566bbe06cc576ff3aa8e1863a4,f63e81c202cac6566bbe06cc576ff3aa8e1863a4,Merge branch 'unstable' into config-set-maxmemory-grammar
soloestoy,2018-08-23 04:21:23,https://api.github.com/repos/antirez/redis/git/commits/f2ad89a314a0be2ea50a598339ee903ec3f64b65,f2ad89a314a0be2ea50a598339ee903ec3f64b65,"networking: make setProtocolError simple and clear

Function setProtocolError just records proctocol error
details in server log, set client as CLIENT_CLOSE_AFTER_REPLY.
It doesn't care about querybuf sdsrange, because we
will do it after procotol parsing."
0xtonyxia,2018-08-22 10:07:02,https://api.github.com/repos/antirez/redis/git/commits/1ab64d405e66c8fecd0ff7bd65d22c46f2b1ad0e,1ab64d405e66c8fecd0ff7bd65d22c46f2b1ad0e,Revise the comments of latency command.
oranagra,2018-08-21 08:46:07,https://api.github.com/repos/antirez/redis/git/commits/c8452ab0059877ac4a055e74e604d00244b06053,c8452ab0059877ac4a055e74e604d00244b06053,"Fix unstable tests on slow machines.

Few tests had borderline thresholds that were adjusted.

The slave buffers test had two issues, preventing the slave buffer from growing:
1) the slave didn't necessarily go to sleep on time, or woke up too early,
   now using SIGSTOP to make sure it goes to sleep exactly when we want.
2) the master disconnected the slave on timeout"
soloestoy,2018-08-14 12:59:32,https://api.github.com/repos/antirez/redis/git/commits/9a65f9cd3e09468c0178782bfac0fe1c8f445a20,9a65f9cd3e09468c0178782bfac0fe1c8f445a20,block: format code
soloestoy,2018-08-14 12:58:58,https://api.github.com/repos/antirez/redis/git/commits/8a1219d93b3a9e3349c6f6726bf9923fcf2a40e5,8a1219d93b3a9e3349c6f6726bf9923fcf2a40e5,block: rewrite BRPOPLPUSH as RPOPLPUSH to propagate
soloestoy,2018-08-14 06:50:37,https://api.github.com/repos/antirez/redis/git/commits/ef2a95c46125a5e5402a2ee1e433f78959596d0c,ef2a95c46125a5e5402a2ee1e433f78959596d0c,networking: just move qb_pos instead of sdsrange in processInlineBuffer
soloestoy,2018-08-14 05:55:30,https://api.github.com/repos/antirez/redis/git/commits/e623bd22bab45d8ce20d82bb2de5e8ed82f9e7bf,e623bd22bab45d8ce20d82bb2de5e8ed82f9e7bf,networking: just return C_OK if multibulk processing saw a <= 0 length.
soloestoy,2018-08-13 16:57:22,https://api.github.com/repos/antirez/redis/git/commits/b89302c462bfa410977ed99e1e6fdc64a0fbd031,b89302c462bfa410977ed99e1e6fdc64a0fbd031,adjust qbuf to 26 in test case for client list
soloestoy,2018-08-13 16:43:36,https://api.github.com/repos/antirez/redis/git/commits/14c4ddb5a62a52e30ee169d36b516a78a410a5b4,14c4ddb5a62a52e30ee169d36b516a78a410a5b4,"pipeline: do not sdsrange querybuf unless all commands processed

This is an optimization for processing pipeline, we discussed a
problem in issue #5229: clients may be paused if we apply `CLIENT
PAUSE` command, and then querybuf may grow too large, the cost of
memmove in sdsrange after parsing a completed command will be
horrible. The optimization is that parsing all commands in queyrbuf
, after that we can just call sdsrange only once."
oranagra,2018-08-13 14:43:29,https://api.github.com/repos/antirez/redis/git/commits/17c5f17686354b28c715b6f16c9c4e8eb2239df4,17c5f17686354b28c715b6f16c9c4e8eb2239df4,"Add log when server dies of SIGTERM during loading

this is very confusing to see the server disappears as if it got SIGKILL when it was not the case."
oranagra,2018-08-13 14:36:54,https://api.github.com/repos/antirez/redis/git/commits/f4b27ae22272b9a50e970aa308ba57c3c3dbd985,f4b27ae22272b9a50e970aa308ba57c3c3dbd985,script cache memory in INFO and MEMORY includes both script code and overheads
jeffreylovitz,2018-08-12 16:47:01,https://api.github.com/repos/antirez/redis/git/commits/bd01334da1d27367ad9887f159f2860f7e8ba5ac,bd01334da1d27367ad9887f159f2860f7e8ba5ac,CLI Help text loop verifies arg count
soloestoy,2018-08-03 17:06:53,https://api.github.com/repos/antirez/redis/git/commits/a3a146052509b2d3a58e36d3511ef238153b6ac3,a3a146052509b2d3a58e36d3511ef238153b6ac3,Streams: update listpack with new pointer in XDEL
soloestoy,2018-08-02 06:59:28,https://api.github.com/repos/antirez/redis/git/commits/eb87da6127c605be06073903a0bbaff792b90d70,eb87da6127c605be06073903a0bbaff792b90d70,AOF: discard if we lost EXEC when loading aof
antirez,2018-08-03 11:45:27,https://api.github.com/repos/antirez/redis/git/commits/39c70e728b5af0c50989ffbc05e568099f3e081b,39c70e728b5af0c50989ffbc05e568099f3e081b,"Merge pull request #5146 from 0xtonyxia/fix-xclaim-id-parse

Streams: ID of xclaim command should start from the sixth argument."
antirez,2018-08-03 11:39:32,https://api.github.com/repos/antirez/redis/git/commits/7b5e7f3ed0978d695cc1fc8e24f16cf0f5c3f754,7b5e7f3ed0978d695cc1fc8e24f16cf0f5c3f754,"Merge pull request #5151 from shenlongxing/fix-stream

Fix stream command paras"
shenlongxing,2018-08-03 11:01:15,https://api.github.com/repos/antirez/redis/git/commits/fe56c6740520b6fef2646d757896861c49faee0a,fe56c6740520b6fef2646d757896861c49faee0a,Fix stream command paras
antirez,2018-08-03 10:46:04,https://api.github.com/repos/antirez/redis/git/commits/0ce8323c0d6908edd126c011ad2d44a72a022c48,0ce8323c0d6908edd126c011ad2d44a72a022c48,"Fix AOF comment to report the current behavior.

Realted to #5201."
antirez,2018-08-02 17:07:17,https://api.github.com/repos/antirez/redis/git/commits/3d56311f0ca077fc4661e132508ceca30e74de74,3d56311f0ca077fc4661e132508ceca30e74de74,"Test suite: add --loop option.

Very useful with --stop in order to catch heisenbugs."
antirez,2018-08-02 16:49:49,https://api.github.com/repos/antirez/redis/git/commits/26897c03e2b9a15c5a574c41763aaae7b9c7d66e,26897c03e2b9a15c5a574c41763aaae7b9c7d66e,"Test suite: new --stop option.

It pauses the test execution once the first failure is found."
antirez,2018-08-02 12:14:39,https://api.github.com/repos/antirez/redis/git/commits/d506334b678ea1f0ad2f28b1144365ac7751999a,d506334b678ea1f0ad2f28b1144365ac7751999a,"Test: new sorted set skiplist order consistency.

This should be able to find new bugs and regressions about the new
sorted set update function when ZADD is used to update an element
already existing.

The test is able to find the bug fixed at 2f282aee immediately."
antirez,2018-08-01 17:01:40,https://api.github.com/repos/antirez/redis/git/commits/2f282aee0b8e500697b627254b170f21d93dd4a8,2f282aee0b8e500697b627254b170f21d93dd4a8,"Fix zslUpdateScore() edge case.

When the element new score is the same of prev/next node, the
lexicographical order kicks in, so we can safely update the node in
place only when the new score is strictly between the adjacent nodes
but never equal to one of them.

Technically speaking we could do extra checks to make sure that even if the
score is the same as one of the adjacent nodes, we can still update on
place, but this rarely happens, so probably not a good deal to make it
more complex.

Related to #5179."
antirez,2018-08-01 16:54:15,https://api.github.com/repos/antirez/redis/git/commits/29226a3919ef1f74bc161b31972193ce30bc0ed6,29226a3919ef1f74bc161b31972193ce30bc0ed6,More commenting of zslUpdateScore().
antirez,2018-08-01 16:53:06,https://api.github.com/repos/antirez/redis/git/commits/12ff0c0d79ce673a5e83c8cbff1cdbf773baf800,12ff0c0d79ce673a5e83c8cbff1cdbf773baf800,Explain what's the point of zslUpdateScore() in top comment.
antirez,2018-08-01 16:50:49,https://api.github.com/repos/antirez/redis/git/commits/e3e94ec35cce5acf80d429241b4bbc3fedfa8276,e3e94ec35cce5acf80d429241b4bbc3fedfa8276,Remove old commented zslUpdateScore() from source.
antirez,2018-08-01 16:50:31,https://api.github.com/repos/antirez/redis/git/commits/0b800c4332681400b1a0c59068b3b542da23b381,0b800c4332681400b1a0c59068b3b542da23b381,Optimize zslUpdateScore() as asked in #5179.
antirez,2018-08-01 16:27:56,https://api.github.com/repos/antirez/redis/git/commits/6dd0d6f7dd1fc486ede902c43d299640ce08cc2c,6dd0d6f7dd1fc486ede902c43d299640ce08cc2c,zsetAdd() refactored adding zslUpdateScore().
soloestoy,2018-07-18 08:55:25,https://api.github.com/repos/antirez/redis/git/commits/60acac4cd02913385c461465d4cca06d6c015ba7,60acac4cd02913385c461465d4cca06d6c015ba7,Streams: add test cases for XADD/XTRIM maxlen
soloestoy,2018-07-17 17:58:14,https://api.github.com/repos/antirez/redis/git/commits/9042d1c24966bf229b3fa8d94ada42ebebed7adf,9042d1c24966bf229b3fa8d94ada42ebebed7adf,"Streams: propagate specified MAXLEN instead of approximated

Slaves and rebooting redis may have different radix tree struct,
by different stream* config options. So propagating approximated
MAXLEN to AOF/slaves may lead to date inconsistency."
soloestoy,2018-07-17 16:24:50,https://api.github.com/repos/antirez/redis/git/commits/14d6318b3225c010f28d26c5563c8140c86c1292,14d6318b3225c010f28d26c5563c8140c86c1292,Streams: reset approx_maxlen in every maxlen loop
soloestoy,2018-07-17 16:12:24,https://api.github.com/repos/antirez/redis/git/commits/da6b7516f187b85e7f9a8a2390f02e9c1dc2c7aa,da6b7516f187b85e7f9a8a2390f02e9c1dc2c7aa,Streams: XTRIM  will return an error if MAXLEN with a count < 0
soloestoy,2018-07-17 15:57:42,https://api.github.com/repos/antirez/redis/git/commits/20c6a7fe2c134ad21bfc4ce50e548c3a055e93d0,20c6a7fe2c134ad21bfc4ce50e548c3a055e93d0,"Streams: propagate original MAXLEN argument in XADD context

If we rewrite the MAXLEN argument as zero when no trimming
was performed, date between master and slave and aof will
be inconsistent, because `xtrim maxlen 0` means delete all
entries in stream."
antirez,2018-07-31 16:08:52,https://api.github.com/repos/antirez/redis/git/commits/2f2987ffc5c3cbf8eab307782a07f20492a3d439,2f2987ffc5c3cbf8eab307782a07f20492a3d439,"Streams IDs parsing refactoring.

Related to #5184."
antirez,2018-07-31 15:58:13,https://api.github.com/repos/antirez/redis/git/commits/187fa786373c79e17ff95e1ad76d8d51b91b55e1,187fa786373c79e17ff95e1ad76d8d51b91b55e1,"Merge pull request #5184 from 0xtonyxia/streams-id-opt

Streams: rearrange the usage of '-' and '+' IDs in stream commands."
antirez,2018-07-31 15:28:30,https://api.github.com/repos/antirez/redis/git/commits/7a30be123794ffb339a3a73e094d255a065b6a60,7a30be123794ffb339a3a73e094d255a065b6a60,Minor improvements to PR #5187.
antirez,2018-07-31 15:20:09,https://api.github.com/repos/antirez/redis/git/commits/7b41701eb83b13e5cc2dffef8e06b68df49ea391,7b41701eb83b13e5cc2dffef8e06b68df49ea391,"Merge pull request #5187 from oranagra/testsuite_improvements

Testsuite improvements"
antirez,2018-07-31 15:13:03,https://api.github.com/repos/antirez/redis/git/commits/e245ed9a44583c3772445e99ffa2b14407199287,e245ed9a44583c3772445e99ffa2b14407199287,Cluster cron announce IP minor refactoring.
antirez,2018-07-31 15:11:16,https://api.github.com/repos/antirez/redis/git/commits/093adb7ef9719ea70d7df1af6aec31a5a2af46c7,093adb7ef9719ea70d7df1af6aec31a5a2af46c7,"Merge pull request #5191 from shenlongxing/fix-memory-leak

Fix cluster-announce-ip memory leak"
antirez,2018-07-31 14:41:33,https://api.github.com/repos/antirez/redis/git/commits/b0392e75ec37ffae0cb2277723168d8179861bef,b0392e75ec37ffae0cb2277723168d8179861bef,Tranfer -> transfer typo fixed.
antirez,2018-07-31 14:40:35,https://api.github.com/repos/antirez/redis/git/commits/92b39a0abf8ba22496038066797842c095682fab,92b39a0abf8ba22496038066797842c095682fab,"Merge pull request #5189 from soloestoy/refactor-dbOverwrite

refactor dbOverwrite to make lazyfree work"
antirez,2018-07-31 11:16:43,https://api.github.com/repos/antirez/redis/git/commits/db693be00d4debc474cb52e471a9a4c91e6f263e,db693be00d4debc474cb52e471a9a4c91e6f263e,Refactoring: replace low-level checks with writeCommandsDeniedByDiskError().
antirez,2018-07-31 11:14:24,https://api.github.com/repos/antirez/redis/git/commits/11dd3f4b034566259b2f81484619975928963a89,11dd3f4b034566259b2f81484619975928963a89,Fix writeCommandsDeniedByDiskError() inverted return value.
antirez,2018-07-31 11:10:37,https://api.github.com/repos/antirez/redis/git/commits/0e49938b684ec3d294457391e746b42a539c88cb,0e49938b684ec3d294457391e746b42a539c88cb,Better top comment for writeCommandsDeniedByDiskError().
antirez,2018-07-31 11:09:38,https://api.github.com/repos/antirez/redis/git/commits/5401fe7fb948f6071d5f804fc3c1fbac77286dd5,5401fe7fb948f6071d5f804fc3c1fbac77286dd5,Introduce writeCommandsDeniedByDiskError().
shenlongxing,2018-07-31 08:01:44,https://api.github.com/repos/antirez/redis/git/commits/35ca6700600f2b1991e71e6196ec03ba4bad997f,35ca6700600f2b1991e71e6196ec03ba4bad997f,Fix cluster-announce-ip memory leak
soloestoy,2018-07-31 04:07:57,https://api.github.com/repos/antirez/redis/git/commits/fddeeae724bec1a8e1a3dbb2f18e608b79c2ddfc,fddeeae724bec1a8e1a3dbb2f18e608b79c2ddfc,refactor dbOverwrite to make lazyfree work
oranagra,2018-07-30 13:43:21,https://api.github.com/repos/antirez/redis/git/commits/782928769187c977252c9f698535d824ac5409de,782928769187c977252c9f698535d824ac5409de,"test suite conveniency improvements

* allowing --single to be repeated
* adding --only so that only a specific test inside a unit can be run
* adding --skiptill useful to resume a test that crashed passed the problematic unit.
  useful together with --clients 1
* adding --skipfile to use a file containing list of tests names to skip
* printing the names of the tests that are skiped by skipfile or denytags
* adding --config to add config file options from command line"
antirez,2018-07-30 16:10:06,https://api.github.com/repos/antirez/redis/git/commits/ac3c012a7f92e15fd996867ee4b5bd9f00487f59,ac3c012a7f92e15fd996867ee4b5bd9f00487f59,"Merge pull request #5153 from trevor211/fixLuaScript

Consider aof write error as well as rdb in lua script."
antirez,2018-07-30 16:03:15,https://api.github.com/repos/antirez/redis/git/commits/4ebb4d54c69f24360626bd9b458e8678c9c01de8,4ebb4d54c69f24360626bd9b458e8678c9c01de8,"Merge pull request #5168 from rpv-tomsk/issue-5033

INFO CPU: higher precision of reported values"
rpv-tomsk,2018-07-25 14:50:24,https://api.github.com/repos/antirez/redis/git/commits/1e394b73b799837f23a4f2a9d15366e1cd23fcf9,1e394b73b799837f23a4f2a9d15366e1cd23fcf9,"INFO CPU: higher precision of reported values

Closes: #5033"
antirez,2018-07-30 15:59:12,https://api.github.com/repos/antirez/redis/git/commits/1465755e384e6cf3fed9a39a4af839e84aafe292,1465755e384e6cf3fed9a39a4af839e84aafe292,"Merge pull request #5183 from gkorland/patch-1

Few typo fixes"
antirez,2018-07-30 15:42:30,https://api.github.com/repos/antirez/redis/git/commits/3c19ae941d17dee7f89c282946bc379ba2106b09,3c19ae941d17dee7f89c282946bc379ba2106b09,"Add year in log.

User: ""is there a reason why redis server logs  are missing the year in
the ""date time""?""

Me: ""I guess I did not imagine it would be stable enough to run for
several years""."
0xtonyxia,2018-07-30 13:33:01,https://api.github.com/repos/antirez/redis/git/commits/6491717c88143507567420398131eaa8933f3ec9,6491717c88143507567420398131eaa8933f3ec9,Streams: rearrange the usage of '-' and '+' IDs in stream commands.
0xtonyxia,2018-07-30 13:32:07,https://api.github.com/repos/antirez/redis/git/commits/d6f5ec6f098f7f6b741bc3face1608c25b233caa,d6f5ec6f098f7f6b741bc3face1608c25b233caa,"Streams: add mmid_supp argument in streamParseIDOrReply().

If 'mmid_supp' is set to 0, ""-"" and ""+"" will be
treated as an invalid ID."
gkorland,2018-07-30 13:18:56,https://api.github.com/repos/antirez/redis/git/commits/acaa18f1d1b3d0b74fad4c6bd6a2b034da6cea95,acaa18f1d1b3d0b74fad4c6bd6a2b034da6cea95,Few typo fixes
antirez,2018-07-30 11:50:15,https://api.github.com/repos/antirez/redis/git/commits/15be174cf1c601793477f0d5ec71da1646fe09e5,15be174cf1c601793477f0d5ec71da1646fe09e5,Document dynamic-hz in the example redis.conf.
antirez,2018-07-30 11:44:52,https://api.github.com/repos/antirez/redis/git/commits/be28050ac02b4154ba937a6487c0666d4d4de856,be28050ac02b4154ba937a6487c0666d4d4de856,Make dynamic hz actually configurable.
antirez,2018-07-30 11:37:30,https://api.github.com/repos/antirez/redis/git/commits/c426d85c4c877a21c959b306b81d8df46259cbd6,c426d85c4c877a21c959b306b81d8df46259cbd6,Control dynamic HZ via server configuration.
antirez,2018-07-30 11:31:23,https://api.github.com/repos/antirez/redis/git/commits/4e9c30a6cafad40b6e4051d30ebcd6a165965440,4e9c30a6cafad40b6e4051d30ebcd6a165965440,Merge branch 'dynamic-hz' into unstable
oranagra,2018-07-29 07:08:47,https://api.github.com/repos/antirez/redis/git/commits/4a30adde31dec0d54c38eb88a5af64a1466f6744,4a30adde31dec0d54c38eb88a5af64a1466f6744,"add DEBUG LOG, to to assist test suite debugging"
antirez,2018-07-25 14:34:46,https://api.github.com/repos/antirez/redis/git/commits/fd174cca23ede115ff71b379f10b407cfb54d3ad,fd174cca23ede115ff71b379f10b407cfb54d3ad,"Remove useless conditional from emptyDb().

Related to #4852."
antirez,2018-07-25 14:32:52,https://api.github.com/repos/antirez/redis/git/commits/1c2352f0dd02753a3476871cec0dbb6a4b032064,1c2352f0dd02753a3476871cec0dbb6a4b032064,Make emptyDb() change introduced in #4852 simpler to read.
antirez,2018-07-25 14:30:11,https://api.github.com/repos/antirez/redis/git/commits/fe408ad23f69f2c9a416fcc8cebe8d98f15574b4,fe408ad23f69f2c9a416fcc8cebe8d98f15574b4,"Merge pull request #4852 from soloestoy/optimize-flushall

optimize flushdb, avoid useless loops"
soloestoy,2018-07-25 10:13:34,https://api.github.com/repos/antirez/redis/git/commits/dd071ff6c95cbb7427e5f0c3a6ca84e3c672d87a,dd071ff6c95cbb7427e5f0c3a6ca84e3c672d87a,"optimize flushdb, avoid useless loops"
antirez,2018-07-24 16:57:05,https://api.github.com/repos/antirez/redis/git/commits/73cbc33a0ae4b01ef026dc6975492e1297808b5e,73cbc33a0ae4b01ef026dc6975492e1297808b5e,"Merge pull request #5133 from soloestoy/fix-xdel-memory-leak

Streams: fix xdel memory leak"
soloestoy,2018-07-24 16:06:27,https://api.github.com/repos/antirez/redis/git/commits/eb0e5fe4e3b31c2b6cfebbe95324ce488211d372,eb0e5fe4e3b31c2b6cfebbe95324ce488211d372,Streams: fix xdel memory leak
antirez,2018-07-24 15:31:39,https://api.github.com/repos/antirez/redis/git/commits/0bdeb861f48b4bed269e80d9211c0ce854465a4a,0bdeb861f48b4bed269e80d9211c0ce854465a4a,"Example the magic +1 in migrateCommand().

Related to #5154."
antirez,2018-07-24 15:27:43,https://api.github.com/repos/antirez/redis/git/commits/53d46fa712619af7bcd7883aabe279344336be11,53d46fa712619af7bcd7883aabe279344336be11,Make changes of PR #5154 hopefully simpler.
antirez,2018-07-24 15:24:37,https://api.github.com/repos/antirez/redis/git/commits/e52a036ac636b182fff37fdb1c7177fe48d08f03,e52a036ac636b182fff37fdb1c7177fe48d08f03,"Merge pull request #5154 from trevor211/optimizeMigrate

Do not migrate already expired keys."
antirez,2018-07-24 09:07:27,https://api.github.com/repos/antirez/redis/git/commits/8513f31be06137dd4fe8ad0f7ec5cb84b0503cb5,8513f31be06137dd4fe8ad0f7ec5cb84b0503cb5,"Streams: refactoring of next entry seek in the iterator.

After #5161 the code could be made a bit more obvious for newcomers."
antirez,2018-07-24 08:59:55,https://api.github.com/repos/antirez/redis/git/commits/41a886605ae0bc42c92ffe6dcd7740879318cee6,41a886605ae0bc42c92ffe6dcd7740879318cee6,"Merge pull request #5161 from soloestoy/optimize-stream-iterator

Streams: skip master fileds only when we are going forward in streamIteratorGetID"
antirez,2018-07-24 08:28:48,https://api.github.com/repos/antirez/redis/git/commits/dfc82fca5442a7318dd713a847ec104b6285c54c,dfc82fca5442a7318dd713a847ec104b6285c54c,"Merge pull request #5163 from oranagra/fix_slave_buffer_test

fix slave buffer test suite false positives"
antirez,2018-07-24 08:27:20,https://api.github.com/repos/antirez/redis/git/commits/f4ac796c3476ffa777a95a9795171ac8dc56dc06,f4ac796c3476ffa777a95a9795171ac8dc56dc06,string2ll(): better commenting.
oranagra,2018-04-01 14:09:35,https://api.github.com/repos/antirez/redis/git/commits/d4ae76d1a6cde03c957000f870ff3d1c0e8c3fb9,d4ae76d1a6cde03c957000f870ff3d1c0e8c3fb9,"fix slave buffer test suite false positives

it looks like on slow machines we're getting:
[err]: slave buffer are counted correctly in tests/unit/maxmemory.tcl
Expected condition '$slave_buf > 2*1024*1024' to be true (16914 > 2*1024*1024)

this is a result of the slave waking up too early and eating the
slave buffer before the traffic and the test ends."
antirez,2018-07-24 08:24:24,https://api.github.com/repos/antirez/redis/git/commits/b9a8e56439ac4b44f82eceb7b03d765a46601c4b,b9a8e56439ac4b44f82eceb7b03d765a46601c4b,Merge branch 'removeRedundantCheck' of https://github.com/dsomeshwar/redis into unstable
antirez,2018-07-24 08:22:12,https://api.github.com/repos/antirez/redis/git/commits/b28cbe90e1205ba3c1fe072b09f6407fd5537730,b28cbe90e1205ba3c1fe072b09f6407fd5537730,"Restore string2ll() to original version.

See PR #5157."
antirez,2018-07-23 22:21:49,https://api.github.com/repos/antirez/redis/git/commits/1a8d7cd9c28cd32617e0d26d86494d6015cfbd94,1a8d7cd9c28cd32617e0d26d86494d6015cfbd94,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-07-23 22:20:20,https://api.github.com/repos/antirez/redis/git/commits/e8f5d2194020886b39da19fc98b8a77ede516256,e8f5d2194020886b39da19fc98b8a77ede516256,"string2ll(): remove duplicated check for special case.

Related to #5157. The PR author correctly indentified that the check was
duplicated, but removing the second one introduces a bug that was fixed
in the past (hence the duplication). Instead we can remove the first
instance of the check without issues."
antirez,2018-07-23 22:18:39,https://api.github.com/repos/antirez/redis/git/commits/1daee8c74859a9980e9a055fe9d788143293c81e,1daee8c74859a9980e9a055fe9d788143293c81e,string2ll(): test for NULL pointer in all the cases.
antirez,2018-07-23 22:07:59,https://api.github.com/repos/antirez/redis/git/commits/ab1d5fe11a9c7f314a04bfc76217f2f72ca8746d,ab1d5fe11a9c7f314a04bfc76217f2f72ca8746d,"Merge pull request #5160 from oranagra/fix_zmalloc_usable

fix recursion typo in zmalloc_usable"
antirez,2018-07-23 16:44:38,https://api.github.com/repos/antirez/redis/git/commits/9a375e5408e3539e4ed8abc2f20067c84ef8f13e,9a375e5408e3539e4ed8abc2f20067c84ef8f13e,"Change 42 to 1000 as warning level for cached scripts.

Related to #4883."
antirez,2018-07-23 16:43:05,https://api.github.com/repos/antirez/redis/git/commits/445a2a2b1b371df9e8f65cc430e872913d1b416b,445a2a2b1b371df9e8f65cc430e872913d1b416b,"Merge pull request #4883 from itamarhaber/lua_scripts-in-info-memory

Adds memory information about the scripts' cache to INFO"
antirez,2018-07-23 12:21:04,https://api.github.com/repos/antirez/redis/git/commits/b65ddfb16a7060a543b523feadeca1234cffd323,b65ddfb16a7060a543b523feadeca1234cffd323,Dynamic HZ: adapt cron frequency to number of clients.
antirez,2018-07-23 12:13:58,https://api.github.com/repos/antirez/redis/git/commits/e6ea603ad3ae53d4d33c48ec94699912dcfac716,e6ea603ad3ae53d4d33c48ec94699912dcfac716,"Dynamic HZ: separate hz from the configured hz.

This way we can remember what the user configured HZ is, but change the
actual HZ dynamically if needed in the dynamic HZ feature
implementation."
itamarhaber,2018-07-22 18:16:00,https://api.github.com/repos/antirez/redis/git/commits/993716c351856f30487d6c8d9cc64423183c5f1b,993716c351856f30487d6c8d9cc64423183c5f1b,"Adds Lua overheads to MEMORY STATS, smartens the MEMORY DOCTOR"
soloestoy,2018-07-22 09:52:09,https://api.github.com/repos/antirez/redis/git/commits/9674ede85ad5c2e6dcc6d47e78ffc60c92b90504,9674ede85ad5c2e6dcc6d47e78ffc60c92b90504,Streams: skip master fileds only when we are going forward in streamIteratorGetID
oranagra,2018-07-22 07:17:35,https://api.github.com/repos/antirez/redis/git/commits/780815dd6ed62a0744bdbea90c239c5dcf792e60,780815dd6ed62a0744bdbea90c239c5dcf792e60,fix recursion typo in zmalloc_usable
dsomeshwar,2018-07-21 18:12:08,https://api.github.com/repos/antirez/redis/git/commits/bb5b8b3a6ff30d2b324a732bf7f4519443b354ac,bb5b8b3a6ff30d2b324a732bf7f4519443b354ac,removing redundant check
trevor211,2018-07-21 02:00:32,https://api.github.com/repos/antirez/redis/git/commits/4017a11144cddfc702afd038fec1461eb6e68811,4017a11144cddfc702afd038fec1461eb6e68811,Do not migrate already expired keys.
trevor211,2018-07-21 00:48:51,https://api.github.com/repos/antirez/redis/git/commits/dd760bd5e6bc742932d4177d7cd691c0f195aa70,dd760bd5e6bc742932d4177d7cd691c0f195aa70,Consider aof write error as well as rdb in lua script.
chendq8,2018-07-20 11:20:14,https://api.github.com/repos/antirez/redis/git/commits/68ceb466978ec2babdd246a560d31a597c08dcfb,68ceb466978ec2babdd246a560d31a597c08dcfb,"Merge pull request #1 from antirez/unstable

update"
antirez,2018-07-20 07:46:18,https://api.github.com/repos/antirez/redis/git/commits/4ff47a0b9bf4d032891e1956c74a5556e443b7a0,4ff47a0b9bf4d032891e1956c74a5556e443b7a0,Top comment clientsCron().
antirez,2018-07-20 07:36:44,https://api.github.com/repos/antirez/redis/git/commits/aba6855282759feed747fb80cd947f86d5039335,aba6855282759feed747fb80cd947f86d5039335,Clarify that clientsCronTrackExpansiveClients() indexes may jump ahead.
antirez,2018-07-19 15:38:17,https://api.github.com/repos/antirez/redis/git/commits/be88c0b16a53f5763d8fc1ae683f99ee39b0d68e,be88c0b16a53f5763d8fc1ae683f99ee39b0d68e,"Rename INFO CLIENT max buffers field names for correctness.

They are actually delayed a few seconds, so let's call them ""recent""."
antirez,2018-07-19 15:34:15,https://api.github.com/repos/antirez/redis/git/commits/0cf3794e6e4807caaf1c78a62dd7843174c08f70,0cf3794e6e4807caaf1c78a62dd7843174c08f70,Fix wrong array index variable in getExpansiveClientsInfo().
antirez,2018-07-19 15:16:19,https://api.github.com/repos/antirez/redis/git/commits/ea3a20c5d05869a498d037f67f92fd05287f9428,ea3a20c5d05869a498d037f67f92fd05287f9428,Change INFO CLIENTS sections to report pre-computed max/min client buffers.
0xtonyxia,2018-07-19 12:48:08,https://api.github.com/repos/antirez/redis/git/commits/de5ca516aed4065e7b7e05d692996cfc028b0f32,de5ca516aed4065e7b7e05d692996cfc028b0f32,Streams: ID of xclaim command starts from the sixth argument.
antirez,2018-07-19 11:59:13,https://api.github.com/repos/antirez/redis/git/commits/8f7e496ba50279fbc384cc391ebb45f7b4aaa8e8,8f7e496ba50279fbc384cc391ebb45f7b4aaa8e8,Rename var in clientsCronTrackExpansiveClients() for clarity.
antirez,2018-07-19 11:58:04,https://api.github.com/repos/antirez/redis/git/commits/8d617596f1ba5eab71820b0e8faafad893a40176,8d617596f1ba5eab71820b0e8faafad893a40176,Implement a function to retrieve the expansive clients mem usage.
antirez,2018-07-19 11:54:15,https://api.github.com/repos/antirez/redis/git/commits/85a1b4f807fd7651184363fadb4a8cdac864adc6,85a1b4f807fd7651184363fadb4a8cdac864adc6,clientsCronTrackExpansiveClients() actual implementation.
antirez,2018-07-19 11:49:00,https://api.github.com/repos/antirez/redis/git/commits/d4c5fc57db0c60780cbce8dfe2b6a5e457cedf83,d4c5fc57db0c60780cbce8dfe2b6a5e457cedf83,clientsCronTrackExpansiveClients() skeleton and ideas.
antirez,2018-07-19 10:22:42,https://api.github.com/repos/antirez/redis/git/commits/1c95c075966407729648fe676883a75be638824c,1c95c075966407729648fe676883a75be638824c,"Make vars used only by INFO CLIENTS local to the block.

Related to #4727."
antirez,2018-07-19 10:21:35,https://api.github.com/repos/antirez/redis/git/commits/16b8d364cca67f4db0883715869c721317f799af,16b8d364cca67f4db0883715869c721317f799af,"Merge pull request #4727 from kingpeterpaule/redis-fix-info-cli

move getClientsMaxBuffers func into  info clients command"
antirez,2018-07-18 15:41:37,https://api.github.com/repos/antirez/redis/git/commits/0aca977c476ac169208d0366c3a42aa18923cc36,0aca977c476ac169208d0366c3a42aa18923cc36,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-07-18 15:41:06,https://api.github.com/repos/antirez/redis/git/commits/313b2240aec0447bb61453cf81f706120d826c30,313b2240aec0447bb61453cf81f706120d826c30,"In addReplyErrorLength() only panic when replying to slave.

See #5135 for more context."
antirez,2018-07-18 15:40:07,https://api.github.com/repos/antirez/redis/git/commits/6183f0590dede55ceeb9019899343170d38197d0,6183f0590dede55ceeb9019899343170d38197d0,"Refine comment in addReplyErrorLength() about replying to masters/slaves.

See #5135 for some context."
antirez,2018-07-18 09:05:03,https://api.github.com/repos/antirez/redis/git/commits/22e9321c3ee238f498980cf18781e10caaa01589,22e9321c3ee238f498980cf18781e10caaa01589,"Merge pull request #5138 from oranagra/improve_defrag_test

make active defrag test more stable"
oranagra,2018-07-18 07:16:33,https://api.github.com/repos/antirez/redis/git/commits/f89c93c8adf2dea395224c5c65d82e90aa323bfd,f89c93c8adf2dea395224c5c65d82e90aa323bfd,"make active defrag test more stable

on slower machines, the active defrag test tended to fail.
although the fragmentation ratio was below the treshold, the defragger was
still in the middle of a scan cycle.

this commit changes:
- the defragger uses the current fragmentation state, rather than the cache one
  that is updated by server cron every 100ms. this actually fixes a bug of
  starting one excess scan cycle
- the test lets the defragger use more CPU cycles, in hope that the defrag
  will be faster, but also give it more time before we give up."
antirez,2018-07-17 16:08:46,https://api.github.com/repos/antirez/redis/git/commits/8213f64d6433509ba9cd98a993f5b4c715fef10d,8213f64d6433509ba9cd98a993f5b4c715fef10d,"Merge pull request #5122 from trevor211/allowWritesWhenAofDisabled

Accept write commands if persisting is disabled"
antirez,2018-07-17 16:04:55,https://api.github.com/repos/antirez/redis/git/commits/46fd927800398f3abdf7d21a780f29fd6399519c,46fd927800398f3abdf7d21a780f29fd6399519c,"Merge pull request #4237 from aspirewit/update-comment

Update the comment"
antirez,2018-07-17 15:54:10,https://api.github.com/repos/antirez/redis/git/commits/6201f7b4e0cb1ee96f54d6ec5b993d422581fbf9,6201f7b4e0cb1ee96f54d6ec5b993d422581fbf9,Streams: better error when $ is given with XREADGROUP.
antirez,2018-07-17 15:50:31,https://api.github.com/repos/antirez/redis/git/commits/4bff45c7a6e79c85764ed0191d0fd215485a47cd,4bff45c7a6e79c85764ed0191d0fd215485a47cd,"Merge pull request #5136 from 0xtonyxia/fix-xread-id-parse

Fix xreadgroup with '$' ID."
antirez,2018-07-17 15:42:25,https://api.github.com/repos/antirez/redis/git/commits/afc7e08a20da95d6facf8357a82b7321cb64cfcf,afc7e08a20da95d6facf8357a82b7321cb64cfcf,"Panic when we are sending an error to our master/slave.

Related to #5135, see discussion there."
antirez,2018-07-17 15:33:58,https://api.github.com/repos/antirez/redis/git/commits/e03358c0d978bf0352a78b531e0ccc69118640eb,e03358c0d978bf0352a78b531e0ccc69118640eb,"Merge pull request #5135 from oranagra/rare_repl_corruption

fix rare replication stream corruption with disk-based replication"
0xtonyxia,2018-07-17 10:23:47,https://api.github.com/repos/antirez/redis/git/commits/846cf12ae592b8a97c9e932f08b7533902733c17,846cf12ae592b8a97c9e932f08b7533902733c17,"Streams: remove meaningless if condition.

It's already checked if xreadgroup is set and groupname is NULL."
0xtonyxia,2018-07-17 10:19:10,https://api.github.com/repos/antirez/redis/git/commits/6501b6bb6d8d8243c47402e25e9d54e7309f727f,6501b6bb6d8d8243c47402e25e9d54e7309f727f,"Streams: return an error message if using xreadgroup with '$' ID.

Redis will always return an empty result when '$' ID is specified
with xreadgroup command, it's meaningless."
oranagra,2018-07-14 13:49:15,https://api.github.com/repos/antirez/redis/git/commits/d55598988b3381afff87bc974f5cfda0e8ae77e0,d55598988b3381afff87bc974f5cfda0e8ae77e0,"fix rare replication stream corruption with disk-based replication

The slave sends \n keepalive messages to the master while parsing the rdb,
and later sends REPLCONF ACK once a second. rarely, the master recives both
a linefeed char and a REPLCONF in the same read, \n*3\r\n$8\r\nREPLCONF\r\n...
and it tries to trim two chars (\r\n) from the query buffer,
trimming the '*' from *3\r\n$8\r\nREPLCONF\r\n...

then the master tries to process a command starting with '3' and replies to
the slave a bunch of -ERR and one +OK.
although the slave silently ignores these (prints a log message), this corrupts
the replication offset at the slave since the slave increases the replication
offset, and the master did not.

other than the fix in processInlineBuffer, i did several other improvments
while hunting this very rare bug.

- when redis replies with ""unknown command"" it includes a portion of the
  arguments, not just the command name. so it would be easier to understand
  what was recived, in my case, on the slave side,  it was -ERR, but
  the ""arguments"" were the interesting part (containing info on the error).
- about a year ago i added code in addReplyErrorLength to print the error to
  the log in case of a reply to master (since this string isn't actually
  trasmitted to the master), now changed that block to print a similar log
  message to indicate an error being sent from the master to the slave.
  note that the slave is marked as CLIENT_SLAVE only after PSYNC was received,
  so this will not cause any harm for REPLCONF, and will only indicate problems
  that are gonna corrupt the replication stream anyway.
- two places were c->reply was emptied, and i wanted to reset sentlen
  this is a precaution (i did not actually see such a problem), since a
  non-zero sentlen will cause corruption to be transmitted on the socket."
antirez,2018-07-17 08:39:47,https://api.github.com/repos/antirez/redis/git/commits/cefe21d28a75f4fdbf24823ce42e777c2b9d5c6f,cefe21d28a75f4fdbf24823ce42e777c2b9d5c6f,dict.c: remove a few trailing spaces.
antirez,2018-07-17 08:38:55,https://api.github.com/repos/antirez/redis/git/commits/4fc2099235a9214a953390340e94ec632cc16344,4fc2099235a9214a953390340e94ec632cc16344,"Merge pull request #5128 from kingpeterpaule/remove-one-loop-in-freeMemoryIfNeeded

remove ineffective loop in dictGetSomeKeys."
antirez,2018-07-16 16:34:35,https://api.github.com/repos/antirez/redis/git/commits/9fbd49bbaf390c1713353fcb462ef436e2d52547,9fbd49bbaf390c1713353fcb462ef436e2d52547,"Merge pull request #5113 from 0xtonyxia/using-compare-func-instead

Streams: using streamCompareID() instead of direct compare."
antirez,2018-07-16 16:32:14,https://api.github.com/repos/antirez/redis/git/commits/cab396761e6d7dbec99627ac4fa1c441027d56d3,cab396761e6d7dbec99627ac4fa1c441027d56d3,"Merge pull request #5127 from oranagra/sds_req_type

bugfix in sdsReqType creating 64bit sds headers on 32bit systems"
antirez,2018-07-16 15:56:54,https://api.github.com/repos/antirez/redis/git/commits/f9c84d6d39411d25bb29d3a03b29ec257e2b66e7,f9c84d6d39411d25bb29d3a03b29ec257e2b66e7,"Hopefully improve commenting of #5126.

Reading the PR gave me the opportunity to better specify what the code
was doing in places where I was not immediately sure about what was
going on. Moreover I documented the structure in server.h so that people
reading the header file will immediately understand what the structure
is useful for."
antirez,2018-07-16 15:45:50,https://api.github.com/repos/antirez/redis/git/commits/e22a1218bcfa460d6b15142dcdc221561ffcfcf2,e22a1218bcfa460d6b15142dcdc221561ffcfcf2,"Merge pull request #5126 from oranagra/slave_buf_memory_2

slave buffers were wasteful and incorrectly counted causing eviction"
antirez,2018-07-16 14:04:32,https://api.github.com/repos/antirez/redis/git/commits/28dd8dd1507f5723196785d854b5564cd530b2bf,28dd8dd1507f5723196785d854b5564cd530b2bf,"Merge pull request #5132 from soloestoy/propagate-xdel-correctly

Streams: correctly propagate xdel if needed"
oranagra,2018-02-21 18:18:34,https://api.github.com/repos/antirez/redis/git/commits/bf680b6f8cdaee2c5588c5c8932a7f3b7fa70b15,bf680b6f8cdaee2c5588c5c8932a7f3b7fa70b15,"slave buffers were wasteful and incorrectly counted causing eviction

A) slave buffers didn't count internal fragmentation and sds unused space,
   this caused them to induce eviction although we didn't mean for it.

B) slave buffers were consuming about twice the memory of what they actually needed.
- this was mainly due to sdsMakeRoomFor growing to twice as much as needed each time
  but networking.c not storing more than 16k (partially fixed recently in 237a38737).
- besides it wasn't able to store half of the new string into one buffer and the
  other half into the next (so the above mentioned fix helped mainly for small items).
- lastly, the sds buffers had up to 30% internal fragmentation that was wasted,
  consumed but not used.

C) inefficient performance due to starting from a small string and reallocing many times.

what i changed:
- creating dedicated buffers for reply list, counting their size with zmalloc_size
- when creating a new reply node from, preallocate it to at least 16k.
- when appending a new reply to the buffer, first fill all the unused space of the
  previous node before starting a new one.

other changes:
- expose mem_not_counted_for_evict info field for the benefit of the test suite
- add a test to make sure slave buffers are counted correctly and that they don't cause eviction"
soloestoy,2018-07-16 12:48:07,https://api.github.com/repos/antirez/redis/git/commits/73306c6fedd134e2d97f351c1bf1e657945771f7,73306c6fedd134e2d97f351c1bf1e657945771f7,Streams: correctly propagate xdel if needed
antirez,2018-07-16 10:41:55,https://api.github.com/repos/antirez/redis/git/commits/103c5a1a3cb9c306a8413820bdeb0132728cd47e,103c5a1a3cb9c306a8413820bdeb0132728cd47e,Add a few comments to streamIteratorRemoveEntry().
antirez,2018-07-16 10:39:38,https://api.github.com/repos/antirez/redis/git/commits/a317f55d25a69b55c07a49dde20989f1ac8aefe0,a317f55d25a69b55c07a49dde20989f1ac8aefe0,"Merge pull request #5131 from soloestoy/optimize-xdel

Streams: free lp if all elements are deleted"
antirez,2018-07-16 10:25:22,https://api.github.com/repos/antirez/redis/git/commits/185e0d9cd81435b32b62c39f131e2af6f6dcc92a,185e0d9cd81435b32b62c39f131e2af6f6dcc92a,"Modify XINFO field from last-id to last-generated-id.

Related to #5129."
antirez,2018-07-16 10:24:14,https://api.github.com/repos/antirez/redis/git/commits/4215e74be5cfc0476982451e4aaa0ddf2a502548,4215e74be5cfc0476982451e4aaa0ddf2a502548,"Merge pull request #5129 from soloestoy/xinfo-show-last-id

Streams: show last id for streams and groups"
soloestoy,2018-07-16 07:57:41,https://api.github.com/repos/antirez/redis/git/commits/c9324f81a209c49c795d41ab2af8cb06b72d87c9,c9324f81a209c49c795d41ab2af8cb06b72d87c9,Streams: free lp if all elements are deleted
soloestoy,2018-07-16 05:24:54,https://api.github.com/repos/antirez/redis/git/commits/b4ba5ac8408ef46c3a0b593a2d3cf6d74f33a1ce,b4ba5ac8408ef46c3a0b593a2d3cf6d74f33a1ce,Streams: show last id for streams and groups
oranagra,2018-07-15 15:24:18,https://api.github.com/repos/antirez/redis/git/commits/b05a22e261bf2ed278d6b1a6afb3ade7ff4cacfc,b05a22e261bf2ed278d6b1a6afb3ade7ff4cacfc,bugfix in sdsReqType creating 64bit sds headers on 32bit systems
0xtonyxia,2018-07-14 07:03:05,https://api.github.com/repos/antirez/redis/git/commits/491682a668dc5eeffdb6c989b819c1015c97b4f0,491682a668dc5eeffdb6c989b819c1015c97b4f0,Streams: using streamCompareID() instead of direct compare in block.c.
0xtonyxia,2018-07-14 07:02:24,https://api.github.com/repos/antirez/redis/git/commits/a2177cd2b6bcbacc376d9640727cd89c5ffed3fa,a2177cd2b6bcbacc376d9640727cd89c5ffed3fa,Streams: add streamCompareID() declaration in stream.h.
0xtonyxia,2018-07-10 08:46:48,https://api.github.com/repos/antirez/redis/git/commits/0484dbcf68638149a8510537fd1a42c836f84020,0484dbcf68638149a8510537fd1a42c836f84020,Streams: using streamCompareID() instead of direct compare.
trevor211,2018-07-14 01:06:23,https://api.github.com/repos/antirez/redis/git/commits/2d4366c5440ddd565e91142d59455232b6894dbd,2d4366c5440ddd565e91142d59455232b6894dbd,"Accept write commands if persisting is disabled,
event if we do have problems persisting on disk
previously."
antirez,2018-07-13 16:18:45,https://api.github.com/repos/antirez/redis/git/commits/ab33bcd34640306cdf70fd4fda0af41d93c687bf,ab33bcd34640306cdf70fd4fda0af41d93c687bf,"Merge pull request #5120 from andrewsensus/leap-year-comment-patch-1

update leap year comment"
antirez,2018-07-13 15:58:17,https://api.github.com/repos/antirez/redis/git/commits/2352a519928aa693d73d03c67898577a3bb2f56d,2352a519928aa693d73d03c67898577a3bb2f56d,Test: XDEL fuzz testing. Remove and check stage.
antirez,2018-07-13 15:52:39,https://api.github.com/repos/antirez/redis/git/commits/3d7d20b7f3fa186a6fd13f28a1382138b1b1b732,3d7d20b7f3fa186a6fd13f28a1382138b1b1b732,"Test: fix lshuffle by providing the ""K"" combinator."
antirez,2018-07-13 15:51:03,https://api.github.com/repos/antirez/redis/git/commits/967ad3643c540d3b40f64cc51b4aff6340662ffb,967ad3643c540d3b40f64cc51b4aff6340662ffb,Test: add lshuffle in the Tcl utility functions set.
antirez,2018-07-13 15:47:26,https://api.github.com/repos/antirez/redis/git/commits/d6efd5fc1d789496275c749b7a26a37ad90931e9,d6efd5fc1d789496275c749b7a26a37ad90931e9,"Test: XDEL fuzz testing, stream creation."
andrewsensus,2018-07-13 15:46:30,https://api.github.com/repos/antirez/redis/git/commits/8dc08ae2154a46757adb75ee091219baa2f0cb22,8dc08ae2154a46757adb75ee091219baa2f0cb22,update leap year comment
antirez,2018-07-13 15:41:10,https://api.github.com/repos/antirez/redis/git/commits/699971535e499cf1cabc349ba6b60ce0fec15d71,699971535e499cf1cabc349ba6b60ce0fec15d71,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-07-13 15:40:48,https://api.github.com/repos/antirez/redis/git/commits/a93f8f09985ed832038b195e7f3e4b5cde220e94,a93f8f09985ed832038b195e7f3e4b5cde220e94,Test: XDEL basic test.
antirez,2018-07-13 15:35:15,https://api.github.com/repos/antirez/redis/git/commits/a44a59340c1a939b48ddaf50757355a38428921a,a44a59340c1a939b48ddaf50757355a38428921a,"Merge pull request #5119 from trevor211/fixSlowlogConfig

Fix slowlog config"
trevor211,2018-07-13 09:53:55,https://api.github.com/repos/antirez/redis/git/commits/d6ba4fd56d9e386abaf6926fa47ead1525ff56cb,d6ba4fd56d9e386abaf6926fa47ead1525ff56cb,Fix config set slowlog-log-slower-than and condition in createLatencyReport
trevor211,2018-07-13 09:51:06,https://api.github.com/repos/antirez/redis/git/commits/b3660be8f5fbf495b960407ff22d83f824161b74,b3660be8f5fbf495b960407ff22d83f824161b74,Add test in slowlog.tcl
artix75,2018-06-27 15:29:11,https://api.github.com/repos/antirez/redis/git/commits/d4182a0a0d36c97c42603fdd8ff6db750ec26580,d4182a0a0d36c97c42603fdd8ff6db750ec26580,Cluster Manager: more checks on --cluster-weight option.
artix75,2018-06-27 14:42:22,https://api.github.com/repos/antirez/redis/git/commits/d222eda9f089f6605d755777c32132cb8cad76c9,d222eda9f089f6605d755777c32132cb8cad76c9,"Redis-trib deprecated: it no longer works and it
outputs a warning to the user."
artix75,2018-06-22 16:27:03,https://api.github.com/repos/antirez/redis/git/commits/513eb5728cbe364721f3258b6964566d28b18136,513eb5728cbe364721f3258b6964566d28b18136,Cluster Manager: auth support (-a argument).
antirez,2018-07-12 17:07:40,https://api.github.com/repos/antirez/redis/git/commits/f3980bb9fd167420acda96419d8db991cc85d1e1,f3980bb9fd167420acda96419d8db991cc85d1e1,"Merge pull request #5115 from shenlongxing/patch-1

Delete unused role checking."
shenlongxing,2018-07-12 13:21:37,https://api.github.com/repos/antirez/redis/git/commits/c2a85fb3c5291c9f0ebe776117fe4d77222eebb7,c2a85fb3c5291c9f0ebe776117fe4d77222eebb7,"Delete unused role checking.

When check rdb file, it is unnecessary to check role."
antirez,2018-07-12 11:42:15,https://api.github.com/repos/antirez/redis/git/commits/4cb5bd4e9d33916d133a4bd69188e4f8e1cd76bd,4cb5bd4e9d33916d133a4bd69188e4f8e1cd76bd,"Merge pull request #4820 from charpty/wip-serverc-simplify

Remove unnecessary return statements"
antirez,2018-07-12 11:35:17,https://api.github.com/repos/antirez/redis/git/commits/8d6b7861a702b9f8fb2eceb76750c393a79e4c40,8d6b7861a702b9f8fb2eceb76750c393a79e4c40,Add regression test for #5111.
antirez,2018-07-12 11:19:39,https://api.github.com/repos/antirez/redis/git/commits/b6260a027026d1a5a6fa4fa0d8527de86066de8e,b6260a027026d1a5a6fa4fa0d8527de86066de8e,"Streams: when re-delivering because of SETID, reset deliveries counter.

We don't want to increment the deliveries here, because the sysadmin
reset the consumer group so the desire is likely to restart processing,
and having the PEL polluted with old information is not useful but
probably confusing.

Related to #5111."
antirez,2018-07-12 11:15:54,https://api.github.com/repos/antirez/redis/git/commits/a7c180e559d687022e85bee88f28d11db571e90c,a7c180e559d687022e85bee88f28d11db571e90c,"Simplify duplicated NACK #5112 fix.

We don't really need to distinguish between the case the consumer is the
same or is a different one."
antirez,2018-07-12 11:04:22,https://api.github.com/repos/antirez/redis/git/commits/bf4def0fbcecb84b49a3e82167ae406131f3de77,bf4def0fbcecb84b49a3e82167ae406131f3de77,"Merge pull request #5112 from 0xtonyxia/fix-xreadgroup-crash-after-setid

Streams: fix xreadgroup crash after xgroup SETID is sent."
antirez,2018-07-11 20:07:46,https://api.github.com/repos/antirez/redis/git/commits/167705519b5f21b2aa3954527be15dc653131221,167705519b5f21b2aa3954527be15dc653131221,"Merge pull request #5114 from oranagra/defrag_32

Active defrag fixes for 32bit builds (again)"
oranagra,2018-07-11 13:09:00,https://api.github.com/repos/antirez/redis/git/commits/920158ec812dde184200232cc347f589123b715d,920158ec812dde184200232cc347f589123b715d,"Active defrag fixes for 32bit builds (again)

* overflow in jemalloc fragmentation hint to the defragger"
antirez,2018-07-10 13:13:20,https://api.github.com/repos/antirez/redis/git/commits/f45e790125cc8141c10daefe25bf3530e484c61f,f45e790125cc8141c10daefe25bf3530e484c61f,"Merge pull request #4967 from JingchengLi/unstable

fix repeat argument issue and reduce unnessary loop times for redis-cli."
antirez,2018-07-10 10:06:44,https://api.github.com/repos/antirez/redis/git/commits/0420c3276f96be8d2261187326cdafca94942577,0420c3276f96be8d2261187326cdafca94942577,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-07-10 10:04:31,https://api.github.com/repos/antirez/redis/git/commits/28e95c7c523258ea43b5fe9b42aeb4f9305da5f7,28e95c7c523258ea43b5fe9b42aeb4f9305da5f7,"Streams: fix typo ""consumer""."
antirez,2018-07-10 10:01:52,https://api.github.com/repos/antirez/redis/git/commits/a8c1bb310e13ae273cf47e09f42953bf38a26b1e,a8c1bb310e13ae273cf47e09f42953bf38a26b1e,Streams: fix new XREADGROUP sync logic.
antirez,2018-07-10 09:34:17,https://api.github.com/repos/antirez/redis/git/commits/1a02b5f6eea523d8020b189ef6e96a515bd3f23d,1a02b5f6eea523d8020b189ef6e96a515bd3f23d,"Streams: make blocking for > a truly special case.

To simplify the semantics of blocking for a group, this commit changes
the implementation to better match the description we provide of
conusmer groups: blocking for > will make the consumer waiting for new
elements in the group. However blocking for any other ID will always
serve the local history of the consumer.

However it must be noted that the > ID is actually an alias for the
special ID ms/seq of UINT64_MAX,UINT64_MAX."
antirez,2018-07-10 09:19:06,https://api.github.com/repos/antirez/redis/git/commits/a71e8148533449097b12233fbebafef135fd4a80,a71e8148533449097b12233fbebafef135fd4a80,"Streams: send an error to consumers blocked on non-existing group.

To detect when the group (or the whole key) is destroyed to send an
error to the consumers blocked in such group is a problem, so we leave
the consumers listening, the sysadmin is free to create or destroy
groups assuming she/he knows what to do. However a client may be blocked
in a given consumer group, that is later destroyed. Then the stream
receives new elements. In that case there is no sane behavior to serve
the consumer... but to report an error about the group no longer
existing.

More about detecting this synchronously and why it is not done:

1. Normally we don't do that, we leave clients blocked for other data
types such as lists.

2. When we free a stream object there is no longer information about
what was the key it was associated with, so while destroying the
consumer groups we miss the info to unblock the clients in that moment.

3. Objects can be reclaimed in other threads where it is no longer safe
to do client operations."
antirez,2018-07-10 09:11:39,https://api.github.com/repos/antirez/redis/git/commits/09327f11dd718461b3a1d577729c1e9969f37080,09327f11dd718461b3a1d577729c1e9969f37080,"Streams: fix unblocking logic into a consumer group.

When a client blocks for a consumer group, we don't know the actual ID
we want to be served: other clients blocked in the same consumer group
may be served first, so the consumer group latest delivered ID changes.
This was not handled correctly, all the clients in the consumer group
were unblocked without data but the first."
0xtonyxia,2018-07-10 08:26:13,https://api.github.com/repos/antirez/redis/git/commits/3f8a3efe5fd968d064337276f052de187bd339b2,3f8a3efe5fd968d064337276f052de187bd339b2,"Streams: fix xreadgroup crash after xgroup SETID is sent.

For issue #5111."
antirez,2018-07-09 11:56:39,https://api.github.com/repos/antirez/redis/git/commits/7239e9ca5ff9dd430d5d7c7bda934a43b13fd8ad,7239e9ca5ff9dd430d5d7c7bda934a43b13fd8ad,"Merge pull request #5095 from 0xtonyxia/fix-indentation

Fix indentation."
0xtonyxia,2018-07-09 11:26:40,https://api.github.com/repos/antirez/redis/git/commits/61f12973f763b1af4e4737a0985df8991451070e,61f12973f763b1af4e4737a0985df8991451070e,"Bugfix: PEL is incorrect when consumer is blocked using xreadgroup with NOACK option.

Save NOACK option into client.blockingState structure."
antirez,2018-07-09 11:36:47,https://api.github.com/repos/antirez/redis/git/commits/b67f027699e8fc293e0bcf167cf296b380af5a5a,b67f027699e8fc293e0bcf167cf296b380af5a5a,redis-cli: fix #4990 additional argument in help.
antirez,2018-07-09 11:25:48,https://api.github.com/repos/antirez/redis/git/commits/18d65849fd40639d752d3f7409f2fd23d6321662,18d65849fd40639d752d3f7409f2fd23d6321662,redis-cli: fix #5096 double error message.
antirez,2018-07-09 11:24:30,https://api.github.com/repos/antirez/redis/git/commits/846203279c06d5bb3dc99c61f3f040439645de08,846203279c06d5bb3dc99c61f3f040439645de08,"redis-cli: cliConnect() flags CC_FORCE and CC_QUIET.

We need CC_QUIET in order to fix #5096 by silently failing if needed."
amitdey1987,2018-07-04 15:36:09,https://api.github.com/repos/antirez/redis/git/commits/a3a5a25fa03a591b84c4d88f313c510dcec989cf,a3a5a25fa03a591b84c4d88f313c510dcec989cf,"fixing broken link in CONTRIBUTING

http://help.github.com/send-pull-requests/ 
is no longer supported

this change modifies the link to the working one
https://help.github.com/articles/creating-a-pull-request/"
0xtonyxia,2018-07-05 07:25:32,https://api.github.com/repos/antirez/redis/git/commits/289d8d9c2cb618a3099e3bf1d548087e4c6954cd,289d8d9c2cb618a3099e3bf1d548087e4c6954cd,CLIENT UNBLOCK: fix client unblock help message.
minkikim89,2018-07-07 07:18:22,https://api.github.com/repos/antirez/redis/git/commits/62a4a8c1d58308fa67978352376db2f2aede449a,62a4a8c1d58308fa67978352376db2f2aede449a,fix whitespace in redis-cli.c
trevor211,2018-07-07 00:44:41,https://api.github.com/repos/antirez/redis/git/commits/0a5805d7f1db3dc8cc932942399879cffd079fc6,0a5805d7f1db3dc8cc932942399879cffd079fc6,fix compile warning in addReplySubcommandSyntaxError
antirez,2018-07-04 14:50:22,https://api.github.com/repos/antirez/redis/git/commits/cb78c84235ab50f03a83b0ad4c3ce168b7e48020,cb78c84235ab50f03a83b0ad4c3ce168b7e48020,Use nolocks_localtime() for safer logging.
antirez,2018-07-04 14:44:57,https://api.github.com/repos/antirez/redis/git/commits/81778d91bf5a0007dc44293e983c7e36dfd7cc51,81778d91bf5a0007dc44293e983c7e36dfd7cc51,"Cache timezone and daylight active flag for safer logging.

With such information will be able to use a private localtime()
implementation serverLog(), which does not use any locking and is both
thread and fork() safe."
antirez,2018-07-04 13:50:41,https://api.github.com/repos/antirez/redis/git/commits/18d8205bbde7bd7bf007784c391fb7fdb1d0a7e4,18d8205bbde7bd7bf007784c391fb7fdb1d0a7e4,Localtime: clarify is_leap_year() working with comments.
antirez,2018-07-04 13:16:54,https://api.github.com/repos/antirez/redis/git/commits/296441445068762a138b31eb20433d2cd9d17d4b,296441445068762a138b31eb20433d2cd9d17d4b,Localtime: fix comment about leap year.
antirez,2018-07-04 13:16:20,https://api.github.com/repos/antirez/redis/git/commits/0ea39aa404ea9243838dcd8cb5f246ec895136cf,0ea39aa404ea9243838dcd8cb5f246ec895136cf,Localtime: fix daylight saving adjustment. Use * not +.
antirez,2018-07-04 12:09:07,https://api.github.com/repos/antirez/redis/git/commits/6614d30599ddbfdb643fe7080173729636af27ad,6614d30599ddbfdb643fe7080173729636af27ad,Localtime: fix daylight time documentation and computation.
0xtonyxia,2018-07-04 12:04:06,https://api.github.com/repos/antirez/redis/git/commits/46f5a2ca077dbc9c4edab1f68feaa2c68244e0fc,46f5a2ca077dbc9c4edab1f68feaa2c68244e0fc,Fix indentation.
antirez,2018-07-04 11:46:27,https://api.github.com/repos/antirez/redis/git/commits/243c5a7a305eaf7a7cf936eb6805f44f9802b3a5,243c5a7a305eaf7a7cf936eb6805f44f9802b3a5,Localtime: add a test main() function to check the output.
antirez,2018-07-04 11:35:40,https://api.github.com/repos/antirez/redis/git/commits/c25ee35a8b6bcabab615e7babe486b08eebc9a47,c25ee35a8b6bcabab615e7babe486b08eebc9a47,"Localtime: day of month is 1 based. Convert from 0 based ""days""."
antirez,2018-07-04 11:35:15,https://api.github.com/repos/antirez/redis/git/commits/b9f33830295a78f8c5bb82f6caa033445d35e56e,b9f33830295a78f8c5bb82f6caa033445d35e56e,Localtime: fix timezone adjustment.
antirez,2018-07-04 11:25:55,https://api.github.com/repos/antirez/redis/git/commits/0c12cbedbb1626597acf2f43718c6b52fc42d08a,0c12cbedbb1626597acf2f43718c6b52fc42d08a,"Localtime: compute year, month and day of the month."
antirez,2018-07-04 11:16:53,https://api.github.com/repos/antirez/redis/git/commits/06ca400f95aca07a3807e16b061415d82c927c64,06ca400f95aca07a3807e16b061415d82c927c64,Localtime: basics initial calculations. Year missing.
antirez,2018-07-04 10:56:12,https://api.github.com/repos/antirez/redis/git/commits/6a529067589d51faaa4d1642027516ab432ec6e3,6a529067589d51faaa4d1642027516ab432ec6e3,Localtime function skeleton and file added.
JackDrogon,2018-07-01 05:24:50,https://api.github.com/repos/antirez/redis/git/commits/93238575f77630f24e0472bdbf7eecb73a4652a8,93238575f77630f24e0472bdbf7eecb73a4652a8,Fix typo
antirez,2018-07-03 11:25:41,https://api.github.com/repos/antirez/redis/git/commits/94b3ee61420f8638d9cdba32877864deef91d5e9,94b3ee61420f8638d9cdba32877864deef91d5e9,Clarify the pending_querybuf field of clients.
antirez,2018-07-03 11:23:29,https://api.github.com/repos/antirez/redis/git/commits/549b8b99733e49d2464666a22da8b56b1d9a3b52,549b8b99733e49d2464666a22da8b56b1d9a3b52,Improve style of PR #5084.
antirez,2018-07-03 11:19:37,https://api.github.com/repos/antirez/redis/git/commits/526b30a7ce654e8418708f98100f0321396315df,526b30a7ce654e8418708f98100f0321396315df,"Merge pull request #5084 from chendq8/pending-querybuf

limit the size of pending-querybuf in masterclient"
antirez,2018-07-03 10:42:14,https://api.github.com/repos/antirez/redis/git/commits/677d10b2a8ff7f13033ccfe56ffcd246dbe70fb6,677d10b2a8ff7f13033ccfe56ffcd246dbe70fb6,"Set repl_down_since to zero on state change.

PR #5081 fixes an ""interesting"" bug about Redis Cluster failover but in
general about the updating of repl_down_since, that is used in order to
count the time a slave was left disconnected from its master.

While the fix provided resolves the specific issue, in general the
validity of repl_down_since is limited to states that are different
than the state CONNECTED, and the disconnected time is set when the
state is DISCONNECTED. However from CONNECTED to other states, the state
machine must always go to DISCONNECTED first. So it makes sense to set
the field to zero (since it is meaningless in that context) when the
state is set to CONNECTED."
antirez,2018-07-03 10:36:53,https://api.github.com/repos/antirez/redis/git/commits/02e385169eb9a0c5710062211e6916d7f8aa38c0,02e385169eb9a0c5710062211e6916d7f8aa38c0,"Merge pull request #5081 from trevor211/fixClusterFailover

cluster failover bug"
chendq8,2018-07-03 02:07:26,https://api.github.com/repos/antirez/redis/git/commits/cbb2ac0799b6b1564caed953fd5821697a68f753,cbb2ac0799b6b1564caed953fd5821697a68f753,Merge branch 'unstable' into pending-querybuf
antirez,2018-07-02 16:49:34,https://api.github.com/repos/antirez/redis/git/commits/2edcafb35d3cc2dcc516ba68bb173f7765424eea,2edcafb35d3cc2dcc516ba68bb173f7765424eea,addReplySubSyntaxError() renamed to addReplySubcommandSyntaxError().
antirez,2018-07-02 16:46:56,https://api.github.com/repos/antirez/redis/git/commits/bc6a004588dafc14165bbd8851ed9d10fff3295a,bc6a004588dafc14165bbd8851ed9d10fff3295a,"Merge pull request #4998 from itamarhaber/module_command_help

Module command help"
antirez,2018-07-02 16:41:58,https://api.github.com/repos/antirez/redis/git/commits/ee09b5ed3adccd9914bc7737ecdbe27b275b4f38,ee09b5ed3adccd9914bc7737ecdbe27b275b4f38,"Merge pull request #5071 from akshaynagpal/patch-2

Added link to Google Group"
antirez,2018-07-02 16:40:35,https://api.github.com/repos/antirez/redis/git/commits/f03ad96236a9b446b0ada85256d4a067ce3c217c,f03ad96236a9b446b0ada85256d4a067ce3c217c,"Merge pull request #5068 from shenlongxing/fix-rename-command

fix empty string for sentinel rename-command"
antirez,2018-07-02 15:51:04,https://api.github.com/repos/antirez/redis/git/commits/e4881cd08365b7ebe293c33c65c6a6eb32e93ce7,e4881cd08365b7ebe293c33c65c6a6eb32e93ce7,"Merge pull request #5090 from trevor211/test_helper_tcl

fix tests/test_helper.tcl with --wait-server option."
trevor211,2018-07-02 11:24:14,https://api.github.com/repos/antirez/redis/git/commits/2833cfbe395d7211d5ad54445556f9e2c0d7ff0c,2833cfbe395d7211d5ad54445556f9e2c0d7ff0c,"fix tests/test_helper.tcl with --wait-server option.
Issue #5063 added --wait-server option, but can not work."
trevor211,2018-06-30 01:39:08,https://api.github.com/repos/antirez/redis/git/commits/2e167f7d0e9abb5c49f8f0fb22a3fe2340ad0e31,2e167f7d0e9abb5c49f8f0fb22a3fe2340ad0e31,"fix server.repl_down_since resetting, so that slaves could failover
automatically as expected."
trevor211,2018-06-30 01:29:35,https://api.github.com/repos/antirez/redis/git/commits/aeb7bc3ec6ef9721fee36c1e275fd73f7a984391,aeb7bc3ec6ef9721fee36c1e275fd73f7a984391,cluster.tcl: Add master consecutively down test.
antirez,2018-06-29 16:02:58,https://api.github.com/repos/antirez/redis/git/commits/d751d98b508fd86c5e38919167e3564f80d4958e,d751d98b508fd86c5e38919167e3564f80d4958e,"Change CLIENT LIST TYPE help string.

Making it more similar to KILL."
antirez,2018-06-29 16:00:32,https://api.github.com/repos/antirez/redis/git/commits/a0b05a0424390492aefe2afdc34d917045897756,a0b05a0424390492aefe2afdc34d917045897756,"Merge pull request #5075 from soloestoy/client-list-types

FEATURE: implements client list type option"
antirez,2018-06-29 15:56:47,https://api.github.com/repos/antirez/redis/git/commits/aa2c390ef89eae23ba5f72cd2cb7006711c2e6de,aa2c390ef89eae23ba5f72cd2cb7006711c2e6de,"Merge pull request #5074 from soloestoy/fix-compile-warning

fix some compile warnings"
antirez,2018-06-29 11:32:58,https://api.github.com/repos/antirez/redis/git/commits/a4ef94d2f71a32f73ce4ebf154580307a144b48f,a4ef94d2f71a32f73ce4ebf154580307a144b48f,"Merge pull request #5076 from 0xtonyxia/add-no-auth-warning-option

Add no auth warning option"
0xtonyxia,2018-06-28 11:09:22,https://api.github.com/repos/antirez/redis/git/commits/9f1856268c9dfb8ef56f1778aa4ef99f9d504bff,9f1856268c9dfb8ef56f1778aa4ef99f9d504bff,Check if password is used on command line interface.
0xtonyxia,2018-06-28 10:47:28,https://api.github.com/repos/antirez/redis/git/commits/1139070a0ffd4fcf79a1420241746b9c626625ce,1139070a0ffd4fcf79a1420241746b9c626625ce,Fix trailing white space.
0xtonyxia,2018-06-28 10:39:42,https://api.github.com/repos/antirez/redis/git/commits/bbd0ca952292979f54b5479d9397d1510f8bb84c,bbd0ca952292979f54b5479d9397d1510f8bb84c,Fix code format issue.
0xtonyxia,2018-06-28 10:38:24,https://api.github.com/repos/antirez/redis/git/commits/7becf54e51ee226bf9cb3a4d5a297d0381f4b571,7becf54e51ee226bf9cb3a4d5a297d0381f4b571,Don't output password warning message when --no-auth-warning is used.
0xtonyxia,2018-06-28 10:22:06,https://api.github.com/repos/antirez/redis/git/commits/bde05e9c327bf80debcbbfc047f247f1944c4ff6,bde05e9c327bf80debcbbfc047f247f1944c4ff6,"Avoid -Woverlength-strings compile warning.

Using another fprintf call to output the rest help message."
antirez,2018-06-28 10:19:04,https://api.github.com/repos/antirez/redis/git/commits/5baf50d850e1c58967fe3d2601ea61ee0d7b4ecd,5baf50d850e1c58967fe3d2601ea61ee0d7b4ecd,Rax library updated (node callback).
0xtonyxia,2018-06-28 10:17:04,https://api.github.com/repos/antirez/redis/git/commits/0b74fd6766b29c2a132828477f4e0f12af85efad,0b74fd6766b29c2a132828477f4e0f12af85efad,Add --no-auth-warning help message.
soloestoy,2018-06-28 09:43:05,https://api.github.com/repos/antirez/redis/git/commits/b9cbd04b573c9f3e3092d45bb2f3181441307e79,b9cbd04b573c9f3e3092d45bb2f3181441307e79,clients: add type option for client list
soloestoy,2018-06-28 09:28:38,https://api.github.com/repos/antirez/redis/git/commits/f5538642cc410dd7b14e0eec5c4217c0a501138f,f5538642cc410dd7b14e0eec5c4217c0a501138f,clients: show pubsub flag in client list
soloestoy,2018-06-28 09:22:59,https://api.github.com/repos/antirez/redis/git/commits/1fcf2737a63cfa0fba4ebc0802fff8e237855ddf,1fcf2737a63cfa0fba4ebc0802fff8e237855ddf,fix some compile warnings
akshaynagpal,2018-06-28 00:08:39,https://api.github.com/repos/antirez/redis/git/commits/007e3cbd7072ab4a0ae5cc0d3df00c7f9427ba99,007e3cbd7072ab4a0ae5cc0d3df00c7f9427ba99,Added link to Google Group
antirez,2018-06-27 22:21:32,https://api.github.com/repos/antirez/redis/git/commits/ab55f9da5eb10aabd78304941903e8657aa210e6,ab55f9da5eb10aabd78304941903e8657aa210e6,Make CLIENT HELP output nicer to the eyes.
antirez,2018-06-27 22:17:21,https://api.github.com/repos/antirez/redis/git/commits/75f1a7bdfc114bf161d79e0a90e993122884d662,75f1a7bdfc114bf161d79e0a90e993122884d662,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-06-27 22:17:10,https://api.github.com/repos/antirez/redis/git/commits/4a70ff74510a0f594232fd13682e358f851e1990,4a70ff74510a0f594232fd13682e358f851e1990,Add unblock in CLIENT HELP.
shenlongxing,2018-06-27 17:08:55,https://api.github.com/repos/antirez/redis/git/commits/3c27db1cd9a452c52b9b4384dc887bca2d34f2e3,3c27db1cd9a452c52b9b4384dc887bca2d34f2e3,fix empty string for sentinel rename-command
antirez,2018-06-27 16:56:49,https://api.github.com/repos/antirez/redis/git/commits/f7b21bc71ef1d814932e01a2e03474377f1a27a9,f7b21bc71ef1d814932e01a2e03474377f1a27a9,"Merge pull request #5066 from oranagra/defrag_jemalloc5_fix

minor fix in creating a stream NACK for rdb and defrag tests"
antirez,2018-06-27 16:54:27,https://api.github.com/repos/antirez/redis/git/commits/730a4cfa00824bee7f39f910059fd9995af17a67,730a4cfa00824bee7f39f910059fd9995af17a67,"Merge pull request #5067 from mpaltun/mpaltun-doc-fix

Streams documentation fix"
antirez,2018-06-27 16:51:06,https://api.github.com/repos/antirez/redis/git/commits/2214043b5c84c69279077343846657c17c0214ac,2214043b5c84c69279077343846657c17c0214ac,CLIENT UNBLOCK: support unblocking by error.
mpaltun,2018-06-27 13:35:30,https://api.github.com/repos/antirez/redis/git/commits/010dc172d40fe5785b380c4a6ebea9d11fa39532,010dc172d40fe5785b380c4a6ebea9d11fa39532,Update t_stream.c
mpaltun,2018-06-27 13:33:31,https://api.github.com/repos/antirez/redis/git/commits/6d0acb330a00a5c373ab17c36c5a20ae3b72e063,6d0acb330a00a5c373ab17c36c5a20ae3b72e063,Update help.h
oranagra,2018-06-27 12:32:18,https://api.github.com/repos/antirez/redis/git/commits/de495ee7abc2d21b1d55e706c71bbe027408ef61,de495ee7abc2d21b1d55e706c71bbe027408ef61,minor fix in creating a stream NACK for rdb and defrag tests
antirez,2018-06-27 11:52:46,https://api.github.com/repos/antirez/redis/git/commits/71295ee305345fba9a73766b6fc084b2c15bc303,71295ee305345fba9a73766b6fc084b2c15bc303,CLIENT UNBLOCK implemented.
antirez,2018-06-27 11:26:01,https://api.github.com/repos/antirez/redis/git/commits/fb39bfd7af088a5ec01aec06c9488b5893eb1ceb,fb39bfd7af088a5ec01aec06c9488b5893eb1ceb,Take clients in a ID -> Client handle dictionary.
antirez,2018-06-27 11:11:50,https://api.github.com/repos/antirez/redis/git/commits/ed65d734e73ac431686c2b14d58dfc21c0b954d6,ed65d734e73ac431686c2b14d58dfc21c0b954d6,CLIENT ID implemented.
antirez,2018-06-27 12:07:25,https://api.github.com/repos/antirez/redis/git/commits/345b4809f40d50658daea6de49e4494796e0b60c,345b4809f40d50658daea6de49e4494796e0b60c,"Merge pull request #5063 from oranagra/test_suite_improvements

test suite infra improvements and fix"
antirez,2018-06-27 12:05:16,https://api.github.com/repos/antirez/redis/git/commits/35c5f3fa7d07420867cb1c9295003279b3a2e2f3,35c5f3fa7d07420867cb1c9295003279b3a2e2f3,"Merge pull request #5065 from oranagra/defrag_jemalloc5

defrag hint support for jemalloc 5, and active defrag for streams"
oranagra,2018-06-26 11:14:35,https://api.github.com/repos/antirez/redis/git/commits/5616d4c6036eeea416f38aa2e41a57249e69277f,5616d4c6036eeea416f38aa2e41a57249e69277f,add active defrag support for streams
oranagra,2018-06-26 11:13:24,https://api.github.com/repos/antirez/redis/git/commits/e8099cabd19c4e3a46c94c39e69e13191d43f5eb,e8099cabd19c4e3a46c94c39e69e13191d43f5eb,add defrag hint support into jemalloc 5
oranagra,2018-06-26 11:14:04,https://api.github.com/repos/antirez/redis/git/commits/751eea24c44a762f0e5d04477defa27e26f2d9d9,751eea24c44a762f0e5d04477defa27e26f2d9d9,"test suite infra improvements and fix

* fail the test (exit code) in case of timeout.
* add --wait-server to allow attaching a debugger
* add --dont-clean to keep log files when tests are done"
antirez,2018-06-26 14:13:20,https://api.github.com/repos/antirez/redis/git/commits/bb666d445d83287295832699d0b86d61866fedef,bb666d445d83287295832699d0b86d61866fedef,"Merge pull request #5027 from tigertv/unstable

Update sort.c"
antirez,2018-06-26 14:09:09,https://api.github.com/repos/antirez/redis/git/commits/b9058c7328941c72a26894961879dff9c5129e42,b9058c7328941c72a26894961879dff9c5129e42,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-06-26 14:08:32,https://api.github.com/repos/antirez/redis/git/commits/438317796b7a34b100e47ce2c5acdf184dfdf53d,438317796b7a34b100e47ce2c5acdf184dfdf53d,Sentinel: test command renaming feature.
antirez,2018-06-26 12:41:48,https://api.github.com/repos/antirez/redis/git/commits/eb052ba93ae1d3ca80718198e6fea19f8185f296,eb052ba93ae1d3ca80718198e6fea19f8185f296,"Merge pull request #5059 from guybe7/fix_restore_warning

Fix compiler warning in restoreCommand"
antirez,2018-06-26 12:38:31,https://api.github.com/repos/antirez/redis/git/commits/27178a3fde83c1b81624083670d922313aca1370,27178a3fde83c1b81624083670d922313aca1370,"Fix type of argslen in sendSynchronousCommand().

Related to #5037."
antirez,2018-06-26 12:37:22,https://api.github.com/repos/antirez/redis/git/commits/1f1e724f47d42538fc77d8f8bf6d6622b204dc62,1f1e724f47d42538fc77d8f8bf6d6622b204dc62,Remove black space.
antirez,2018-06-26 12:33:20,https://api.github.com/repos/antirez/redis/git/commits/aa5eaad48c00d541336b7e0e81605a4a7370f32c,aa5eaad48c00d541336b7e0e81605a4a7370f32c,"Merge pull request #5037 from madolson/repl-auth-fix

Fixed replication authentication with whitespace password"
antirez,2018-06-26 07:15:46,https://api.github.com/repos/antirez/redis/git/commits/3cf8dd2c84daf2f4ad1c1777f36b61a5f846a9c6,3cf8dd2c84daf2f4ad1c1777f36b61a5f846a9c6,"Sentinel: fix SENTINEL SET error reporting.

Thanks to @shenlongxing for reporting the problem.
Related to #5062."
madolson,2018-06-26 00:57:35,https://api.github.com/repos/antirez/redis/git/commits/45731edc4b215431716ec904f62a7d4d212b9d4b,45731edc4b215431716ec904f62a7d4d212b9d4b,Addressed comments
madolson,2018-06-19 05:38:53,https://api.github.com/repos/antirez/redis/git/commits/e8d68b6b72c7bbba63120d9024138dacd583d22d,e8d68b6b72c7bbba63120d9024138dacd583d22d,Fixed replication authentication with whitespace in password
antirez,2018-06-25 15:50:45,https://api.github.com/repos/antirez/redis/git/commits/fc0c9c8097a5b2bc8728bec9cfee26817a702f09,fc0c9c8097a5b2bc8728bec9cfee26817a702f09,"Sentinel: drop the renamed-command entry in a more natural way.

Instead of telling the user to set the renamed command to """" to remove
the renaming, to the obvious thing when a command is renamed to itself.

So if I want to remove the renaming of PING, I just rename it to PING
again."
antirez,2018-06-25 15:45:01,https://api.github.com/repos/antirez/redis/git/commits/8ba670f55c88c0412e5646e35cf02fda655b8ed8,8ba670f55c88c0412e5646e35cf02fda655b8ed8,Sentinel command renaming: document it into sentinel.conf.
antirez,2018-06-25 15:34:12,https://api.github.com/repos/antirez/redis/git/commits/a8a76bda1be22687859948de54a80538e28769b9,a8a76bda1be22687859948de54a80538e28769b9,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-06-25 15:31:57,https://api.github.com/repos/antirez/redis/git/commits/2358de681670f6f2d64d1860765573c43c7f1606,2358de681670f6f2d64d1860765573c43c7f1606,Sentinel command renaming: use case sensitive hashing for the dict.
antirez,2018-06-25 15:24:04,https://api.github.com/repos/antirez/redis/git/commits/a9c500889533aeb6a8c828f146acda9798164813,a9c500889533aeb6a8c828f146acda9798164813,Sentinel command renaming: fix CONFIG SET event logging.
antirez,2018-06-25 15:23:32,https://api.github.com/repos/antirez/redis/git/commits/b72cecd7c89efdd5beef994723d30dba69df6947,b72cecd7c89efdd5beef994723d30dba69df6947,Sentinel command renaming: fix CONFIG SET after refactoring.
antirez,2018-06-25 15:13:20,https://api.github.com/repos/antirez/redis/git/commits/91a384a5cdcc01912331ad3bd467b2785f3d406b,91a384a5cdcc01912331ad3bd467b2785f3d406b,Sentinel command renaming: implement SENTINEL SET.
antirez,2018-06-25 15:12:39,https://api.github.com/repos/antirez/redis/git/commits/903582dd7b1a2cecdb2268b641466c6456aaac9e,903582dd7b1a2cecdb2268b641466c6456aaac9e,Sentinel: make SENTINEL SET able to handle different arities.
antirez,2018-06-25 14:55:01,https://api.github.com/repos/antirez/redis/git/commits/c303e768bf992ebf9042110faab6a7630e426cfe,c303e768bf992ebf9042110faab6a7630e426cfe,Sentinel command renaming: config rewriting.
antirez,2018-06-25 14:47:39,https://api.github.com/repos/antirez/redis/git/commits/60df7dbea14953a5bab62f59ce0d11b464a7507d,60df7dbea14953a5bab62f59ce0d11b464a7507d,Sentinel command renaming: rename-command option parsing.
antirez,2018-06-25 12:06:05,https://api.github.com/repos/antirez/redis/git/commits/72e8a33b35262aa8b4f094d592f271eae433bf0c,72e8a33b35262aa8b4f094d592f271eae433bf0c,Sentinel command renaming: base machanism implemented.
guybe7,2018-06-24 09:53:01,https://api.github.com/repos/antirez/redis/git/commits/dfcc20f4fd30e4373bbd4bc20d500af50796d23c,dfcc20f4fd30e4373bbd4bc20d500af50796d23c,Fix compiler warning in restoreCommand
antirez,2018-06-22 13:48:33,https://api.github.com/repos/antirez/redis/git/commits/cf7fcdbe4ea9496e4ed6385e75a82bf14ef6a0e5,cf7fcdbe4ea9496e4ed6385e75a82bf14ef6a0e5,"Merge pull request #4634 from soloestoy/special-auth

config: handle special configuration """" for auth"
antirez,2018-06-22 13:47:45,https://api.github.com/repos/antirez/redis/git/commits/70b7fa2c52648e4dec9e0e251163bd1aa413a90c,70b7fa2c52648e4dec9e0e251163bd1aa413a90c,"Merge pull request #5049 from youjiali1995/fix-load-rdb

Fix rdbLoadIntegerObject() to create shared objects when needed."
antirez,2018-06-22 13:35:36,https://api.github.com/repos/antirez/redis/git/commits/54d66d39a0ac476eee08c75b8e7e238fac5b2803,54d66d39a0ac476eee08c75b8e7e238fac5b2803,"Merge pull request #5053 from michael-grunder/zpopminmax-keypos

Update ZPOPMIN/ZPOPMAX command declaration"
antirez,2018-06-22 13:34:36,https://api.github.com/repos/antirez/redis/git/commits/199e704a421228b9c3eed967c0706bb3a0414daa,199e704a421228b9c3eed967c0706bb3a0414daa,"Merge pull request #5050 from shenlongxing/fix-typo

fix typo"
michael-grunder,2018-06-21 19:30:42,https://api.github.com/repos/antirez/redis/git/commits/db6b99f90cc569c8126e2b7b0123508d8b8b015d,db6b99f90cc569c8126e2b7b0123508d8b8b015d,"Update ZPOPMIN/ZPOPMAX command declaration

Unlike the BZPOP variants, these functions take a single key.  This fixes
an erroneous CROSSSLOT error when passing a count to a cluster enabled
server."
antirez,2018-06-21 15:36:28,https://api.github.com/repos/antirez/redis/git/commits/a16aa03a678d1312611ca601a6f9da68427bba9f,a16aa03a678d1312611ca601a6f9da68427bba9f,"Merge pull request #5051 from oranagra/streams_mem_estimate

fix streams memory estimation, missing raxSeek"
oranagra,2018-06-21 14:58:29,https://api.github.com/repos/antirez/redis/git/commits/20e10dc7b8eeff9aa5356fd123a7c70e994e6eb4,20e10dc7b8eeff9aa5356fd123a7c70e994e6eb4,"fix streams memory estimation, missing raxSeek"
shenlongxing,2018-06-21 14:08:09,https://api.github.com/repos/antirez/redis/git/commits/ec55df117f0554aaf0d36e2fbb875aea93105b3d,ec55df117f0554aaf0d36e2fbb875aea93105b3d,fix typo
youjiali1995,2018-06-21 10:08:37,https://api.github.com/repos/antirez/redis/git/commits/df6644fe0e858e40ea61c576597c51ddc82feef9,df6644fe0e858e40ea61c576597c51ddc82feef9,Fix rdbLoadIntegerObject() to create shared objects when needed.
antirez,2018-06-20 15:42:37,https://api.github.com/repos/antirez/redis/git/commits/1527bcada365231e7d3852bcefc0a8eb0407f5ae,1527bcada365231e7d3852bcefc0a8eb0407f5ae,"Merge pull request #5036 from bepahol/unstable

Update README.md"
antirez,2018-06-20 09:18:31,https://api.github.com/repos/antirez/redis/git/commits/c1e82405657b42da3d2e98edadceba7e46c3bb38,c1e82405657b42da3d2e98edadceba7e46c3bb38,"Merge pull request #5039 from oranagra/rdb_dbsize_hint

64 bit RDB_OPCODE_RESIZEDB in rdb saving"
antirez,2018-06-20 09:17:06,https://api.github.com/repos/antirez/redis/git/commits/79f55eeddd6e308769a448251454a12a06eed183,79f55eeddd6e308769a448251454a12a06eed183,"Merge pull request #5040 from oranagra/memrev64ifbe_fix

use safe macro (non empty) in memrev64ifbe to eliminate empty if warning"
antirez,2018-06-20 09:11:39,https://api.github.com/repos/antirez/redis/git/commits/c6f4118ce63109d96782b74177383f85822381d8,c6f4118ce63109d96782b74177383f85822381d8,"Merge pull request #5045 from guybe7/restore_fix

Enhance RESTORE with RDBv9 new features"
guybe7,2018-06-20 07:40:18,https://api.github.com/repos/antirez/redis/git/commits/b5197f1fc9d6fde776168951094e44d5e8742a89,b5197f1fc9d6fde776168951094e44d5e8742a89,"Enhance RESTORE with RDBv9 new features

RESTORE now supports:
1. Setting LRU/LFU
2. Absolute-time TTL

Other related changes:
1. RDB loading will not override LRU bits when RDB file
   does not contain the LRU opcode.
2. RDB loading will not set LRU/LFU bits if the server's
   maxmemory-policy does not match."
antirez,2018-06-19 15:22:36,https://api.github.com/repos/antirez/redis/git/commits/c6fdebf533042e30cbe54a41f744b8a674a10dc3,c6fdebf533042e30cbe54a41f744b8a674a10dc3,"Merge pull request #5042 from oranagra/malloc_usable_size_libc

add malloc_usable_size for libc malloc"
oranagra,2018-06-19 13:59:45,https://api.github.com/repos/antirez/redis/git/commits/482785ac62aab0bcaf53eb7eb6f7e005629ff0fa,482785ac62aab0bcaf53eb7eb6f7e005629ff0fa,"add malloc_usable_size for libc malloc

this reduces the extra 8 bytes we save before each pointer.
but more importantly maybe, it makes the valgrind runs to be more similiar
to our normal runs.

note: the change in malloc_stats struct in server.h is to eliminate an name conflict.
structs that are not typedefed are resolved from a separate name space."
antirez,2018-06-19 14:50:22,https://api.github.com/repos/antirez/redis/git/commits/4da296307cd63d7d776f881199d26036ea44211c,4da296307cd63d7d776f881199d26036ea44211c,"Merge pull request #5023 from FX-HAO/unstable

Fix update_zmalloc_stat_alloc in zrealloc"
antirez,2018-06-19 14:29:15,https://api.github.com/repos/antirez/redis/git/commits/e72190252e3622721a2e6260881285905b1beef7,e72190252e3622721a2e6260881285905b1beef7,Test RDB stream encoding saving/loading.
antirez,2018-06-19 14:06:11,https://api.github.com/repos/antirez/redis/git/commits/5f5e1199efa50310cb3477752b42630d522cd280,5f5e1199efa50310cb3477752b42630d522cd280,"Merge pull request #5041 from oranagra/redis-rdb-check_rdbLoadMillisecondTime

fix redis-rdb-check to provide proper arguments to rdbLoadMillisecondTime"
antirez,2018-06-19 14:03:00,https://api.github.com/repos/antirez/redis/git/commits/4848fbec8b95b8783f5becbdd72e461c9fa30716,4848fbec8b95b8783f5becbdd72e461c9fa30716,Modules: convert hash to hash table for big objects.
oranagra,2018-06-19 13:54:22,https://api.github.com/repos/antirez/redis/git/commits/f31b0405f0023d8916efac3aa9b0c16d4db69fc4,f31b0405f0023d8916efac3aa9b0c16d4db69fc4,"fix redis-rdb-check to provide proper arguments to rdbLoadMillisecondTime

due to incorrect forward declaration, it didn't provide all arguments.
this lead to random value being read from the stack and return of incorrect time,
which in this case doesn't matter since no one uses it."
antirez,2018-06-19 13:54:05,https://api.github.com/repos/antirez/redis/git/commits/333c98c43a1f7debac0f5579df62b41259a3efd5,333c98c43a1f7debac0f5579df62b41259a3efd5,"AOF: remove no longer used variable ""now""."
antirez,2018-06-19 13:53:32,https://api.github.com/repos/antirez/redis/git/commits/e94b2053c6cb00e604a0c9f0f51db78250400c36,e94b2053c6cb00e604a0c9f0f51db78250400c36,Modify clusterRedirectClient() to handle ZPOP and XREAD.
oranagra,2018-06-19 13:46:41,https://api.github.com/repos/antirez/redis/git/commits/26229aa6072c24021f90638852417aafe3537b6e,26229aa6072c24021f90638852417aafe3537b6e,use safe macro (non empty) in memrev64ifbe to eliminate empty if warning
oranagra,2018-06-19 13:43:12,https://api.github.com/repos/antirez/redis/git/commits/5cd3c9529df93b7e726256e2de17985a57f00e7b,5cd3c9529df93b7e726256e2de17985a57f00e7b,"64 bit RDB_OPCODE_RESIZEDB in rdb saving

this complication in the code is from times were rdbSaveLen didn't support 64 bits."
antirez,2018-06-19 13:43:06,https://api.github.com/repos/antirez/redis/git/commits/ba92b517b8c22a4d62c583c0a6ac94fb9a0c2486,ba92b517b8c22a4d62c583c0a6ac94fb9a0c2486,"Remove AOF optimization to skip expired keys.

Basically we cannot be sure that if the key is expired while writing the
AOF, the main thread will surely find the key expired. There are
possible race conditions like the moment at which the ""now"" is sampled,
and the fact that time may jump backward.

Think about the following:

SET a 5
EXPIRE a 1

AOF rewrite starts after about 1 second. The child process finds the key
expired, while in the main thread instead an INCR command is called
against the key ""a"" immediately after a fork, and the scheduler was
faster to give execution time to the main thread, so ""a"" is yet not
expired.

The main thread will generate an INCR a command to the AOF log that will
be appended to the rewritten AOF file, but that INCR command will target
a non existin ""a"" key, so a new non volatile key ""a"" will be created.

Two observations:

A) In theory by computing ""now"" before the fork, we should be sure that
if a key is expired at that time, it will be expired later when the
main thread will try to access to such key. However this does not take
into account the fact that the computer time may jump backward.

B) Technically we may still make the process safe by using a monotonic
time source.

However there were other similar related bugs, and in general the new
""vision"" is that Redis persistence files should represent the memory
state without trying to be too smart: this makes the design more
consistent, bugs less likely to arise from complex interactions, and in
the end what is to fix is the Redis expire process to have less expired
keys in RAM.

Thanks to Oran Agra and Guy Benoish for writing me an email outlining
this problem, after they conducted a Redis 5 code review."
bepahol,2018-06-19 05:41:26,https://api.github.com/repos/antirez/redis/git/commits/36524060dfe2d9fb7722aa2e327068883c931e04,36524060dfe2d9fb7722aa2e327068883c931e04,Update README.md
antirez,2018-06-18 15:09:16,https://api.github.com/repos/antirez/redis/git/commits/44571088d8407749ca1c49cde09089664e7928ff,44571088d8407749ca1c49cde09089664e7928ff,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-06-18 15:09:00,https://api.github.com/repos/antirez/redis/git/commits/6967d0bd5aac7c7d112bb3da3c6068dac930c6fc,6967d0bd5aac7c7d112bb3da3c6068dac930c6fc,Revert fix #4976 just leaving the flush() part.
antirez,2018-06-18 14:56:28,https://api.github.com/repos/antirez/redis/git/commits/0ed0dc3c02dfffdf6bfb9e32f1335ddc34f37723,0ed0dc3c02dfffdf6bfb9e32f1335ddc34f37723,"Fix incrDecrCommand() to create shared objects when needed.

See #5011."
antirez,2018-06-18 14:54:13,https://api.github.com/repos/antirez/redis/git/commits/bd92389c2dc1afcf53218880fc31ba45e66f4ded,bd92389c2dc1afcf53218880fc31ba45e66f4ded,Refactor createObjectFromLongLong() to be suitable for value objects.
antirez,2018-06-18 14:02:23,https://api.github.com/repos/antirez/redis/git/commits/3518bb66d724977a36ebd51777efd83d8f9340fd,3518bb66d724977a36ebd51777efd83d8f9340fd,"Merge pull request #5020 from shenlongxing/fix-config

Fix config_set_numerical_field() integer overflow."
antirez,2018-06-18 12:06:06,https://api.github.com/repos/antirez/redis/git/commits/20766608439c30584be720dcb47f055c4051c95d,20766608439c30584be720dcb47f055c4051c95d,"Streams: fix xreadGetKeys() for correctness.

The old version could not handle the fact that ""STREAMS"" is a valid key
name for streams. Now we really try to parse the command like the
command implementation would do.

Related to #5028 and 4857."
antirez,2018-06-18 11:54:38,https://api.github.com/repos/antirez/redis/git/commits/e670ccffeae4904e89364b4fec75b3e2ea90745c,e670ccffeae4904e89364b4fec75b3e2ea90745c,"Merge pull request #4857 from youjiali1995/fix-command-getkeys

Fix core dump when using some commands with wrong arguments."
antirez,2018-06-18 11:51:19,https://api.github.com/repos/antirez/redis/git/commits/a0b27dae85ae071b60d4c5196e7d18d72fbbba2b,a0b27dae85ae071b60d4c5196e7d18d72fbbba2b,"Streams: fix xreadGetKeys() buffer overflow.

The loop allocated a buffer for the right number of keys positions, then
overflowed it going past the limit.

Related to #4857 and cause of the memory violation seen in #5028."
antirez,2018-06-18 08:05:18,https://api.github.com/repos/antirez/redis/git/commits/62f9ac6f436356dc7679d06bedeb98948bcebeb0,62f9ac6f436356dc7679d06bedeb98948bcebeb0,"Streams: Change XADD MAXLEN handling of values <= 0.

Now a MAXLEN of 0 really does what it means: it will create a zero
entries stream. This is useful in order to make sure that the behavior
is identical to XTRIM, that must be able to reduce the stream to zero
elements when MAXLEN is given.

Also now MAXLEN with a count < 0 will return an error."
tigertv,2018-06-17 19:25:51,https://api.github.com/repos/antirez/redis/git/commits/d4c4f20a4585d6c7facfdbe6699c68cb5f56bc47,d4c4f20a4585d6c7facfdbe6699c68cb5f56bc47,"Update sort.c

Redundant second if, and we may use ""not"" operation for bool, I suppose it's faster."
antirez,2018-06-17 08:44:01,https://api.github.com/repos/antirez/redis/git/commits/79a1c19ac28ae7feb23630507c2c192e84ba2cb7,79a1c19ac28ae7feb23630507c2c192e84ba2cb7,XADD MAXLEN should return an error for values < 0.
antirez,2018-06-16 09:05:04,https://api.github.com/repos/antirez/redis/git/commits/2e0ab4a80708d96f4107ff75686be5582e314f0f,2e0ab4a80708d96f4107ff75686be5582e314f0f,"Merge pull request #4976 from trevor211/fixDebugLoadaof

Critical: Fix server crash and data inconsistency in some cases."
antirez,2018-06-16 08:59:37,https://api.github.com/repos/antirez/redis/git/commits/94658303e9ec5050189728fb8bc514ee682dd5fe,94658303e9ec5050189728fb8bc514ee682dd5fe,"Merge pull request #4758 from soloestoy/rdb-save-incremental-fsync

Rdb save incremental fsync"
antirez,2018-06-14 16:57:58,https://api.github.com/repos/antirez/redis/git/commits/6a66b93b186506bcd37f147cbb353f0961a03870,6a66b93b186506bcd37f147cbb353f0961a03870,"Sentinel: add an option to deny online script reconfiguration.

The ability of ""SENTINEL SET"" to change the reconfiguration script at
runtime is a problem even in the security model of Redis: any client
inside the network may set any executable to be ran once a failover is
triggered.

This option adds protection for this problem: by default the two
SENTINEL SET subcommands modifying scripts paths are denied. However the
user is still able to rever that using the Sentinel configuration file
in order to allow such a feature."
antirez,2018-06-14 16:11:04,https://api.github.com/repos/antirez/redis/git/commits/d353023a83de1377c05fd45ccab628ff5cb61186,d353023a83de1377c05fd45ccab628ff5cb61186,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-06-14 16:08:05,https://api.github.com/repos/antirez/redis/git/commits/d6e8fe77afdb79853dd62581be2e785f0014bdf9,d6e8fe77afdb79853dd62581be2e785f0014bdf9,"Fix infinite loop in dbRandomKey().

Thanks to @kevinmcgehee for signaling the issue and reasoning about the
consequences and potential fixes.

Issue #5015."
antirez,2018-06-14 12:01:40,https://api.github.com/repos/antirez/redis/git/commits/40d5df6547308db2f5d71432b10fa84a9844edff,40d5df6547308db2f5d71432b10fa84a9844edff,"Merge pull request #5008 from zwkno1/unstable

fix geohashEncode bug when step > 30"
antirez,2018-06-14 11:58:30,https://api.github.com/repos/antirez/redis/git/commits/8bc3ffcb29d966601e51d9a907ea75c11231cd76,8bc3ffcb29d966601e51d9a907ea75c11231cd76,"Merge pull request #5021 from soloestoy/fix-exists

fix exists command on slave"
antirez,2018-06-14 11:32:00,https://api.github.com/repos/antirez/redis/git/commits/6c7847a18373e6757d2cd2bf21ad4c9272163f29,6c7847a18373e6757d2cd2bf21ad4c9272163f29,"Merge pull request #5018 from soloestoy/optimize-reply

optimize reply list memory usage"
antirez,2018-06-14 10:21:54,https://api.github.com/repos/antirez/redis/git/commits/1e92fde3d34237ff4d30f8a46f74c34f037ed1dd,1e92fde3d34237ff4d30f8a46f74c34f037ed1dd,"Fix SCAN bug regression test, avoiding empty SREM call."
FX-HAO,2018-06-14 08:44:19,https://api.github.com/repos/antirez/redis/git/commits/a4f658b2b5d4be9c3592434d74a5de9cd678158c,a4f658b2b5d4be9c3592434d74a5de9cd678158c,Fix update_zmalloc_stat_alloc in zrealloc
soloestoy,2018-06-13 17:30:07,https://api.github.com/repos/antirez/redis/git/commits/2ffa533f8556b3c642b1099b98ba8b59889b1250,2ffa533f8556b3c642b1099b98ba8b59889b1250,fix exists command on slave
shenlongxing,2018-06-13 15:27:53,https://api.github.com/repos/antirez/redis/git/commits/e4e5a670e7e28485d6ba812759d7faabd90966d2,e4e5a670e7e28485d6ba812759d7faabd90966d2,Fix config_set_numerical_field() integer overflow.
soloestoy,2018-06-13 12:35:40,https://api.github.com/repos/antirez/redis/git/commits/963002d71e64ffd1491b398eea3f57a34d928464,963002d71e64ffd1491b398eea3f57a34d928464,optimize reply list memory usage
antirez,2018-06-11 10:08:42,https://api.github.com/repos/antirez/redis/git/commits/ce17f76bbd95f68ab6716adcbf12d49e3822b87c,ce17f76bbd95f68ab6716adcbf12d49e3822b87c,"Security: fix redis-cli buffer overflow.

Thanks to Fakhri Zulkifli for reporting it.

The fix switched to dynamic allocation, copying the final prompt in the
static buffer only at the end."
antirez,2018-05-15 11:13:49,https://api.github.com/repos/antirez/redis/git/commits/e89086e09a38cc6713bcd4b9c29abf92cf393936,e89086e09a38cc6713bcd4b9c29abf92cf393936,"Security: fix Lua struct package offset handling.

After the first fix to the struct package I found another similar
problem, which is fixed by this patch. It could be reproduced easily by
running the following script:

    return struct.unpack('f', ""xxxxxxxxxxxxx"",-3)

The above will access bytes before the 'data' pointer."
antirez,2018-05-15 10:29:56,https://api.github.com/repos/antirez/redis/git/commits/5ccb6f7a791bf3490357b00a898885759d98bab0,5ccb6f7a791bf3490357b00a898885759d98bab0,"Security: more cmsgpack fixes by @soloestoy.

@soloestoy sent me this additional fixes, after searching for similar
problems to the one reported in mp_pack(). I'm committing the changes
because it was not possible during to make a public PR to protect Redis
users and give Redis providers some time to patch their systems."
antirez,2018-05-14 15:49:06,https://api.github.com/repos/antirez/redis/git/commits/1eb08bcd4634ae42ec45e8284923ac048beaa4c3,1eb08bcd4634ae42ec45e8284923ac048beaa4c3,"Security: update Lua struct package for security.

During an auditing Apple found that the ""struct"" Lua package
we ship with Redis (http://www.inf.puc-rio.br/~roberto/struct/) contains
a security problem. A bound-checking statement fails because of integer
overflow. The bug exists since we initially integrated this package with
Lua, when scripting was introduced, so every version of Redis with
EVAL/EVALSHA capabilities exposed is affected.

Instead of just fixing the bug, the library was updated to the latest
version shipped by the author."
antirez,2018-05-14 15:45:40,https://api.github.com/repos/antirez/redis/git/commits/52a00201fca331217c3b4b8b634f6a0f57d6b7d3,52a00201fca331217c3b4b8b634f6a0f57d6b7d3,"Security: fix Lua cmsgpack library stack overflow.

During an auditing effort, the Apple Vulnerability Research team discovered
a critical Redis security issue affecting the Lua scripting part of Redis.

-- Description of the problem

Several years ago I merged a pull request including many small changes at
the Lua MsgPack library (that originally I authored myself). The Pull
Request entered Redis in commit 90b6337c1, in 2014.
Unfortunately one of the changes included a variadic Lua function that
lacked the check for the available Lua C stack. As a result, calling the
""pack"" MsgPack library function with a large number of arguments, results
into pushing into the Lua C stack a number of new values proportional to
the number of arguments the function was called with. The pushed values,
moreover, are controlled by untrusted user input.

This in turn causes stack smashing which we believe to be exploitable,
while not very deterministic, but it is likely that an exploit could be
created targeting specific versions of Redis executables. However at its
minimum the issue results in a DoS, crashing the Redis server.

-- Versions affected

Versions greater or equal to Redis 2.8.18 are affected.

-- Reproducing

Reproduce with this (based on the original reproduction script by
Apple security team):

https://gist.github.com/antirez/82445fcbea6d9b19f97014cc6cc79f8a

-- Verification of the fix

The fix was tested in the following way:

1) I checked that the problem is no longer observable running the trigger.
2) The Lua code was analyzed to understand the stack semantics, and that
actually enough stack is allocated in all the cases of mp_pack() calls.
3) The mp_pack() function was modified in order to show exactly what items
in the stack were being set, to make sure that there is no silent overflow
even after the fix.

-- Credits

Thank you to the Apple team and to the other persons that helped me
checking the patch and coordinating this communication."
antirez,2018-06-12 16:21:39,https://api.github.com/repos/antirez/redis/git/commits/032ea657d7ca1923ebebda5f2cfeaa69bfbfb4f5,032ea657d7ca1923ebebda5f2cfeaa69bfbfb4f5,"RDB: Apply fix to rdbLoadMillisecondTime() only for new RDB versions.

This way we let big endian systems to still load old RDB versions.
However newver versions will be saved and loaded in a way that make RDB
expires cross-endian again. Thanks to @oranagra for the reporting and
the discussion about this problem, leading to this fix."
antirez,2018-06-12 16:10:41,https://api.github.com/repos/antirez/redis/git/commits/6b8a24a665d0f9bb7cb55cca9ef9e413bdf94e41,6b8a24a665d0f9bb7cb55cca9ef9e413bdf94e41,"Streams: generate a few additional events.

Currently it does not look it's sensible to generate events for streams
consumer groups modification, being them metadata, however at least for
key-level events, like the creation or removal of a consumer group, I
added a few events here and there. Later we can evaluate if it makes
sense to add more. From the POV instead of WAIT (in Redis transaciton)
and signaling the key as modified, it looks like that the transaction
should not fail when a stream is modified, so no calls are made in
consumer groups related functions to signalModifiedKey()."
antirez,2018-06-12 15:31:04,https://api.github.com/repos/antirez/redis/git/commits/b38682199b09bb77e11d9a3d4130fd8ebf8df7df,b38682199b09bb77e11d9a3d4130fd8ebf8df7df,"Fix rdbSaveKeyValuePair() integer overflow.

Again thanks to @oranagra. The object idle time does not fit into an int
sometimes: use the native type that the serialization function will get
as argument, which is uint64_t."
antirez,2018-06-12 15:28:40,https://api.github.com/repos/antirez/redis/git/commits/e534e9aa8368dc2578384f33a874730a5ac83da9,e534e9aa8368dc2578384f33a874730a5ac83da9,"In scanDatabaseForReadyLists() now we need to handle ZSETs as well.

Since the introduction of ZPOP makes this needed. Thanks to @oranagra
for reporting."
antirez,2018-06-12 15:21:57,https://api.github.com/repos/antirez/redis/git/commits/f70e88c1f6e2c7db676ea39dfa323d7c613df787,f70e88c1f6e2c7db676ea39dfa323d7c613df787,"RDB: store times consistently in little endian.

I'm not sure how this escaped the attention of Redis users for years,
but finally @oranagra reported this issue... Thanks to Oran."
antirez,2018-06-12 12:12:53,https://api.github.com/repos/antirez/redis/git/commits/4774d6169108e96a246d062772022b68601a37e5,4774d6169108e96a246d062772022b68601a37e5,Streams: improve type correctness in t_stream.c.
itamarhaber,2018-06-12 11:52:50,https://api.github.com/repos/antirez/redis/git/commits/6b675b95252e7d7bbd3bc78d23e4a244a0310b4c,6b675b95252e7d7bbd3bc78d23e4a244a0310b4c,Applies addReplySubSyntaxError to stream commands
antirez,2018-06-12 11:20:46,https://api.github.com/repos/antirez/redis/git/commits/bcc42028c1aa2d6427f14184088895112a6bd23a,bcc42028c1aa2d6427f14184088895112a6bd23a,Fix XGROUP help missing space.
antirez,2018-06-12 11:14:01,https://api.github.com/repos/antirez/redis/git/commits/e916f4519c3e3b815b594b55c156fb7e1b983377,e916f4519c3e3b815b594b55c156fb7e1b983377,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-06-12 11:13:35,https://api.github.com/repos/antirez/redis/git/commits/6bf65138de07d934b6ab5c9708918b37e841dabf,6bf65138de07d934b6ab5c9708918b37e841dabf,Regression test for issue #5006.
antirez,2018-06-12 11:05:19,https://api.github.com/repos/antirez/redis/git/commits/bcecbebb746ca077d7c23c1cd561da75c875c0b8,bcecbebb746ca077d7c23c1cd561da75c875c0b8,"Merge pull request #5012 from shenlongxing/fix-config

fix active-defrag-threshold value error"
shenlongxing,2018-06-12 09:59:32,https://api.github.com/repos/antirez/redis/git/commits/13957c9d072b86bf8a084380591fcdc219aae108,13957c9d072b86bf8a084380591fcdc219aae108,"fix active-defrag-threshold value error

The active-defrag-threshold-lower/active-defrag-threshold-upper min/max  value in redis.conf should be consistent with 'config set' command."
antirez,2018-06-12 08:22:03,https://api.github.com/repos/antirez/redis/git/commits/7cc1312789aca0bd25bf21f27801430245a17c5a,7cc1312789aca0bd25bf21f27801430245a17c5a,"Streams: fix backward iteration when entry is not flagged SAMEFIELD.

See issue #5006. The comment in the code was also wrong and
was rectified as well."
zwkno1,2018-06-12 07:28:28,https://api.github.com/repos/antirez/redis/git/commits/7659619824755b929251faff457d3873b9742f2b,7659619824755b929251faff457d3873b9742f2b,"Update geohash.c

fix geohasEncode bug when step > 31"
antirez,2018-06-12 07:28:26,https://api.github.com/repos/antirez/redis/git/commits/82661ba329413e899695d2792732ca2f43a1fcc1,82661ba329413e899695d2792732ca2f43a1fcc1,"Merge pull request #5007 from leonchen83/patch-2

fix typo issue #5005"
antirez,2018-06-12 07:27:32,https://api.github.com/repos/antirez/redis/git/commits/923e63e5ecfcfbbc849e61c61069665aabbb6b0a,923e63e5ecfcfbbc849e61c61069665aabbb6b0a,"Streams: increment dirty counter for XGROUP SETID/DESTROY.

See issue #5005 comments."
leonchen83,2018-06-12 00:52:18,https://api.github.com/repos/antirez/redis/git/commits/fac3e8aab55671bc8842214e7384f4174deb6578,fac3e8aab55671bc8842214e7384f4174deb6578,"fix typo

fix [#5005](https://github.com/antirez/redis/issues/5005)"
antirez,2018-06-11 15:12:28,https://api.github.com/repos/antirez/redis/git/commits/cec404f099e3a1a3ce6e94c01ce45d851bd3e843,cec404f099e3a1a3ce6e94c01ce45d851bd3e843,"Use a less aggressive query buffer resize policy.

A user with many connections (10 thousand) on a single Redis server
reports in issue #4983 that sometimes Redis is idle becuase at the same
time many clients need to resize their query buffer according to the old
policy.

It looks like this was created by the fact that we allow the query
buffer to grow without problems to a size up to PROTO_MBULK_BIG_ARG
normally, but when the client is idle we immediately are more strict,
and a query buffer greater than 1024 bytes is already enough to trigger
the resize. So for instance if most of the clients stop at the same time
this issue should be easily triggered.

This behavior actually looks odd, and there should be only a clear limit
after we say, let's look at this query buffer to check if it's time to
resize it. This commit puts the limit at PROTO_MBULK_BIG_ARG, and the
check is performed both if compared to the peak usage the current usage
is too big, or if the client is idle.

Then when the check is performed, to waste just a few kbytes is
considered enough to proceed with the resize. This should fix the issue."
antirez,2018-06-11 14:52:45,https://api.github.com/repos/antirez/redis/git/commits/5bbb00fbb422b4d3e43605a521ae3c2d2bc64808,5bbb00fbb422b4d3e43605a521ae3c2d2bc64808,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-06-11 14:51:06,https://api.github.com/repos/antirez/redis/git/commits/34bd44187ae4a5947995abe8f8e26a5dacb3159b,34bd44187ae4a5947995abe8f8e26a5dacb3159b,"Fix client unblocking for XREADGROUP, issue #4978.

We unblocked the client too early, when the group name object was no
longer valid in client->bpop, so propagating XCLAIM later in
streamPropagateXCLAIM() deferenced a field already set to NULL."
antirez,2018-06-11 14:34:26,https://api.github.com/repos/antirez/redis/git/commits/ba2101738dfeadedf3bdaed4386895441a891b3f,ba2101738dfeadedf3bdaed4386895441a891b3f,"Merge pull request #5000 from shenlongxing/fix-config

fix integer case error"
antirez,2018-06-11 14:33:38,https://api.github.com/repos/antirez/redis/git/commits/b136502d0f9bcf4dad78083f5234d918902b0cc9,b136502d0f9bcf4dad78083f5234d918902b0cc9,"Merge pull request #4995 from shenlongxing/unstable

fix stream config typo"
antirez,2018-06-11 14:33:10,https://api.github.com/repos/antirez/redis/git/commits/5db262b623c6e7e265bfa97b0236cce32a15edee,5db262b623c6e7e265bfa97b0236cce32a15edee,"Merge pull request #5002 from soloestoy/streams-read-or-write

Streams: lookupKey[Read->Write]OrReply in xdel and xtrim"
antirez,2018-06-11 14:32:40,https://api.github.com/repos/antirez/redis/git/commits/e2a9ea04059dea6cf00a20dc2093e6a85cbb4b94,e2a9ea04059dea6cf00a20dc2093e6a85cbb4b94,"Merge pull request #4901 from KFilipek/zmalloc_typo_fix

HW_PHYSMEM typo in preprocessor condition"
antirez,2018-06-11 14:32:00,https://api.github.com/repos/antirez/redis/git/commits/295db9ee0a005440a37ba673f004549d8d3c8a07,295db9ee0a005440a37ba673f004549d8d3c8a07,"Merge pull request #5003 from soloestoy/streams-checkType

Streams: checkType for xread & xinfo"
antirez,2018-06-11 14:30:49,https://api.github.com/repos/antirez/redis/git/commits/163f32c22a4321b1972fe2eda1c2fb567ffb7067,163f32c22a4321b1972fe2eda1c2fb567ffb7067,"Merge pull request #5001 from michael-grunder/xgroup-check-type

Abort in XGROUP if the key is not a stream"
antirez,2018-06-11 11:10:03,https://api.github.com/repos/antirez/redis/git/commits/00613bed06af890b9f09befc71de3f2aedabbacb,00613bed06af890b9f09befc71de3f2aedabbacb,"Improved regression test for #4906.

Removing the fix about 50% of the times the test will not be able to
pass cleanly. It's very hard to write a test that will always fail, or
actually, it is possible but then it's likely that it will consistently
pass if we change some random bit, so better to use randomization here."
antirez,2018-06-11 10:51:25,https://api.github.com/repos/antirez/redis/git/commits/27beaf2f2246cc4c502014f81877da592d2aeaa2,27beaf2f2246cc4c502014f81877da592d2aeaa2,Regression test for the dictScan() issue #4906.
soloestoy,2018-06-10 17:17:52,https://api.github.com/repos/antirez/redis/git/commits/b8913ce72141237570ddfa07a1e412a03d714c51,b8913ce72141237570ddfa07a1e412a03d714c51,Streams: checkType for xread & xinfo
soloestoy,2018-06-10 16:14:17,https://api.github.com/repos/antirez/redis/git/commits/cc81c6f1d3905bd8ddfd0198aefcf3abc3d4d068,cc81c6f1d3905bd8ddfd0198aefcf3abc3d4d068,Streams: lookupKey[Read->Write]OrReply in xdel and xtrim
michael-grunder,2018-06-10 15:55:58,https://api.github.com/repos/antirez/redis/git/commits/c04082cf138f1f51cedf05ee9ad36fb6763cafc6,c04082cf138f1f51cedf05ee9ad36fb6763cafc6,Abort in XGROUP if the key is not a stream
itamarhaber,2018-06-09 18:10:53,https://api.github.com/repos/antirez/redis/git/commits/e654b68d1f33313a683eb131477017da667551f0,e654b68d1f33313a683eb131477017da667551f0,Merge branch 'unstable' into module_command_help
itamarhaber,2018-06-09 18:03:52,https://api.github.com/repos/antirez/redis/git/commits/fefde6e3e4addf860829d4848386d90889590eac,fefde6e3e4addf860829d4848386d90889590eac,Capitalizes subcommands & orders lexicographically
itamarhaber,2018-06-09 17:54:05,https://api.github.com/repos/antirez/redis/git/commits/21ef0376feaaacee22b7913cb08948f65f9b8198,21ef0376feaaacee22b7913cb08948f65f9b8198,Capitalizes subscommands
shenlongxing,2018-06-09 14:24:33,https://api.github.com/repos/antirez/redis/git/commits/1210dd8a20ae4ffea88c3c68457e7e057410110e,1210dd8a20ae4ffea88c3c68457e7e057410110e,fix integer case error
antirez,2018-06-08 10:45:11,https://api.github.com/repos/antirez/redis/git/commits/be899b824edd312d4e3a1998c56626d66fae3b61,be899b824edd312d4e3a1998c56626d66fae3b61,"Merge pull request #4519 from soloestoy/zset-int-problem

Zset int problem"
antirez,2018-06-08 10:32:18,https://api.github.com/repos/antirez/redis/git/commits/5ebaadc96bdd5aa51d9058968b5e6a6094ae3cea,5ebaadc96bdd5aa51d9058968b5e6a6094ae3cea,"Merge pull request #4800 from soloestoy/dict-expand

adjust position of _dictNextPower in dictExpand"
antirez,2018-06-08 10:12:34,https://api.github.com/repos/antirez/redis/git/commits/9fa2e7020e8f4c5c6fc24f7b6adae39e0a9fd7c1,9fa2e7020e8f4c5c6fc24f7b6adae39e0a9fd7c1,"Merge pull request #4861 from soloestoy/rdb-dict-expand

RDB: expand dict if needed when rdb load object"
antirez,2018-06-08 09:17:20,https://api.github.com/repos/antirez/redis/git/commits/269e80526f1f90142661b9e25bff3a08639ce59c,269e80526f1f90142661b9e25bff3a08639ce59c,Implement DEBUG htstats-key.
antirez,2018-06-08 09:02:30,https://api.github.com/repos/antirez/redis/git/commits/97e1f6812cb183bf989ac3bce35e7f59d220df36,97e1f6812cb183bf989ac3bce35e7f59d220df36,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-06-07 16:53:00,https://api.github.com/repos/antirez/redis/git/commits/2268d7e5dd3a44a95f0e44ffe1afccebd8264b64,2268d7e5dd3a44a95f0e44ffe1afccebd8264b64,redis-cli inline help updated.
antirez,2018-06-07 16:52:01,https://api.github.com/repos/antirez/redis/git/commits/b2fc2eaecb85b34a12c2b6a4db91fa5fc466870b,b2fc2eaecb85b34a12c2b6a4db91fa5fc466870b,Add the stream group to the script generating the help.
antirez,2018-06-07 16:49:09,https://api.github.com/repos/antirez/redis/git/commits/66c6218a3c3dc0e813b9cebfbc701d12a3275b14,66c6218a3c3dc0e813b9cebfbc701d12a3275b14,"Merge pull request #4977 from michael-grunder/xpending-early-return

Return early in XPENDING if sent a nonexistent consumer group."
itamarhaber,2018-06-07 15:39:36,https://api.github.com/repos/antirez/redis/git/commits/c199280edb7ad344bb3d2af7572469f74d506da7,c199280edb7ad344bb3d2af7572469f74d506da7,Globally applies  addReplySubSyntaxError
itamarhaber,2018-06-07 15:34:58,https://api.github.com/repos/antirez/redis/git/commits/76ad23d012f194efa1acc0f8356d945b07681851,76ad23d012f194efa1acc0f8356d945b07681851,Adds MODULE HELP and implements  addReplySubSyntaxError
shenlongxing,2018-06-07 15:13:36,https://api.github.com/repos/antirez/redis/git/commits/018cf118d62e3881ffe6b5ff9e534e309c6ef3ab,018cf118d62e3881ffe6b5ff9e534e309c6ef3ab,fix stream config typo
antirez,2018-06-07 12:37:56,https://api.github.com/repos/antirez/redis/git/commits/f847dd3ad8aac54f1f5b2919da3b27155926d343,f847dd3ad8aac54f1f5b2919da3b27155926d343,Streams: better document the max node limits.
antirez,2018-06-07 12:36:56,https://api.github.com/repos/antirez/redis/git/commits/a7dbe37d53075118c6db37848007df49ca69ce9a,a7dbe37d53075118c6db37848007df49ca69ce9a,Typo: entires -> entries in several places.
antirez,2018-06-07 12:36:13,https://api.github.com/repos/antirez/redis/git/commits/dfb3bf1b1e0b0a85fc18d4b721cbe73efbca2e3b,dfb3bf1b1e0b0a85fc18d4b721cbe73efbca2e3b,Streams: make macro node limits configurable.
antirez,2018-06-07 12:30:25,https://api.github.com/repos/antirez/redis/git/commits/6d34ff3645e97e4537ae9136ef4e015591142d01,6d34ff3645e97e4537ae9136ef4e015591142d01,Streams: max node limits only checked if non zero.
antirez,2018-06-07 12:24:45,https://api.github.com/repos/antirez/redis/git/commits/19a438e2c09363d161ed1cfae415222d3d16bfb4,19a438e2c09363d161ed1cfae415222d3d16bfb4,"Streams: use non static macro node limits.

Also add the concept of size/items limit, instead of just having as
limit the number of bytes."
shenlongxing,2018-06-04 15:59:21,https://api.github.com/repos/antirez/redis/git/commits/c85ae56edc982d28df5cb29eedcd9d8bc9840a05,c85ae56edc982d28df5cb29eedcd9d8bc9840a05,Fix write() errno error
antirez,2018-06-06 09:40:19,https://api.github.com/repos/antirez/redis/git/commits/b61416bdf47900fc777b205cafb7b7c8248bb76f,b61416bdf47900fc777b205cafb7b7c8248bb76f,"Fix streamIteratorRemoveEntry() to update elements count.

Close #4989."
antirez,2018-06-05 15:01:47,https://api.github.com/repos/antirez/redis/git/commits/0a698e499a0b543b350544c63701ab944151c6ed,0a698e499a0b543b350544c63701ab944151c6ed,ZPOP: invert score-ele to match ZRANGE WITHSCORES order.
antirez,2018-06-05 14:34:31,https://api.github.com/repos/antirez/redis/git/commits/9e25f3e1defd29d4cf37380870141c40bf97f121,9e25f3e1defd29d4cf37380870141c40bf97f121,"Remove XINFO <key> special form.

As observed by Michael Grunder this usage while practical is
inconsistent because for instance it does not work against a key called
HELP. Removed."
antirez,2018-06-04 15:30:11,https://api.github.com/repos/antirez/redis/git/commits/2f123ea6a3f035cc37c6edde3a25687041434c21,2f123ea6a3f035cc37c6edde3a25687041434c21,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-06-04 15:28:03,https://api.github.com/repos/antirez/redis/git/commits/36b392a0b2528ad22f016e9ca8fce93eb6dab3a0,36b392a0b2528ad22f016e9ca8fce93eb6dab3a0,"XGROUP SETID implemented + consumer groups core fixes.

Now that we have SETID, the inetrnals of consumer groups should be able
to handle the case of the same message delivered multiple times just
as a side effect of calling XREADGROUP. Normally this should never
happen but if the admin manually ""XGROUP SETID mykey mygroup 0"",
messages will get re-delivered to clients waiting for the "">"" special
ID. The consumer groups internals were not able to handle the case of a
message re-delivered in this circumstances that was already assigned to
another owner."
antirez,2018-06-04 15:26:16,https://api.github.com/repos/antirez/redis/git/commits/05a29966410c82bd3603ae290a342e856158e18a,05a29966410c82bd3603ae290a342e856158e18a,Rax library updated.
antirez,2018-06-04 15:18:39,https://api.github.com/repos/antirez/redis/git/commits/b1783d3ab9f02c3e7638db1cf6b71ea70881c86d,b1783d3ab9f02c3e7638db1cf6b71ea70881c86d,"Merge pull request #4981 from yossigo/gcc7

Clean gcc 7.x warnings, redis-cli cluster fix."
antirez,2018-06-04 10:58:26,https://api.github.com/repos/antirez/redis/git/commits/7c6f1be5df4b3f453ab3928b2239ed60138e1cef,7c6f1be5df4b3f453ab3928b2239ed60138e1cef,XGROUP DESTROY implemented.
yossigo,2018-06-03 12:54:30,https://api.github.com/repos/antirez/redis/git/commits/e1222d8b10552cda6f6fdf1178a2ca25ad77894b,e1222d8b10552cda6f6fdf1178a2ca25ad77894b,"Clean gcc 7.x warnings, redis-cli cluster fix."
michael-grunder,2018-06-03 01:22:20,https://api.github.com/repos/antirez/redis/git/commits/1749fe7a26e6ce53ab90271aa807380bd9458d3a,1749fe7a26e6ce53ab90271aa807380bd9458d3a,Return early in XPENDING if sent a nonexistent consumer group.
trevor211,2018-06-02 06:29:43,https://api.github.com/repos/antirez/redis/git/commits/7d269d5e633911628625d279b54e48c8b38fec90,7d269d5e633911628625d279b54e48c8b38fec90,"Fix DEBUG LOADAOF so that redis-server will not crash unexpectedly
and will not be inconsistent after we call debug loadaof.
Before this commit, there were 2 problems:

1, When appendonly is set to no and there is not a appendonly file,
   redis-server will crash if we call DEBUG LOADAOF.
2, When appendonly is set to no and there is a appendonly file,
   redis-server will hold different data after loading  appendonly
   file."
antirez,2018-06-01 14:54:05,https://api.github.com/repos/antirez/redis/git/commits/86de089a1e494b2f2291858ad6b76e4452068193,86de089a1e494b2f2291858ad6b76e4452068193,"Merge pull request #4907 from youjiali1995/fix-dictScan

Fix dictScan(): It can't scan all buckets when dict is shrinking."
artix75,2018-06-01 13:32:44,https://api.github.com/repos/antirez/redis/git/commits/d168b245b331e5fd24e7edb15d0d04213f3a180f,d168b245b331e5fd24e7edb15d0d04213f3a180f,Cluster Manager: fixed master_id check in clusterManagerNodeLoadInfo
antirez,2018-05-31 16:40:53,https://api.github.com/repos/antirez/redis/git/commits/d49d0238288892c9511730b6fffcdd6ed22ab668,d49d0238288892c9511730b6fffcdd6ed22ab668,"Merge pull request #4971 from soloestoy/bugfix-bzpop

ZPOP: unblock multiple clients in right way"
soloestoy,2018-05-31 15:35:47,https://api.github.com/repos/antirez/redis/git/commits/b9d19371e402fc8e6d1ca70863ab0e06889ff1c3,b9d19371e402fc8e6d1ca70863ab0e06889ff1c3,ZPOP: unblock multiple clients in right way
antirez,2018-05-31 15:32:11,https://api.github.com/repos/antirez/redis/git/commits/2dee9a4118a921093feda190a04f90986567b26d,2dee9a4118a921093feda190a04f90986567b26d,"Merge pull request #4945 from GitHubMota/debug_recover

Fix debug crash-and-recover help info."
antirez,2018-05-31 15:31:24,https://api.github.com/repos/antirez/redis/git/commits/5bf08449f9bb63611f7889e7e8d9e496be42bbb1,5bf08449f9bb63611f7889e7e8d9e496be42bbb1,"Merge pull request #4953 from soloestoy/fix-memory-overhead

MEMORY: fix the missing of monitor clients buffers"
antirez,2018-05-31 15:20:33,https://api.github.com/repos/antirez/redis/git/commits/f3b48978f2ccb5bf971d7a164e1c5fc887e2a64e,f3b48978f2ccb5bf971d7a164e1c5fc887e2a64e,"Merge pull request #4964 from remicollet/issue-uint64

include stdint.h for unit64_t definition"
antirez,2018-05-31 15:11:46,https://api.github.com/repos/antirez/redis/git/commits/2f963080c16b3645c4b5ae443c85ee9f9025789b,2f963080c16b3645c4b5ae443c85ee9f9025789b,Capitalize OBJECT HELP subcommands.
artix75,2018-05-28 15:23:42,https://api.github.com/repos/antirez/redis/git/commits/4bce88b11fdf68ab754cf9125ffaac02c6428ff5,4bce88b11fdf68ab754cf9125ffaac02c6428ff5,Cluster Manager: fixed infinite loop in rebalance (Issue #4941).
remicollet,2018-05-30 13:33:06,https://api.github.com/repos/antirez/redis/git/commits/9561fec496bc7e753a12d919a72d49cf56f1fa4b,9561fec496bc7e753a12d919a72d49cf56f1fa4b,include stdint.h for unit64_t definition
antirez,2018-05-29 10:41:07,https://api.github.com/repos/antirez/redis/git/commits/3d5e2c62e2690cf4a4954ab846bc119c56cad66d,3d5e2c62e2690cf4a4954ab846bc119c56cad66d,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-05-29 10:37:39,https://api.github.com/repos/antirez/redis/git/commits/49147f36e942b3367a3d1c3f7f83582fcbc06006,49147f36e942b3367a3d1c3f7f83582fcbc06006,"Don't expire keys while loading RDB from AOF preamble.

The AOF tail of a combined RDB+AOF is based on the premise of applying
the AOF commands to the exact state that there was in the server while
the RDB was persisted. By expiring keys while loading the RDB file, we
change the state, so applying the AOF tail later may change the state.

Test case:

* Time1: SET a 10
* Time2: EXPIREAT a $time5
* Time3: INCR a
* Time4: PERSIT A. Start bgrewiteaof with RDB preamble. The value of a is 11 without expire time.
* Time5: Restart redis from the RDB+AOF: consistency violation.

Thanks to @soloestoy for providing the patch.
Thanks to @trevor211 for the original issue report and the initial fix.

Check issue #4950 for more info."
trevor211,2018-05-26 01:43:25,https://api.github.com/repos/antirez/redis/git/commits/2a887bd53f992b940c7c9838a5dbdc2de1e3720a,2a887bd53f992b940c7c9838a5dbdc2de1e3720a,"Fix rdb save by allowing dumping of expire keys, so that when
we add a new slave, and do a failover, eighter by manual or
not, other local slaves will delete the expired keys properly."
soloestoy,2018-05-27 08:34:58,https://api.github.com/repos/antirez/redis/git/commits/ce2e0c02fc67658e3e891ff4f732a17db3adfb96,ce2e0c02fc67658e3e891ff4f732a17db3adfb96,MEMORY: fix the missing of monitor clients buffers
antirez,2018-05-25 15:25:19,https://api.github.com/repos/antirez/redis/git/commits/6536ce27a4b63ab44fbd209422b2ef7f9160721d,6536ce27a4b63ab44fbd209422b2ef7f9160721d,Streams: fix comments referring to old ID format.
antirez,2018-05-25 15:00:46,https://api.github.com/repos/antirez/redis/git/commits/f8fd6639e79f9fbd13b87a101135d4f141bfde68,f8fd6639e79f9fbd13b87a101135d4f141bfde68,"Merge pull request #4948 from soloestoy/avoid-warning-stream

avoid warning in t_stream.c"
antirez,2018-05-25 14:57:08,https://api.github.com/repos/antirez/redis/git/commits/2bd36616bafcafa7137a7dbcb5d3539a6873fb2e,2bd36616bafcafa7137a7dbcb5d3539a6873fb2e,Streams: fix test ID format.
soloestoy,2018-05-25 14:49:49,https://api.github.com/repos/antirez/redis/git/commits/c2d7e6cea7c9f36ecf25399fd2ba7c950a101bda,c2d7e6cea7c9f36ecf25399fd2ba7c950a101bda,avoid warning in t_stream.c
antirez,2018-05-25 14:33:22,https://api.github.com/repos/antirez/redis/git/commits/fb6ebaa598f95629f91f41594e626012adaf0269,fb6ebaa598f95629f91f41594e626012adaf0269,"Backport hiredis issue 525 fix to compile on FreeBSD.

Close #4947."
antirez,2018-05-25 14:29:37,https://api.github.com/repos/antirez/redis/git/commits/fb9c1c3dbddf7c37f77f310a5bc57c6b5173b422,fb9c1c3dbddf7c37f77f310a5bc57c6b5173b422,"Simplify XADD ID syntax error code path,."
antirez,2018-05-25 14:27:21,https://api.github.com/repos/antirez/redis/git/commits/a60f553b686590a0372d6d18c69f4d0c099615a0,a60f553b686590a0372d6d18c69f4d0c099615a0,"Merge pull request #4832 from 0xtonyxia/fix-xadd-ID-parse

 Bugfix: xadd command ID parse"
antirez,2018-05-25 14:19:14,https://api.github.com/repos/antirez/redis/git/commits/95fa564add1b66db2d73a7c4f966a70498e974ab,95fa564add1b66db2d73a7c4f966a70498e974ab,Avoid warning by explicitly initializing var to NULL.
antirez,2018-05-25 14:15:59,https://api.github.com/repos/antirez/redis/git/commits/b2b4e186a24699f930deca314ce223de5e72a8a1,b2b4e186a24699f930deca314ce223de5e72a8a1,Explicitly cast void pointers to char pointers for printf style logging.
antirez,2018-05-25 14:12:19,https://api.github.com/repos/antirez/redis/git/commits/42ec8e8cb22301120ac5fdab0ccbf8897e145493,42ec8e8cb22301120ac5fdab0ccbf8897e145493,"Merge pull request #4946 from soloestoy/linux-make-lrt

append -lrt to FINAL_LIBS for linux"
soloestoy,2018-05-25 12:16:57,https://api.github.com/repos/antirez/redis/git/commits/2711f053f2b2511fd322ff1ac065f0367a182a40,2711f053f2b2511fd322ff1ac065f0367a182a40,append -lrt to FINAL_LIBS for linux
antirez,2018-05-25 11:36:51,https://api.github.com/repos/antirez/redis/git/commits/e4f5c0493008a007ad65bd17b1746f24f1106685,e4f5c0493008a007ad65bd17b1746f24f1106685,Don't append libjemalloc.a otherwise it will be after -ldl.
GitHubMota,2018-05-25 08:49:23,https://api.github.com/repos/antirez/redis/git/commits/af3471a5dc1bf26e7bc2d1578f9bf82e9c7168a2,af3471a5dc1bf26e7bc2d1578f9bf82e9c7168a2,Fix debug crash-and-recover help info.
antirez,2018-05-24 16:21:23,https://api.github.com/repos/antirez/redis/git/commits/694145bd7479a0890274500005f7cd31d03e9fd2,694145bd7479a0890274500005f7cd31d03e9fd2,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-05-24 16:21:13,https://api.github.com/repos/antirez/redis/git/commits/4e729fcdafaf6cba4a5d7067e9ab531c1e2da39a,4e729fcdafaf6cba4a5d7067e9ab531c1e2da39a,Generate configure for Jemalloc.
antirez,2018-05-24 16:04:17,https://api.github.com/repos/antirez/redis/git/commits/98d5d3f118eebb1d1e86625ab0ff808d019456bb,98d5d3f118eebb1d1e86625ab0ff808d019456bb,"Make active defragmentation tests optional.

They failed when active defrag could not be activated because the
Jemalloc version does not include the additional APIs."
antirez,2018-05-24 15:50:12,https://api.github.com/repos/antirez/redis/git/commits/fef42d098508e9ee16a2059252a39b0ce7a87adf,fef42d098508e9ee16a2059252a39b0ce7a87adf,Add --with-version in Jemalloc config script.
antirez,2018-05-24 15:49:36,https://api.github.com/repos/antirez/redis/git/commits/8d76c6a878ba6fdfe59d0eb0a9ba605ebdd0f2bf,8d76c6a878ba6fdfe59d0eb0a9ba605ebdd0f2bf,Specify that Jemalloc configure requires version.
antirez,2018-05-24 15:17:37,https://api.github.com/repos/antirez/redis/git/commits/08e1c8e820031751bd58736cc334dda1bc55cb5c,08e1c8e820031751bd58736cc334dda1bc55cb5c,Jemalloc upgraded to version 5.0.1.
antirez,2018-05-24 15:16:12,https://api.github.com/repos/antirez/redis/git/commits/8f4e2075a703acce08056321f49defd44dae19ed,8f4e2075a703acce08056321f49defd44dae19ed,Update documentation about how to upgrade Jemalloc.
antirez,2018-05-24 14:16:12,https://api.github.com/repos/antirez/redis/git/commits/b23a501135e573e285522d7f74982c3fb3fde2ab,b23a501135e573e285522d7f74982c3fb3fde2ab,"Merge pull request #4099 from JunHe77/aarch64_stack_cflag

Fixed stack trace generation on aarch64"
antirez,2018-05-24 14:15:21,https://api.github.com/repos/antirez/redis/git/commits/18b7f71130ca001f47d605f8e03a99cf1785d54f,18b7f71130ca001f47d605f8e03a99cf1785d54f,"Merge pull request #4932 from 0xtonyxia/fix-redis-cli-set-prefer-memory-leak

Fix redis-cli memory leak when sending set :preference command."
antirez,2018-05-24 14:14:42,https://api.github.com/repos/antirez/redis/git/commits/ef7ccad180decf89f8e378b86813af2984804d27,ef7ccad180decf89f8e378b86813af2984804d27,"Merge pull request #4922 from 0xtonyxia/enhance-cli-security

Enhance security for redis-cli"
antirez,2018-05-24 14:07:19,https://api.github.com/repos/antirez/redis/git/commits/8a200b04c3bf71888815d35ea0a84904bced8a91,8a200b04c3bf71888815d35ea0a84904bced8a91,"Merge pull request #4831 from 0xtonyxia/fix-xadd-arity-check

Bugfix: xadd comand <field,value> arity check"
antirez,2018-05-23 15:14:59,https://api.github.com/repos/antirez/redis/git/commits/de4b6cb27b4e535cfbabaddf7bb9cd6d19534cfe,de4b6cb27b4e535cfbabaddf7bb9cd6d19534cfe,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-05-23 15:11:59,https://api.github.com/repos/antirez/redis/git/commits/8631e6477904f3d8f87662fd93a1ba294615654a,8631e6477904f3d8f87662fd93a1ba294615654a,"Sentinel: fix delay in detecting ODOWN.

See issue #2819 for details. The gist is that when we want to send INFO
because we are over the time, we used to send only INFO commands, no
longer sending PING commands. However if a master fails exactly when we
are about to send an INFO command, the PING times will result zero
because the PONG reply was already received, and we'll fail to send more
PINGs, since we try only to send INFO commands: the failure detector
will delay until the connection is closed and re-opened for ""long
timeout"".

This commit changes the logic so that we can send the three kind of
messages regardless of the fact we sent another one already in the same
code path. It could happen that we go over the message limit for the
link by a few messages, but this is not significant. However now we'll
not introduce delays in sending commands just because there was
something else to send at the same time."
antirez,2018-05-23 15:11:00,https://api.github.com/repos/antirez/redis/git/commits/1ab3c823750c32b756a55f5b1b3b01ddb70c75c3,1ab3c823750c32b756a55f5b1b3b01ddb70c75c3,"Merge pull request #4908 from soloestoy/aof-rdb-preamble-compatible-checksum-no

AOF & RDB: be compatible with rdbchecksum no"
antirez,2018-05-22 13:52:21,https://api.github.com/repos/antirez/redis/git/commits/f1321349d372115a8c87ee89c2af86045bbe7441,f1321349d372115a8c87ee89c2af86045bbe7441,"Merge pull request #4935 from soloestoy/bugfix-zpop

bugfix for ZPOP: fix the wrong keyc, should be 1"
soloestoy,2018-05-22 13:31:22,https://api.github.com/repos/antirez/redis/git/commits/4e7a160b9bde8d192d874116504ea6720791e801,4e7a160b9bde8d192d874116504ea6720791e801,"ZPOP: fix the wrong keyc, should be 1"
0xtonyxia,2018-05-21 04:19:37,https://api.github.com/repos/antirez/redis/git/commits/46e241ac8e5918c2d774752346bc9b6fd4b0adeb,46e241ac8e5918c2d774752346bc9b6fd4b0adeb,Fix redis-cli memory leak when sending set preference command.
0xtonyxia,2018-05-21 04:06:48,https://api.github.com/repos/antirez/redis/git/commits/95b988b6c69083fff3e00271653c2239d482ea0d,95b988b6c69083fff3e00271653c2239d482ea0d,"Check if the repeat value is positive in while loop of cliSendCommand().

In case that the incoming repeat parameter is negative and causes a
deadless loop."
0xtonyxia,2018-05-21 04:04:53,https://api.github.com/repos/antirez/redis/git/commits/cc7ffdfdf204fc7ab815ee602769de7f9323c353,cc7ffdfdf204fc7ab815ee602769de7f9323c353,"Change the type of repeat argument to long for function cliSendCommand.

To be in consistent with the original definition."
0xtonyxia,2018-05-19 14:50:40,https://api.github.com/repos/antirez/redis/git/commits/b2762f1ff2db7d8fb84a90aa701098334db52ce0,b2762f1ff2db7d8fb84a90aa701098334db52ce0,"Fix negtive repeat command value issue.

If command like ""-1 set a b"" is sent with redis-cli, it will cause a deadless loop. So some repeat value checking logic is added to avoid this."
0xtonyxia,2018-05-18 03:40:05,https://api.github.com/repos/antirez/redis/git/commits/c2e2314640159078416400b9c9b155879c6a1386,c2e2314640159078416400b9c9b155879c6a1386,"Detect and stop saving history for auth command with repeat option.

Put the repeat option checking code a little forward to avoid repeat logic."
0xtonyxia,2018-05-18 03:37:31,https://api.github.com/repos/antirez/redis/git/commits/ef931ef93e909b4f504e8c6fbed350ed70c1c67c,ef931ef93e909b4f504e8c6fbed350ed70c1c67c,Change the warning message a little bit to avoid trademark issuses.
antirez,2018-05-17 14:53:14,https://api.github.com/repos/antirez/redis/git/commits/3c968ff0300c7e1e442889315d405e00a37d86bc,3c968ff0300c7e1e442889315d405e00a37d86bc,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-05-17 14:52:31,https://api.github.com/repos/antirez/redis/git/commits/3c43e984db6289cf5da4bb4e1dc674dff353712f,3c43e984db6289cf5da4bb4e1dc674dff353712f,Merge remote-tracking branch 'artix/trib2cli' into unstable
antirez,2018-05-17 10:24:40,https://api.github.com/repos/antirez/redis/git/commits/13779c11f8f7ce144a09b8a57f7b8020035ea869,13779c11f8f7ce144a09b8a57f7b8020035ea869,"Merge pull request #4927 from oranagra/defrag_32bit_fix

Active defrag fixes for 32bit builds"
oranagra,2018-05-17 06:52:00,https://api.github.com/repos/antirez/redis/git/commits/ad133e10238eed678694160dc0eecd70c30d0232,ad133e10238eed678694160dc0eecd70c30d0232,"Active defrag fixes for 32bit builds

problems fixed:
* failing to read fragmentation information from jemalloc
* overflow in jemalloc fragmentation hint to the defragger
* test suite not triggering eviction after population"
artix75,2018-05-16 16:04:13,https://api.github.com/repos/antirez/redis/git/commits/e47c751c7414c2747c7c2d934656978ecddbe9bf,e47c751c7414c2747c7c2d934656978ecddbe9bf,Removed TODO in redis-cli
artix75,2018-05-16 15:49:18,https://api.github.com/repos/antirez/redis/git/commits/1e4fb1b33a92e85c189510a46acdf37937a325cd,1e4fb1b33a92e85c189510a46acdf37937a325cd,Cluster Manager: fixed unprinted reply error
0xtonyxia,2018-05-16 08:18:00,https://api.github.com/repos/antirez/redis/git/commits/b263c7c465f83071d90991a036f6c9772890604b,b263c7c465f83071d90991a036f6c9772890604b,Stop saving auth command in redis-cli history.
0xtonyxia,2018-05-16 08:15:12,https://api.github.com/repos/antirez/redis/git/commits/c082221aefbb2a472c7193dbdbb90900256ce1a2,c082221aefbb2a472c7193dbdbb90900256ce1a2,Add warning message when using password on command line
artix75,2018-05-15 16:41:46,https://api.github.com/repos/antirez/redis/git/commits/2f9c032a136cd564d915d4db65a4d95f101a8940,2f9c032a136cd564d915d4db65a4d95f101a8940,Cluster Manager: print flags as strings.
antirez,2018-05-15 15:43:04,https://api.github.com/repos/antirez/redis/git/commits/e344aa4a6dbffae551a8c3c344c0e9237fff6107,e344aa4a6dbffae551a8c3c344c0e9237fff6107,"Test: fix blocking lists/zsets replication test.

By verifying that it was able to find a regression, and fixing it
accordingly."
antirez,2018-05-15 15:33:21,https://api.github.com/repos/antirez/redis/git/commits/8327ccef0e2775b243a5d22dfcf1e45c08ddf47e,8327ccef0e2775b243a5d22dfcf1e45c08ddf47e,Test: replication test blocking lists/zsets ops.
antirez,2018-05-15 14:03:56,https://api.github.com/repos/antirez/redis/git/commits/25f017e563c0e1ef9837604a96e4655b021bad32,25f017e563c0e1ef9837604a96e4655b021bad32,ZPOP: fix replication of blocking ZPOP.
artix75,2018-05-11 16:28:10,https://api.github.com/repos/antirez/redis/git/commits/3c039996b533c48b5de8e54e90441b2eda632393,3c039996b533c48b5de8e54e90441b2eda632393,"- Fixed mistyped redis command (clusterManagerGetNodeWithMostKeysInSlot)
- Cluster node structure is now updated after ADDSLOTS"
antirez,2018-05-11 16:07:03,https://api.github.com/repos/antirez/redis/git/commits/e87c1f1e6cb675209e4a9670af910d95397d18ab,e87c1f1e6cb675209e4a9670af910d95397d18ab,"ZPOP: fix the tests according to new non-blocking ""count"" argument."
antirez,2018-05-11 16:00:32,https://api.github.com/repos/antirez/redis/git/commits/56bbab238a0fb0c14e1ca0cdb0ebadc8fb8dc945,56bbab238a0fb0c14e1ca0cdb0ebadc8fb8dc945,"ZPOP: change sync ZPOP to have a count argument instead of N keys.

Usually blocking operations make a lot of sense with multiple keys so
that we can listen to multiple queues (or whatever the app models) with
a single connection. However in the synchronous case it is more useful
to be able to ask for N elements. This is a change that I also wanted to
perform soon or later in the blocking list variant, but here it is more
natural since there is no reply type difference."
antirez,2018-05-11 15:31:46,https://api.github.com/repos/antirez/redis/git/commits/6efb6c1e069b414305a92cf57cee31d13a84a44a,6efb6c1e069b414305a92cf57cee31d13a84a44a,"ZPOP: renaming to have explicit MIN/MAX score idea.

This commit also adds a top comment about a subtle behavior of mixing
blocking operations of different types in the same key."
antirez,2018-05-11 08:40:13,https://api.github.com/repos/antirez/redis/git/commits/6b026b70a8783f5cf58828401e7cecfa278d55d9,6b026b70a8783f5cf58828401e7cecfa278d55d9,Merge branch 'zpop' of https://github.com/itamarhaber/redis into zpop
antirez,2018-05-09 10:06:37,https://api.github.com/repos/antirez/redis/git/commits/b85aae78dfad8cf49b1056ee598c1846252a2ef3,b85aae78dfad8cf49b1056ee598c1846252a2ef3,Fix rdb.c dictionary iterator release in 2 more places.
antirez,2018-05-09 09:03:27,https://api.github.com/repos/antirez/redis/git/commits/cd87b3c71f79062d9e95abada186e1cac03f5cc6,cd87b3c71f79062d9e95abada186e1cac03f5cc6,"Fix rdb.c dictionary iterator release.

Some times it was not released on error, sometimes it was released two
times because the error path expected the ""di"" var to be NULL if the
iterator was already released. Thanks to @oranagra for pinging me about
potential problems of this kind inside rdb.c."
antirez,2018-05-08 15:27:18,https://api.github.com/repos/antirez/redis/git/commits/aaef5f00ccd0b2f430ddc8093a870e4134d49017,aaef5f00ccd0b2f430ddc8093a870e4134d49017,"Merge pull request #4594 from smallstool/bugfix-freeMemoryIfneeded-int-overflow

fix int overflow problem in freeMemoryIfNeeded"
soloestoy,2018-05-08 11:22:13,https://api.github.com/repos/antirez/redis/git/commits/edb92db53323ca3952a5509b3950f9d89eddad30,edb92db53323ca3952a5509b3950f9d89eddad30,AOF & RDB: be compatible with rdbchecksum no
artix75,2018-05-07 15:31:34,https://api.github.com/repos/antirez/redis/git/commits/3312de067cfe78a63401059defa1c0c4a8274b10,3312de067cfe78a63401059defa1c0c4a8274b10,Cluster Manager: --cluster options can now be placed everywhere
artix75,2018-05-07 13:56:12,https://api.github.com/repos/antirez/redis/git/commits/35b3a8e1ee145d40a51c586ca937bc86a4230f41,35b3a8e1ee145d40a51c586ca937bc86a4230f41,"- Updated create-cluster with redis-cli
- Updated README"
KFilipek,2018-05-06 18:18:48,https://api.github.com/repos/antirez/redis/git/commits/fd9177dd33de2bc8fddf1d304b7b5810d98c2a1d,fd9177dd33de2bc8fddf1d304b7b5810d98c2a1d,Typo in preprocessor condition
itamarhaber,2018-04-30 16:33:01,https://api.github.com/repos/antirez/redis/git/commits/49890c8ee9776f13aaabf7fe76d796a89de6bf1a,49890c8ee9776f13aaabf7fe76d796a89de6bf1a,"Adds memory information about the script's cache to INFO

Implementation notes: as INFO is ""already broken"", I didn't want to break it further. Instead of computing the server.lua_script dict size on every call, I'm keeping a running sum of the body's length and dict overheads.

This implementation is naive as it **does not** take into consideration dict rehashing, but that inaccuracy pays off in speed ;)

Demo time:

```bash
$ redis-cli info memory | grep ""script""
used_memory_scripts:96
used_memory_scripts_human:96B
number_of_cached_scripts:0
$ redis-cli eval """" 0 ; redis-cli info memory | grep ""script""
(nil)
used_memory_scripts:120
used_memory_scripts_human:120B
number_of_cached_scripts:1
$ redis-cli script flush ; redis-cli info memory | grep ""script""
OK
used_memory_scripts:96
used_memory_scripts_human:96B
number_of_cached_scripts:0
$ redis-cli eval ""return('Hello, Script Cache :)')"" 0 ; redis-cli info memory | grep ""script""
""Hello, Script Cache :)""
used_memory_scripts:152
used_memory_scripts_human:152B
number_of_cached_scripts:1
$ redis-cli eval ""return redis.sha1hex(\""return('Hello, Script Cache :)')\"")"" 0 ; redis-cli info memory | grep ""script""
""1be72729d43da5114929c1260a749073732dc822""
used_memory_scripts:232
used_memory_scripts_human:232B
number_of_cached_scripts:2
✔ 19:03:54 redis [lua_scripts-in-info-memory L ✚…⚑] $ redis-cli evalsha 1be72729d43da5114929c1260a749073732dc822 0
""Hello, Script Cache :)""
```"
itamarhaber,2018-04-29 23:10:42,https://api.github.com/repos/antirez/redis/git/commits/438125b47c3b2b94e67c80bf64a7d8b6207b236a,438125b47c3b2b94e67c80bf64a7d8b6207b236a,"Implements [B]Z[REV]POP and the respective unit tests

An implementation of the
[Ze POP Redis Module](https://github.com/itamarhaber/zpop) as core
Redis commands.

Fixes #1861."
artix75,2018-04-23 14:29:29,https://api.github.com/repos/antirez/redis/git/commits/26b3a0eb21ac6b4beb96825011fa22427c288e8c,26b3a0eb21ac6b4beb96825011fa22427c288e8c,Merge branch 'trib2cli' of github.com:artix75/redis into trib2cli
artix75,2018-04-20 17:29:42,https://api.github.com/repos/antirez/redis/git/commits/af4584d608beb12c8f9fb33d209b507c4d8ea944,af4584d608beb12c8f9fb33d209b507c4d8ea944,Cluster tests now using redis-cli instead of redis-trib
artix75,2018-04-20 17:25:08,https://api.github.com/repos/antirez/redis/git/commits/be94e890319d7abaea462922d57222df0ca345f0,be94e890319d7abaea462922d57222df0ca345f0,"Cluster Manager: fixed expected slots calculation (rebalance)
Cluster Manager: fixed argument parsing after --cluster-weight"
artix75,2018-04-20 16:08:30,https://api.github.com/repos/antirez/redis/git/commits/2f31545beb939f23b89acfa2a188c1393cdbbd2a,2f31545beb939f23b89acfa2a188c1393cdbbd2a,Cluster Manager: fixed bug when parsing CLUSTER NODES reply (clusterManagerNodeLoadInfo)
artix75,2018-04-19 16:52:01,https://api.github.com/repos/antirez/redis/git/commits/5bc2c98789905a75322f83648dd104b8458ac477,5bc2c98789905a75322f83648dd104b8458ac477,Cluster Manager: code improvements and more comments added.
artix75,2018-04-13 14:09:22,https://api.github.com/repos/antirez/redis/git/commits/5f358dae337c78ed14a5080d991e83d3b68588f6,5f358dae337c78ed14a5080d991e83d3b68588f6,Cluster Manager: set-timeout command
artix75,2018-04-11 16:22:44,https://api.github.com/repos/antirez/redis/git/commits/52f17f6f8ed828a211e468ef6a745a6c6cb846a9,52f17f6f8ed828a211e468ef6a745a6c6cb846a9,"- Cluster Manager: del-node command.
- Cluster Manager: fixed bug in clusterManagerNodeWithLeastReplicas"
artix75,2018-04-11 15:08:53,https://api.github.com/repos/antirez/redis/git/commits/aeaf6ee1c32686e2623ae0551a86edc202579b9a,aeaf6ee1c32686e2623ae0551a86edc202579b9a,Cluster Manager: add-node command.
artix75,2018-04-10 14:53:24,https://api.github.com/repos/antirez/redis/git/commits/efa51f161726d7992e6c2a90710faabf9312b2d1,efa51f161726d7992e6c2a90710faabf9312b2d1,Cluster Manager: added clusterManagerCheckCluster to import command
artix75,2018-04-10 14:25:25,https://api.github.com/repos/antirez/redis/git/commits/1f548359cba410f8423d8aba101c43bd9280e489,1f548359cba410f8423d8aba101c43bd9280e489,Cluster Manager: import command
artix75,2018-04-06 16:02:40,https://api.github.com/repos/antirez/redis/git/commits/3f8a4adb49c29fbc2778aded97089fc6fa770afc,3f8a4adb49c29fbc2778aded97089fc6fa770afc,Cluster Manager: fix command.
artix75,2018-03-23 15:46:43,https://api.github.com/repos/antirez/redis/git/commits/6d1a7cec230e5a892be3eeffeec83231a4079b9f,6d1a7cec230e5a892be3eeffeec83231a4079b9f,Cluster Manager: rebalance command
artix75,2018-03-06 11:06:04,https://api.github.com/repos/antirez/redis/git/commits/adebee8adc493f7f768aa23aaeb4bed2f51ae820,adebee8adc493f7f768aa23aaeb4bed2f51ae820,clusterManagerAddSlots: changed the way ADDSLOTS command is built
artix75,2018-03-02 16:06:50,https://api.github.com/repos/antirez/redis/git/commits/a4a1c7bb52dda29a4caaed07ba4222aa7f078f29,a4a1c7bb52dda29a4caaed07ba4222aa7f078f29,ClusterManager: fixed --cluster-from 'all' parsing
artix75,2018-02-28 14:21:08,https://api.github.com/repos/antirez/redis/git/commits/5b3d73b3d71fa8805af7677825cd5445f6a217ea,5b3d73b3d71fa8805af7677825cd5445f6a217ea,Cluster Manager: fixed some memory error
artix75,2018-02-28 10:49:10,https://api.github.com/repos/antirez/redis/git/commits/220375b4240b46dbcc9eb2599a090cd0e6ffaecd,220375b4240b46dbcc9eb2599a090cd0e6ffaecd,Fixed memory write error in clusterManagerGetConfigSignature
artix75,2018-02-28 09:44:11,https://api.github.com/repos/antirez/redis/git/commits/99da9c9508afcde3e08c952122e6ac8eb01b17ce,99da9c9508afcde3e08c952122e6ac8eb01b17ce,"Cluster Manager: reshard command, fixed slots
parsing bug and other minor bugs."
artix75,2018-02-22 17:32:39,https://api.github.com/repos/antirez/redis/git/commits/7d609ff952dbbcaa3574287a16349e56cbae03bb,7d609ff952dbbcaa3574287a16349e56cbae03bb,"Cluster Manager:
- Almost all Cluster Manager related code moved to
  the same section.
- Many macroes converted to functions
- Added various comments
- Little code restyling"
artix75,2018-02-20 11:01:13,https://api.github.com/repos/antirez/redis/git/commits/4e0c2f9c3c5c800df2c1ed61ed862983b15a80bf,4e0c2f9c3c5c800df2c1ed61ed862983b15a80bf,"- Fixed bug in clusterManagerGetAntiAffinityScore
- Code improvements"
artix75,2018-02-14 18:29:28,https://api.github.com/repos/antirez/redis/git/commits/18910013cd852ea6246a766851b52938cff217e2,18910013cd852ea6246a766851b52938cff217e2,Cluster Manager: colorized output
artix75,2018-02-14 16:54:46,https://api.github.com/repos/antirez/redis/git/commits/307d995f75d9e0d8dab12d2dd2aca0499481257d,307d995f75d9e0d8dab12d2dd2aca0499481257d,Cluster Manager: improved cleanup/error handling in various functions
artix75,2018-02-13 11:00:06,https://api.github.com/repos/antirez/redis/git/commits/2d677e2bf354342efefadce9b9536ccc1ab3005b,2d677e2bf354342efefadce9b9536ccc1ab3005b,Cluster Manager: 'call' command.
artix75,2018-02-09 12:02:37,https://api.github.com/repos/antirez/redis/git/commits/1ad1f00163ecd4c794ce94479de1dc3084187b6e,1ad1f00163ecd4c794ce94479de1dc3084187b6e,Cluster Manager: CLUSTER_MANAGER_NODE_CONNECT macro
artix75,2018-02-07 11:02:56,https://api.github.com/repos/antirez/redis/git/commits/2f48d62423e7e19cb872472b1c229e47f1529cc7,2f48d62423e7e19cb872472b1c229e47f1529cc7,ClusterManager: added replicas count to clusterManagerNode
artix75,2018-02-07 10:29:25,https://api.github.com/repos/antirez/redis/git/commits/c002b95d89b917641ddbdb502d29bafa919a2212,c002b95d89b917641ddbdb502d29bafa919a2212,Cluster Manager: cluster is considered consistent if only one node has been found
artix75,2018-02-01 19:09:30,https://api.github.com/repos/antirez/redis/git/commits/4cc8de1a371696ea16485d18c082b4c6481bf5b5,4cc8de1a371696ea16485d18c082b4c6481bf5b5,Cluster Manager: reply error catch for MEET command
artix75,2018-02-01 16:43:36,https://api.github.com/repos/antirez/redis/git/commits/65d37960e78512e9d530ee8f1030f091ce784557,65d37960e78512e9d530ee8f1030f091ce784557,Cluster Manager: slots coverage check.
artix75,2018-01-31 18:25:02,https://api.github.com/repos/antirez/redis/git/commits/b3e0ca3412edbed27f07e2cd5f62b1506c013029,b3e0ca3412edbed27f07e2cd5f62b1506c013029,"- Cluster Manager: fixed various memory leaks
- Cluster Manager: fixed flags assignment in
  clusterManagerNodeLoadInfo"
artix75,2018-01-31 16:57:16,https://api.github.com/repos/antirez/redis/git/commits/8c7ad80f9f9c916620873bf8e52f18b51ce9208c,8c7ad80f9f9c916620873bf8e52f18b51ce9208c,Added check for open slots (clusterManagerCheckCluster)
artix75,2018-01-31 15:26:21,https://api.github.com/repos/antirez/redis/git/commits/486c7af7b8c75d76df4cf9ea2571d4e5a6e000c3,486c7af7b8c75d76df4cf9ea2571d4e5a6e000c3,"Cluster Manager: 'create', 'info' and 'check' commands"
artix75,2018-01-12 10:06:24,https://api.github.com/repos/antirez/redis/git/commits/ad911a338a00286f8a5cec445bfa1f5ab05cd527,ad911a338a00286f8a5cec445bfa1f5ab05cd527,Cluster Manager mode
soloestoy,2018-04-22 14:30:44,https://api.github.com/repos/antirez/redis/git/commits/24036b4d32d857066a2ccfc6cef2e8a751634ad5,24036b4d32d857066a2ccfc6cef2e8a751634ad5,RDB: expand dict if needed when rdb load object
artix75,2018-04-20 17:29:42,https://api.github.com/repos/antirez/redis/git/commits/04eac76bae8d5fb4699e14ebccb91f0d45c41e2d,04eac76bae8d5fb4699e14ebccb91f0d45c41e2d,Cluster tests now using redis-cli instead of redis-trib
artix75,2018-04-20 17:25:08,https://api.github.com/repos/antirez/redis/git/commits/57d895104c48ef43d8bb7bac7a4e859c5a90f192,57d895104c48ef43d8bb7bac7a4e859c5a90f192,"Cluster Manager: fixed expected slots calculation (rebalance)
Cluster Manager: fixed argument parsing after --cluster-weight"
artix75,2018-04-20 16:08:30,https://api.github.com/repos/antirez/redis/git/commits/cc29fd3e28388823a6befc7ddd96d0e2d67161bb,cc29fd3e28388823a6befc7ddd96d0e2d67161bb,Cluster Manager: fixed bug when parsing CLUSTER NODES reply (clusterManagerNodeLoadInfo)
artix75,2018-04-19 16:52:01,https://api.github.com/repos/antirez/redis/git/commits/3fce4301ec54e173c811a8e08c320d9ef86c4de2,3fce4301ec54e173c811a8e08c320d9ef86c4de2,Cluster Manager: code improvements and more comments added.
antirez,2018-04-19 14:25:29,https://api.github.com/repos/antirez/redis/git/commits/e6b0e8d9ec4561a07864358af8d2d4e81ac413fc,e6b0e8d9ec4561a07864358af8d2d4e81ac413fc,Streams: XTRIM command added.
antirez,2018-04-19 14:11:43,https://api.github.com/repos/antirez/redis/git/commits/19ae809458b545bf320122c83a4554e3e434aa0f,19ae809458b545bf320122c83a4554e3e434aa0f,"Streams: XADD, handle signaling of write in different ways."
antirez,2018-04-18 11:12:09,https://api.github.com/repos/antirez/redis/git/commits/aba76320d59a1ea5507336eb8636aa2ab449a3e0,aba76320d59a1ea5507336eb8636aa2ab449a3e0,Streams: XDEL command.
guybe7,2018-04-18 10:01:53,https://api.github.com/repos/antirez/redis/git/commits/8c8e85df874c852b5f125209e9d662a70e310f66,8c8e85df874c852b5f125209e9d662a70e310f66,Use memtoll() in 'CONFIG SET client-output-buffer-limit'
antirez,2018-04-17 15:55:56,https://api.github.com/repos/antirez/redis/git/commits/9c149bf1f1358a55abd1879265852994dc997bb7,9c149bf1f1358a55abd1879265852994dc997bb7,"Streams: higher level ""delete by ID"" API for streams."
antirez,2018-04-17 15:18:00,https://api.github.com/repos/antirez/redis/git/commits/24ac2b4c74a454fabe1b2aa1134e9551a1e32625,24ac2b4c74a454fabe1b2aa1134e9551a1e32625,Streams: iterator entry deletion abilities.
antirez,2018-04-13 17:51:46,https://api.github.com/repos/antirez/redis/git/commits/7980d87c3c72740f4609fdcaae088221f8f8eb59,7980d87c3c72740f4609fdcaae088221f8f8eb59,"Merge pull request #4842 from soloestoy/fix-timer-api-wrong-insert

Modules Timer API: fix wrong raxInsert() usage"
soloestoy,2018-04-13 17:20:02,https://api.github.com/repos/antirez/redis/git/commits/775adf544c6ba27c099e16eb657607c9293fafa8,775adf544c6ba27c099e16eb657607c9293fafa8,Modules Timer API: fix wrong raxInsert() usage
artix75,2018-04-13 14:09:22,https://api.github.com/repos/antirez/redis/git/commits/07bd371087242765c47142fb379e72bd88475f3a,07bd371087242765c47142fb379e72bd88475f3a,Cluster Manager: set-timeout command
antirez,2018-04-13 11:48:11,https://api.github.com/repos/antirez/redis/git/commits/e07af6a2b782de809c1908a236332e48af5867b3,e07af6a2b782de809c1908a236332e48af5867b3,"Modules API: Add call to get the blocked client handle from the context.

This is useful in the reply and timeout callback, if the module wants to
do some cleanup of the blocked client handle that may be stored around
in the module-private data structures."
antirez,2018-04-13 11:42:49,https://api.github.com/repos/antirez/redis/git/commits/da0e192277b3cb9981f02a2071caa7b711ed5c89,da0e192277b3cb9981f02a2071caa7b711ed5c89,Modules API: moduleGetReplyClient() refactoring.
antirez,2018-04-12 11:21:48,https://api.github.com/repos/antirez/redis/git/commits/404160a27198b9bfbac2086be20c4ca130b47eac,404160a27198b9bfbac2086be20c4ca130b47eac,Modules API: blocked client disconnection callback.
antirez,2018-04-12 11:00:18,https://api.github.com/repos/antirez/redis/git/commits/005c932f22a5e3027db2c31865e394d388fcf0a0,005c932f22a5e3027db2c31865e394d388fcf0a0,Modules API: fix timer example.
artix75,2018-04-11 16:22:44,https://api.github.com/repos/antirez/redis/git/commits/551f8f05911918466de45f275f6c2f387a73893f,551f8f05911918466de45f275f6c2f387a73893f,"- Cluster Manager: del-node command.
- Cluster Manager: fixed bug in clusterManagerNodeWithLeastReplicas"
artix75,2018-04-11 15:08:53,https://api.github.com/repos/antirez/redis/git/commits/615aefe6ba3e8a1878ce6ff5dd5c4d6909515431,615aefe6ba3e8a1878ce6ff5dd5c4d6909515431,Cluster Manager: add-node command.
antirez,2018-04-11 14:25:54,https://api.github.com/repos/antirez/redis/git/commits/4e536240527103915c08b9223e73d4f361aa30cf,4e536240527103915c08b9223e73d4f361aa30cf,Modules API: fix OOM_WARNING flag implementation.
antirez,2018-04-11 14:22:52,https://api.github.com/repos/antirez/redis/git/commits/0afac6939a50347f1ae328ddf2715461c9c66eb1,0afac6939a50347f1ae328ddf2715461c9c66eb1,"Modules API: OOM_WARNING flags.

In some modules it may be useful to have an idea about being near to
OOM. Anyway additionally an explicit call to get the fill ratio will be
added in the future."
antirez,2018-04-11 10:48:26,https://api.github.com/repos/antirez/redis/git/commits/de7de53e641c93a634d6ce97d78685a1783d3a4b,de7de53e641c93a634d6ce97d78685a1783d3a4b,getMaxmemoryState() fixed and improved.
artix75,2018-04-10 14:53:24,https://api.github.com/repos/antirez/redis/git/commits/81ab5a3b280886ed52289de2ac0984cc62ce5538,81ab5a3b280886ed52289de2ac0984cc62ce5538,Cluster Manager: added clusterManagerCheckCluster to import command
artix75,2018-04-10 14:25:25,https://api.github.com/repos/antirez/redis/git/commits/eaaa3202e6e8e5cded996ee057fd16fe1fd9baf0,eaaa3202e6e8e5cded996ee057fd16fe1fd9baf0,Cluster Manager: import command
0xtonyxia,2018-04-10 09:11:10,https://api.github.com/repos/antirez/redis/git/commits/b6b00f35ca08f586ea80e104dde2b343b9a843cf,b6b00f35ca08f586ea80e104dde2b343b9a843cf,Return more accurate message when specified ID is invalid
0xtonyxia,2018-04-10 09:05:48,https://api.github.com/repos/antirez/redis/git/commits/3c20b3fc2464cec5b79e4e23037794be5826f536,3c20b3fc2464cec5b79e4e23037794be5826f536,"Bugfix: xadd command ID parse

strictly check the string to be converted,
strtoull() in libc may not set errno to EINVAL when the string contains
invalid digits."
0xtonyxia,2018-04-10 08:36:05,https://api.github.com/repos/antirez/redis/git/commits/07125b8d22d268b85281ce0c588d72caf7680cd4,07125b8d22d268b85281ce0c588d72caf7680cd4,"Bugfix: xadd comand <field,value> arity check

missing parenthesis causes wrong arithmetic priority."
antirez,2018-04-09 15:43:50,https://api.github.com/repos/antirez/redis/git/commits/f97efe0cac1653fbadf02679056cba3e5317aad2,f97efe0cac1653fbadf02679056cba3e5317aad2,"Modules: context flags now include OOM flag.

Plus freeMemoryIfNeeded() refactoring to improve legibility.
Please review this commit for sanity."
antirez,2018-04-09 15:20:36,https://api.github.com/repos/antirez/redis/git/commits/6888c1a10d085365ce32e9b09f9fd8d54672e1e7,6888c1a10d085365ce32e9b09f9fd8d54672e1e7,freeMemoryIfNeeded() lacked a top comment.
antirez,2018-04-09 15:16:55,https://api.github.com/repos/antirez/redis/git/commits/9a0dbbb594f74e27c9d8f550c494501b0196aed6,9a0dbbb594f74e27c9d8f550c494501b0196aed6,Modules: remove trailing empty spaces.
antirez,2018-04-09 10:17:19,https://api.github.com/repos/antirez/redis/git/commits/eaafea482870c839adc60d8453cbc0c1efb062c5,eaafea482870c839adc60d8453cbc0c1efb062c5,"Modules API: experimental APIs version.

This way it is possible to use conditional compilation to be compatible
with a larger amount of Redis versions, however note that this breaks
binary compatibiltiy, so the module must be compiled with the
corresponding redismodule.h file depending on the version of Redis
targeted."
antirez,2018-04-09 09:54:44,https://api.github.com/repos/antirez/redis/git/commits/49e098234abc2c5cc7042c931e3d611b0ae2055d,49e098234abc2c5cc7042c931e3d611b0ae2055d,"Modules API: blocked client free callback modified to get a context.

Note that this was an experimental API that can only be enabled with
REIDSMODULE_EXPERIMENTAL_API, so it is subject to change until its
promoted to stable API. Sorry for the breakage, it is trivial to
resolve btw. This change will not be back ported to Redis 4.0."
artix75,2018-04-06 16:02:40,https://api.github.com/repos/antirez/redis/git/commits/8969254e669d89f882200cb2848a316d05ea4b04,8969254e669d89f882200cb2848a316d05ea4b04,Cluster Manager: fix command.
charpty,2018-04-06 08:42:48,https://api.github.com/repos/antirez/redis/git/commits/0fd2b25c8dc646dd86fe95021f2e5c0224f075da,0fd2b25c8dc646dd86fe95021f2e5c0224f075da,"Remove unnecessary return statements

Signed-off-by: charpty <charpty@gmail.com>"
antirez,2018-04-05 11:24:22,https://api.github.com/repos/antirez/redis/git/commits/b2868c7b9cfed0e517547768d2bb9178d409daef,b2868c7b9cfed0e517547768d2bb9178d409daef,Modules API: RM_GetRandomBytes() / GetRandomHexChars().
oranagra,2018-04-02 15:36:17,https://api.github.com/repos/antirez/redis/git/commits/d56f4b4122aa51f97f5284e6e449943dd46ad659,d56f4b4122aa51f97f5284e6e449943dd46ad659,"Add redis-cli support for diskless replication (CAPA EOF)

when setting repl-diskless-sync yes, and sending SYNC.
redis-cli needs to be able to understand the EOF marker protocol
in order to be able to skip or download the rdb file"
antirez,2018-04-01 14:36:32,https://api.github.com/repos/antirez/redis/git/commits/c75582889a49ed15524a05f855d2a6327451c8c6,c75582889a49ed15524a05f855d2a6327451c8c6,Modules Cluster API: GetClusterSize() added.
antirez,2018-04-01 14:20:57,https://api.github.com/repos/antirez/redis/git/commits/27f9c8108c1c6a803ad8e386d655c7065feda394,27f9c8108c1c6a803ad8e386d655c7065feda394,Modules Cluster API: GetMyClusterID() added.
antirez,2018-03-31 08:12:34,https://api.github.com/repos/antirez/redis/git/commits/19c42c901b71e5ce34bc78834a91ea0c49018fc6,19c42c901b71e5ce34bc78834a91ea0c49018fc6,Modules Timer API: add example of API.
antirez,2018-03-31 08:11:26,https://api.github.com/repos/antirez/redis/git/commits/ee982f4031771013bdbd12086c185fb53db45060,ee982f4031771013bdbd12086c185fb53db45060,Modules Timer API: Wait at least 1 ms per iteration. Convert to ms.
antirez,2018-03-31 07:58:43,https://api.github.com/repos/antirez/redis/git/commits/4c11bc6cf067fb19bd6cb7517068c24543ca09d6,4c11bc6cf067fb19bd6cb7517068c24543ca09d6,Modules Timer API: fix wrong raxRemove() key argument.
antirez,2018-03-30 22:44:46,https://api.github.com/repos/antirez/redis/git/commits/2f7da0fd1a70f8cc0fe2edb2b1d6f37466615457,2f7da0fd1a70f8cc0fe2edb2b1d6f37466615457,Modules Timer API: fix infinite loop and export API.
antirez,2018-03-30 20:50:21,https://api.github.com/repos/antirez/redis/git/commits/b85a465c25ac9065a3378bd4b5e8047a606b1f6e,b85a465c25ac9065a3378bd4b5e8047a606b1f6e,Modules Timer API: timer handling implemented.
antirez,2018-03-30 18:40:35,https://api.github.com/repos/antirez/redis/git/commits/561039c1258b71a888c64eaa85e671a630312346,561039c1258b71a888c64eaa85e671a630312346,Modules Timer API: initial implementation.
antirez,2018-03-30 15:00:45,https://api.github.com/repos/antirez/redis/git/commits/192361b562bdcad15618600a1d741c7415a72b13,192361b562bdcad15618600a1d741c7415a72b13,"Modules Cluster API: node API exported, example improved."
antirez,2018-03-30 14:16:40,https://api.github.com/repos/antirez/redis/git/commits/16178b692efeb23fd2a9ef43bcf5091d7e3f61b7,16178b692efeb23fd2a9ef43bcf5091d7e3f61b7,Modules Cluster API: nodes list and info API.
antirez,2018-03-30 11:16:55,https://api.github.com/repos/antirez/redis/git/commits/83ec35770e035a09a7cdc56924935f8ac722c84a,83ec35770e035a09a7cdc56924935f8ac722c84a,Modules Cluster API: node information struct and flags.
antirez,2018-03-30 11:16:07,https://api.github.com/repos/antirez/redis/git/commits/a97df1a6e104e9e578c246eb3cf4b263370d8b05,a97df1a6e104e9e578c246eb3cf4b263370d8b05,Modules Cluster API: make node IDs pointers constant.
antirez,2018-03-30 10:49:39,https://api.github.com/repos/antirez/redis/git/commits/061f03d73017118ef4499ca21c84b92f1db563ad,061f03d73017118ef4499ca21c84b92f1db563ad,Modules Cluster API: add a simple example module.
antirez,2018-03-30 10:49:16,https://api.github.com/repos/antirez/redis/git/commits/82004f9dbea436075daf93c8281b4150558e1d0c,82004f9dbea436075daf93c8281b4150558e1d0c,Modules Cluster API: fix new API calls exporting.
antirez,2018-03-30 09:05:47,https://api.github.com/repos/antirez/redis/git/commits/b4dc782e4e991b8b4f95f1f28305109fcd7b2d70,b4dc782e4e991b8b4f95f1f28305109fcd7b2d70,Modules Cluster API: sending / receiving API first implementation.
soloestoy,2018-03-29 15:20:58,https://api.github.com/repos/antirez/redis/git/commits/fbef85ca5aca774c7533c6e0760edfd6258948c7,fbef85ca5aca774c7533c6e0760edfd6258948c7,debug: avoid free client unexpectedly when reload & loadaof
antirez,2018-03-29 13:13:31,https://api.github.com/repos/antirez/redis/git/commits/0701cad3de615ef2fbdda27514dfaa6e52734e73,0701cad3de615ef2fbdda27514dfaa6e52734e73,Modules Cluster API: message bus implementation.
soloestoy,2018-03-29 09:36:15,https://api.github.com/repos/antirez/redis/git/commits/83cf0e3668f61a57bbaaedf47d35d8943352d893,83cf0e3668f61a57bbaaedf47d35d8943352d893,adjust position of _dictNextPower in dictExpand
antirez,2018-03-28 12:06:08,https://api.github.com/repos/antirez/redis/git/commits/8ac7af1c5d4d06d6c165e35d67a3a6a70e5d98c3,8ac7af1c5d4d06d6c165e35d67a3a6a70e5d98c3,"Fix ae.c when a timer finalizerProc adds an event.

While this feature is not used by Redis, ae.c implements the ability for
a timer to call a finalizer callback when an timer event is deleted.
This feature was bugged since the start, and because it was never used
we never noticed a problem. However Anthony LaTorre was using the same
library in order to implement a different system: he found a bug that he
describes as follows, and which he fixed with the patch in this commit,
sent me by private email:

    --- Anthony email ---

've found one bug in the current implementation of the timed events.
It's possible to lose track of a timed event if an event is added in
the finalizerProc of another event.

For example, suppose you start off with three timed events 1, 2, and
3. Then the linked list looks like:

3 -> 2 -> 1

Then, you run processTimeEvents and events 2 and 3 finish, so now the
list looks like:

-1 -> -1 -> 2

Now, on the next iteration of processTimeEvents it starts by deleting
the first event, and suppose this finalizerProc creates a new event,
so that the list looks like this:

4 -> -1 -> 2

On the next iteration of the while loop, when it gets to the second
event, the variable prev is still set to NULL, so that the head of the
event loop after the next event will be set to 2, i.e. after deleting
the next event the event loop will look like:

2

and the event with id 4 will be lost.

I've attached an example program to illustrate the issue. If you run
it you will see that it prints:

```
foo id = 0
spam!
```

But if you uncomment line 29 and run it again it won't print ""spam!"".

    --- End of email ---

Test.c source code is as follows:

    #include ""ae.h""
    #include <stdio.h>

    aeEventLoop *el;

    int foo(struct aeEventLoop *el, long long id, void *data)
    {
	printf(""foo id = %lld\n"", id);

	return AE_NOMORE;
    }

    int spam(struct aeEventLoop *el, long long id, void *data)
    {
	printf(""spam!\n"");

	return AE_NOMORE;
    }

    void bar(struct aeEventLoop *el, void *data)
    {
	aeCreateTimeEvent(el, 0, spam, NULL, NULL);
    }

    int main(int argc, char **argv)
    {
	el = aeCreateEventLoop(100);

	//aeCreateTimeEvent(el, 0, foo, NULL, NULL);
	aeCreateTimeEvent(el, 0, foo, NULL, bar);

	aeMain(el);

	return 0;
    }

Anthony fixed the problem by using a linked list for the list of timers, and
sent me back this patch after he tested the code in production for some time.
The code looks sane to me, so committing it to Redis."
antirez,2018-03-26 09:29:16,https://api.github.com/repos/antirez/redis/git/commits/674909f44284a44580e87a1cc8c25a6aa957eb22,674909f44284a44580e87a1cc8c25a6aa957eb22,Add INIT INFO to the provided init script.
antirez,2018-03-25 11:03:38,https://api.github.com/repos/antirez/redis/git/commits/2b2652d7c4a9c34b815e0903135dfe97215ce823,2b2652d7c4a9c34b815e0903135dfe97215ce823,AOF: run tests with preamble off when it makes sense.
antirez,2018-03-25 09:43:24,https://api.github.com/repos/antirez/redis/git/commits/28d28ef3cf0fbbc1cf1caf379ed3ae2af0ac6c27,28d28ef3cf0fbbc1cf1caf379ed3ae2af0ac6c27,"AOF: enable RDB-preamble rewriting by default.

There are too many advantages in doing this, RDB is faster to persist,
more compact, much faster to load back. The main issues here are that
the code is less tested because this was not the old default (so we are
enabling it for the new 5.0 release), and that the AOF is no longer a
trivially parsable format from now on. However the non-preamble mode
will be supported in the future as well, if new data types will be
added."
antirez,2018-03-23 16:21:46,https://api.github.com/repos/antirez/redis/git/commits/8b20112860ca769966451477c569973079647b5e,8b20112860ca769966451477c569973079647b5e,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-03-23 16:21:31,https://api.github.com/repos/antirez/redis/git/commits/1392c83fb829d8586af8cdd1ef778b211be40e4a,1392c83fb829d8586af8cdd1ef778b211be40e4a,CG: AOF rewriting implemented.
artix75,2018-03-23 15:46:43,https://api.github.com/repos/antirez/redis/git/commits/d8fc307cc65c909ed8c7f801fcd757ef1f9e68b7,d8fc307cc65c909ed8c7f801fcd757ef1f9e68b7,Cluster Manager: rebalance command
antirez,2018-03-22 15:32:45,https://api.github.com/repos/antirez/redis/git/commits/e08d6bb37e9fbf0dd1a62973eb9bea93c9837f48,e08d6bb37e9fbf0dd1a62973eb9bea93c9837f48,"Merge pull request #4703 from gechunlin/unstable

Update object.c"
antirez,2018-03-22 15:26:01,https://api.github.com/repos/antirez/redis/git/commits/bad679137e7a6e15938f26d7a26a11afa4679314,bad679137e7a6e15938f26d7a26a11afa4679314,"Merge pull request #4679 from youjiali1995/fix-lru

Some commands will udpate lfu-counter many times in one call."
antirez,2018-03-22 15:23:40,https://api.github.com/repos/antirez/redis/git/commits/44f2cfa6311dacd0213b27d997de810648effbbe,44f2cfa6311dacd0213b27d997de810648effbbe,"Merge pull request #4722 from charsyam/feature/refactoring-call-aeDeleteFileEvent-twice-in-freeClusterLink

Refactoring to call aeDeleteFileEvent twice as once"
antirez,2018-03-22 15:22:32,https://api.github.com/repos/antirez/redis/git/commits/b38f52169bc261819ce80955f5bfca55b3c950b7,b38f52169bc261819ce80955f5bfca55b3c950b7,"Merge pull request #4777 from soloestoy/avoid-double-close

anet: avoid double close"
antirez,2018-03-22 15:21:19,https://api.github.com/repos/antirez/redis/git/commits/3163c9cb630e6314954f716c9adcd0b689abd41a,3163c9cb630e6314954f716c9adcd0b689abd41a,"Merge pull request #4781 from guybe7/block_list_notify

Make blocking list commands send keyspace notifications"
antirez,2018-03-22 10:45:04,https://api.github.com/repos/antirez/redis/git/commits/6c4cb1670a1f89ec3f38b67638cd76e161195358,6c4cb1670a1f89ec3f38b67638cd76e161195358,Add top comments in two addReply*() functions.
antirez,2018-03-22 10:42:50,https://api.github.com/repos/antirez/redis/git/commits/b86c26b2fdbecb62431f1ea7cccfc1b064dfa734,b86c26b2fdbecb62431f1ea7cccfc1b064dfa734,Massivily simplify addReply*() functions in networking.c
guybe7,2018-03-22 10:22:26,https://api.github.com/repos/antirez/redis/git/commits/fa00e20b165c5e55f437ceddde9f492cafd38143,fa00e20b165c5e55f437ceddde9f492cafd38143,Make blocking list commands send keyspace notifications
antirez,2018-03-22 08:20:17,https://api.github.com/repos/antirez/redis/git/commits/5d8c89163cdd4105633be1a5dd7a7784775e2143,5d8c89163cdd4105633be1a5dd7a7784775e2143,"Merge pull request #4757 from charsyam/feature/fix-invalid-listpack-type-in-makefile

fix listpack.c to listpack.o in Makefile"
antirez,2018-03-22 08:19:26,https://api.github.com/repos/antirez/redis/git/commits/7acf0e0a1843c6f50d3c10209a131fdca302502e,7acf0e0a1843c6f50d3c10209a131fdca302502e,"Merge pull request #3826 from charsyam/feature/fix_dlopen_leak

fix missed dlclose leak in module.c"
antirez,2018-03-22 08:16:32,https://api.github.com/repos/antirez/redis/git/commits/da621783f0cb70ef758542720d987c144427cd3d,da621783f0cb70ef758542720d987c144427cd3d,"Merge pull request #4691 from oranagra/active_defrag_v2

Active defrag v2"
antirez,2018-03-22 08:02:37,https://api.github.com/repos/antirez/redis/git/commits/3851d30ada437fbeedec70badc7624757f092f21,3851d30ada437fbeedec70badc7624757f092f21,"Merge pull request #4779 from charsyam/feature/fix-streamPropagateXCLAIM

fix memory leak for streamPropagateXCLAIM"
charsyam,2018-03-21 08:41:59,https://api.github.com/repos/antirez/redis/git/commits/71c7477fd407cc3d0d08ab8dedc564f30776511d,71c7477fd407cc3d0d08ab8dedc564f30776511d,fix memory leak for streamPropagateXCLAIM
soloestoy,2018-03-21 07:34:13,https://api.github.com/repos/antirez/redis/git/commits/46f767aa19f2915cda124575958ea650ec28a12f,46f767aa19f2915cda124575958ea650ec28a12f,fix missed call on freeaddrinfo
soloestoy,2018-03-21 07:13:51,https://api.github.com/repos/antirez/redis/git/commits/11baa8487c9cd0a1f39e13f0b1808cae1cc6757f,11baa8487c9cd0a1f39e13f0b1808cae1cc6757f,anet: avoid double close
antirez,2018-03-20 16:53:45,https://api.github.com/repos/antirez/redis/git/commits/233da29f4da7360f691fc491b03278c8d56fe7de,233da29f4da7360f691fc491b03278c8d56fe7de,"CG: propagate XACK by incrementing server.dirty.

This should be more than enough, even if in case of partial IDs that are
not found, we send all the IDs to the slave/AOF, but this is definitely
a corner case without bad effects if not some wasted space."
antirez,2018-03-20 16:50:37,https://api.github.com/repos/antirez/redis/git/commits/0f2c6b6a18a39443a5260632db84f33957eafff8,0f2c6b6a18a39443a5260632db84f33957eafff8,"Streams: improve MEMORY USAGE computation, include CGs."
antirez,2018-03-20 10:52:34,https://api.github.com/repos/antirez/redis/git/commits/5577130451e8ba6ceeac07137f45915a069706a9,5577130451e8ba6ceeac07137f45915a069706a9,"CG: Make XINFO Great Again (and more Redis-ish).

With XINFO out of the blue I invented a new syntax for commands never
used in Redis in the past... Let's fix it and make it

        Great Again!!11one (TM)"
antirez,2018-03-20 10:25:49,https://api.github.com/repos/antirez/redis/git/commits/2ba9a57c9aa5a44d042338518bfd3da30dc60fc3,2ba9a57c9aa5a44d042338518bfd3da30dc60fc3,CG: Add JUSTID to XCLAIM propagation to reduce CPU usage.
antirez,2018-03-20 10:13:41,https://api.github.com/repos/antirez/redis/git/commits/ad716e29c03ecce28467b83ab352038fb77933b3,ad716e29c03ecce28467b83ab352038fb77933b3,CG: Fix propagate() arg count in streamPropagateXCLAIM().
antirez,2018-03-20 10:06:50,https://api.github.com/repos/antirez/redis/git/commits/3cae5f032105125855849a8aae3d3e2fc6872579,3cae5f032105125855849a8aae3d3e2fc6872579,CG: XGROUP CREATE/DELCONUSMER replication.
antirez,2018-03-19 13:16:13,https://api.github.com/repos/antirez/redis/git/commits/0b58ad301ef2ef4ecad8e962020f9b676c64e440,0b58ad301ef2ef4ecad8e962020f9b676c64e440,CG: Replication WIP 1: XREADGROUP and XCLAIM propagated as XCLAIM.
antirez,2018-03-16 15:58:16,https://api.github.com/repos/antirez/redis/git/commits/3c2a952912c8d1ffb732008cb9ee49b45a567c21,3c2a952912c8d1ffb732008cb9ee49b45a567c21,Merge branch 'oertl-hyperloglog-improvement' into unstable
antirez,2018-03-16 15:57:53,https://api.github.com/repos/antirez/redis/git/commits/36b78e8dfe7a836bc1cab207871ef522e172635b,36b78e8dfe7a836bc1cab207871ef522e172635b,Aesthetic changes to PR #4749.
antirez,2018-03-16 15:34:04,https://api.github.com/repos/antirez/redis/git/commits/87cc94864cdd27bdec0635d5dab9bd18d445c10f,87cc94864cdd27bdec0635d5dab9bd18d445c10f,Fix HyperLogLog test script for new redis-rb API.
antirez,2018-03-16 15:27:38,https://api.github.com/repos/antirez/redis/git/commits/7e3c583532632a8739d639d58207c9e7d093615e,7e3c583532632a8739d639d58207c9e7d093615e,Merge branch 'hyperloglog-improvement' of https://github.com/oertl/redis into oertl-hyperloglog-improvement
antirez,2018-03-16 12:48:44,https://api.github.com/repos/antirez/redis/git/commits/38bc8ea5317ce1a176affdcf915749ae34ef22dd,38bc8ea5317ce1a176affdcf915749ae34ef22dd,RDB version 9.
antirez,2018-03-16 12:47:10,https://api.github.com/repos/antirez/redis/git/commits/8b0cfb1e66bde9b0a31a52bd6d9ab80e0a8df873,8b0cfb1e66bde9b0a31a52bd6d9ab80e0a8df873,RDB: Implement future-proof module AUX data loading.
soloestoy,2018-03-15 16:48:59,https://api.github.com/repos/antirez/redis/git/commits/fd0c4c027713d1d34a8dd5ef62556b9ac0940d45,fd0c4c027713d1d34a8dd5ef62556b9ac0940d45,add rdb-save-incremental-fsync option in redis.conf
soloestoy,2018-03-15 16:44:50,https://api.github.com/repos/antirez/redis/git/commits/54cae05ea736340b4afe463eb750f5acdfe07590,54cae05ea736340b4afe463eb750f5acdfe07590,rdb: incremental fsync when redis saves rdb
antirez,2018-03-15 15:39:33,https://api.github.com/repos/antirez/redis/git/commits/b1aae86fc6756d20108e6a0be37570b3de5bca38,b1aae86fc6756d20108e6a0be37570b3de5bca38,RDB: make RDB check aware of LFU/LRU opcodes.
antirez,2018-03-15 15:33:18,https://api.github.com/repos/antirez/redis/git/commits/8176a2ee7651dec5f80d9b6c1c59df156e797227,8176a2ee7651dec5f80d9b6c1c59df156e797227,RDB: LRU/LFU branches missed continue.
antirez,2018-03-15 15:24:53,https://api.github.com/repos/antirez/redis/git/commits/1ce50a7adf56814f29e7d4d336697ef9bbf40abb,1ce50a7adf56814f29e7d4d336697ef9bbf40abb,RDB: Ability to load LFU/LRU info.
antirez,2018-03-15 12:15:46,https://api.github.com/repos/antirez/redis/git/commits/d7a5c0eb71c7f1a4ea55460cc585d47f88bdac8c,d7a5c0eb71c7f1a4ea55460cc585d47f88bdac8c,"RDB: Ability to save LFU/LRU info.

This is a big win for caching use cases, since on reloading Redis will
still have some idea about what is worth to evict and what not.
However this only solves part of the problem because the information is
only partially propagated to slaves (on write operations). Reads will
not affect slaves LFU and LRU counters, so after a failover the eviction
decisions are kinda random until keys start to collect some aging/freq info.

However since new slaves are initially populated via RDB file transfer,
this means that if we spin up a new slave from a master, and perform an
immediate manual failover (for instance in order to upgrade the master),
the slave will have eviction informations to use for some time.

The LFU/LRU info is persisted only if the maxmemory policy is set to one
of the relevant type, even if no actual ""maxmemory""  memory limit is
set."
antirez,2018-03-13 15:54:23,https://api.github.com/repos/antirez/redis/git/commits/66143616153eeeb2067b8960221c30110eb39aae,66143616153eeeb2067b8960221c30110eb39aae,CG: XINFO STREAM.
antirez,2018-03-13 15:26:48,https://api.github.com/repos/antirez/redis/git/commits/d7d8cd0b2fa0523b575504d4800c2f1f05dd1a90,d7d8cd0b2fa0523b575504d4800c2f1f05dd1a90,"CG: XINFO GROUPS + output format changes.

XINFO is mainly an observability command that will be used more by
humans than computers, and even when used by computers it will be a very
low traffic command. For this reason the format was changed in order to
have field names. They'll consume some bandwidth and CPU cycles, but in
this context this is much better than having to understand what the
numbers in the output array are."
antirez,2018-03-07 15:08:06,https://api.github.com/repos/antirez/redis/git/commits/0cf6b1e3ae303214f0fdc73890cac2db41a75225,0cf6b1e3ae303214f0fdc73890cac2db41a75225,CG: XINFO CONSUMERS implemented.
antirez,2018-03-06 12:03:48,https://api.github.com/repos/antirez/redis/git/commits/67eeeb0b1084a72f2eca296235f732bb8d1d472c,67eeeb0b1084a72f2eca296235f732bb8d1d472c,Streams: fix XREAD missing check for NULL object.
antirez,2018-03-06 11:55:41,https://api.github.com/repos/antirez/redis/git/commits/8d8755c7b56069646ab0bd02e46652bfee19fcd1,8d8755c7b56069646ab0bd02e46652bfee19fcd1,CG: throw an error if XREADGROUP is used without GROUP.
antirez,2018-03-02 16:24:00,https://api.github.com/repos/antirez/redis/git/commits/d4f81ebdba7eadcb89b91377fb9091ef7e0513b7,d4f81ebdba7eadcb89b91377fb9091ef7e0513b7,CG: XGROUP DELCONSUMER implemented.
antirez,2018-03-02 15:25:00,https://api.github.com/repos/antirez/redis/git/commits/9b423ae2378b9234f100f5c1617ba18fba9db1a3,9b423ae2378b9234f100f5c1617ba18fba9db1a3,CG: remove stale comment. XREADGROUP is now implemented.
antirez,2018-03-02 15:23:34,https://api.github.com/repos/antirez/redis/git/commits/e6d434c1679791a2327c48036c13210b568a6fe6,e6d434c1679791a2327c48036c13210b568a6fe6,CG: implement RETRYCOUNT in XCLAIM.
antirez,2018-03-02 12:54:56,https://api.github.com/repos/antirez/redis/git/commits/f3d9520ccbf2bd4fcff287f7e2b3bb676c192b38,f3d9520ccbf2bd4fcff287f7e2b3bb676c192b38,CG: fix CG RDB loading not found conditional.
antirez,2018-03-02 12:50:55,https://api.github.com/repos/antirez/redis/git/commits/34614a15080fb7511992dc449b4a8f103b11458f,34614a15080fb7511992dc449b4a8f103b11458f,CG: NACK created by XCLAIM FORCE must be set in global PEL.
antirez,2018-03-02 12:44:40,https://api.github.com/repos/antirez/redis/git/commits/596264aee935bf916d53d89df9ca8fef6b44491f,596264aee935bf916d53d89df9ca8fef6b44491f,CG: implement XCLAIM FORCE option.
antirez,2018-02-21 10:42:51,https://api.github.com/repos/antirez/redis/git/commits/b26f03bd695d19ea88fc7ca1849ff46be802a216,b26f03bd695d19ea88fc7ca1849ff46be802a216,CG: XCLAIM now updates the idle time of the message.
antirez,2018-02-21 10:17:46,https://api.github.com/repos/antirez/redis/git/commits/f7d4c3acdf62d06f35beeec450be3ea7430d4aed,f7d4c3acdf62d06f35beeec450be3ea7430d4aed,Streams: trap more errors in stream loading + RDB check type name.
antirez,2018-02-21 09:51:43,https://api.github.com/repos/antirez/redis/git/commits/8727b4845bc1b8eb5cf6e725aad3329d4b4f9fe5,8727b4845bc1b8eb5cf6e725aad3329d4b4f9fe5,"CG: XCLAIM, use minidle and fix array len."
antirez,2018-02-21 09:50:32,https://api.github.com/repos/antirez/redis/git/commits/09e3b3b97588e9847fc016dbad489bbe8b46aa39,09e3b3b97588e9847fc016dbad489bbe8b46aa39,CG: remove unused argument from streamReplyWithRangeFromConsumerPEL().
antirez,2018-02-18 22:13:41,https://api.github.com/repos/antirez/redis/git/commits/13ff7bc3ef72f3cb60c3f3efc6b7e0b1a9d9aef2,13ff7bc3ef72f3cb60c3f3efc6b7e0b1a9d9aef2,CG: fix RDB saving when there are no consumer groups.
antirez,2018-02-18 22:12:49,https://api.github.com/repos/antirez/redis/git/commits/267f7f2c97540f6ca1f3db81833e630393933f04,267f7f2c97540f6ca1f3db81833e630393933f04,Streams: fix error description for XADD when specified ID is small.
antirez,2018-02-16 16:25:35,https://api.github.com/repos/antirez/redis/git/commits/0a6780e560e9077326eab1bd9dd07e3ccc44b8dc,0a6780e560e9077326eab1bd9dd07e3ccc44b8dc,CG: XCLAIM initial draft.
antirez,2018-02-16 15:18:01,https://api.github.com/repos/antirez/redis/git/commits/00a29b1a81f75dce175ac2199a7e1e9806a476dc,00a29b1a81f75dce175ac2199a7e1e9806a476dc,"Make addReplyError...() family functions able to get error codes.

Now you can use:

    addReplyError(""-MYERRORCODE some message"");

If the error code is omitted, the behavior is like in the past,
the generic -ERR will be used."
antirez,2018-02-16 11:13:04,https://api.github.com/repos/antirez/redis/git/commits/54b9a0e61283fa41aa39fe00726fd29c0dd694e3,54b9a0e61283fa41aa39fe00726fd29c0dd694e3,CG: test XACK remaining features.
antirez,2018-02-16 11:10:40,https://api.github.com/repos/antirez/redis/git/commits/5f8c57f28a297dc3b27e125672c833379450497b,5f8c57f28a297dc3b27e125672c833379450497b,CG: test XACK ability to remove items from the PELs.
antirez,2018-02-16 11:03:40,https://api.github.com/repos/antirez/redis/git/commits/f5799e728a8c498434f6e6d3e5e153e288517ef5,f5799e728a8c498434f6e6d3e5e153e288517ef5,CG: test XPENDING ability to return pending items.
antirez,2018-02-16 10:57:27,https://api.github.com/repos/antirez/redis/git/commits/c2ecac4746abbaf95617cc2d4ffaa54cdcf97990,c2ecac4746abbaf95617cc2d4ffaa54cdcf97990,CG: test XGROUPREAD abilities.
antirez,2018-02-16 10:56:31,https://api.github.com/repos/antirez/redis/git/commits/18ab0e31f3cc95eb22b6f104049e18910331b4e8,18ab0e31f3cc95eb22b6f104049e18910331b4e8,CG: test group creation.
antirez,2018-02-16 10:55:51,https://api.github.com/repos/antirez/redis/git/commits/c9d86c2b16a106f90504dbab5c7ba91068975c3a,c9d86c2b16a106f90504dbab5c7ba91068975c3a,CG: More specific duplicated group error.
antirez,2018-02-14 17:34:08,https://api.github.com/repos/antirez/redis/git/commits/9f60a6bcee16c35eed14408303062a27d6dd0be3,9f60a6bcee16c35eed14408303062a27d6dd0be3,"CG: RDB loading, fix inverted conditional."
antirez,2018-02-14 15:37:24,https://api.github.com/repos/antirez/redis/git/commits/f4e1a4de258b75a2ad19805a595a9fbb25e9edbf,f4e1a4de258b75a2ad19805a595a9fbb25e9edbf,CG: RDB loading first implementation.
antirez,2018-01-31 16:06:32,https://api.github.com/repos/antirez/redis/git/commits/db7a5f23b4674224c26628d419e8ca0919a692d9,db7a5f23b4674224c26628d419e8ca0919a692d9,"CG: RDB saving part 2, consumers."
antirez,2018-01-31 11:05:04,https://api.github.com/repos/antirez/redis/git/commits/8fb6048ed02881df0960c36b28a8c1634ade448e,8fb6048ed02881df0960c36b28a8c1634ade448e,"CG: RDB saving part 1, metadata and PEL."
antirez,2018-01-29 17:32:38,https://api.github.com/repos/antirez/redis/git/commits/e76fb4ab2546a6febc361d3b9dc4e76711f47f6b,e76fb4ab2546a6febc361d3b9dc4e76711f47f6b,CG: XPENDING should not create consumers and obey to count.
antirez,2018-01-29 17:23:26,https://api.github.com/repos/antirez/redis/git/commits/f3708af7f9ea6b3a097d2b33ee7c28624b753215,f3708af7f9ea6b3a097d2b33ee7c28624b753215,CG: XPENDING with start/stop/count variant implemented.
antirez,2018-01-26 16:27:34,https://api.github.com/repos/antirez/redis/git/commits/1bc31666daa7f59a8a3473e5a57a296351d4f985,1bc31666daa7f59a8a3473e5a57a296351d4f985,CG: XPENDING without start/stop variant implemented.
antirez,2018-01-26 10:57:19,https://api.github.com/repos/antirez/redis/git/commits/b65fe09bb8d00d9edf07f29274e0405a9d802fe3,b65fe09bb8d00d9edf07f29274e0405a9d802fe3,CG: Now XREADGROUP + blocking operations work.
antirez,2018-01-26 10:18:34,https://api.github.com/repos/antirez/redis/git/commits/5ad29325fed710011236763b3b73256ef8319103,5ad29325fed710011236763b3b73256ef8319103,CG: XACK should return zero when nothing is processed.
antirez,2018-01-25 15:39:49,https://api.github.com/repos/antirez/redis/git/commits/388c69fe4efc9f686aaf26af189c6f3de6bae405,388c69fe4efc9f686aaf26af189c6f3de6bae405,CG: XACK implementation.
antirez,2018-01-25 10:30:28,https://api.github.com/repos/antirez/redis/git/commits/5bbd117c290755d796f17be81fe22a4460ba9b80,5bbd117c290755d796f17be81fe22a4460ba9b80,CG: XREADGROUP can fetch data from the consumer PEL.
antirez,2018-01-24 17:51:23,https://api.github.com/repos/antirez/redis/git/commits/aa808394f64ce735311f63bea1a142d5fab9bc82,aa808394f64ce735311f63bea1a142d5fab9bc82,CG: first draft of streamReplyWithRangeFromConsumerPEL().
antirez,2018-01-24 15:47:39,https://api.github.com/repos/antirez/redis/git/commits/bbec4569a57df0ee14e64f64caa6bb0b12c7f9db,bbec4569a57df0ee14e64f64caa6bb0b12c7f9db,"CG: Fix order of calls in streamReplyWithRange().

We need to check if we are going to serve the request via the PEL before
inserting a deferred array len in the client output buffer."
antirez,2018-01-23 17:52:24,https://api.github.com/repos/antirez/redis/git/commits/41809fd969cb763c0323124aefaaaa2f5ab77839,41809fd969cb763c0323124aefaaaa2f5ab77839,CG: creation of NACK entries in PELs.
antirez,2018-01-22 11:09:35,https://api.github.com/repos/antirez/redis/git/commits/1ffb6723f52a1473385b7284ec0e53733083ddab,1ffb6723f52a1473385b7284ec0e53733083ddab,"CG: fix XREADGROUP "">"" special ID parsing due to missing ""continue""."
antirez,2018-01-22 10:58:18,https://api.github.com/repos/antirez/redis/git/commits/6c0af37b6eb8d337b6c6204cf05b1ebf817f42fc,6c0af37b6eb8d337b6c6204cf05b1ebf817f42fc,CG: streamCompareID() + group last_id updating.
antirez,2018-01-19 16:18:06,https://api.github.com/repos/antirez/redis/git/commits/86fe8fde2098f912f345e8c9385e678bba8fd2b2,86fe8fde2098f912f345e8c9385e678bba8fd2b2,CG: consumer lookup + initial streamReplyWithRange() work to supprot CG.
antirez,2018-01-19 15:39:09,https://api.github.com/repos/antirez/redis/git/commits/ccdae09046e05dae4d2e23a8a98a3ab7305c8d76,ccdae09046e05dae4d2e23a8a98a3ab7305c8d76,CG: add & populate group+consumer in the blocking state.
antirez,2018-01-19 10:11:52,https://api.github.com/repos/antirez/redis/git/commits/b8e52321612f3fa7a3a78779700d74df99b154cf,b8e52321612f3fa7a3a78779700d74df99b154cf,CG: fix parsing in XREADGROUP and streamLookupCG() NULL check.
antirez,2018-01-19 10:06:39,https://api.github.com/repos/antirez/redis/git/commits/bd1c11dc35ce34d137232f9c04f76ddb4de40354,bd1c11dc35ce34d137232f9c04f76ddb4de40354,CG: add XREADGROUP in the command table.
antirez,2018-01-19 09:40:08,https://api.github.com/repos/antirez/redis/git/commits/2bbb2bf42710c755698019beaef8b9ab281fddc2,2bbb2bf42710c755698019beaef8b9ab281fddc2,CG: XGROUPREAD group option parsing and groups lookup.
antirez,2018-01-19 08:52:34,https://api.github.com/repos/antirez/redis/git/commits/1fafe7def15de73bd66271c9632584c456ea41e2,1fafe7def15de73bd66271c9632584c456ea41e2,CG: fix raxFind() retval check in streamCreateCG().
antirez,2018-01-16 14:38:22,https://api.github.com/repos/antirez/redis/git/commits/58f0c000a5630d22c221bc4291b46f2fc1654ead,58f0c000a5630d22c221bc4291b46f2fc1654ead,CG: data structures design + XGROUP CREATE implementation.
charsyam,2018-03-15 11:32:08,https://api.github.com/repos/antirez/redis/git/commits/c76f890209d923ac4fb81b22a01320dca70a060c,c76f890209d923ac4fb81b22a01320dca70a060c,fix listpack.c to listpack.o in Makefile
oertl,2018-03-14 20:00:06,https://api.github.com/repos/antirez/redis/git/commits/15d7e617016220a33b7c98f0c0c0dfd219e2e330,15d7e617016220a33b7c98f0c0c0dfd219e2e330,fixed compilation error when using clang as reported by michael-grunder
antirez,2018-03-14 15:30:32,https://api.github.com/repos/antirez/redis/git/commits/d8207d09eedb08c8d70bff3ed91e2f5307e9dcf8,d8207d09eedb08c8d70bff3ed91e2f5307e9dcf8,Cluster: add test for the nofailover flag.
antirez,2018-03-14 12:46:36,https://api.github.com/repos/antirez/redis/git/commits/432bf4770e8f2c11e63477620e4765abfbdf91f5,432bf4770e8f2c11e63477620e4765abfbdf91f5,"Cluster: ability to prevent slaves from failing over their masters.

This commit, in some parts derived from PR #3041 which is no longer
possible to merge (because the user deleted the original branch),
implements the ability of slaves to have a special configuration
preventing that they try to start a failover when the master is failing.

There are multiple reasons for wanting this, and the feautre was
requested in issue #3021 time ago.

The differences between this patch and the original PR are the
following:

1. The flag is saved/loaded on the nodes configuration.
2. The 'myself' node is now flag-aware, the flag is updated as needed
   when the configuration is changed via CONFIG SET.
3. The flag name uses NOFAILOVER instead of NO_FAILOVER to be consistent
   with existing NOADDR.
4. The redis.conf documentation was rewritten.

Thanks to @deep011 for the original patch."
oranagra,2018-02-18 15:36:21,https://api.github.com/repos/antirez/redis/git/commits/806736cdf91658e7a8e1a2d8631b82763b508c36,806736cdf91658e7a8e1a2d8631b82763b508c36,"Adding real allocator fragmentation to INFO and MEMORY command + active defrag test

other fixes / improvements:
- LUA script memory isn't taken from zmalloc (taken from libc malloc)
  so it can cause high fragmentation ratio to be displayed (which is false)
- there was a problem with ""fragmentation"" info being calculated from
  RSS and used_memory sampled at different times (now sampling them together)

other details:
- adding a few more allocator info fields to INFO and MEMORY commands
- improve defrag test to measure defrag latency of big keys
- increasing the accuracy of the defrag test (by looking at real grag info)
  this way we can use an even lower threshold and still avoid false positives
- keep the old (total) ""fragmentation"" field unchanged, but add new ones for spcific things
- add these the MEMORY DOCTOR command
- deduct LUA memory from the rss in case of non jemalloc allocator (one for which we don't ""allocator active/used"")
- reduce sampling rate of the rss and allocator info"
oranagra,2018-02-18 15:15:22,https://api.github.com/repos/antirez/redis/git/commits/be1b4aa9aa76d15bb57b7159cb559a8b9dde5513,be1b4aa9aa76d15bb57b7159cb559a8b9dde5513,"active defrag v2

- big keys are not defragged in one go from within the dict scan
  instead they are scanned in parts after the main dict hash bucket is done.
- add latency monitor sample for defrag
- change default active-defrag-cycle-min to induce lower latency
- make active defrag start a new scan right away if needed, so it's easier
  (for the test suite) to detect when it's done
- make active defrag quick the current cycle after each db / big key
- defrag  some non key long term global allocations
- some refactoring for smaller functions and more reusable code
- during dict rehashing, one scan iteration of the dict, can end up scanning
  one bucket in the smaller dict and many many buckets in the larger dict.
  so waiting for 16 scan iterations before checking the time, may be much too long."
oertl,2018-03-11 08:18:00,https://api.github.com/repos/antirez/redis/git/commits/97bde9f6236b65aa5a9165554f7ca690b59c2903,97bde9f6236b65aa5a9165554f7ca690b59c2903,use all 64 bits of the hash value instead of 63
oertl,2018-03-10 19:44:20,https://api.github.com/repos/antirez/redis/git/commits/44698f45e759eb7503578bfc18ec6bee80299fed,44698f45e759eb7503578bfc18ec6bee80299fed,made constant static
oertl,2018-03-10 19:22:42,https://api.github.com/repos/antirez/redis/git/commits/633983d4796a48949a0268c8593b26ff5f0206e2,633983d4796a48949a0268c8593b26ff5f0206e2,improved definition of HLL_Q
oertl,2018-03-10 19:13:21,https://api.github.com/repos/antirez/redis/git/commits/1e9a7748716e1cd234893dd858d07ffa77920e41,1e9a7748716e1cd234893dd858d07ffa77920e41,"improved HyperLogLog cardinality estimation

based on method described in https://arxiv.org/abs/1702.01284
that does not rely on any magic constants"
oertl,2018-03-10 19:09:41,https://api.github.com/repos/antirez/redis/git/commits/6470b21f59d0c73fac2a08a477ed4ff1770ad3aa,6470b21f59d0c73fac2a08a477ed4ff1770ad3aa,replaced tab by spaces
guybe7,2018-03-07 03:40:37,https://api.github.com/repos/antirez/redis/git/commits/b660fc2fbe545f4a20a907ffa6c8333396435907,b660fc2fbe545f4a20a907ffa6c8333396435907,Fix zlexrangespec mem-leak in genericZrangebylexCommand
guybe7,2018-03-06 12:34:44,https://api.github.com/repos/antirez/redis/git/commits/290a63dc54f9cd2a61681be3849f1d9d481aa060,290a63dc54f9cd2a61681be3849f1d9d481aa060,Don't call sdscmp() with shared.maxstring or shared.minstring
artix75,2018-03-06 11:06:04,https://api.github.com/repos/antirez/redis/git/commits/a4cfd503ea1f5b112032e9edf7b564d5d7eced93,a4cfd503ea1f5b112032e9edf7b564d5d7eced93,clusterManagerAddSlots: changed the way ADDSLOTS command is built
artix75,2018-03-02 16:06:50,https://api.github.com/repos/antirez/redis/git/commits/d518733073de78f6fa3bb1dbf3992639dd672138,d518733073de78f6fa3bb1dbf3992639dd672138,ClusterManager: fixed --cluster-from 'all' parsing
antirez,2018-03-01 16:25:59,https://api.github.com/repos/antirez/redis/git/commits/84b281209a653f8afe5b106ab44d8339fd798823,84b281209a653f8afe5b106ab44d8339fd798823,Stream: update the listpack pointer in streamTrimByLength().
antirez,2018-03-01 14:26:27,https://api.github.com/repos/antirez/redis/git/commits/efcbc01fbd05dc2d203cb47dd4f48258e4925880,efcbc01fbd05dc2d203cb47dd4f48258e4925880,Remove warning from lpGet snprintf().
antirez,2018-03-01 14:06:41,https://api.github.com/repos/antirez/redis/git/commits/d63caaa8200372773347f34de116d6e62fe174f4,d63caaa8200372773347f34de116d6e62fe174f4,redis-cli: fix missed unit in array. Change define name.
charsyam,2018-03-01 13:30:39,https://api.github.com/repos/antirez/redis/git/commits/da7f5700cf1a1680accf563622debb82e5f9ef26,da7f5700cf1a1680accf563622debb82e5f9ef26,refactoring-call-aeDeleteFileEvent-twice-in-freeClusterLink
charsyam,2017-02-22 05:26:21,https://api.github.com/repos/antirez/redis/git/commits/51a03f6356973a45e3ff7baa675a3e8f2a1be6f9,51a03f6356973a45e3ff7baa675a3e8f2a1be6f9,fix dlopen leak
antirez,2018-03-01 11:39:15,https://api.github.com/repos/antirez/redis/git/commits/83b5b5a476e08152c0e91b11bffd852bb2fe64a6,83b5b5a476e08152c0e91b11bffd852bb2fe64a6,"Merge pull request #4714 from charsyam/feature/fix-out-of-index-range

[BugFix] Fix out of array index range for findBigKeys in redis-cli"
antirez,2018-02-28 17:03:51,https://api.github.com/repos/antirez/redis/git/commits/3a5bf75ede389981f1e63b305dad431c8ccc91ea,3a5bf75ede389981f1e63b305dad431c8ccc91ea,"Actually use ae_flags to add AE_BARRIER if needed.

Many thanks to @Plasma that spotted this problem reviewing the code."
artix75,2018-02-28 14:21:08,https://api.github.com/repos/antirez/redis/git/commits/ce14d23740a465e0ed2daa65288c397c311eda95,ce14d23740a465e0ed2daa65288c397c311eda95,Cluster Manager: fixed some memory error
artix75,2018-02-28 10:49:10,https://api.github.com/repos/antirez/redis/git/commits/fb41b8bb9c6de44ebfd56759efcd7f3edc22aedc,fb41b8bb9c6de44ebfd56759efcd7f3edc22aedc,Fixed memory write error in clusterManagerGetConfigSignature
artix75,2018-02-28 09:44:11,https://api.github.com/repos/antirez/redis/git/commits/2f056b83318a0daf13ac6be9e549f0f2c2ba97fb,2f056b83318a0daf13ac6be9e549f0f2c2ba97fb,"Cluster Manager: reshard command, fixed slots
parsing bug and other minor bugs."
antirez,2018-02-27 18:15:27,https://api.github.com/repos/antirez/redis/git/commits/7a73db7512b6152293e2b10ae0d8b6201e348e74,7a73db7512b6152293e2b10ae0d8b6201e348e74,"Merge pull request #4715 from charsyam/feature/refactoring-make-condition-clear-for-rdb

[BugFix] fix calculation length in rdbSaveAuxField"
antirez,2018-02-27 15:44:39,https://api.github.com/repos/antirez/redis/git/commits/92696e49d2cd497eb9287026ee490adcaaba90bb,92696e49d2cd497eb9287026ee490adcaaba90bb,expireIfNeeded() needed a top comment documenting the behavior.
antirez,2018-02-27 15:37:37,https://api.github.com/repos/antirez/redis/git/commits/b00c4ffab5e79cc90108cad01dad7717cf2a3615,b00c4ffab5e79cc90108cad01dad7717cf2a3615,expireIfNeeded() comment: claim -> pretend.
charsyam,2018-02-27 12:55:20,https://api.github.com/repos/antirez/redis/git/commits/76386c48b89d703df54b8df88b47cfd5854df69a,76386c48b89d703df54b8df88b47cfd5854df69a,refactoring-make-condition-clear-for-rdb
charsyam,2018-02-27 12:46:19,https://api.github.com/repos/antirez/redis/git/commits/6168d5a1a64631182a7698f2f97f827d6a8aa7f3,6168d5a1a64631182a7698f2f97f827d6a8aa7f3,fix-out-of-index-range-for-redis-cli-findbigkey
antirez,2018-02-27 11:16:26,https://api.github.com/repos/antirez/redis/git/commits/956350ef8951c56878c593dfd775693059c44056,956350ef8951c56878c593dfd775693059c44056,"ae.c: insetad of not firing, on AE_BARRIER invert the sequence.

AE_BARRIER was implemented like:

    - Fire the readable event.
    - Do not fire the writabel event if the readable fired.

However this may lead to the writable event to never be called if the
readable event is always fired. There is an alterantive, we can just
invert the sequence of the calls in case AE_BARRIER is set. This commit
does that."
antirez,2018-02-27 09:40:40,https://api.github.com/repos/antirez/redis/git/commits/75987431f008e0072a70e7d5c001c1724a7fb421,75987431f008e0072a70e7d5c001c1724a7fb421,"AOF: fix a bug that may prevent proper fsyncing when fsync=always.

In case the write handler is already installed, it could happen that we
serve the reply of a query in the same event loop cycle we received it,
preventing beforeSleep() from guaranteeing that we do the AOF fsync
before sending the reply to the client.

The AE_BARRIER mechanism, introduced in a previous commit, prevents this
problem. This commit makes actual use of this new feature to fix the
bug."
antirez,2018-02-27 09:25:08,https://api.github.com/repos/antirez/redis/git/commits/533d0e0375d3999e7bdb7880d8d77e910284151a,533d0e0375d3999e7bdb7880d8d77e910284151a,"Cluster: improve crash-recovery safety after failover auth vote.

Add AE_BARRIER to the writable event loop so that slaves requesting
votes can't be served before we re-enter the event loop in the next
iteration, so clusterBeforeSleep() will fsync to disk in time.
Also add the call to explicitly fsync, given that we modified the last
vote epoch variable."
antirez,2018-02-23 16:42:24,https://api.github.com/repos/antirez/redis/git/commits/548e478e4092e8a17faf638d84bb6e05d155f72b,548e478e4092e8a17faf638d84bb6e05d155f72b,"ae.c: introduce the concept of read->write barrier.

AOF fsync=always, and certain Redis Cluster bus operations, require to
fsync data on disk before replying with an acknowledge.
In such case, in order to implement Group Commits, we want to be sure
that queries that are read in a given cycle of the event loop, are never
served to clients in the same event loop iteration. This way, by using
the event loop ""before sleep"" callback, we can fsync the information
just one time before returning into the event loop for the next cycle.
This is much more efficient compared to calling fsync() multiple times.

Unfortunately because of a bug, this was not always guaranteed: the
actual way the events are installed was the sole thing that could
control. Normally this problem is hard to trigger when AOF is enabled
with fsync=always, because we try to flush the output buffers to the
socekt directly in the beforeSleep() function of Redis. However if the
output buffers are full, we actually install a write event, and in such
a case, this bug could happen.

This change to ae.c modifies the event loop implementation to make this
concept explicit. Write events that are registered with:

    AE_WRITABLE|AE_BARRIER

Are guaranteed to never fire after the readable event was fired for the
same file descriptor. In this way we are sure that data is persisted to
disk before the client performing the operation receives an
acknowledged.

However note that this semantics does not provide all the guarantees
that one may believe are automatically provided. Take the example of the
blocking list operations in Redis.

With AOF and fsync=always we could have:

    Client A doing: BLPOP myqueue 0
    Client B doing: RPUSH myqueue a b c

In this scenario, Client A will get the ""a"" elements immediately after
the Client B RPUSH will be executed, even before the operation is persisted.
However when Client B will get the acknowledge, it can be sure that
""b,c"" are already safe on disk inside the list.

What to note here is that it cannot be assumed that Client A receiving
the element is a guaranteed that the operation succeeded from the point
of view of Client B.

This is due to the fact that the barrier exists within the same socket,
and not between different sockets. However in the case above, the
element ""a"" was not going to be persisted regardless, so it is a pretty
synthetic argument."
antirez,2018-02-27 12:04:32,https://api.github.com/repos/antirez/redis/git/commits/d8830200b48b7f0b050e56f0c4e570311bcf7e3e,d8830200b48b7f0b050e56f0c4e570311bcf7e3e,"Merge pull request #3828 from oranagra/sdsnewlen_pr

add SDS_NOINIT option to sdsnewlen to avoid unnecessary memsets."
antirez,2018-02-23 11:19:30,https://api.github.com/repos/antirez/redis/git/commits/813960dbdd86b88b509b2946dbaa023e0ae8b1b9,813960dbdd86b88b509b2946dbaa023e0ae8b1b9,Fix ziplist prevlen encoding description. See #4705.
gechunlin,2018-02-23 02:57:54,https://api.github.com/repos/antirez/redis/git/commits/d4e6d1086fd9004a23b957aba048df41d6afac14,d4e6d1086fd9004a23b957aba048df41d6afac14,Update object.c
artix75,2018-02-22 17:32:39,https://api.github.com/repos/antirez/redis/git/commits/8f4f001dc37c27c9a35ef17a5a4fcfd6520bd311,8f4f001dc37c27c9a35ef17a5a4fcfd6520bd311,"Cluster Manager:
- Almost all Cluster Manager related code moved to
  the same section.
- Many macroes converted to functions
- Added various comments
- Little code restyling"
artix75,2018-02-20 11:01:13,https://api.github.com/repos/antirez/redis/git/commits/87f5a7c0b4c4f207982a39b1c6d668de1e009931,87f5a7c0b4c4f207982a39b1c6d668de1e009931,"- Fixed bug in clusterManagerGetAntiAffinityScore
- Code improvements"
artix75,2018-02-14 18:29:28,https://api.github.com/repos/antirez/redis/git/commits/605d7262e6e4c565fae7ed131825c2e1eea3a1cf,605d7262e6e4c565fae7ed131825c2e1eea3a1cf,Cluster Manager: colorized output
artix75,2018-02-14 16:54:46,https://api.github.com/repos/antirez/redis/git/commits/4ca8dbdc2b943e2d0bf71354118d8f562aa92178,4ca8dbdc2b943e2d0bf71354118d8f562aa92178,Cluster Manager: improved cleanup/error handling in various functions
artix75,2018-02-13 11:00:06,https://api.github.com/repos/antirez/redis/git/commits/8128f1bf03ea73f3c3d08936f4556b12ef0c5d72,8128f1bf03ea73f3c3d08936f4556b12ef0c5d72,Cluster Manager: 'call' command.
artix75,2018-02-09 12:02:37,https://api.github.com/repos/antirez/redis/git/commits/7b9f945b3700c3e52cb7fd55a44ac8104267babb,7b9f945b3700c3e52cb7fd55a44ac8104267babb,Cluster Manager: CLUSTER_MANAGER_NODE_CONNECT macro
artix75,2018-02-07 11:02:56,https://api.github.com/repos/antirez/redis/git/commits/dad69ac320eb97191ab8a1bea7eea223e8d2f4a6,dad69ac320eb97191ab8a1bea7eea223e8d2f4a6,ClusterManager: added replicas count to clusterManagerNode
artix75,2018-02-07 10:29:25,https://api.github.com/repos/antirez/redis/git/commits/956bec4ca8a73b51b984fd7186c2baa734c065ed,956bec4ca8a73b51b984fd7186c2baa734c065ed,Cluster Manager: cluster is considered consistent if only one node has been found
artix75,2018-02-01 19:09:30,https://api.github.com/repos/antirez/redis/git/commits/1b1f80e60f69a94873e062b87b7b802f412d7136,1b1f80e60f69a94873e062b87b7b802f412d7136,Cluster Manager: reply error catch for MEET command
artix75,2018-02-01 16:43:36,https://api.github.com/repos/antirez/redis/git/commits/be7e2b84bdd4f5b37878768cc0b8a91c0448af11,be7e2b84bdd4f5b37878768cc0b8a91c0448af11,Cluster Manager: slots coverage check.
artix75,2018-01-31 18:25:02,https://api.github.com/repos/antirez/redis/git/commits/d38045805d45a1b990f38d7c2c2edabb9912f711,d38045805d45a1b990f38d7c2c2edabb9912f711,"- Cluster Manager: fixed various memory leaks
- Cluster Manager: fixed flags assignment in
  clusterManagerNodeLoadInfo"
artix75,2018-01-31 16:57:16,https://api.github.com/repos/antirez/redis/git/commits/74dcd14d1333bc312703de5ba143f41d6973815d,74dcd14d1333bc312703de5ba143f41d6973815d,Added check for open slots (clusterManagerCheckCluster)
artix75,2018-01-31 15:26:21,https://api.github.com/repos/antirez/redis/git/commits/bafdc1a56cbb8c56b28d144789e986c3598ee5c7,bafdc1a56cbb8c56b28d144789e986c3598ee5c7,"Cluster Manager: 'create', 'info' and 'check' commands"
artix75,2018-01-12 10:06:24,https://api.github.com/repos/antirez/redis/git/commits/1dd67ebceb2b44d202d09400b9bf02af62c35362,1dd67ebceb2b44d202d09400b9bf02af62c35362,Cluster Manager mode
oranagra,2018-02-21 09:04:13,https://api.github.com/repos/antirez/redis/git/commits/5def65008ff92519a828e1ba403e9a46836ca802,5def65008ff92519a828e1ba403e9a46836ca802,"Fix zrealloc to behave similarly to je_realloc when size is 0

According to C11, the behavior of realloc with size 0 is now deprecated.
it can either behave as free(ptr) and return NULL, or return a valid pointer.
but in zmalloc it can lead to zmalloc_oom_handler and panic.
and that can affect modules that use it.

It looks like both glibc allocator and jemalloc behave like so:
  realloc(malloc(32),0) returns NULL
  realloc(NULL,0) returns a valid pointer

This commit changes zmalloc to behave the same"
antirez,2018-02-19 10:12:49,https://api.github.com/repos/antirez/redis/git/commits/ffde73c57d0aa5cd58869c13cb1b76d6c27ef5b7,ffde73c57d0aa5cd58869c13cb1b76d6c27ef5b7,"Track number of logically expired keys still in memory.

This commit adds two new fields in the INFO output, stats section:

expired_stale_perc:0.34
expired_time_cap_reached_count:58

The first field is an estimate of the number of keys that are yet in
memory but are already logically expired. They reason why those keys are
yet not reclaimed is because the active expire cycle can't spend more
time on the process of reclaiming the keys, and at the same time nobody
is accessing such keys. However as the active expire cycle runs, while
it will eventually have to return to the caller, because of time limit
or because there are less than 25% of keys logically expired in each
given database, it collects the stats in order to populate this INFO
field.

Note that expired_stale_perc is a running average, where the current
sample accounts for 5% and the history for 95%, so you'll see it
changing smoothly over time.

The other field, expired_time_cap_reached_count, counts the number
of times the expire cycle had to stop, even if still it was finding a
sizeable number of keys yet to expire, because of the time limit.
This allows people handling operations to understand if the Redis
server, during mass-expiration events, is able to collect keys fast
enough usually. It is normal for this field to increment during mass
expires, but normally it should very rarely increment. When instead it
constantly increments, it means that the current workloads is using
a very important percentage of CPU time to expire keys.

This feature was created thanks to the hints of Rashmi Ramesh and
Bart Robinson from Twitter. In private email exchanges, they noted how
it was important to improve the observability of this parameter in the
Redis server. Actually in big deployments, the amount of keys that are
yet to expire in each server, even if they are logically expired, may
account for a very big amount of wasted memory."
antirez,2018-02-15 20:41:03,https://api.github.com/repos/antirez/redis/git/commits/aa57481d8ce69938b20a2a7ea8ba06daadbc2dcd,aa57481d8ce69938b20a2a7ea8ba06daadbc2dcd,Remove non semantical spaces from module.c.
antirez,2018-02-15 20:36:32,https://api.github.com/repos/antirez/redis/git/commits/7830f8492fde42eb213ee82131cc1c982bb319e1,7830f8492fde42eb213ee82131cc1c982bb319e1,"Merge pull request #4479 from dvirsky/notify

Keyspace notifications API for modules"
antirez,2018-02-15 20:33:06,https://api.github.com/repos/antirez/redis/git/commits/f4dc736ccadedefe156a3b9c278e06cb2c55f0a1,f4dc736ccadedefe156a3b9c278e06cb2c55f0a1,Fix typo in notifyKeyspaceEvent() comment.
dvirsky,2018-02-14 19:54:00,https://api.github.com/repos/antirez/redis/git/commits/0a36196ce47e1ee6db6c2e5461777e72ea504143,0a36196ce47e1ee6db6c2e5461777e72ea504143,Add doc comment about notification flags
dvirsky,2018-02-14 19:50:42,https://api.github.com/repos/antirez/redis/git/commits/10efdf307b09d57b9b9b499cecca3cc4f7aed197,10efdf307b09d57b9b9b499cecca3cc4f7aed197,Add REDISMODULE_NOTIFY_STREAM flag to support stream notifications
dvirsky,2017-12-07 15:19:04,https://api.github.com/repos/antirez/redis/git/commits/613831f82023601df874b9cfa9a1935ff942ceb6,613831f82023601df874b9cfa9a1935ff942ceb6,Fix indentation and comment style in testmodule
dvirsky,2017-12-07 15:15:16,https://api.github.com/repos/antirez/redis/git/commits/f27a64232e59e5bc5f8ee648b3610d19128ab149,f27a64232e59e5bc5f8ee648b3610d19128ab149,Use one static client for all keyspace notification callbacks
dvirsky,2017-12-07 14:55:46,https://api.github.com/repos/antirez/redis/git/commits/3aab12414f27685bf8e9dc9fd4693c8c9ecf9ccb,3aab12414f27685bf8e9dc9fd4693c8c9ecf9ccb,Remove the NOTIFY_MODULE flag and simplify the module notification flow if there aren't subscribers
dvirsky,2017-11-27 21:27:20,https://api.github.com/repos/antirez/redis/git/commits/a8e2e99a88968a22cdbfdac404a812e80b5dd0d7,a8e2e99a88968a22cdbfdac404a812e80b5dd0d7,Document flags for notifications
dvirsky,2017-11-27 21:19:51,https://api.github.com/repos/antirez/redis/git/commits/d4d753dae44fa96974eefea83be7aa2bb8838b41,d4d753dae44fa96974eefea83be7aa2bb8838b41,removed some trailing whitespaces
dvirsky,2017-11-27 21:18:45,https://api.github.com/repos/antirez/redis/git/commits/5b7b12e38fccb92d2778eed51962be0edf8c5ec6,5b7b12e38fccb92d2778eed51962be0edf8c5ec6,removed hellonotify.c
dvirsky,2017-11-27 21:13:45,https://api.github.com/repos/antirez/redis/git/commits/896db12b418877967d7689e2731c266d8dd1d4f9,896db12b418877967d7689e2731c266d8dd1d4f9,fixed test
dvirsky,2017-11-27 14:29:55,https://api.github.com/repos/antirez/redis/git/commits/2136035e47c5c50aec07270e0c87a9e5cd5e243d,2136035e47c5c50aec07270e0c87a9e5cd5e243d,finished implementation of notifications. Tests unfinished
antirez,2018-02-13 15:20:32,https://api.github.com/repos/antirez/redis/git/commits/4f2d279dd704ebf0e9ebab85bc74269b523eda8a,4f2d279dd704ebf0e9ebab85bc74269b523eda8a,"Merge pull request #4685 from charsyam/refactoring/set_max_latency

Removing duplicated code to set max latency"
charsyam,2018-02-13 15:12:13,https://api.github.com/repos/antirez/redis/git/commits/9d414361151922e25f3c2eacb8a02653dd85e0c9,9d414361151922e25f3c2eacb8a02653dd85e0c9,getting rid of duplicated code
antirez,2018-02-13 15:01:31,https://api.github.com/repos/antirez/redis/git/commits/ae29bcd8e2b592ed89435a84eda8f03050050b75,ae29bcd8e2b592ed89435a84eda8f03050050b75,"More verbose logging when slave sends errors to master.

See #3832."
antirez,2018-02-13 14:55:26,https://api.github.com/repos/antirez/redis/git/commits/756df19134ec54773876802b6bb91f99d868a4c8,756df19134ec54773876802b6bb91f99d868a4c8,"Merge pull request #3832 from oranagra/slave_reply_to_master_pr

when a slave responds with an error on commands that come from master, log it"
antirez,2018-02-13 14:50:21,https://api.github.com/repos/antirez/redis/git/commits/f9e6c2046feadcd284bdb68de4f49296f91bbe53,f9e6c2046feadcd284bdb68de4f49296f91bbe53,"Merge pull request #3745 from guybe7/unstable

enlarged buffer given to ld2string"
antirez,2018-02-13 14:43:26,https://api.github.com/repos/antirez/redis/git/commits/c14ba46e3a725a2325d8d5fd90097b1c889de1e2,c14ba46e3a725a2325d8d5fd90097b1c889de1e2,"Make it explicit with a comment why we kill the old AOF rewrite.

See #3858."
guybe7,2017-03-07 18:58:54,https://api.github.com/repos/antirez/redis/git/commits/f782006782c9eb82c893c12084bec1c0cf7d521e,f782006782c9eb82c893c12084bec1c0cf7d521e,"rewriteAppendOnlyFileBackground() failure fix

It is possible to do BGREWRITEAOF even if appendonly=no. This is by design.
stopAppendonly() didn't turn off aof_rewrite_scheduled (it can be turned on
again by BGREWRITEAOF even while appendonly is off anyway).
After configuring `appendonly yes` it will see that the state is AOF_OFF,
there's no RDB fork, so it will do rewriteAppendOnlyFileBackground() which
will fail since the aof_child_pid is set (was scheduled and started by cron).

Solution:
stopAppendonly() will turn off the schedule flag (regardless of who asked for it).
startAppendonly() will terminate any existing fork and start a new one (so it is the most recent)."
antirez,2018-02-13 14:31:11,https://api.github.com/repos/antirez/redis/git/commits/480d4af1e7e62d9550332b772fb6d26444e5f7bd,480d4af1e7e62d9550332b772fb6d26444e5f7bd,"Merge pull request #4684 from oranagra/latency_monitor_max

fix to latency monitor reporting wrong max latency"
oranagra,2018-02-13 13:47:06,https://api.github.com/repos/antirez/redis/git/commits/8e8d957ff82859f5d65b5977d837cd610da5b431,8e8d957ff82859f5d65b5977d837cd610da5b431,"fix to latency monitor reporting wrong max latency

in some cases LATENCY HISTORY reported latency that was
higher than the max latency reported by LATENCY LATEST / DOCTOR"
antirez,2018-02-02 10:10:18,https://api.github.com/repos/antirez/redis/git/commits/32ac4c64baf00747da1acc0cc61ee236922e2dcf,32ac4c64baf00747da1acc0cc61ee236922e2dcf,Rax updated to latest antirez/rax commit.
soloestoy,2018-01-26 14:49:39,https://api.github.com/repos/antirez/redis/git/commits/968cb2669346ebcb20016ac16923dcd31e31ad2f,968cb2669346ebcb20016ac16923dcd31e31ad2f,"config: handle special configuration """" for auth"
antirez,2018-01-24 09:55:25,https://api.github.com/repos/antirez/redis/git/commits/4aa2ecd98b5993fcd6967aa002f0f7d8a577735d,4aa2ecd98b5993fcd6967aa002f0f7d8a577735d,"Merge pull request #4269 from jianqingdu/unstable

fix not call va_end() when syncWrite() failed"
antirez,2018-01-24 09:48:04,https://api.github.com/repos/antirez/redis/git/commits/4bffeda8b03e8e432025524c0e49ed3f5b7b9653,4bffeda8b03e8e432025524c0e49ed3f5b7b9653,"Merge pull request #4628 from mnunberg/patch-1

redismodule.h: Check ModuleNameBusy before calling it"
antirez,2018-01-24 09:10:45,https://api.github.com/repos/antirez/redis/git/commits/5f5be1ee330903ce1582386623fe4f9bc28a7801,5f5be1ee330903ce1582386623fe4f9bc28a7801,Fix integration test NOREPLICAS error time dependent false positive.
mnunberg,2018-01-23 15:49:18,https://api.github.com/repos/antirez/redis/git/commits/062bd733da883d76d3625fb38c71f2bd74c363a1,062bd733da883d76d3625fb38c71f2bd74c363a1,"redismodule.h: Check ModuleNameBusy before calling it

Older versions might not have this function."
antirez,2018-01-18 11:41:05,https://api.github.com/repos/antirez/redis/git/commits/727dd43614ec45e23e2dedbba08b393323feaa4f,727dd43614ec45e23e2dedbba08b393323feaa4f,Fix migrateCommand() access of not initialized byte.
guybe7,2017-03-06 16:42:52,https://api.github.com/repos/antirez/redis/git/commits/fd8efb7c3615f1a0c78a03388d5b18bc9c4049f8,fd8efb7c3615f1a0c78a03388d5b18bc9c4049f8,"Replication buffer fills up on high rate traffic.

When feeding the master with a high rate traffic the the slave's feed is much slower.
This causes the replication buffer to grow (indefinitely) which leads to slave disconnection.
The problem is that writeToClient() decides to stop writing after NET_MAX_WRITES_PER_EVENT
writes (In order to be fair to clients).
We should ignore this when the client is a slave.
It's better if clients wait longer, the alternative is that the slave has no chance to stay in
sync in this situation."
antirez,2017-12-18 14:46:39,https://api.github.com/repos/antirez/redis/git/commits/1673a3f32ce22498bcb60d73ee254e61e323dda5,1673a3f32ce22498bcb60d73ee254e61e323dda5,"Cluster: improve anti-affinity algo in redis-trib.rb.

See #3462 and related PRs.

We use a simple algorithm to calculate the level of affinity violation,
and then an optimizer that performs random swaps until things improve."
antirez,2018-01-17 10:23:37,https://api.github.com/repos/antirez/redis/git/commits/e1e0bbe04d1950ae3cf778c6e3b125d6d233d4f6,e1e0bbe04d1950ae3cf778c6e3b125d6d233d4f6,"Remove useless comment from serverCron().

The behavior is well specified by the code itself."
antirez,2018-01-17 10:21:55,https://api.github.com/repos/antirez/redis/git/commits/a18e4c964e9248008e0fba7efc1cad9ba9b8b1c3,a18e4c964e9248008e0fba7efc1cad9ba9b8b1c3,"Merge pull request #4546 from hqin6/unstable

fixbug for #4545 dead loop aof rewrite"
hqin6,2018-01-17 10:08:30,https://api.github.com/repos/antirez/redis/git/commits/3d3faa0a190e3ad987613b4c3f853d9ffd38a237,3d3faa0a190e3ad987613b4c3f853d9ffd38a237,fixbug for #4545 dead loop aof rewrite
antirez,2018-01-17 09:45:11,https://api.github.com/repos/antirez/redis/git/commits/81401878de92d15f0d3529144e27a1106ad489c2,81401878de92d15f0d3529144e27a1106ad489c2,"Merge pull request #4609 from Qinch/unstable

fix assert problem in ZIP_DECODE_PREVLENSIZE macro"
antirez,2018-01-16 14:52:13,https://api.github.com/repos/antirez/redis/git/commits/b23927b240c68139700b7ac4bd4ce9370503aa60,b23927b240c68139700b7ac4bd4ce9370503aa60,Hopefully more clear comment to explain the change in #4607.
antirez,2018-01-16 14:32:58,https://api.github.com/repos/antirez/redis/git/commits/0cc43760d774520d5a8c3b6b0f3a35694fc504fc,0cc43760d774520d5a8c3b6b0f3a35694fc504fc,"Merge pull request #4607 from oranagra/psync2_backlog

PSYNC2 fix - promoted slave should hold on to it's backlog"
oranagra,2018-01-16 08:10:42,https://api.github.com/repos/antirez/redis/git/commits/689b64c3ad921c6f82cee38c0940c6637e9ba88f,689b64c3ad921c6f82cee38c0940c6637e9ba88f,"PSYNC2 fix - promoted slave should hold on to it's backlog

after a slave is promoted (assuming it has no slaves
and it booted over an hour ago), it will lose it's replication
backlog at the next replication cron, rather than waiting for slaves
to connect to it.
so on a simple master/slave faiover, if the new slave doesn't connect
immediately, it may be too later and PSYNC2 will fail."
soloestoy,2017-12-21 06:55:27,https://api.github.com/repos/antirez/redis/git/commits/1b8eec3e53b1bf0648084747df87bcd73f26029c,1b8eec3e53b1bf0648084747df87bcd73f26029c,aof: format code and comment
antirez,2018-01-15 11:50:08,https://api.github.com/repos/antirez/redis/git/commits/c45366be0a08e6777b63150198ddfe9119be9132,c45366be0a08e6777b63150198ddfe9119be9132,Put more details in the comment introduced by #4601.
antirez,2018-01-15 11:43:55,https://api.github.com/repos/antirez/redis/git/commits/1ed5ac7ce5322b3c57c1637574b9e87e1af7b76d,1ed5ac7ce5322b3c57c1637574b9e87e1af7b76d,"Merge pull request #4601 from soloestoy/fix-memoryleak-for-lazy-server-del

lazyfree: fix memory leak for lazyfree-lazy-server-del"
soloestoy,2018-01-14 16:45:37,https://api.github.com/repos/antirez/redis/git/commits/0517ab8397d6077660f46d9f9d320b3106c13a06,0517ab8397d6077660f46d9f9d320b3106c13a06,lazyfree: fix memory leak for lazyfree-lazy-server-del
antirez,2018-01-12 16:43:01,https://api.github.com/repos/antirez/redis/git/commits/aeeb7477960ed0f398027e2c6ca7d9e8af9d8a58,aeeb7477960ed0f398027e2c6ca7d9e8af9d8a58,"Merge pull request #4575 from soloestoy/bugfix-benchmark

redis-benchmark: bugfix - handle zero liveclients in right way"
antirez,2018-01-12 16:41:09,https://api.github.com/repos/antirez/redis/git/commits/72187fa8a5e9faa39e4cb4ebabc2e267dd055805,72187fa8a5e9faa39e4cb4ebabc2e267dd055805,"Merge pull request #4581 from dvirsky/module_unlink

Added RM_UnlinkKey - a low level analog to UNLINK command"
antirez,2018-01-12 16:16:38,https://api.github.com/repos/antirez/redis/git/commits/a5b6bc2bd78a5684034178ae6497979cf081037e,a5b6bc2bd78a5684034178ae6497979cf081037e,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2018-01-12 16:16:12,https://api.github.com/repos/antirez/redis/git/commits/71914387ba5f61bb9e36314ee4693c8812f89db9,71914387ba5f61bb9e36314ee4693c8812f89db9,"Merge pull request #4586 from gnuhpc/fix-crashlog-typo

Fix a typo(maybe instruction?) in crash log"
antirez,2018-01-12 10:21:10,https://api.github.com/repos/antirez/redis/git/commits/2f8476df9124dfbd298a7ecce87870d44bdbb172,2f8476df9124dfbd298a7ecce87870d44bdbb172,"Fix getKeysUsingCommandTable() in the case of nagative arity.

This fixes a crash with Redis Cluster when OBJECT is mis-used, because
getKeysUsingCommandTable() will call serverPanic() detecting we are
accessing an invalid argument in the case ""OBJECT foo"" is called.

This bug was introduced when OBJECT HELP was introduced, because the key
argument is set fixed at index 2 in the command table, however now
OBJECT may be called with an insufficient number of arguments to extract
the key.

The ""Right Thing"" would be to have a specific function to extract keys
from the OBJECT command, however this is kinda of an overkill, so I
preferred to make getKeysUsingCommandTable() more robust and just return
no keys when it's not possible to honor the command table, because new
commands are often added and also there are a number with an HELP
subcommand violating the normal form, and crashing for this trivial
reason or having many command-specific key extraction functions is not
great."
antirez,2018-01-11 10:40:57,https://api.github.com/repos/antirez/redis/git/commits/db7bd6fda9ec0ab942c49e0ec72b12e03d1345f6,db7bd6fda9ec0ab942c49e0ec72b12e03d1345f6,Document new protocol options in #4568 into redis.conf.
antirez,2018-01-11 10:35:45,https://api.github.com/repos/antirez/redis/git/commits/13650446ac220136ed717fada3d0990298d5d87c,13650446ac220136ed717fada3d0990298d5d87c,"proto-max-querybuf-len -> client-query-buffer-limit.

We already had client buffer limits exported as configuration options.
Stick with the naming scheme already used.

See #4568."
antirez,2018-01-11 10:27:03,https://api.github.com/repos/antirez/redis/git/commits/8075572207b5aebb1385c4f233f5302544439325,8075572207b5aebb1385c4f233f5302544439325,"New config options about protocol prefixed with ""proto"".

Related to #4568."
antirez,2018-01-11 10:20:02,https://api.github.com/repos/antirez/redis/git/commits/c2fa4b8a60c7d3c11c016f16f85d37188fa5c3f6,c2fa4b8a60c7d3c11c016f16f85d37188fa5c3f6,"Merge pull request #4568 from oranagra/restore_size_limit

fix RESTORE command size limits"
antirez,2018-01-09 17:58:31,https://api.github.com/repos/antirez/redis/git/commits/e954742fbd0179176baa76e92c358fb235af6c11,e954742fbd0179176baa76e92c358fb235af6c11,"Merge pull request #3356 from yusaku/fix-module-firstkey

Fix the firstkey, lastkey, and keystep of moduleCommand"
antirez,2018-01-09 17:29:27,https://api.github.com/repos/antirez/redis/git/commits/c17a0e134f5366fb7ce87f56945e1e54b3860988,c17a0e134f5366fb7ce87f56945e1e54b3860988,"Test: MIGRATE AUTH test added.

Related to #2507."
antirez,2018-01-09 17:16:22,https://api.github.com/repos/antirez/redis/git/commits/3ce1c28d47eefd6e7121f0257563e380153cae54,3ce1c28d47eefd6e7121f0257563e380153cae54,"Rewrite MIGRATE AUTH option.

See PR #2507. This is a reimplementation of the fix that contained
different problems."
gnuhpc,2018-01-09 08:13:02,https://api.github.com/repos/antirez/redis/git/commits/36e71b88b5f6c2fc6b3aee26b7ebd42df3c52c1b,36e71b88b5f6c2fc6b3aee26b7ebd42df3c52c1b,Fix a typo(maybe instruction?) in crash log
dvirsky,2018-01-07 14:41:43,https://api.github.com/repos/antirez/redis/git/commits/e76dfc90a75f26809ac17a344b9a4ffd615f550d,e76dfc90a75f26809ac17a344b9a4ffd615f550d,Added RM_UnlinkKey - a low level analog to UNLINK command
antirez,2018-01-05 10:53:11,https://api.github.com/repos/antirez/redis/git/commits/e509fbb8d9f055184713b9c1fd0b7ce5c5f75baa,e509fbb8d9f055184713b9c1fd0b7ce5c5f75baa,"Merge pull request #4579 from gnuhpc/fix-memoryusage-list

Fix memory usage list bug"
gnuhpc,2018-01-05 04:16:24,https://api.github.com/repos/antirez/redis/git/commits/5113a53df6cd08f1f35ac9335531ca4f444a5fea,5113a53df6cd08f1f35ac9335531ca4f444a5fea,Fix memory usage list bug
soloestoy,2018-01-03 04:47:25,https://api.github.com/repos/antirez/redis/git/commits/c0f611f12aef9fcd320d56181cd6e2ca3066049d,c0f611f12aef9fcd320d56181cd6e2ca3066049d,redis-benchmark: bugfix - handle zero liveclients in right way
oranagra,2017-12-29 10:43:48,https://api.github.com/repos/antirez/redis/git/commits/b509a14c3e8a76aadd6bd48296cafb4616be25e2,b509a14c3e8a76aadd6bd48296cafb4616be25e2,Add config options for max-bulk-len and max-querybuf-len mainly to support RESTORE of large keys
oranagra,2017-12-21 09:10:48,https://api.github.com/repos/antirez/redis/git/commits/60a4f12f8b998c44dfff0e88202b01598287390d,60a4f12f8b998c44dfff0e88202b01598287390d,"fix processing of large bulks (above 2GB)

- protocol parsing (processMultibulkBuffer) was limitted to 32big positions in the buffer
  readQueryFromClient potential overflow
- rioWriteBulkCount used int, although rioWriteBulkString gave it size_t
- several places in sds.c that used int for string length or index.
- bugfix in RM_SaveAuxField (return was 1 or -1 and not length)
- RM_SaveStringBuffer was limitted to 32bit length"
antirez,2017-12-22 10:26:31,https://api.github.com/repos/antirez/redis/git/commits/0b561883b48db76a78497b1bebfd9367c80e2d96,0b561883b48db76a78497b1bebfd9367c80e2d96,"Hyperloglog: refresh hdr variable correctly.

This is a fix for the #3819 improvements. The o->ptr may change because
of hllSparseSet() calls, so 'hdr' must be correctly re-fetched."
antirez,2017-12-22 10:01:19,https://api.github.com/repos/antirez/redis/git/commits/27b81f3fbca03c1d61e6b183317d90bc3dec119b,27b81f3fbca03c1d61e6b183317d90bc3dec119b,"Hyperloglog: Support for PFMERGE sparse encoding as target.

This is a fix for #3819."
antirez,2017-12-22 09:45:31,https://api.github.com/repos/antirez/redis/git/commits/cbe9d725a727d438983c88f67b32bb98115e38dc,cbe9d725a727d438983c88f67b32bb98115e38dc,"Hyperloglog: refactoring of sparse/dense add function.

The commit splits the add functions into a set() and add() set of
functions, so that it's possible to set registers in an independent way
just having the index and count.

Related to #3819, otherwise a fix is not possible."
hqin6,2017-12-18 09:59:03,https://api.github.com/repos/antirez/redis/git/commits/365e6c45ea0d5d9d72ac18b1df729f536c1fa0a1,365e6c45ea0d5d9d72ac18b1df729f536c1fa0a1,fixbug for #4545 dead loop aof rewrite
itamarhaber,2017-12-15 19:21:12,https://api.github.com/repos/antirez/redis/git/commits/d49bfc40808652389e3e3c3a0db3667153c3c14f,d49bfc40808652389e3e3c3a0db3667153c3c14f,Uppercases subcommands in OBJECT HELP
itamarhaber,2017-12-15 19:19:41,https://api.github.com/repos/antirez/redis/git/commits/7820377d0084ac400345047ab67c0752e98897d8,7820377d0084ac400345047ab67c0752e98897d8,Uppercases subcommands in MEMORY HELP
antirez,2017-12-15 11:41:02,https://api.github.com/repos/antirez/redis/git/commits/238c9bd0863e713f018587e79f452ade845bee91,238c9bd0863e713f018587e79f452ade845bee91,"Merge pull request #4540 from hqin6/unstable

fixbug for #4538 Error opening /setting AOF rewrite IPC pipes: No suc…"
hqin6,2017-12-15 03:06:58,https://api.github.com/repos/antirez/redis/git/commits/ee724cac491c6e6f4ee3c9b91be482f163e6d12c,ee724cac491c6e6f4ee3c9b91be482f163e6d12c,fixbug for #4538 Error opening /setting AOF rewrite IPC pipes: No such file or directory
antirez,2017-12-14 21:14:45,https://api.github.com/repos/antirez/redis/git/commits/d745e8dfb3c8448a7a8dd1bbe1bc739a1b04bdcd,d745e8dfb3c8448a7a8dd1bbe1bc739a1b04bdcd,"Merge pull request #4536 from tporadowski/antirez_unstable-cli-history

Always enable command history in redis-cli run on a TTY"
antirez,2017-12-14 11:21:32,https://api.github.com/repos/antirez/redis/git/commits/398b2084af067ae4d669e0ce5a63d3bc89c639d3,398b2084af067ae4d669e0ce5a63d3bc89c639d3,"Merge pull request #4528 from nashe/patch-oob-read-4527

Prevent off-by-one read in stringmatchlen()"
antirez,2017-12-14 11:19:30,https://api.github.com/repos/antirez/redis/git/commits/12e65a424c209bd922dc742f396f1b76bc6350d9,12e65a424c209bd922dc742f396f1b76bc6350d9,"safe_write -> aofWrite. Function commented.

Related to #4498."
antirez,2017-12-14 11:15:46,https://api.github.com/repos/antirez/redis/git/commits/5182dcd6452ba3f03196124bcccfa8f80dd61fd1,5182dcd6452ba3f03196124bcccfa8f80dd61fd1,"Merge pull request #4498 from soloestoy/aof-safe-write

Aof safe write -- fix the short write"
tporadowski,2017-12-13 22:49:41,https://api.github.com/repos/antirez/redis/git/commits/77653ebe8a7dc2a673364711f31ff8736f80832c,77653ebe8a7dc2a673364711f31ff8736f80832c,"always enable command history in redis-cli

- when redis-cli is running in a TTY - always enable command history
buffering, regardless if history file path can be successfully
determined"
antirez,2017-12-13 12:35:59,https://api.github.com/repos/antirez/redis/git/commits/de276b6a439179b3cd0c94df82729cae8ab1cb9a,de276b6a439179b3cd0c94df82729cae8ab1cb9a,"Cluster: allow read-only EVAL/EVALSHA in slaves.

Fix #3665."
nashe,2017-12-12 00:25:03,https://api.github.com/repos/antirez/redis/git/commits/f43eb5adcfa3be6368f116656348a29f22f580eb,f43eb5adcfa3be6368f116656348a29f22f580eb,Prevent off-by-one read in stringmatchlen() (fixes #4527)
itamarhaber,2017-12-10 15:54:56,https://api.github.com/repos/antirez/redis/git/commits/4317e2131f4355046fd44141c8b6515b81dc79c0,4317e2131f4355046fd44141c8b6515b81dc79c0,Standardizes `MEMORY HELP` subcommand
soloestoy,2017-12-08 08:09:27,https://api.github.com/repos/antirez/redis/git/commits/109ee497be24906e7931d33b71e3a6e78c5de77b,109ee497be24906e7931d33b71e3a6e78c5de77b,zset: change the span of zskiplistNode to unsigned long
soloestoy,2017-12-08 07:37:08,https://api.github.com/repos/antirez/redis/git/commits/e8901b2fe489013b17e943d2721f961a50bda07c,e8901b2fe489013b17e943d2721f961a50bda07c,zset: fix the int problem
antirez,2017-12-06 11:05:11,https://api.github.com/repos/antirez/redis/git/commits/522760fac79536eb68dc5fc70e9166f689eb76dc,522760fac79536eb68dc5fc70e9166f689eb76dc,"Change indentation and other minor details of PR #4489.

The main change introduced by this commit is pretending that help
arrays are more text than code, thus indenting them at level 0. This
improves readability, and is an old practice when defining arrays of
C strings describing text.

Additionally a few useless return statements are removed, and the HELP
subcommand capitalized when printed to the user."
itamarhaber,2017-12-05 17:09:19,https://api.github.com/repos/antirez/redis/git/commits/482d678e95c4d7e5754691799b04a2ae433a9479,482d678e95c4d7e5754691799b04a2ae433a9479,C style
itamarhaber,2017-12-05 16:17:14,https://api.github.com/repos/antirez/redis/git/commits/b23c8babedfc61dc75032596c1e3d425cb9276ad,b23c8babedfc61dc75032596c1e3d425cb9276ad,Uses an offset in addReplyHelp
itamarhaber,2017-12-05 16:14:59,https://api.github.com/repos/antirez/redis/git/commits/8b51121998bd5b0f3f4992548ad5f4a929c2a9d7,8b51121998bd5b0f3f4992548ad5f4a929c2a9d7,Merge remote-tracking branch 'upstream/unstable' into help_subcommands
antirez,2017-12-05 14:59:56,https://api.github.com/repos/antirez/redis/git/commits/62a4b817c6e83eedf96a451f45dd943099258fd0,62a4b817c6e83eedf96a451f45dd943099258fd0,"add linkClient(): adds the client and caches the list node.

We have this operation in two places: when caching the master and
when linking a new client after the client creation. By having an API
for this we avoid incurring in errors when modifying one of the two
places forgetting the other. The function is also a good place where to
document why we cache the linked list node.

Related to #4497 and #4210."
antirez,2017-12-05 14:51:15,https://api.github.com/repos/antirez/redis/git/commits/03cfc8bf3ad3a172bd5c7f5a02ad7757c0c3f96d,03cfc8bf3ad3a172bd5c7f5a02ad7757c0c3f96d,"Merge pull request #4497 from soloestoy/optimize-unlink-client

networking: optimize unlinkClient() in freeClient()"
antirez,2017-12-05 14:47:05,https://api.github.com/repos/antirez/redis/git/commits/c56fbb246c720eec8a7c6434e51b681a3e11a1c8,c56fbb246c720eec8a7c6434e51b681a3e11a1c8,"Merge pull request #4508 from trevor211/fixNotes

fix some notes"
antirez,2017-12-05 14:38:21,https://api.github.com/repos/antirez/redis/git/commits/479ea57797d0ca71ae6b1fc606ec267c635df62b,479ea57797d0ca71ae6b1fc606ec267c635df62b,Merge branch 'unstable' of github.com:/antirez/redis into unstable
soloestoy,2017-11-30 03:34:37,https://api.github.com/repos/antirez/redis/git/commits/7c6ddbc37d572600b6364348c9506dc190493e2e,7c6ddbc37d572600b6364348c9506dc190493e2e,dict: fix the int problem for defrag
soloestoy,2017-11-30 03:29:05,https://api.github.com/repos/antirez/redis/git/commits/d1176b582c8f482e46821527114c5c1476bc66d4,d1176b582c8f482e46821527114c5c1476bc66d4,dict: fix the int problem
antirez,2017-12-05 14:29:42,https://api.github.com/repos/antirez/redis/git/commits/6830fa25e3c037eda30f8a32c295b76a8c669006,6830fa25e3c037eda30f8a32c295b76a8c669006,"Merge pull request #4488 from itamarhaber/debug_arity

Standardizes arity handling of DEBUG"
antirez,2017-12-05 14:28:08,https://api.github.com/repos/antirez/redis/git/commits/e4903ce586c191fe4699913a5e360e12812024a3,e4903ce586c191fe4699913a5e360e12812024a3,"Merge pull request #4509 from soloestoy/set-int-problem

Set int problem"
soloestoy,2017-12-05 09:42:19,https://api.github.com/repos/antirez/redis/git/commits/42387d6c1a3bf14baa70f811a79f20b439b58c12,42387d6c1a3bf14baa70f811a79f20b439b58c12,set: fix the int problem for qsort
soloestoy,2017-12-05 09:19:19,https://api.github.com/repos/antirez/redis/git/commits/de809666f81675bb21ca09049ea67cf1d32ff9b7,de809666f81675bb21ca09049ea67cf1d32ff9b7,set: fix the int problem for SPOP & SRANDMEMBER
trevor211,2017-12-05 06:41:16,https://api.github.com/repos/antirez/redis/git/commits/3f232ebfb8712707f1a02dcc1eb532d05d0b8b71,3f232ebfb8712707f1a02dcc1eb532d05d0b8b71,fix some notes
antirez,2017-12-04 16:25:34,https://api.github.com/repos/antirez/redis/git/commits/e6c3bcf9e072c8c40814577f2421b5d5184b2243,e6c3bcf9e072c8c40814577f2421b5d5184b2243,"Merge pull request #4506 from soloestoy/quicklist-int-problem

Quicklist int problem"
soloestoy,2017-12-03 03:51:35,https://api.github.com/repos/antirez/redis/git/commits/b9491b65d991498bf62f2b5533405e161aee650a,b9491b65d991498bf62f2b5533405e161aee650a,quicklist: change the len of quicklist to unsigned long
soloestoy,2017-11-30 05:38:54,https://api.github.com/repos/antirez/redis/git/commits/664bbfe7604a28e0d359c04a0b73d1a78d255568,664bbfe7604a28e0d359c04a0b73d1a78d255568,quicklist: fix the return value of quicklistCount
antirez,2017-12-04 10:59:15,https://api.github.com/repos/antirez/redis/git/commits/2869284e44ca64d633a75752981333d5c0520056,2869284e44ca64d633a75752981333d5c0520056,Streams: fix a few type mismatches in t_stream.c.
antirez,2017-12-04 10:25:20,https://api.github.com/repos/antirez/redis/git/commits/60d26acfc8bd4a4367d60b3a8b74af4031171fd6,60d26acfc8bd4a4367d60b3a8b74af4031171fd6,"Refactoring: improve luaCreateFunction() API.

The function in its initial form, and after the fixes for the PSYNC2
bugs, required code duplication in multiple spots. This commit modifies
it in order to always compute the script name independently, and to
return the SDS of the SHA of the body: this way it can be used in all
the places, including for SCRIPT LOAD, without duplicating the code to
create the Lua function name. Note that this requires to re-compute the
body SHA1 in the case of EVAL seeing a script for the first time, but
this should not change scripting performance in any way because new
scripts definition is a rare event happening the first time a script is
seen, and the SHA1 computation is anyway not a very slow process against
the typical Redis script and compared to the actua Lua byte compiling of
the body.

Note that the function used to assert() if a duplicated script was
loaded, however actually now two times over three, we want the function
to handle duplicated scripts just fine: this happens in SCRIPT LOAD and
in RDB AUX ""lua"" loading. Moreover the assert was not defending against
some obvious failure mode, so now the function always tests against
already defined functions at start."
antirez,2017-12-04 09:55:46,https://api.github.com/repos/antirez/redis/git/commits/c6eca690ee0df88361dd878563fcbc6b1ce214a2,c6eca690ee0df88361dd878563fcbc6b1ce214a2,"Remove useless variable check from luaCreateFunction().

The block is already inside if (allow_dup)."
antirez,2017-12-04 09:33:04,https://api.github.com/repos/antirez/redis/git/commits/68681f2bcf8d17e573c27ff3fc676ddde381204c,68681f2bcf8d17e573c27ff3fc676ddde381204c,"Fix issue #4505, Lua RDB AUX field loading of existing scripts.

Unfortunately, as outlined by @soloestoy in #4505, ""lua"" AUX RDB field
loading in case of duplicated script was still broken. This commit fixes
this problem and also a memory leak introduced by the past commit.

Note that now we have a regression test able to duplicate the issue, so
this commit was actually tested against the regression. The original PR
also had a valid fix, but I prefer to hide the details of scripting.c
outside scripting.c, and later ""SCRIPT LOAD"" should also be able to use
the function luaCreateFunction() instead of redoing the work."
antirez,2017-12-04 09:26:02,https://api.github.com/repos/antirez/redis/git/commits/6f0b19bc5b0f89d7d9d89e84de1f4c9a859df59c,6f0b19bc5b0f89d7d9d89e84de1f4c9a859df59c,Regression test for #4505 (Lua AUX field loading).
antirez,2017-12-04 09:24:52,https://api.github.com/repos/antirez/redis/git/commits/6a1bf07a46ce7d8cb3d9443abedd05dfa2f8096a,6a1bf07a46ce7d8cb3d9443abedd05dfa2f8096a,"DEBUG change-repl-id implemented.

With PSYNC2 to force a full SYNC in tests is hard. With this new DEBUG
subcommand we just need to call it and then CLIENT KILL TYPE master in
the slave."
itamarhaber,2017-12-03 17:34:31,https://api.github.com/repos/antirez/redis/git/commits/51eb6cb39513188001bd24e693868451ae267340,51eb6cb39513188001bd24e693868451ae267340,Adds help to `CONFIG`
itamarhaber,2017-12-03 17:05:10,https://api.github.com/repos/antirez/redis/git/commits/bd5af03dbd11ae4865d95c7643803ce804faf2d7,bd5af03dbd11ae4865d95c7643803ce804faf2d7,Adds help to `CLUSTER` command
itamarhaber,2017-12-03 15:39:52,https://api.github.com/repos/antirez/redis/git/commits/ee3884e63c601fa559cd376a869af9f6c9276f2b,ee3884e63c601fa559cd376a869af9f6c9276f2b,Improve slowlog help
itamarhaber,2017-12-03 14:49:29,https://api.github.com/repos/antirez/redis/git/commits/d884ba4bc93849428c3ab0667bc0255368732ab4,d884ba4bc93849428c3ab0667bc0255368732ab4,Helps CLIENT
antirez,2017-12-01 15:01:10,https://api.github.com/repos/antirez/redis/git/commits/65a9740fa880a8e5b4640037a3670f8a2f33080b,65a9740fa880a8e5b4640037a3670f8a2f33080b,"Fix loading of RDB files lua AUX fields when the script is defined.

In the case of slaves loading the RDB from master, or in other similar
cases, the script is already defined, and the function registering the
script should not fail in the assert() call."
antirez,2017-12-01 14:04:05,https://api.github.com/repos/antirez/redis/git/commits/8ac76be5f2d44341a1c7f67645c753aafbde7804,8ac76be5f2d44341a1c7f67645c753aafbde7804,Streams: DEBUG DIGEST support.
antirez,2017-12-01 11:50:18,https://api.github.com/repos/antirez/redis/git/commits/f42df6f43a59fa92a82e651d1c5858bc5e72c3ef,f42df6f43a59fa92a82e651d1c5858bc5e72c3ef,"Streams: add code to compute the stream memory usage.

It's a bit of black magic without actually tracking it inside rax.c,
however Redis usage of the radix tree for the stream data structure is
quite consistent, so a few magic constants apparently are producing
results that make sense."
antirez,2017-11-21 21:22:05,https://api.github.com/repos/antirez/redis/git/commits/45fe1f5e0019c6745e531da3ea51eee609f15ec3,45fe1f5e0019c6745e531da3ea51eee609f15ec3,Streams: add some initial test for XREVRANGE.
antirez,2017-11-21 21:21:37,https://api.github.com/repos/antirez/redis/git/commits/115d076d655d265ef534bb0782da8a2ba0d877ac,115d076d655d265ef534bb0782da8a2ba0d877ac,Streams: fix lp-count field for non-same-fields entries.
antirez,2017-11-20 10:25:05,https://api.github.com/repos/antirez/redis/git/commits/9bb18e54380250f3fb931028952379c3ab2dec29,9bb18e54380250f3fb931028952379c3ab2dec29,Streams: XRANGE REV option -> XREVRANGE command.
antirez,2017-11-17 15:02:11,https://api.github.com/repos/antirez/redis/git/commits/9dc79c039a16674458a39c8bdfbcfe049f3fae77,9dc79c039a16674458a39c8bdfbcfe049f3fae77,Streams: fix reverse iterator discarding of items out of range.
antirez,2017-11-17 12:47:50,https://api.github.com/repos/antirez/redis/git/commits/6919280cc5eb9a35887ddaa528053380d584327a,6919280cc5eb9a35887ddaa528053380d584327a,Streams: fix reverse iteration next node jumping.
antirez,2017-11-17 12:24:20,https://api.github.com/repos/antirez/redis/git/commits/ee3490ec481c7f1ef89fe685b03c2b5f171d335b,ee3490ec481c7f1ef89fe685b03c2b5f171d335b,Streams: state machine for reverse iteration WIP 1.
antirez,2017-11-17 09:16:30,https://api.github.com/repos/antirez/redis/git/commits/3c5d773f82eede4497cb3695d2cd32eec3e10382,3c5d773f82eede4497cb3695d2cd32eec3e10382,Streams: augment stream entries to allow backward scanning.
antirez,2017-11-15 11:48:32,https://api.github.com/repos/antirez/redis/git/commits/0381931b4c6acbbd1cbbaa6814defaea9fd33847,0381931b4c6acbbd1cbbaa6814defaea9fd33847,"Streams: Update listpack to fix 32bit strings encoding error.

Note that streams produced by XADD in previous broken versions having
elements with 4096 bytes or more will be permanently broken and must be
created again from scratch.

Fix #4428
Fix #4349"
antirez,2017-11-09 11:04:26,https://api.github.com/repos/antirez/redis/git/commits/020fe26bd6300a153dc6a02e3411f65af7310118,020fe26bd6300a153dc6a02e3411f65af7310118,"Streams: fix COUNT parsing, issue #4433."
antirez,2017-11-08 21:59:15,https://api.github.com/repos/antirez/redis/git/commits/abab0b7817e48cb1ab0aaec6fff35890000396c5,abab0b7817e48cb1ab0aaec6fff35890000396c5,Streams: fix redis-cli to understand the stream type.
antirez,2017-11-08 21:57:10,https://api.github.com/repos/antirez/redis/git/commits/671b1f6a9dd517a51b02af49a226d3d59e2e2724,671b1f6a9dd517a51b02af49a226d3d59e2e2724,Streams: fix TYPE for stream type.
antirez,2017-11-04 17:05:46,https://api.github.com/repos/antirez/redis/git/commits/1898c50573d5c9162cb579b3495a694c18e31739,1898c50573d5c9162cb579b3495a694c18e31739,"Streams: fix XREAD test broken after previous tests improvements.

10% of times the data is not just ""item 0"" but there is also the
""otherfield"" part. Use [lrange] to avoid the issue.
This commit fixes #4416."
antirez,2017-10-03 09:42:08,https://api.github.com/repos/antirez/redis/git/commits/5082ec6419e58b59ac5f911c353276bf1340a9fd,5082ec6419e58b59ac5f911c353276bf1340a9fd,"Streams: move ID ms/seq separator from '.' to '-'

After checking with the community via Twitter (here:
https://twitter.com/antirez/status/915130876861788161) the verdict was to
use "":"". However I later realized, after users lamented the fact that
it's hard to copy IDs just with double click, that this was the reason
why I moved to ""."" in the first instance. Fortunately ""-"", that was the
other option with most votes, also gets selected with double click on
most terminal applications on Linux and MacOS.

So my reasoning was:

1) We can't retain ""."" because it's actually confusing to newcomers, it
looks like a floating number, people may be tricked into thinking they
can order IDs numerically as floats.

2) Moving to a double-click-to-select format is much better. People will
work with such IDs for long time when coding / debugging. Why making now
a choice that will impact this for the next years?

The only other viable option was ""-"", and that's what I did. Thanks."
antirez,2017-09-29 16:00:40,https://api.github.com/repos/antirez/redis/git/commits/50595a58898474acf12e33137a83d4201b4b2d29,50595a58898474acf12e33137a83d4201b4b2d29,"Streams: fix XADD + MAXLEN propagation due to var shadowing.

Clang should be more prone to return warnings by default when there is
same-var-name shadowing. GCC does this and can avoid bugs like that."
antirez,2017-09-29 14:18:59,https://api.github.com/repos/antirez/redis/git/commits/a4e6aae6b82a5118d128110f9f1c0ab0f979d5c2,a4e6aae6b82a5118d128110f9f1c0ab0f979d5c2,Streams: fix memory leak in streamTrimByLength().
antirez,2017-09-29 14:17:46,https://api.github.com/repos/antirez/redis/git/commits/e53c90308b2940fa548a26583099e7a640d7abc9,e53c90308b2940fa548a26583099e7a640d7abc9,Streams: add XADD + MAXLEN test.
antirez,2017-09-29 14:16:19,https://api.github.com/repos/antirez/redis/git/commits/0248a6b125df10ab74de3db82bc348cc4a6dce63,0248a6b125df10ab74de3db82bc348cc4a6dce63,Streams: fix streamTrimByLength() standalone items skipping.
antirez,2017-09-29 10:40:29,https://api.github.com/repos/antirez/redis/git/commits/0540803288dd137c0a0f3fc345165c6a87f0957e,0540803288dd137c0a0f3fc345165c6a87f0957e,"Streams: XADD MAXLEN implementation.

The core of this change is the implementation of stream trimming, and
the resulting MAXLEN option of XADD as a trivial result of having
trimming functionalities. MAXLEN already works but in order to be more
efficient listpack GC should be implemented, currently marked as a TODO
item inside the comments."
antirez,2017-09-28 16:12:15,https://api.github.com/repos/antirez/redis/git/commits/0c00fd7834215ec311a91def5d6737892222b9c3,0c00fd7834215ec311a91def5d6737892222b9c3,"Streams: reduce listpack max size to 2k to speedup range queries.

Listpack max size is a tradeoff between space and time. A 2k max entry
puts the memory usage approximately at a similar order of magnitude (5
million entries went from 96 to 120 MB), but the range queries speed
doubled (because there are half entries to scan in the average case).

Lower values could be considered, or maybe this parameter should be
made tunable."
antirez,2017-09-28 14:55:46,https://api.github.com/repos/antirez/redis/git/commits/f24d3a7de05d213f702621186f31a4c227f366c6,f24d3a7de05d213f702621186f31a4c227f366c6,"Streams: delta encode IDs based on key. Add count + deleted fields.

We used to have the master ID stored at the start of the listpack,
however using the key directly makes more sense in order to create a
space efficient representation: anyway the key at the radix tree is very
unlikely to change because of how the stream is implemented. Moreover on
nodes merging, to rewrite the merged listpacks is anyway the most
sensible operation, and we can use the iterator and the append-to-stream
function in order to avoid re-implementing the code needed for merging.

This commit also adds two items at the start of the listpack: the
number of valid items inside the listpack, and the number of items
marked as deleted. This means that there is no need to scan a listpack
in order to understand if it's a good candidate for garbage collection,
if the ration between valid/deleted items triggers the GC."
antirez,2017-09-27 21:12:43,https://api.github.com/repos/antirez/redis/git/commits/cea421a0211ac75e27513a8c7371042da6c8f4d3,cea421a0211ac75e27513a8c7371042da6c8f4d3,Streams: specify better how the master enty works.
antirez,2017-09-27 21:04:31,https://api.github.com/repos/antirez/redis/git/commits/7d0d9693c19b92c8ea60cef8ebaba4a456bd0f73,7d0d9693c19b92c8ea60cef8ebaba4a456bd0f73,Streams: modify tests to stress compression.
antirez,2017-09-27 15:41:32,https://api.github.com/repos/antirez/redis/git/commits/3f2d7e277e1754a5a421948bfbd45b5725a05148,3f2d7e277e1754a5a421948bfbd45b5725a05148,"Streams: items compression implemented.

The approach used is to set a fixed header at the start of every
listpack blob (that contains many entries). The header contains a
""master"" ID and fields, that are initially just obtained from the first
entry inserted in the listpack, so that the first enty is always well
compressed. Later every new entry is checked against these fields, and
if it matches, the SAMEFIELD flag is set in the entry so that we know to
just use the master entry flags. The IDs are always delta-encoded
against the first entry. This approach avoids cascading effects in which
entries are encoded depending on the previous entries, in order to avoid
complexity and rewritings of the data when data is removed in the middle
(which is a planned feature)."
antirez,2017-09-19 14:57:37,https://api.github.com/repos/antirez/redis/git/commits/8f00cf85a7ee93da987e8d0b899ada33f2a88505,8f00cf85a7ee93da987e8d0b899ada33f2a88505,"Streams: fixed memory leaks when blocking again for same stream.

blockForKeys() was not freeing the allocation holding the ID when the
key was already found busy. Fortunately the unit test checked explicitly
for blocking multiple times for the same key (copying a regression in
the blocking lists tests), so the bug was detected by the Redis test leak
checker."
antirez,2017-09-19 14:49:56,https://api.github.com/repos/antirez/redis/git/commits/ae9065d8080cff60efb97676de5f3bfb26c74285,ae9065d8080cff60efb97676de5f3bfb26c74285,Streams: tests for blocking and non-blocking XREAD.
antirez,2017-09-18 08:48:27,https://api.github.com/repos/antirez/redis/git/commits/eb1230c9990562da739f15913a795cf0d8f2f5af,eb1230c9990562da739f15913a795cf0d8f2f5af,Streams: XRANGE fuzz testing.
antirez,2017-09-15 14:56:18,https://api.github.com/repos/antirez/redis/git/commits/fa707ca15477c5d5871668a7b2ca2040b992df48,fa707ca15477c5d5871668a7b2ca2040b992df48,Streams: more advanced XADD and XRANGE tests.
antirez,2017-09-15 13:54:18,https://api.github.com/repos/antirez/redis/git/commits/7a41b402c1a5caae30dcd234d3d01c7f76ca5757,7a41b402c1a5caae30dcd234d3d01c7f76ca5757,Streams: basic XADD tests.
antirez,2017-09-15 10:37:04,https://api.github.com/repos/antirez/redis/git/commits/26d4f8e3ec74811076e8a71cd384ea89b10e0c13,26d4f8e3ec74811076e8a71cd384ea89b10e0c13,Streams: AOF rewriting + minor iterator improvements.
antirez,2017-09-15 10:17:25,https://api.github.com/repos/antirez/redis/git/commits/01ea018c4080e24b00d36e1cbf36c4d98b82ff40,01ea018c4080e24b00d36e1cbf36c4d98b82ff40,Streams: export iteration API.
antirez,2017-09-14 12:46:31,https://api.github.com/repos/antirez/redis/git/commits/9ed40f0fc35ce0050bd362a35c4f3f7fea189fb5,9ed40f0fc35ce0050bd362a35c4f3f7fea189fb5,Streams: implement streamReplyWithRange() in terms of the iterator.
antirez,2017-09-14 12:23:27,https://api.github.com/repos/antirez/redis/git/commits/a58733cacf45259b3e18fc68724950aceb86831d,a58733cacf45259b3e18fc68724950aceb86831d,"Streams: stream iteration refactoring, WIP 2."
antirez,2017-09-13 16:05:34,https://api.github.com/repos/antirez/redis/git/commits/b1ec3336337eabbd28b90832cebcaac4ffb69410,b1ec3336337eabbd28b90832cebcaac4ffb69410,"Streams: stream iteration refactoring, WIP 1."
antirez,2017-09-12 14:19:26,https://api.github.com/repos/antirez/redis/git/commits/1a603e1a87d88500a9723460dcf60c9b57dc99d7,1a603e1a87d88500a9723460dcf60c9b57dc99d7,Streams: fix bug in XREAD last received ID processing.
antirez,2017-09-12 08:54:20,https://api.github.com/repos/antirez/redis/git/commits/94af55c5ea55890ed5e3afdb9bb802d88d61eac7,94af55c5ea55890ed5e3afdb9bb802d88d61eac7,Streams: fix memory leak in freeStream().
antirez,2017-09-12 08:48:27,https://api.github.com/repos/antirez/redis/git/commits/3a0b78bc52e30a8599203ef501ea548b96f08b89,3a0b78bc52e30a8599203ef501ea548b96f08b89,Streams: rewrite XADD ID argument for AOF/slaves.
antirez,2017-09-11 16:02:57,https://api.github.com/repos/antirez/redis/git/commits/19b06935d59a39021330670776eb6b79002599c8,19b06935d59a39021330670776eb6b79002599c8,"Streams: fix XADD API and keyspace notifications.

XADD was suboptimal in the first incarnation of the command, not being
able to accept an ID (very useufl for replication), nor options for
having capped streams.

The keyspace notification for streams was not implemented."
antirez,2017-09-11 09:20:36,https://api.github.com/repos/antirez/redis/git/commits/db89f7474d3f4c784bfd8757b2bd3321e3efd9a1,db89f7474d3f4c784bfd8757b2bd3321e3efd9a1,"Streams: When XREAD blocks without COUNT, set a default one.

A client may lose a lot of time between invocations of blocking XREAD,
for example because it is processing the messages or for any other
cause. When it returns back, it may provide a low enough message ID that
the server will block to send an unreasonable number of messages in a
single call. For this reason we set a COUNT when the client is blocked
with XREAD calls, even if no COUNT is given. This is arbitrarily set to
1000 because it's enough to avoid slowing down the reception of many
messages, but low enough to avoid to block."
antirez,2017-09-11 09:06:53,https://api.github.com/repos/antirez/redis/git/commits/c128190026efd36e8b472d8874f7f54c79ba3e06,c128190026efd36e8b472d8874f7f54c79ba3e06,Streams: fix handleClientsBlockedOnKeys() access to invalid ID.
antirez,2017-09-09 09:10:59,https://api.github.com/repos/antirez/redis/git/commits/6468cb2e825cf8258654f83e82324332e9879745,6468cb2e825cf8258654f83e82324332e9879745,"Streams: fix XREAD ready-key signaling.

With lists we need to signal only on key creation, but streams can
provide data to clients listening at every new item added.
To make this slightly more efficient we now track different classes of
blocked clients to avoid signaling keys when there is nobody listening.
A typical case is when the stream is used as a time series DB and
accessed only by range with XRANGE."
antirez,2017-09-08 18:48:28,https://api.github.com/repos/antirez/redis/git/commits/b5be5093fecd02f4ee537af5ad473899bb6d7a61,b5be5093fecd02f4ee537af5ad473899bb6d7a61,"Streams: fix XREAD timeout handling, zero is valid."
antirez,2017-09-08 14:57:32,https://api.github.com/repos/antirez/redis/git/commits/2cacdcd6f8ee0af32618ceff2d303acaa61645ab,2cacdcd6f8ee0af32618ceff2d303acaa61645ab,Streams: XREAD related code to serve blocked clients.
antirez,2017-09-08 10:25:06,https://api.github.com/repos/antirez/redis/git/commits/0adb43b68febc4dfb2acc6818de36504a63162e4,0adb43b68febc4dfb2acc6818de36504a63162e4,Streams: XREAD ability to block fixed.
antirez,2017-09-08 10:09:02,https://api.github.com/repos/antirez/redis/git/commits/6a1c92d52dd7f3928795de910dc848f71dae5b3c,6a1c92d52dd7f3928795de910dc848f71dae5b3c,Streams: synchronous xread fixes and improvements.
antirez,2017-09-08 09:51:53,https://api.github.com/repos/antirez/redis/git/commits/a7d898334afea5593a67a8633a0c8b7e7cb8ab62,a7d898334afea5593a67a8633a0c8b7e7cb8ab62,Streams: XREAD get-key method fixed.
antirez,2017-09-08 09:40:16,https://api.github.com/repos/antirez/redis/git/commits/110041825c3af14feff03f43d12e3683f64cdc48,110041825c3af14feff03f43d12e3683f64cdc48,Streams: XREAD get-keys method.
antirez,2017-09-07 15:45:34,https://api.github.com/repos/antirez/redis/git/commits/fa61720d30b6c3088329fd5921fd8173bcd0a368,fa61720d30b6c3088329fd5921fd8173bcd0a368,"Streams: XREAD, first draft. Handling of blocked clients still missing."
antirez,2017-09-07 14:48:20,https://api.github.com/repos/antirez/redis/git/commits/e65b4825f0216f526b71f41818a494b0853ce715,e65b4825f0216f526b71f41818a494b0853ce715,Streams: XREAD arguments parsing.
antirez,2017-09-07 07:30:50,https://api.github.com/repos/antirez/redis/git/commits/4086dff477cc3d979d39c6c4ba9457575fc67d3e,4086dff477cc3d979d39c6c4ba9457575fc67d3e,Streams: augment client.bpop with XREAD specific fields.
antirez,2017-09-06 15:50:11,https://api.github.com/repos/antirez/redis/git/commits/f80dfbf464e2a2de00cb8de5ed064f302a7a7c82,f80dfbf464e2a2de00cb8de5ed064f302a7a7c82,Streams: more internal preparation for blocking XREAD.
antirez,2017-09-06 13:43:28,https://api.github.com/repos/antirez/redis/git/commits/4a377cecd82e21307a887bb5f9fba55d79044bb8,4a377cecd82e21307a887bb5f9fba55d79044bb8,Streams: initial work to use blocking lists logic for streams XREAD.
antirez,2017-09-06 11:11:47,https://api.github.com/repos/antirez/redis/git/commits/439120c62076718e8f7e7e602c623febaec6f04a,439120c62076718e8f7e7e602c623febaec6f04a,Streams: implement stream object release.
antirez,2017-09-06 10:03:17,https://api.github.com/repos/antirez/redis/git/commits/ec9bbe96bf47ae1f104c51cc6078eb72ca43cef0,ec9bbe96bf47ae1f104c51cc6078eb72ca43cef0,Streams: XLEN command.
antirez,2017-09-06 10:00:18,https://api.github.com/repos/antirez/redis/git/commits/98d184db12957d0558519022ad2205c3ac740a5a,98d184db12957d0558519022ad2205c3ac740a5a,Streams: Save stream->length in RDB.
antirez,2017-09-06 10:00:03,https://api.github.com/repos/antirez/redis/git/commits/cd18f06e9c674646e17b35125358df6eb11954dc,cd18f06e9c674646e17b35125358df6eb11954dc,Streams: change listpack allocator to zmalloc.
antirez,2017-09-05 14:24:11,https://api.github.com/repos/antirez/redis/git/commits/edd70c1993b79d85bfc2812b0bf4bf4771ff40ed,edd70c1993b79d85bfc2812b0bf4bf4771ff40ed,"Streams: RDB loading. RDB saving modified.

After a few attempts it looked quite saner to just add the last item ID
at the end of the serialized listpacks, instead of scanning the last
listpack loaded from head to tail just to fetch it. It's a disk space VS
CPU-and-simplicity tradeoff basically."
antirez,2017-09-05 11:14:13,https://api.github.com/repos/antirez/redis/git/commits/485014cc74d05436afc8257c5d7b05370410adc7,485014cc74d05436afc8257c5d7b05370410adc7,Streams: RDB saving.
antirez,2017-09-05 10:13:16,https://api.github.com/repos/antirez/redis/git/commits/100d43c1ac48e8e949bd622b302ba309ae498752,100d43c1ac48e8e949bd622b302ba309ae498752,Streams: assign value of 6 to OBJ_STREAM + some refactoring.
antirez,2017-08-30 10:40:27,https://api.github.com/repos/antirez/redis/git/commits/79866a6361829ed0602dedff9cb378c66977227a,79866a6361829ed0602dedff9cb378c66977227a,Streams: 12 commits squashed into the initial Streams implementation.
antirez,2017-11-29 16:11:46,https://api.github.com/repos/antirez/redis/git/commits/045d65c3af460a71d2b89b84f5e0b85d98320a77,045d65c3af460a71d2b89b84f5e0b85d98320a77,PSYNC2: Fix off by one buffer size in luaCreateFunction().
antirez,2017-11-29 15:38:16,https://api.github.com/repos/antirez/redis/git/commits/452ad2e928524cfe42856e869effd2d8b37ae280,452ad2e928524cfe42856e869effd2d8b37ae280,"PSYNC2: just store script bodies into RDB.

Related to #4483. As suggested by @soloestoy, we can retrieve the SHA1
from the body. Given that in the new implementation using AUX fields we
ended copying around a lot to create new objects and strings, extremize
such concept and trade CPU for space inside the RDB file."
antirez,2017-11-29 15:21:14,https://api.github.com/repos/antirez/redis/git/commits/28dfdca7335721de53ab296d80f005d7a7d2aa8c,28dfdca7335721de53ab296d80f005d7a7d2aa8c,"PSYNC2: luaCreateFunction() should handle NULL client parameter.

See #4483. This is needed because luaCreateFunction() is now called
from RDB loading code outside a client context."
antirez,2017-11-29 14:09:07,https://api.github.com/repos/antirez/redis/git/commits/f11a7585a8498689e8fd1afbcab4fdc2ba38c38f,f11a7585a8498689e8fd1afbcab4fdc2ba38c38f,"PSYNC2: Save Lua scripts state into RDB file.

This is currently needed in order to fix #4483, but this can be
useful in other contexts, so maybe later we may want to remove the
conditionals and always save/load scripts.

Note that we are using the ""lua"" AUX field here, in order to guarantee
backward compatibility of the RDB file. The unknown AUX fields must be
discarded by past versions of Redis."
antirez,2017-11-30 17:37:07,https://api.github.com/repos/antirez/redis/git/commits/6fb04d46374d9b79452a9e66786a16974077248b,6fb04d46374d9b79452a9e66786a16974077248b,Regression test: Slave restart with EVALSHA in backlog issue #4483.
antirez,2017-11-30 17:30:06,https://api.github.com/repos/antirez/redis/git/commits/3b9be93fdab81e27d68814aa794807897055af0d,3b9be93fdab81e27d68814aa794807897055af0d,"Prevent corruption of server.executable after DEBUG RESTART.

Doing the following ended with a broken server.executable:

1. Start Redis with src/redis-server
2. Send CONFIG SET DIR /tmp/
3. Send DEBUG RESTART

At this point we called execve with an argv[0] that is no longer related
to the new path. So after the restart the absolute path of the
executable is recomputed in the wrong way. With this fix we pass the
absolute path already computed as argv[0]."
antirez,2017-11-30 17:08:21,https://api.github.com/repos/antirez/redis/git/commits/d8f8701032b8f87b998129e03dddf992baa803d2,d8f8701032b8f87b998129e03dddf992baa803d2,Be more verbose when DEBUG RESTART fails.
soloestoy,2017-11-30 10:11:05,https://api.github.com/repos/antirez/redis/git/commits/43be967690d7b778cf829540b504a9662177511d,43be967690d7b778cf829540b504a9662177511d,networking: optimize unlinkClient() in freeClient()
soloestoy,2017-11-30 02:27:12,https://api.github.com/repos/antirez/redis/git/commits/1b5f56d0428a8ea7cea4e6d501dbece7ff987578,1b5f56d0428a8ea7cea4e6d501dbece7ff987578,aof: cast sdslen to ssize_t
soloestoy,2017-11-30 02:22:12,https://api.github.com/repos/antirez/redis/git/commits/2d73cf236725e0f37394eed20640670a4888d426,2d73cf236725e0f37394eed20640670a4888d426,aof: fix the short write
itamarhaber,2017-11-29 22:30:30,https://api.github.com/repos/antirez/redis/git/commits/0752a834f9311194d0d409d24ebee7349aa6c1a0,0752a834f9311194d0d409d24ebee7349aa6c1a0,Check arity in SLOWLOG before accessing arg
antirez,2017-11-29 16:16:13,https://api.github.com/repos/antirez/redis/git/commits/2785d6caa064fc428e1d20c54d60ac4fc23147b5,2785d6caa064fc428e1d20c54d60ac4fc23147b5,Merge branch 'lfu-fixes' into unstable
itamarhaber,2017-11-28 19:28:40,https://api.github.com/repos/antirez/redis/git/commits/51d42c88a66edbb5b923fa68c1e78fa11f8bc3c3,51d42c88a66edbb5b923fa68c1e78fa11f8bc3c3,Merge branch 'unstable' into help_subcommands
itamarhaber,2017-11-27 15:57:44,https://api.github.com/repos/antirez/redis/git/commits/59d52f7fabb48c3a6ebaac869ce3d6e5f3dc704f,59d52f7fabb48c3a6ebaac869ce3d6e5f3dc704f,"Standardizes the 'help' subcommand

This adds a new `addReplyHelp` helper that's used by commands
when returning a help text. The following commands have been
touched: DEBUG, OBJECT, COMMAND, PUBSUB, SCRIPT and SLOWLOG.

WIP

Fix entry command table entry for OBJECT for HELP option.

After #4472 the command may have just 2 arguments.

Improve OBJECT HELP descriptions.

See #4472.

WIP 2

WIP 3"
antirez,2017-11-28 17:44:11,https://api.github.com/repos/antirez/redis/git/commits/565e139a5631a777254e222d1c50ea6d696e1a8e,565e139a5631a777254e222d1c50ea6d696e1a8e,"Merge pull request #4200 from jeesyn/fix_typo

fix a typo"
antirez,2017-11-28 17:43:45,https://api.github.com/repos/antirez/redis/git/commits/b998e2035c1de289779aa4ca875c6bdd4148be09,b998e2035c1de289779aa4ca875c6bdd4148be09,"Merge pull request #4165 from zyegfryed/patch-1

Fix some typos"
antirez,2017-11-28 17:41:51,https://api.github.com/repos/antirez/redis/git/commits/923502a70b08a9635e857bd7f09c1601bd59a5c4,923502a70b08a9635e857bd7f09c1601bd59a5c4,"Merge pull request #4166 from charpty/wip-redisclic-typo

redis-cli.c typo: helpe -> helper."
antirez,2017-11-28 17:41:28,https://api.github.com/repos/antirez/redis/git/commits/26826329f530d068096796b8b972106f266eb738,26826329f530d068096796b8b972106f266eb738,"Merge pull request #4167 from charpty/wip-redisclic-typo2

redis-cli.c typo: Requets -> Requests."
antirez,2017-11-28 17:40:43,https://api.github.com/repos/antirez/redis/git/commits/3508b9c44073e9fba47a57573e657471d13bd6dc,3508b9c44073e9fba47a57573e657471d13bd6dc,"Merge pull request #4170 from TehWebby/patch-2

Fix typo"
antirez,2017-11-28 17:40:02,https://api.github.com/repos/antirez/redis/git/commits/4e55df4b5c1be4ecf30e013692ac327b5f3471e9,4e55df4b5c1be4ecf30e013692ac327b5f3471e9,"Merge pull request #4172 from TehWebby/patch-3

Fix typo"
antirez,2017-11-28 17:39:43,https://api.github.com/repos/antirez/redis/git/commits/ad171f5ce0762efa0e1de082f8431c892eaab68f,ad171f5ce0762efa0e1de082f8431c892eaab68f,"Merge pull request #4176 from KrauseFx/patch-1

Update link to https and use inline link"
antirez,2017-11-28 17:38:49,https://api.github.com/repos/antirez/redis/git/commits/851e9fc48b5155de9fb47f0185b3523b59373a97,851e9fc48b5155de9fb47f0185b3523b59373a97,t_hash.c: clarify calling two times the same function.
antirez,2017-11-28 17:27:35,https://api.github.com/repos/antirez/redis/git/commits/aeee039a87e5515e8bb68836451c69b0d7839523,aeee039a87e5515e8bb68836451c69b0d7839523,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2017-11-28 17:25:14,https://api.github.com/repos/antirez/redis/git/commits/c44732ac58befabf0d6f72f2dae0005ffef7d3c4,c44732ac58befabf0d6f72f2dae0005ffef7d3c4,"adlist: fix listJoin() in the case the second list is empty.

See #4192, the original PR removed lines of code that are actually
needed, so thanks to @chunqiulfq for reporting the problem, but merging
solution from @jeesyn after checking, together with @artix75, that the
logic covers all the cases."
antirez,2017-11-28 17:08:32,https://api.github.com/repos/antirez/redis/git/commits/c3806f5b7238b1e11e4b48b8bfb22a8dd0d36c1f,c3806f5b7238b1e11e4b48b8bfb22a8dd0d36c1f,"Merge pull request #4215 from lamby/correct-faield-spelling

Correct spelling of ""faield""."
antirez,2017-11-28 16:33:23,https://api.github.com/repos/antirez/redis/git/commits/a13106e0014644d71bf3aaa577a4a0cce87bf6ed,a13106e0014644d71bf3aaa577a4a0cce87bf6ed,"Merge pull request #4374 from rouzier/patch-1

Fix file descriptor leak and error handling"
antirez,2017-11-28 16:23:48,https://api.github.com/repos/antirez/redis/git/commits/bf71b120f10edbefb91fa1c12c9ab1e264e56289,bf71b120f10edbefb91fa1c12c9ab1e264e56289,"Merge pull request #4451 from devnexen/minor_build_fixes

Fix undefined behavior constant defined."
itamarhaber,2017-11-28 16:18:45,https://api.github.com/repos/antirez/redis/git/commits/8c7f90e91e1e6324db8a1e9ca20e3dc95ce049d0,8c7f90e91e1e6324db8a1e9ca20e3dc95ce049d0,Standardizes arity handling of DEBUG
antirez,2017-11-27 18:04:58,https://api.github.com/repos/antirez/redis/git/commits/06ca9d683920da19ad53532f8cd55b54584027bc,06ca9d683920da19ad53532f8cd55b54584027bc,"LFU: Fix LFUDecrAndReturn() to just decrement.

Splitting the popularity in half actually just needs decrementing the
counter because the counter is logarithmic."
soloestoy,2017-10-19 06:04:39,https://api.github.com/repos/antirez/redis/git/commits/9f131c9a895fac9418cceb3a340627f2dac2162a,9f131c9a895fac9418cceb3a340627f2dac2162a,LFU: add hotkeys option to redis-cli
soloestoy,2017-10-15 12:17:55,https://api.github.com/repos/antirez/redis/git/commits/583c31472577fb8175e17ee0ce243972f4dd8425,583c31472577fb8175e17ee0ce243972f4dd8425,"LFU: do some changes about LFU to find hotkeys

Firstly, use access time to replace the decreas time of LFU.
For function LFUDecrAndReturn,
it should only try to get decremented counter,
not update LFU fields, we will update it in an explicit way.
And we will times halve the counter according to the times of
elapsed time than server.lfu_decay_time.
Everytime a key is accessed, we should update the LFU
including update access time, and increment the counter after
call function LFUDecrAndReturn.
If a key is overwritten, the LFU should be also updated.
Then we can use `OBJECT freq` command to get a key's frequence,
and LFUDecrAndReturn should be called in `OBJECT freq` command
in case of the key has not been accessed for a long time,
because we update the access time only when the key is read or
overwritten."
soloestoy,2017-10-13 03:09:48,https://api.github.com/repos/antirez/redis/git/commits/53cea97204ebc8d863ca99db4c9705ce0f87892f,53cea97204ebc8d863ca99db4c9705ce0f87892f,LFU: change lfu* parameters to int
soloestoy,2017-10-13 02:52:10,https://api.github.com/repos/antirez/redis/git/commits/dfc42ec4471ea3f90c73c123b655e4a10c0e922e,dfc42ec4471ea3f90c73c123b655e4a10c0e922e,LFU: fix the missing of config get and rewrite
antirez,2017-11-27 17:09:05,https://api.github.com/repos/antirez/redis/git/commits/75fa7879e6b4408247db6b7eba3def64c00d4f9a,75fa7879e6b4408247db6b7eba3def64c00d4f9a,"Improve OBJECT HELP descriptions.

See #4472."
antirez,2017-11-27 12:16:07,https://api.github.com/repos/antirez/redis/git/commits/b412c544fd6d5efd1e3986383ef6bef7775fe48f,b412c544fd6d5efd1e3986383ef6bef7775fe48f,"Fix entry command table entry for OBJECT for HELP option.

After #4472 the command may have just 2 arguments."
antirez,2017-11-27 11:41:02,https://api.github.com/repos/antirez/redis/git/commits/29252391c4856e500277bcd84ae0f57b8e6ca661,29252391c4856e500277bcd84ae0f57b8e6ca661,"Merge pull request #4472 from itamarhaber/object_patch

A minor fix and `help` subcommand for `OBJECT`"
itamarhaber,2016-07-23 18:41:20,https://api.github.com/repos/antirez/redis/git/commits/1c082200224b91c571c7b231b9e4a5e3487dda57,1c082200224b91c571c7b231b9e4a5e3487dda57,Adds -u <uri> option to redis-cli.
itamarhaber,2017-11-24 17:59:05,https://api.github.com/repos/antirez/redis/git/commits/02d38f6b514400372089219618ee0b1bc36c7431,02d38f6b514400372089219618ee0b1bc36c7431,Adds `OBJECT help`
itamarhaber,2017-11-24 17:58:37,https://api.github.com/repos/antirez/redis/git/commits/b28fb3d7530f7d682223e96ed88045f11dfef989,b28fb3d7530f7d682223e96ed88045f11dfef989,"Prevents `OBJECT freq` with `noeviction`

When maxmemory is set to noeviction, idletime is implicitly kept. This renders access frequency nonsensical."
antirez,2017-11-24 17:33:31,https://api.github.com/repos/antirez/redis/git/commits/dc2df135b34344446b87600e1204b11e1fb8fff5,dc2df135b34344446b87600e1204b11e1fb8fff5,"Test: regression test for latency expire events logging bug.

Regression for #4452."
antirez,2017-11-24 17:21:35,https://api.github.com/repos/antirez/redis/git/commits/c508cb67939ac7c3e8ee5d1bcad3e8b5ab773081,c508cb67939ac7c3e8ee5d1bcad3e8b5ab773081,"Merge pull request #4452 from soloestoy/expire-latency

expire & latency: fix the missing latency records generated by expire"
antirez,2017-11-24 12:29:54,https://api.github.com/repos/antirez/redis/git/commits/7229fa8d6d8acdedf0383de226b9b91a7d80197d,7229fa8d6d8acdedf0383de226b9b91a7d80197d,Modules: fix memory leak in RM_IsModuleNameBusy().
antirez,2017-11-24 10:08:22,https://api.github.com/repos/antirez/redis/git/commits/4d063bb6bae5db69cef2ef9677b5662d64fbed4b,4d063bb6bae5db69cef2ef9677b5662d64fbed4b,"PSYNC2: reorganize comments related to recent fixes.

Related to PR #4412 and issue #4407."
antirez,2017-11-24 09:56:18,https://api.github.com/repos/antirez/redis/git/commits/9d86ae4597c37b33cd0fa2fbc4d80f69ace6b157,9d86ae4597c37b33cd0fa2fbc4d80f69ace6b157,"Merge pull request #4412 from soloestoy/bugfix-psync2

PSYNC2: safe free backlog when reach the time limit and others"
antirez,2017-11-24 08:37:06,https://api.github.com/repos/antirez/redis/git/commits/f739c27229b4b20d809e5453864748f2bd2c4d5e,f739c27229b4b20d809e5453864748f2bd2c4d5e,"Merge pull request #4344 from soloestoy/fix-module-name-conflict

Fix module name conflict"
antirez,2017-11-24 07:59:23,https://api.github.com/repos/antirez/redis/git/commits/58ac57f6651c1b3c8223cf04fe86a2c51aef1bc7,58ac57f6651c1b3c8223cf04fe86a2c51aef1bc7,"Merge pull request #4470 from oranagra/fix_string_to_double

fix string to double conversion, stopped parsing on \0 …"
oranagra,2017-11-23 14:42:15,https://api.github.com/repos/antirez/redis/git/commits/adf2701cc95085a4a9980da7b7367b1836c5a0f2,adf2701cc95085a4a9980da7b7367b1836c5a0f2,"fix string to double conversion, stopped parsing on \0 even if the string has more data.

getLongLongFromObject calls string2ll which has this line:
/* Return if not all bytes were used. */
so if you pass an sds with 3 characters ""1\01"" it will fail.

but getLongDoubleFromObject calls strtold, and considers it ok if eptr[0]==`\0`
i.e. if the end of the string found by strtold ends with null terminator

127.0.0.1:6379> set a 1
OK
127.0.0.1:6379> setrange a 2 2
(integer) 3
127.0.0.1:6379> get a
""1\x002""
127.0.0.1:6379> incrbyfloat a 2
""3""
127.0.0.1:6379> get a
""3"""
antirez,2017-11-23 12:05:00,https://api.github.com/repos/antirez/redis/git/commits/de914ede9385c2886770ac462564be1a659b56aa,de914ede9385c2886770ac462564be1a659b56aa,"Modules: fix for scripting replication of modules commands.

See issue #4466 / #4467."
antirez,2017-11-23 12:38:43,https://api.github.com/repos/antirez/redis/git/commits/ada206559db76b2103c446c2691cb06fbc8c5d31,ada206559db76b2103c446c2691cb06fbc8c5d31,"Merge pull request #4467 from yossigo/fix-nested-multi

Nested MULTI/EXEC may replicate in different cases."
yossigo,2017-11-22 13:09:30,https://api.github.com/repos/antirez/redis/git/commits/2c70d28295b38060692881c7824df602ade6c4cb,2c70d28295b38060692881c7824df602ade6c4cb,"Nested MULTI/EXEC may replicate in different cases.

For example:
1. A module command called within a MULTI section.
2. A Lua script with replicate_commands() called within a MULTI section.
3. A module command called from a Lua script in the above context."
soloestoy,2017-11-04 15:05:00,https://api.github.com/repos/antirez/redis/git/commits/ea2e51c630f972b23d3557f6369b13d983c12f17,ea2e51c630f972b23d3557f6369b13d983c12f17,PSYNC2: persist cached_master's dbid inside the RDB
soloestoy,2017-11-22 04:05:30,https://api.github.com/repos/antirez/redis/git/commits/93037f764209e86f3fcb240a642334fd67552935,93037f764209e86f3fcb240a642334fd67552935,"PSYNC2: make repl_stream_db never be -1

it means that after this change all the replication
info in RDB is valid, and it can distinguish us from
the older version."
soloestoy,2017-11-21 15:35:30,https://api.github.com/repos/antirez/redis/git/commits/7a808fd8a7122fbc848767ff97de7f471a158cdb,7a808fd8a7122fbc848767ff97de7f471a158cdb,expire & latency: fix the missing latency records generated by expire
soloestoy,2017-11-17 17:21:39,https://api.github.com/repos/antirez/redis/git/commits/57bd8feb8d81064cd53a7f124e7509134fb7459b,57bd8feb8d81064cd53a7f124e7509134fb7459b,rehash: handle one db until finished
devnexen,2017-11-19 16:23:42,https://api.github.com/repos/antirez/redis/git/commits/62689ef0cf3c805b100ff5260485368e1c9b683c,62689ef0cf3c805b100ff5260485368e1c9b683c,Fix undefined behavior constant defined.
antirez,2017-11-08 16:06:09,https://api.github.com/repos/antirez/redis/git/commits/cf9a3f704850e82793239d9349ffa282eb9217f5,cf9a3f704850e82793239d9349ffa282eb9217f5,"Merge pull request #2741 from kmiku7/unstable

fix boundary case for _dictNextPower"
antirez,2017-11-08 14:42:45,https://api.github.com/repos/antirez/redis/git/commits/30db805548f2f65ee65441528e5ca0e84c243dce,30db805548f2f65ee65441528e5ca0e84c243dce,"Merge pull request #4431 from itamarhaber/patch-10

Fixes an off-by-one in argument handling of `MEMORY USAGE`"
itamarhaber,2017-11-08 14:08:29,https://api.github.com/repos/antirez/redis/git/commits/2564963dc8a9894f7b066988808af7e401f572e8,2564963dc8a9894f7b066988808af7e401f572e8,"Fixes an off-by-one in argument handling of `MEMORY USAGE`

Fixes #4430"
antirez,2017-11-06 11:33:42,https://api.github.com/repos/antirez/redis/git/commits/a1944c3e4d2fb2b5aef7c6c3efc769ef2edd71ee,a1944c3e4d2fb2b5aef7c6c3efc769ef2edd71ee,"Fix saving of zero-length lists.

Normally in modern Redis you can't create zero-len lists, however it's
possible to load them from old RDB files generated, for instance, using
Redis 2.8 (see issue #4409). The ""Right Thing"" would be not loading such
lists at all, but this requires to hook in rdb.c random places in a not
great way, for a problem that is at this point, at best, minor.

Here in this commit instead I just fix the fact that zero length lists,
materialized as quicklists with the first node set to NULL, were
iterated in the wrong way while they are saved, leading to a crash.

The other parts of the list implementation are apparently able to deal
with empty lists correctly, even if they are no longer a thing."
antirez,2017-11-03 09:19:27,https://api.github.com/repos/antirez/redis/git/commits/34d5804d4c85d077b6af6265ebd86f35ecca89de,34d5804d4c85d077b6af6265ebd86f35ecca89de,"SDS: improve sdsRemoveFreeSpace() to avoid useless data copy.

Since SDS v2, we no longer have a single header, so the function to
rewrite the SDS in terms of the minimum space required, instead of just
using realloc() and let the underlying allocator decide what to do,
was doing an allocation + copy every time the minimum possible header
needed to represent the string was different than the current one.
This could be often a bit wasteful, because if we go, for instance, from
the 32 bit fields header to the 16 bit fields header, the overhead of
the header is normally very small. With this commit we call realloc
instead, unless the change in header size is very significant in relation
to the string length."
soloestoy,2017-11-02 02:45:33,https://api.github.com/repos/antirez/redis/git/commits/b8579c225cd0ea83222938bb188cd74501fb1627,b8579c225cd0ea83222938bb188cd74501fb1627,PSYNC2: clarify the scenario when repl_stream_db can be -1
soloestoy,2017-11-01 09:52:43,https://api.github.com/repos/antirez/redis/git/commits/885c4f856e5a41e86ebf2a3233dc3ba2bae6945e,885c4f856e5a41e86ebf2a3233dc3ba2bae6945e,PSYNC2 & RDB: fix the missing rdbSaveInfo for BGSAVE
soloestoy,2017-11-01 09:32:23,https://api.github.com/repos/antirez/redis/git/commits/6ddf0ea29340891d9934892b6c239d160d1ee0c4,6ddf0ea29340891d9934892b6c239d160d1ee0c4,"PSYNC2: safe free backlog when reach the time limit

When we free the backlog, we should use a new
replication ID and clear the ID2. Since without
backlog we can not increment master_repl_offset
even do write commands, that may lead to inconsistency
when we try to connect a ""slave-before"" master
(if this master is our slave before, our replid
equals the master's replid2). As the master have our
history, so we can match the master's replid2 and
second_replid_offset, that make partial sync work,
but the data is inconsistent."
antirez,2017-10-31 08:41:22,https://api.github.com/repos/antirez/redis/git/commits/ffcf7d5ab1e98d84c28af9bea7be76c6737820ad,ffcf7d5ab1e98d84c28af9bea7be76c6737820ad,"Fix buffer overflows occurring reading redis.conf.

There was not enough sanity checking in the code loading the slots of
Redis Cluster from the nodes.conf file, this resulted into the
attacker's ability to write data at random addresses in the process
memory, by manipulating the index of the array. The bug seems
exploitable using the following techique: the config file may be altered so
that one of the nodes gets, as node ID (which is the first field inside the
structure) some data that is actually executable: then by writing this
address in selected places, this node ID part can be executed after a
jump. So it is mostly just a matter of effort in order to exploit the
bug. In practice however the issue is not very critical because the
bug requires an unprivileged user to be able to modify the Redis cluster
nodes configuration, and at the same time this should result in some
gain. However Redis normally is unprivileged as well. Yet much better to
have this fixed indeed.

Fix #4278."
antirez,2017-10-30 12:45:46,https://api.github.com/repos/antirez/redis/git/commits/b2e295971ff9dce6552e717f542c056524d002c8,b2e295971ff9dce6552e717f542c056524d002c8,Regression test for issue #4391.
antirez,2017-10-30 12:20:13,https://api.github.com/repos/antirez/redis/git/commits/de474186bdb1a595bb77ccec577754134884bb52,de474186bdb1a595bb77ccec577754134884bb52,"More robust object -> double conversion.

Certain checks were useless, at the same time certain malformed inputs
were accepted without problems (emtpy strings parsed as zero).
Cases where strtod() returns ERANGE but we still want to parse the input
where ok in getDoubleFromObject() but not in the long variant.

As a side effect of these fixes, this commit fixes #4391."
rouzier,2017-10-13 17:20:45,https://api.github.com/repos/antirez/redis/git/commits/6eb996540c662832370ddaac25484c4cbbca4e7a,6eb996540c662832370ddaac25484c4cbbca4e7a,Fix file descriptor leak and error handling
antirez,2017-09-28 21:15:34,https://api.github.com/repos/antirez/redis/git/commits/2bf8c2c1300da1909cc8c8c35d13e46bcf59aa31,2bf8c2c1300da1909cc8c8c35d13e46bcf59aa31,Limit statement in RM_BlockClient() to 80 cols.
antirez,2017-09-28 12:40:55,https://api.github.com/repos/antirez/redis/git/commits/54ad626cce2403d0a0ba8e6f3303ed02ee88bc94,54ad626cce2403d0a0ba8e6f3303ed02ee88bc94,"Merge pull request #4337 from dvirsky/module_ctx_flags

Module Context flags"
soloestoy,2017-09-28 09:38:40,https://api.github.com/repos/antirez/redis/git/commits/6dffc1b7a33f1fd4fa1ff0368933ed575bca5606,6dffc1b7a33f1fd4fa1ff0368933ed575bca5606,Modules: handle the busy module name
soloestoy,2017-09-28 08:21:21,https://api.github.com/repos/antirez/redis/git/commits/cb9dde3280244ec3b449f081639c37dd5a1916ab,cb9dde3280244ec3b449f081639c37dd5a1916ab,Modules: handle the conflict of registering commands
dvirsky,2017-09-27 12:17:53,https://api.github.com/repos/antirez/redis/git/commits/7393fd814e0f753b2424a192cddee6b130be6e3a,7393fd814e0f753b2424a192cddee6b130be6e3a,Added safety net preventing redis from crashing if a module decide to block in MULTI
dvirsky,2017-09-27 08:56:40,https://api.github.com/repos/antirez/redis/git/commits/b246635d6d5724e5f1275ac299d3dcf330b1a315,b246635d6d5724e5f1275ac299d3dcf330b1a315,Renamed GetCtxFlags to GetContextFlags
dvirsky,2017-09-27 08:52:39,https://api.github.com/repos/antirez/redis/git/commits/616c546b010b45571ec2fb569f127e50c9c5bf42,616c546b010b45571ec2fb569f127e50c9c5bf42,Added support for module context flags with RM_GetCtxFlags
antirez,2017-09-21 10:35:04,https://api.github.com/repos/antirez/redis/git/commits/474adba9fa7a173d866300b1abd7cddd34cbac40,474adba9fa7a173d866300b1abd7cddd34cbac40,Clarify comment in change fixing #4323.
antirez,2017-09-21 10:32:02,https://api.github.com/repos/antirez/redis/git/commits/fa2c0582cfa614cd854b4a64ddce1493da9317bb,fa2c0582cfa614cd854b4a64ddce1493da9317bb,"Merge pull request #4324 from soloestoy/lazyfree-fix-memory-leak

Lazyfree: avoid memory leak when free slowlog entry"
soloestoy,2017-09-21 06:19:21,https://api.github.com/repos/antirez/redis/git/commits/269760edbbf6cdebe1c00040234b1fa6ba8851ce,269760edbbf6cdebe1c00040234b1fa6ba8851ce,Lazyfree: avoid memory leak when free slowlog entry
antirez,2017-09-20 09:28:13,https://api.github.com/repos/antirez/redis/git/commits/bb3b5ddd1968d2715acc37b63124ccf461276160,bb3b5ddd1968d2715acc37b63124ccf461276160,PSYNC2: More refinements related to #4316.
soloestoy,2017-09-20 05:47:42,https://api.github.com/repos/antirez/redis/git/commits/b541ccef25d20749c739b858ef8694512b7f3bce,b541ccef25d20749c739b858ef8694512b7f3bce,"PSYNC2: make persisiting replication info more solid

This commit is a reinforcement of commit c1c99e9.

1. Replication information can be stored when the RDB file is
generated by a mater using server.slaveseldb when server.repl_backlog
is not NULL, or set repl_stream_db be -1. That's safe, because
NULL server.repl_backlog will trigger full synchronization,
then master will send SELECT command to replicaiton stream.
2. Only do rdbSave* when rsiptr is not NULL,
if we do rdbSave* without rdbSaveInfo, slave will miss repl-stream-db.
3. Save the replication informations also in the case of
SAVE command, FLUSHALL command and DEBUG reload."
antirez,2017-09-19 21:03:39,https://api.github.com/repos/antirez/redis/git/commits/c1c99e9f4e19b3c68d810a51449b34c2261e24c9,c1c99e9f4e19b3c68d810a51449b34c2261e24c9,"PSYNC2: Fix the way replication info is saved/loaded from RDB.

This commit attempts to fix a number of bugs reported in #4316.
They are related to the way replication info like replication ID,
offsets, and currently selected DB in the master client, are stored
and loaded by Redis. In order to avoid inconsistencies the changes in
this commit try to enforce that:

1. Replication information are only stored when the RDB file is
generated by a slave that has a valid 'master' client, so that we can
always extract the currently selected DB.
2. When replication informations are persisted in the RDB file, all the
info for a successful PSYNC or nothing is persisted.
3. The RDB replication informations are only loaded if the instance is
configured as a slave, otherwise a master can start with IDs that relate
to a different history of the data set, and stil retain such IDs in the
future while receiving unrelated writes."
antirez,2017-09-19 08:35:49,https://api.github.com/repos/antirez/redis/git/commits/a4152119c6c13e5a8940513e0983e02d5c5545f2,a4152119c6c13e5a8940513e0983e02d5c5545f2,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2017-09-19 08:33:14,https://api.github.com/repos/antirez/redis/git/commits/b75ae0bbea794dbfd6549d308ab29f9b963e0722,b75ae0bbea794dbfd6549d308ab29f9b963e0722,"PSYNC2: Create backlog on slave partial sync as well.

A slave may be started with an RDB file able to provide enough slave to
perform a successful partial SYNC with its master. However in such a
case, how outlined in issue #4268, the slave backlog will not be
started, since it was only initialized on full syncs attempts. This
creates different problems with successive PSYNC attempts that will
always result in full synchronizations.

Thanks to @fdingiit for discovering the issue."
antirez,2017-09-18 10:18:57,https://api.github.com/repos/antirez/redis/git/commits/2d13bf4c59e25e179e530edbd907cfd3749f8cc2,2d13bf4c59e25e179e530edbd907cfd3749f8cc2,"Merge pull request #3785 from GitHubMota/unstable

redis-benchmark: default value size usage update."
antirez,2017-09-18 10:18:15,https://api.github.com/repos/antirez/redis/git/commits/9b4cb4addcf03436edd9504a3d9b6bbc5c13cf1e,9b4cb4addcf03436edd9504a3d9b6bbc5c13cf1e,"Merge pull request #3554 from jybaek/Delete_duplicate

Remove Duplicate Processing"
antirez,2017-09-18 10:03:41,https://api.github.com/repos/antirez/redis/git/commits/8885921dfbdd5fee2d5904f6f296435f038f45e1,8885921dfbdd5fee2d5904f6f296435f038f45e1,"Merge pull request #4311 from oranagra/aof_shutdown_flush

Flush append only buffers before existing."
oranagra,2017-09-17 04:22:16,https://api.github.com/repos/antirez/redis/git/commits/b122cadc666054ea83c699d65b518dc0f6f633c0,b122cadc666054ea83c699d65b518dc0f6f633c0,"Flush append only buffers before existing.

when SHUTDOWN command is recived it is possible that some of the recent
command were not yet flushed from the AOF buffer, and the server
experiences data loss at shutdown."
jianqingdu,2017-08-31 02:20:14,https://api.github.com/repos/antirez/redis/git/commits/498f65ffb77e7fab9c9085394657ba7b46bedde9,498f65ffb77e7fab9c9085394657ba7b46bedde9,"fix not call va_end when syncWrite() failed

fix not call va_end when syncWrite() failed in sendSynchronousCommand()"
aspirewit,2017-08-18 03:27:04,https://api.github.com/repos/antirez/redis/git/commits/2ef8c2f6c22e27507e62bf937a5b4e9f7429fdbd,2ef8c2f6c22e27507e62bf937a5b4e9f7429fdbd,Update the comment
lamby,2017-08-13 05:21:03,https://api.github.com/repos/antirez/redis/git/commits/6b9f02ac1263b21675ecd4a05cc12d3da41e8a0f,6b9f02ac1263b21675ecd4a05cc12d3da41e8a0f,"Correct spelling of ""faield""."
antirez,2017-08-03 10:18:58,https://api.github.com/repos/antirez/redis/git/commits/202c2ebec4d47d6f8cfbb6c91dd4486dd62aebf6,202c2ebec4d47d6f8cfbb6c91dd4486dd62aebf6,"Merge pull request #4191 from jybaek/unstable

Add missing fclose()"
jybaek,2017-08-03 08:28:04,https://api.github.com/repos/antirez/redis/git/commits/a8c08b9b7668f784cfd24ecd2afb2fdd2ae65312,a8c08b9b7668f784cfd24ecd2afb2fdd2ae65312,Add missing fclose()
antirez,2017-08-02 10:51:26,https://api.github.com/repos/antirez/redis/git/commits/34a79c353f15900f004057858f0d57a29d68b63c,34a79c353f15900f004057858f0d57a29d68b63c,"Merge pull request #3935 from itamarhaber/module-cmdstats

Changes command stats iteration to being dict-based"
KrauseFx,2017-07-28 17:04:52,https://api.github.com/repos/antirez/redis/git/commits/0c6ea46f2bfc0d2ee6ef7b2e5e04ce6502d9fa27,0c6ea46f2bfc0d2ee6ef7b2e5e04ce6502d9fa27,Update link to https and use inline link
antirez,2017-07-28 15:47:54,https://api.github.com/repos/antirez/redis/git/commits/bc64df9a66def9a86461d2f215a142ffffd03369,bc64df9a66def9a86461d2f215a142ffffd03369,Add MEMORY DOCTOR to MEMORY HELP.
TehWebby,2017-07-27 06:27:46,https://api.github.com/repos/antirez/redis/git/commits/f06f10e66bfe5afdb013798e02c6aec7937435a5,f06f10e66bfe5afdb013798e02c6aec7937435a5,Typo fix
TehWebby,2017-07-27 00:37:37,https://api.github.com/repos/antirez/redis/git/commits/2e6f28500941d7a6f24f3831e9cabcb576d290fd,2e6f28500941d7a6f24f3831e9cabcb576d290fd,Fix typo
charpty,2017-07-26 13:33:29,https://api.github.com/repos/antirez/redis/git/commits/00954f4d48f1e2fa42dc2a4ae6090ec083996c11,00954f4d48f1e2fa42dc2a4ae6090ec083996c11,"redis-cli.c typo: Requets -> Requests.

Signed-off-by: Bo Cai <charpty@gmail.com>"
charpty,2017-07-26 13:24:28,https://api.github.com/repos/antirez/redis/git/commits/005d9fa8615bfffb550c62f94a88056e06858e74,005d9fa8615bfffb550c62f94a88056e06858e74,"redis-cli.c typo: helpe -> helper.

Signed-off-by: Bo Cai <charpty@gmail.com>"
zyegfryed,2017-07-26 12:11:05,https://api.github.com/repos/antirez/redis/git/commits/22bcee5178c68255d1ba7da908405161c4ffbdf5,22bcee5178c68255d1ba7da908405161c4ffbdf5,Fix some typos
GitHubMota,2017-01-28 03:20:23,https://api.github.com/repos/antirez/redis/git/commits/81fe7a4733ff6c1f7fbfaeb190c963d2d2826280,81fe7a4733ff6c1f7fbfaeb190c963d2d2826280,"redis-benchmark: default value size usage update.

default size of SET/GET value in usage should be 3 bytes as in main code."
antirez,2017-07-24 13:20:31,https://api.github.com/repos/antirez/redis/git/commits/dc997755bf8c2d69899957a8ab6dc41aed0c7ddb,dc997755bf8c2d69899957a8ab6dc41aed0c7ddb,"Merge pull request #1934 from badboy/install-script-1922

Don't use extended Regexp Syntax"
antirez,2017-07-24 13:19:53,https://api.github.com/repos/antirez/redis/git/commits/6b64cc47a07005af1c3dfff7469d76e2ed1a8ea7,6b64cc47a07005af1c3dfff7469d76e2ed1a8ea7,"Merge pull request #2259 from badboy/fix-2258

Check that the whole first argument is a number"
antirez,2017-07-24 13:19:21,https://api.github.com/repos/antirez/redis/git/commits/964224b77fb4361e337d2f679fd4e6ccb2fa33c0,964224b77fb4361e337d2f679fd4e6ccb2fa33c0,"Merge pull request #4124 from lamby/proceding-proceeding-typo

Correct proceding -> proceeding typo."
antirez,2017-07-24 13:18:56,https://api.github.com/repos/antirez/redis/git/commits/ae40e5f362cb4532340eb2043144ede836d5b9e4,ae40e5f362cb4532340eb2043144ede836d5b9e4,"Merge pull request #4125 from trevor211/fixAutoAofRewirteMinSize

fix rewrite config: auto-aof-rewrite-min-size"
antirez,2017-07-24 13:18:08,https://api.github.com/repos/antirez/redis/git/commits/25c231c4c1efb1099be188a74144353ace499d01,25c231c4c1efb1099be188a74144353ace499d01,"Merge pull request #1998 from grobe0ba/unstable

Fix missing '-' in redis-benchmark help output (Issue #1996)"
antirez,2017-07-24 12:18:28,https://api.github.com/repos/antirez/redis/git/commits/d9565379da0adf97caec12e9b88c17da51900e40,d9565379da0adf97caec12e9b88c17da51900e40,"Merge pull request #4128 from leonchen83/unstable

fix mismatch argument and return wrong value of clusterDelNodeSlots"
antirez,2017-07-24 12:11:10,https://api.github.com/repos/antirez/redis/git/commits/7c3c472b5e5861787055c74b189e6a8b590e9e81,7c3c472b5e5861787055c74b189e6a8b590e9e81,"Merge pull request #4154 from liangsijian/unstable

Fix lua ldb command log"
saosir,2017-07-24 11:20:31,https://api.github.com/repos/antirez/redis/git/commits/ffbbe5a720a723148ee364066f08e63528a57376,ffbbe5a720a723148ee364066f08e63528a57376,Fix lua ldb command log
antirez,2017-07-23 10:55:37,https://api.github.com/repos/antirez/redis/git/commits/314043552b3e0ce5f080d0fd2169d5c32f94a222,314043552b3e0ce5f080d0fd2169d5c32f94a222,"Modules: don't crash when Lua calls a module blocking command.

Lua scripting does not support calling blocking commands, however all
the native Redis commands are flagged as ""s"" (no scripting flag), so
this is not possible at all. With modules there is no such mechanism in
order to flag a command as non callable by the Lua scripting engine,
moreover we cannot trust the modules users from complying all the times:
it is likely that modules will be released to have blocking commands
without such commands being flagged correctly, even if we provide a way to
signal this fact.

This commit attempts to address the problem in a short term way, by
detecting that a module is trying to block in the context of the Lua
scripting engine client, and preventing to do this. The module will
actually believe to block as usually, but what happens is that the Lua
script receives an error immediately, and the background call is ignored
by the Redis engine (if not for the cleanup callbacks, once it
unblocks).

Long term, the more likely solution, is to introduce a new call called
RedisModule_GetClientFlags(), so that a command can detect if the caller
is a Lua script, and return an error, or avoid blocking at all.

Being the blocking API experimental right now, more work is needed in
this regard in order to reach a level well blocking module commands and
all the other Redis subsystems interact peacefully.

Now the effect is like the following:

    127.0.0.1:6379> eval ""redis.call('hello.block',1,5000)"" 0
    (error) ERR Error running script (call to
    f_b5ba35ff97bc1ef23debc4d6e9fd802da187ed53): @user_script:1: ERR
    Blocking module command called from Lua script

This commit fixes issue #4127 in the short term."
antirez,2017-07-23 10:41:26,https://api.github.com/repos/antirez/redis/git/commits/5bfdfbe1742f113d3ea1d0dbe857b805da4e3381,5bfdfbe1742f113d3ea1d0dbe857b805da4e3381,Fix typo in unblockClientFromModule() top comment.
antirez,2017-07-20 13:17:35,https://api.github.com/repos/antirez/redis/git/commits/a3778f3b0f0aacbb34ecc77541615a9eda251443,a3778f3b0f0aacbb34ecc77541615a9eda251443,"Make representClusterNodeFlags() more robust.

This function failed when an internal-only flag was set as an only flag
in a node: the string was trimmed expecting a final comma before
exiting the function, causing a crash. See issue #4142.
Moreover generation of flags representation only needed at DEBUG log
level was always performed: a waste of CPU time. This is fixed as well
by this commit."
antirez,2017-07-20 12:59:42,https://api.github.com/repos/antirez/redis/git/commits/b1c2e1a19c549a49cc124571849976e7ab91d4d1,b1c2e1a19c549a49cc124571849976e7ab91d4d1,"Fix two bugs in moduleTypeLookupModuleByID().

The function cache was not working at all, and the function returned
wrong values if there where two or more modules exporting native data
types.

See issue #4131 for more details."
leonchen83,2017-07-20 09:24:38,https://api.github.com/repos/antirez/redis/git/commits/9e7a8c0207bab8045dc2938a21657d711a9c4953,9e7a8c0207bab8045dc2938a21657d711a9c4953,fix return wrong value of clusterDelNodeSlots
leonchen83,2017-07-18 07:28:24,https://api.github.com/repos/antirez/redis/git/commits/2cdf4cc656cd74aa7c29360b13cf07d3e0e72afb,2cdf4cc656cd74aa7c29360b13cf07d3e0e72afb,fix mismatch argument
trevor211,2017-07-15 02:20:56,https://api.github.com/repos/antirez/redis/git/commits/c32c690de631115ed1f3534b46743a045dec4206,c32c690de631115ed1f3534b46743a045dec4206,fix rewrite config: auto-aof-rewrite-min-size
lamby,2017-07-14 21:53:14,https://api.github.com/repos/antirez/redis/git/commits/7560d347da90dad0ff8b13872aeb48de609d3c9f,7560d347da90dad0ff8b13872aeb48de609d3c9f,Correct proceding -> proceeding typo.
antirez,2017-07-14 11:04:37,https://api.github.com/repos/antirez/redis/git/commits/b80e467023aa6c882639426b9a2ac691fbc220be,b80e467023aa6c882639426b9a2ac691fbc220be,changelog.tcl: output 100 lines.
antirez,2017-07-14 11:02:15,https://api.github.com/repos/antirez/redis/git/commits/bd1782fa0af2a2af081254a267d5fc8c2d0f472e,bd1782fa0af2a2af081254a267d5fc8c2d0f472e,"Modules: fix thread safe context DB selection.

Before this fix the DB currenty selected by the client blocked was not
respected and operations were always performed on DB 0."
antirez,2017-07-14 10:07:52,https://api.github.com/repos/antirez/redis/git/commits/8eefc9323dc677bf266c71c07fe788aef68b4eaf,8eefc9323dc677bf266c71c07fe788aef68b4eaf,"Allow certain modules APIs only defining REDISMODULE_EXPERIMENTAL_API.

Those calls may be subject to changes in the future, so the user should
acknowledge it is using non stable API."
antirez,2017-07-14 09:33:59,https://api.github.com/repos/antirez/redis/git/commits/f03947a6761bbfb200cefdae562f1ca58597d927,f03947a6761bbfb200cefdae562f1ca58597d927,"Modules documentation removed from source.

Moving to redis-doc repository to publish via Redis.io."
antirez,2017-07-14 09:29:28,https://api.github.com/repos/antirez/redis/git/commits/43aaf96163ecc32c1d57834bbc1c7029986ae1cb,43aaf96163ecc32c1d57834bbc1c7029986ae1cb,Markdown generation of Redis Modules API reference improved.
antirez,2017-07-12 09:07:28,https://api.github.com/repos/antirez/redis/git/commits/e74f0aa6d1ca4a7d0626125a7d9b5eb9cb713947,e74f0aa6d1ca4a7d0626125a7d9b5eb9cb713947,"Fix replication of SLAVEOF inside transaction.

In Redis 4.0 replication, with the introduction of PSYNC2, masters and
slaves replicate commands to cascading slaves and to the replication
backlog itself in a different way compared to the past.

Masters actually replicate the effects of client commands.
Slaves just propagate what they receive from masters.

This mechanism can cause problems when the configuration of an instance
is changed from master to slave inside a transaction. For instance
we could send to a master instance the following sequence:

    MULTI
    SLAVEOF 127.0.0.1 0
    EXEC
    SLAVEOF NO ONE

Before the fixes in this commit, the MULTI command used to be propagated
into the replication backlog, however after the SLAVEOF command the
instance is a slave, so the EXEC implementation failed to also propagate
the EXEC command. When the slaves of the above instance reconnected,
they were incrementally synchronized just sending a ""MULTI"". This put
the master client (in the slaves) into MULTI state, breaking the
replication.

Notably even Redis Sentinel uses the above approach in order to guarantee
that configuration changes are always performed together with rewrites
of the configuration and with clients disconnection. Sentiel does:

    MULTI
    SLAVEOF ...
    CONFIG REWRITE
    CLIENT KILL TYPE normal
    EXEC

So this was a really problematic issue. However even with the fix in
this commit, that will add the final EXEC to the replication stream in
case the instance was switched from master to slave during the
transaction, the result would be to increment the slave replication
offset, so a successive reconnection with the new master, will not
permit a successful partial resynchronization: no way the new master can
provide us with the backlog needed, we incremented our offset to a value
that the new master cannot have.

However the EXEC implementation waits to emit the MULTI, so that if the
commands inside the transaction actually do not need to be replicated,
no commands propagation happens at all. From multi.c:

    if (!must_propagate && !(c->cmd->flags & (CMD_READONLY|CMD_ADMIN))) {
	execCommandPropagateMulti(c);
	must_propagate = 1;
    }

The above code is already modified by this commit you are reading.
Now also ADMIN commands do not trigger the emission of MULTI. It is actually
not clear why we do not just check for CMD_WRITE... Probably I wrote it this
way in order to make the code more reliable: better to over-emit MULTI
than not emitting it in time.

So this commit should indeed fix issue #3836 (verified), however it looks
like some reconsideration of this code path is needed in the long term.

BONUS POINT: The reverse bug.

Even in a read only slave ""B"", in a replication setup like:

	A -> B -> C

There are commands without the READONLY nor the ADMIN flag, that are also
not flagged as WRITE commands. An example is just the PING command.

So if we send B the following sequence:

    MULTI
    PING
    SLAVEOF NO ONE
    EXEC

The result will be the reverse bug, where only EXEC is emitted, but not the
previous MULTI. However this apparently does not create problems in practice
but it is yet another acknowledge of the fact some work is needed here
in order to make this code path less surprising.

Note that there are many different approaches we could follow. For instance
MULTI/EXEC blocks containing administrative commands may be allowed ONLY
if all the commands are administrative ones, otherwise they could be
denined. When allowed, the commands could simply never be replicated at all."
antirez,2017-07-11 13:49:09,https://api.github.com/repos/antirez/redis/git/commits/e1b8b4b6daea28129bf038abc96707ef1a7d220e,e1b8b4b6daea28129bf038abc96707ef1a7d220e,"CLUSTER GETKEYSINSLOT: avoid overallocating.

Close #3911."
antirez,2017-07-11 10:44:56,https://api.github.com/repos/antirez/redis/git/commits/5bd46d33db53186fddefbe2be8ab8a2805a66612,5bd46d33db53186fddefbe2be8ab8a2805a66612,"Fix isHLLObjectOrReply() to handle integer encoded strings.

Close #3766."
antirez,2017-07-11 10:33:00,https://api.github.com/repos/antirez/redis/git/commits/e203a46cf3b9237a59ea10ddfd9e2578d110a5fe,e203a46cf3b9237a59ea10ddfd9e2578d110a5fe,"Clients blocked in modules: free argv/argc later.

See issue #3844 for more information."
antirez,2017-07-11 07:46:58,https://api.github.com/repos/antirez/redis/git/commits/14c32c3569846addb93ef6c2636fcc493aeb245f,14c32c3569846addb93ef6c2636fcc493aeb245f,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2017-07-10 22:13:52,https://api.github.com/repos/antirez/redis/git/commits/54e4bbeabdd1cd92e5c2b461f85c6c03d8645838,54e4bbeabdd1cd92e5c2b461f85c6c03d8645838,"Event loop: call after sleep() only from top level.

In general we do not want before/after sleep() callbacks to be called
when we re-enter the event loop, since those calls are only designed in
order to perform operations every main iteration of the event loop, and
re-entering is often just a way to incrementally serve clietns with
error messages or other auxiliary operations. However, if we call the
callbacks, we are then forced to think at before/after sleep callbacks
as re-entrant, which is much harder without any good need.

However here there was also a clear bug: beforeSleep() was actually
never called when re-entering the event loop. But the new afterSleep()
callback was. This is broken and in this instance re-entering
afterSleep() caused a modules GIL dead lock."
antirez,2017-07-10 17:14:34,https://api.github.com/repos/antirez/redis/git/commits/58104d832786cdf285ec83ac7121ac84d04434c9,58104d832786cdf285ec83ac7121ac84d04434c9,"Merge pull request #4113 from guybe7/module_io_bytes

Modules: Fix io->bytes calculation in RDB save"
antirez,2017-07-10 14:41:25,https://api.github.com/repos/antirez/redis/git/commits/11182a1a58ef6d36f76f7a5e06d0598254b524d9,11182a1a58ef6d36f76f7a5e06d0598254b524d9,redis-check-aof: tell users there is a --fix option.
guybe7,2017-07-10 11:41:57,https://api.github.com/repos/antirez/redis/git/commits/dfb68cd235c03faafb2411d08c7afb7377c8d8ae,dfb68cd235c03faafb2411d08c7afb7377c8d8ae,Modules: Fix io->bytes calculation in RDB save
antirez,2017-07-10 11:38:23,https://api.github.com/repos/antirez/redis/git/commits/fc7ecd8d359160c5b74aa86c09eefdf4e9e2d653,fc7ecd8d359160c5b74aa86c09eefdf4e9e2d653,AOF check utility: ability to check files with RDB preamble.
antirez,2017-07-06 13:02:11,https://api.github.com/repos/antirez/redis/git/commits/6b0670daadd96e8c0a45fadd1dccdb24fb960aae,6b0670daadd96e8c0a45fadd1dccdb24fb960aae,"Merge pull request #3853 from itamarhaber/issue-3851

Sets up fake client to select current db in RM_Call()"
antirez,2017-07-06 12:31:08,https://api.github.com/repos/antirez/redis/git/commits/38dd30af4252a02ba504d677204a7e5066cef53f,38dd30af4252a02ba504d677204a7e5066cef53f,"Merge pull request #4105 from spinlock/unstable-networking

Optimize addReplyBulkSds for better performance"
antirez,2017-07-06 12:29:37,https://api.github.com/repos/antirez/redis/git/commits/2d5aa009595451bf8fc37520fa469cc09d485286,2d5aa009595451bf8fc37520fa469cc09d485286,"Merge pull request #4106 from petersunbag/unstable

minor fix in listJoin()."
petersunbag,2017-07-06 11:47:21,https://api.github.com/repos/antirez/redis/git/commits/87f771bff1004ca61018047e05322690198c816e,87f771bff1004ca61018047e05322690198c816e,minor fix in listJoin().
antirez,2017-07-06 09:20:49,https://api.github.com/repos/antirez/redis/git/commits/2b36950e9b2e7c02363c965fd721d103d1dfab4a,2b36950e9b2e7c02363c965fd721d103d1dfab4a,"Free IO context if any in RDB loading code.

Thanks to @oranagra for spotting this bug."
antirez,2017-07-06 08:29:19,https://api.github.com/repos/antirez/redis/git/commits/51ffd062d37b370884e21cc70b20264ff4060dc8,51ffd062d37b370884e21cc70b20264ff4060dc8,Modules: DEBUG DIGEST interface.
antirez,2017-07-05 13:40:25,https://api.github.com/repos/antirez/redis/git/commits/f9fac7f7770f056790b628e47af91ed3e814246c,f9fac7f7770f056790b628e47af91ed3e814246c,Avoid closing invalid FDs to make Valgrind happier.
antirez,2017-07-05 08:10:20,https://api.github.com/repos/antirez/redis/git/commits/413c2bc180f3504a42f37e467e3616351af2734d,413c2bc180f3504a42f37e467e3616351af2734d,"Modules: no MULTI/EXEC for commands replicated from async contexts.

They are technically like commands executed from external clients one
after the other, and do not constitute a single atomic entity."
antirez,2017-07-04 10:01:51,https://api.github.com/repos/antirez/redis/git/commits/09dd7b5ff02de4a311032939c27fd6fc62fbd4a3,09dd7b5ff02de4a311032939c27fd6fc62fbd4a3,"Merge pull request #4101 from dvirsky/fix_modules_reply_len

Proposed fix to #4100"
antirez,2017-07-04 09:55:05,https://api.github.com/repos/antirez/redis/git/commits/eddd8d34c4e82120ff9b0748aa48051b452f123b,eddd8d34c4e82120ff9b0748aa48051b452f123b,"Add symmetrical assertion to track c->reply_buffer infinite growth.

Redis clients need to have an instantaneous idea of the amount of memory
they are consuming (if the number is not exact should at least be
proportional to the actual memory usage). We do that adding and
subtracting the SDS length when pushing / popping from the client->reply
list. However it is quite simple to add bugs in such a setup, by not
taking the objects in the list and the count in sync. For such reason,
Redis has an assertion to track counts near 2^64: those are always the
result of the counter wrapping around because we subtract more than we
add. This commit adds the symmetrical assertion: when the list is empty
since we sent everything, the reply_bytes count should be zero. Thanks
to the new assertion it should be simple to also detect the other
problem, where the count slowly increases because of over-counting.
The assertion adds a conditional in the code that sends the buffer to
the socket but should not create any measurable performance slowdown,
listLength() just accesses a structure field, and this code path is
totally dominated by write(2).

Related to #4100."
dvirsky,2017-07-03 20:58:50,https://api.github.com/repos/antirez/redis/git/commits/86e564e9fffeb764cca45f6bc102b78c3119f822,86e564e9fffeb764cca45f6bc102b78c3119f822,fixed #4100
antirez,2017-07-03 17:38:31,https://api.github.com/repos/antirez/redis/git/commits/b2cd9fcab6122ccbf8b08f71f59a0af01931083b,b2cd9fcab6122ccbf8b08f71f59a0af01931083b,"Fix GEORADIUS edge case with huge radius.

This commit closes issue #3698, at least for now, since the root cause
was not fixed: the bounding box function, for huge radiuses, does not
return a correct bounding box, there are points still within the radius
that are left outside.

So when using GEORADIUS queries with radiuses in the order of 5000 km or
more, it was possible to see, at the edge of the area, certain points
not correctly reported.

Because the bounding box for now was used just as an optimization, and
such huge radiuses are not common, for now the optimization is just
switched off when the radius is near such magnitude.

Three test cases found by the Continuous Integration test were added, so
that we can easily trigger the bug again, both for regression testing
and in order to properly fix it as some point in the future."
antirez,2017-06-30 13:41:58,https://api.github.com/repos/antirez/redis/git/commits/26e638a8e917608d8e75b07e5e941c7a24462c4d,26e638a8e917608d8e75b07e5e941c7a24462c4d,"redis-cli --latency: ability to run non interactively.

This feature was proposed by @rosmo in PR #2643 and later redesigned
in order to fit better with the other options for non-interactive modes
of redis-cli. The idea is basically to allow to collect latency
information in scripts, cron jobs or whateever, just running for a
limited time and then producing a single output."
antirez,2017-06-30 10:12:00,https://api.github.com/repos/antirez/redis/git/commits/7bad78bd2f533844bfb6f79e8a3c9507079abc3a,7bad78bd2f533844bfb6f79e8a3c9507079abc3a,Fix abort typo in Lua debugger help screen.
antirez,2017-06-30 08:03:37,https://api.github.com/repos/antirez/redis/git/commits/f8547e53f0d80b4cd2a84c6d39d1e08a470f0a2c,f8547e53f0d80b4cd2a84c6d39d1e08a470f0a2c,"Added GEORADIUS(BYMEMBER)_RO variants for read-only operations.

Issue #4084 shows how for a design error, GEORADIUS is a write command
because of the STORE option. Because of this it does not work
on readonly slaves, gets redirected to masters in Redis Cluster even
when the connection is in READONLY mode and so forth.

To break backward compatibility at this stage, with Redis 4.0 to be in
advanced RC state, is problematic for the user base. The API can be
fixed into the unstable branch soon if we'll decide to do so in order to
be more consistent, and reease Redis 5.0 with this incompatibility in
the future. This is still unclear.

However, the ability to scale GEO queries in slaves easily is too
important so this commit adds two read-only variants to the GEORADIUS
and GEORADIUSBYMEMBER command: GEORADIUS_RO and GEORADIUSBYMEMBER_RO.
The commands are exactly as the original commands, but they do not
accept the STORE and STOREDIST options."
antirez,2017-06-29 15:38:46,https://api.github.com/repos/antirez/redis/git/commits/01a4b9892d0922eeafbb1bfba0f9fa70bf1a2f3b,01a4b9892d0922eeafbb1bfba0f9fa70bf1a2f3b,"HMSET and MSET implementations unified. HSET now variadic.

This is the first step towards getting rid of HMSET which is a command
that does not make much sense once HSET is variadic, and has a saner
return value."
antirez,2017-06-27 15:51:19,https://api.github.com/repos/antirez/redis/git/commits/634c64dd1833549a31e62405e7dc835c7bc6fa39,634c64dd1833549a31e62405e7dc835c7bc6fa39,"Merge pull request #4075 from sgn1/brpop_keys

Fix Issues in blocking commands in cluster mode."
antirez,2017-06-27 11:09:33,https://api.github.com/repos/antirez/redis/git/commits/365dd037dcc00249c7631caac82c49a9c0c8c0f6,365dd037dcc00249c7631caac82c49a9c0c8c0f6,"RDB modules values serialization format version 2.

The original RDB serialization format was not parsable without the
module loaded, becuase the structure was managed only by the module
itself. Moreover RDB is a streaming protocol in the sense that it is
both produce di an append-only fashion, and is also sometimes directly
sent to the socket (in the case of diskless replication).

The fact that modules values cannot be parsed without the relevant
module loaded is a problem in many ways: RDB checking tools must have
loaded modules even for doing things not involving the value at all,
like splitting an RDB into N RDBs by key or alike, or just checking the
RDB for sanity.

In theory module values could be just a blob of data with a prefixed
length in order for us to be able to skip it. However prefixing the values
with a length would mean one of the following:

1. To be able to write some data at a previous offset. This breaks
stremaing.
2. To bufferize values before outputting them. This breaks performances.
3. To have some chunked RDB output format. This breaks simplicity.

Moreover, the above solution, still makes module values a totally opaque
matter, with the fowllowing problems:

1. The RDB check tool can just skip the value without being able to at
least check the general structure. For datasets composed mostly of
modules values this means to just check the outer level of the RDB not
actually doing any checko on most of the data itself.
2. It is not possible to do any recovering or processing of data for which a
module no longer exists in the future, or is unknown.

So this commit implements a different solution. The modules RDB
serialization API is composed if well defined calls to store integers,
floats, doubles or strings. After this commit, the parts generated by
the module API have a one-byte prefix for each of the above emitted
parts, and there is a final EOF byte as well. So even if we don't know
exactly how to interpret a module value, we can always parse it at an
high level, check the overall structure, understand the types used to
store the information, and easily skip the whole value.

The change is backward compatible: older RDB files can be still loaded
since the new encoding has a new RDB type: MODULE_2 (of value 7).
The commit also implements the ability to check RDB files for sanity
taking advantage of the new feature."
antirez,2017-06-26 08:36:12,https://api.github.com/repos/antirez/redis/git/commits/c3998728a2674ebdbc3c24851adece5ccc9d3363,c3998728a2674ebdbc3c24851adece5ccc9d3363,ARM: Fix stack trace generation on crash.
antirez,2017-06-23 09:42:25,https://api.github.com/repos/antirez/redis/git/commits/c9097393bf63172fcae014808f79ddf0d9706204,c9097393bf63172fcae014808f79ddf0d9706204,"Issue #4027: unify comment and modify return value in freeMemoryIfNeeded().

It looks safer to return C_OK from freeMemoryIfNeeded() when clients are
paused because returning C_ERR may prevent success of writes. It is
possible that there is no difference in practice since clients cannot
execute writes while clients are paused, but it looks more correct this
way, at least conceptually.

Related to PR #4028."
antirez,2017-06-23 09:39:02,https://api.github.com/repos/antirez/redis/git/commits/936ade80b2dc2019bfc2dc20de024ede91d6eacb,936ade80b2dc2019bfc2dc20de024ede91d6eacb,"Merge pull request #4028 from zintrepid/prevent_expirations_while_paused

Prevent expirations and evictions while paused"
sgn1,2017-06-23 07:30:21,https://api.github.com/repos/antirez/redis/git/commits/f85f36f50d7066bc7b3a845488a90e9ad3f1625d,f85f36f50d7066bc7b3a845488a90e9ad3f1625d,"Fix following issues in blocking commands:
1. brpop last key index, thus checking all keys for slots.
2. Memory leak in clusterRedirectBlockedClientIfNeeded.
3. Remove while loop in clusterRedirectBlockedClientIfNeeded."
sgn1,2017-06-23 06:52:00,https://api.github.com/repos/antirez/redis/git/commits/d303bca58787300efe29212940e7806ee625ae9f,d303bca58787300efe29212940e7806ee625ae9f,Fix brpop command table entry and redirect blocked clients.
antirez,2017-06-22 09:00:21,https://api.github.com/repos/antirez/redis/git/commits/8b768e8ea4a0616e71645e2e812803026765ba16,8b768e8ea4a0616e71645e2e812803026765ba16,"Aesthetic changes to #4068 PR to conform to Redis coding standard.

1. Inline if ... statement if short.
2. No lines over 80 columns."
antirez,2017-06-22 08:46:58,https://api.github.com/repos/antirez/redis/git/commits/6476f1a9797f3ad5cfd20a123cecde9d56cdb3cf,6476f1a9797f3ad5cfd20a123cecde9d56cdb3cf,"Merge pull request #4068 from FreedomU007/unstable

Fix set with ex/px option when propagated to aof"
antirez,2017-06-20 15:01:16,https://api.github.com/repos/antirez/redis/git/commits/ef446bf16dab71be762dd346250f2175ed5183b0,ef446bf16dab71be762dd346250f2175ed5183b0,"Merge pull request #3802 from flowly/bugfix-calc-stat-net-output-bytes

Bugfix calc stat net output bytes"
antirez,2017-06-20 14:55:29,https://api.github.com/repos/antirez/redis/git/commits/1d857a99d5d9bee9c5000db9af6694cc2f96c4e6,1d857a99d5d9bee9c5000db9af6694cc2f96c4e6,"Merge pull request #4056 from season89/unstable

Fixed comments of slowlog duration"
antirez,2017-06-20 14:53:56,https://api.github.com/repos/antirez/redis/git/commits/0a03187ac495c2e0e45711954db1e54448e78a57,0a03187ac495c2e0e45711954db1e54448e78a57,"Merge pull request #3659 from cbgbt/cli-elapsed

cli: Only print elapsed time on OUTPUT_STANDARD."
antirez,2017-06-20 14:41:10,https://api.github.com/repos/antirez/redis/git/commits/a2146c7592126f621f225671a3682541277f5fd1,a2146c7592126f621f225671a3682541277f5fd1,"Merge pull request #4062 from concreted/patch-1

(fix) Update create-cluster README"
antirez,2017-06-19 07:41:11,https://api.github.com/repos/antirez/redis/git/commits/2a84927f35e5f565e3a71f202e1dfd4912b24a7d,2a84927f35e5f565e3a71f202e1dfd4912b24a7d,redis-benchmark: add -t hset target.
concreted,2017-06-16 23:10:00,https://api.github.com/repos/antirez/redis/git/commits/ee5044eef0c33138eba6c37e2c20f2a7e3cac899,ee5044eef0c33138eba6c37e2c20f2a7e3cac899,"(fix) Update create-cluster README

Fix a few typos/adjust wording in `create-cluster` README"
antirez,2017-06-15 10:57:54,https://api.github.com/repos/antirez/redis/git/commits/53cb27b1d718a12e9ff89212ca9b68db12031dde,53cb27b1d718a12e9ff89212ca9b68db12031dde,SLOWLOG: log offending client address and name.
antirez,2017-06-14 16:29:53,https://api.github.com/repos/antirez/redis/git/commits/ab9d398835dca1187f190b28786cd9cc28e1fea1,ab9d398835dca1187f190b28786cd9cc28e1fea1,Merge branch 'unstable' of github.com:/antirez/redis into unstable
QuChen88,2017-04-07 22:31:11,https://api.github.com/repos/antirez/redis/git/commits/4740424049173cf139b79a79df97878ab5f76f95,4740424049173cf139b79a79df97878ab5f76f95,"Implement getKeys procedure for georadius and georadiusbymember
commands."
cx3ptr,2017-06-14 08:42:21,https://api.github.com/repos/antirez/redis/git/commits/3fc4bf07cc04dc12a91e9da682162b4d062136bf,3fc4bf07cc04dc12a91e9da682162b4d062136bf,Fixed comments of slowlog duration
antirez,2017-06-13 13:28:23,https://api.github.com/repos/antirez/redis/git/commits/d3b32ca48d083c86ff0c20691cb790f80d5935c2,d3b32ca48d083c86ff0c20691cb790f80d5935c2,"Merge pull request #4034 from amallia/patch-1

Fixed comment in clusterMsg version field"
antirez,2017-06-13 13:27:31,https://api.github.com/repos/antirez/redis/git/commits/33035cad04fd26482c744e450234b3554034f9b9,33035cad04fd26482c744e450234b3554034f9b9,"Merge pull request #4035 from amallia/patch-2

Removed duplicate 'sys/socket.h'  include"
antirez,2017-06-13 08:35:51,https://api.github.com/repos/antirez/redis/git/commits/5877c02c5102d7f01e3a41937ffdea098a63befe,5877c02c5102d7f01e3a41937ffdea098a63befe,Fix PERSIST expired key resuscitation issue #4048.
amallia,2017-06-04 14:26:53,https://api.github.com/repos/antirez/redis/git/commits/2d1d57eb4702cb2253655e0bd159e021843cfe7e,2d1d57eb4702cb2253655e0bd159e021843cfe7e,Removed duplicate 'sys/socket.h'  include
amallia,2017-06-04 14:09:05,https://api.github.com/repos/antirez/redis/git/commits/591dba80553ef5f629bde45df6375dc80bf1c77c,591dba80553ef5f629bde45df6375dc80bf1c77c,Fixed comment in clusterMsg version field
zintrepid,2017-06-01 21:24:10,https://api.github.com/repos/antirez/redis/git/commits/a3e53cf9bcf05671e3ac4a170bb6791dbff62eec,a3e53cf9bcf05671e3ac4a170bb6791dbff62eec,"Prevent expirations and evictions while paused

Proposed fix to https://github.com/antirez/redis/issues/4027"
antirez,2017-05-19 10:03:30,https://api.github.com/repos/antirez/redis/git/commits/e91b81c612cc8b0cbb4e7f9bc895e5f23d497027,e91b81c612cc8b0cbb4e7f9bc895e5f23d497027,More informative -MISCONF error message.
antirez,2017-05-19 09:10:36,https://api.github.com/repos/antirez/redis/git/commits/e498d9ee3ee55c29000ed80914473ac18d32b672,e498d9ee3ee55c29000ed80914473ac18d32b672,Collect fork() timing info only if fork succeeded.
antirez,2017-05-15 09:22:28,https://api.github.com/repos/antirez/redis/git/commits/78211aaaafe999205c4ffda16a43732617c690ea,78211aaaafe999205c4ffda16a43732617c690ea,"redis-cli --bigkeys: show error when TYPE fails.

Close #3993."
antirez,2017-05-10 11:15:30,https://api.github.com/repos/antirez/redis/git/commits/58f79e2ff48bb20e48d5eb60ff6a87c9afae5fe9,58f79e2ff48bb20e48d5eb60ff6a87c9afae5fe9,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2017-05-10 08:01:06,https://api.github.com/repos/antirez/redis/git/commits/1f598fc2bb6975417751486405303d98246bb7bc,1f598fc2bb6975417751486405303d98246bb7bc,"Modules TSC: use atomic var for server.unixtime.

This avoids Helgrind complaining, but we are actually not using
atomicGet() to get the unixtime value for now: too many places where it
is used and given tha time_t is word-sized it should be safe in all the
archs we support as it is.

On the other hand, Helgrind, when Redis is compiled with ""make helgrind""
in order to force the __sync macros, will detect the write in
updateCachedTime() as a read (because atomic functions are used) and
will not complain about races.

This commit also includes minor refactoring of mutex initializations and
a ""helgrind"" target in the Makefile."
antirez,2017-05-10 07:33:49,https://api.github.com/repos/antirez/redis/git/commits/de786186a5a0cd15aa86a2127647fb9c758bc405,de786186a5a0cd15aa86a2127647fb9c758bc405,"atomicvar.h: show used API in INFO. Add macro to force __sync builtin.

The __sync builtin can be correctly detected by Helgrind so to force it
is useful for testing. The API in the INFO output can be useful for
debugging after problems are reported."
guybe7,2017-05-09 15:42:32,https://api.github.com/repos/antirez/redis/git/commits/89a9e5a9a2dba7bcdb4ef32fa73f105a14923c1a,89a9e5a9a2dba7bcdb4ef32fa73f105a14923c1a,Merge branch 'unstable' of https://github.com/antirez/redis into unstable
antirez,2017-05-09 14:59:51,https://api.github.com/repos/antirez/redis/git/commits/6eb51bf1ecd114f97a0666d4027b600e5124f42c,6eb51bf1ecd114f97a0666d4027b600e5124f42c,"zmalloc.c: remove thread safe mode, it's the default way."
antirez,2017-05-09 14:32:49,https://api.github.com/repos/antirez/redis/git/commits/9390c384b88de6b2363c3f33ba42bd25c1c3346d,9390c384b88de6b2363c3f33ba42bd25c1c3346d,"Modules TSC: Add mutex for server.lruclock.

Only useful for when no atomic builtins are available."
antirez,2017-05-09 09:57:09,https://api.github.com/repos/antirez/redis/git/commits/ece658713b659513e2c43a9498da286cafec17dd,ece658713b659513e2c43a9498da286cafec17dd,"Modules TSC: Improve inter-thread synchronization.

More work to do with server.unixtime and similar. Need to write Helgrind
suppression file in order to suppress the valse positives."
antirez,2017-05-04 15:00:53,https://api.github.com/repos/antirez/redis/git/commits/2a51bac44ebcff79dcd8ede2cab66ca213c9d504,2a51bac44ebcff79dcd8ede2cab66ca213c9d504,Simplify atomicvar.h usage by having the mutex name implicit.
antirez,2017-05-04 08:35:32,https://api.github.com/repos/antirez/redis/git/commits/52bc74f22150183111bc0da9cd2c29de440a50b5,52bc74f22150183111bc0da9cd2c29de440a50b5,Lazyfree: fix lazyfreeGetPendingObjectsCount() race reading counter.
antirez,2017-05-03 21:43:49,https://api.github.com/repos/antirez/redis/git/commits/7d9326b1f3a6fd8e218da9a4ca357d9af2e9b644,7d9326b1f3a6fd8e218da9a4ca357d9af2e9b644,Modules TSC: HELLO.KEYS reply format fixed.
antirez,2017-05-03 12:54:48,https://api.github.com/repos/antirez/redis/git/commits/9b01b64430fbc1487429144d2e4e72a4a7fd9db2,9b01b64430fbc1487429144d2e4e72a4a7fd9db2,Modules TSC: put the client in the pending write list.
antirez,2017-05-03 12:53:56,https://api.github.com/repos/antirez/redis/git/commits/e67fb915eb0532e205b310b0ede5993173dd2d71,e67fb915eb0532e205b310b0ede5993173dd2d71,adlist: fix final list count in listJoin().
antirez,2017-05-03 12:15:25,https://api.github.com/repos/antirez/redis/git/commits/79226cb9fad57c958417263e52f7bb7f9b13597c,79226cb9fad57c958417263e52f7bb7f9b13597c,adlist: fix listJoin() to handle empty lists.
antirez,2017-05-03 12:10:21,https://api.github.com/repos/antirez/redis/git/commits/6798736909b7301242b023c288d2a956ec7154f4,6798736909b7301242b023c288d2a956ec7154f4,Modules: remove unused var in example module.
antirez,2017-05-03 12:08:12,https://api.github.com/repos/antirez/redis/git/commits/1ed2ff55700b9b3008d3875352c4e820e0691ec8,1ed2ff55700b9b3008d3875352c4e820e0691ec8,Modules TSC: HELLO.KEYS example draft finished.
antirez,2017-05-03 12:07:10,https://api.github.com/repos/antirez/redis/git/commits/7127f15ebef6a653b488dd545c103eefe7aaef9a,7127f15ebef6a653b488dd545c103eefe7aaef9a,"Module: fix RedisModule_Call() ""l"" specifier to create a raw string."
antirez,2017-05-03 09:26:21,https://api.github.com/repos/antirez/redis/git/commits/3fcf959e609e850a114d4016843e4c991066ebac,3fcf959e609e850a114d4016843e4c991066ebac,"Modules TSC: Release the GIL for all the time we are blocked.

Instead of giving the module background operations just a small time to
run in the beforeSleep() function, we can have the lock released for all
the time we are blocked in the multiplexing syscall."
antirez,2017-05-02 13:19:28,https://api.github.com/repos/antirez/redis/git/commits/ba4a5a3255d9a28c6aa9ead36f640705704249a7,ba4a5a3255d9a28c6aa9ead36f640705704249a7,Modules TSC: Export symbols of the new API.
antirez,2017-05-02 13:05:39,https://api.github.com/repos/antirez/redis/git/commits/275905b3282581208e13ed61c7aca98fbbfc40c4,275905b3282581208e13ed61c7aca98fbbfc40c4,Modules TSC: Handling of RM_Reply* functions.
antirez,2017-05-02 10:53:10,https://api.github.com/repos/antirez/redis/git/commits/9c500b89fb4969dd54512d507549a782b02f6886,9c500b89fb4969dd54512d507549a782b02f6886,Modules TSC: Basic TS context creeation and handling.
antirez,2017-04-28 16:41:10,https://api.github.com/repos/antirez/redis/git/commits/59b06b14c9801d1f65cab55559c75f8146b8b8b1,59b06b14c9801d1f65cab55559c75f8146b8b8b1,Modules TSC: GIL and cooperative multi tasking setup.
antirez,2017-04-28 09:16:37,https://api.github.com/repos/antirez/redis/git/commits/a4c7f34d3ab9a182a26d6a6f59f87d253929100d,a4c7f34d3ab9a182a26d6a6f59f87d253929100d,Regression test for #3899 fixed.
antirez,2017-04-28 08:37:07,https://api.github.com/repos/antirez/redis/git/commits/c180bc7d98061fd59be54ca83b67abfd6ce65414,c180bc7d98061fd59be54ca83b67abfd6ce65414,"Regression test for PSYNC2 issue #3899 added.

Experimentally verified that it can trigger the issue reverting the fix.
At least on my system... Being the bug time/backlog dependant, it is
very hard to tell if this test will be able to trigger the problem
consistently, however even if it triggers the problem once in a while,
we'll see it in the CI environment at http://ci.redis.io."
antirez,2017-04-27 15:04:07,https://api.github.com/repos/antirez/redis/git/commits/469d6e2b37e2913ecb673f910cdb7dbd3af18a67,469d6e2b37e2913ecb673f910cdb7dbd3af18a67,"PSYNC2: fix master cleanup when caching it.

The master client cleanup was incomplete: resetClient() was missing and
the output buffer of the client was not reset, so pending commands
related to the previous connection could be still sent.

The first problem caused the client argument vector to be, at times,
half populated, so that when the correct replication stream arrived the
protcol got mixed to the arugments creating invalid commands that nobody
called.

Thanks to @yangsiran for also investigating this problem, after
already providing important design / implementation hints for the
original PSYNC2 issues (see referenced Github issue).

Note that this commit adds a new function to the list library of Redis
in order to be able to reset a list without destroying it.

Related to issue #3899."
antirez,2017-04-22 13:59:53,https://api.github.com/repos/antirez/redis/git/commits/c861e1e1eee2c29c1df36759d471f6758048318f,c861e1e1eee2c29c1df36759d471f6758048318f,"Defrag: test currently disabled, too many false positives.

Related to #3786."
antirez,2017-04-22 11:21:41,https://api.github.com/repos/antirez/redis/git/commits/a17390853dfa294b26167eed59b81379dc833a52,a17390853dfa294b26167eed59b81379dc833a52,"Defrag: fix test false positive.

Apparently 1.4 is too low compared to what you get in certain setups
(including mine). I raised it to 1.55 that hopefully is still enough to
test that the fragmentation went down from 1.7 but without incurring in
issues, however the test setup may be still fragile so certain times this
may lead to false positives again, it's hard to test for these things
in a determinsitic way.

Related to #3786."
oranagra,2017-01-30 20:53:13,https://api.github.com/repos/antirez/redis/git/commits/0fb5c4ebd8f0b9532b02e33666007b4f824d436c,0fb5c4ebd8f0b9532b02e33666007b4f824d436c,add test for active defrag
antirez,2017-04-22 11:12:42,https://api.github.com/repos/antirez/redis/git/commits/e3b8492e83822aa618d084732f8ab997bf41d7f3,e3b8492e83822aa618d084732f8ab997bf41d7f3,"Revert ""Jemalloc updated to 4.4.0.""

This reverts commit 36c1acc222d29e6e2dc9fc25362e4faa471111bd."
antirez,2017-04-21 14:27:38,https://api.github.com/repos/antirez/redis/git/commits/238cebdd5eb0fd0d8f2db87d895a007bc492dcdb,238cebdd5eb0fd0d8f2db87d895a007bc492dcdb,"Check event loop creation return value. Fix #3951.

Normally we never check for OOM conditions inside Redis since the
allocator will always return a pointer or abort the program on OOM
conditons. However we cannot have control on epool_create(), that may
fail for kernel OOM (according to the manual page) even if all the
parameters are correct, so the function aeCreateEventLoop() may indeed
return NULL and this condition must be checked."
antirez,2017-04-20 05:55:51,https://api.github.com/repos/antirez/redis/git/commits/3773c06d281bd50717280df171ba6dcf44a4116a,3773c06d281bd50717280df171ba6dcf44a4116a,"Merge pull request #3950 from kensou97/unstable

update block->free after some diff data are written to the child process"
antirez,2017-04-19 14:17:08,https://api.github.com/repos/antirez/redis/git/commits/7d9dd80db3c4bc028072071d87bd97ea171195f5,7d9dd80db3c4bc028072071d87bd97ea171195f5,"Fix getKeysUsingCommandTable() in cluster mode.

Close #3940."
antirez,2017-04-19 12:02:52,https://api.github.com/repos/antirez/redis/git/commits/189a12afb4df2986d4671cdebae3c96c4f0945c2,189a12afb4df2986d4671cdebae3c96c4f0945c2,"PSYNC2: discard pending transactions from cached master.

During the review of the fix for #3899, @yangsiran identified an
implementation bug: given that the offset is now relative to the applied
part of the replication log, when we cache a master, the successive
PSYNC2 request will be made in order to *include* the transaction that
was not completely processed. This means that we need to discard any
pending transaction from our replication buffer: it will be re-executed."
antirez,2017-04-19 08:25:45,https://api.github.com/repos/antirez/redis/git/commits/22be435efe63af749149db4ad9177c0f2515be70,22be435efe63af749149db4ad9177c0f2515be70,"Fix PSYNC2 incomplete command bug as described in #3899.

This bug was discovered by @kevinmcgehee and constituted a major hidden
bug in the PSYNC2 implementation, caused by the propagation from the
master of incomplete commands to slaves.

The bug had several results:

1. Borrowing from Kevin text in the issue: ""Given that slaves blindly
copy over their master's input into their own replication backlog over
successive read syscalls, it's possible that with large commands or
small TCP buffers, partial commands are present in this buffer. If the
master were to fail before successfully propagating the entire command
to a slave, the slaves will never execute the partial command (since the
client is invalidated) but will copy it to replication backlog which may
relay those invalid bytes to its slaves on PSYNC2, corrupting the
backlog and possibly other valid commands that follow the failover.
Simple command boundaries aren't sufficient to capture this, either,
because in the case of a MULTI/EXEC block, if the master successfully
propagates a subset of the commands but not the EXEC, then the
transaction in the backlog becomes corrupt and could corrupt other
slaves that consume this data.""

2. As identified by @yangsiran later, there is another effect of the
bug. For the same mechanism of the first problem, a slave having another
slave, could receive a full resynchronization request with an already
half-applied command in the backlog. Once the RDB is ready, it will be
sent to the slave, and the replication will continue sending to the
sub-slave the other half of the command, which is not valid.

The fix, designed by @yangsiran and @antirez, and implemented by
@antirez, uses a secondary buffer in order to feed the sub-masters and
update the replication backlog and offsets, only when a given part of
the query buffer is actually *applied* to the state of the instance,
that is, when the command gets processed and the command is not pending
in the Redis transaction buffer because of CLIENT_MULTI state.

Given that now the backlog and offsets representation are in agreement
with the actual processed commands, both issue 1 and 2 should no longer
be possible.

Thanks to @kevinmcgehee, @yangsiran and @oranagra for their work in
identifying and designing a fix for this problem."
antirez,2017-04-18 14:31:18,https://api.github.com/repos/antirez/redis/git/commits/27fe8e9fb2f4adf5337e74280215680e7cd59442,27fe8e9fb2f4adf5337e74280215680e7cd59442,"Merge pull request #3945 from badboy/dicthash-bench-compile

Reorder to make dict-benchmark compile on Linux"
antirez,2017-04-18 14:24:06,https://api.github.com/repos/antirez/redis/git/commits/02d02a3754d1af26a02504b95104e9f1227e681a,02d02a3754d1af26a02504b95104e9f1227e681a,Fix #3848 by closing the descriptor on error.
antirez,2017-04-18 14:15:24,https://api.github.com/repos/antirez/redis/git/commits/8b7b4d6734d4a19887398a27bddfd70878430677,8b7b4d6734d4a19887398a27bddfd70878430677,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2017-04-18 14:14:33,https://api.github.com/repos/antirez/redis/git/commits/da2f9cd1861708e2e4f1334a25fd316e380f779d,da2f9cd1861708e2e4f1334a25fd316e380f779d,Fix descriptor leak. Close #3848.
antirez,2017-04-18 14:13:23,https://api.github.com/repos/antirez/redis/git/commits/332a05dc33e5de4e6eea25a562ae9dea2ba69b30,332a05dc33e5de4e6eea25a562ae9dea2ba69b30,"Merge pull request #3856 from viennadd/issue-3847

fix #3847: add close socket before return ANET_ERR."
antirez,2017-04-18 09:01:47,https://api.github.com/repos/antirez/redis/git/commits/c33493277a218c6a877158c585447dda912f4d19,c33493277a218c6a877158c585447dda912f4d19,"Clarify why we save ziplist elements in revserse order.

Also get rid of variables that are now kinda redundant, since the
dictionary iterator was removed.

This is related to PR #3949."
antirez,2017-04-18 08:56:57,https://api.github.com/repos/antirez/redis/git/commits/0a942f17516c034a7868bbc68243b5f8a8d06f8d,0a942f17516c034a7868bbc68243b5f8a8d06f8d,"Merge pull request #3949 from spinlock/unstable-rdb-encoding

rdb: saving skiplist in reversed order to accelerate the deserialisation process"
badboy,2017-04-17 11:37:59,https://api.github.com/repos/antirez/redis/git/commits/c4ad4765b03b303473b4a76f443bcca638aa1afd,c4ad4765b03b303473b4a76f443bcca638aa1afd,"Reorder to make dict-benchmark compile on Linux

Fixes #3944"
antirez,2017-04-15 08:08:39,https://api.github.com/repos/antirez/redis/git/commits/271733f4f83552acc52a8baba4ae3fa7bd6b4ba0,271733f4f83552acc52a8baba4ae3fa7bd6b4ba0,"Cluster: discard pong times in the future.

However we allow for 500 milliseconds of tolerance, in order to
avoid often discarding semantically valid info (the node is up)
because of natural few milliseconds desync among servers even when
NTP is used.

Note that anyway we should ping the node from time to time regardless and
discover if it's actually down from our point of view, since no update
is accepted while we have an active ping on the node.

Related to #3929."
antirez,2017-04-14 15:53:11,https://api.github.com/repos/antirez/redis/git/commits/3f068b92b98c664ccefb457103068583879609e3,3f068b92b98c664ccefb457103068583879609e3,"Test: fix, hopefully, false PSYNC failure like in issue #2715.

And many other related Github issues... all reporting the same problem.
There was probably just not enough backlog in certain unlucky runs.
I'll ask people that can reporduce if they see now this as fixed as
well."
antirez,2017-04-14 11:39:49,https://api.github.com/repos/antirez/redis/git/commits/02777bb2529a403b50be4621a93fd65cdce14343,02777bb2529a403b50be4621a93fd65cdce14343,"Cluster: always add PFAIL nodes at end of gossip section.

To rely on the fact that nodes in PFAIL state will be shared around by
randomly adding them in the gossip section is a weak assumption,
especially after changes related to sending less ping/pong packets.

We want to always include gossip entries for all the nodes that are in
PFAIL state, so that the PFAIL -> FAIL state promotion can happen much
faster and reliably.

Related to #3929."
antirez,2017-04-14 08:40:22,https://api.github.com/repos/antirez/redis/git/commits/8c829d9e4323b3636afa43d0ad8eb1ce2397c3f9,8c829d9e4323b3636afa43d0ad8eb1ce2397c3f9,"Cluster: fix gossip section ping/pong times encoding.

The gossip section times are 32 bit, so cannot store the milliseconds
time but just the seconds approximation, which is good enough for our
uses. At the same time however, when comparing the gossip section times
of other nodes with our node's view, we need to convert back to
milliseconds.

Related to #3929. Without this change the patch to reduce the traffic in
the bus message does not work."
antirez,2017-04-14 08:35:55,https://api.github.com/repos/antirez/redis/git/commits/6878a3fedd8b15ed3c0602d15940007ebd240f22,6878a3fedd8b15ed3c0602d15940007ebd240f22,Cluster: add clean-logs command to create-cluster script.
antirez,2017-04-14 08:14:17,https://api.github.com/repos/antirez/redis/git/commits/8f7bf2841a4a793a02a01d5c4c887a7770aa5e45,8f7bf2841a4a793a02a01d5c4c887a7770aa5e45,"Cluster: decrease ping/pong traffic by trusting other nodes reports.

Cluster of bigger sizes tend to have a lot of traffic in the cluster bus
just for failure detection: a node will try to get a ping reply from
another node no longer than when the half the node timeout would elapsed,
in order to avoid a false positive.

However this means that if we have N nodes and the node timeout is set
to, for instance M seconds, we'll have to ping N nodes every M/2
seconds. This N*M/2 pings will receive the same number of pongs, so
a total of N*M packets per node. However given that we have a total of N
nodes doing this, the total number of messages will be N*N*M.

In a 100 nodes cluster with a timeout of 60 seconds, this translates
to a total of 100*100*30 packets per second, summing all the packets
exchanged by all the nodes.

This is, as you can guess, a lot... So this patch changes the
implementation in a very simple way in order to trust the reports of
other nodes: if a node A reports a node B as alive at least up to
a given time, we update our view accordingly.

The problem with this approach is that it could result into a subset of
nodes being able to reach a given node X, and preventing others from
detecting that is actually not reachable from the majority of nodes.
So the above algorithm is refined by trusting other nodes only if we do
not have currently a ping pending for the node X, and if there are no
failure reports for that node.

Since each node, anyway, pings 10 other nodes every second (one node
every 100 milliseconds), anyway eventually even trusting the other nodes
reports, we will detect if a given node is down from our POV.

Now to understand the number of packets that the cluster would exchange
for failure detection with the patch, we can start considering the
random PINGs that the cluster sent anyway as base line:
Each node sends 10 packets per second, so the total traffic if no
additioal packets would be sent, including PONG packets, would be:

    Total messages per second = N*10*2

However by trusting other nodes gossip sections will not AWALYS prevent
pinging nodes for the ""half timeout reached"" rule all the times. The
math involved in computing the actual rate as N and M change is quite
complex and depends also on another parameter, which is the number of
entries in the gossip section of PING and PONG packets. However it is
possible to compare what happens in cluster of different sizes
experimentally. After applying this patch a very important reduction in
the number of packets exchanged is trivial to observe, without apparent
impacts on the failure detection performances.

Actual numbers with different cluster sizes should be published in the
Reids Cluster documentation in the future.

Related to #3929."
antirez,2017-04-13 17:22:35,https://api.github.com/repos/antirez/redis/git/commits/c5d6f577f0a975c5c7f2e0f28ad9c4c4ec05eded,c5d6f577f0a975c5c7f2e0f28ad9c4c4ec05eded,"Cluster: collect more specific bus messages stats.

First step in order to change Cluster in order to use less messages.
Related to issue #3929."
itamarhaber,2017-04-13 14:03:46,https://api.github.com/repos/antirez/redis/git/commits/b8286d1fc9c1b8c2e17a9e884d94492ba039c53c,b8286d1fc9c1b8c2e17a9e884d94492ba039c53c,"Changes command stats iteration to being dict-based

With the addition of modules, looping over the redisCommandTable
misses any added commands. By moving to dictionary iteration this
is resolved."
antirez,2017-04-12 10:28:05,https://api.github.com/repos/antirez/redis/git/commits/104584b95e900bd52a754d7a2480b8768d1bae63,104584b95e900bd52a754d7a2480b8768d1bae63,Fix typo in feedReplicationBacklog() top comment.
antirez,2017-04-12 08:12:27,https://api.github.com/repos/antirez/redis/git/commits/1210af380429f2f96324f4c46a6aef7e4ddb7a3e,1210af380429f2f96324f4c46a6aef7e4ddb7a3e,Add a top comment in crucial functions inside networking.c.
antirez,2017-04-11 14:56:00,https://api.github.com/repos/antirez/redis/git/commits/4a850be4dc0709d66209e440315ca314a785e964,4a850be4dc0709d66209e440315ca314a785e964,"Set lua-time-limit default value at safe place.

Otherwise, as it was, it will overwrite whatever the user set.

Close #3703."
antirez,2017-04-11 14:54:27,https://api.github.com/repos/antirez/redis/git/commits/f47607af0242c31a113e6ff9c0a884acec036757,f47607af0242c31a113e6ff9c0a884acec036757,Fix preprocessor if/else chain broken in order to fix #3927.
antirez,2017-04-11 14:45:49,https://api.github.com/repos/antirez/redis/git/commits/74720ea993fa67ec865c697e1291e953628bdffd,74720ea993fa67ec865c697e1291e953628bdffd,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2017-04-11 14:45:08,https://api.github.com/repos/antirez/redis/git/commits/aa5b4be02ecf280b68786986f3fe99a9abcf0446,aa5b4be02ecf280b68786986f3fe99a9abcf0446,"Fix zmalloc_get_memory_size() ifdefs to actually use the else branch.

Close #3927."
antirez,2017-04-11 14:31:55,https://api.github.com/repos/antirez/redis/git/commits/69ce5c5d10f0baf395892a850f656463f42d8d1d,69ce5c5d10f0baf395892a850f656463f42d8d1d,"Merge pull request #3924 from lorneli/unstable

Expire: Update comment of activeExpireCycle function"
antirez,2017-04-10 11:17:05,https://api.github.com/repos/antirez/redis/git/commits/531647bb1bfb4ce02b691605e11ff4144396442b,531647bb1bfb4ce02b691605e11ff4144396442b,Make more obvious why there was issue #3843.
antirez,2017-04-10 11:14:52,https://api.github.com/repos/antirez/redis/git/commits/01b6966afc1c80f40f63b28d01b45c09b039cf7a,01b6966afc1c80f40f63b28d01b45c09b039cf7a,"Merge pull request #3843 from dvirsky/fix_bc_free

fixed free of blocked client before refering to it"
antirez,2017-04-10 07:33:21,https://api.github.com/repos/antirez/redis/git/commits/ffefc9f92d55a45439afe80d6a35615a7cc38758,ffefc9f92d55a45439afe80d6a35615a7cc38758,"Fix modules blocking commands awake delay.

If a thread unblocks a client blocked in a module command, by using the
RedisMdoule_UnblockClient() API, the event loop may not be awaken until
the next timeout of the multiplexing API or the next unrelated I/O
operation on other clients. We actually want the client to be served
ASAP, so a mechanism is needed in order for the unblocking API to inform
Redis that there is a client to serve ASAP.

This commit fixes the issue using the old trick of the pipe: when a
client needs to be unblocked, a byte is written in a pipe. When we run
the list of clients blocked in modules, we consume all the bytes
written in the pipe. Writes and reads are performed inside the context
of the mutex, so no race is possible in which we consume the bytes that
are actually related to an awake request for a client that should still
be put into the list of clients to unblock.

It was verified that after the fix the server handles the blocked
clients with the expected short delay.

Thanks to @dvirsky for understanding there was such a problem and
reporting it."
antirez,2017-04-08 15:31:09,https://api.github.com/repos/antirez/redis/git/commits/91999fce407692b205d3c1e3d376ce0012267203,91999fce407692b205d3c1e3d376ce0012267203,"Rax library updated.

Important bugs fixed."
lorneli,2017-04-08 07:15:24,https://api.github.com/repos/antirez/redis/git/commits/98db5739cc2f7fa4a7f0a661250cf1ebba78525b,98db5739cc2f7fa4a7f0a661250cf1ebba78525b,"Expire: Update comment of activeExpireCycle function

The macro REDIS_EXPIRELOOKUPS_TIME_PERC has been replaced by
ACTIVE_EXPIRE_CYCLE_SLOW_TIME_PERC in commit
6500fabfb881a7ffaadfbff74ab801c55d4591fc."
antirez,2017-04-07 06:46:39,https://api.github.com/repos/antirez/redis/git/commits/3f9e2322ececcbc5ca284cbd3d0d61c0ef322032,3f9e2322ececcbc5ca284cbd3d0d61c0ef322032,Rax library updated.
antirez,2017-03-27 13:26:56,https://api.github.com/repos/antirez/redis/git/commits/1409c545da7861912acef4f42c4932f6c23e9937,1409c545da7861912acef4f42c4932f6c23e9937,Cluster: hash slots tracking using a radix tree.
antirez,2017-03-15 08:18:04,https://api.github.com/repos/antirez/redis/git/commits/94751543b0a15ea333dab3121fa32747cf59de8f,94751543b0a15ea333dab3121fa32747cf59de8f,"Merge pull request #3875 from oranagra/lfu_tests

add LFU policies to the test suite, just for coverage"
antirez,2017-03-09 12:49:36,https://api.github.com/repos/antirez/redis/git/commits/a62f786344d894b7447c3d3de6422cab6798c392,a62f786344d894b7447c3d3de6422cab6798c392,Use sha256 instead of sha1 to generate tarball hashes.
viennadd,2017-03-07 16:14:05,https://api.github.com/repos/antirez/redis/git/commits/59bdd08214831b268dd7c4981db8404da9c11e3a,59bdd08214831b268dd7c4981db8404da9c11e3a,fix #3847: add close socket before return ANET_ERR.
itamarhaber,2017-03-06 12:37:10,https://api.github.com/repos/antirez/redis/git/commits/443f279a3a33f8047adc397bb53aad614aa35133,443f279a3a33f8047adc397bb53aad614aa35133,Sets up fake client to select current db in RM_Call()
guybe7,2017-03-02 11:25:05,https://api.github.com/repos/antirez/redis/git/commits/71a8df6a2b6fe37a625636a3902fcc713c7c4919,71a8df6a2b6fe37a625636a3902fcc713c7c4919,Merge branch 'unstable' of https://github.com/antirez/redis into unstable
dvirsky,2017-03-01 14:51:01,https://api.github.com/repos/antirez/redis/git/commits/4b2229e4b882c49eae04b65792606b255af3d215,4b2229e4b882c49eae04b65792606b255af3d215,fixed free of blocked client before refering to it
antirez,2017-02-23 16:00:13,https://api.github.com/repos/antirez/redis/git/commits/9cc83d2ad9d5ed0e6a396a7e26814ac2f2445d1c,9cc83d2ad9d5ed0e6a396a7e26814ac2f2445d1c,"Makefile: fix building with Solaris C compiler, 64 bit."
antirez,2017-02-23 14:35:01,https://api.github.com/repos/antirez/redis/git/commits/ed7e331051e79cabf4f69b753d116382f2962ca4,ed7e331051e79cabf4f69b753d116382f2962ca4,Merge branch 'sparc' of ssh://209.141.57.197:12222//export/home/antirez/redis into sparc
antirez,2017-02-23 14:39:44,https://api.github.com/repos/antirez/redis/git/commits/b3391fd853d55b3da04ede024adcc6bf017c78f1,b3391fd853d55b3da04ede024adcc6bf017c78f1,Use ARM unaligned accesses ifdefs for SPARC as well.
antirez,2017-02-23 14:38:44,https://api.github.com/repos/antirez/redis/git/commits/d7826823c05ad82f710da74c3d5d402898187888,d7826823c05ad82f710da74c3d5d402898187888,Fix BITPOS unaligned memory access.
oranagra,2017-02-23 11:44:42,https://api.github.com/repos/antirez/redis/git/commits/161a3a174b477fa95003765b682325604327074c,161a3a174b477fa95003765b682325604327074c,"when a slave experiances an error on commands that come from master, print to the log

since slave isn't replying to it's master, these errors go unnoticed.
since we don't expect the master to send garbadge to the slave, this should be safe.
(as long as we don't log OOM errors there)"
oranagra,2017-02-23 11:04:08,https://api.github.com/repos/antirez/redis/git/commits/f86df924b01db43eb68f5c4b4cac4c44c1507390,f86df924b01db43eb68f5c4b4cac4c44c1507390,"add SDS_NOINIT option to sdsnewlen to avoid unnecessary memsets.

this commit also contains small bugfix in rdbLoadLzfStringObject
a bug that currently has no implications."
antirez,2017-02-22 12:08:21,https://api.github.com/repos/antirez/redis/git/commits/95883313b5a405916fabed34c3af290d6072c817,95883313b5a405916fabed34c3af290d6072c817,"Solaris fixes about tail usage and atomic vars.

Testing with Solaris C compiler (SunOS 5.11 11.2 sun4v sparc sun4v)
there were issues compiling due to atomicvar.h and running the
tests also failed because of ""tail"" usage not conform with Solaris
tail implementation. This commit fixes both the issues."
antirez,2017-02-22 11:27:01,https://api.github.com/repos/antirez/redis/git/commits/2b36706a48759ac6ed991ab1f8257de122425a75,2b36706a48759ac6ed991ab1f8257de122425a75,"Test: replication-psync, wait more to detect write load.

Slow systems like the original Raspberry PI need more time
than 5 seconds to start the script and detect writes.
After fixing the Raspberry PI can pass the unit without issues."
antirez,2017-02-22 11:00:09,https://api.github.com/repos/antirez/redis/git/commits/7c8ddab4f88a76413641b3dc49b0c42ac8ee3b2e,7c8ddab4f88a76413641b3dc49b0c42ac8ee3b2e,Test: fix conditional execution of HINCRBYFLOAT representation test.
antirez,2017-02-21 16:10:10,https://api.github.com/repos/antirez/redis/git/commits/06263485d46696ba76a653d2b594f3493103c001,06263485d46696ba76a653d2b594f3493103c001,Merge branch 'siphash' into unstable
antirez,2017-02-21 16:10:06,https://api.github.com/repos/antirez/redis/git/commits/e084b5a39fccef5a6d97384d43b9babdca77f7f7,e084b5a39fccef5a6d97384d43b9babdca77f7f7,Merge branch 'arm' into unstable
antirez,2017-02-21 16:07:28,https://api.github.com/repos/antirez/redis/git/commits/0285c2714b6f1f4517d2ac3bc34177f874205a8b,0285c2714b6f1f4517d2ac3bc34177f874205a8b,"SipHash 2-4 -> SipHash 1-2.

For performance reasons we use a reduced rounds variant of
SipHash. This should still provide enough protection and the
effects in the hash table distribution are non existing.
If some real world attack on SipHash 1-2 will be found we can
trivially switch to something more secure. Anyway it is a
big step forward from Murmurhash, for which it is trivial to
generate *seed independent* colliding keys... The speed
penatly introduced by SipHash 2-4, around 4%, was a too big
price to pay compared to the effectiveness of the HashDoS
attack against SipHash 1-2, and considering so far in the
Redis history, no such an incident ever happened even while
using trivially to collide hash functions."
antirez,2017-02-21 11:25:29,https://api.github.com/repos/antirez/redis/git/commits/cd90389b30f745ef1ed04fd579adbd914189a10a,cd90389b30f745ef1ed04fd579adbd914189a10a,"freeMemoryIfNeeded(): improve code and lazyfree handling.

1. Refactor memory overhead computation into a function.
2. Every 10 keys evicted, check if memory usage already reached
   the target value directly, since we otherwise don't count all
   the memory reclaimed by the background thread right now."
antirez,2017-02-20 16:39:44,https://api.github.com/repos/antirez/redis/git/commits/84fa8230e5a75c8ff4eed6afa56d7a6babdb8fb9,84fa8230e5a75c8ff4eed6afa56d7a6babdb8fb9,Use locale agnostic tolower() in dict.c hash function.
antirez,2017-02-20 16:32:46,https://api.github.com/repos/antirez/redis/git/commits/05ea8c612238bc8b9a8eda2427d6cf8a3afb4ac5,05ea8c612238bc8b9a8eda2427d6cf8a3afb4ac5,SipHash x86 optimizations.
antirez,2017-02-20 15:09:54,https://api.github.com/repos/antirez/redis/git/commits/adeed29a99dcd0efdbfe4dbd5da74e7b01966c67,adeed29a99dcd0efdbfe4dbd5da74e7b01966c67,"Use SipHash hash function to mitigate HashDos attempts.

This change attempts to switch to an hash function which mitigates
the effects of the HashDoS attack (denial of service attack trying
to force data structures to worst case behavior) while at the same time
providing Redis with an hash function that does not expect the input
data to be word aligned, a condition no longer true now that sds.c
strings have a varialbe length header.

Note that it is possible sometimes that even using an hash function
for which collisions cannot be generated without knowing the seed,
special implementation details or the exposure of the seed in an
indirect way (for example the ability to add elements to a Set and
check the return in which Redis returns them with SMEMBERS) may
make the attacker's life simpler in the process of trying to guess
the correct seed, however the next step would be to switch to a
log(N) data structure when too many items in a single bucket are
detected: this seems like an overkill in the case of Redis.

SPEED REGRESION TESTS:

In order to verify that switching from MurmurHash to SipHash had
no impact on speed, a set of benchmarks involving fast insertion
of 5 million of keys were performed.

The result shows Redis with SipHash in high pipelining conditions
to be about 4% slower compared to using the previous hash function.
However this could partially be related to the fact that the current
implementation does not attempt to hash whole words at a time but
reads single bytes, in order to have an output which is endian-netural
and at the same time working on systems where unaligned memory accesses
are a problem.

Further X86 specific optimizations should be tested, the function
may easily get at the same level of MurMurHash2 if a few optimizations
are performed."
sitano,2016-07-23 14:31:56,https://api.github.com/repos/antirez/redis/git/commits/9b05aafb50348838f45bfddcd689e7d8d1d3c950,9b05aafb50348838f45bfddcd689e7d8d1d3c950,"fix #2883, #2857 pipe fds leak when fork() failed on bg aof rw"
antirez,2017-02-20 09:18:41,https://api.github.com/repos/antirez/redis/git/commits/76d87f47c7075a04dfd759fc5bd102dfad005dcc,76d87f47c7075a04dfd759fc5bd102dfad005dcc,"Don't leak file descriptor on syncWithMaster().

Close #3804."
antirez,2017-02-19 15:07:08,https://api.github.com/repos/antirez/redis/git/commits/7329cc39818a05c168e7d1e791afb03c089f1933,7329cc39818a05c168e7d1e791afb03c089f1933,"ARM: Avoid fast path for BITOP.

GCC will produce certain unaligned multi load-store instructions
that will be trapped by the Linux kernel since ARM v6 cannot
handle them with unaligned addresses. Better to use the slower
but safer implementation instead of generating the exception which
should be anyway very slow."
antirez,2017-02-19 15:02:37,https://api.github.com/repos/antirez/redis/git/commits/4e9cf4cc7ed4b732fc4bb592f19ceb41d132954e,4e9cf4cc7ed4b732fc4bb592f19ceb41d132954e,"ARM: Use libc malloc by default.

I'm not sure how much test Jemalloc gets on ARM, moreover
compiling Redis with Jemalloc support in not very powerful
devices, like most ARMs people will build Redis on, is extremely
slow. It is possible to enable Jemalloc build anyway if needed
by using ""make MALLOC=jemalloc""."
antirez,2017-02-19 14:59:39,https://api.github.com/repos/antirez/redis/git/commits/72d6d64771ce52519c240fb122dbb35f989b4669,72d6d64771ce52519c240fb122dbb35f989b4669,"ARM: Avoid memcpy() in MurmurHash64A() if we are using 64 bit ARM.

However note that in architectures supporting 64 bit unaligned
accesses memcpy(...,...,8) is likely translated to a simple
word memory movement anyway."
antirez,2017-02-19 14:01:58,https://api.github.com/repos/antirez/redis/git/commits/1e272a6b52d663e0b4db8f42162c4461405b7f84,1e272a6b52d663e0b4db8f42162c4461405b7f84,ARM: Fix 64 bit unaligned access in MurmurHash64A().
flowly,2017-02-10 11:53:36,https://api.github.com/repos/antirez/redis/git/commits/1f72ec7dad0874c0e5163a21edd345e7e3f92ca1,1f72ec7dad0874c0e5163a21edd345e7e3f92ca1,"Merge pull request #1 from antirez/unstable

update to upstream"
antirez,2017-02-09 08:58:38,https://api.github.com/repos/antirez/redis/git/commits/f917e0da4cda8a0e6cd3242180b268706cdd2dd2,f917e0da4cda8a0e6cd3242180b268706cdd2dd2,"Fix MIGRATE closing of cached socket on error.

After investigating issue #3796, it was discovered that MIGRATE
could call migrateCloseSocket() after the original MIGRATE c->argv
was already rewritten as a DEL operation. As a result the host/port
passed to migrateCloseSocket() could be anything, often a NULL pointer
that gets deferenced crashing the server.

Now the socket is closed at an earlier time when there is a socket
error in a later stage where no retry will be performed, before we
rewrite the argument vector. Moreover a check was added so that later,
in the socket_err label, there is no further attempt at closing the
socket if the argument was rewritten.

This fix should resolve the bug reported in #3796."
antirez,2017-02-01 16:01:31,https://api.github.com/repos/antirez/redis/git/commits/0dbfb1d154b0df28bbdb16a59ae7342d4a3f9281,0dbfb1d154b0df28bbdb16a59ae7342d4a3f9281,Fix ziplist fix...
antirez,2017-01-30 15:34:08,https://api.github.com/repos/antirez/redis/git/commits/c495d095ae495ea5253443ee4562aaa30681a854,c495d095ae495ea5253443ee4562aaa30681a854,"Ziplist: insertion bug under particular conditions fixed.

Ziplists had a bug that was discovered while investigating a different
issue, resulting in a corrupted ziplist representation, and a likely
segmentation foult and/or data corruption of the last element of the
ziplist, once the ziplist is accessed again.

The bug happens when a specific set of insertions / deletions is
performed so that an entry is encoded to have a ""prevlen"" field (the
length of the previous entry) of 5 bytes but with a count that could be
encoded in a ""prevlen"" field of a since byte. This could happen when the
""cascading update"" process called by ziplistInsert()/ziplistDelete() in
certain contitious forces the prevlen to be bigger than necessary in
order to avoid too much data moving around.

Once such an entry is generated, inserting a very small entry
immediately before it will result in a resizing of the ziplist for a
count smaller than the current ziplist length (which is a violation,
inserting code expects the ziplist to get bigger actually). So an FF
byte is inserted in a misplaced position. Moreover a realloc() is
performed with a count smaller than the ziplist current length so the
final bytes could be trashed as well.

SECURITY IMPLICATIONS:

Currently it looks like an attacker can only crash a Redis server by
providing specifically choosen commands. However a FF byte is written
and there are other memory operations that depend on a wrong count, so
even if it is not immediately apparent how to mount an attack in order
to execute code remotely, it is not impossible at all that this could be
done. Attacks always get better... and we did not spent enough time in
order to think how to exploit this issue, but security researchers
or malicious attackers could."
antirez,2017-01-27 15:54:20,https://api.github.com/repos/antirez/redis/git/commits/3a7410a8a69dca0ff5d4cd4e48abf974d2e53b9f,3a7410a8a69dca0ff5d4cd4e48abf974d2e53b9f,"ziplist: better comments, some refactoring."
antirez,2017-01-30 08:58:34,https://api.github.com/repos/antirez/redis/git/commits/27e29f4fe61d822eb23d948bcb72db76c4c887e5,27e29f4fe61d822eb23d948bcb72db76c4c887e5,"Jemalloc updated to 4.4.0.

The original jemalloc source tree was modified to:

1. Remove the configure error that prevents nested builds.
2. Insert the Redis private Jemalloc API in order to allow the
Redis fragmentation function to work."
antirez,2017-01-27 15:26:24,https://api.github.com/repos/antirez/redis/git/commits/713fe0b7d7096cbf3ce774e0041a0b6b31f5f26f,713fe0b7d7096cbf3ce774e0041a0b6b31f5f26f,"Merge pull request #3784 from badboy/dont-divide-by-zero

Don't divide by zero"
badboy,2017-01-27 15:23:15,https://api.github.com/repos/antirez/redis/git/commits/3c9b817217b03d0377bed3857f0159a473711490,3c9b817217b03d0377bed3857f0159a473711490,"Don't divide by zero

Previously Redis crashed on `MEMORY DOCTOR` when it has no slaves attached.

Fixes #3783"
antirez,2017-01-26 12:41:59,https://api.github.com/repos/antirez/redis/git/commits/2e4f53a7111c92f2c297c396564ff02b6bf68bbf,2e4f53a7111c92f2c297c396564ff02b6bf68bbf,"Merge pull request #3778 from MiterV1/unstable

Change switch statment to if statment"
MiterV1,2017-01-26 12:36:26,https://api.github.com/repos/antirez/redis/git/commits/3ec1a001fbc11b54c0231f9c58384eb53ca3802e,3ec1a001fbc11b54c0231f9c58384eb53ca3802e,Change switch statment to if statment
antirez,2017-01-25 08:31:47,https://api.github.com/repos/antirez/redis/git/commits/41d16f7a4a6848be304e0b4433bd5683caf27338,41d16f7a4a6848be304e0b4433bd5683caf27338,"Merge pull request #3657 from itamarhaber/patch-9

Verify pairs are provided after ZADD's subcommands"
antirez,2017-01-20 10:01:43,https://api.github.com/repos/antirez/redis/git/commits/432699845c38f525c50ab700636339c9d9688b3e,432699845c38f525c50ab700636339c9d9688b3e,"Merge pull request #3712 from oranagra/fix_assert_debug_digest

fix rare assertion in DEBUG DIGEST"
antirez,2017-01-18 16:11:57,https://api.github.com/repos/antirez/redis/git/commits/17ac46ea78fc3bed81b764d096ec8fb38e3ae3c9,17ac46ea78fc3bed81b764d096ec8fb38e3ae3c9,"Add panic() into redisassert.h.

This header file is for libs, like ziplist.c, that we want to leave
almost separted from the core. The panic() calls will be easy to delete
in order to use such files outside, but the debugging info we gain are
very valuable compared to simple assertions where it is not possible to
print debugging info."
antirez,2017-01-18 16:05:10,https://api.github.com/repos/antirez/redis/git/commits/53b8bf2c89ac9607a8bede2868d60cf8b3cbddd6,53b8bf2c89ac9607a8bede2868d60cf8b3cbddd6,"serverPanic(): allow printf() alike formatting.

This is of great interest because allows us to print debugging
informations that could be of useful when debugging, like in the
following example:

    serverPanic(""Unexpected encoding for object %d, %d"",
        obj->type, obj->encoding);"
antirez,2017-01-13 10:47:09,https://api.github.com/repos/antirez/redis/git/commits/2cd1ae736f7ace5d0620937e4783fd85e9ca7448,2cd1ae736f7ace5d0620937e4783fd85e9ca7448,"Ziplist: remove static from functions, they prevent good crash reports."
antirez,2017-01-13 10:32:22,https://api.github.com/repos/antirez/redis/git/commits/d21aabcedcb3202701b4a6f5cd1b1537c5a5e31e,d21aabcedcb3202701b4a6f5cd1b1537c5a5e31e,"Merge pull request #3734 from badboy/avoid-command

Initialize help only in repl mode"
antirez,2017-01-12 11:47:46,https://api.github.com/repos/antirez/redis/git/commits/636c693f447f4c242a1fff5ad987bc6102b3e243,636c693f447f4c242a1fff5ad987bc6102b3e243,"Use const in modules types mem_usage method.

As suggested by @itamarhaber."
antirez,2017-01-12 08:50:40,https://api.github.com/repos/antirez/redis/git/commits/3f79b2f8831bc0fee3c037862aad5a3e9d70cf4b,3f79b2f8831bc0fee3c037862aad5a3e9d70cf4b,Defrag: don't crash when a module value is encountered.
antirez,2017-01-12 08:08:43,https://api.github.com/repos/antirez/redis/git/commits/baa98988215f005b5b57e156c68a5bdc8454a3a5,baa98988215f005b5b57e156c68a5bdc8454a3a5,"MEMORY USAGE: support for modules data types.

As a side effect of supporting it, we no longer crash when MEMORY USAGE
is called against a module data type.

Close #3637."
guybe7,2017-01-11 17:24:19,https://api.github.com/repos/antirez/redis/git/commits/56c01c959ab6e86b5fbb2f882a30324619987947,56c01c959ab6e86b5fbb2f882a30324619987947,enlarged buffer given to ld2string
antirez,2017-01-11 16:24:49,https://api.github.com/repos/antirez/redis/git/commits/634b0966106b48cbf2c51fadafa7482a5af77e64,634b0966106b48cbf2c51fadafa7482a5af77e64,Defrag: document the feature in redis.conf.
antirez,2017-01-11 14:43:08,https://api.github.com/repos/antirez/redis/git/commits/6ad34a4b789ef69c3cfec4360869248ba884b988,6ad34a4b789ef69c3cfec4360869248ba884b988,Defrag: not enabled by default. Error on CONFIG SET if not available.
antirez,2017-01-11 14:37:19,https://api.github.com/repos/antirez/redis/git/commits/86192f3038316dbe464d5e50d818f99892359ad7,86192f3038316dbe464d5e50d818f99892359ad7,Defrag: fix function name typo defarg -> defrag.
antirez,2017-01-11 14:36:48,https://api.github.com/repos/antirez/redis/git/commits/41868796759f5cf16c83e7a09c3e2f7abec08670,41868796759f5cf16c83e7a09c3e2f7abec08670,Defrag: do not crash on empty quicklist.
antirez,2017-01-10 10:32:52,https://api.github.com/repos/antirez/redis/git/commits/e91f0ea1b3b1fa6237ec6b359a2665ab0f472989,e91f0ea1b3b1fa6237ec6b359a2665ab0f472989,"Defrag: fix comments & code to conform to the Redis code base.

Don't go over 80 cols. Start with captial letter, capital letter afer
point, end comment with a point and so forth. No actual code behavior
touched at all."
antirez,2017-01-10 10:25:39,https://api.github.com/repos/antirez/redis/git/commits/173d692bc2e87d476a8ef45b671cf9ac98695c15,173d692bc2e87d476a8ef45b671cf9ac98695c15,"Defrag: activate it only if running modified version of Jemalloc.

This commit also includes minor aesthetic changes like removal of
trailing spaces."
badboy,2017-01-08 17:27:00,https://api.github.com/repos/antirez/redis/git/commits/afaaa9188537b7651b7e42dfe3e9f340af819a0f,afaaa9188537b7651b7e42dfe3e9f340af819a0f,Initialize help only in repl mode
oranagra,2017-01-02 07:42:32,https://api.github.com/repos/antirez/redis/git/commits/5ab6a54cc619e750daac59baef7b9f9dc1f87db9,5ab6a54cc619e750daac59baef7b9f9dc1f87db9,active defrag improvements
oranagra,2016-12-30 01:37:52,https://api.github.com/repos/antirez/redis/git/commits/7aa9e6d2ae1d500d8ba900b239207143993ecc3e,7aa9e6d2ae1d500d8ba900b239207143993ecc3e,active memory defragmentation
oranagra,2016-12-24 15:27:58,https://api.github.com/repos/antirez/redis/git/commits/b2da5ea773356320af3cda6cfd0f1fc1e7d48ba7,b2da5ea773356320af3cda6cfd0f1fc1e7d48ba7,"fix rare assertion in DEBUG DIGEST

getExpire calls dictFind which can do rehashing.
found by calling computeDatasetDigest from serverCron and running the test suite."
antirez,2016-12-21 11:11:56,https://api.github.com/repos/antirez/redis/git/commits/6712bce92c79de5c2caa38e9b597a3fa52fd497f,6712bce92c79de5c2caa38e9b597a3fa52fd497f,"deps/hiredis updated to latest version.

Close #3687."
antirez,2016-12-20 14:39:56,https://api.github.com/repos/antirez/redis/git/commits/0b7691201e255ed21a0fdf6779199de0d7c1498c,0b7691201e255ed21a0fdf6779199de0d7c1498c,"Merge pull request #3242 from whatacold/unstable

fix the wrong description of intsetGet()."
antirez,2016-12-20 12:39:29,https://api.github.com/repos/antirez/redis/git/commits/43bccbc3f46a92f71cd4029b8b3fbe54004b6e29,43bccbc3f46a92f71cd4029b8b3fbe54004b6e29,"Merge pull request #3498 from ZhukovAlexander/patch-1

Fix an article usage"
antirez,2016-12-20 12:33:10,https://api.github.com/repos/antirez/redis/git/commits/a764c87b672fa953f321b0d0549e351329c2cebb,a764c87b672fa953f321b0d0549e351329c2cebb,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2016-12-20 12:32:54,https://api.github.com/repos/antirez/redis/git/commits/619317da6f115d600c365e6cacd5ece1da97308f,619317da6f115d600c365e6cacd5ece1da97308f,"Merge pull request #3696 from jstncarvalho/FixMissingBrackets_ZIP_DECODE_LENGTH

Fix missing brackets around encoding variable in ZIP_DECODE_LENGTH macro"
antirez,2016-12-20 11:22:11,https://api.github.com/repos/antirez/redis/git/commits/af0284926c5883c1cd1a0bb40188a6897cf11829,af0284926c5883c1cd1a0bb40188a6897cf11829,"Geo: fuzzy test inconsistency report fixed to show all points.

We need to report all the points added into the set, not just the ones
matching the Tcl distance algo."
antirez,2016-12-20 09:19:06,https://api.github.com/repos/antirez/redis/git/commits/0f72257049f76c8371e2dc18336a4d1015d06a99,0f72257049f76c8371e2dc18336a4d1015d06a99,"Geo: fix GEOHASH return value for consistency.

The same thing observed in #3551 by gnethercutt also fixed for
GEOHASH as the original PR did."
antirez,2016-12-20 09:12:38,https://api.github.com/repos/antirez/redis/git/commits/913070a9e85170e89176e5dc9488263cc7327085,913070a9e85170e89176e5dc9488263cc7327085,"Geo: fix edge case return values for uniformity.

There were two cases outlined in issue #3512 and PR #3551 where
the Geo API returned unexpected results: empty strings where NULL
replies were expected, or a single null reply where an array was
expected. This violates the Redis principle that Redis replies for
existing keys or elements should be indistinguishable.

This is technically an API breakage so will be merged only into 4.0 and
specified in the changelog in the list of breaking compatibilities, even
if it is not very likely that actual code will be affected, hopefully,
since with the past behavior basically there was to acconut for *both*
the possibilities, and the new behavior is always one of the two, but
in a consistent way."
jstncarvalho,2016-12-19 22:37:41,https://api.github.com/repos/antirez/redis/git/commits/7c64e8896393f2fe4859a4a039e95c6ff0047fce,7c64e8896393f2fe4859a4a039e95c6ff0047fce,Fix missing brackets around encoding variable in ZIP_DECODE_LENGTH macro
antirez,2016-12-19 15:49:58,https://api.github.com/repos/antirez/redis/git/commits/8444b46d20ef9c8de3f7e255e4f3bfa44f509c77,8444b46d20ef9c8de3f7e255e4f3bfa44f509c77,"Fix test ""server is up"" detection after logging changes."
antirez,2016-12-19 15:45:18,https://api.github.com/repos/antirez/redis/git/commits/074383f8509daf86d490df967c5f0fca91bf96e9,074383f8509daf86d490df967c5f0fca91bf96e9,"Remove first version of ASCII wave, later discarded."
antirez,2016-12-19 15:41:47,https://api.github.com/repos/antirez/redis/git/commits/06bfeb482d5652e55bdd9d93a9909f26d6c3999a,06bfeb482d5652e55bdd9d93a9909f26d6c3999a,"Only show Redis logo if logging to stdout / TTY.

You can still force the logo in the normal logs.
For motivations, check issue #3112. For me the reason is that actually
the logo is nice to have in interactive sessions, but inside the logs
kinda loses its usefulness, but for the ability of users to recognize
restarts easily: for this reason the new startup sequence shows a one
liner ASCII ""wave"" so that there is still a bit of visual clue.

Startup logging was modified in order to log events in more obvious
ways, and to log more events. Also certain important informations are
now more easy to parse/grep since they are printed in field=value style.

The option --always-show-logo in redis.conf was added, defaulting to no."
antirez,2016-12-19 07:53:25,https://api.github.com/repos/antirez/redis/git/commits/90a6f7fc98df849a9890ab6e0da4485457bf60cd,90a6f7fc98df849a9890ab6e0da4485457bf60cd,adjustOpenFilesLimit() comment made hopefully more clear.
antirez,2016-12-19 07:48:44,https://api.github.com/repos/antirez/redis/git/commits/2988889db141b5d691ac94e0b64b37884030dea8,2988889db141b5d691ac94e0b64b37884030dea8,"Merge pull request #3603 from oranagra/adjustOpenFilesLimit_overflow

fix unsigned int overflow in adjustOpenFilesLimit"
antirez,2016-12-19 07:20:01,https://api.github.com/repos/antirez/redis/git/commits/ce9e36eb01f1b9122ceedc61f00d08ed0a4cfb97,ce9e36eb01f1b9122ceedc61f00d08ed0a4cfb97,"Merge pull request #3605 from hylepo/unstable

Fixing typo in the usage of redis-benchmark"
antirez,2016-12-19 07:19:10,https://api.github.com/repos/antirez/redis/git/commits/6cf1a325d67cd294857480229251ad82e79a68d8,6cf1a325d67cd294857480229251ad82e79a68d8,"Merge pull request #3643 from andyli028/unstable

Modify MIN->MAX"
antirez,2016-12-16 16:48:33,https://api.github.com/repos/antirez/redis/git/commits/8e390a62ad3b06e0f11813d0c832721f0b676d63,8e390a62ad3b06e0f11813d0c832721f0b676d63,"Hopefully improve code comments for issue #3616.

This commit also contains other changes in order to conform the code to
the Redis core style, specifically 80 chars max per line, smart
conditionals in the same line:

    if (that) do_this();"
antirez,2016-12-16 16:43:20,https://api.github.com/repos/antirez/redis/git/commits/ca4ca5073e394cca3f5c8f8c508803a6d9b2c606,ca4ca5073e394cca3f5c8f8c508803a6d9b2c606,"Merge pull request #3616 from oranagra/stop_aofrw_before_rdbload

CoW improvement, stop AOFRW before flushing and parsing slave RDB"
antirez,2016-12-16 15:53:13,https://api.github.com/repos/antirez/redis/git/commits/151af731181caf0429b4b172493c4604c6673cae,151af731181caf0429b4b172493c4604c6673cae,"Merge pull request #3661 from itamarhaber/module-doc2

 Corrects a couple of omissions in the modules docs"
antirez,2016-12-16 10:05:10,https://api.github.com/repos/antirez/redis/git/commits/87538cb7fe19b5671189442cd604de5d58a856a7,87538cb7fe19b5671189442cd604de5d58a856a7,"Switch PFCOUNT to LogLog-Beta algorithm.

The new algorithm provides the same speed with a smaller error for
cardinalities in the range 0-100k. Before switching, the new and old
algorithm behavior was studied in details in the context of
issue #3677. You can find a few graphs and motivations there."
antirez,2016-12-16 09:58:19,https://api.github.com/repos/antirez/redis/git/commits/0224be881124343bd4ad7696848f9fd6c51b11d0,0224be881124343bd4ad7696848f9fd6c51b11d0,"Use llroundl() before converting loglog-beta output to integer.

Otherwise for small cardinalities the algorithm will output something
like, for example, 4.99 for a candinality of 5, that will be converted
to 4 producing a huge error."
antirez,2016-12-16 09:56:40,https://api.github.com/repos/antirez/redis/git/commits/47dea01c853e075ee591ded515eecffefd535425,47dea01c853e075ee591ded515eecffefd535425,"Fix HLL gnuplot graph generator script for new redis-rb versions.

The PFADD now takes an array and has mandatory two arguments."
antirez,2016-12-16 08:20:47,https://api.github.com/repos/antirez/redis/git/commits/5ad2a94a1696fd7a87070836fdb081c4027730f5,5ad2a94a1696fd7a87070836fdb081c4027730f5,"Merge pull request #3686 from dvirsky/fix_lowlevel_zrange

fixed stop condition in RM_ZsetRangeNext and RM_ZsetRangePrev"
antirez,2016-12-16 08:04:57,https://api.github.com/repos/antirez/redis/git/commits/d634c36253125e7f07bb161d76a89e3649213d6a,d634c36253125e7f07bb161d76a89e3649213d6a,ziplist.c explanation of format improved a bit.
antirez,2016-12-16 08:02:50,https://api.github.com/repos/antirez/redis/git/commits/ac61f9062583d67dd43f7d698824464d1e30d84b,ac61f9062583d67dd43f7d698824464d1e30d84b,"DEBUG: new ""ziplist"" subcommand added. Dumps a ziplist on stdout.

The commit improves ziplistRepr() and adds a new debugging subcommand so
that we can trigger the dump directly from the Redis API.
This command capability was used while investigating issue #3684."
dvirsky,2016-12-14 22:07:20,https://api.github.com/repos/antirez/redis/git/commits/7f9b9512b877af96ded1c9758c23c075bab36f8d,7f9b9512b877af96ded1c9758c23c075bab36f8d,fixed stop condition in RM_ZsetRangeNext and RM_ZsetRangePrev
antirez,2016-12-14 11:42:04,https://api.github.com/repos/antirez/redis/git/commits/b53e73e159a38308c2873bfce7237b7373ef4374,b53e73e159a38308c2873bfce7237b7373ef4374,"MIGRATE: Remove upfront ttl initialization.

After the fix for #3673 the ttl var is always initialized inside the
loop itself, so the early initialization is not needed.

Variables declaration also moved to a more local scope."
antirez,2016-12-14 11:41:00,https://api.github.com/repos/antirez/redis/git/commits/c9f0456d818cb9955f945f40d7e3040765a893fe,c9f0456d818cb9955f945f40d7e3040765a893fe,"Merge pull request #3673 from badboy/reset-ttl-on-migrating

Reset the ttl for additional keys"
antirez,2016-12-13 15:28:12,https://api.github.com/repos/antirez/redis/git/commits/dee11ebab88a6880b2dfb7e5dbafa0790d046eaf,dee11ebab88a6880b2dfb7e5dbafa0790d046eaf,Writable slaves expires: unit test.
antirez,2016-12-13 15:27:13,https://api.github.com/repos/antirez/redis/git/commits/b6f871cf42f5d97e1d6ce81e0429cf4a8f204d31,b6f871cf42f5d97e1d6ce81e0429cf4a8f204d31,"Writable slaves expires: fix leak in key tracking.

We need to use a dictionary type that frees the key, since we copy the
keys in the dictionary we use to track expires created in the slave
side."
antirez,2016-12-13 15:02:29,https://api.github.com/repos/antirez/redis/git/commits/d1adc85aa6f53424fec29751cec4bb3042a25359,d1adc85aa6f53424fec29751cec4bb3042a25359,INFO: show num of slave-expires keys tracked.
antirez,2016-12-13 11:21:15,https://api.github.com/repos/antirez/redis/git/commits/5b9ba26403d6b275812301ada34675e0712e1f90,5b9ba26403d6b275812301ada34675e0712e1f90,Fix created->created typo in expire.c
antirez,2016-12-13 09:20:06,https://api.github.com/repos/antirez/redis/git/commits/04542cff92147b9b686a2071c4c53574771f4f88,04542cff92147b9b686a2071c4c53574771f4f88,"Replication: fix the infamous key leakage of writable slaves + EXPIRE.

BACKGROUND AND USE CASEj

Redis slaves are normally write only, however the supprot a ""writable""
mode which is very handy when scaling reads on slaves, that actually
need write operations in order to access data. For instance imagine
having slaves replicating certain Sets keys from the master. When
accessing the data on the slave, we want to peform intersections between
such Sets values. However we don't want to intersect each time: to cache
the intersection for some time often is a good idea.

To do so, it is possible to setup a slave as a writable slave, and
perform the intersection on the slave side, perhaps setting a TTL on the
resulting key so that it will expire after some time.

THE BUG

Problem: in order to have a consistent replication, expiring of keys in
Redis replication is up to the master, that synthesize DEL operations to
send in the replication stream. However slaves logically expire keys
by hiding them from read attempts from clients so that if the master did
not promptly sent a DEL, the client still see logically expired keys
as non existing.

Because slaves don't actively expire keys by actually evicting them but
just masking from the POV of read operations, if a key is created in a
writable slave, and an expire is set, the key will be leaked forever:

1. No DEL will be received from the master, which does not know about
such a key at all.

2. No eviction will be performed by the slave, since it needs to disable
eviction because it's up to masters, otherwise consistency of data is
lost.

THE FIX

In order to fix the problem, the slave should be able to tag keys that
were created in the slave side and have an expire set in some way.

My solution involved using an unique additional dictionary created by
the writable slave only if needed. The dictionary is obviously keyed by
the key name that we need to track: all the keys that are set with an
expire directly by a client writing to the slave are tracked.

The value in the dictionary is a bitmap of all the DBs where such a key
name need to be tracked, so that we can use a single dictionary to track
keys in all the DBs used by the slave (actually this limits the solution
to the first 64 DBs, but the default with Redis is to use 16 DBs).

This solution allows to pay both a small complexity and CPU penalty,
which is zero when the feature is not used, actually. The slave-side
eviction is encapsulated in code which is not coupled with the rest of
the Redis core, if not for the hook to track the keys.

TODO

I'm doing the first smoke tests to see if the feature works as expected:
so far so good. Unit tests should be added before merging into the
4.0 branch."
antirez,2016-12-12 18:36:15,https://api.github.com/repos/antirez/redis/git/commits/39f5c0713e467236afc54eb2d89733d79162d6ba,39f5c0713e467236afc54eb2d89733d79162d6ba,"Merge pull request #3680 from yossigo/fix_rediscli_command_crash

Fix redis-cli rare crash."
yossigo,2016-12-12 18:18:40,https://api.github.com/repos/antirez/redis/git/commits/b6ab4d04b60548fcc5c04d2da53a8af0c3d59593,b6ab4d04b60548fcc5c04d2da53a8af0c3d59593,"Fix redis-cli rare crash.

This happens if the server (mysteriously) returns an unexpected response
to the COMMAND command."
badboy,2016-12-08 13:27:21,https://api.github.com/repos/antirez/redis/git/commits/2a32f0371edeb818a45a0648b2b13bffe93e558b,2a32f0371edeb818a45a0648b2b13bffe93e558b,"Reset the ttl for additional keys

Before, if a previous key had a TTL set but the current one didn't, the
TTL was reused and thus resulted in wrong expirations set.

This behaviour was experienced, when `MigrateDefaultPipeline` in
redis-trib was set to >1

Fixes #3655"
antirez,2016-12-06 08:20:36,https://api.github.com/repos/antirez/redis/git/commits/978a790b85f240615486913db1d043d28e51b74b,978a790b85f240615486913db1d043d28e51b74b,"Merge pull request #3663 from wshn13/add-LF-character-in-memory-doctor-output-message

Add '\n' to MEMORY DOCTOR command output message"
wangshaoanan,2016-12-06 03:11:27,https://api.github.com/repos/antirez/redis/git/commits/2d91fce9705b307e657bf5a4caf5cdbdee44faa1,2d91fce9705b307e657bf5a4caf5cdbdee44faa1,"Add '\n' to MEMORY DOCTOR command output message when num_reports
is 0 or empty is 1"
itamarhaber,2016-12-05 16:34:38,https://api.github.com/repos/antirez/redis/git/commits/94fe98666cff0c9b1411044b8564d7aaa8253fb2,94fe98666cff0c9b1411044b8564d7aaa8253fb2,Corrects a couple of omissions in the modules docs
antirez,2016-12-02 15:30:42,https://api.github.com/repos/antirez/redis/git/commits/16cce320c468f93c101227cb7c012139257ae21d,16cce320c468f93c101227cb7c012139257ae21d,Modules: types doc updated to new API.
antirez,2016-12-02 15:35:24,https://api.github.com/repos/antirez/redis/git/commits/37b6e16ae15005fec9cbd11aec1eacdaed15f7ba,37b6e16ae15005fec9cbd11aec1eacdaed15f7ba,Modules: API doc updated (auto generated).
antirez,2016-12-05 13:17:11,https://api.github.com/repos/antirez/redis/git/commits/3c85a88888bdef5d8d873dd259fded0a5eff29fd,3c85a88888bdef5d8d873dd259fded0a5eff29fd,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2016-12-05 13:15:08,https://api.github.com/repos/antirez/redis/git/commits/b1fc06f7eb90b2b8a3c68085ac0970e3d3525b52,b1fc06f7eb90b2b8a3c68085ac0970e3d3525b52,"Geo: improve fuzz test.

The test now uses more diverse radius sizes, especially sizes near or
greater the whole earth surface are used, that are known to trigger edge
cases. Moreover the PRNG seeding was probably resulting into the same
sequence tested over and over again, now seeding unsing the current unix
time in milliseconds.

Related to #3631."
antirez,2016-12-05 13:02:32,https://api.github.com/repos/antirez/redis/git/commits/001138aec3c9e9df9b3072da10477a44491ec918,001138aec3c9e9df9b3072da10477a44491ec918,"Geo: fix computation of bounding box.

A bug was reported in the context in issue #3631. The root cause of the
bug was that certain neighbor boxes were zeroed after the ""inside the
bounding box or not"" check, simply because the bounding box computation
function was wrong.

A few debugging infos where enhanced and moved in other parts of the
code. A check to avoid steps=0 was added, but is unrelated to this
issue and I did not verified it was an actual bug in practice."
cbgbt,2016-12-01 10:33:01,https://api.github.com/repos/antirez/redis/git/commits/e5db99ad4acfa22e28056a480b106ff7b06a0120,e5db99ad4acfa22e28056a480b106ff7b06a0120,cli: Only print elapsed time on OUTPUT_STANDARD
itamarhaber,2016-12-02 16:19:36,https://api.github.com/repos/antirez/redis/git/commits/5dc4fe1529bb9e1134245db505883364caac3280,5dc4fe1529bb9e1134245db505883364caac3280,"Verify pairs are provided after subcommands

Fixes https://github.com/antirez/redis/issues/3639"
antirez,2016-12-02 09:21:20,https://api.github.com/repos/antirez/redis/git/commits/434e6b2da368bbcf4d8aa6153f39e0479deb063b,434e6b2da368bbcf4d8aa6153f39e0479deb063b,"PSYNC2: Do not accept WAIT in slave instances.

No longer makes sense since writable slaves only do local writes now:
writes are no longer passed to sub-slaves in the stream."
lamby,2016-12-01 12:10:14,https://api.github.com/repos/antirez/redis/git/commits/6eb0c52d4c9f56561eec76db64190f720661efe6,6eb0c52d4c9f56561eec76db64190f720661efe6,"src/rdb.c: Correct ""whenver"" -> ""whenever"" typo."
antirez,2016-12-01 08:09:37,https://api.github.com/repos/antirez/redis/git/commits/ff1d5487383df2718a1dbbe4a409d078f353ee6d,ff1d5487383df2718a1dbbe4a409d078f353ee6d,"Merge pull request #3651 from yossigo/datatype_methods_typo

Fix typo in RedisModuleTypeMethods declaration."
yossigo,2016-11-30 20:05:59,https://api.github.com/repos/antirez/redis/git/commits/5f5b4f1508e001ec42968fd0f94ea3e9e9e60fc9,5f5b4f1508e001ec42968fd0f94ea3e9e9e60fc9,Fix typo in RedisModuleTypeMethods declaration.
Alkorin,2016-11-30 14:26:59,https://api.github.com/repos/antirez/redis/git/commits/a28683217073e8670bba79ff1f38d93fb3e90d65,a28683217073e8670bba79ff1f38d93fb3e90d65,Fix typo (unsupproted => unsupported) in error message
antirez,2016-11-30 10:21:10,https://api.github.com/repos/antirez/redis/git/commits/3c4fe59e095d1ff06cf5f99706c357a0c6f7b5b1,3c4fe59e095d1ff06cf5f99706c357a0c6f7b5b1,"Merge pull request #3648 from dvirsky/fix_reply_crash

fix memory corruption on RM_FreeCallReply"
antirez,2016-11-30 10:13:55,https://api.github.com/repos/antirez/redis/git/commits/71e8d15e493217df16e82a81fa2c587b64a74ef9,71e8d15e493217df16e82a81fa2c587b64a74ef9,Modules: change type registration API to use a struct of methods.
dvirsky,2016-11-30 09:49:49,https://api.github.com/repos/antirez/redis/git/commits/8521cde570f574006ee36a2d3e0ed1b2f6953d2f,8521cde570f574006ee36a2d3e0ed1b2f6953d2f,fix memory corruption on RM_FreeCallReply
antirez,2016-11-29 10:15:12,https://api.github.com/repos/antirez/redis/git/commits/ce1f9cf81d4758197147294c292bf6a50b3f96d6,ce1f9cf81d4758197147294c292bf6a50b3f96d6,PSYNC2 test: check ability to resync after restart.
antirez,2016-11-29 09:27:53,https://api.github.com/repos/antirez/redis/git/commits/93c5198c1780cf55199653591458e39342b21c5d,93c5198c1780cf55199653591458e39342b21c5d,PSYNC2 test: 20 seconds are enough...
antirez,2016-11-29 09:25:42,https://api.github.com/repos/antirez/redis/git/commits/f6e42f0e3f709706d6587573bcc3a05ec900569f,f6e42f0e3f709706d6587573bcc3a05ec900569f,PSYNC2 test: test added to the default tests.
antirez,2016-11-29 09:24:46,https://api.github.com/repos/antirez/redis/git/commits/6eb720ff2d20d3e739d6214415ca832008ba9dfb,6eb720ff2d20d3e739d6214415ca832008ba9dfb,PSYNC2: Minor memory leak reading -NOMASTERLINK master reply fixed.
antirez,2016-11-29 09:22:40,https://api.github.com/repos/antirez/redis/git/commits/c8f0690255a0f25f27dc3573bfe7a348b85ac108,c8f0690255a0f25f27dc3573bfe7a348b85ac108,PSYNC2 test: modify the test for production.
andyli029,2016-11-29 08:34:41,https://api.github.com/repos/antirez/redis/git/commits/8abf9729f0f171533d19a8591fae514708f3e119,8abf9729f0f171533d19a8591fae514708f3e119,Modify MIN->MAX
antirez,2016-11-28 16:54:04,https://api.github.com/repos/antirez/redis/git/commits/eab865a0a1d7e3cb2494c02e601dbdb93b48533c,eab865a0a1d7e3cb2494c02e601dbdb93b48533c,"PSYNC2: stop sending newlines to sub-slaves when master is down.

This actually includes two changes:

1) No newlines to take the master-slave link up when the upstream master
is down. Doing this is dangerous because the sub-slave often is received
replication protocol for an half-command, so can't receive newlines
without desyncing the replication link, even with the code in order to
cancel out the bytes that PSYNC2 was using. Moreover this is probably
also not needed/sane, because anyway the slave can keep serving
requests, and because if it's configured to don't serve stale data, it's
a good idea, actually, to break the link.

2) When a +CONTINUE with a different ID is received, we now break
connection with the sub-slaves: they need to be notified as well. This
was part of the original specification but for some reason it was not
implemented in the code, and was alter found as a PSYNC2 bug in the
integration testing."
antirez,2016-11-28 09:13:24,https://api.github.com/repos/antirez/redis/git/commits/16559a02fc12e4bf3d91657b9f775e144474abbb,16559a02fc12e4bf3d91657b9f775e144474abbb,"PSYNC2: Test (WIP).

This is the PSYNC2 test that helped find issues in the code, and that
still can show a protocol desync from time to time. Work is in progress
in order to find the issue. For now the test is not enabled in ""make
test"" and must be run manually."
antirez,2016-11-25 09:55:16,https://api.github.com/repos/antirez/redis/git/commits/790310d89460655305bd615bc442eeaf7f0f1b38,790310d89460655305bd615bc442eeaf7f0f1b38,Better protocol errors logging.
antirez,2016-11-24 14:48:18,https://api.github.com/repos/antirez/redis/git/commits/e09e31b12e6a631bc7e501e48849fe110e7113ec,e09e31b12e6a631bc7e501e48849fe110e7113ec,"PSYNC2: on transient error jump to error, not write_error."
antirez,2016-11-24 10:05:19,https://api.github.com/repos/antirez/redis/git/commits/1f55170b9c480130d1dd120358ff715379e8cbd4,1f55170b9c480130d1dd120358ff715379e8cbd4,"Modules: fix client blocking calls access to invalid struct field.

We already have reference to the client pointer, no need to access the
already freed structure.

Close #3634."
antirez,2016-11-23 15:12:20,https://api.github.com/repos/antirez/redis/git/commits/5b7d42fff32ba4e8cf1f415b104bfec086023a86,5b7d42fff32ba4e8cf1f415b104bfec086023a86,"PSYNC2: bugfixing pre release.

1. Master replication offset was cleared after switching configuration
to some other slave, since it was assumed you can't PSYNC after a
switch. Note the case anymore and when we successfully PSYNC we need to
have our offset untouched.

2. Secondary replication ID was not reset to ""000..."" pattern at
startup.

3. Master in error state replying -LOADING or other transient errors
forced the slave to discard the cached master and full resync. This is
now fixed.

4. Better logging of what's happening on failed PSYNCs."
antirez,2016-11-18 12:10:57,https://api.github.com/repos/antirez/redis/git/commits/73dd51c04400fdf2518b210bdc581deef1208020,73dd51c04400fdf2518b210bdc581deef1208020,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2016-11-18 12:10:29,https://api.github.com/repos/antirez/redis/git/commits/f115461f4eb8e1ec928829f176c02935785547ff,f115461f4eb8e1ec928829f176c02935785547ff,Test: WAIT tests added in wait.tcl unit.
antirez,2016-11-18 09:45:09,https://api.github.com/repos/antirez/redis/git/commits/5b83fa482c1b82995a52c7ae549dbf550cbb0d07,5b83fa482c1b82995a52c7ae549dbf550cbb0d07,"Merge pull request #3612 from deep011/unstable

fix a possible bug for 'replconf getack'"
antirez,2016-11-17 08:37:03,https://api.github.com/repos/antirez/redis/git/commits/8fb3ad244474612d8ba53a6a7ba715a325538371,8fb3ad244474612d8ba53a6a7ba715a325538371,Merge branch 'psync2' into unstable
oranagra,2016-11-16 19:30:59,https://api.github.com/repos/antirez/redis/git/commits/e3a61950a212a5e603234f4009e1ec3801d5a423,e3a61950a212a5e603234f4009e1ec3801d5a423,"when a slave loads an RDB, stop an AOFRW fork before flusing db and parsing rdb file, to avoid a CoW disaster."
antirez,2016-11-16 13:13:37,https://api.github.com/repos/antirez/redis/git/commits/59f2e7c16259ba22e75d52c2bd486e56bbbf9a6e,59f2e7c16259ba22e75d52c2bd486e56bbbf9a6e,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2016-11-16 13:13:13,https://api.github.com/repos/antirez/redis/git/commits/cfdb3a22140b50fd61718aa9715cc900d74ca0f4,cfdb3a22140b50fd61718aa9715cc900d74ca0f4,Cluster: handle zero bytes at the end of nodes.conf.
deep011,2016-11-16 03:04:33,https://api.github.com/repos/antirez/redis/git/commits/13a92a5bb1bed9dc34442613b65d6bc1b43a6b7e,13a92a5bb1bed9dc34442613b65d6bc1b43a6b7e,fix a possible bug for 'replconf getack'
oranagra,2016-11-10 14:59:52,https://api.github.com/repos/antirez/redis/git/commits/a1a07225b3963eb251b518737a3f6b59515faaa1,a1a07225b3963eb251b518737a3f6b59515faaa1,fix unsigned int overflow in adjustOpenFilesLimit
antirez,2016-11-10 11:35:29,https://api.github.com/repos/antirez/redis/git/commits/28c96d73b2e157a37465560bc421280d17005708,28c96d73b2e157a37465560bc421280d17005708,"PSYNC2: Save replication ID/offset on RDB file.

This means that stopping a slave and restarting it will still make it
able to PSYNC with the master. Moreover the master itself will retain
its ID/offset, in case it gets turned into a slave, or if a slave will
try to PSYNC with it with an exactly updated offset (otherwise there is
no backlog).

This change was possible thanks to PSYNC v2 that makes saving the current
replication state much simpler."
antirez,2016-11-09 14:36:25,https://api.github.com/repos/antirez/redis/git/commits/4e5e366ed265f2571124edfa9c2f9eaa0d450c45,4e5e366ed265f2571124edfa9c2f9eaa0d450c45,PSYNC2: Wrap debugging code with if(0)
antirez,2016-11-09 10:31:06,https://api.github.com/repos/antirez/redis/git/commits/2669fb8364c4c4080b7b75809ca94fc8022151de,2669fb8364c4c4080b7b75809ca94fc8022151de,"PSYNC2: different improvements to Redis replication.

The gist of the changes is that now, partial resynchronizations between
slaves and masters (without the need of a full resync with RDB transfer
and so forth), work in a number of cases when it was impossible
in the past. For instance:

1. When a slave is promoted to mastrer, the slaves of the old master can
partially resynchronize with the new master.

2. Chained slalves (slaves of slaves) can be moved to replicate to other
slaves or the master itsef, without requiring a full resync.

3. The master itself, after being turned into a slave, is able to
partially resynchronize with the new master, when it joins replication
again.

In order to obtain this, the following main changes were operated:

* Slaves also take a replication backlog, not just masters.

* Same stream replication for all the slaves and sub slaves. The
replication stream is identical from the top level master to its slaves
and is also the same from the slaves to their sub-slaves and so forth.
This means that if a slave is later promoted to master, it has the
same replication backlong, and can partially resynchronize with its
slaves (that were previously slaves of the old master).

* A given replication history is no longer identified by the `runid` of
a Redis node. There is instead a `replication ID` which changes every
time the instance has a new history no longer coherent with the past
one. So, for example, slaves publish the same replication history of
their master, however when they are turned into masters, they publish
a new replication ID, but still remember the old ID, so that they are
able to partially resynchronize with slaves of the old master (up to a
given offset).

* The replication protocol was slightly modified so that a new extended
+CONTINUE reply from the master is able to inform the slave of a
replication ID change.

* REPLCONF CAPA is used in order to notify masters that a slave is able
to understand the new +CONTINUE reply.

* The RDB file was extended with an auxiliary field that is able to
select a given DB after loading in the slave, so that the slave can
continue receiving the replication stream from the point it was
disconnected without requiring the master to insert ""SELECT"" statements.
This is useful in order to guarantee the ""same stream"" property, because
the slave must be able to accumulate an identical backlog.

* Slave pings to sub-slaves are now sent in a special form, when the
top-level master is disconnected, in order to don't interfer with the
replication stream. We just use out of band ""\n"" bytes as in other parts
of the Redis protocol.

An old design document is available here:

https://gist.github.com/antirez/ae068f95c0d084891305

However the implementation is not identical to the description because
during the work to implement it, different changes were needed in order
to make things working well."
antirez,2016-11-02 14:18:44,https://api.github.com/repos/antirez/redis/git/commits/b399288ff535cd95e278dbf4babd25bfb896c0d7,b399288ff535cd95e278dbf4babd25bfb896c0d7,"Merge pull request #3568 from MichaelTSS/patch-1

Typo"
antirez,2016-11-02 14:14:48,https://api.github.com/repos/antirez/redis/git/commits/18d32c7e1c3fac6f927fc5d1187ac205edb0fec2,18d32c7e1c3fac6f927fc5d1187ac205edb0fec2,"redis-cli typo fixed: perferences -> preferences.

Thanks to @qiaodaimadelaowang for signaling the issue.
Close #3585."
antirez,2016-11-02 10:04:52,https://api.github.com/repos/antirez/redis/git/commits/fa2dc4b60c5dd8fabafd99fa23badfc6b00b15bc,fa2dc4b60c5dd8fabafd99fa23badfc6b00b15bc,"Merge pull request #3514 from charsyam/feature/simple-refactoring

Simple change just using slaves instead of server.slaves"
antirez,2016-11-02 10:02:32,https://api.github.com/repos/antirez/redis/git/commits/25811bc9839d2af54524fea5f1dfa3042e4ce3c0,25811bc9839d2af54524fea5f1dfa3042e4ce3c0,"Merge pull request #3547 from yyoshiki41/refactor/redis-trib

Refactor redis-trib.rb"
antirez,2016-11-02 10:00:24,https://api.github.com/repos/antirez/redis/git/commits/b3e707339d2db8d25287f5c4c732a785c3f5d3d8,b3e707339d2db8d25287f5c4c732a785c3f5d3d8,"Merge pull request #3575 from deep011/unstable

fix a bug for quicklistDup() function"
antirez,2016-11-02 09:58:30,https://api.github.com/repos/antirez/redis/git/commits/c17fc39243774217d85be4a59d5a70deb5b38dbd,c17fc39243774217d85be4a59d5a70deb5b38dbd,"Merge pull request #3581 from dvirsky/fix_io_ctx_sizeof

[MODULES] fixed sizeof in allocating io RedisModuleCtx*"
dvirsky,2016-10-31 16:48:16,https://api.github.com/repos/antirez/redis/git/commits/ec8fd6e5e454e5ab1d0515cc4b85d450ce3df89c,ec8fd6e5e454e5ab1d0515cc4b85d450ce3df89c,fixed sizeof in allocating io RedisModuleCtx*
antirez,2016-10-31 14:46:58,https://api.github.com/repos/antirez/redis/git/commits/9749e96f42745e4234f59d09a13ebcaa5371706e,9749e96f42745e4234f59d09a13ebcaa5371706e,Test: regression test for #3564 added.
antirez,2016-10-31 14:40:46,https://api.github.com/repos/antirez/redis/git/commits/77b1abf185229f4990c871993958ac80e2ce1edc,77b1abf185229f4990c871993958ac80e2ce1edc,"Merge pull request #3565 from sunheehnus/bitfield-fix-highest_write_offset

bitops.c/bitfieldCommand: update higest_write_offset with check"
antirez,2016-10-31 14:36:38,https://api.github.com/repos/antirez/redis/git/commits/f48ca5581edb565be6ca1898356293927a4b9d06,f48ca5581edb565be6ca1898356293927a4b9d06,"Merge pull request #3573 from jybaek/module-io-context

Add missing fclose()"
antirez,2016-10-31 14:34:16,https://api.github.com/repos/antirez/redis/git/commits/fbfa0a12ee8ebe6d6aaee3c2aac3dd2e010af62f,fbfa0a12ee8ebe6d6aaee3c2aac3dd2e010af62f,"Merge pull request #3579 from guybe7/unstable

Fixed wrong sizeof(client) in object.c"
guybe7,2016-10-31 13:08:17,https://api.github.com/repos/antirez/redis/git/commits/8b070b5d1285b988d6413699f92a941475bea54c,8b070b5d1285b988d6413699f92a941475bea54c,Fixed wrong sizeof(client) in object.c
deep011,2016-10-28 11:47:29,https://api.github.com/repos/antirez/redis/git/commits/7f1bb22ef3f77c940e6331512eeaddfdd1703be3,7f1bb22ef3f77c940e6331512eeaddfdd1703be3,fix a bug for quicklistDup() function
jybaek,2016-10-28 01:42:54,https://api.github.com/repos/antirez/redis/git/commits/a06d59b583e34905f438319ebfea952028467019,a06d59b583e34905f438319ebfea952028467019,Add missing fclose()
MichaelTSS,2016-10-24 15:27:48,https://api.github.com/repos/antirez/redis/git/commits/20feafda091d865f68ccaab6e50166a0cf35f369,20feafda091d865f68ccaab6e50166a0cf35f369,Typo
sunheehnus,2016-10-21 17:54:46,https://api.github.com/repos/antirez/redis/git/commits/949a274817085cb0117430056c5b22ec8f051878,949a274817085cb0117430056c5b22ec8f051878,bitops.c/bitfieldCommand: update higest_write_offset with check
antirez,2016-10-19 08:43:40,https://api.github.com/repos/antirez/redis/git/commits/f39e7d4d7e8f3a0d5a8eb29e2bc86700a26397fd,f39e7d4d7e8f3a0d5a8eb29e2bc86700a26397fd,"Remove ""Hey!"" warning..."
antirez,2016-10-17 14:41:39,https://api.github.com/repos/antirez/redis/git/commits/a9f50a389b55f93563275acc86a62930fb8f3d06,a9f50a389b55f93563275acc86a62930fb8f3d06,Better target MacOS on __atomic macros conditional compilation.
antirez,2016-10-17 14:11:00,https://api.github.com/repos/antirez/redis/git/commits/ea95262d8dc3e90f3dfa6d233445d388ea2ff2a9,ea95262d8dc3e90f3dfa6d233445d388ea2ff2a9,"Merge pull request #3560 from melo/fix-macos-10-8-compile

Fixes compilation on MacOS 10.8.5, Clang tags/Apple/clang-421.0.57"
melo,2016-10-17 11:50:04,https://api.github.com/repos/antirez/redis/git/commits/2000abc86f8f5051191c022e08ce8659f51591c5,2000abc86f8f5051191c022e08ce8659f51591c5,"Fixes compilation on MacOS 10.8.5, Clang tags/Apple/clang-421.0.57

Redis fails to compile on MacOS 10.8.5 with Clang 4, version 421.0.57
(based on LLVM 3.1svn).

When compiling zmalloc.c, we get these warnings:

        CC zmalloc.o
    zmalloc.c:109:5: warning: implicit declaration of function '__atomic_add_fetch' is invalid in C99 [-Wimplicit-function-declaration]
        update_zmalloc_stat_alloc(zmalloc_size(ptr));
        ^
    zmalloc.c:75:9: note: expanded from macro 'update_zmalloc_stat_alloc'
            atomicIncr(used_memory,__n,used_memory_mutex); \
            ^
    ./atomicvar.h:57:37: note: expanded from macro 'atomicIncr'
    #define atomicIncr(var,count,mutex) __atomic_add_fetch(&var,(count),__ATOMIC_RELAXED)
                                        ^
    zmalloc.c:145:5: warning: implicit declaration of function '__atomic_sub_fetch' is invalid in C99 [-Wimplicit-function-declaration]
        update_zmalloc_stat_free(oldsize);
        ^
    zmalloc.c:85:9: note: expanded from macro 'update_zmalloc_stat_free'
            atomicDecr(used_memory,__n,used_memory_mutex); \
            ^
    ./atomicvar.h:58:37: note: expanded from macro 'atomicDecr'
    #define atomicDecr(var,count,mutex) __atomic_sub_fetch(&var,(count),__ATOMIC_RELAXED)
                                        ^
    zmalloc.c:205:9: warning: implicit declaration of function '__atomic_load_n' is invalid in C99 [-Wimplicit-function-declaration]
            atomicGet(used_memory,um,used_memory_mutex);
            ^
    ./atomicvar.h:60:14: note: expanded from macro 'atomicGet'
        dstvar = __atomic_load_n(&var,__ATOMIC_RELAXED); \
                 ^
    3 warnings generated.

Also on lazyfree.c:

        CC lazyfree.o
    lazyfree.c:68:13: warning: implicit declaration of function '__atomic_add_fetch' is invalid in C99 [-Wimplicit-function-declaration]
                atomicIncr(lazyfree_objects,1,lazyfree_objects_mutex);
                ^
    ./atomicvar.h:57:37: note: expanded from macro 'atomicIncr'
    #define atomicIncr(var,count,mutex) __atomic_add_fetch(&var,(count),__ATOMIC_RELAXED)
                                        ^
    lazyfree.c:111:5: warning: implicit declaration of function '__atomic_sub_fetch' is invalid in C99 [-Wimplicit-function-declaration]
        atomicDecr(lazyfree_objects,1,lazyfree_objects_mutex);
        ^
    ./atomicvar.h:58:37: note: expanded from macro 'atomicDecr'
    #define atomicDecr(var,count,mutex) __atomic_sub_fetch(&var,(count),__ATOMIC_RELAXED)
                                        ^
    2 warnings generated.

Then in the linking stage:

        LINK redis-server
    Undefined symbols for architecture x86_64:
      ""___atomic_add_fetch"", referenced from:
          _zmalloc in zmalloc.o
          _zcalloc in zmalloc.o
          _zrealloc in zmalloc.o
          _dbAsyncDelete in lazyfree.o
          _emptyDbAsync in lazyfree.o
          _slotToKeyFlushAsync in lazyfree.o
      ""___atomic_load_n"", referenced from:
          _zmalloc_used_memory in zmalloc.o
          _zmalloc_get_fragmentation_ratio in zmalloc.o
      ""___atomic_sub_fetch"", referenced from:
          _zrealloc in zmalloc.o
          _zfree in zmalloc.o
          _lazyfreeFreeObjectFromBioThread in lazyfree.o
          _lazyfreeFreeDatabaseFromBioThread in lazyfree.o
          _lazyfreeFreeSlotsMapFromBioThread in lazyfree.o
    ld: symbol(s) not found for architecture x86_64
    clang: error: linker command failed with exit code 1 (use -v to see invocation)
    make[1]: *** [redis-server] Error 1
    make: *** [all] Error 2

With this patch, the compilation is sucessful, no warnings.

Running `make test` we get a almost clean bill of health. Test pass with
one exception:

    [err]: Check for memory leaks (pid 52793) in tests/unit/dump.tcl
    [err]: Check for memory leaks (pid 53103) in tests/unit/auth.tcl
    [err]: Check for memory leaks (pid 53117) in tests/unit/auth.tcl
    [err]: Check for memory leaks (pid 53131) in tests/unit/protocol.tcl
    [err]: Check for memory leaks (pid 53145) in tests/unit/protocol.tcl
    [ok]: Check for memory leaks (pid 53160)
    [err]: Check for memory leaks (pid 53175) in tests/unit/scan.tcl
    [ok]: Check for memory leaks (pid 53189)
    [err]: Check for memory leaks (pid 53221) in tests/unit/type/incr.tcl
    .
    .
    .

Full debug log (289MB, uncompressed) available at
https://dl.dropboxusercontent.com/u/75548/logs/redis-debug-log-macos-10.8.5.log.xz

Most if not all of the memory leak tests fail. Not sure if this is
related. They are the only ones that fail. I belive they are not related,
but just the memory leak detector is not working properly on 10.8.5.

Signed-off-by: Pedro Melo <melo@simplicidade.org>"
antirez,2016-10-14 13:48:11,https://api.github.com/repos/antirez/redis/git/commits/f63321207347d96852948cd0a9fb01bf0f0b4252,f63321207347d96852948cd0a9fb01bf0f0b4252,"Fix SELECT test, broken cause change in error msg."
antirez,2016-10-14 13:28:04,https://api.github.com/repos/antirez/redis/git/commits/c7a4e694ad3689d934897b0d2c37144d7b2d0b97,c7a4e694ad3689d934897b0d2c37144d7b2d0b97,"SWAPDB command.

This new command swaps two Redis databases, so that immediately all the
clients connected to a given DB will see the data of the other DB, and
the other way around. Example:

    SWAPDB 0 1

This will swap DB 0 with DB 1. All the clients connected with DB 0 will
immediately see the new data, exactly like all the clients connected
with DB 1 will see the data that was formerly of DB 0.

MOTIVATION AND HISTORY
---

The command was recently demanded by Pedro Melo, but was suggested in
the past multiple times, and always refused by me.

The reason why it was asked: Imagine you have clients operating in DB 0.
At the same time, you create a new version of the dataset in DB 1.
When the new version of the dataset is available, you immediately want
to swap the two views, so that the clients will transparently use the
new version of the data. At the same time you'll likely destroy the
DB 1 dataset (that contains the old data) and start to build a new
version, to repeat the process.

This is an interesting pattern, but the reason why I always opposed to
implement this, was that FLUSHDB was a blocking command in Redis before
Redis 4.0 improvements. Now we have FLUSHDB ASYNC that releases the
old data in O(1) from the point of view of the client, to reclaim memory
incrementally in a different thread.

At this point, the pattern can really be supported without latency
spikes, so I'm providing this implementation for the users to comment.
In case a very compelling argument will be made against this new command
it may be removed.

BEHAVIOR WITH BLOCKING OPERATIONS
---

If a client is blocking for a list in a given DB, after the swap it will
still be blocked in the same DB ID, since this is the most logical thing
to do: if I was blocked for a list push to list ""foo"", even after the
swap I want still a LPUSH to reach the key ""foo"" in the same DB in order
to unblock.

However an interesting thing happens when a client is, for instance,
blocked waiting for new elements in list ""foo"" of DB 0. Then the DB
0 and 1 are swapped with SWAPDB. However the DB 1 happened to have
a list called ""foo"" containing elements. When this happens, this
implementation can correctly unblock the client.

It is possible that there are subtle corner cases that are not covered
in the implementation, but since the command is self-contained from the
POV of the implementation and the Redis core, it cannot cause anything
bad if not used.

Tests and documentation are yet to be provided."
antirez,2016-10-13 15:00:29,https://api.github.com/repos/antirez/redis/git/commits/a3b3ca7c2191cbe09750e2eb45b856b8cbbaa831,a3b3ca7c2191cbe09750e2eb45b856b8cbbaa831,Modules: use RedisModule_AbortBlock() in the example.
antirez,2016-10-13 14:57:40,https://api.github.com/repos/antirez/redis/git/commits/95c17c0cb24ebfff814b0c10e21d1a12b02fb478,95c17c0cb24ebfff814b0c10e21d1a12b02fb478,Modules: AbortBlock() API implemented.
antirez,2016-10-13 14:57:28,https://api.github.com/repos/antirez/redis/git/commits/58601c8f7d6c279fe67a95950787775f11aec393,58601c8f7d6c279fe67a95950787775f11aec393,Modules: blocking API documented.
antirez,2016-10-13 10:48:36,https://api.github.com/repos/antirez/redis/git/commits/553aa0e259a5b2c5f53dbc322a94b8f6930bc537,553aa0e259a5b2c5f53dbc322a94b8f6930bc537,module.c: trim comment to 80 cols.
antirez,2016-10-13 10:41:48,https://api.github.com/repos/antirez/redis/git/commits/870274bea8b67fdcc828ed77c783d7146b86af11,870274bea8b67fdcc828ed77c783d7146b86af11,Example modules: remove warnings about types and not used args.
jybaek,2016-10-13 06:17:07,https://api.github.com/repos/antirez/redis/git/commits/c76b9b644c11f8b7284755664670d9baa64f1907,c76b9b644c11f8b7284755664670d9baa64f1907,Remove Duplicate Processing
yyoshiki41,2016-10-09 16:13:20,https://api.github.com/repos/antirez/redis/git/commits/16f65068b04812e1ddc06d175ce1c420f9d98039,16f65068b04812e1ddc06d175ce1c420f9d98039,Refactor redis-trib.rb
antirez,2016-10-07 14:35:06,https://api.github.com/repos/antirez/redis/git/commits/7dde8bf3ab721b87f1e48b277dcdc39aab4c8b4c,7dde8bf3ab721b87f1e48b277dcdc39aab4c8b4c,Modules: blocking command example added.
antirez,2016-10-07 14:34:40,https://api.github.com/repos/antirez/redis/git/commits/34599691b373151c77854b20b3c7a621077f6c64,34599691b373151c77854b20b3c7a621077f6c64,Modules: fixes to the blocking commands API: examples now works.
antirez,2016-10-07 14:34:19,https://api.github.com/repos/antirez/redis/git/commits/f156038db84e25304862fcac43f1222a4382abef,f156038db84e25304862fcac43f1222a4382abef,Modules: RM_Milliseconds() API added.
antirez,2016-10-07 11:48:05,https://api.github.com/repos/antirez/redis/git/commits/ffb00fbcbeeb2b0f17e70fbce81928e1f7fd4b46,ffb00fbcbeeb2b0f17e70fbce81928e1f7fd4b46,"Modules: blocking commands WIP: API exported, a first example."
antirez,2016-10-07 11:10:29,https://api.github.com/repos/antirez/redis/git/commits/3aa816e61a1512d5878040c114d074bc662e03f8,3aa816e61a1512d5878040c114d074bc662e03f8,Modules: introduce warning suppression macro for unused args.
antirez,2016-10-07 11:07:13,https://api.github.com/repos/antirez/redis/git/commits/3879923db822789bbb508c171ed20ab2f5d6312f,3879923db822789bbb508c171ed20ab2f5d6312f,Enable warning in example modules Makefile.
antirez,2016-10-07 09:55:35,https://api.github.com/repos/antirez/redis/git/commits/8fadfe52a2d1abf3d4d12707004f1209703d446c,8fadfe52a2d1abf3d4d12707004f1209703d446c,"Module: API to block clients with threading support.

Just a draft to align the main ideas, never executed code. Compiles."
antirez,2016-10-06 16:26:02,https://api.github.com/repos/antirez/redis/git/commits/a5998d1fda00862e57671d6986f2d8865ef5fd19,a5998d1fda00862e57671d6986f2d8865ef5fd19,Fix typos in GetContextFromIO API declaration.
antirez,2016-10-06 15:10:47,https://api.github.com/repos/antirez/redis/git/commits/799208de85abfc686f56acd72f8cc7b7f4cd6e23,799208de85abfc686f56acd72f8cc7b7f4cd6e23,Fix name of mispelled function.
antirez,2016-10-06 15:05:38,https://api.github.com/repos/antirez/redis/git/commits/152c1b6802b88fbad0113adb97500d92a84e3c63,152c1b6802b88fbad0113adb97500d92a84e3c63,"Module: Ability to get context from IO context.

It was noted by @dvirsky that it is not possible to use string functions
when writing the AOF file. This sometimes is critical since the command
rewriting may need to be built in the context of the AOF callback, and
without access to the context, and the limited types that the AOF
production functions will accept, this can be an issue.

Moreover there are other needs that we can't anticipate regarding the
ability to use Redis Modules APIs using the context in order to build
representations to emit AOF / RDB.

Because of this a new API was added that allows the user to get a
temporary context from the IO context. The context is auto released
if obtained when the RDB / AOF callback returns.

Calling multiple time the function to get the context, always returns
the same one, since it is invalid to have more than a single context."
antirez,2016-10-06 06:48:21,https://api.github.com/repos/antirez/redis/git/commits/72279e3ea4e8a8d19005b91b0bf7ee7a8ecc87fc,72279e3ea4e8a8d19005b91b0bf7ee7a8ecc87fc,Copyright notice added to module.c.
antirez,2016-10-02 22:08:35,https://api.github.com/repos/antirez/redis/git/commits/3dc84c530063e2ebd4f975e4066dd834cd6cbe9f,3dc84c530063e2ebd4f975e4066dd834cd6cbe9f,"Modules: API to save/load single precision floating point numbers.

When double precision is not needed, to take 2x space in the
serialization is not good."
antirez,2016-10-02 14:51:37,https://api.github.com/repos/antirez/redis/git/commits/a1b1fd4f392c59c5fc194e66856e1cb8d6a4f932,a1b1fd4f392c59c5fc194e66856e1cb8d6a4f932,Modules: API to log from module I/O callbacks.
antirez,2016-10-02 14:50:37,https://api.github.com/repos/antirez/redis/git/commits/4674efdee247e34720e2f87cbd090f06f81e295f,4674efdee247e34720e2f87cbd090f06f81e295f,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2016-10-02 09:01:36,https://api.github.com/repos/antirez/redis/git/commits/0d9febf6a02abf7c232b79d02c65d00427368df1,0d9febf6a02abf7c232b79d02c65d00427368df1,Add compiler optimizations to example module makefile.
antirez,2016-09-26 22:29:47,https://api.github.com/repos/antirez/redis/git/commits/6782e774f13499cf51e4301ad4f1262acde664e1,6782e774f13499cf51e4301ad4f1262acde664e1,debug.c: include dlfcn.h regardless of BACKTRACE support.
antirez,2016-09-26 07:10:52,https://api.github.com/repos/antirez/redis/git/commits/2564031a1542baf354d4138a12f1d66ba5743ce5,2564031a1542baf354d4138a12f1d66ba5743ce5,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2016-09-25 20:48:41,https://api.github.com/repos/antirez/redis/git/commits/6d9f8e2462fc2c426d48c941edeb78e5df7d2977,6d9f8e2462fc2c426d48c941edeb78e5df7d2977,"Security: CONFIG SET client-output-buffer-limit overflow fixed.

This commit fixes a vunlerability reported by Cory Duplantis
of Cisco Talos, see TALOS-2016-0206 for reference.

CONFIG SET client-output-buffer-limit accepts as client class ""master""
which is actually only used to implement CLIENT KILL. The ""master"" class
has ID 3. What happens is that the global structure:

    server.client_obuf_limits[class]

Is accessed with class = 3. However it is a 3 elements array, so writing
the 4th element means to write up to 24 bytes of memory *after* the end
of the array, since the structure is defined as:

    typedef struct clientBufferLimitsConfig {
        unsigned long long hard_limit_bytes;
        unsigned long long soft_limit_bytes;
        time_t soft_limit_seconds;
    } clientBufferLimitsConfig;

EVALUATION OF IMPACT:

Checking what's past the boundaries of the array in the global
'server' structure, we find AOF state fields:

    clientBufferLimitsConfig client_obuf_limits[CLIENT_TYPE_OBUF_COUNT];
    /* AOF persistence */
    int aof_state;                  /* AOF_(ON|OFF|WAIT_REWRITE) */
    int aof_fsync;                  /* Kind of fsync() policy */
    char *aof_filename;             /* Name of the AOF file */
    int aof_no_fsync_on_rewrite;    /* Don't fsync if a rewrite is in prog. */
    int aof_rewrite_perc;           /* Rewrite AOF if % growth is > M and... */
    off_t aof_rewrite_min_size;     /* the AOF file is at least N bytes. */
    off_t aof_rewrite_base_size;    /* AOF size on latest startup or rewrite. */
    off_t aof_current_size;         /* AOF current size. */

Writing to most of these fields should be harmless and only cause problems in
Redis persistence that should not escalate to security problems.
However unfortunately writing to ""aof_filename"" could be potentially a
security issue depending on the access pattern.

Searching for ""aof.filename"" accesses in the source code returns many different
usages of the field, including using it as input for open(), logging to the
Redis log file or syslog, and calling the rename() syscall.

It looks possible that attacks could lead at least to informations
disclosure of the state and data inside Redis. However note that the
attacker must already have access to the server. But, worse than that,
it looks possible that being able to change the AOF filename can be used
to mount more powerful attacks: like overwriting random files with AOF
data (easily a potential security issue as demostrated here:
http://antirez.com/news/96), or even more subtle attacks where the
AOF filename is changed to a path were a malicious AOF file is loaded
in order to exploit other potential issues when the AOF parser is fed
with untrusted input (no known issue known currently).

The fix checks the places where the 'master' class is specifiedf in
order to access configuration data structures, and return an error in
this cases.

WHO IS AT RISK?

The ""master"" client class was introduced in Redis in Jul 28 2015.
Every Redis instance released past this date is not vulnerable
while all the releases after this date are. Notably:

    Redis 3.0.x is NOT vunlerable.
    Redis 3.2.x IS vulnerable.
    Redis unstable is vulnerable.

In order for the instance to be at risk, at least one of the following
conditions must be true:

    1. The attacker can access Redis remotely and is able to send
       the CONFIG SET command (often banned in managed Redis instances).

    2. The attacker is able to control the ""redis.conf"" file and
       can wait or trigger a server restart.

The problem was fixed 26th September 2016 in all the releases affected."
charsyam,2016-09-24 06:53:57,https://api.github.com/repos/antirez/redis/git/commits/ca6fc4f0314d5d899cab8f19f9807d867ac3676d,ca6fc4f0314d5d899cab8f19f9807d867ac3676d,Simple change just using slaves instead of server.slaves
antirez,2016-09-21 09:46:53,https://api.github.com/repos/antirez/redis/git/commits/6e866ee05e49ab93e626b5a576e4c0f28cca71f0,6e866ee05e49ab93e626b5a576e4c0f28cca71f0,"Merge pull request #3511 from dvirsky/create_string_printf

added RM_CreateStringPrintf"
dvirsky,2016-09-21 09:30:38,https://api.github.com/repos/antirez/redis/git/commits/a91650fc57077f53eac658d2da452bcf10d14ee6,a91650fc57077f53eac658d2da452bcf10d14ee6,added RM_CreateStringPrintf
antirez,2016-09-20 15:22:30,https://api.github.com/repos/antirez/redis/git/commits/670586715a19e7aff9b3af793a7a9b334b418752,670586715a19e7aff9b3af793a7a9b334b418752,"dict.c: fix dictGenericDelete() return ASAP condition.

Recently we moved the ""return ASAP"" condition for the Delete() function
from checking .size to checking .used, which is smarter, however while
testing the first table alone always works to ensure the dict is totally
emtpy, when we test the .size field, testing .used requires testing both
T0 and T1, since a rehashing could be in progress."
antirez,2016-09-19 12:11:17,https://api.github.com/repos/antirez/redis/git/commits/e9d861ec69a11208578fc2a8b7dcdf4c52df316e,e9d861ec69a11208578fc2a8b7dcdf4c52df316e,"Clear child data when opening the pipes.

This is important both to reset the magic to 0, so that it will not
match if the structure is not explicitly set, and to initialize other
things we may add like counters and such."
antirez,2016-09-19 11:45:20,https://api.github.com/repos/antirez/redis/git/commits/e565632e599bd1801abca2359453feac51312b28,e565632e599bd1801abca2359453feac51312b28,Child -> Parent pipe for COW info transferring.
antirez,2016-09-19 08:34:39,https://api.github.com/repos/antirez/redis/git/commits/e1eccf9a6be88c93b71e28f24ad7e14bef434142,e1eccf9a6be88c93b71e28f24ad7e14bef434142,zmalloc: Make fp var non local to fix build.
antirez,2016-09-19 08:28:05,https://api.github.com/repos/antirez/redis/git/commits/945a2f948eb518090325b0ceab92588a905e0f92,945a2f948eb518090325b0ceab92588a905e0f92,"zmalloc: zmalloc_get_smap_bytes_by_field() modified to work for any PID.

The goal is to get copy-on-write amount of the child from the parent."
antirez,2016-09-19 07:47:35,https://api.github.com/repos/antirez/redis/git/commits/b13759e90ae8a9bab7662a1806d61d40eb3d12cf,b13759e90ae8a9bab7662a1806d61d40eb3d12cf,"redis-cli: ""allocator-stats"" -> ""malloc-stats"".

It was changed in Redis but not in redis-cli.
Thanks to @oranagra for signaling."
antirez,2016-09-16 14:52:00,https://api.github.com/repos/antirez/redis/git/commits/4263b121479cd42bb6ddf7ccd1104779ff70ec74,4263b121479cd42bb6ddf7ccd1104779ff70ec74,Typo fixed from MEMORY DOCTOR output.
antirez,2016-09-16 14:40:25,https://api.github.com/repos/antirez/redis/git/commits/8a00ffc0e6b366220f199f74690892a80734383d,8a00ffc0e6b366220f199f74690892a80734383d,Surround allocator name with quotes in MEMORY DOCTOR output.
antirez,2016-09-16 14:36:53,https://api.github.com/repos/antirez/redis/git/commits/44e714a59c3d65b03dc19486e133cd2a01ddff21,44e714a59c3d65b03dc19486e133cd2a01ddff21,MEMORY DOCTOR initial implementation.
antirez,2016-09-16 08:43:19,https://api.github.com/repos/antirez/redis/git/commits/d9325ac6c8b0be33b0813f4fa7b886b95690f85e,d9325ac6c8b0be33b0813f4fa7b886b95690f85e,Provide percentage of memory peak used info.
oranagra,2016-05-18 05:08:43,https://api.github.com/repos/antirez/redis/git/commits/309c2bcd1bf00ac6a224a76aad9c05733d2f4a18,309c2bcd1bf00ac6a224a76aad9c05733d2f4a18,add zmalloc used mem to DEBUG SDSLEN
antirez,2016-09-16 08:26:23,https://api.github.com/repos/antirez/redis/git/commits/78f35f8d2cff306d943366a5c05df9e75b0f028f,78f35f8d2cff306d943366a5c05df9e75b0f028f,Memory related subcommands of DEBUG moved to MEMORY.
antirez,2016-09-16 08:11:52,https://api.github.com/repos/antirez/redis/git/commits/123891dbbf34026c51f1298f7fd6c69a4a3fd8d0,123891dbbf34026c51f1298f7fd6c69a4a3fd8d0,Group MEMORY command related APIs together in the source code.
antirez,2016-09-15 15:43:13,https://api.github.com/repos/antirez/redis/git/commits/adcfb77b5bf273f5e4fc463edcc91045defb5cd9,adcfb77b5bf273f5e4fc463edcc91045defb5cd9,"objectComputeSize(): skiplist nodes have different sizes.

The size of the node depends on the node level, however it is not stored
into the node itself, is an implicit information, so we use
zmalloc_size() in order to compute the sorted set size."
antirez,2016-09-15 15:33:11,https://api.github.com/repos/antirez/redis/git/commits/e9629e148bb445474e172134c1bc0d248adf2454,e9629e148bb445474e172134c1bc0d248adf2454,MEMORY command: HELP + dataset percentage (like in INFO).
antirez,2016-09-15 13:25:05,https://api.github.com/repos/antirez/redis/git/commits/5443726d4df2ccd93c29bbe1977881dde30eeeba,5443726d4df2ccd93c29bbe1977881dde30eeeba,"MEMORY USAGE: SAMPLES option added + fixes to size computation.

The new SAMPLES option is added, defaulting to 5, and with 0 being a
special value to scan the whole set of elements.

Fixes to the object size computation were made since the original PR
assumed data structures still contaning robj structures, while now after
the lazyfree changes, are all SDS strings."
antirez,2016-09-15 08:33:23,https://api.github.com/repos/antirez/redis/git/commits/7229af38988edee95634d5c1289ebee1a2b5fc25,7229af38988edee95634d5c1289ebee1a2b5fc25,INFO: new memory reporting fields added.
antirez,2016-09-15 07:42:51,https://api.github.com/repos/antirez/redis/git/commits/bf2624ea99ac92ae51db5453297aea4128692bad,bf2624ea99ac92ae51db5453297aea4128692bad,C struct memoh renamed redisMemOverhead. API prototypes added.
antirez,2016-09-15 07:37:55,https://api.github.com/repos/antirez/redis/git/commits/be5439bde3338fadaa5f84afbcc0078d0dbdb44d,be5439bde3338fadaa5f84afbcc0078d0dbdb44d,MEMORY OVERHEAD refactored into a generic API.
antirez,2016-09-14 14:43:38,https://api.github.com/repos/antirez/redis/git/commits/09a50d34a2e959be6b2fd1c6b7f51cb56c0d29d0,09a50d34a2e959be6b2fd1c6b7f51cb56c0d29d0,"dict.c: dictReplaceRaw() -> dictAddOrFind().

What they say about ""naming things"" in programming?"
antirez,2016-09-14 14:41:05,https://api.github.com/repos/antirez/redis/git/commits/041ab04419235010c8f7a54f256a8701390370cd,041ab04419235010c8f7a54f256a8701390370cd,Trim comment to 80 cols.
antirez,2016-09-14 13:10:53,https://api.github.com/repos/antirez/redis/git/commits/a636aeac07240fea0acb6066bf1752d0913a9b4e,a636aeac07240fea0acb6066bf1752d0913a9b4e,"Apply the new dictUnlink() where possible.

Optimizations suggested and originally implemented by @oranagra.
Re-applied by @antirez using the modified API."
oranagra,2016-05-09 15:01:09,https://api.github.com/repos/antirez/redis/git/commits/afcbcc0e58749ebbebcd595c120d17a0e3dbb82e,afcbcc0e58749ebbebcd595c120d17a0e3dbb82e,"dict.c: introduce dictUnlink().

Notes by @antirez:

This patch was picked from a larger commit by Oran and adapted to change
the API a bit. The basic idea is to avoid double lookups when there is
to use the value of the deleted entry.

BEFORE:

    entry = dictFind( ... ); /* 1st lookup. */
    /* Do somethjing with the entry. */
    dictDelete(...);         /* 2nd lookup. */

AFTER:

    entry = dictUnlink( ... ); /* 1st lookup. */
    /* Do somethjing with the entry. */
    dictFreeUnlinkedEntry(entry); /* No lookups!. */"
antirez,2016-09-13 15:39:22,https://api.github.com/repos/antirez/redis/git/commits/8c84c962cfb6359401c2df92f79d7e848a34802f,8c84c962cfb6359401c2df92f79d7e848a34802f,"MEMORY OVERHEAD implemented (using Oran Agra initial implementation).

This code was extracted from @oranagra PR #3223 and modified in order
to provide only certain amounts of information compared to the original
code. It was also moved from DEBUG to the newly introduced MEMORY
command. Thanks to Oran for the implementation and the PR.

It implements detailed memory usage stats that can be useful in both
provisioning and troubleshooting memory usage in Redis."
antirez,2016-09-13 08:26:36,https://api.github.com/repos/antirez/redis/git/commits/89dec6921d8fa0ffa0226b9f4d99f373d4d16cfd,89dec6921d8fa0ffa0226b9f4d99f373d4d16cfd,"objectComputeSize(): estimate collections sampling N elements.

For most tasks, we need the memory estimation to be O(1) by default.
This commit also implements an initial MEMORY command.
Note that objectComputeSize() takes the number of samples to check as
argument, so MEMORY should be able to get the sample size as option
to make precision VS CPU tradeoff tunable.

Related to: PR #3223."
oranagra,2016-05-09 15:01:09,https://api.github.com/repos/antirez/redis/git/commits/8c24325f8f1017d49596201903d8dd3c4da57482,8c24325f8f1017d49596201903d8dd3c4da57482,Adding objectComputeSize() function.
oranagra,2016-05-09 15:01:09,https://api.github.com/repos/antirez/redis/git/commits/68bf45fa1e77c7e2e3f3ab4a7894f9bc1a1da57b,68bf45fa1e77c7e2e3f3ab4a7894f9bc1a1da57b,"Optimize repeated keyname hashing.

(Change cherry-picked and modified by @antirez from a larger commit
provided by @oranagra in PR #3223)."
ZhukovAlexander,2016-09-12 10:53:47,https://api.github.com/repos/antirez/redis/git/commits/27d08fb8f0c5cbb2258dd6df6722228693d218c4,27d08fb8f0c5cbb2258dd6df6722228693d218c4,Fix an article usage
antirez,2016-09-09 14:05:06,https://api.github.com/repos/antirez/redis/git/commits/d680eb6dbdf2d2030cb96edfb089be1e2a775ac1,d680eb6dbdf2d2030cb96edfb089be1e2a775ac1,"Merge pull request #3492 from wyxustcsa09/fix-memory

fix memory error on module unload"
antirez,2016-09-09 14:01:43,https://api.github.com/repos/antirez/redis/git/commits/c6dc8d5288c3196179b20479346bc08df70afa7a,c6dc8d5288c3196179b20479346bc08df70afa7a,Merge branch 'unstable' of github.com:antirez/redis into unstable
antirez,2016-09-09 14:01:29,https://api.github.com/repos/antirez/redis/git/commits/56dba3adcc7f88f254c30d68448e5457c0463d57,56dba3adcc7f88f254c30d68448e5457c0463d57,Example modules: Add C99 standard to cflags.
antirez,2016-09-09 13:03:21,https://api.github.com/repos/antirez/redis/git/commits/3793afa0ba4a214c1e25ed74309d0594e7a1490c,3793afa0ba4a214c1e25ed74309d0594e7a1490c,Merge branch 'aofrdb' into unstable
antirez,2016-09-09 12:59:48,https://api.github.com/repos/antirez/redis/git/commits/f9624813aff019f95e370524152d130d22ee37f3,f9624813aff019f95e370524152d130d22ee37f3,"fix the fix for the TCP binding.

This commit attempts to fix a problem with PR #3467."
oranagra,2016-08-21 17:39:15,https://api.github.com/repos/antirez/redis/git/commits/92038286e8c047966f779e8d7eefa6d2786bfa43,92038286e8c047966f779e8d7eefa6d2786bfa43,fix tcp binding when IPv6 is unsupported
antirez,2016-09-09 09:15:10,https://api.github.com/repos/antirez/redis/git/commits/d35deb2327fb6caabf509f243ff1a12bc3c5c929,d35deb2327fb6caabf509f243ff1a12bc3c5c929,"debug.c: no need to define _GNU_SOURCE, is defined in fmacros.h."
antirez,2016-09-09 08:59:29,https://api.github.com/repos/antirez/redis/git/commits/6211e77ab643b6370a0b3cc2a07946ce31d6ad69,6211e77ab643b6370a0b3cc2a07946ce31d6ad69,crash log - improve code dump with more info and called symbols.
oranagra,2016-07-04 20:28:32,https://api.github.com/repos/antirez/redis/git/commits/24811fcb1b824b4f0e115ce2713f89f85cd006b9,24811fcb1b824b4f0e115ce2713f89f85cd006b9,crash log - add hex dump of function code
antirez,2016-09-07 13:27:25,https://api.github.com/repos/antirez/redis/git/commits/0d179d17ba8a93d0a74ea8ecbbe383cc884fcb85,0d179d17ba8a93d0a74ea8ecbbe383cc884fcb85,dict.c benchmark minor improvements.
antirez,2016-09-07 10:34:37,https://api.github.com/repos/antirez/redis/git/commits/bd6c4cade6d2d3c19309cf8251656a0336d6bd7f,bd6c4cade6d2d3c19309cf8251656a0336d6bd7f,dict.c benchmark: mixed del/insert benchmark.
antirez,2016-09-07 09:06:03,https://api.github.com/repos/antirez/redis/git/commits/0f708ab2a91ab399a981974dd546b47cfddb09ae,0f708ab2a91ab399a981974dd546b47cfddb09ae,dict.c benchmark: finish rehashing before testing lookups.
antirez,2016-09-07 08:53:24,https://api.github.com/repos/antirez/redis/git/commits/ed6a4517f583c44da1559768e238d71a2a4667b9,ed6a4517f583c44da1559768e238d71a2a4667b9,dict.c benchmark improvements.
antirez,2016-09-07 08:44:19,https://api.github.com/repos/antirez/redis/git/commits/1074f73629daab5937218ebac264704385fca8a3,1074f73629daab5937218ebac264704385fca8a3,dict.c benchmark: take optional count argument.
antirez,2016-09-07 08:32:57,https://api.github.com/repos/antirez/redis/git/commits/91a59e03a8be94cc8176637ccee4b0c92e6d5f58,91a59e03a8be94cc8176637ccee4b0c92e6d5f58,dict.c benchmark.
antirez,2016-09-01 09:08:44,https://api.github.com/repos/antirez/redis/git/commits/57a0db94956441ac14a252cd09daa45e3f3a9453,57a0db94956441ac14a252cd09daa45e3f3a9453,"Fix rdb.c var types when calling rdbLoadLen().

Technically as soon as Redis 64 bit gets proper support for loading
collections and/or DBs with more than 2^32 elements, the 32 bit version
should be modified in order to check if what we read from rdbLoadLen()
overflows. This would only apply to huge RDB files created with a 64 bit
instance and later loaded into a 32 bit instance."
antirez,2016-09-01 09:04:22,https://api.github.com/repos/antirez/redis/git/commits/9f76d82689e1d31189761f9ea4ba7b6f42ed33d1,9f76d82689e1d31189761f9ea4ba7b6f42ed33d1,sds: don't check for impossible string size in 32 bit systems.
antirez,2016-08-24 13:39:39,https://api.github.com/repos/antirez/redis/git/commits/dacb69ed007b9b1a0767cac420904b7af020f9e4,dacb69ed007b9b1a0767cac420904b7af020f9e4,RDB AOF preamble: test it in the aofrw unit.
antirez,2016-08-24 13:33:39,https://api.github.com/repos/antirez/redis/git/commits/764cc69e2bf447e72fc0858818c8fbd741feb525,764cc69e2bf447e72fc0858818c8fbd741feb525,Document RDB preamble in AOF rewrites in redis.conf.
antirez,2016-08-11 17:53:01,https://api.github.com/repos/antirez/redis/git/commits/e0d4146620b841ad11e981e4cdb335cb34951895,e0d4146620b841ad11e981e4cdb335cb34951895,Sentinel example config: warn about protected mode.
antirez,2016-08-11 13:42:28,https://api.github.com/repos/antirez/redis/git/commits/543e25efa6e25e96f976f68ed16aa0c2ff6fa91b,543e25efa6e25e96f976f68ed16aa0c2ff6fa91b,RDB AOF preamble: WIP 4 (Mixed RDB/AOF loading).
antirez,2016-08-11 13:27:23,https://api.github.com/repos/antirez/redis/git/commits/f1c32f0dcbe850ccc057ee1fd834c7b4f3eb0aff,f1c32f0dcbe850ccc057ee1fd834c7b4f3eb0aff,RDB AOF preamble: WIP 3 (RDB loading refactoring).
antirez,2016-08-09 14:41:40,https://api.github.com/repos/antirez/redis/git/commits/feda52381de20a6ac8ec993d20fdbaca863c0a75,feda52381de20a6ac8ec993d20fdbaca863c0a75,RDB AOF preamble: WIP 2.
antirez,2016-08-09 09:07:32,https://api.github.com/repos/antirez/redis/git/commits/4426cb11e28dd35c08ac45282fb2a7a42a7638af,4426cb11e28dd35c08ac45282fb2a7a42a7638af,RDB AOF preamble: WIP 1.
antirez,2016-08-05 13:10:41,https://api.github.com/repos/antirez/redis/git/commits/9f779b33b54615d4bbaaafadfc5d5f9b93e2166b,9f779b33b54615d4bbaaafadfc5d5f9b93e2166b,"Merge pull request #3340 from rojingeorge/unstable

Display the nodes' proper summary once the cluster is created using redis-trib"
antirez,2016-08-04 08:25:53,https://api.github.com/repos/antirez/redis/git/commits/c5414cef71c4ff1501ee62cbdfbb6cec52ca4296,c5414cef71c4ff1501ee62cbdfbb6cec52ca4296,"Merge pull request #3429 from guoxiao/warning

Use the standard predefined identifier __func__ (since C99)"
guoxiao,2016-08-04 07:09:42,https://api.github.com/repos/antirez/redis/git/commits/4bd72ab729135a4cde76bffe0fb119d9aeb72672,4bd72ab729135a4cde76bffe0fb119d9aeb72672,"Use the standard predefined identifier __func__ (since C99)

Fix warning: ISO C does not support '__FUNCTION__' predefined identifier
[-Wpedantic]"
antirez,2016-08-03 16:10:11,https://api.github.com/repos/antirez/redis/git/commits/e7f1798179c3b4e01a617e98ec7bb3d258642711,e7f1798179c3b4e01a617e98ec7bb3d258642711,Modules: basic call/reply tests in test module.
antirez,2016-08-03 16:09:36,https://api.github.com/repos/antirez/redis/git/commits/13f18d2b17b577bfc9b0d28397cb7be3bb291b90,13f18d2b17b577bfc9b0d28397cb7be3bb291b90,"Modules: handle NULL replies more gracefully.

After all crashing at every API misuse makes everybody's life more
complex."
antirez,2016-08-03 09:12:13,https://api.github.com/repos/antirez/redis/git/commits/a81a92ca2ceba364f4bb51efde9284d939e7ff47,a81a92ca2ceba364f4bb51efde9284d939e7ff47,"Security: Cross Protocol Scripting protection.

This is an attempt at mitigating problems due to cross protocol
scripting, an attack targeting services using line oriented protocols
like Redis that can accept HTTP requests as valid protocol, by
discarding the invalid parts and accepting the payloads sent, for
example, via a POST request.

For this to be effective, when we detect POST and Host: and terminate
the connection asynchronously, the networking code was modified in order
to never process further input. It was later verified that in a
pipelined request containing a POST command, the successive commands are
not executed."
antirez,2016-08-03 08:56:26,https://api.github.com/repos/antirez/redis/git/commits/ede6e22cd398a048a0c25543017dbb9b477b9963,ede6e22cd398a048a0c25543017dbb9b477b9963,Fix comment over 80 cols.
antirez,2016-08-03 08:23:03,https://api.github.com/repos/antirez/redis/git/commits/04340e1ff100b080e520e06d14c0c7e95a194909,04340e1ff100b080e520e06d14c0c7e95a194909,Modules: initial draft for a testing module.
antirez,2016-08-02 13:29:04,https://api.github.com/repos/antirez/redis/git/commits/7829e4ed2c4cda26a9891216ecf97c0b6e637195,7829e4ed2c4cda26a9891216ecf97c0b6e637195,"Modules: StringAppendBuffer() and ability to retain strings.

RedisModule_StringRetain() allows, when automatic memory management is
on, to keep string objects living after the callback returns. Can also
be used in order to use Redis reference counting of objects inside
modules.

The reason why this is useful is that sometimes when implementing new
data types we want to reference RedisModuleString objects inside the
module private data structures, so those string objects must be valid
after the callback returns even if not referenced inside the Redis key
space."
QuChen88,2016-08-01 19:16:17,https://api.github.com/repos/antirez/redis/git/commits/d982f443727bb226652d5c6a8320ed1962df1727,d982f443727bb226652d5c6a8320ed1962df1727,Fix a bug to delay bgsave while AOF rewrite in progress for replication
antirez,2016-08-02 08:32:36,https://api.github.com/repos/antirez/redis/git/commits/9424fe4580abdebd0329d1915601591aec33031c,9424fe4580abdebd0329d1915601591aec33031c,"Remove extra ""-"" from ASCII horizontal bar in comment."
antirez,2016-07-29 09:28:16,https://api.github.com/repos/antirez/redis/git/commits/9d524114eda67dedc38a9f97c9d5f3a5c3747829,9d524114eda67dedc38a9f97c9d5f3a5c3747829,"Update linenoise to fix insecure redis-cli history file creation.

The problem was fixed in antirez/linenoise repository applying a patch
contributed by @lamby. Here the new version is updated in the Redis
source tree.

Close #1418
Close #3322"
antirez,2016-07-28 12:15:31,https://api.github.com/repos/antirez/redis/git/commits/8966d4ca5e2d5376c1bfee326335e235d2bf762d,8966d4ca5e2d5376c1bfee326335e235d2bf762d,Changelog format modified to be less verbose.
antirez,2016-07-27 14:41:20,https://api.github.com/repos/antirez/redis/git/commits/55385f99debddb23da8a8045273c88b50be24c0f,55385f99debddb23da8a8045273c88b50be24c0f,"Ability of slave to announce arbitrary ip/port to master.

This feature is useful, especially in deployments using Sentinel in
order to setup Redis HA, where the slave is executed with NAT or port
forwarding, so that the auto-detected port/ip addresses, as listed in
the ""INFO replication"" output of the master, or as provided by the
""ROLE"" command, don't match the real addresses at which the slave is
reachable for connections."
antirez,2016-07-27 09:07:23,https://api.github.com/repos/antirez/redis/git/commits/356a6304ec77783e7fdaf00668a09dc293b810a0,356a6304ec77783e7fdaf00668a09dc293b810a0,"Multiple GEORADIUS bugs fixed.

By grepping the continuous integration errors log a number of GEORADIUS
tests failures were detected.

Fortunately when a GEORADIUS failure happens, the test suite logs enough
information in order to reproduce the problem: the PRNG seed,
coordinates and radius of the query.

By reproducing the issues, three different bugs were discovered and
fixed in this commit. This commit also improves the already good
reporting of the fuzzer and adds the failure vectors as regression
tests.

The issues found:

1. We need larger squares around the poles in order to cover the area
requested by the user. There were already checks in order to use a
smaller step (larger squares) but the limit set (+/- 67 degrees) is not
enough in certain edge cases, so 66 is used now.

2. Even near the equator, when the search area center is very near the
edge of the square, the north, south, west or ovest square may not be
able to fully cover the specified radius. Now a test is performed at the
edge of the initial guessed search area, and larger squares are used in
case the test fails.

3. Because of rounding errors between Redis and Tcl, sometimes the test
signaled false positives. This is now addressed.

Whenever possible the original code was improved a bit in other ways. A
debugging example stanza was added in order to make the next debugging
session simpler when the next bug is found."
antirez,2016-07-22 15:03:18,https://api.github.com/repos/antirez/redis/git/commits/03f5b508e5e939c941fb0c456b0f48b8e7a2c657,03f5b508e5e939c941fb0c456b0f48b8e7a2c657,"Replication: when possible start RDB saving ASAP.

In a previous commit the replication code was changed in order to
centralize the BGSAVE for replication trigger in replicationCron(),
however after further testings, the 1 second delay imposed by this
change is not acceptable.

So now the BGSAVE is only delayed if the AOF rewriting process is
active. However past comments made sure that replicationCron() is always
able to trigger the BGSAVE when needed, making the code generally more
robust.

The new code is more similar to the initial @oranagra patch where the
BGSAVE was delayed only if an AOF rewrite was in progress.

Trivia: delaying the BGSAVE uncovered a minor Sentinel issue that is now
fixed."
antirez,2016-07-22 14:39:22,https://api.github.com/repos/antirez/redis/git/commits/8b76d55f2e8550cb473c87d7355c1f0e24a3afda,8b76d55f2e8550cb473c87d7355c1f0e24a3afda,Sentinel: new test unit 07 that tests master down conditions.
antirez,2016-07-22 08:51:25,https://api.github.com/repos/antirez/redis/git/commits/3e9ce38b0a9f19d9c5cd792f260c7fdbbe5e98ee,3e9ce38b0a9f19d9c5cd792f260c7fdbbe5e98ee,"Sentinel: check Slave INFO state more often when disconnected.

During the initial handshake with the master a slave will report to have
a very high disconnection time from its master (since technically it was
disconnected since forever, so the current UNIX time in seconds is
reported).

However when the slave is connected again the Sentinel may re-scan the
INFO output again only after 10 seconds, which is a long time. During
this time Sentinels will consider this instance unable to failover, so
a useless delay is introduced.

Actaully this hardly happened in the practice because when a slave's
master is down, the INFO period for slaves changes to 1 second. However
when a manual failover is attempted immediately after adding slaves
(like in the case of the Sentinel unit test), this problem may happen.

This commit changes the INFO period to 1 second even in the case the
slave's master is not down, but the slave reported to be disconnected
from the master (by publishing, last time we checked, a master
disconnection time field in INFO).

This change is required as a result of an unrelated change in the
replication code that adds a small delay in the master-slave first
synchronization."
antirez,2016-07-21 16:34:53,https://api.github.com/repos/antirez/redis/git/commits/0a628e51025c4307c70cb00094dff9cdd1732f31,0a628e51025c4307c70cb00094dff9cdd1732f31,"Avoid simultaneous RDB and AOF child process.

This patch, written in collaboration with Oran Agra (@oranagra) is a companion
to 780a8b1. Together the two patches should avoid that the AOF and RDB saving
processes can be spawned at the same time. Previously conditions that
could lead to two saving processes at the same time were:

1. When AOF is enabled via CONFIG SET and an RDB saving process is
   already active.

2. When the SYNC command decides to start an RDB saving process ASAP in
   order to serve a new slave that cannot partially resynchronize (but
   only if we have a disk target for replication, for diskless
   replication there is not such a problem).

Condition ""1"" is not very severe but ""2"" can happen often and is
definitely good at degrading Redis performances in an unexpected way.

The two commits have the effect of always spawning RDB savings for
replication in replicationCron() instead of attempting to start an RDB
save synchronously. Moreover when a BGSAVE or AOF rewrite must be
performed, they are instead just postponed using flags that will try to
perform such operations ASAP.

Finally the BGSAVE command was modified in order to accept a SCHEDULE
option so that if an AOF rewrite is in progress, when this option is
given, the command no longer returns an error, but instead schedules an
RDB rewrite operation for when it will be possible to start it."
antirez,2016-07-21 10:10:56,https://api.github.com/repos/antirez/redis/git/commits/780a8b1d766daa6504f701bf09f6a4938179ba66,780a8b1d766daa6504f701bf09f6a4938179ba66,"Replication: start BGSAVE for replication always in replicationCron().

This makes the replication code conceptually simpler by removing the
synchronous BGSAVE trigger in syncCommand(). This also means that
socket and disk BGSAVE targets are handled by the same code."
antirez,2016-07-21 09:14:15,https://api.github.com/repos/antirez/redis/git/commits/e0582b35984f8bc215f4a31860bcee5679f75330,e0582b35984f8bc215f4a31860bcee5679f75330,Fix maxmemory shared integer check bug introduced with LFU.
antirez,2016-07-20 17:53:27,https://api.github.com/repos/antirez/redis/git/commits/2d5eb1f1a03b9109137e2fbfe8df488a09e4cd6c,2d5eb1f1a03b9109137e2fbfe8df488a09e4cd6c,"Volatile-ttl eviction policy implemented in terms of the pool.

Precision of the eviction improved sensibly. Also this allows us to have
a single code path for most eviction types."
antirez,2016-07-20 17:02:20,https://api.github.com/repos/antirez/redis/git/commits/9f1b7ab2ed820384e7fa0dca5987e2d644576286,9f1b7ab2ed820384e7fa0dca5987e2d644576286,test-lru.rb: support for testing volatile-ttl policy.
antirez,2016-07-20 13:00:35,https://api.github.com/repos/antirez/redis/git/commits/6854c7b9ee16595f74a773b911b6a195384e9665,6854c7b9ee16595f74a773b911b6a195384e9665,LFU: make counter log factor and decay time configurable.
antirez,2016-07-18 16:17:57,https://api.github.com/repos/antirez/redis/git/commits/6416ab19d0bd51fa90c17d856baebd581a7d991c,6416ab19d0bd51fa90c17d856baebd581a7d991c,"LFU: Use the LRU pool for the LFU algorithm.

Verified to have better real world performances with power-law access
patterns because of the data accumulated across calls."
antirez,2016-07-18 12:19:38,https://api.github.com/repos/antirez/redis/git/commits/dbce190ad018fc757d9c494952531db31eaac700,dbce190ad018fc757d9c494952531db31eaac700,LFU: Fix bugs in frequency decay code.
antirez,2016-07-18 11:49:31,https://api.github.com/repos/antirez/redis/git/commits/a8e2d0849e2a40f8bec14cd1b7ff170c17f772c3,a8e2d0849e2a40f8bec14cd1b7ff170c17f772c3,"LFU: Initial naive eviction cycle.

It is possible to get better results by using the pool like in the LRU
case. Also from tests during the morning I believe the current
implementation has issues in the frequency decay function that should
decrease the counter at periodic intervals."
antirez,2016-07-18 08:56:11,https://api.github.com/repos/antirez/redis/git/commits/24dd4a8f0444377af55cb1842ff0cfd5a8f74788,24dd4a8f0444377af55cb1842ff0cfd5a8f74788,"redis-cli LRU test mode: randomize value of key when setting.

This way it is possible from an observer to tell when the key is
replaced with a new one having the same name."
antirez,2016-07-18 08:53:02,https://api.github.com/repos/antirez/redis/git/commits/b8450d7cc515a55f0e1278f70806c12cb6d9fa58,b8450d7cc515a55f0e1278f70806c12cb6d9fa58,redis-cli LRU test mode: remove newline from key names.
antirez,2016-07-15 10:12:52,https://api.github.com/repos/antirez/redis/git/commits/5d07984c5d48d6253ea5884d69da3f06cdc90f1b,5d07984c5d48d6253ea5884d69da3f06cdc90f1b,"LFU: Redis object level implementation.

Implementation of LFU maxmemory policy for anything related to Redis
objects. Still no actual eviction implemented."
antirez,2016-07-14 14:06:36,https://api.github.com/repos/antirez/redis/git/commits/ada70c7c532f8a1d1fe946dd7663c9e48d834a02,ada70c7c532f8a1d1fe946dd7663c9e48d834a02,LFU simulator: remove dead code.
antirez,2016-07-14 13:55:17,https://api.github.com/repos/antirez/redis/git/commits/fc92c667f7181a287fa97a028de16bdd037318b6,fc92c667f7181a287fa97a028de16bdd037318b6,LRU simulator: fix new entry creation decr time.
antirez,2016-07-14 13:51:51,https://api.github.com/repos/antirez/redis/git/commits/f50dc38bc29373b0f74db043cdb200995a324cf3,f50dc38bc29373b0f74db043cdb200995a324cf3,LRU simulator: fix new entry creation.
antirez,2016-07-14 13:21:48,https://api.github.com/repos/antirez/redis/git/commits/09fcb002490815f268c838b5b210aacd8314686e,09fcb002490815f268c838b5b210aacd8314686e,"LFU: Simulation of the algorithm planned for Redis.

We have 24 total bits of space in each object in order to implement
an LFU (Least Frequently Used) eviction policy.

We split the 24 bits into two fields:

      8 bits      16 bits
    +--------+----------------+
    | LOG_C  | Last decr time |
    +--------+----------------+

LOG_C is a logarithmic counter that provides an indication of the access
frequency. However this field must also be deceremented otherwise what used
to be a frequently accessed key in the past, will remain ranked like that
forever, while we want the algorithm to adapt to access pattern changes.

So the remaining 16 bits are used in order to store the ""decrement time"",
a reduced-precision unix time (we take 16 bits of the time converted
in minutes since we don't care about wrapping around) where the LOG_C
counter is halved if it has an high value, or just decremented if it
has a low value.

New keys don't start at zero, in order to have the ability to collect
some accesses before being trashed away, so they start at COUNTER_INIT_VAL.
The logaritmic increment performed on LOG_C takes care of COUNTER_INIT_VAL
when incrementing the key, so that keys starting at COUNTER_INIT_VAL
(or having a smaller value) have a very high chance of being incremented
on access.

The simulation starts with a power-law access pattern, and later converts
into a flat access pattern in order to see how the algorithm adapts.
Currenty the decrement operation period is 1 minute, however note that
it is not guaranteed that each key will be scanned 1 time every minute,
so the actual frequency can be lower. However under high load, we access
3/5 keys every newly inserted key (because of how Redis eviction works).

This is a work in progress at this point to evaluate if this works well."
antirez,2016-07-13 08:45:37,https://api.github.com/repos/antirez/redis/git/commits/e423f76e75bea83106c271b56d516c20cf74a16a,e423f76e75bea83106c271b56d516c20cf74a16a,"LRU: Make cross-database choices for eviction.

The LRU eviction code used to make local choices: for each DB visited it
selected the best key to evict. This was repeated for each DB. However
this means that there could be DBs with very frequently accessed keys
that are targeted by the LRU algorithm while there were other DBs with
many better candidates to expire.

This commit attempts to fix this problem for the LRU policy. However the
TTL policy is still not fixed by this commit. The TTL policy will be
fixed in a successive commit.

This is an initial (partial because of TTL policy) fix for issue #2647."
antirez,2016-07-12 10:31:37,https://api.github.com/repos/antirez/redis/git/commits/e64bf05f43cacec7bff5fd72dffd9cdb8235762d,e64bf05f43cacec7bff5fd72dffd9cdb8235762d,"LRU: cache SDS strings in the eviction pool.

To destroy and recreate the pool[].key element is slow, so we allocate
in pool[].cached SDS strings that can account up to 255 chars keys and
try to reuse them. This provides a solid 20% performance improvement
in real world workload alike benchmarks."
antirez,2016-07-07 13:04:25,https://api.github.com/repos/antirez/redis/git/commits/965905c9f22c52abe5413e10a1ea919bb9729c94,965905c9f22c52abe5413e10a1ea919bb9729c94,"Move the struct evictionPoolEntry() into only file using it.

Local scope is always better when possible."
antirez,2016-07-07 13:01:58,https://api.github.com/repos/antirez/redis/git/commits/d8e92a8207d0bafe133c26067e671b1ab6383079,d8e92a8207d0bafe133c26067e671b1ab6383079,Move prototype of evictionPoolAlloc() in server.h.
antirez,2016-07-08 12:17:11,https://api.github.com/repos/antirez/redis/git/commits/3b9495d20d7deaddb235e1f82bf4ec922a75a030,3b9495d20d7deaddb235e1f82bf4ec922a75a030,LRU: use C99 variable len stack array in evictionPoolPopulate().
antirez,2016-07-12 09:22:41,https://api.github.com/repos/antirez/redis/git/commits/2a1247309a63dc5a0e1593a3a89b78c0e17645d2,2a1247309a63dc5a0e1593a3a89b78c0e17645d2,"redis-benchmark: new option to show server errors on stdout.

Disabled by default, can be activated with -e. Maybe the reverse was
more safe but departs from the past behavior."
antirez,2016-07-11 17:18:17,https://api.github.com/repos/antirez/redis/git/commits/382991f82ee1cc213e4225ce5f28284974715def,382991f82ee1cc213e4225ce5f28284974715def,"Remove useless memmove() from freeMemoryIfNeeded().

We start from the end of the pool to the initial item, zero-ing
every entry we use or every ghost entry, there is nothing to memmove
since to the right everything should be already set to NULL."
antirez,2016-07-11 14:26:02,https://api.github.com/repos/antirez/redis/git/commits/b19b2dff46f013b256f6966d3ace0d1cebcc10be,b19b2dff46f013b256f6966d3ace0d1cebcc10be,LRU: Fix output fixes to new test-lru.rb.
antirez,2016-07-11 14:24:21,https://api.github.com/repos/antirez/redis/git/commits/6a1c00c9ea8d646acdc66d64633e1a3904509c41,6a1c00c9ea8d646acdc66d64633e1a3904509c41,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2016-07-11 14:22:09,https://api.github.com/repos/antirez/redis/git/commits/32a549432b119d827693d547def557931bad352a,32a549432b119d827693d547def557931bad352a,"LRU: test-lru.rb improved in different ways.

1. Scan keys with pause to account for actual LRU precision.
2. Test cross-DB with 100 keys allocated in DB1.
3. Output results that don't fluctuate depending on number of keys.
4. Output results in percentage to make more sense.
5. Save file instead of outputting to STDOUT.
6. Support running multiple times with average of outputs.
7. Label each square (DIV) with its ID as HTML title."
antirez,2016-07-06 17:12:24,https://api.github.com/repos/antirez/redis/git/commits/51c1d40d0854ae2677c26ed039d01f5ce0f129a3,51c1d40d0854ae2677c26ed039d01f5ce0f129a3,"redis_check_rdb(): the rio structure must be global.

The rio structure is referenced in the global 'riostate' structure
in order for the logging functions to be always able to access the state
of the ""pseudo-loading"" of the RDB, needed for the check.

Courtesy of Valgrind."
antirez,2016-07-06 17:05:44,https://api.github.com/repos/antirez/redis/git/commits/eee878cbc5c6c02e2e3e4073d71de2c970305676,eee878cbc5c6c02e2e3e4073d71de2c970305676,"redis_check_rdb_main(): create shared objects only if needed.

Otherwise Valgrind will complain a memory leak under certain tests where
RDB checking is invoked from within Redis."
antirez,2016-07-06 17:00:43,https://api.github.com/repos/antirez/redis/git/commits/24882e31f2fd52a2750a1953a5e479576e392ee1,24882e31f2fd52a2750a1953a5e479576e392ee1,Fix redis_check_rdb() return value.
antirez,2016-07-06 14:39:23,https://api.github.com/repos/antirez/redis/git/commits/1e6bb9ef0c60c22eab9e8d334be9f83a5845b2bb,1e6bb9ef0c60c22eab9e8d334be9f83a5845b2bb,"Remove dead code from geohash_helper.c.

The function removed also had potential bugs related to signess of the
expression, and is not used anyway."
antirez,2016-07-06 14:38:05,https://api.github.com/repos/antirez/redis/git/commits/3961071b20c988bee574cbf28d6c3ba3b48e9567,3961071b20c988bee574cbf28d6c3ba3b48e9567,Fix signess issue in geohashEstimateStepsByRadius().
antirez,2016-07-06 14:31:11,https://api.github.com/repos/antirez/redis/git/commits/504ccad1fa018b2b432eda092bd536134ee6b39f,504ccad1fa018b2b432eda092bd536134ee6b39f,"Fix definition of M_PI in geohash_helper.c.

Without the right feature macros M_PI is not defined in math.h."
antirez,2016-07-06 14:02:38,https://api.github.com/repos/antirez/redis/git/commits/eaa713e93b6aadf08fda33238670cd3577a7db52,eaa713e93b6aadf08fda33238670cd3577a7db52,"geohash.c and geohash_helper.c are part of Redis.

They were under /deps since they originate from a different source tree,
however at this point they are very modified and we took ownership of
both the files making changes, fixing bugs, so there is no upgrade path
from the original code tree.

Given that, better to move the code under /src with proper dependencies
and with a more simpler editing experience."
antirez,2016-07-06 13:28:18,https://api.github.com/repos/antirez/redis/git/commits/4a140d320f7a8e1a63f9c3ca588f61f21838f3ac,4a140d320f7a8e1a63f9c3ca588f61f21838f3ac,Add expire.c and evict.c.
antirez,2016-07-06 13:24:06,https://api.github.com/repos/antirez/redis/git/commits/b46239e58b00774d121de89e0e033b2ed3181eb0,b46239e58b00774d121de89e0e033b2ed3181eb0,Expire and LRU related code moved into different files.
antirez,2016-07-06 10:56:43,https://api.github.com/repos/antirez/redis/git/commits/0610683d5e7565f997057afb74aef5cb941d04a0,0610683d5e7565f997057afb74aef5cb941d04a0,"Makefile: don't build dependencies file for clean, distclean."
antirez,2016-07-06 10:24:45,https://api.github.com/repos/antirez/redis/git/commits/10361829f9a38dfa40910556d222a1010bb5e52d,10361829f9a38dfa40910556d222a1010bb5e52d,"Generate Makefile.dep at every build.

Normally we used to update it from time to time. Too fragile... better
to generate dependencies at every run and delete them on 'make clean'."
antirez,2016-07-06 09:50:13,https://api.github.com/repos/antirez/redis/git/commits/abb3385e8d9b3edc2d85561854b0d2a0c34d3743,abb3385e8d9b3edc2d85561854b0d2a0c34d3743,Regression test for issue #3333.
antirez,2016-07-06 09:43:33,https://api.github.com/repos/antirez/redis/git/commits/23791828f1cd54ebea95d8c860058e55ff28aebf,23791828f1cd54ebea95d8c860058e55ff28aebf,"getLongLongFromObject: use string2ll() instead of strict_strtoll().

strict_strtoll() has a bug that reports the empty string as ok and
parses it as zero.

Apparently nobody ever replaced this old call with the faster/saner
string2ll() which is used otherwise in the rest of the Redis core.

This commit close #3333."
antirez,2016-07-05 13:18:40,https://api.github.com/repos/antirez/redis/git/commits/ef6a4df29c17e3c79a1e9b328fe3e2d1f2a9df39,ef6a4df29c17e3c79a1e9b328fe3e2d1f2a9df39,"redis-cli: check SELECT reply type just in state updated.

In issues #3361 / #3365 a problem was reported / fixed with redis-cli
not updating correctly the current DB on error after SELECT.

In theory this bug was fixed in 0042fb0e, but actually the commit only
fixed the prompt updating, not the fact the state was set in a wrong
way.

This commit removes the check in the prompt update, now that hopefully
it is the state that is correct, there is no longer need for this check."
antirez,2016-07-05 13:12:06,https://api.github.com/repos/antirez/redis/git/commits/0df286596d538fc9a22ca5dc2ec835205c055c26,0df286596d538fc9a22ca5dc2ec835205c055c26,"Merge pull request #3365 from sskorgal/unstable

Fix for redis_cli printing default DB when select command fails. #3361"
antirez,2016-07-04 16:45:24,https://api.github.com/repos/antirez/redis/git/commits/c383be3b0fc99bbde492d6fe70ab38d8e23829f8,c383be3b0fc99bbde492d6fe70ab38d8e23829f8,"Sentinel: fix cross-master Sentinel address update.

This commit both fixes the crash reported with issue #3364 and
also properly closes the old links after the Sentinel address for the
other masters gets updated.

The two problems where:

1. The Sentinel that switched address may not monitor all the masters,
   it is possible that there is no match, and the 'match' variable is
   NULL. Now we check for no match and 'continue' to the next master.

2. By ispecting the code because of issue ""1"" I noticed that there was a
   problem in the code that disconnects the link of the Sentinel that
   needs the address update. Basically link->disconnected is non-zero
   even if just *a single link* (cc -- command link or pc -- pubsub
   link) are disconnected, so to check with if (link->disconnected)
   in order to close the links risks to leave one link connected.

I was able to manually reproduce the crash at ""1"" and verify that the
commit resolves the issue.

Close #3364."
antirez,2016-07-04 14:09:07,https://api.github.com/repos/antirez/redis/git/commits/b2cc8bccdb8caa52e112e52231b1e591f569c426,b2cc8bccdb8caa52e112e52231b1e591f569c426,"CONFIG GET is now no longer case sensitive.

Like CONFIG SET always was. Close #3369."
antirez,2016-07-04 10:41:25,https://api.github.com/repos/antirez/redis/git/commits/a0dd0140f3771b9651a7eeca2f723239a9d44d0d,a0dd0140f3771b9651a7eeca2f723239a9d44d0d,Fix test for new RDB checksum failure message.
antirez,2016-07-04 10:08:37,https://api.github.com/repos/antirez/redis/git/commits/b99ad1bd808fcfa5f57301a65c875d8c16d7cf71,b99ad1bd808fcfa5f57301a65c875d8c16d7cf71,"Make tcp-keepalive default to 300 in internal conf.

We already changed the default in the redis.conf template, but I forgot
to change the internal config as well."
antirez,2016-07-01 13:26:55,https://api.github.com/repos/antirez/redis/git/commits/7e220a964afdcb18bb660e898bc74a727a2a5848,7e220a964afdcb18bb660e898bc74a727a2a5848,In Redis RDB check: more details in error reportings.
antirez,2016-07-01 09:59:25,https://api.github.com/repos/antirez/redis/git/commits/e697153d18531e6b12d110bc0c57658ae686fb08,e697153d18531e6b12d110bc0c57658ae686fb08,In Redis RDB check: log decompression errors.
antirez,2016-07-01 09:40:40,https://api.github.com/repos/antirez/redis/git/commits/df3c69e89eeea31245d2d4759589be216ad0b65f,df3c69e89eeea31245d2d4759589be216ad0b65f,In Redis RDB check: log object type on error.
antirez,2016-07-01 07:55:18,https://api.github.com/repos/antirez/redis/git/commits/c0f4d19331689c407e79a0f94dba3b3ef0ce827c,c0f4d19331689c407e79a0f94dba3b3ef0ce827c,Added a trivial program to randomly corrupt RDB files in /utils.
antirez,2016-07-01 07:52:35,https://api.github.com/repos/antirez/redis/git/commits/2ab70971783c31ecd01c539146026d6a8666201b,2ab70971783c31ecd01c539146026d6a8666201b,In Redis RDB check: minor output message changes.
antirez,2016-07-01 07:36:52,https://api.github.com/repos/antirez/redis/git/commits/e9f31ba9c2dcea13c825653e7b2e0ffdd99129c5,e9f31ba9c2dcea13c825653e7b2e0ffdd99129c5,In Redis RDB check: better error reporting.
sskorgal,2016-07-01 05:12:22,https://api.github.com/repos/antirez/redis/git/commits/9dfd9d14120c7beaa2369a70ea77bb28aeb4ea07,9dfd9d14120c7beaa2369a70ea77bb28aeb4ea07,Fix for redis_cli printing default DB when select command fails.
antirez,2016-06-30 21:44:44,https://api.github.com/repos/antirez/redis/git/commits/e97fadb045c8bd10efd00d18374417009feb18c5,e97fadb045c8bd10efd00d18374417009feb18c5,"In Redis RDB check: initial POC.

So far we used an external program (later executed within Redis) and
parser in order to check RDB files for correctness. This forces, at each
RDB format update, to have two copies of the same format implementation
that are hard to keep in sync. Morover the former RDB checker only
checked the very high-level format of the file, without actually trying
to load things in memory. Certain corruptions can only be handled by
really loading key-value pairs.

This first commit attempts to unify the Redis RDB loadig code with the
task of checking the RDB file for correctness. More work is needed but
it looks like a sounding direction so far."
yusaku,2016-06-29 09:09:16,https://api.github.com/repos/antirez/redis/git/commits/b6c4822f7cfdb87b211826789128e1ff4162d3e6,b6c4822f7cfdb87b211826789128e1ff4162d3e6,"Fix the firstkey, lastkey, and keystep of moduleCommand"
antirez,2016-06-28 07:42:20,https://api.github.com/repos/antirez/redis/git/commits/24bd9b19f60712f635ce512a7fa29d6de2d98e39,24bd9b19f60712f635ce512a7fa29d6de2d98e39,Test: new randomized stress tester for #3343 alike bugs.
antirez,2016-06-28 07:33:36,https://api.github.com/repos/antirez/redis/git/commits/f983318e521a6540146eabeeb40634157fdc34b9,f983318e521a6540146eabeeb40634157fdc34b9,Stress tester WIP.
antirez,2016-06-28 07:26:28,https://api.github.com/repos/antirez/redis/git/commits/49899866c89e9383a590e02d1846fb88e1729bc5,49899866c89e9383a590e02d1846fb88e1729bc5,"Regression test for issue #3343 exact min crash sequence.

Note: it was verified that it can crash the test suite without the patch
applied."
antirez,2016-06-27 16:12:46,https://api.github.com/repos/antirez/redis/git/commits/dc18a6a6f84dfe3a09c2219f43bf3a7dd8faf2a5,dc18a6a6f84dfe3a09c2219f43bf3a7dd8faf2a5,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2016-06-27 16:02:33,https://api.github.com/repos/antirez/redis/git/commits/5e176e1af599637f4b5df1c60b22d110c6b1ae0c,5e176e1af599637f4b5df1c60b22d110c6b1ae0c,"Fix quicklistReplaceAtIndex() by updating the quicklist ziplist size.

The quicklist takes a cached version of the ziplist representation size
in bytes. The implementation must update this length every time the
underlying ziplist changes. However quicklistReplaceAtIndex() failed to
fix the length.

During LSET calls, the size of the ziplist blob and the cached size
inside the quicklist diverged. Later, when this size is used in an
authoritative way, for example during nodes splitting in order to copy
the nodes, we end with a duplicated node that may contain random
garbage.

This commit should fix issue #3343, however several problems were found
reviewing the quicklist.c code in search of this bug that should be
addressed soon or later.

For example:

1. To take a cached ziplist length is fragile since failing to update it
leads to this kind of issues.

2. The node splitting code needs auditing. For example it works just for
a side effect of ziplistDeleteRange() to be able to cope with a wrong
count of elements to remove. The code inside quicklist.c assumes that
-1 means ""delete till the end"" while actually it's just a count of how
many elements to delete, and is an unsigned count. So -1 gets converted
into the maximum integer, and just by chance the ziplist code stops
deleting elements after there are no more to delete.

3. Node splitting is extremely inefficient, it copies the node and
removes elements from both nodes even when actually there is to move a
single entry from one node to the other, or when the new resulting node
is empty at all so there is nothing to copy but just to create a new
node.

However at least for Redis 3.2 to introduce fresh code inside
quicklist.c may be even more risky, so instead I'm writing a better
fuzzy tester to stress the internals a bit more in order to anticipate
other possible bugs.

This bug was found using a fuzzy tester written after having some clue
about where the bug could be. The tester eventually created a ~2000
commands sequence able to always crash Redis. I wrote a better version
of the tester that searched for the smallest sequence that could crash
Redis automatically. Later this smaller sequence was minimized by
removing random commands till it still crashed the server. This resulted
into a sequence of 7 commands. With this small sequence it was just a
matter of filling the code with enough printf() to understand enough
state to fix the bug."
antirez,2016-06-24 06:58:23,https://api.github.com/repos/antirez/redis/git/commits/ae4f5b303eef35a878ea2f6894d169ad292089dc,ae4f5b303eef35a878ea2f6894d169ad292089dc,"Merge pull request #3342 from yossigo/fix_calloc

Fix RedisModule_Calloc() definition typo."
yossigo,2016-06-23 19:30:32,https://api.github.com/repos/antirez/redis/git/commits/19c401d81dc09652806d348dee4371899bc2e500,19c401d81dc09652806d348dee4371899bc2e500,Fix RedisModule_Calloc() definition typo.
rojingeorge,2016-06-23 16:28:03,https://api.github.com/repos/antirez/redis/git/commits/4242fdf45c633701cae7d536bc8af0b6f40e11cd,4242fdf45c633701cae7d536bc8af0b6f40e11cd,"Display the nodes summary once the cluster is established using redis-trib.rb

Display the nodes summary once the cluster is established using
redis-trib.rb
After the cluster meet and join was done, when the summary was shown, it
was giving info regarding the nodes. This fix ensures that confusion
where the slaves were shown as masters.
Fix would be to reset the nodes and reload the cluster information
before checking the cluster status after creating it."
rojingeorge,2016-06-23 16:04:03,https://api.github.com/repos/antirez/redis/git/commits/4aab50ac7b7565a9d87f5810b07efe1b69e27b1a,4aab50ac7b7565a9d87f5810b07efe1b69e27b1a,Merge remote-tracking branch 'refs/remotes/antirez/unstable' into unstable
antirez,2016-06-23 14:39:51,https://api.github.com/repos/antirez/redis/git/commits/f60aa4de302992ac458f2f39d0e4918d4734723d,f60aa4de302992ac458f2f39d0e4918d4734723d,"Merge pull request #3324 from mishan/fix-wrong-comment-about-sentinel-mode

Fix incorrect comment for checkForSentinelMode function"
antirez,2016-06-23 14:20:48,https://api.github.com/repos/antirez/redis/git/commits/18983113c57aeeeaf3e71b8c569a1717a2c9a74a,18983113c57aeeeaf3e71b8c569a1717a2c9a74a,Modules: mention RedisModule_Calloc() in the doc.
antirez,2016-06-23 14:19:14,https://api.github.com/repos/antirez/redis/git/commits/3a0b776b94eedcaec9e69e2efb1c6ee354de00bd,3a0b776b94eedcaec9e69e2efb1c6ee354de00bd,"Merge pull request #3335 from dvirsky/rm_calloc

added RM_Calloc implementation"
antirez,2016-06-23 14:18:57,https://api.github.com/repos/antirez/redis/git/commits/c026b5cd3e41aa2bfeb15b34b07bcedd6bced153,c026b5cd3e41aa2bfeb15b34b07bcedd6bced153,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2016-06-23 14:18:14,https://api.github.com/repos/antirez/redis/git/commits/0f484d83123366397f489e6f7e6481fc6d8765dc,0f484d83123366397f489e6f7e6481fc6d8765dc,"Actually remove static from #3331.

I forgot -a when amending in the previous commit."
antirez,2016-06-23 14:16:28,https://api.github.com/repos/antirez/redis/git/commits/28ea585fce601613500f0e36215851d8d88c6228,28ea585fce601613500f0e36215851d8d88c6228,"Merge pull request #3336 from yossigo/create_string_from_string

Add RedisModule_CreateStringFromString()."
antirez,2016-06-23 14:12:59,https://api.github.com/repos/antirez/redis/git/commits/c0ca87dcc09212053e4718d9f78a2127ce33ef85,c0ca87dcc09212053e4718d9f78a2127ce33ef85,"Minor change to conform PR #3331 to Redis code base style.

Also avoid ""static"" in order to have symbols during crashes."
antirez,2016-06-23 14:12:07,https://api.github.com/repos/antirez/redis/git/commits/a66dd43331f278e000f222aa63e36922f14f3c21,a66dd43331f278e000f222aa63e36922f14f3c21,"Merge pull request #3331 from yossigo/fix_openkey_crash

Fix occasional RM_OpenKey() crashes."
antirez,2016-06-23 14:06:15,https://api.github.com/repos/antirez/redis/git/commits/393c4686ef1741c3a2c0e462655b80f607473ed4,393c4686ef1741c3a2c0e462655b80f607473ed4,"Merge pull request #3338 from tielei/unstable

A string with 21 chars is not representable as a 64-bit integer."
tielei,2016-06-23 11:53:56,https://api.github.com/repos/antirez/redis/git/commits/f648c5a70c802aeb60ee9773dfdcf7cf08a06357,f648c5a70c802aeb60ee9773dfdcf7cf08a06357,A string with 21 chars is not representable as a 64-bit integer.
antirez,2016-06-23 10:29:52,https://api.github.com/repos/antirez/redis/git/commits/3d48c9312222e29a0fdda13fb8f852b37127fc7a,3d48c9312222e29a0fdda13fb8f852b37127fc7a,"Merge pull request #3330 from yossigo/fix_const

Use const in Redis Module API where possible."
antirez,2016-06-23 10:11:30,https://api.github.com/repos/antirez/redis/git/commits/4b12c6a3600eb2f8bfb8e440db5a526054bd2d9b,4b12c6a3600eb2f8bfb8e440db5a526054bd2d9b,"Modules: changes to logging function.

This commit changes what provided by PR #3315 (merged) in order to
let the user specify the log level as a string.

The define could be also used, but when this happens, they must be
decoupled from the defines in the Redis core, like in the other part of
the Redis modules implementations, so that a switch statement (or a
function) remaps between the two, otherwise we are no longer free to
change the internal Redis defines."
yossigo,2016-06-15 13:27:16,https://api.github.com/repos/antirez/redis/git/commits/715794b82976511786307b9e14165f1efbb28240,715794b82976511786307b9e14165f1efbb28240,Add RedisModule_Log() logging API function.
antirez,2016-06-23 07:38:30,https://api.github.com/repos/antirez/redis/git/commits/b507289750eb77b554847afa03da8eb044f49a3a,b507289750eb77b554847afa03da8eb044f49a3a,"Commit change in autoMemoryFreed(): first -> last.

It's more natural to call the last entry added as ""last"", the original
commet got me confused until I actually read the code."
antirez,2016-06-23 07:09:51,https://api.github.com/repos/antirez/redis/git/commits/f2dbc02f6510cc3cc415ac354888948af64434d1,f2dbc02f6510cc3cc415ac354888948af64434d1,"Modules: implement zig-zag scanning in autoMemoryFreed().

Most of the time to check the last element is the way to go, however
there are patterns where the contrary is the best choice. Zig-zag
scanning implemented in this commmit always checks the obvious element
first (the last added -- think at a loop where the last element
allocated gets freed again and again), and continues checking one
element in the head and one in the tail.

Thanks to @dvisrky that fixed the original implementation of the
function and proposed zig zag scanning."
antirez,2016-06-23 06:59:38,https://api.github.com/repos/antirez/redis/git/commits/2fe9b7989792d1a722d5863734e379c15d57b56a,2fe9b7989792d1a722d5863734e379c15d57b56a,"Merge pull request #3244 from dvirsky/optimize_autoMemoryFreed

Optimized autoMemoryFreed loop"
yossigo,2016-06-22 17:57:24,https://api.github.com/repos/antirez/redis/git/commits/61172ed01ef3b888d499e191df6bc6408313ae68,61172ed01ef3b888d499e191df6bc6408313ae68,Add RedisModule_CreateStringFromString().
dvirsky,2016-06-22 14:32:41,https://api.github.com/repos/antirez/redis/git/commits/dc7f3fefad5f136c0655734a35ae624758d73845,dc7f3fefad5f136c0655734a35ae624758d73845,added RM_Calloc implementation
antirez,2016-06-22 13:24:51,https://api.github.com/repos/antirez/redis/git/commits/4e10b08fb3ead01e305b65f47180b44334bf9b8a,4e10b08fb3ead01e305b65f47180b44334bf9b8a,Modules doc: hint about replacing libc malloc calls.
yossigo,2016-06-22 04:30:06,https://api.github.com/repos/antirez/redis/git/commits/e22f3e40d517b8eca10a0d02a5554987b1a22b77,e22f3e40d517b8eca10a0d02a5554987b1a22b77,Cleanup: remove zset reset function from RM_ZsetRangeStop().
yossigo,2016-06-21 07:22:19,https://api.github.com/repos/antirez/redis/git/commits/a8e20345480ac83b3bc60b7a6539b099e806d944,a8e20345480ac83b3bc60b7a6539b099e806d944,Fix occasional RM_OpenKey() crashes.
yossigo,2016-06-20 20:08:06,https://api.github.com/repos/antirez/redis/git/commits/8f3a4df77599e4523bee7dc1db60b0863d6a6a49,8f3a4df77599e4523bee7dc1db60b0863d6a6a49,Use const in Redis Module API where possible.
antirez,2016-06-17 12:48:41,https://api.github.com/repos/antirez/redis/git/commits/0b4b7ebd957448cb59cf3e3c365772b29067ede7,0b4b7ebd957448cb59cf3e3c365772b29067ede7,"Merge pull request #3252 from oranagra/config_fix

fix: config set list-max-ziplist-size didn't support negative values"
mishan,2016-06-16 23:50:53,https://api.github.com/repos/antirez/redis/git/commits/7a5538d3a90ffbfa618b0f8776564db617616752,7a5538d3a90ffbfa618b0f8776564db617616752,Fix incorrect comment for checkForSentinelMode function
antirez,2016-06-16 17:24:34,https://api.github.com/repos/antirez/redis/git/commits/f7351f4c07f5e0b1c9bdb6949f45f84576ffd75f,f7351f4c07f5e0b1c9bdb6949f45f84576ffd75f,"Fix Sentinel pending commands counting.

This bug most experienced effect was an inability of Redis to
reconfigure back old masters to slaves after they are reachable again
after a failover. This was due to failing to reset the count of the
pending commands properly, so the master appeared fovever down.

Was introduced in Redis 3.2 new Sentinel connection sharing feature
which is a lot more complex than the 3.0 code, but more scalable.

Many thanks to people reporting the issue, and especially to
@sskorgal for investigating the issue in depth.

Hopefully closes #3285."
antirez,2016-06-16 15:23:31,https://api.github.com/repos/antirez/redis/git/commits/7c8f275a24db26a6b9eb5a14439d1156c244dd67,7c8f275a24db26a6b9eb5a14439d1156c244dd67,"redis-cli: really connect to the right server.

I recently introduced populating the autocomplete help array with the
COMMAND command if available. However this was performed before parsing
the arguments, defaulting to instance 6379. After the connection is
performed it remains stable.

The effect is that if there is an instance running on port 6339,
whatever port you specify is ignored and 6379 is connected to instead.
The right port will be selected only after a reconnection.

Close #3314."
antirez,2016-06-16 13:53:57,https://api.github.com/repos/antirez/redis/git/commits/a3f893b8004bae824a3c1827666ffb0d7e342355,a3f893b8004bae824a3c1827666ffb0d7e342355,"RESTORE: accept RDB dumps with older versions.

Reference issue #3218.

Checking the code I can't find a reason why the original RESTORE
code was so opinionated about restoring only the current version. The
code in to `rdb.c` appears to be capable as always to restore data from
older versions of Redis, and the only places where it is needed the
current version in order to correctly restore data, is while loading the
opcodes, not the values itself as it happens in the case of RESTORE.

For the above reasons, this commit enables RESTORE to accept older
versions of values payloads."
antirez,2016-06-16 10:59:05,https://api.github.com/repos/antirez/redis/git/commits/8272ceadaa161989ead1406eecaa17ddd57dbcb7,8272ceadaa161989ead1406eecaa17ddd57dbcb7,"Merge pull request #3255 from oranagra/error_string

CLIENT error message was out of date"
antirez,2016-06-16 10:57:59,https://api.github.com/repos/antirez/redis/git/commits/64b834b8b2b75460f7a0cd9cd60dc3bd09bc0f16,64b834b8b2b75460f7a0cd9cd60dc3bd09bc0f16,"Merge pull request #3256 from oranagra/georasius_neg

fix georadius returns multiple replies"
antirez,2016-06-16 10:54:33,https://api.github.com/repos/antirez/redis/git/commits/2f2fd64c0db00b82e6c336d0ee9e19d50a3aad5f,2f2fd64c0db00b82e6c336d0ee9e19d50a3aad5f,"Minor aesthetic fixes to PR #3264.

Comment format fixed + local var modified from camel case to underscore
separators as Redis code base normally does (camel case is mostly used
for global symbols like structure names, function names, global vars,
...)."
antirez,2016-06-16 10:52:36,https://api.github.com/repos/antirez/redis/git/commits/33a9836fe32acffdf6fb34c8712e805d0986a956,33a9836fe32acffdf6fb34c8712e805d0986a956,"Merge pull request #3264 from oranagra/bitfield_fix2

fix crash in BITFIELD GET on non existing key or wrong type see #3259"
antirez,2016-06-15 15:24:11,https://api.github.com/repos/antirez/redis/git/commits/5d83f6cfdeef7b493a67559c8d79d852abec16e9,5d83f6cfdeef7b493a67559c8d79d852abec16e9,"Merge pull request #3274 from MOON-CLJ/fix_promoted_slave

Sentinel: fix check when can't send the command to the promoted slave"
antirez,2016-06-15 15:15:18,https://api.github.com/repos/antirez/redis/git/commits/3bd20ea2f1be58001dd6330a7763bed3d4221695,3bd20ea2f1be58001dd6330a7763bed3d4221695,Test TOUCH and new TTL / TYPE behavior about object access time.
antirez,2016-06-15 13:53:19,https://api.github.com/repos/antirez/redis/git/commits/226f679651ca62394021738af0ce467a290c7b90,226f679651ca62394021738af0ce467a290c7b90,"Merge pull request #3283 from ideal/unstable

fix mistake in comment in object.c"
antirez,2016-06-15 10:51:15,https://api.github.com/repos/antirez/redis/git/commits/bd2cd7059a4fc64f503f2c51f29c27a6311ecbc3,bd2cd7059a4fc64f503f2c51f29c27a6311ecbc3,"Merge pull request #3281 from jamespedwards42/unstable

Fix modules intro typos."
antirez,2016-06-15 10:48:58,https://api.github.com/repos/antirez/redis/git/commits/2d86995273e431b40c2bd30c694ea405cc698118,2d86995273e431b40c2bd30c694ea405cc698118,"GETRANGE: return empty string with negative, inverted start/end."
antirez,2016-06-15 10:16:39,https://api.github.com/repos/antirez/redis/git/commits/eb45e114965175e766136d6e0d8fbe242bc256b1,eb45e114965175e766136d6e0d8fbe242bc256b1,Remove additional round brackets from fix for #3282.
antirez,2016-06-15 10:15:46,https://api.github.com/repos/antirez/redis/git/commits/ca54335f40f104eee1ca326d13ccaee365840478,ca54335f40f104eee1ca326d13ccaee365840478,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2016-06-15 10:15:34,https://api.github.com/repos/antirez/redis/git/commits/001cadc854d780b67f6d792b71404aebd746124c,001cadc854d780b67f6d792b71404aebd746124c,"Merge pull request #3282 from wenduo/unstable

bitcount bug:return non-zero value when start > end (both negative)"
antirez,2016-06-15 09:49:49,https://api.github.com/repos/antirez/redis/git/commits/212f157855120157675b5e18a0c0b93924774fb7,212f157855120157675b5e18a0c0b93924774fb7,Regression test for #3282.
antirez,2016-06-15 09:20:01,https://api.github.com/repos/antirez/redis/git/commits/3deb7badb1bb60212c3852e5f5d7f870b3e22ec2,3deb7badb1bb60212c3852e5f5d7f870b3e22ec2,"Merge pull request #3226 from MichielDeMey/patch-1

Allow non-interactive execution of install_server"
antirez,2016-06-15 09:18:04,https://api.github.com/repos/antirez/redis/git/commits/82554cae4d2181317506d41abf4725347f8850c9,82554cae4d2181317506d41abf4725347f8850c9,"Merge pull request #3313 from zshipko/unstable

BSDs don't have -ldl"
zshipko,2016-06-14 13:46:42,https://api.github.com/repos/antirez/redis/git/commits/b7b9aa6d9bbed5a292f3e939bf0c5906bdf965ca,b7b9aa6d9bbed5a292f3e939bf0c5906bdf965ca,BSDs don't have -ldl
antirez,2016-06-14 13:33:59,https://api.github.com/repos/antirez/redis/git/commits/41d804d9dc48292f61fc1e1efd2241404dc9a6e8,41d804d9dc48292f61fc1e1efd2241404dc9a6e8,TTL and TYPE LRU access fixed. TOUCH implemented.
antirez,2016-06-14 12:45:28,https://api.github.com/repos/antirez/redis/git/commits/cd8e6882264bc509520a47f86143e6a88bfd158f,cd8e6882264bc509520a47f86143e6a88bfd158f,redis-cli help.h updated.
antirez,2016-06-13 10:03:14,https://api.github.com/repos/antirez/redis/git/commits/c6e3ce38ceaebac7ea801619958e51d24fbf97d7,c6e3ce38ceaebac7ea801619958e51d24fbf97d7,Enable tcp-keepalive by default.
antirez,2016-06-13 08:05:23,https://api.github.com/repos/antirez/redis/git/commits/5ba9bdec75292434b7b062cc8e7f0ae1e9b9fce4,5ba9bdec75292434b7b062cc8e7f0ae1e9b9fce4,"Modules: document how to pass config params to modules.

Related to #3293."
antirez,2016-06-13 07:57:10,https://api.github.com/repos/antirez/redis/git/commits/5831dd860a5a355d242eb32da2e95aa93451d896,5831dd860a5a355d242eb32da2e95aa93451d896,"Fix example modules to have the right OnLoad() prototype.

Related to #3293."
antirez,2016-06-13 07:51:06,https://api.github.com/repos/antirez/redis/git/commits/a4bce77e920be0a0140ac81d2cbc79e2ed88eefb,a4bce77e920be0a0140ac81d2cbc79e2ed88eefb,"Don't assume no padding or specific ordering in moduleLoadQueueEntry structure.

We need to be free to shuffle fields or add more fields in a structure
without breaking code.

Related to issue #3293."
antirez,2016-06-13 07:45:53,https://api.github.com/repos/antirez/redis/git/commits/9a02dac2e8fa209f68b8e487313892cdd11c21a0,9a02dac2e8fa209f68b8e487313892cdd11c21a0,"Free module context after loading.

Now that modules receive RedisModuleString objects on loading, they are
allowed to call the String API, so the context must be released
correctly.

Related to #3293."
antirez,2016-06-13 07:40:28,https://api.github.com/repos/antirez/redis/git/commits/b6cd0085084af91f156fcd190e3fdb024dcc8a0a,b6cd0085084af91f156fcd190e3fdb024dcc8a0a,"Make sure modules arguments are raw strings.

Related to PR #3293."
antirez,2016-06-13 07:39:44,https://api.github.com/repos/antirez/redis/git/commits/1ad5c2276323c11864c4cdc3990aeb8a1593cb71,1ad5c2276323c11864c4cdc3990aeb8a1593cb71,Minor changes to unifor C style to Redis code base for PR #3293.
antirez,2016-06-13 07:31:59,https://api.github.com/repos/antirez/redis/git/commits/e8d5387a44bce6aee9f11b39064b547201dc1ee4,e8d5387a44bce6aee9f11b39064b547201dc1ee4,"Merge pull request #3293 from yossigo/module_config

Allow passing arguments to modules on load."
antirez,2016-06-10 08:39:38,https://api.github.com/repos/antirez/redis/git/commits/e71f22f5f2cfa64cd5fceb7b98cc1c2ffa8b28a0,e71f22f5f2cfa64cd5fceb7b98cc1c2ffa8b28a0,Fix typo: after -> before.
antirez,2016-06-10 08:36:09,https://api.github.com/repos/antirez/redis/git/commits/e4567f243bedd41188d8502e80a257f474f479dd,e4567f243bedd41188d8502e80a257f474f479dd,Explain why module type names are 9 chars.
antirez,2016-06-10 08:20:28,https://api.github.com/repos/antirez/redis/git/commits/688996f415e6c0d4ea4ff9a4af25608cd5599d4a,688996f415e6c0d4ea4ff9a4af25608cd5599d4a,"Merge pull request #3295 from catwell/pr-1-warnings

fix some compiler warnings"
antirez,2016-06-10 08:18:49,https://api.github.com/repos/antirez/redis/git/commits/b4327ae5fe3c749d1f2918c18297a91008f0a0ee,b4327ae5fe3c749d1f2918c18297a91008f0a0ee,"Merge pull request #3294 from yossigo/fix_unload

Fix MODULE UNLOAD crash and/or wrong error message."
antirez,2016-06-10 08:15:37,https://api.github.com/repos/antirez/redis/git/commits/a1684ff1bbd9b6023f16ad697ab12e29a987e6b8,a1684ff1bbd9b6023f16ad697ab12e29a987e6b8,"Remove tryObjectEncoding() calls from list type.

All lists are now represented via quicklists.
Quicklists are never represented referencing robj structures, so trying
to compress their representation does not make sense. That the new way
is faster was experimentally verified with micro benchmarks in order to
prove that the intuition was correct."
antirez,2016-06-10 08:12:11,https://api.github.com/repos/antirez/redis/git/commits/5beec9743e5e926375705ebb730500a56510a1e5,5beec9743e5e926375705ebb730500a56510a1e5,Merge branch 'unstable' of github.com:/antirez/redis into unstable
MichielDeMey,2016-06-10 08:11:46,https://api.github.com/repos/antirez/redis/git/commits/90781dec56d01a779f55ad16484e69813c2a4f7c,90781dec56d01a779f55ad16484e69813c2a4f7c,Added documentation for non-interactive install procedure
antirez,2016-06-10 08:10:08,https://api.github.com/repos/antirez/redis/git/commits/ab73544396de1ba9ca7ef6b065517c9411a1a1bf,ab73544396de1ba9ca7ef6b065517c9411a1a1bf,"Merge pull request #3296 from catwell/pr-2-variadic-pushx

make RPUSHX and LPUSHX variadic"
andyli029,2016-06-07 06:42:50,https://api.github.com/repos/antirez/redis/git/commits/93a09877fe9295206b48febd6520fef02f92e1b3,93a09877fe9295206b48febd6520fef02f92e1b3,"fix comment ""b>a"" to ""a > b"""
antirez,2016-06-10 07:15:01,https://api.github.com/repos/antirez/redis/git/commits/2a57ad5d90e38969e8b821a4d44b75cf8ceb3aca,2a57ad5d90e38969e8b821a4d44b75cf8ceb3aca,Fixed typo in Sentinel compareSlavesForPromotion() comment.
antirez,2016-06-10 07:08:11,https://api.github.com/repos/antirez/redis/git/commits/243c9dc151091b19f6019643e2e46c580cc9eaf9,243c9dc151091b19f6019643e2e46c580cc9eaf9,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2016-06-10 07:07:42,https://api.github.com/repos/antirez/redis/git/commits/01a34b191e4be30107bae00ab113a31d32193555,01a34b191e4be30107bae00ab113a31d32193555,"Merge pull request #2870 from SaurabhJha/documenation-fixes

Documentation fixes"
antirez,2016-06-10 07:02:13,https://api.github.com/repos/antirez/redis/git/commits/67fcd26cf361c89a9bfbab88467af6d037f6ef97,67fcd26cf361c89a9bfbab88467af6d037f6ef97,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2016-06-10 07:02:06,https://api.github.com/repos/antirez/redis/git/commits/bac4de7d1b7d7b59cc00d10d7ce93cf2816567ad,bac4de7d1b7d7b59cc00d10d7ce93cf2816567ad,"Merge pull request #3180 from bogdanvlviv/fix_pidfile

fix pidfile in redis.conf"
antirez,2016-06-10 07:00:02,https://api.github.com/repos/antirez/redis/git/commits/54813368729009fb599701565036bf2dd89fcfd4,54813368729009fb599701565036bf2dd89fcfd4,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2016-06-10 06:59:50,https://api.github.com/repos/antirez/redis/git/commits/53c008a78591fbca6dcac9faf82e61eb784e42f1,53c008a78591fbca6dcac9faf82e61eb784e42f1,"Merge pull request #3303 from jspraul/patch-1

Include select.h to fix unknown type name 'fd_set' compile error in ae_select (MSYS2)"
antirez,2016-06-08 14:07:32,https://api.github.com/repos/antirez/redis/git/commits/b664aebda176ae8ac7e1a5284370164a89348b2d,b664aebda176ae8ac7e1a5284370164a89348b2d,Improve timer callback creation comment.
jspraul,2016-06-07 20:46:00,https://api.github.com/repos/antirez/redis/git/commits/4df95e8419f8c8b1e1bbb451b3710056b6707fec,4df95e8419f8c8b1e1bbb451b3710056b6707fec,"Include 'fd_set' type name

Fix an MSYS2-build-breaking error: unknown type name ‘fd_set’"
antirez,2016-06-07 15:20:46,https://api.github.com/repos/antirez/redis/git/commits/30c1a8570bbced4f21e0ba59146694fa006b83c0,30c1a8570bbced4f21e0ba59146694fa006b83c0,"Merge pull request #3301 from yossigo/fix_unused_warning

Remove gcc warning when redismodule.h is included by a multi-file module."
yossigo,2016-06-07 10:31:33,https://api.github.com/repos/antirez/redis/git/commits/2fd6ca3cf8912ce76a743c7a3bdce31ae5cfb0e7,2fd6ca3cf8912ce76a743c7a3bdce31ae5cfb0e7,"Remove gcc warning when redismodule.h is included by a multi-file
module."
SaurabhJha,2016-01-21 11:27:36,https://api.github.com/repos/antirez/redis/git/commits/319b1263ecf4e0f41e848e3e88ea1576d2470d3e,319b1263ecf4e0f41e848e3e88ea1576d2470d3e,Fixup
SaurabhJha,2015-11-26 13:06:35,https://api.github.com/repos/antirez/redis/git/commits/61717ac0951d825084c9261d509161d947fe4603,61717ac0951d825084c9261d509161d947fe4603,More edits to README
SaurabhJha,2015-11-18 17:08:53,https://api.github.com/repos/antirez/redis/git/commits/0f10b16202ccdd1e0c176f790d0b4e70bc9598fb,0f10b16202ccdd1e0c176f790d0b4e70bc9598fb,Address grammatical comments
SaurabhJha,2015-11-15 14:33:18,https://api.github.com/repos/antirez/redis/git/commits/90a3647c9c3d1657c2d2d1d3ff9413789fc43c29,90a3647c9c3d1657c2d2d1d3ff9413789fc43c29,Fix typos in documentation
catwell,2016-06-05 14:22:52,https://api.github.com/repos/antirez/redis/git/commits/d88c3c77beb975c84c23b7586ed6984b4c74b82d,d88c3c77beb975c84c23b7586ed6984b4c74b82d,make RPUSHX and LPUSHX variadic
catwell,2016-06-05 14:09:55,https://api.github.com/repos/antirez/redis/git/commits/b670a1628263cd2655e70ee5c9c947f49fc94647,b670a1628263cd2655e70ee5c9c947f49fc94647,remove unused variable
catwell,2016-06-05 14:06:22,https://api.github.com/repos/antirez/redis/git/commits/3e9c20f63b9649bf2a8ddce8f4743c7fb5d435b4,3e9c20f63b9649bf2a8ddce8f4743c7fb5d435b4,"untangle LINSERT and {L,R}PUSHX implementations"
catwell,2016-06-05 13:34:43,https://api.github.com/repos/antirez/redis/git/commits/188d90fc87002cdf89f1ce3b359a24edad39fa46,188d90fc87002cdf89f1ce3b359a24edad39fa46,fix some compiler warnings
yossigo,2016-06-05 10:27:38,https://api.github.com/repos/antirez/redis/git/commits/87312ff7810a67d6ef6ff38745242dab128aa95b,87312ff7810a67d6ef6ff38745242dab128aa95b,Fix MODULE UNLOAD crash and/or wrong error message.
yossigo,2016-06-05 10:18:24,https://api.github.com/repos/antirez/redis/git/commits/cc58f11ccc295cbe6b96eb47e4c01627ca718252,cc58f11ccc295cbe6b96eb47e4c01627ca718252,Use RedisModuleString for OnLoad argv.
yossigo,2016-06-05 07:03:34,https://api.github.com/repos/antirez/redis/git/commits/2bd13cf0eb9b2369ade0ec495a2d9e2c2a3be680,2bd13cf0eb9b2369ade0ec495a2d9e2c2a3be680,Allow passing arguments to modules on load.
antirez,2016-06-04 10:55:39,https://api.github.com/repos/antirez/redis/git/commits/550fa7e14fd1a5402fc6daace9c7026aca028091,550fa7e14fd1a5402fc6daace9c7026aca028091,modules API.md updated.
antirez,2016-06-04 10:54:18,https://api.github.com/repos/antirez/redis/git/commits/c3f5b6ebf9dc8a1c90bf2a13e617d558e75269fd,c3f5b6ebf9dc8a1c90bf2a13e617d558e75269fd,"Modules: native types doc, 70% done."
antirez,2016-06-03 16:32:32,https://api.github.com/repos/antirez/redis/git/commits/5830d8821b81532a958efbe3737ad46c29a8cfde,5830d8821b81532a958efbe3737ad46c29a8cfde,Modules: pool allocator doc.
antirez,2016-06-03 16:19:25,https://api.github.com/repos/antirez/redis/git/commits/31eb8eccef2b68d509eccbc45ef3cf052d64aa57,31eb8eccef2b68d509eccbc45ef3cf052d64aa57,Modules: top comments in helloworld.c and hellotype.c.
antirez,2016-05-18 09:45:40,https://api.github.com/repos/antirez/redis/git/commits/8ec28002be78ee890211265bef4f0b1207627fb4,8ec28002be78ee890211265bef4f0b1207627fb4,Modules: support for modules native data types.
antirez,2016-06-01 18:18:28,https://api.github.com/repos/antirez/redis/git/commits/27e5f385c1839157574b80f2079d79bf40e32639,27e5f385c1839157574b80f2079d79bf40e32639,RDB v8: fix rdbLoadLen() return value.
antirez,2016-06-01 09:55:47,https://api.github.com/repos/antirez/redis/git/commits/e6554bed92d7468fd42e525b04a0169af158c957,e6554bed92d7468fd42e525b04a0169af158c957,RDB v8: new ZSET storage format with binary doubles.
antirez,2016-06-01 09:35:47,https://api.github.com/repos/antirez/redis/git/commits/4aae4f7d3526320aad0e7bcaf071d85910d933b6,4aae4f7d3526320aad0e7bcaf071d85910d933b6,RDB v8: ability to save uint64_t lengths.
antirez,2016-05-31 14:43:49,https://api.github.com/repos/antirez/redis/git/commits/b64fcbc74c93d45ec1ab46909be9145dd261373f,b64fcbc74c93d45ec1ab46909be9145dd261373f,"Test: run GEO tests by default.

Thanks to @oranagra for noticing it was missing."
antirez,2016-05-31 14:43:21,https://api.github.com/repos/antirez/redis/git/commits/231c9db1b512b491c0082f503df066daac006027,231c9db1b512b491c0082f503df066daac006027,Now that SPOP can be called by scripts use BLPOP on 's' flag test.
antirez,2016-05-31 09:52:07,https://api.github.com/repos/antirez/redis/git/commits/2503acfc83753e78045346c4b4993d5d34cf57d2,2503acfc83753e78045346c4b4993d5d34cf57d2,"Avoid undefined behavior in BITFIELD implementation.

Probably there is no compiler that will actaully break the code or raise
a signal for unsigned -> signed overflowing conversion, still it was
apparently possible to write it in a more correct way.

All tests passing."
antirez,2016-05-30 15:47:23,https://api.github.com/repos/antirez/redis/git/commits/9200312ab64d65a908709dc5dfb0dd1431733b21,9200312ab64d65a908709dc5dfb0dd1431733b21,"Merge pull request #3278 from itamarhaber/patch-8

Allow SPOP from Lua scripts"
antirez,2016-05-30 13:31:19,https://api.github.com/repos/antirez/redis/git/commits/5d4b5fbd6f0105bfac6ec97e29f1f6f142a0b1ac,5d4b5fbd6f0105bfac6ec97e29f1f6f142a0b1ac,"Geo: fix typo in geohashEstimateStepsByRadius().

I'm the author of this line but I can't see a good reason for it to
don't be a typo, a step of 26 should be valid with 52 bits per
coordinate, moreover the line was:

    if (step > 26) step = 25;

So a step of 26 was actually already used, except when one of 27 was
computed (which is invalid) only then it was trimmed to 25 instead of
26.

All tests passing after the change."
antirez,2016-05-30 10:47:28,https://api.github.com/repos/antirez/redis/git/commits/18a513f86d5cd53350c988780b409d37fa438834,18a513f86d5cd53350c988780b409d37fa438834,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2016-05-30 10:45:49,https://api.github.com/repos/antirez/redis/git/commits/4eff3dc4e4a7ee4b45347789e8921fce31848cdb,4eff3dc4e4a7ee4b45347789e8921fce31848cdb,"Fix GEORADIUS wrong output with radius > Earth radius.

Close #3266"
ideal,2016-05-30 08:57:36,https://api.github.com/repos/antirez/redis/git/commits/40671320928502b9e798d67e6246ba0c8c6e8a24,40671320928502b9e798d67e6246ba0c8c6e8a24,fix mistake comment in object.c
wenduo,2016-05-30 08:21:08,https://api.github.com/repos/antirez/redis/git/commits/41dacdbcbefb7e90e78caf695db808833d652c8a,41dacdbcbefb7e90e78caf695db808833d652c8a,bitcount bug:return non-zero value when start > end (both negative)
jamespedwards42,2016-05-29 22:53:24,https://api.github.com/repos/antirez/redis/git/commits/3432061cbb9adc5e5dff5d556195031ae54929c2,3432061cbb9adc5e5dff5d556195031ae54929c2,Fix modules intro typos.
itamarhaber,2016-05-28 17:01:46,https://api.github.com/repos/antirez/redis/git/commits/2866e023f84edcdb8adfc386a849d7b383b669c3,2866e023f84edcdb8adfc386a849d7b383b669c3,"Allow SPOP from Lua scripts

The existing `R` flag appears to be sufficient and there's no apparent reason why the command should be blocked."
MOON-CLJ,2016-05-26 05:10:12,https://api.github.com/repos/antirez/redis/git/commits/aa578446bacd9b6565f40e7daf9eb14d3a6f6edd,aa578446bacd9b6565f40e7daf9eb14d3a6f6edd,fix check when can't send the command to the promoted slave
oranagra,2016-05-24 20:31:36,https://api.github.com/repos/antirez/redis/git/commits/5d96b7ed4ffc1b90195fd4074ead331236e8e28f,5d96b7ed4ffc1b90195fd4074ead331236e8e28f,"check WRONGTYPE in BITFIELD before looping on the operations.

optimization: lookup key only once, and grow at once to the max need
fixes #3259 and #3221, and also an early return if wrongtype is discovered by SET"
oranagra,2016-05-24 11:52:43,https://api.github.com/repos/antirez/redis/git/commits/c4433d2a6aa9deac835c1032d72622ca9d2aadc6,c4433d2a6aa9deac835c1032d72622ca9d2aadc6,"fix crash in BITFIELD GET on non existing key or wrong type see #3259

this was a bug in the recent refactoring: bee963c4459223d874e3294a0d8638a588d33c8e"
oranagra,2016-05-23 10:58:50,https://api.github.com/repos/antirez/redis/git/commits/f3e81de17688e310b7a5ef5108a3a6c8962eb133,f3e81de17688e310b7a5ef5108a3a6c8962eb133,fix georadius returns multiple replies
oranagra,2016-05-23 08:42:21,https://api.github.com/repos/antirez/redis/git/commits/8d9d8d16e4216207f4c58d4c41bb33f8eea399ff,8d9d8d16e4216207f4c58d4c41bb33f8eea399ff,CLIENT error message was out of date
antirez,2016-05-22 21:32:03,https://api.github.com/repos/antirez/redis/git/commits/8c4f4d12d856e57534277c1737d7cb07890bbe63,8c4f4d12d856e57534277c1737d7cb07890bbe63,"Merge pull request #3249 from badboy/rcli-debug-printing

Remove debug printing"
oranagra,2016-05-22 17:35:14,https://api.github.com/repos/antirez/redis/git/commits/5fa711fa3749eb2605ff02e1dd08d62e3fc56f0e,5fa711fa3749eb2605ff02e1dd08d62e3fc56f0e,"config set list-max-ziplist-size didn't support negative values, unlike config file"
badboy,2016-05-21 11:50:01,https://api.github.com/repos/antirez/redis/git/commits/892565f924c53ead19f90afc5f652d20ca6e69c8,892565f924c53ead19f90afc5f652d20ca6e69c8,Remove debug printing
dvirsky,2016-05-19 10:51:55,https://api.github.com/repos/antirez/redis/git/commits/137fd86a6133b4a83c2a95215241c9906ec6877f,137fd86a6133b4a83c2a95215241c9906ec6877f,optimized amFree even further
dvirsky,2016-05-19 09:16:14,https://api.github.com/repos/antirez/redis/git/commits/46b07cbb5c52a6a9321ab8c2134d3c6be9ddae86,46b07cbb5c52a6a9321ab8c2134d3c6be9ddae86,Optimized autoMemoryFreed loop
antirez,2016-05-18 15:48:06,https://api.github.com/repos/antirez/redis/git/commits/b09a6b6a5d7c7c2de81325b3c1ab687536059009,b09a6b6a5d7c7c2de81325b3c1ab687536059009,"Fix modules compilation when libc malloc is used.

Compiling Redis worked as a side effect of jemalloc target specifying
-ldl as needed linker options, otherwise it is not provided during
linking and dlopen() API will remain unresolved symbols."
antirez,2016-05-18 14:50:53,https://api.github.com/repos/antirez/redis/git/commits/bafed3ddd65eb1537a9239111777563ed5e3edcf,bafed3ddd65eb1537a9239111777563ed5e3edcf,"Merge pull request #3222 from oranagra/more_minir_fixes

minor fixes - mainly signalModifiedKey, and GEORADIUS"
antirez,2016-05-18 14:17:46,https://api.github.com/repos/antirez/redis/git/commits/e3edae957b7c4d5f1194828bf342397bc9fa6515,e3edae957b7c4d5f1194828bf342397bc9fa6515,"Modules: RM_HashSet() SDS ownership business clarified in comments.

Related to #3239."
antirez,2016-05-18 14:15:15,https://api.github.com/repos/antirez/redis/git/commits/01a83d0a2ae1450118b2230d47c613bb9fc07952,01a83d0a2ae1450118b2230d47c613bb9fc07952,"Merge pull request #3239 from dvirsky/fix_hashset_crash

fixed bad transfer of ownership in HashSet causing a potential crash"
antirez,2016-05-18 13:35:17,https://api.github.com/repos/antirez/redis/git/commits/bee963c4459223d874e3294a0d8638a588d33c8e,bee963c4459223d874e3294a0d8638a588d33c8e,Code to access object string bytes repeated 3x refactored into 1 function.
antirez,2016-05-18 13:23:18,https://api.github.com/repos/antirez/redis/git/commits/ffd1600ccfce01526d4b4be578b1e3bf3e851433,ffd1600ccfce01526d4b4be578b1e3bf3e851433,Clarify that the LOG_STR_SIZE includes null term.
antirez,2016-05-18 12:53:53,https://api.github.com/repos/antirez/redis/git/commits/4c9c9d726aab135a3eb9cf6f7b1718c408386c33,4c9c9d726aab135a3eb9cf6f7b1718c408386c33,"Merge pull request #3221 from oranagra/bitfield_fix

fix crash in BITFIELD GET when key is integer encoded"
antirez,2016-05-18 12:53:30,https://api.github.com/repos/antirez/redis/git/commits/078f46126cb7a0549f2cc5b5d7f76d1d8edc8a80,078f46126cb7a0549f2cc5b5d7f76d1d8edc8a80,Test for BITFIELD regression #3221.
antirez,2016-05-18 09:59:37,https://api.github.com/repos/antirez/redis/git/commits/c6c86ea05df9cd4681718578560107ba16db3680,c6c86ea05df9cd4681718578560107ba16db3680,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2016-05-18 09:58:36,https://api.github.com/repos/antirez/redis/git/commits/968e838417acaa14570b870d992c0e795ee14eeb,968e838417acaa14570b870d992c0e795ee14eeb,"Actually use --with-lg-quantum=3 to build jemalloc.

This change is documented in deps/README.md but was lost in one way or
the other, neutralizing the benefits of 24 bytes size classes (and
others).

Close #3208."
whatacold,2016-05-18 08:39:52,https://api.github.com/repos/antirez/redis/git/commits/0f36e5e5d8031496a07cde241d2c932d1e73ea38,0f36e5e5d8031496a07cde241d2c932d1e73ea38,fix the wrong description of intsetGet().
dvirsky,2016-05-17 13:47:36,https://api.github.com/repos/antirez/redis/git/commits/cfaef8d5d494dc199117cb7a6841dfbdc43dd22e,cfaef8d5d494dc199117cb7a6841dfbdc43dd22e,fixed bad transfer of ownership in HashSet causing a potential crash
antirez,2016-05-17 07:49:11,https://api.github.com/repos/antirez/redis/git/commits/b1b1f4e8e8078c06c7fc21a48032cc7e8d50f279,b1b1f4e8e8078c06c7fc21a48032cc7e8d50f279,"Merge pull request #3238 from oranagra/struct_fix

reduce struct padding by reordering members"
oranagra,2016-05-16 17:12:11,https://api.github.com/repos/antirez/redis/git/commits/283a8125cb85524ce6df6ac9b4edbda23124d95d,283a8125cb85524ce6df6ac9b4edbda23124d95d,reduce struct padding by reordering members
antirez,2016-05-14 17:41:58,https://api.github.com/repos/antirez/redis/git/commits/9aff5640459ac2b882a1619dd0630460c6a6b0c0,9aff5640459ac2b882a1619dd0630460c6a6b0c0,Modules: initial pool allocator and a LEFTPAD usage example.
MichielDeMey,2016-05-13 09:47:55,https://api.github.com/repos/antirez/redis/git/commits/af1e63c36564ea935d13da22522523b064fe5906,af1e63c36564ea935d13da22522523b064fe5906,"Allow non-interactive execution of install_server

This PR adds the ability to execute the installation script non-interactively, useful for automated provisioning scripts such as Chef, Puppet, Ansible, Salt, etc.
Simply feed the environment variables into the install script to skip the prompts.

For debug and verification purposes, the script will still output the selected config variables.
The plus side is that the environment variables also support command substitution (see REDIS_EXECUTABLE).

```
sudo REDIS_PORT=1234 REDIS_CONFIG_FILE=/etc/redis/1234.conf REDIS_LOG_FILE=/var/log/redis_1234.log REDIS_DATA_DIR=/var/lib/redis/1234 REDIS_EXECUTABLE=`command -v redis-server` ./utils/install_server.sh

Welcome to the redis service installer
This script will help you easily set up a running redis server

Selected config:
Port           : 1234
Config file    : /etc/redis/1234.conf
Log file       : /var/log/redis_1234.log
Data dir       : /var/lib/redis/1234
Executable     : /usr/local/bin/redis-server
Cli Executable : /usr/local/bin/redis-cli
Copied /tmp/1234.conf => /etc/init.d/redis_1234
Installing service...
Successfully added to chkconfig!
Successfully added to runlevels 345!
Starting Redis server...
Installation successful!
```"
antirez,2016-05-10 16:54:58,https://api.github.com/repos/antirez/redis/git/commits/646c958bbd506839f02dbe8801275e11e2657955,646c958bbd506839f02dbe8801275e11e2657955,Modules: doc layout improved.
antirez,2016-05-10 13:50:21,https://api.github.com/repos/antirez/redis/git/commits/745845df0a0c5b2424122e03ac6d5783d235b849,745845df0a0c5b2424122e03ac6d5783d235b849,Modules doc: mention the functions not yet documented.
oranagra,2016-05-10 08:19:45,https://api.github.com/repos/antirez/redis/git/commits/77a91442452548e901c2830c7e6b77c4e542d4bb,77a91442452548e901c2830c7e6b77c4e542d4bb,fix crash in BITFIELD GET when key is integer encoded
antirez,2016-05-09 22:38:48,https://api.github.com/repos/antirez/redis/git/commits/5daece2ec6fae603742538284422ed416f021b2f,5daece2ec6fae603742538284422ed416f021b2f,RM_ZsetRangeNext()/Prev() typo in define name leading to crash fixed.
antirez,2016-05-04 14:12:37,https://api.github.com/repos/antirez/redis/git/commits/5f977c3f8b5425ba57afaca728482c944b1986f8,5f977c3f8b5425ba57afaca728482c944b1986f8,Modules: commandFlagsFromString() top comment back to 80 cols max.
antirez,2016-05-04 14:01:49,https://api.github.com/repos/antirez/redis/git/commits/ef2b4f64967706197c64ce95c1638f57672c678f,ef2b4f64967706197c64ce95c1638f57672c678f,Trailing spaces removed from moduleCreateArgvFromUserFormat().
antirez,2016-05-03 12:32:39,https://api.github.com/repos/antirez/redis/git/commits/6250a6b11f96926e11bbc083615e09d93488c653,6250a6b11f96926e11bbc083615e09d93488c653,Modules: RM_GetClientId() implemented.
dvirsky,2016-04-29 15:58:09,https://api.github.com/repos/antirez/redis/git/commits/9a71df505cd254a03c1a17e14d7d1dd3a7c77020,9a71df505cd254a03c1a17e14d7d1dd3a7c77020,fixed crash when calling CreateStringFromCallReply on array elements
itamarhaber,2016-04-25 08:41:29,https://api.github.com/repos/antirez/redis/git/commits/3816f16a53d32e373182e662d1f38fa238a85628,3816f16a53d32e373182e662d1f38fa238a85628,Avoids reallocating and double String on truncate
dvirsky,2016-04-28 10:38:38,https://api.github.com/repos/antirez/redis/git/commits/d41bd233d559df1b2c00395712638fb571b6c478,d41bd233d559df1b2c00395712638fb571b6c478,fixed comment formatting in RM_CreateCommand
ramonsnir,2016-04-28 10:30:57,https://api.github.com/repos/antirez/redis/git/commits/909a707b720335eff2512f7ddc094144746c4817,909a707b720335eff2512f7ddc094144746c4817,vector of strings is implemented now
dvirsky,2016-04-28 10:12:09,https://api.github.com/repos/antirez/redis/git/commits/a00e8725604ffdc9efed550dc64bd6ea47d684e8,a00e8725604ffdc9efed550dc64bd6ea47d684e8,another small comment fix
dvirsky,2016-04-28 10:10:00,https://api.github.com/repos/antirez/redis/git/commits/87de31f9687594965b2fe60c7c2fffa90a0b3fc7,87de31f9687594965b2fe60c7c2fffa90a0b3fc7,fixed comment
dvirsky,2016-04-28 09:50:55,https://api.github.com/repos/antirez/redis/git/commits/8fc67080a2448298d13af3f7d6bbbee4bc9e64fb,8fc67080a2448298d13af3f7d6bbbee4bc9e64fb,second attempt at vector formtting
antirez,2016-04-28 06:45:47,https://api.github.com/repos/antirez/redis/git/commits/7f5e1340f9bf6e1566be630f424accdb2ad0aed7,7f5e1340f9bf6e1566be630f424accdb2ad0aed7,Modules: add ZADD_INCR flag to zset increment API.
itamarhaber,2016-04-27 19:16:44,https://api.github.com/repos/antirez/redis/git/commits/1186f92b1bb54e83c094783a41263b42616ebe41,1186f92b1bb54e83c094783a41263b42616ebe41,typo: %s/Emtpy/Empty/g
antirez,2016-04-27 16:09:31,https://api.github.com/repos/antirez/redis/git/commits/227d68094bce9f4feec54cd9c3d336a01c705b38,227d68094bce9f4feec54cd9c3d336a01c705b38,Modules: command <-> core interface modified to get flags & keys.
ramonsnir,2016-04-26 19:34:41,https://api.github.com/repos/antirez/redis/git/commits/676a6a4d194eb1397b4880603bce210e3676a65c,676a6a4d194eb1397b4880603bce210e3676a65c,tiny typo in Redis Modules API documentation
dvirsky,2016-04-26 15:06:20,https://api.github.com/repos/antirez/redis/git/commits/a1f8e22b790c8a392b8f6550b61226fa237f3314,a1f8e22b790c8a392b8f6550b61226fa237f3314,fixed return value of HashGet (and a slight error in the documentation)
antirez,2016-04-26 09:29:34,https://api.github.com/repos/antirez/redis/git/commits/02c4a6c7f9b86cac0a79aeb5cda2b7e63f048636,02c4a6c7f9b86cac0a79aeb5cda2b7e63f048636,Modules: REDISMODULE_POSTPONED_ARRAY_LEN doc.
antirez,2016-04-25 15:13:15,https://api.github.com/repos/antirez/redis/git/commits/42f72210fdadcc348d0fc186d7489da5d39e848c,42f72210fdadcc348d0fc186d7489da5d39e848c,Modules: Hash API defines made more uniform.
antirez,2016-04-25 15:09:26,https://api.github.com/repos/antirez/redis/git/commits/9b0556cf10dbd646bd011ccffcf619732b9dbef1,9b0556cf10dbd646bd011ccffcf619732b9dbef1,Modules: Hash type API WIP #2.
antirez,2016-04-25 13:39:33,https://api.github.com/repos/antirez/redis/git/commits/10993ca0d51e21ff2dc68de9dce56ce2becb0e0c,10993ca0d51e21ff2dc68de9dce56ce2becb0e0c,Modules: Hash type API WIP #1.
antirez,2016-04-25 08:39:02,https://api.github.com/repos/antirez/redis/git/commits/5bf5fd24c6054ccecb068f2a74c9c84aa2f2d79f,5bf5fd24c6054ccecb068f2a74c9c84aa2f2d79f,Modules: a few fixes for the zset iterator.
antirez,2016-04-21 12:02:42,https://api.github.com/repos/antirez/redis/git/commits/33e1231e533168915f006f2b39751b7013247a2d,33e1231e533168915f006f2b39751b7013247a2d,Modules: postponed array lengths.
antirez,2016-04-21 09:45:52,https://api.github.com/repos/antirez/redis/git/commits/00109e111339221c414e340f191bcd47037d0e4c,00109e111339221c414e340f191bcd47037d0e4c,Modules: zset lex iterator #3.
antirez,2016-04-21 09:17:00,https://api.github.com/repos/antirez/redis/git/commits/db3ade22eb553d743bb4667c1b864201a574bb9d,db3ade22eb553d743bb4667c1b864201a574bb9d,Modules: zset lex iterator #2.
antirez,2016-04-21 07:27:13,https://api.github.com/repos/antirez/redis/git/commits/2b04f86ae567bf245235f8be456542150affb6ea,2b04f86ae567bf245235f8be456542150affb6ea,Modules: zset lex iterator #1.
antirez,2016-04-20 21:01:40,https://api.github.com/repos/antirez/redis/git/commits/083f5277c55951853570ffe0fd7ec56e9069f610,083f5277c55951853570ffe0fd7ec56e9069f610,Modules: zset iterator redesign #1.
antirez,2016-04-20 17:06:19,https://api.github.com/repos/antirez/redis/git/commits/d998170809f7474c3cb9fedc2ec266eaea39fa6c,d998170809f7474c3cb9fedc2ec266eaea39fa6c,Simple Ruby script to generate reference doc added.
antirez,2016-04-20 11:31:31,https://api.github.com/repos/antirez/redis/git/commits/0fd6d548cac3db5718547a440b92a6811bdde504,0fd6d548cac3db5718547a440b92a6811bdde504,Modules: fix top comments to be user-facing doc quality. About 33% done.
antirez,2016-04-20 10:38:14,https://api.github.com/repos/antirez/redis/git/commits/f362f7a18a64a21e2feef3851d6c6b4dee06de50,f362f7a18a64a21e2feef3851d6c6b4dee06de50,Modules: sorted set iterators WIP #3.
antirez,2016-04-19 15:12:48,https://api.github.com/repos/antirez/redis/git/commits/bdbb5a0253bc2d01c60391273001bf6242350fcb,bdbb5a0253bc2d01c60391273001bf6242350fcb,Modules: put zset iterator current element in auto memory pool.
antirez,2016-04-19 15:02:24,https://api.github.com/repos/antirez/redis/git/commits/6eeeda39e9ed9e6f26c5fd74d180b132c7ee972e,6eeeda39e9ed9e6f26c5fd74d180b132c7ee972e,Modules: sorted set iterators WIP #2.
antirez,2016-04-19 13:22:33,https://api.github.com/repos/antirez/redis/git/commits/eac5a13cb7f3c7bbcb16a6a5bc2080821d591663,eac5a13cb7f3c7bbcb16a6a5bc2080821d591663,Modules: sorted set iterators WIP.
antirez,2016-04-18 10:25:34,https://api.github.com/repos/antirez/redis/git/commits/556d593d37e751b562d02a9180e06d262d4a1e55,556d593d37e751b562d02a9180e06d262d4a1e55,Remove useless space.
antirez,2016-04-15 13:35:11,https://api.github.com/repos/antirez/redis/git/commits/d5ecedd18574cbafe1d2070ff67d9308f9106bad,d5ecedd18574cbafe1d2070ff67d9308f9106bad,Modules: ZSET API WIP #4.
antirez,2016-04-15 10:46:56,https://api.github.com/repos/antirez/redis/git/commits/e1b34ecf98c701187473531d3e19cb4b6b737967,e1b34ecf98c701187473531d3e19cb4b6b737967,Modules: ZSET API WIP #3.
antirez,2016-04-14 13:58:49,https://api.github.com/repos/antirez/redis/git/commits/4457e4acbe487779e233747effa481c698789916,4457e4acbe487779e233747effa481c698789916,Modules: ZSET API WIP #2.
antirez,2016-04-14 10:49:16,https://api.github.com/repos/antirez/redis/git/commits/f199504ac933533e6e8c14ed65d727bb597ecb8d,f199504ac933533e6e8c14ed65d727bb597ecb8d,Modules: ZSET API WIP.
antirez,2016-04-11 15:12:11,https://api.github.com/repos/antirez/redis/git/commits/11b3df24cb77c382c956c845151b1b8f0252c9f2,11b3df24cb77c382c956c845151b1b8f0252c9f2,Modules: expire API and documentation.
antirez,2016-04-11 10:23:04,https://api.github.com/repos/antirez/redis/git/commits/f4e0129fa9c127700bd2193b696d9051f391b2ef,f4e0129fa9c127700bd2193b696d9051f391b2ef,Modules: RedisModule_ReplyWithCallReply().
itamarhaber,2016-04-09 20:25:50,https://api.github.com/repos/antirez/redis/git/commits/6054089fa8f030cb6e43c2dbb6d486d2ad195013,6054089fa8f030cb6e43c2dbb6d486d2ad195013,Stops SPLICE from accepting negative counts
sunheehnus,2016-04-06 14:49:29,https://api.github.com/repos/antirez/redis/git/commits/2e464bf0b110ee225757a5126331a6c25c2317f9,2e464bf0b110ee225757a5126331a6c25c2317f9,modules/RM_StringTruncate: correct reallocate condition
sunheehnus,2016-04-06 14:47:52,https://api.github.com/repos/antirez/redis/git/commits/3a7b1702056673d05916574064fdaf6ae84967b1,3a7b1702056673d05916574064fdaf6ae84967b1,modules/RM_OpenKey: avoid decrRefCount obj twice
sunheehnus,2016-04-06 14:46:22,https://api.github.com/repos/antirez/redis/git/commits/1868dee6f2e1030f2aea9c96d484e8c9403dbfab,1868dee6f2e1030f2aea9c96d484e8c9403dbfab,modules/RM_StringSet: set key->value
sunheehnus,2016-04-06 14:42:24,https://api.github.com/repos/antirez/redis/git/commits/fded8aa4e57c71a27c4b9e4bede49e4db7365d59,fded8aa4e57c71a27c4b9e4bede49e4db7365d59,modules: correct protolen
antirez,2016-04-06 10:34:04,https://api.github.com/repos/antirez/redis/git/commits/4efe9e19c13fca310fe3a28907a082fbf2416fdb,4efe9e19c13fca310fe3a28907a082fbf2416fdb,Add the last break for consistency in moduleCreateCallReplyFromProto.
dvirsky,2016-04-06 09:58:21,https://api.github.com/repos/antirez/redis/git/commits/e453d36e1e3b39c19586340d95eb54fbd6b69ef0,e453d36e1e3b39c19586340d95eb54fbd6b69ef0,fixed case in moduleCreateCallReplyFromProto
dvirsky,2016-04-05 14:02:08,https://api.github.com/repos/antirez/redis/git/commits/ae5cb3f7d5b1f6c6ce38a3cc939cf859f257168c,ae5cb3f7d5b1f6c6ce38a3cc939cf859f257168c,renamed RedisModule_ReplyWithNull to RM_ReplyWithNull to fix compilation
antirez,2016-04-05 13:53:04,https://api.github.com/repos/antirez/redis/git/commits/2967c00c2ca07fdffd938945cbd5467502f879c5,2967c00c2ca07fdffd938945cbd5467502f879c5,Modules: RedisModule_ReplyWithNull() implemented.
dvirsky,2016-04-03 16:04:32,https://api.github.com/repos/antirez/redis/git/commits/e711a9ac450246dce43a778e910fc7327a681db3,e711a9ac450246dce43a778e910fc7327a681db3,fixed the doc with a right function name
yossigo,2016-03-31 18:18:45,https://api.github.com/repos/antirez/redis/git/commits/e443ad9c29ab9ed23a965d129f3b0a2d0e8712d4,e443ad9c29ab9ed23a965d129f3b0a2d0e8712d4,Log loadmodule dlopen() errors.
antirez,2016-03-31 15:43:37,https://api.github.com/repos/antirez/redis/git/commits/85919f80ed675dad7f2bee25018fec2833b8bbde,85919f80ed675dad7f2bee25018fec2833b8bbde,"Modules: avoid conflict between modules func pointers and dynamic symbols.

In modules we fill a set of function pointers defined in redismodule.h,
populating a set of APIs that are callable from the module. We use this
manual process instead of resorting to dynamic linking so that we have
exact control on how we pass the API to the module, and we can even pass
different functions for the same name, depending on the API version
declared by the module.

However if the function pointers in redismodule.h and the functions
defined in module.c have the same name, they conflict since the core
exports the symbols to the module.

There is probably some compiler flags trick to avoid this, but in order
to be safer in the future and be more easily compatible with different
builidng systems, this commit changes the internal function prefix from
RedisModule_ to RM_, so for example:

    RM_StringSet() will be exported as RedisModule_StringSet()"
antirez,2016-03-31 15:02:13,https://api.github.com/repos/antirez/redis/git/commits/6020469452217da57768f0b25dbcf27aba007cc7,6020469452217da57768f0b25dbcf27aba007cc7,Modules: remove warnings due to void/function pointer conversion.
dvirsky,2016-03-31 13:17:33,https://api.github.com/repos/antirez/redis/git/commits/34f2fb7d8c941fad5557d5b6fb7c4562ceb3c32a,34f2fb7d8c941fad5557d5b6fb7c4562ceb3c32a,fixed makefile for linux
antirez,2016-03-06 12:44:24,https://api.github.com/repos/antirez/redis/git/commits/6dead2cff563375543b23c1ecec78a1462ad611a,6dead2cff563375543b23c1ecec78a1462ad611a,Modules: first preview 31 March 2016.
oranagra,2016-05-09 06:12:38,https://api.github.com/repos/antirez/redis/git/commits/9682b616a21b5e675a1ca82109a11d6f4de1d2de,9682b616a21b5e675a1ca82109a11d6f4de1d2de,"minor fixes - mainly signalModifiedKey, and GEORADIUS"
antirez,2016-05-08 16:04:53,https://api.github.com/repos/antirez/redis/git/commits/3b644e82b0cc96113e29672d1551248c9e9db893,3b644e82b0cc96113e29672d1551248c9e9db893,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2016-05-08 16:04:41,https://api.github.com/repos/antirez/redis/git/commits/b44ad302d2337b45a02b6a3e4920089a48292c6d,b44ad302d2337b45a02b6a3e4920089a48292c6d,"Merge pull request #732 from evilpacket/remove_dofile

Removes dofile() from Lua"
antirez,2016-05-07 11:03:25,https://api.github.com/repos/antirez/redis/git/commits/8eb43bf72c2109092e498870869109419e13e895,8eb43bf72c2109092e498870869109419e13e895,"redis-cli: integrate help.h with COMMAND output.

Use the COMMAND output to fill with partial information the built-in
help. This makes redis-cli able to at least complete commands that are
exported by the Redis server it is connected to, but were not available
in the help.h file when the redis-cli binary was compiled."
antirez,2016-05-06 07:12:56,https://api.github.com/repos/antirez/redis/git/commits/f9ee039a76f55df4380c68ad68bcaf9573fd7d09,f9ee039a76f55df4380c68ad68bcaf9573fd7d09,Scripting test: match new error message.
antirez,2016-05-05 21:37:08,https://api.github.com/repos/antirez/redis/git/commits/2205c465ca5e289d1024a8a88bde4cdc75720369,2205c465ca5e289d1024a8a88bde4cdc75720369,Cluster: don't check scripts key slots during AOF loading.
antirez,2016-05-05 16:05:37,https://api.github.com/repos/antirez/redis/git/commits/94dc71ff08e3db4cb035130208470b0646c20a05,94dc71ff08e3db4cb035130208470b0646c20a05,redis-cli: remove debugging message.
antirez,2016-05-05 15:39:40,https://api.github.com/repos/antirez/redis/git/commits/bdbeb07a9ec6b66fd27c39aa4e8811cc980e90e1,bdbeb07a9ec6b66fd27c39aa4e8811cc980e90e1,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2016-05-05 15:35:33,https://api.github.com/repos/antirez/redis/git/commits/68dd1c915549f4660bbcfeae367bb30ebe5989f1,68dd1c915549f4660bbcfeae367bb30ebe5989f1,"Revert ""Fix commandCommand arity""

This reverts commit 1189a4eae6d009fc0da8d50fd542ba1391542165.

Actually this is wrong, the command can be called without args at all."
antirez,2016-05-05 15:26:35,https://api.github.com/repos/antirez/redis/git/commits/f0fcc36ce15554a54aa5d629c2a76ec6e4e3e716,f0fcc36ce15554a54aa5d629c2a76ec6e4e3e716,"Merge pull request #2956 from pkulchenko/global-protection-msg-typo

Update global protection error message"
antirez,2016-05-05 15:16:58,https://api.github.com/repos/antirez/redis/git/commits/f5ff91f675843b132bfee9c0c4b19cc1908cacb9,f5ff91f675843b132bfee9c0c4b19cc1908cacb9,"Merge pull request #2998 from danielhtshih/unstable

Fix a possible race condition of sdown event detection if sentinel's connection to master/slave/sentinel became disconnected just after the last PONG and before the next PING."
antirez,2016-05-05 14:23:47,https://api.github.com/repos/antirez/redis/git/commits/0c1f84f0ea3d7bdbfd4429814e418db4325441e7,0c1f84f0ea3d7bdbfd4429814e418db4325441e7,"Merge pull request #3006 from baishaofei/unstable

fix linux compile Error zmalloc.c:109: error: invalid lvalue in unary `&'"
antirez,2016-05-05 14:21:21,https://api.github.com/repos/antirez/redis/git/commits/7b90815fc3ccade17128a35590a9066fdccfcc6a,7b90815fc3ccade17128a35590a9066fdccfcc6a,"Merge pull request #3008 from badboy/fix-2911

Fix nanosecond conversion"
antirez,2016-05-05 11:57:57,https://api.github.com/repos/antirez/redis/git/commits/02db338a82fe77b3939512d96f3e494948ae7e53,02db338a82fe77b3939512d96f3e494948ae7e53,"redis-cli: don't free historyfile, is used later."
antirez,2016-05-05 09:49:27,https://api.github.com/repos/antirez/redis/git/commits/4c53bab17b936c9875bfd884a30686ed1c438d67,4c53bab17b936c9875bfd884a30686ed1c438d67,Cluster test 12: reshard back just a few slots to speedup the test.
antirez,2016-05-05 09:33:43,https://api.github.com/repos/antirez/redis/git/commits/971e3c51b63e7a5ced6a953bdfd2d9bd53b25e52,971e3c51b63e7a5ced6a953bdfd2d9bd53b25e52,"Cluster: make getNodeByQuery() responsible of -CLUSTERDOWN errors.

This fixes a bug introduced by d827dbf, and makes the code consistent
with the logic of always allowing, while the cluster is down, commands
that don't target any key.

As a side effect the code is also simpler now."
antirez,2016-05-05 08:15:17,https://api.github.com/repos/antirez/redis/git/commits/330715afd824e8022f5f14a5dec9f1905e659d6c,330715afd824e8022f5f14a5dec9f1905e659d6c,"Merge pull request #3039 from itamarhaber/patch-3

Fixes a typo in the comments"
antirez,2016-05-05 08:13:00,https://api.github.com/repos/antirez/redis/git/commits/a4df1568727c5f250a1862ca0beb550e2116048d,a4df1568727c5f250a1862ca0beb550e2116048d,"Merge pull request #3077 from Palethorn/ipv6-redirect-parse

Fix for #3076 Reverse redirect address parse"
antirez,2016-05-05 08:02:42,https://api.github.com/repos/antirez/redis/git/commits/c77b95fd01cb6959005121b91e21037cd3da1c88,c77b95fd01cb6959005121b91e21037cd3da1c88,"Bind both IPv4 and IPv6 or exit with an error by default.

Thanks to @tushar2708 for the PR. I applied a slightly different fix.
Thanks to @cespare for reporting.

Close #3024
Close #3020"
antirez,2016-05-05 07:45:31,https://api.github.com/repos/antirez/redis/git/commits/0bb787d3ad49977ed92dfe711f54494ed0abccdf,0bb787d3ad49977ed92dfe711f54494ed0abccdf,Quick fix to avoid false positive in replica migration test.
c2nes,2016-03-11 20:22:36,https://api.github.com/repos/antirez/redis/git/commits/d827dbfda770d040d23802fb462487eea3699f0b,d827dbfda770d040d23802fb462487eea3699f0b,"Ensure slots are rechecked on EXEC.

Fixes #2515."
antirez,2016-05-05 07:02:25,https://api.github.com/repos/antirez/redis/git/commits/91b4966783cc0c4ec3985806f93606db60158ca7,91b4966783cc0c4ec3985806f93606db60158ca7,"Merge pull request #3188 from therealbill/unstable

maxmemory_policy fix for #3187"
antirez,2016-05-05 06:57:30,https://api.github.com/repos/antirez/redis/git/commits/de3a6736f704704619d8dab6fd967208e859df46,de3a6736f704704619d8dab6fd967208e859df46,"Merge pull request #3193 from sethbergman/patch-1

Fixed typo in README.md"
antirez,2016-05-05 06:56:28,https://api.github.com/repos/antirez/redis/git/commits/09153b912792e0890594532e380fe807f9aaec5b,09153b912792e0890594532e380fe807f9aaec5b,"Merge pull request #3152 from be-hase/fix/check_open_slots

Fix redis-trib.rb"
antirez,2016-05-04 20:41:57,https://api.github.com/repos/antirez/redis/git/commits/b76d27ca74b7e2baadbd3d171969a44eeaeb9d1d,b76d27ca74b7e2baadbd3d171969a44eeaeb9d1d,"Added a tool for generating changelogs automatically.

Sometimes Redis patch releases are released in a matter of weeks or days
one after the other. In order to have less release friction the idea is
to stop writing changelogs by hand, in order to also cover everything
interesting there is to say. Useless things can be deleted manually by
the changelog. Also this gives more credits to contributors since often
in the commit message involved people are cited even when they are not
the authors of the commit."
antirez,2016-05-04 20:34:17,https://api.github.com/repos/antirez/redis/git/commits/b632f7846b97d8485ebeb2454d47000d8815eb98,b632f7846b97d8485ebeb2454d47000d8815eb98,Minor redis-cli wording change in --help output.
antirez,2016-05-04 13:45:38,https://api.github.com/repos/antirez/redis/git/commits/995b9ffe07ee497d0a8c7590e393a2ad2d8365da,995b9ffe07ee497d0a8c7590e393a2ad2d8365da,"Allow CONFIG GET during loading.

Thanks to @oranagra for the idea of allowing CONFIG GET during loading."
antirez,2016-05-04 13:42:14,https://api.github.com/repos/antirez/redis/git/commits/5500c510837aa2106ef53636ff62b5893a71237e,5500c510837aa2106ef53636ff62b5893a71237e,"Command ""r"" flag removed from commands not accessing the key space.

Thanks to @oranagra for the hint about misplaced 'r' flags."
antirez,2016-05-04 10:45:55,https://api.github.com/repos/antirez/redis/git/commits/840ac20855855b134662683ca3e7d9e364d4bca8,840ac20855855b134662683ca3e7d9e364d4bca8,DEBUG command self documentation.
antirez,2016-05-04 07:11:36,https://api.github.com/repos/antirez/redis/git/commits/b5352eea51f2881d13ec4e3e1fa90cea037d4f29,b5352eea51f2881d13ec4e3e1fa90cea037d4f29,"Merge pull request #3191 from oranagra/minor_fix

Minor fixes found during merge and code review"
antirez,2016-05-04 06:59:56,https://api.github.com/repos/antirez/redis/git/commits/2c22f59c3f3d02ffa995bd35ec333bd712718f96,2c22f59c3f3d02ffa995bd35ec333bd712718f96,"Reply with error on negative geo radius.

Thanks to @tidwall for reporting.
Close #3194."
antirez,2016-05-02 16:36:09,https://api.github.com/repos/antirez/redis/git/commits/9c48f28e54336c07d5d7764293e41fe6f753d95d,9c48f28e54336c07d5d7764293e41fe6f753d95d,"Cluster regression test for #3043.

The test works but is very slow so far, since it involves resharding
1/5 of all the cluster slots from master 0 to the other 4 masters and
back into the original master."
antirez,2016-05-02 14:41:56,https://api.github.com/repos/antirez/redis/git/commits/4fdde78c72ac18f51460be9ac96d1d638a969c9d,4fdde78c72ac18f51460be9ac96d1d638a969c9d,"New masters with slots are now targets of migration if others are.

This fixes issue #3043.

Before this fix, after a complete resharding of a master slots
to other nodes, the master remains empty and the slaves migrate away
to other masters with non-zero nodes. However the old master now empty,
is no longer considered a target for migration, because the system has
no way to tell it had slaves in the past.

This fix leaves the algorithm used in the past untouched, but adds a
new rule. When a new or old master which is empty and without slaves,
are assigend with their first slot, if other masters in the cluster have
slaves, they are automatically considered to be targets for replicas
migration."
sethbergman,2016-04-30 16:58:48,https://api.github.com/repos/antirez/redis/git/commits/da26f2bbd2dcf0abe961428b745eb62a98b65715,da26f2bbd2dcf0abe961428b745eb62a98b65715,Fixed typo in README.md
lamby,2016-04-29 15:45:53,https://api.github.com/repos/antirez/redis/git/commits/82ae4f30ed8d2c55c27a465429adee572654bdb2,82ae4f30ed8d2c55c27a465429adee572654bdb2,"Use SOURCE_DATE_EPOCH over unreproducible uname + date calls.

See <https://reproducible-builds.org/specs/source-date-epoch/> for more
details.

Signed-off-by: Chris Lamb <chris@chris-lamb.co.uk>"
therealbill,2016-04-22 15:43:48,https://api.github.com/repos/antirez/redis/git/commits/14086a46ca69f267d909817eb6bbcd1d976d94f2,14086a46ca69f267d909817eb6bbcd1d976d94f2,"fix for #3187

I've renamed maxmemoryToString to evictPolicyToString since that is
more accurate (and easier to mentally connect with the correct data), as
well as updated the function to user server.maxmemory_policy rather than
server.maxmemory. Now with a default config it is actually returning
the correct policy rather than volatile-lru."
bogdanvlviv,2016-04-19 11:43:06,https://api.github.com/repos/antirez/redis/git/commits/5565cc629edcbed650a49444c79340153758824f,5565cc629edcbed650a49444c79340153758824f,fix pidfile in redis.conf
antirez,2016-04-18 10:27:59,https://api.github.com/repos/antirez/redis/git/commits/4cbe0444390b87a0c366d098c066bf9249d7c9fd,4cbe0444390b87a0c366d098c066bf9249d7c9fd,"Merge pull request #3174 from djanowski/fix-zincrby-return-value

Fix ZINCRBY return value."
djanowski,2016-04-18 03:35:54,https://api.github.com/repos/antirez/redis/git/commits/0b4bb502a25fca129907c993c7570c872172461d,0b4bb502a25fca129907c993c7570c872172461d,Fix ZINCRBY return value.
antirez,2016-04-15 13:20:25,https://api.github.com/repos/antirez/redis/git/commits/dda0f37f115ef2d58333df94de05ee0b05b3df59,dda0f37f115ef2d58333df94de05ee0b05b3df59,ZREM refactored into proper API.
antirez,2016-04-15 10:46:18,https://api.github.com/repos/antirez/redis/git/commits/6f926c3e83dd4f0997e5b73bb25b4aa6bb658df2,6f926c3e83dd4f0997e5b73bb25b4aa6bb658df2,ZRANK refactored into proper API.
antirez,2016-04-14 13:58:49,https://api.github.com/repos/antirez/redis/git/commits/b73c7af0f4af95b0feb4afc29d4521d714e9b384,b73c7af0f4af95b0feb4afc29d4521d714e9b384,zsetAdd() API exposed into server.h.
antirez,2016-04-14 10:48:34,https://api.github.com/repos/antirez/redis/git/commits/b1f181a7367a2329e37d96244ecaf65249a7171c,b1f181a7367a2329e37d96244ecaf65249a7171c,ZADD refactored into a proper API.
antirez,2016-04-13 11:58:30,https://api.github.com/repos/antirez/redis/git/commits/e0eb5f6bbf2407c802a231594acb90aa7a6a8e9a,e0eb5f6bbf2407c802a231594acb90aa7a6a8e9a,redis-cli preferences and rc file support.
antirez,2016-04-13 10:35:14,https://api.github.com/repos/antirez/redis/git/commits/70b3314141220bee2ecd73aa9e9ccd8a9a2e855f,70b3314141220bee2ecd73aa9e9ccd8a9a2e855f,redis-cli help.h updated.
antirez,2016-04-13 10:34:14,https://api.github.com/repos/antirez/redis/git/commits/d1ddf7e9585eea836a47847602f7b05038856a49,d1ddf7e9585eea836a47847602f7b05038856a49,redis-cli hints.
antirez,2016-04-12 21:39:18,https://api.github.com/repos/antirez/redis/git/commits/d6e2cc71c6072b013cbca6dd6ee5cdd55620a70d,d6e2cc71c6072b013cbca6dd6ee5cdd55620a70d,Linenoise updated again (hints support).
antirez,2016-04-06 11:37:27,https://api.github.com/repos/antirez/redis/git/commits/8a98b8d0c9e99df9cf83a08cb032657531598e18,8a98b8d0c9e99df9cf83a08cb032657531598e18,"Linenoise updated.

As a side effect, cat commands.txt | redis-cli now is able to handle
lines more than 4096 bytes."
antirez,2016-04-04 12:08:16,https://api.github.com/repos/antirez/redis/git/commits/b9feef9ae893cb5fc90a4e670eb2bb8142083616,b9feef9ae893cb5fc90a4e670eb2bb8142083616,"ae.c: Fix delay until next timer event.

This fix was written by Anthony LaTorre.
The old code mis-calculated the amount of time to wait till next event."
antirez,2016-04-04 10:23:10,https://api.github.com/repos/antirez/redis/git/commits/ace780c00252b7ab9d3296443b2b9572dfb40af2,ace780c00252b7ab9d3296443b2b9572dfb40af2,ae.c: comment to explain why we have a useless maxId check.
antirez,2016-01-08 14:05:14,https://api.github.com/repos/antirez/redis/git/commits/67b70a18130bb22663494689b19db5b47cfed4fd,67b70a18130bb22663494689b19db5b47cfed4fd,"Fix ae.c to avoid timers infinite loop.

This fix was suggested by Anthony LaTorre, that provided also a good
test case that was used to verify the fix.

The problem with the old implementation is that, the time returned by
a timer event (that is the time after it want to run again) is added
to the event *start time*. So if the event takes, in order to run, more
than the time it says it want to be scheduled again for running, an
infinite loop is triggered."
be-hase,2016-03-30 14:09:36,https://api.github.com/repos/antirez/redis/git/commits/cad9ea5c68fa0b36c1620aa35fe5a946c0a84ced,cad9ea5c68fa0b36c1620aa35fe5a946c0a84ced,fix variable
be-hase,2016-03-30 12:56:22,https://api.github.com/repos/antirez/redis/git/commits/d5aa7e2abe0d832fcad348caff99d006f2ab7740,d5aa7e2abe0d832fcad348caff99d006f2ab7740,fix check_open_slots
antirez,2016-03-02 16:22:42,https://api.github.com/repos/antirez/redis/git/commits/28c291c55c35b8acaedffbb7eb98b3fc175e1237,28c291c55c35b8acaedffbb7eb98b3fc175e1237,BITFIELD: overflow wrap behavior fuzz tester.
antirez,2016-03-02 15:31:02,https://api.github.com/repos/antirez/redis/git/commits/ae7317e8e9a5f530508d171f3307021d20dbef9f,ae7317e8e9a5f530508d171f3307021d20dbef9f,BITFIELD basic unit tests.
antirez,2016-03-02 15:20:28,https://api.github.com/repos/antirez/redis/git/commits/fc843784c340865f105fa8da37001f044a613829,fc843784c340865f105fa8da37001f044a613829,BITFIELD: Farest bit set is offset+bits-1. Off by one error fixed.
antirez,2016-03-02 14:15:18,https://api.github.com/repos/antirez/redis/git/commits/9a00da0d1470f83fa5927ac05923ef207fd19f64,9a00da0d1470f83fa5927ac05923ef207fd19f64,BITFIELD: overflow fuzzy testing.
antirez,2016-03-02 14:14:53,https://api.github.com/repos/antirez/redis/git/commits/27fc01a7b864572b85f64aad5efffb7199ec0dba,27fc01a7b864572b85f64aad5efffb7199ec0dba,Fix typo in bitops.tcl comment.
antirez,2016-03-02 14:13:45,https://api.github.com/repos/antirez/redis/git/commits/fe64960ad5dfea17c8f22cb10a7f4fdaf4fff4b7,fe64960ad5dfea17c8f22cb10a7f4fdaf4fff4b7,"More BITFIELD fixes. Overflow conditional simplified.

See issue #3114."
antirez,2016-03-02 14:12:38,https://api.github.com/repos/antirez/redis/git/commits/235f55344b2474eaac0951a6183b79edb6be739a,235f55344b2474eaac0951a6183b79edb6be739a,"Merge pull request #3118 from sunheehnus/bitfield-fix-minor-bug

bitops/bitfield: fix length, overflow condition and *sign"
sunheehnus,2016-03-02 10:11:30,https://api.github.com/repos/antirez/redis/git/commits/93cc8baf1ae5e3d028b4847b711b07c7e20cef4c,93cc8baf1ae5e3d028b4847b711b07c7e20cef4c,"bitops/bitfield: fix length, overflow condition and *sign"
antirez,2016-03-02 07:51:27,https://api.github.com/repos/antirez/redis/git/commits/e85d6f22cf2ddb2a4a5de80b211802bdacbf4a3b,e85d6f22cf2ddb2a4a5de80b211802bdacbf4a3b,"Fix INFO commandstats reporting when argv is rewritten.

We want to report the original command in the stats, for example GEOADD,
even when what is actually executed is the ZADD implementation."
antirez,2016-02-29 08:08:46,https://api.github.com/repos/antirez/redis/git/commits/32289d57194f2173dda5089a773f3ea4c4dd0c7a,32289d57194f2173dda5089a773f3ea4c4dd0c7a,BITFIELD: refactoring & fix of retval on FAIL.
antirez,2016-02-26 14:53:29,https://api.github.com/repos/antirez/redis/git/commits/11745e09810a531093b527d6161cbfc2ddd6ac91,11745e09810a531093b527d6161cbfc2ddd6ac91,BITFIELD: Fix #<index> form parsing.
antirez,2016-02-26 14:16:24,https://api.github.com/repos/antirez/redis/git/commits/2800d090a7ca705b3dc03ae508511cea6bad650d,2800d090a7ca705b3dc03ae508511cea6bad650d,BITFIELD: Support #<index> offsets form.
antirez,2016-02-25 22:31:45,https://api.github.com/repos/antirez/redis/git/commits/70af626d613ebd88123f87a941b0dd3570f9e7d2,70af626d613ebd88123f87a941b0dd3570f9e7d2,"BITFIELD command initial implementation.

The new bitfield command is an extension to the Redis bit operations,
where not just single bit operations are performed, but the array of
bits composing a string, can be addressed at random, not aligned
offsets, with any width unsigned and signed integers like u8, s5, u10
(up to 64 bit signed integers and 63 bit unsigned integers).

The BITFIELD command supports subcommands that can SET, GET, or INCRBY
those arbitrary bit counters, with multiple overflow semantics.

Trivial and credits:

A similar command was imagined a few times in the past, but for
some reason looked a bit far fetched or not well specified.
Finally the command was proposed again in a clear form by
Yoav Steinberg from Redis Labs, that proposed a set of commands on
arbitrary sized integers stored at bit offsets.

Starting from this proposal I wrote an initial specification of a single
command with sub-commands similar to what Yoav envisioned, using short
names for types definitions, and adding control on the overflow.

This commit is the resulting implementation.

Examples:

    BITFIELD mykey OVERFLOW wrap INCRBY i2 10 -1 GET i2 10"
jrouzierinverse,2015-09-19 18:01:10,https://api.github.com/repos/antirez/redis/git/commits/eca0187370c14aa2c126fe07e5310e44c2780a95,eca0187370c14aa2c126fe07e5310e44c2780a95,If the unit of a timeout is seconds treat it a float
antirez,2016-02-19 11:08:24,https://api.github.com/repos/antirez/redis/git/commits/438ae496af66811b4386cc9e101592023adfd103,438ae496af66811b4386cc9e101592023adfd103,"Merge pull request #3101 from itamarhaber/geohumanized

Fixes double conversions in GEO"
itamarhaber,2016-02-18 23:11:30,https://api.github.com/repos/antirez/redis/git/commits/b5149f08684b55a11b158e12770d35d78d44b2f4,b5149f08684b55a11b158e12770d35d78d44b2f4,Eliminates engineers near the equator & prime meridian
itamarhaber,2016-02-18 23:01:34,https://api.github.com/repos/antirez/redis/git/commits/41030ae2dee2d88451cb0bfe6b6a1b72ea0d84eb,41030ae2dee2d88451cb0bfe6b6a1b72ea0d84eb,Fixes a typo in a comment
itamarhaber,2016-02-18 23:00:39,https://api.github.com/repos/antirez/redis/git/commits/4e9c3027b12b543c8b03d9c92ffd9f148a436469,4e9c3027b12b543c8b03d9c92ffd9f148a436469,Adjusts accuracy for GEODIST
antirez,2016-02-18 21:08:47,https://api.github.com/repos/antirez/redis/git/commits/cf42c48adcea05c1bd4b939fcd36a01f23ec6303,cf42c48adcea05c1bd4b939fcd36a01f23ec6303,"addReplyHumanLongDouble() API added.

Send a long double or double as a bulk reply, in a human friendly
format."
antirez,2016-02-18 13:42:42,https://api.github.com/repos/antirez/redis/git/commits/f4befcc0ffd52fcec776b6e1174b6d6984353a2e,f4befcc0ffd52fcec776b6e1174b6d6984353a2e,GEOADD STORE/STOREDIST tests.
antirez,2016-02-18 09:24:11,https://api.github.com/repos/antirez/redis/git/commits/bb75ecddfdcab4fb530bb9c78088e53b28687816,bb75ecddfdcab4fb530bb9c78088e53b28687816,"New options for GEORADIUS: STORE and STOREDIST.

Related to issue #3019."
antirez,2016-02-17 11:30:00,https://api.github.com/repos/antirez/redis/git/commits/15f37ebd4a3aafe2c7da0b8cff990f70c1a4dd65,15f37ebd4a3aafe2c7da0b8cff990f70c1a4dd65,"Cluster: resharding test provides more state when failing.

Now elements added to lists are incremental numbers in order to
understand, when inconsistencies are found, what is the order in which
the elements were added. Also the error now provides both the expected
and found value."
antirez,2016-02-15 15:14:56,https://api.github.com/repos/antirez/redis/git/commits/b0ec22f948370d46ecbe3cca5dd87082e9a1025e,b0ec22f948370d46ecbe3cca5dd87082e9a1025e,"Include full paths on RDB/AOF files errors.

Close #3086."
antirez,2016-02-10 08:12:17,https://api.github.com/repos/antirez/redis/git/commits/fcd7df5eab40983ca8044c4bb00405f984d877db,fcd7df5eab40983ca8044c4bb00405f984d877db,Remove Lua state reference from buffers in lua_cmsgpack.
antirez,2016-02-10 08:03:29,https://api.github.com/repos/antirez/redis/git/commits/66dbc5e61fb1364e1a4cb9c0f68acabb54dcd7c6,66dbc5e61fb1364e1a4cb9c0f68acabb54dcd7c6,"Merge pull request #3072 from yoav-steinberg/cmsgpack_fix

cmsgpack: pass correct osize values to lua allocator"
Palethorn,2016-02-09 14:04:42,https://api.github.com/repos/antirez/redis/git/commits/c30ffaab05fe7f2ddc5723d9b81382b5c9876d25,c30ffaab05fe7f2ddc5723d9b81382b5c9876d25,"Reverse redirect address parse

Fix issue in case the redirect address is in ipv6 format. Parse from behind to extract last part of the response which represents actual port."
yoav-steinberg,2016-02-07 18:24:28,https://api.github.com/repos/antirez/redis/git/commits/fdbefc9d839c23442f773d340b2a65a03c77b427,fdbefc9d839c23442f773d340b2a65a03c77b427,"cmsgpack: pass correct osize values to lua allocator, update correct buf free space in cmsgpack"
antirez,2016-02-05 14:52:57,https://api.github.com/repos/antirez/redis/git/commits/aa953b6ec3517b74b24e88bb76627faac431e239,aa953b6ec3517b74b24e88bb76627faac431e239,"Merge pull request #3059 from itamarhaber/keyspacenotif-lrem

Adds keyspace notifications for LREM"
itamarhaber,2016-02-03 19:04:09,https://api.github.com/repos/antirez/redis/git/commits/31a70a8bcf01ceb35ccbd2ae1f567ddf45321b2f,31a70a8bcf01ceb35ccbd2ae1f567ddf45321b2f,Fixes a typo
itamarhaber,2016-02-02 17:58:19,https://api.github.com/repos/antirez/redis/git/commits/68e779f34bd7a06397ebea520f5ce43372fad000,68e779f34bd7a06397ebea520f5ce43372fad000,Adds keyspace notifications for lrem
antirez,2016-02-02 10:03:53,https://api.github.com/repos/antirez/redis/git/commits/5b7b2353676c4a5e4afc39e8452e3e6bbbace68c,5b7b2353676c4a5e4afc39e8452e3e6bbbace68c,Fix to Cluster test to support @busport format.
antirez,2016-02-02 07:27:36,https://api.github.com/repos/antirez/redis/git/commits/cbcffed90792ef83bcba3bfcbbd5e64380d1b0b9,cbcffed90792ef83bcba3bfcbbd5e64380d1b0b9,Cluster: redis-trib: support @busport format in ClusterNode.
antirez,2016-02-02 07:20:04,https://api.github.com/repos/antirez/redis/git/commits/b841f3ad1a88e11a9d4abca1c7f0cf9df63e613d,b841f3ad1a88e11a9d4abca1c7f0cf9df63e613d,"Cluster: store busport with different separator in CLUSTER NODES.

We need to be able to correctly parse the node address in the case of
IPv6 addresses."
antirez,2016-02-01 17:16:25,https://api.github.com/repos/antirez/redis/git/commits/92b9de24170d5808992fb69c2f1f021af86aad0f,92b9de24170d5808992fb69c2f1f021af86aad0f,"Cluster announce: WIP, allow building again."
antirez,2016-02-01 17:08:01,https://api.github.com/repos/antirez/redis/git/commits/5ac5e3ebd7da8f041ebd7c4d20020208a3066b2d,5ac5e3ebd7da8f041ebd7c4d20020208a3066b2d,Cluster announce ip/port/bus-port documented in redis.conf.
antirez,2016-02-01 17:01:22,https://api.github.com/repos/antirez/redis/git/commits/e27b9b1cec576a49a46a4d31d96e9d11cfc350f1,e27b9b1cec576a49a46a4d31d96e9d11cfc350f1,Merge branch 'cluster-docker' into unstable
antirez,2016-01-29 11:08:10,https://api.github.com/repos/antirez/redis/git/commits/cdbe8a6ae1f5adac4513c53173124cd0e7cec8d7,cdbe8a6ae1f5adac4513c53173124cd0e7cec8d7,Typo ASII -> ASCII fixed in comment.
antirez,2016-01-29 11:00:38,https://api.github.com/repos/antirez/redis/git/commits/c285862621b2db70ec9152f5e081a091d49a0a45,c285862621b2db70ec9152f5e081a091d49a0a45,"Cluster: include node IDs in SLOTS output.

CLUSTER SLOTS now includes IDs in the nodes description associated with
a given slot range. Certain client libraries implementations need a way
to reference a node in an unique way, so they were relying on CLUSTER
NODES, that is not a stable API and may change frequently depending on
Redis Cluster future requirements."
antirez,2016-01-25 14:19:16,https://api.github.com/repos/antirez/redis/git/commits/d0a8512eda00996c586be8488b50d4133427f3b3,d0a8512eda00996c586be8488b50d4133427f3b3,Cluster anounce-ip/port WIP.
antirez,2016-01-22 15:53:15,https://api.github.com/repos/antirez/redis/git/commits/4abf486ca35468c66f24358a3a77c72bf2849e74,4abf486ca35468c66f24358a3a77c72bf2849e74,Cluster announce port: set port/bport for myself at startup.
antirez,2016-01-22 14:56:15,https://api.github.com/repos/antirez/redis/git/commits/1c038379f7861a6c341c1fedae5ff358f024798f,1c038379f7861a6c341c1fedae5ff358f024798f,Cluster: persist bus port in nodes.conf.
antirez,2016-01-22 12:26:43,https://api.github.com/repos/antirez/redis/git/commits/dc98907e5067c554250f9022ae13d877de971457,dc98907e5067c554250f9022ae13d877de971457,Cluster announce ip: take myself->ip always in sync.
antirez,2016-01-21 15:57:35,https://api.github.com/repos/antirez/redis/git/commits/11436b144980037b75d1c3184d412377dd2e71ab,11436b144980037b75d1c3184d412377dd2e71ab,Cluster announce ip / port initial implementation.
antirez,2016-01-19 14:05:52,https://api.github.com/repos/antirez/redis/git/commits/b0939303e6a9288efaef159cc4a08b656c3b9ff3,b0939303e6a9288efaef159cc4a08b656c3b9ff3,Cluster announce ip / port configuration handling.
antirez,2016-01-19 12:17:20,https://api.github.com/repos/antirez/redis/git/commits/a455e4b94871f6c7c78920859bd9158e690e98d5,a455e4b94871f6c7c78920859bd9158e690e98d5,Cluster: add announce ip field in messages header.
itamarhaber,2016-01-28 19:47:18,https://api.github.com/repos/antirez/redis/git/commits/9e46bf22edc167cd8b573acef1affe0fea50cd81,9e46bf22edc167cd8b573acef1affe0fea50cd81,Fixes a typo
antirez,2016-01-28 12:06:02,https://api.github.com/repos/antirez/redis/git/commits/8870a7e14337a9fe88d40a883f3d67769ce53eb0,8870a7e14337a9fe88d40a883f3d67769ce53eb0,03_test_release.sh: proper cleanup before testing.
antirez,2016-01-19 12:16:24,https://api.github.com/repos/antirez/redis/git/commits/5bbb09ed2c9a6ee1cb34d214d3d2c6744e99158f,5bbb09ed2c9a6ee1cb34d214d3d2c6744e99158f,Cluster: check packets length before accessing far fields.
antirez,2016-01-27 15:27:49,https://api.github.com/repos/antirez/redis/git/commits/751b5666fbbe5c415f6fad64e7f59e24721996be,751b5666fbbe5c415f6fad64e7f59e24721996be,"Sentinel: improve handling of known Sentinel instances.

1. Bug #3035 is fixed (NULL pointer access). This was happening with the
   folling set of conditions:

* For some reason one of the Sentinels, let's call it Sentinel_A, changed ID (reconfigured from scratch), but is as the same address at which it used to be.

* Sentinel_A performs a failover and/or has a newer configuration compared to another Sentinel, that we call, Sentinel_B.

* Sentinel_B receives an HELLO message from Sentinel_A, where the address and/or ID is mismatched, but it is reporting a newer configuration for the master they are both monitoring.

2. Sentinels now must have an ID otherwise they are not loaded nor persisted in the configuration. This allows to have conflicting Sentinels with the same address since now the master->sentinels dictionary is indexed by Sentinel ID.

3. The code now detects if a Sentinel is annoucing itself with an IP/port pair already busy (of another Sentinel). The old Sentinel that had the same port/pair is set as having port 0, that means, the address is invalid. We may discover the right address later via HELLO messages."
antirez,2016-01-26 14:28:22,https://api.github.com/repos/antirez/redis/git/commits/5bc7e019e1519ebb569b2964341c3440ef28645c,5bc7e019e1519ebb569b2964341c3440ef28645c,"Use a smoother running average for avg_ttl in INFO.

Reported here:
https://www.reddit.com/r/redis/comments/42r0i0/avg_ttl_varies_a_lot/"
antirez,2016-01-26 13:21:18,https://api.github.com/repos/antirez/redis/git/commits/fe44a7cb609e1161a47494f3ab71d9e45973fb51,fe44a7cb609e1161a47494f3ab71d9e45973fb51,Cluster: mismatch sender ID log put back at DEBUG level.
antirez,2016-01-26 13:18:13,https://api.github.com/repos/antirez/redis/git/commits/d6c5922f75021fc690feb89b565f87bd1806a8f4,d6c5922f75021fc690feb89b565f87bd1806a8f4,Cluster: fix missing ntohs() call to access gossip section port.
antirez,2016-01-26 11:32:53,https://api.github.com/repos/antirez/redis/git/commits/592419b4ca08fbf125b2ff2afd3289ef3d7b6a68,592419b4ca08fbf125b2ff2afd3289ef3d7b6a68,"Better address udpate strategy when processing gossip sections.

The change covers the case where:

1. There is a node we can't reach (in fail or pfail state).
2. We see a different address for this node, in the gossip section sent
to us by a node that, instead, is able to talk with the node we cannot
talk to.

In this case it's a good bet to switch to the address reported by this
node, since there was an address switch and it is able to talk with the
node and we are not.

However previosuly this was done in a dangerous way, by initiating an
handshake. The handshake, using the MEET packet, forces the receiver to
join our cluster, and this is not a good idea. If the node in question
really just switched address, but is the same node, it already knows about
us, so we just need to perform an address update and a reconnection.

So with this commit instead we just update the address of the node,
release the node link if any, and attempt to reconnect in the next
clusterCron() cycle.

The commit also improves debugging messages printed by Cluster during
address or ID switches."
antirez,2016-01-25 14:24:55,https://api.github.com/repos/antirez/redis/git/commits/22892ce04351474e78c765e6298280c597cd8fb0,22892ce04351474e78c765e6298280c597cd8fb0,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2016-01-19 14:04:17,https://api.github.com/repos/antirez/redis/git/commits/bc1558622a2e8cefadbcf3558415b2285f3423d1,bc1558622a2e8cefadbcf3558415b2285f3423d1,Fix memory leak in masterauth config option loading.
antirez,2016-01-20 15:38:35,https://api.github.com/repos/antirez/redis/git/commits/7837c480e899dfeef96a975b9623517f959e0441,7837c480e899dfeef96a975b9623517f959e0441,"Merge pull request #3023 from itamarhaber/patch-2

Removes an extra space in protected mode message"
itamarhaber,2016-01-20 15:08:28,https://api.github.com/repos/antirez/redis/git/commits/57f8230234870c8db116d7627282b619394f0b01,57f8230234870c8db116d7627282b619394f0b01,Removes an extra space in protected mode message
antirez,2016-01-19 08:53:04,https://api.github.com/repos/antirez/redis/git/commits/83b862a30ee90ee5f85eefcc63ff5241b501f073,83b862a30ee90ee5f85eefcc63ff5241b501f073,"Minor MIGRATE refactoring.

Centralize cleanup of newargv in a single place.
Add more comments to help a bit following a complex function.

Related to issue #3016."
antirez,2016-01-19 08:28:43,https://api.github.com/repos/antirez/redis/git/commits/f5a1e608cc2140a98c51431958b9c274019ffbc5,f5a1e608cc2140a98c51431958b9c274019ffbc5,"More variadic MIGRATE fixes.

Another leak was fixed in the case of syntax error by restructuring the
allocation strategy for the two dynamic vectors.

We also make sure to always close the cached socket on I/O errors so that
all the I/O errors are handled the same, even if we had a previously
queued error of a different kind from the destination server.

Thanks to Kevin McGehee. Related to issue #3016."
antirez,2016-01-18 15:49:21,https://api.github.com/repos/antirez/redis/git/commits/00d3a40f82a9d43a0eca61047e1df5c0d9d10c8e,00d3a40f82a9d43a0eca61047e1df5c0d9d10c8e,"Various fixes to MIGRATE with multiple keys.

In issue #3016 Kevin McGehee identified multiple very serious issues in
the new implementation of MIGRATE. This commit attempts to restructure
the code in oder to avoid mistakes, an analysis of the new
implementation is in progress in order to check for possible edge cases."
antirez,2016-01-15 15:51:18,https://api.github.com/repos/antirez/redis/git/commits/cfc879b5638a4b7442853fa3d4e9d1fd1a60da3a,cfc879b5638a4b7442853fa3d4e9d1fd1a60da3a,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2016-01-15 15:50:35,https://api.github.com/repos/antirez/redis/git/commits/b01b32b3c358ebd261b931409a8988824e7acc6f,b01b32b3c358ebd261b931409a8988824e7acc6f,Test: Handle LOADING in restart_instance.
antirez,2016-01-15 15:24:06,https://api.github.com/repos/antirez/redis/git/commits/8637384191ade8afbe380c10c2596f4dbc1eedbc,8637384191ade8afbe380c10c2596f4dbc1eedbc,"Merge pull request #2726 from seppo0010/patch-2

Fix race condition in unit/introspection"
antirez,2016-01-15 09:19:28,https://api.github.com/repos/antirez/redis/git/commits/5432fc81dbe828aeb9af05549250ffc9557838a0,5432fc81dbe828aeb9af05549250ffc9557838a0,Detect and show crashes on Sentinel/Cluster tests.
antirez,2016-01-14 16:34:49,https://api.github.com/repos/antirez/redis/git/commits/fc3ca8ff8714124901a438cd7277d9e4e1cdae46,fc3ca8ff8714124901a438cd7277d9e4e1cdae46,"Cluster: fix setting nodes slaveof pointer to NULL on node release.

With this commit we preserve the list of nodes that have .slaveof set
to the node, even when the node is turned into a slave, and make sure to
fix the .slaveof pointers to NULL when a node is freed from memory,
regardless of the fact it's a slave or a master.

Basically we try to remember the logical master in the current
configuration even if the logical master advertised it as a slave
already. However we still remember the associations, so that when a node
is freed we can fix them.

This should fix issue #3002."
antirez,2016-01-14 10:58:31,https://api.github.com/repos/antirez/redis/git/commits/a411d557d4e7a0cdda074430ecf2a17d20805003,a411d557d4e7a0cdda074430ecf2a17d20805003,Cluster: clarify node->slave may be NULL.
badboy,2016-01-13 17:22:29,https://api.github.com/repos/antirez/redis/git/commits/15dacfec6f25fe291ce8aaa702c7fabbee9e3d00,15dacfec6f25fe291ce8aaa702c7fabbee9e3d00,"Fix nanosecond conversion

1 microsecond = 1000 nanoseconds
1e3 = 1000
10e3 = 10000"
antirez,2016-01-13 16:30:53,https://api.github.com/repos/antirez/redis/git/commits/f984cef2171f18158ffbfba34f988f559f855bba,f984cef2171f18158ffbfba34f988f559f855bba,"Cluster: fix rebalancing to always empty nodes.

Because of rounding error even with weight=0 sometimes a node was left
with an assigned slot.

Close #3001."
baishaofei,2016-01-13 08:49:28,https://api.github.com/repos/antirez/redis/git/commits/28e80bf96dba35f8937518421a2ee5a3a9c36c4d,28e80bf96dba35f8937518421a2ee5a3a9c36c4d,fix linux compile bug
antirez,2016-01-12 11:15:59,https://api.github.com/repos/antirez/redis/git/commits/152e9f67f885eea48da815412740ccd3029bf46d,152e9f67f885eea48da815412740ccd3029bf46d,Cluster: redis-trib move_to_slot: don't send SETSLOT to slaves.
danielhtshih,2016-01-12 09:06:47,https://api.github.com/repos/antirez/redis/git/commits/e6d970534b41825e9b32504b4e80d0039a389d28,e6d970534b41825e9b32504b4e80d0039a389d28,"Fix a possible race condition of sdown detection if the
connection to master/slave/sentinel decames disconnected just after the last PONG and before the next PING."
antirez,2016-01-11 15:37:33,https://api.github.com/repos/antirez/redis/git/commits/c6e508856aca6863e1e9bec5a09367233ac41aa9,c6e508856aca6863e1e9bec5a09367233ac41aa9,Cluster: fix redis-trib reference of variable in warning.
antirez,2016-01-11 14:39:09,https://api.github.com/repos/antirez/redis/git/commits/02c40c9dc2da2a29c95b9ddfd2a8544dd04aaf11,02c40c9dc2da2a29c95b9ddfd2a8544dd04aaf11,CLUSTER BUMPEPOCH initial implementation fixed.
antirez,2016-01-11 14:04:59,https://api.github.com/repos/antirez/redis/git/commits/e4eb6c7a5dd01f2948eba9b4c1763f7f259159f8,e4eb6c7a5dd01f2948eba9b4c1763f7f259159f8,"Cluster: implement redis-trib fix when slot is open without owners.

Still work to do."
antirez,2016-01-11 14:04:35,https://api.github.com/repos/antirez/redis/git/commits/04ae459bc2e8517ac3e33fc5b28e92b6e7baff6e,04ae459bc2e8517ac3e33fc5b28e92b6e7baff6e,Cluster: implement redis-trib fix for uncovered slots.
antirez,2016-01-11 14:01:14,https://api.github.com/repos/antirez/redis/git/commits/b58796f5208b910f07ffc8e3b11c77e984dc4973,b58796f5208b910f07ffc8e3b11c77e984dc4973,"Cluster: CLUSTER BUMPEPOCH introduced to help redis-trib fix.

Sometimes during ""fixes"" we have to setup a new configuration and assign
slots to nodes. With BUMPEPOCH we can make sure the new configuration of
the node will win if there are conflicting configurations (for example
another node is *also* claiming the same slot because the cluster is
totally messed up)."
antirez,2016-01-11 14:00:45,https://api.github.com/repos/antirez/redis/git/commits/524be1e4656f53c347367fb5c7b1ac7e80b890e9,524be1e4656f53c347367fb5c7b1ac7e80b890e9,Cluster: don't allow CLUSTER SETSLOT with slaves.
antirez,2016-01-08 14:42:43,https://api.github.com/repos/antirez/redis/git/commits/f43c794b0b43b9134385a487e96bcd791bb0472a,f43c794b0b43b9134385a487e96bcd791bb0472a,"Scripting: handle trailing comments.

This fix, provided by Paul Kulchenko (@pkulchenko), allows the Lua
scripting engine to evaluate statements with a trailing comment like the
following one:

    EVAL ""print() --comment"" 0

Lua can't parse the above if the string does not end with a newline, so
now a final newline is always added automatically. This does not change
the SHA1 of scripts since the SHA1 is computed on the body we pass to
EVAL, without the other code we add to register the function.

Close #2951."
antirez,2016-01-08 14:04:16,https://api.github.com/repos/antirez/redis/git/commits/e15e518a674ce75ada1badb3e4fe11c18c255016,e15e518a674ce75ada1badb3e4fe11c18c255016,"Allow MIGRATE to always be called on local keys for open slots.

Extend the MIGRATE extra freedom to be able to be called in the context
of the local slot, anytime there is a slot open in one or the other
direction (importing or migrating). This is useful for redis-trib to fix
the cluster when it has in an odd state.

Thix fix allows ""redis-trib fix"" to make its work in certain cases where
previously an error was reported."
antirez,2016-01-08 11:07:52,https://api.github.com/repos/antirez/redis/git/commits/36704d653bdb26c1e801eac904828242ad37d11c,36704d653bdb26c1e801eac904828242ad37d11c,Fix typos & grammar in clusterBumpConfigEpochWithoutConsensus() comment.
antirez,2016-01-08 08:42:56,https://api.github.com/repos/antirez/redis/git/commits/7c1a5ff3ce540637c5728d7c6269e7821a422f66,7c1a5ff3ce540637c5728d7c6269e7821a422f66,"Lua debugger: support direct calls to SCRIPT DEBUG in redis-cli.

Previously it was possible to activate a debugging session only using
the --ldb option in redis-cli. Now calling SCRIPT DEBUG can also
activate the debugging mode without putting the redis-cli in a
desynchronized state.

Related to #2952."
antirez,2016-01-08 08:14:13,https://api.github.com/repos/antirez/redis/git/commits/a75aa4bf92013445f600297d500fe1852a8532af,a75aa4bf92013445f600297d500fe1852a8532af,"Lua debugger: fix crash printing nested or deep objects.

Example of offending code:

> script debug yes
OK
> eval ""local a = {1} a[1] = a\nprint(a)"" 0
1) * Stopped at 1, stop reason = step over
2) -> 1   local a = {1} a[1] = a
> next
1) * Stopped at 2, stop reason = step over
2) -> 2   print(a)
> print

... server crash ...

Close #2955."
antirez,2016-01-07 21:42:43,https://api.github.com/repos/antirez/redis/git/commits/1e7a8f8221aa37bf2d6454e833b005e2bb9c6465,1e7a8f8221aa37bf2d6454e833b005e2bb9c6465,Another typo in protected mode error message.
antirez,2016-01-07 13:35:07,https://api.github.com/repos/antirez/redis/git/commits/08c7bba32a7195ce04bc132fa4e68573e598552d,08c7bba32a7195ce04bc132fa4e68573e598552d,Fix protected mode error message typo.
antirez,2016-01-07 12:00:08,https://api.github.com/repos/antirez/redis/git/commits/edd4d555df57dc84265fdfb4ef59a4678832f6da,edd4d555df57dc84265fdfb4ef59a4678832f6da,"New security feature: Redis protected mode.

An exposed Redis instance on the internet can be cause of serious
issues. Since Redis, by default, binds to all the interfaces, it is easy
to forget an instance without any protection layer, for error.

Protected mode try to address this feature in a soft way, providing a
layer of protection, but giving clues to Redis users about why the
server is not accepting connections.

When protected mode is enabeld (the default), and if there are no
minumum hints about the fact the server is properly configured (no
""bind"" directive is used in order to restrict the server to certain
interfaces, nor a password is set), clients connecting from external
intefaces are refused with an error explaining what to do in order to
fix the issue.

Clients connecting from the IPv4 and IPv6 lookback interfaces are still
accepted normally, similarly Unix domain socket connections are not
restricted in any way."
antirez,2016-01-06 11:14:49,https://api.github.com/repos/antirez/redis/git/commits/00d637f2cc57f56b13fa6d818f6e4d177be2f972,00d637f2cc57f56b13fa6d818f6e4d177be2f972,"Cluster: don't send -ASK to MIGRATE.

For non existing keys, we don't want to send -ASK redirections to
MIGRATE, since when moving slots from the migrating node to the
importing node, we want just to ignore keys that are no longer there.
They may be expired or deleted between the GETKEYSINSLOT call and the
MIGRATE call. Otherwise this causes an error during migrations with
redis-trib (or equivalent cluster management tools)."
antirez,2016-01-02 12:14:23,https://api.github.com/repos/antirez/redis/git/commits/8b3aa734c9d62271a931b65b28f2e1b7eba1e42b,8b3aa734c9d62271a931b65b28f2e1b7eba1e42b,Cluster test: do leaks detection with OSX leaks utility.
antirez,2016-01-02 12:13:32,https://api.github.com/repos/antirez/redis/git/commits/190babe2df31556500bda417a93eb2d560009d08,190babe2df31556500bda417a93eb2d560009d08,redis-trib: Remove duplicated key in hash initialization.
antirez,2015-12-29 14:27:26,https://api.github.com/repos/antirez/redis/git/commits/b1f84d41fbf7558137a1a4db08ce8b7673c86951,b1f84d41fbf7558137a1a4db08ce8b7673c86951,Cluster/Sentinel test: report ability to run via valgrind.
antirez,2015-12-22 08:00:36,https://api.github.com/repos/antirez/redis/git/commits/075ea1646f9e23ec08495fb43d169055777368cf,075ea1646f9e23ec08495fb43d169055777368cf,"Merge pull request #2954 from pkulchenko/debug-table-pretty-printing

Update pretty printing during debugging to generate valid Lua code for tables"
antirez,2015-12-22 07:59:48,https://api.github.com/repos/antirez/redis/git/commits/f054b4ac4781c5fe5386e8339771f9ce28e24352,f054b4ac4781c5fe5386e8339771f9ce28e24352,"Merge pull request #2957 from pkulchenko/debug-userdata-pretty-printing

Update pretty printing in debugging to generate valid Lua code for userdata-like types."
antirez,2015-12-18 14:51:39,https://api.github.com/repos/antirez/redis/git/commits/80b70371e8f1e371edfbb6e605cf53ff86863c2f,80b70371e8f1e371edfbb6e605cf53ff86863c2f,Cluster: rebalance now supports --threshold option.
antirez,2015-12-18 11:27:14,https://api.github.com/repos/antirez/redis/git/commits/628af70214c63b5dfcfefec1d4f92bf94ae8399f,628af70214c63b5dfcfefec1d4f92bf94ae8399f,Cluster: redis-trib reshard / rebalance --pipeline support.
antirez,2015-12-18 10:33:49,https://api.github.com/repos/antirez/redis/git/commits/77f849b52f822f201f75257b0e6eb4074ce56a67,77f849b52f822f201f75257b0e6eb4074ce56a67,Cluster: verify slaves consistency after resharding.
antirez,2015-12-17 16:52:11,https://api.github.com/repos/antirez/redis/git/commits/9b4dd92c3bc881dc7b77ab4f95f1ba4bdb6fbaa2,9b4dd92c3bc881dc7b77ab4f95f1ba4bdb6fbaa2,"Cluster: resharding test now checks AOF consistency.

It's a key invariant that when AOF is enabled, after the cluster
reshards, a crash-recovery event causes all the keys to be still fine
with the expected logical content. Now this is part of unit 04."
antirez,2015-12-17 08:39:43,https://api.github.com/repos/antirez/redis/git/commits/bb215375967cea35a1562feedbce97cf0222f811,bb215375967cea35a1562feedbce97cf0222f811,"Fix a race that may lead to the active (slave) client to be freed.

In issue #2948 a crash was reported in processCommand(). Later Oran Agra
(@oranagra) traced the bug (in private chat) in the following sequence
of events:

1. Some maxmemory is set.
2. The slave is the currently active client and is executing PING or
   REPLCONF or whatever a slave can send to its master.
3. freeMemoryIfNeeded() is called since maxmemory is set.
4. flushSlavesOutputBuffers() is called by freeMemoryIfNeeded().
5. During slaves buffers flush, a write error could be encoutered in
   writeToClient() or sendReplyToClient() depending on the version of
   Redis. This will trigger freeClient() against the currently active
   client, so a segmentation fault will likely happen in
   processCommand() immediately after the call to freeMemoryIfNeeded().

There are different possible fixes:

1. Add flags to writeToClient() (recent versions code base) so that
   we can ignore the write errors, and use this flag in
   flushSlavesOutputBuffers(). However this is not simple to do in older
   versions of Redis.
2. Use freeClientAsync() during write errors. This works but changes the
   current behavior of releasing clients ASAP when possible. Normally
   we write to clients during the normal event loop processing, in the
   writable client, where there is no active client, so no care must be
   taken.
3. The fix of this commit: to detect that the current client is no
   longer valid. This fix is a bit ""ad-hoc"", but works across all the
   versions and has the advantage of not changing the remaining
   behavior. Only alters what happens during this race condition,
   hopefully."
antirez,2015-12-17 08:22:16,https://api.github.com/repos/antirez/redis/git/commits/218e522c82fc1e05b3db8ba5f59856e2c29ccdc0,218e522c82fc1e05b3db8ba5f59856e2c29ccdc0,Fix processCommand() comment about return value.
antirez,2015-12-16 16:41:20,https://api.github.com/repos/antirez/redis/git/commits/a1c9c05e17a1d49425ac0d87196fe91869645a08,a1c9c05e17a1d49425ac0d87196fe91869645a08,"Hopefully better memory test on crash.

The old test, designed to do a transformation on the bits that was
invertible, in order to avoid touching the original memory content, was
not effective as it was redis-server --test-memory. The former often
reported OK while the latter was able to spot the error.

So the test was substituted with one that may perform better, however
the new one must backup the memory tested, so it tests memory in small
pieces. This limits the effectiveness because of the CPU caches. However
some attempt is made in order to trash the CPU cache between the fill
and the check stages, but not for the addressing test unfortunately.

We'll see if this test will be able to find errors where the old failed."
antirez,2015-12-16 11:36:29,https://api.github.com/repos/antirez/redis/git/commits/b9aeb9815684aa9a2652f15ec2c6753919aed2c0,b9aeb9815684aa9a2652f15ec2c6753919aed2c0,Suppress harmless warnings.
antirez,2015-12-16 11:31:42,https://api.github.com/repos/antirez/redis/git/commits/ac8f4a6af9334898d816c057e3abe743111da308,ac8f4a6af9334898d816c057e3abe743111da308,memtest.c now can be called as API in non interactive mode.
antirez,2015-12-16 08:13:41,https://api.github.com/repos/antirez/redis/git/commits/30f057d88f9c2a8f29d762b37392e976845fd4fd,30f057d88f9c2a8f29d762b37392e976845fd4fd,Crash report format improvements.
pkulchenko,2015-12-16 04:24:41,https://api.github.com/repos/antirez/redis/git/commits/b754c8e18bbbefc3ea01a7a1939227a67f0ca328,b754c8e18bbbefc3ea01a7a1939227a67f0ca328,Update pretty printing in debugging to generate valid Lua code for userdata-like types.
pkulchenko,2015-12-16 02:15:39,https://api.github.com/repos/antirez/redis/git/commits/3969e9d3df754e604eb7db38eba503be84b3f526,3969e9d3df754e604eb7db38eba503be84b3f526,Update pretty printing in debugging to generate valid Lua code for tables.
pkulchenko,2015-12-16 02:13:09,https://api.github.com/repos/antirez/redis/git/commits/2f3f3fd5e0cb19ea2df5712198dc40f093bd1255,2f3f3fd5e0cb19ea2df5712198dc40f093bd1255,Update global protection error message to fix a typo.
antirez,2015-12-15 17:00:29,https://api.github.com/repos/antirez/redis/git/commits/6db8e8569d7f41fc4450ceef7b7f91819829d4ca,6db8e8569d7f41fc4450ceef7b7f91819829d4ca,Log address causing SIGSEGV.
antirez,2015-12-15 15:08:00,https://api.github.com/repos/antirez/redis/git/commits/8f8c3992ac86993d50a2694f746464b5833a62af,8f8c3992ac86993d50a2694f746464b5833a62af,Cluster: allows abbreviated node IDs with rebalance --weight option.
antirez,2015-12-15 14:48:49,https://api.github.com/repos/antirez/redis/git/commits/9df1ae8808ae52506e348065c241c5367fd88c07,9df1ae8808ae52506e348065c241c5367fd88c07,"Cluster: rebalancing option --simulate, and a fix."
antirez,2015-12-15 11:54:40,https://api.github.com/repos/antirez/redis/git/commits/cba1c29580e6ffa12fdb19b83007050264b4bf87,cba1c29580e6ffa12fdb19b83007050264b4bf87,Cluster: redis-trib rebalance initial implementation.
antirez,2015-12-14 17:14:52,https://api.github.com/repos/antirez/redis/git/commits/3782902bec9c9856d47833a799aca42c62b3cc8b,3782902bec9c9856d47833a799aca42c62b3cc8b,Initial implementation of redis-trib info subcommand.
antirez,2015-12-14 16:57:43,https://api.github.com/repos/antirez/redis/git/commits/9f63e75a07e73f40fec72ef83545f6e7f0438e90,9f63e75a07e73f40fec72ef83545f6e7f0438e90,"Merge pull request #2943 from sunheehnus/issue2855

lua_struct.c/getnum: throw error if overflow happen"
sunheehnus,2015-12-13 05:47:22,https://api.github.com/repos/antirez/redis/git/commits/3a47c8cfb85af1b69cccf30eaaa690e4a23ab20a,3a47c8cfb85af1b69cccf30eaaa690e4a23ab20a,"lua_struct.c/getnum: throw error if overflow happen

Fix issue #2855"
antirez,2015-12-11 17:10:40,https://api.github.com/repos/antirez/redis/git/commits/f0b168e8944af41c4161249040f01ece227cfc0c,f0b168e8944af41c4161249040f01ece227cfc0c,"Cluster: redis-trib: use variadic MIGRATE.

We use the new variadic/pipelined MIGRATE for faster migration.
Testing is not easy because to see the time it takes for a slot to be
migrated requires a very large data set, but even with all the overhead
of migrating multiple slots and to setup them properly, what used to
take 4 seconds (1 million keys, 200 slots migrated) is now 1.6 which is
a good improvement. However the improvement can be a lot larger if:

1. We use large datasets where a single slot has many keys.
2. By moving more than 10 keys per iteration, making this configurable,
   which is planned.

Close #2710
Close #2711"
antirez,2015-12-11 17:09:01,https://api.github.com/repos/antirez/redis/git/commits/4e252e4c099b4d8e160bc196e1a2124d6e0cb79d,4e252e4c099b4d8e160bc196e1a2124d6e0cb79d,MIGRATE: Fix key extraction for new form.
antirez,2015-12-11 13:27:08,https://api.github.com/repos/antirez/redis/git/commits/82fd74a11840903d3b1a39d38b652491217fba3d,82fd74a11840903d3b1a39d38b652491217fba3d,MIGRATE: test more corner cases.
antirez,2015-12-11 13:26:41,https://api.github.com/repos/antirez/redis/git/commits/ac0a7310570c1f2845e531620ca7cc866be3698a,ac0a7310570c1f2845e531620ca7cc866be3698a,MIGRATE: Fix new argument rewriting refcount handling.
antirez,2015-12-11 12:48:41,https://api.github.com/repos/antirez/redis/git/commits/d85fc1e9cfb8fb7496cda524db8808bb1ab9e1e6,d85fc1e9cfb8fb7496cda524db8808bb1ab9e1e6,"MIGRATE: fix replies processing and argument rewriting.

We need to process replies after errors in order to delete keys
successfully transferred. Also argument rewriting was fixed since
it was broken in several ways. Now a fresh argument vector is created
and set if we are acknowledged of at least one key."
antirez,2015-12-11 12:41:58,https://api.github.com/repos/antirez/redis/git/commits/29d680ed5a4143243cc9655aa7360afd5768b989,29d680ed5a4143243cc9655aa7360afd5768b989,Test: pipelined MIGRATE tests added.
antirez,2015-12-11 10:56:45,https://api.github.com/repos/antirez/redis/git/commits/9ebf7a6776503d7c688ad1a2dedb55c71e8c8a82,9ebf7a6776503d7c688ad1a2dedb55c71e8c8a82,Pipelined multiple keys MIGRATE.
antirez,2015-12-11 10:00:27,https://api.github.com/repos/antirez/redis/git/commits/e7945cf839908a513dc49302e1d76f7340a0b887,e7945cf839908a513dc49302e1d76f7340a0b887,Cluster: redis-trib migrate default timeout set to 60 sec.
danmaz74,2015-12-06 21:47:57,https://api.github.com/repos/antirez/redis/git/commits/3d254e05f40ec1a9db94bc7c43262b24f6197a9f,3d254e05f40ec1a9db94bc7c43262b24f6197a9f,redis-trib.rb: --timeout XXXXX option added to fix and reshard commands. Defaults to 15000 milliseconds
antirez,2015-12-11 08:19:06,https://api.github.com/repos/antirez/redis/git/commits/adc2fe69934fae596aee29c49db6acdc203a62d9,adc2fe69934fae596aee29c49db6acdc203a62d9,"Cluster: replica migration with delay.

We wait a fixed amount of time (5 seconds currently) much greater than
the usual Cluster node to node communication latency, before migrating.
This way when a failover occurs, before detecting the new master as a
target for migration, we give the time to its natural slaves (the slaves
of the failed over master) to announce they switched to the new master,
preventing an useless migration operation."
antirez,2015-12-10 11:58:28,https://api.github.com/repos/antirez/redis/git/commits/41db54a5573a04d035156d3a42e30ae5bbce3230,41db54a5573a04d035156d3a42e30ae5bbce3230,"Cluster: more reliable migration tests.

The old version was modeled with two failovers, however after the first
it is possible that another slave will migrate to the new master, since
for some time the new master is not backed by any slave. Probably there
should be some pause after a failover, before the migration. Anyway the
test is simpler in this way, and depends less on timing."
antirez,2015-12-10 08:10:56,https://api.github.com/repos/antirez/redis/git/commits/b55affbc0cba4b33df6fc817d2db945d332fe2da,b55affbc0cba4b33df6fc817d2db945d332fe2da,Cluster: more reliable replicas migration test.
antirez,2015-12-10 07:56:33,https://api.github.com/repos/antirez/redis/git/commits/4159055f8349dcc2df0a77ee777e12ff332fcddb,4159055f8349dcc2df0a77ee777e12ff332fcddb,Remove debugging message left there for error.
antirez,2015-12-09 22:06:44,https://api.github.com/repos/antirez/redis/git/commits/69897f5f30398f313497a695344aa9ed08919441,69897f5f30398f313497a695344aa9ed08919441,unlinkClient(): clear flags according to ops performed.
antirez,2015-12-09 21:52:53,https://api.github.com/repos/antirez/redis/git/commits/e0f22df9950b584569771d486fd4e933432fe395,e0f22df9950b584569771d486fd4e933432fe395,"Fix replicas migration by adding a new flag.

Some time ago I broken replicas migration (reported in #2924).
The idea was to prevent masters without replicas from getting replicas
because of replica migration, I remember it to create issues with tests,
but there is no clue in the commit message about why it was so
undesirable.

However my patch as a side effect totally ruined the concept of replicas
migration since we want it to work also for instances that, technically,
never had slaves in the past: promoted slaves.

So now instead the ability to be targeted by replicas migration, is a
new flag ""migrate-to"". It only applies to masters, and is set in the
following two cases:

1. When a master gets a slave, it is set.
2. When a slave turns into a master because of fail over, it is set.

This way replicas migration targets are only masters that used to have
slaves, and slaves of masters (that used to have slaves... obviously)
and are promoted.

The new flag is only internal, and is never exposed in the output nor
persisted in the nodes configuration, since all the information to
handle it are implicit in the cluster configuration we already have."
antirez,2015-12-03 10:03:20,https://api.github.com/repos/antirez/redis/git/commits/f1472252ebf852de4446e8adc94950e004eb34d2,f1472252ebf852de4446e8adc94950e004eb34d2,Fix typo UNCOMMENT -> COMMENT in example redis.conf.
antirez,2015-12-03 09:34:56,https://api.github.com/repos/antirez/redis/git/commits/acc2336fd189ddf9e97b0fc589c43ae26a1fd153,acc2336fd189ddf9e97b0fc589c43ae26a1fd153,"Centralize slave replication handshake aborting.

Now we have a single function to call in any state of the slave
handshake, instead of using different functions for different states
which is error prone. Change performed in the context of issue #2479 but
does not fix it, since should be functionally identical to the past.
Just an attempt to make replication.c simpler to follow."
antirez,2015-11-28 08:28:35,https://api.github.com/repos/antirez/redis/git/commits/fceaa46dda37a2d4db4e0a48cc1dab3fe208cb2c,fceaa46dda37a2d4db4e0a48cc1dab3fe208cb2c,"Test HINCRBYFLOAT rounding only in x86_64 and when valgrind is not in use.

64 bit double math is not enough to make the test passing, and rounding
to 1.2999999 instead of 1.23 is not an error in the implementation.
Valgrind and sometimes other archs are not able to work with 80 bit
doubles."
antirez,2015-11-28 08:05:41,https://api.github.com/repos/antirez/redis/git/commits/96628cc40df778716b70f4b661ceb1bd329591dd,96628cc40df778716b70f4b661ceb1bd329591dd,"fix sprintf and snprintf format string

There are some cases of printing unsigned integer with %d conversion
specificator and vice versa (signed integer with %u specificator).

Patch by Sergey Polovko. Backported to Redis from Disque."
antirez,2015-11-27 15:17:21,https://api.github.com/repos/antirez/redis/git/commits/e6a51174263d2501a8c35baa9a5773b2da9d00bf,e6a51174263d2501a8c35baa9a5773b2da9d00bf,Fix typo in prepareClientToWrite() comment.
antirez,2015-11-27 15:12:23,https://api.github.com/repos/antirez/redis/git/commits/c2c68c50eff0de927a66606512d26bb659f8bfef,c2c68c50eff0de927a66606512d26bb659f8bfef,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2015-11-27 15:05:52,https://api.github.com/repos/antirez/redis/git/commits/da82723858215e1b42c9b5b744e082418644d7d8,da82723858215e1b42c9b5b744e082418644d7d8,"Handle wait3() errors.

My guess was that wait3() with WNOHANG could never return -1 and an
error. However issue #2897 may possibly indicate that this could happen
under non clear conditions. While we try to understand this better,
better to handle a return value of -1 explicitly, otherwise in the
case a BGREWRITE is in progress but wait3() returns -1, the effect is to
match the first branch of the if/else block since server.rdb_child_pid
is -1, and call backgroundSaveDoneHandler() without a good reason, that
will, in turn, crash the Redis server with an assertion."
antirez,2015-11-27 14:46:16,https://api.github.com/repos/antirez/redis/git/commits/816441865bbcc0ff6a4ae0d8f2e382ecbff1facb,816441865bbcc0ff6a4ae0d8f2e382ecbff1facb,"Merge pull request #2899 from itamarhaber/patch-1

Revert Lua's `redis.LOG_<level>` to original"
itamarhaber,2015-11-27 13:55:38,https://api.github.com/repos/antirez/redis/git/commits/36801f7e43089bc3051e4732b38c4cfa65e92caf,36801f7e43089bc3051e4732b38c4cfa65e92caf,"Revert Lua's `redis.LOG_<level>` to original

Fixes #2898"
antirez,2015-11-27 07:59:17,https://api.github.com/repos/antirez/redis/git/commits/a0d41e51c24bd2299d3e46a2164fc5408de220dc,a0d41e51c24bd2299d3e46a2164fc5408de220dc,Redis Cluster: hint about validity factor when slave can't failover.
antirez,2015-11-20 14:45:25,https://api.github.com/repos/antirez/redis/git/commits/4d625bb4c80965c5b90fb01c1c1639b0e9b49059,4d625bb4c80965c5b90fb01c1c1639b0e9b49059,"Added Tcl program to show commits graphicaly.

Used to generate http://antirez.com/news/98."
antirez,2015-11-18 09:23:49,https://api.github.com/repos/antirez/redis/git/commits/4b0b28b4694067fef56d7bb9bd09efdaf02ca032,4b0b28b4694067fef56d7bb9bd09efdaf02ca032,Lua debugger: infinite loop detection.
antirez,2015-11-17 15:24:23,https://api.github.com/repos/antirez/redis/git/commits/1f35f2dd5ace63862ecd819c4d28f8d844720df1,1f35f2dd5ace63862ecd819c4d28f8d844720df1,"Lua debugger: fix trace command infinite loop.

Thanks to Itamar Haber for bug report and test case to reproduce."
antirez,2015-11-17 12:15:48,https://api.github.com/repos/antirez/redis/git/commits/6604e04260b1b6b17afcec9e54d20cda041751b1,6604e04260b1b6b17afcec9e54d20cda041751b1,Lua debugger: redis-cli: allow restart after end of session.
antirez,2015-11-17 11:11:13,https://api.github.com/repos/antirez/redis/git/commits/58573f1dd2d6d3cfd5dbaea7484c55571f856b3b,58573f1dd2d6d3cfd5dbaea7484c55571f856b3b,Lua debugger: redis-cli can restart Lua debugging sessions.
antirez,2015-11-16 15:20:02,https://api.github.com/repos/antirez/redis/git/commits/0cc19174f98947bfc7c1002c80f53d6952193231,0cc19174f98947bfc7c1002c80f53d6952193231,"Lua debugger: maxlen command implemented.

Let the user control the replies truncation."
antirez,2015-11-16 12:58:17,https://api.github.com/repos/antirez/redis/git/commits/c560c645e9d79df607c829de64b86d0513b8a08c,c560c645e9d79df607c829de64b86d0513b8a08c,Lua debugger: trace command implemented.
antirez,2015-11-16 12:23:29,https://api.github.com/repos/antirez/redis/git/commits/22959e07dc54370564b21f94c62f926a48c0cfe0,22959e07dc54370564b21f94c62f926a48c0cfe0,Lua debugger: redis-cli: show compile errors in LDB mode.
antirez,2015-11-16 11:43:44,https://api.github.com/repos/antirez/redis/git/commits/70a51694deff3a27f8cacb195a96fe5aa68eb943,70a51694deff3a27f8cacb195a96fe5aa68eb943,Lua debugger: print without args show all local vars.
antirez,2015-11-16 11:26:02,https://api.github.com/repos/antirez/redis/git/commits/fb53459ce8053d0345fe2ef663fb681d25307855,fb53459ce8053d0345fe2ef663fb681d25307855,"Lua debugger: default behavior of ""list"" command changed.

Now it lists code around the current position by default. Can list any
other part using other arguments, but a new ""whole"" command was added in
order to show the whole source code easily."
antirez,2015-11-16 11:07:08,https://api.github.com/repos/antirez/redis/git/commits/6de2306add95460a488d76e57b5cf2b5db17d5da,6de2306add95460a488d76e57b5cf2b5db17d5da,"Lua debugger: redis-cli error when --ldb is without --eval.

Otherwise the result is a messed CLI without prompt.
Thanks to Itamar Haber for reporting this issue."
antirez,2015-11-16 09:29:35,https://api.github.com/repos/antirez/redis/git/commits/e57cccdefbbac1bef7b397d65df6a353bd9cfeee,e57cccdefbbac1bef7b397d65df6a353bd9cfeee,"Lua debugger: use sds_malloc() to allocate eval cli array.

Redis-cli handles the debugger ""eval"" command in a special way since
sdssplitargs() would not be ok: we need to send the Redis debugger the
whole Lua script without any parsing. However in order to later free the
argument vector inside redis-cli using just sdsfreesplitres(), we need
to allocate the array of SDS pointers using the same allocator SDS is
using, that may differ to what Redis is using.

So now a newer version of SDS exports sds_malloc() and other allocator
functions to give access, to the program it is linked to, the allocator
used internally by SDS."
antirez,2015-11-14 21:18:02,https://api.github.com/repos/antirez/redis/git/commits/34aadf79c333527da4a188bc3470ce6cacd7a13b,34aadf79c333527da4a188bc3470ce6cacd7a13b,"Lua debugging: fix error message for SCRIPT DEBUG.

""async"" -> ""sync"".

Thanks to Itamar Haber for reporting."
antirez,2015-11-14 21:16:15,https://api.github.com/repos/antirez/redis/git/commits/3d24cd6bf802eb4a198620f0c9e9cc6985604bb6,3d24cd6bf802eb4a198620f0c9e9cc6985604bb6,"Lua debugger: reply +OK to SCRIPT DEBUG no.

Thanks to Itamar Haber for reporting."
antirez,2015-11-14 21:13:32,https://api.github.com/repos/antirez/redis/git/commits/333547dab6928380be70f612aadf18f48a3cb1b4,333547dab6928380be70f612aadf18f48a3cb1b4,Lua debugger: call wait3() if there are pending forked debugging sessions.
antirez,2015-11-13 12:11:31,https://api.github.com/repos/antirez/redis/git/commits/01636435fae33d3c43b23bd376f0d4634a7294a8,01636435fae33d3c43b23bd376f0d4634a7294a8,Lua debugger: abort implemented.
antirez,2015-11-13 09:18:32,https://api.github.com/repos/antirez/redis/git/commits/d99ce09343a4abe99aa4c3b6f18a349adea42196,d99ce09343a4abe99aa4c3b6f18a349adea42196,Lua debugger: ldbSendLogs() memory leak fixed.
antirez,2015-11-13 09:17:34,https://api.github.com/repos/antirez/redis/git/commits/87672adee2c282ad9d6a989f4401094fda90ebba,87672adee2c282ad9d6a989f4401094fda90ebba,Lua debugger: better support for synchronous mode.
antirez,2015-11-13 08:31:01,https://api.github.com/repos/antirez/redis/git/commits/7be917058560c2281a1ee891cb6ff6a7b8de345b,7be917058560c2281a1ee891cb6ff6a7b8de345b,Lua debugger: handle forked sessions children during shutdown.
antirez,2015-11-12 11:59:19,https://api.github.com/repos/antirez/redis/git/commits/3ab0b4d6d045a35a1b587acf6569a8a303fc09a5,3ab0b4d6d045a35a1b587acf6569a8a303fc09a5,"Lua debugger: inform user changes are rolled back.

When redis-cli will support the synchronous mode, this will not be
printed."
antirez,2015-11-12 10:21:20,https://api.github.com/repos/antirez/redis/git/commits/56d9bb8c554b3d8f64d6a5c6c77c9287dabf541b,56d9bb8c554b3d8f64d6a5c6c77c9287dabf541b,"Lua debugger: fix help typo, beark -> break."
antirez,2015-11-12 07:48:59,https://api.github.com/repos/antirez/redis/git/commits/e386cd8ccf9698a8218208e75528a460cb4cc277,e386cd8ccf9698a8218208e75528a460cb4cc277,"Lua debugger: clear end of session protocol.

When the debugger exits now it produces an <endsession> tag that informs
redis-cli (or other debugging clients) that the session terminated.
This way the client knows there is yet another reply to read (the one of
the EVAL script itself), and can switch to non-debugging mode ASAP."
antirez,2015-11-12 07:33:52,https://api.github.com/repos/antirez/redis/git/commits/7492237c3ce377f7d8983b6a2943808cf05c1bea,7492237c3ce377f7d8983b6a2943808cf05c1bea,Lua debugger: redis.debug() implemented.
antirez,2015-11-11 22:29:43,https://api.github.com/repos/antirez/redis/git/commits/23a4d70e56a9b486cbe9cb11a590f5b6a6267885,23a4d70e56a9b486cbe9cb11a590f5b6a6267885,"Lua debugger: redis-cli, mark end of debugging session."
antirez,2015-11-11 22:07:57,https://api.github.com/repos/antirez/redis/git/commits/cd112db0ae0e30d2005680b62509a1e517b3612a,cd112db0ae0e30d2005680b62509a1e517b3612a,Lua debugger: removing breakpoints now works.
antirez,2015-11-11 21:56:38,https://api.github.com/repos/antirez/redis/git/commits/a076e421e9ac3401b35557d259e8e59961ff29a0,a076e421e9ac3401b35557d259e8e59961ff29a0,Lua debugger: redis command implemented.
antirez,2015-11-11 21:29:56,https://api.github.com/repos/antirez/redis/git/commits/e6eb6eadec7e34df82e2a5bd502fe9c3487d7e61,e6eb6eadec7e34df82e2a5bd502fe9c3487d7e61,"Lua debugger: try to eval as expression first.

It's handly to just eval ""5+5"" without the return and see it printed on
the screen as result. However prepending ""return"" does not always result
into valid Lua code. So what we do is to exploit a common Lua community
trick of trying to compile with return prepended, and if compilation
fails then it's not an expression that can be returned, so we try again
without prepending ""return"". Works great apparently."
antirez,2015-11-11 18:46:55,https://api.github.com/repos/antirez/redis/git/commits/1f8fdafe65c8c19a94dc886b2cfc3f5de806c728,1f8fdafe65c8c19a94dc886b2cfc3f5de806c728,Lua debugger: much better Lua values pretty printer.
antirez,2015-11-11 09:43:00,https://api.github.com/repos/antirez/redis/git/commits/f4805800dcf2c6a8b298edecb97d80d52838e03f,f4805800dcf2c6a8b298edecb97d80d52838e03f,Lua debugger: print now handles ARGV and KEYS.
antirez,2015-11-11 09:34:05,https://api.github.com/repos/antirez/redis/git/commits/36392dd86732587ee01516f51de49a3cdc634652,36392dd86732587ee01516f51de49a3cdc634652,Lua debugger: added comment about helper functions.
antirez,2015-11-11 09:28:35,https://api.github.com/repos/antirez/redis/git/commits/3a04cb05eea3799a3f10ec97745c172aeebef071,3a04cb05eea3799a3f10ec97745c172aeebef071,Lua debugger: redis.breakpoint() implemented.
antirez,2015-11-11 09:15:26,https://api.github.com/repos/antirez/redis/git/commits/cf4700bda4929d8d952df16bdd3ca73019d15249,cf4700bda4929d8d952df16bdd3ca73019d15249,"Lua debugger: output improvements, eval command."
antirez,2015-11-10 10:45:59,https://api.github.com/repos/antirez/redis/git/commits/1f8d6144237e10fe91b71b883578a0083b95920c,1f8d6144237e10fe91b71b883578a0083b95920c,Lua debugger: breakpoints.
antirez,2015-11-10 08:40:38,https://api.github.com/repos/antirez/redis/git/commits/5c4f492844d50c29ebf303bc9bd52c6db07fe377,5c4f492844d50c29ebf303bc9bd52c6db07fe377,Lua debugger: ability to show local vars content.
antirez,2015-11-09 16:01:41,https://api.github.com/repos/antirez/redis/git/commits/5417217c873b5d7a0cf94edabc1e0a5371fa7578,5417217c873b5d7a0cf94edabc1e0a5371fa7578,Lua debugger: log Redis commands. List command.
antirez,2015-11-09 10:08:57,https://api.github.com/repos/antirez/redis/git/commits/d3d1fa9437314082b3e18dedd48c768e097a9d61,d3d1fa9437314082b3e18dedd48c768e097a9d61,Lua debugger: initial REPL.
antirez,2015-11-06 15:19:59,https://api.github.com/repos/antirez/redis/git/commits/c494db89b5c2ef34758f599ee46ac7265782ad77,c494db89b5c2ef34758f599ee46ac7265782ad77,Lua debugger: foundations implemented.
antirez,2015-11-17 14:40:47,https://api.github.com/repos/antirez/redis/git/commits/7cfdccd94e873c1f350b111332c0cb66b1e65f43,7cfdccd94e873c1f350b111332c0cb66b1e65f43,"Remove ""s"" flag for MIGRATE in command table.

Maybe there are legitimate use cases for MIGRATE inside Lua scripts, at
least for now. When the command will be executed in an asynchronous
fashion (planned) it is possible we'll no longer be able to permit it
from within Lua scripts."
antirez,2015-11-17 14:38:34,https://api.github.com/repos/antirez/redis/git/commits/f3dd472e978d8db7b4ce368bd295fd8fc3af7c0c,f3dd472e978d8db7b4ce368bd295fd8fc3af7c0c,Update redis-cli help and the script to generate it.
antirez,2015-11-17 14:33:09,https://api.github.com/repos/antirez/redis/git/commits/0cb66fa156943dbae32a0ad86241a6e201f80fec,0cb66fa156943dbae32a0ad86241a6e201f80fec,"Fix MIGRATE entry in command table.

Thanks to Oran Agra (@oranagra) for reporting. Key extraction would not
work otherwise and it does not make sense to take wrong data in the
command table."
antirez,2015-11-13 08:32:07,https://api.github.com/repos/antirez/redis/git/commits/8a0258aa4374212d8bf7004fa9022f821f6c93ed,8a0258aa4374212d8bf7004fa9022f821f6c93ed,AOF: rewriting child killed by SIGUSR1 is not an error.
antirez,2015-11-10 12:31:25,https://api.github.com/repos/antirez/redis/git/commits/54f5ecfd49a2430046eb85860a73d1b2bfcd64e5,54f5ecfd49a2430046eb85860a73d1b2bfcd64e5,call() deserves a good top-comment.
antirez,2015-11-09 17:06:41,https://api.github.com/repos/antirez/redis/git/commits/c950facf43cb6bf6f8696da39927b513e0be5aa1,c950facf43cb6bf6f8696da39927b513e0be5aa1,"Merge pull request #2848 from badboy/removed-printf

Remove printf"
antirez,2015-11-09 16:26:56,https://api.github.com/repos/antirez/redis/git/commits/87a12a608512603a56851507b75bb43e55abcca2,87a12a608512603a56851507b75bb43e55abcca2,Best effort flush of slave buffers before SHUTDOWN.
antirez,2015-11-09 16:07:46,https://api.github.com/repos/antirez/redis/git/commits/b719eedfc6db1aa34cc89e8f771189a344a03e23,b719eedfc6db1aa34cc89e8f771189a344a03e23,"Use clientHasPendingReplies() in flushSlavesOutputBuffers()

The old version only flushed data to slaves if there were strings
pending in the client->reply list. Now also static buffers are flushed.
Does not help to free memory (which is the only use we have right now in
the fuction), but is more correct conceptually, and may be used in
other contexts."
antirez,2015-11-09 10:43:18,https://api.github.com/repos/antirez/redis/git/commits/1b5d24eb2b8f5ef26c6067c895fcb5ebb89a991b,1b5d24eb2b8f5ef26c6067c895fcb5ebb89a991b,"Scripting: fix redis.call() error reporting.

Arguments arity and arguments type error of redis.call() were not
reported correctly to Lua, so the command acted in this regard like
redis.pcall(), but just for two commands. Redis.call() should always
raise errors instead."
antirez,2015-11-09 10:10:53,https://api.github.com/repos/antirez/redis/git/commits/111d24f2465a41ddc100a11549dab3f0cd5ddc1b,111d24f2465a41ddc100a11549dab3f0cd5ddc1b,"Fix error reply in subscribed Pub/Sub mode.

PING is now a valid command to issue in this context."
antirez,2015-11-05 10:10:46,https://api.github.com/repos/antirez/redis/git/commits/cd8f19e9ca1f1e2e2a1015fa1c87979448685ddd,cd8f19e9ca1f1e2e2a1015fa1c87979448685ddd,Initialize all Lua scripting related things into scripting.c
antirez,2015-11-05 09:36:52,https://api.github.com/repos/antirez/redis/git/commits/9aa1f94449652c4dcad6d8038967a619857f2bf2,9aa1f94449652c4dcad6d8038967a619857f2bf2,scripting.c source code better organized into sections.
antirez,2015-11-04 16:16:34,https://api.github.com/repos/antirez/redis/git/commits/71aa9b75f2c4dd6faa20a4849ff732536bdfceab,71aa9b75f2c4dd6faa20a4849ff732536bdfceab,"Fix HINCRBYFLOAT to work with long doubles.

During the refactoring needed for lazy free, specifically the conversion
of t_hash from struct robj to plain SDS strings, HINCRBFLOAT was
accidentally moved away from long doubles to doubles for internal
processing of increments and formatting.

The diminished precision created more obvious artifacts in the way small
numbers are formatted once we convert from decimal number in radix 10 to
double and back to its string in radix 10.

By using more precision, we now have less surprising results at least
with small numbers like ""1.23"", exactly like in the previous versions of
Redis.

See issue #2846."
antirez,2015-11-04 16:02:34,https://api.github.com/repos/antirez/redis/git/commits/f6255703b0bd4996ab2278e1253796468aed108a,f6255703b0bd4996ab2278e1253796468aed108a,"Add regression test for HINCRBYFLOAT formatting change.

This test was kindly provided by Jan-Erik Rediger (@badboy here on
Github) that discovered the issue.

See issue #2846."
antirez,2015-11-04 11:59:11,https://api.github.com/repos/antirez/redis/git/commits/de776a402f96e0ec0f93b886cc6d8e3c0e6f76ea,de776a402f96e0ec0f93b886cc6d8e3c0e6f76ea,"Merge pull request #2850 from Joe8Bit/fix_typo-in-readme

Fix typo in READme sever/server"
antirez,2015-11-04 11:58:26,https://api.github.com/repos/antirez/redis/git/commits/dfe90acbd58b5cd62f32a9823c29ac5c53b42b26,dfe90acbd58b5cd62f32a9823c29ac5c53b42b26,README new internals section improved a bit more.
steve384,2015-11-04 11:54:50,https://api.github.com/repos/antirez/redis/git/commits/8bc8f6f6955a895819ff303fd96a7b2e03856d3f,8bc8f6f6955a895819ff303fd96a7b2e03856d3f,Fix typo in READme sever/server
antirez,2015-11-04 11:52:37,https://api.github.com/repos/antirez/redis/git/commits/462026ceb74415752a15e0ce90c05b0331026071,462026ceb74415752a15e0ce90c05b0331026071,README: remove garbage at end of line.
antirez,2015-11-04 11:51:45,https://api.github.com/repos/antirez/redis/git/commits/73510f4e3802d4ed5a398e606396110c6ae2f2d9,73510f4e3802d4ed5a398e606396110c6ae2f2d9,"README operations -> commands, is more clear now #2."
antirez,2015-11-04 11:50:32,https://api.github.com/repos/antirez/redis/git/commits/b9fb24014af9e96d0af43042799947254b55d6a6,b9fb24014af9e96d0af43042799947254b55d6a6,"README operations -> commands, is more clear now."
antirez,2015-11-04 11:44:36,https://api.github.com/repos/antirez/redis/git/commits/8badf160b66d84b6eb16dea80ce2b3d1f265091a,8badf160b66d84b6eb16dea80ce2b3d1f265091a,A few README typos fixed #2.
antirez,2015-11-04 11:41:54,https://api.github.com/repos/antirez/redis/git/commits/d80d051792280bed846b3afa8da35f6fd1251c4f,d80d051792280bed846b3afa8da35f6fd1251c4f,A few README typos fixed.
antirez,2015-11-04 11:29:54,https://api.github.com/repos/antirez/redis/git/commits/15d57c35c3122606187be2fb7da22d081e444474,15d57c35c3122606187be2fb7da22d081e444474,README now has info about Redis codebase layout.
badboy,2015-11-04 10:48:14,https://api.github.com/repos/antirez/redis/git/commits/35afefc7cbdb903fad41ce24908dfc849b6c2f5d,35afefc7cbdb903fad41ce24908dfc849b6c2f5d,Remove printf
antirez,2015-11-03 18:03:09,https://api.github.com/repos/antirez/redis/git/commits/30b324698f9ff0c3b49357d2e1977c1f4fa83063,30b324698f9ff0c3b49357d2e1977c1f4fa83063,"Test: improve PFCOUNT with multiple keys testing.

An user raised a question about a given behavior of PFCOUNT. Added a
test to show the behavior (union) is correct when most of the items are
in common."
antirez,2015-10-30 11:15:07,https://api.github.com/repos/antirez/redis/git/commits/77362b9027133e2a35e7b7f816133c60aab12087,77362b9027133e2a35e7b7f816133c60aab12087,Dependencies updated.
antirez,2015-10-30 11:02:15,https://api.github.com/repos/antirez/redis/git/commits/5b63ae37ff0d28b1a26ff06b082a814910f8c0bf,5b63ae37ff0d28b1a26ff06b082a814910f8c0bf,Scripting: commands replication tests.
antirez,2015-10-30 10:57:36,https://api.github.com/repos/antirez/redis/git/commits/f26072eb66eec84b0d44d386ab9911a3b3ad082e,f26072eb66eec84b0d44d386ab9911a3b3ad082e,"More reliable DEBUG loadaof.

Make sure to flush the AOF output buffers before reloading.
Result: less false timing related false positives on AOF tests."
antirez,2015-10-30 09:18:25,https://api.github.com/repos/antirez/redis/git/commits/073a42b997c682e0c6ff3010c8645de677bf1b6c,073a42b997c682e0c6ff3010c8645de677bf1b6c,Scripting: execute tests with command replication as well.
antirez,2015-10-30 09:13:04,https://api.github.com/repos/antirez/redis/git/commits/ff6d2960008d4662d5eff431ec77650110a9fb89,ff6d2960008d4662d5eff431ec77650110a9fb89,"Scripting: ability to turn on Lua commands style replication globally.

Currently this feature is only accessible via DEBUG for testing, since
otherwise depending on the instance configuration a given script works
or is broken, which is against the Redis philosophy."
antirez,2015-10-30 09:02:10,https://api.github.com/repos/antirez/redis/git/commits/eda06b51fb848a38e09733e936134e977a7c6852,eda06b51fb848a38e09733e936134e977a7c6852,Scripting: test Redis provided Lua functions error reporting.
antirez,2015-10-30 08:53:45,https://api.github.com/repos/antirez/redis/git/commits/ebaa9226ee71f85d9e79eddfd3da7bffb0331aeb,ebaa9226ee71f85d9e79eddfd3da7bffb0331aeb,Scripting: fix error reporting of many Redis provided functions.
antirez,2015-10-30 08:41:04,https://api.github.com/repos/antirez/redis/git/commits/2dabf82d5f9f9eb63efb32f7b172a54f000f607f,2dabf82d5f9f9eb63efb32f7b172a54f000f607f,"Fix call() FORCE_REPL/AOF flags setting.

This commit also inverts two stanzas of the code just becuase they are
more logical like that, not because currently it makes any difference."
antirez,2015-10-29 14:57:41,https://api.github.com/repos/antirez/redis/git/commits/514a23472262de499005a31b1af3cca08a1c84ba,514a23472262de499005a31b1af3cca08a1c84ba,Lua script selective replication fixes.
antirez,2015-10-29 12:50:04,https://api.github.com/repos/antirez/redis/git/commits/a3e8de043005f0e764f6506d1e38143d788cddc4,a3e8de043005f0e764f6506d1e38143d788cddc4,Lua script selective replication WIP.
antirez,2015-10-29 11:39:07,https://api.github.com/repos/antirez/redis/git/commits/fc38235664b120603595bb49f61c0ef31247b482,fc38235664b120603595bb49f61c0ef31247b482,"Scripting: single commands replication mode implemented.

By calling redis.replicate_commands(), the scripting engine of Redis
switches to commands replication instead of replicating whole scripts.
This is useful when the script execution is costly but only results in a
few writes performed to the dataset.

Morover, in this mode, it is possible to call functions with side
effects freely, since the script execution does not need to be
deterministic: anyway we'll capture the outcome from the point of view
of changes to the dataset.

In this mode math.random() returns different sequences at every call.

If redis.replicate_commnads() is not called before any other write, the
command returns false and sticks to whole scripts replication instead."
antirez,2015-10-29 10:05:27,https://api.github.com/repos/antirez/redis/git/commits/cdda6748c25be6994dfccd769dc7c3521baf4760,cdda6748c25be6994dfccd769dc7c3521baf4760,call(): selective ability to prevent propagation on AOF / slaves.
antirez,2015-10-29 09:44:30,https://api.github.com/repos/antirez/redis/git/commits/9dd3d2e9bd24bc5f68197e10b5884c40aa0e104a,9dd3d2e9bd24bc5f68197e10b5884c40aa0e104a,call(): don't inherit CLIENT_PREVENT_PROP + minor refactoring.
antirez,2015-10-27 11:06:26,https://api.github.com/repos/antirez/redis/git/commits/d37ef7845b205018149aedf387b3681164577103,d37ef7845b205018149aedf387b3681164577103,CONTRIBUTING updated.
antirez,2015-10-21 18:43:37,https://api.github.com/repos/antirez/redis/git/commits/86f0a2ee877c0822402a113777cc623c91c9eac0,86f0a2ee877c0822402a113777cc623c91c9eac0,"CLIENT REPLY command implemented: ON, OFF and SKIP modes.

Sometimes it can be useful for clients to completely disable replies
from the Redis server. For example when the client sends fire and forget
commands or performs a mass loading of data, or in caching contexts
where new data is streamed constantly. In such contexts to use server
time and bandwidth in order to send back replies to clients, which are
going to be ignored, is a shame.

Multiple mechanisms are possible to implement such a feature. For
example it could be a feature of MULTI/EXEC, or a command prefix
such as ""NOREPLY SADD myset foo"", or a different mechanism that allows
to switch on/off requests using the CLIENT command.

The MULTI/EXEC approach has the problem that transactions are not
strictly part of the no-reply semantics, and if we want to insert a lot
of data in a bulk way, creating a huge MULTI/EXEC transaction in the
server memory is bad.

The prefix is the best in this specific use case since it does not allow
desynchronizations, and is pretty clear semantically. However Redis
internals and client libraries are not prepared to handle this
currently.

So the implementation uses the CLIENT command, providing a new REPLY
subcommand with three options:

    CLIENT REPLY OFF disables the replies, and does not reply itself.
    CLIENT REPLY ON re-enables the replies, replying +OK.
    CLIENT REPLY SKIP only discards the reply of the next command, and
                      like OFF does not reply anything itself.

The reason to add the SKIP command is that it allows to have an easy
way to send conceptually ""single"" commands that don't need a reply
as the sum of two pipelined commands:

    CLIENT REPLY SKIP
    SET key value

Note that CLIENT REPLY ON replies with +OK so it should be used when
sending multiple commands that don't need a reply. However since it
replies with +OK the client can check that the connection is still
active and all the previous commands were received.

This is currently just into Redis ""unstable"" so the proposal can be
modified or abandoned based on users inputs."
antirez,2015-10-15 11:02:35,https://api.github.com/repos/antirez/redis/git/commits/bdcb14556644ff501acb061b0a6bdfc24d6b5b81,bdcb14556644ff501acb061b0a6bdfc24d6b5b81,"Merge pull request #2810 from dwlt/add-copy-replace-parameters-to-redis-trib-import

Add copy & replace parameters to redis-trib import"
antirez,2015-10-15 10:46:07,https://api.github.com/repos/antirez/redis/git/commits/6ed12bd430c14198e858916e3ebe4103fe2497ed,6ed12bd430c14198e858916e3ebe4103fe2497ed,Redis.conf example: make clear user must pass its path as argument.
antirez,2015-10-15 09:23:13,https://api.github.com/repos/antirez/redis/git/commits/5f0fef5eb9d4ca2e4f5a21388b92d9443e495da9,5f0fef5eb9d4ca2e4f5a21388b92d9443e495da9,Regression test for issue #2813.
antirez,2015-10-15 08:20:09,https://api.github.com/repos/antirez/redis/git/commits/ed6228851cfc7731a4e84201a3b2d6c11d925438,ed6228851cfc7731a4e84201a3b2d6c11d925438,PR 2813 fix ported to unstable.
dwlt,2015-10-14 05:58:36,https://api.github.com/repos/antirez/redis/git/commits/8a85ad2d1cc93dab909fbdff82ff54fa063759bf,8a85ad2d1cc93dab909fbdff82ff54fa063759bf,Add back blank line
dwlt,2015-10-14 05:56:14,https://api.github.com/repos/antirez/redis/git/commits/03d0de7cdffb12edf1dae9c46d8c49d4fd06c755,03d0de7cdffb12edf1dae9c46d8c49d4fd06c755,Update import command to optionally use copy and replace parameters
antirez,2015-10-13 09:08:24,https://api.github.com/repos/antirez/redis/git/commits/35a0c772b5ef407b700db051233144b6bac8fea3,35a0c772b5ef407b700db051233144b6bac8fea3,DEBUG RESTART/CRASH-AND-RECOVER [delay] implemented.
antirez,2015-10-13 08:58:08,https://api.github.com/repos/antirez/redis/git/commits/73427462ed8fc089a0fd6cecf0ae73f1339f68f6,73427462ed8fc089a0fd6cecf0ae73f1339f68f6,"Server: restartServer() API.

This new function is able to restart the server ""in place"". The current
Redis process executes the same executable it was executed with, using
the same arguments and configuration file."
antirez,2015-10-09 14:15:53,https://api.github.com/repos/antirez/redis/git/commits/c372a595201451721ddc76bc627e169c9b465c20,c372a595201451721ddc76bc627e169c9b465c20,"Cluster: redis-trib fix, coverage for migrating=1 case.

Kinda related to #2770."
antirez,2015-10-09 07:47:17,https://api.github.com/repos/antirez/redis/git/commits/6ddcba6ec9001826ffcafcd943e64b632e4f41f5,6ddcba6ec9001826ffcafcd943e64b632e4f41f5,Test: basic lazyfree unit test.
antirez,2015-10-07 20:32:24,https://api.github.com/repos/antirez/redis/git/commits/363c0f67b9bd295dbe08815497e8b0b084440139,363c0f67b9bd295dbe08815497e8b0b084440139,Test: fix attach_to_replication_stream to handle newlines.
antirez,2015-10-07 20:27:18,https://api.github.com/repos/antirez/redis/git/commits/f29e384853660434da912c49e8b29ebabe76bec3,f29e384853660434da912c49e8b29ebabe76bec3,"Fix extractLongLatOrReply() sanity check conditionals.

the check for lat/long valid ranges were performed inside the for loop,
two times instead of one, and the first time when the second element of
the array, xy[1], was yet not populated. This resulted into issue #2799.

Close issue #2799."
antirez,2015-10-07 07:17:06,https://api.github.com/repos/antirez/redis/git/commits/3f38b51ad785ab98f6721ddb2adcfc0a6cf7a76b,3f38b51ad785ab98f6721ddb2adcfc0a6cf7a76b,"Jemalloc configure script fixed to work nested.

Now way to make unmodified Jemalloc configure to work when the jemalloc
source tree is inside a subdirectory of a different git repository.

Problem signaled here:
http://www.canonware.com/pipermail/jemalloc-discuss/2015-October/001174.html"
antirez,2015-10-06 14:18:30,https://api.github.com/repos/antirez/redis/git/commits/a9951b1b6a326532163e0fe4ee1a26e972258a1e,a9951b1b6a326532163e0fe4ee1a26e972258a1e,Jemalloc updated to 4.0.3.
antirez,2015-10-06 08:56:16,https://api.github.com/repos/antirez/redis/git/commits/e3ded0273c43986a49ddd9d5fb4a20d187d015de,e3ded0273c43986a49ddd9d5fb4a20d187d015de,Added a README into deps on dependencies and how to upgrade.
antirez,2015-10-06 07:27:29,https://api.github.com/repos/antirez/redis/git/commits/ceaf58dfd59f852b88e90228f339e42cea3cf3de,ceaf58dfd59f852b88e90228f339e42cea3cf3de,Regression test for GEORADIUS COUNT arity check.
antirez,2015-10-06 07:25:28,https://api.github.com/repos/antirez/redis/git/commits/319d18013646bb9c14d0c070a566d058558bf762,319d18013646bb9c14d0c070a566d058558bf762,Fix GEORADIUS COUNT option arity checks.
antirez,2015-10-05 10:24:13,https://api.github.com/repos/antirez/redis/git/commits/19f6ab50c39cbfb497bd8ee3003375c1327a5266,19f6ab50c39cbfb497bd8ee3003375c1327a5266,Lazyfree options documented in the example redis.conf.
antirez,2015-10-05 10:11:27,https://api.github.com/repos/antirez/redis/git/commits/880c606a7ce30ac2c72184ed62d392c25bb9c88b,880c606a7ce30ac2c72184ed62d392c25bb9c88b,Lazyfree options implemented in the configuration.
antirez,2015-10-02 13:27:57,https://api.github.com/repos/antirez/redis/git/commits/252cfa0a39d8483b3f990af02551b63d306a289a,252cfa0a39d8483b3f990af02551b63d306a289a,Lazyfree: cond vars to enabled/disable it based on DEL context.
antirez,2015-09-28 09:07:24,https://api.github.com/repos/antirez/redis/git/commits/535969679673f8b3cb904eef3de0f8104cacf072,535969679673f8b3cb904eef3de0f8104cacf072,Fixed a bug in the emptyDb() new implementation.
antirez,2015-09-28 09:05:39,https://api.github.com/repos/antirez/redis/git/commits/ecdbc333a3be42b1bc766263083d2f902a2a7d07,ecdbc333a3be42b1bc766263083d2f902a2a7d07,FLUSHDB and FLUSHALL ASYNC option implemented.
antirez,2015-09-28 08:51:25,https://api.github.com/repos/antirez/redis/git/commits/1f26a9468ff3e61ee9ae4225628647d4054fe20c,1f26a9468ff3e61ee9ae4225628647d4054fe20c,Lazyfree: pending objects count in INFO output.
antirez,2015-09-28 08:47:45,https://api.github.com/repos/antirez/redis/git/commits/c69c6c80fb5376a30e8cda34443a55b6326c9aa7,c69c6c80fb5376a30e8cda34443a55b6326c9aa7,Lazyfree: ability to free whole DBs in background.
antirez,2015-09-25 14:22:25,https://api.github.com/repos/antirez/redis/git/commits/b08c36c5f2e635a128f2a306b6f38a0159ed56e6,b08c36c5f2e635a128f2a306b6f38a0159ed56e6,Lazyfree: keep count of objects to free.
antirez,2015-09-25 13:34:16,https://api.github.com/repos/antirez/redis/git/commits/c7b46a471996e45a464a2b52d6cdc81487f19a05,c7b46a471996e45a464a2b52d6cdc81487f19a05,zmalloc.c converted to use atomicvar.h.
antirez,2015-09-25 08:06:47,https://api.github.com/repos/antirez/redis/git/commits/7e5d69019e233d306accce19611f68c92ff45da8,7e5d69019e233d306accce19611f68c92ff45da8,"Atomic vars implemented in a more general way.

We have them into zmalloc.c, but this is going to replace that
implementation, so that it's possible to use the same idea everywhere
inside the code base."
antirez,2015-09-25 08:06:28,https://api.github.com/repos/antirez/redis/git/commits/7af4eeb7455b40ef73c436d7b9eb05df31eb6886,7af4eeb7455b40ef73c436d7b9eb05df31eb6886,"Lazyfree: incremental removed, only threaded survived."
antirez,2015-09-23 14:46:36,https://api.github.com/repos/antirez/redis/git/commits/9253d8507320dd1d7665a55e11e2cba3ae91c78d,9253d8507320dd1d7665a55e11e2cba3ae91c78d,Threaded lazyfree WIP #1.
antirez,2015-09-23 14:09:16,https://api.github.com/repos/antirez/redis/git/commits/4d50d691e3fa80c9b9aef5aa0498a0a92654b324,4d50d691e3fa80c9b9aef5aa0498a0a92654b324,bio.c: new API bioWaitStepOfType().
antirez,2015-09-23 09:44:40,https://api.github.com/repos/antirez/redis/git/commits/5b850d7a09cd084c850ced9f6801dcb72835cabf,5b850d7a09cd084c850ced9f6801dcb72835cabf,Test: stack_logging var should be initialized to 0.
antirez,2015-09-23 09:43:28,https://api.github.com/repos/antirez/redis/git/commits/1dab60df8132e5137ab8e9680dcf88fafc4842a6,1dab60df8132e5137ab8e9680dcf88fafc4842a6,Hash new implementation memleaks fixed.
antirez,2015-09-23 08:34:53,https://api.github.com/repos/antirez/redis/git/commits/97ba4e3886ab2458756d1c67bdc0eb94b85e57a3,97ba4e3886ab2458756d1c67bdc0eb94b85e57a3,Lazyfree: Hash converted to use plain SDS WIP 5.
antirez,2015-09-23 08:34:00,https://api.github.com/repos/antirez/redis/git/commits/36be34bb87f6292b6259172d974c211023e5ba43,36be34bb87f6292b6259172d974c211023e5ba43,Test: support for stack logging for OSX malloc/leaks.
antirez,2015-09-23 07:33:23,https://api.github.com/repos/antirez/redis/git/commits/974514b936c7b7b970b03224963f05818c568c60,974514b936c7b7b970b03224963f05818c568c60,Lazyfree: Hash converted to use plain SDS WIP 4.
antirez,2015-09-22 07:42:46,https://api.github.com/repos/antirez/redis/git/commits/4a18352877488c2e3af801f9302ceac7ce6c627b,4a18352877488c2e3af801f9302ceac7ce6c627b,Lazyfree: Hash converted to use plain SDS WIP 3.
antirez,2015-09-15 12:43:14,https://api.github.com/repos/antirez/redis/git/commits/777396aeba81c2346041d5d1a4b507693d6177e2,777396aeba81c2346041d5d1a4b507693d6177e2,Lazyfree: Hash converted to use plain SDS WIP 2.
antirez,2015-09-10 15:26:48,https://api.github.com/repos/antirez/redis/git/commits/1c247556c691bb61be65734be0670d50512f710c,1c247556c691bb61be65734be0670d50512f710c,Lazyfree: Hash converted to use plain SDS WIP 1.
antirez,2015-09-04 08:22:24,https://api.github.com/repos/antirez/redis/git/commits/afc4b9241c37f37d1ca15be1ec3130c6a9c04a2a,afc4b9241c37f37d1ca15be1ec3130c6a9c04a2a,DEBUG DIGEST Set type memory leak fixed.
antirez,2015-09-04 08:09:32,https://api.github.com/repos/antirez/redis/git/commits/34e489cb8cee04b52b5cbbfe53280ad8419d0a96,34e489cb8cee04b52b5cbbfe53280ad8419d0a96,SORT memory leak fixed.
antirez,2015-08-04 07:20:55,https://api.github.com/repos/antirez/redis/git/commits/a7c5be18a81c120b4bdeb139072f27c899fe1a4d,a7c5be18a81c120b4bdeb139072f27c899fe1a4d,Lazyfree: Sorted sets convereted to plain SDS. (several commits squashed)
antirez,2015-07-31 16:01:23,https://api.github.com/repos/antirez/redis/git/commits/86d48efbfd40cba447025c36ac6b0c5507b032fd,86d48efbfd40cba447025c36ac6b0c5507b032fd,Lazyfree: Convert Sets to use plains SDS (several commits squashed).
antirez,2015-07-31 12:59:54,https://api.github.com/repos/antirez/redis/git/commits/4ff3c17a20cca084acce8d0cb618547f09a18da1,4ff3c17a20cca084acce8d0cb618547f09a18da1,Lazyfree: client output buffers no longer use Redis Objects.
antirez,2015-07-30 09:46:31,https://api.github.com/repos/antirez/redis/git/commits/0c05436cef6f65cb2d62c8764522abefeb964314,0c05436cef6f65cb2d62c8764522abefeb964314,Lazyfree: a first implementation of non blocking DEL.
antirez,2015-09-30 15:41:52,https://api.github.com/repos/antirez/redis/git/commits/712ea7296dd92f3ccac15304373e8ea796851758,712ea7296dd92f3ccac15304373e8ea796851758,Call writeToClient() directly instead of the write handler.
antirez,2015-09-30 15:23:34,https://api.github.com/repos/antirez/redis/git/commits/01c08b508927adfb9ca6857db076c849f945e1be,01c08b508927adfb9ca6857db076c849f945e1be,"Fix processEventsWhileBlocked() to handle PENDING_WRITE clients.

After the introduction of the list with clients with pending writes, to
process clients incrementally outside of the event loop we also need to
process the pending writes list."
antirez,2015-09-30 14:56:02,https://api.github.com/repos/antirez/redis/git/commits/1e7153831dc4b03bf6e116430aa55a87707658a7,1e7153831dc4b03bf6e116430aa55a87707658a7,Refactoring: unlinkClient() added to lower freeClient() complexity.
antirez,2015-09-30 14:41:48,https://api.github.com/repos/antirez/redis/git/commits/fdb3be939ec30be0d39ea639c3988be8b1516c2c,fdb3be939ec30be0d39ea639c3988be8b1516c2c,Refactoring: new function to test if client has pending output.
antirez,2015-09-28 21:25:52,https://api.github.com/repos/antirez/redis/git/commits/825f65d2bdc86b4efae3d79fd39b0de3343c3474,825f65d2bdc86b4efae3d79fd39b0de3343c3474,"Reverse list of clients with pending writes.

May potentially improve locality... not exactly clear if this makes a
difference or not. But for sure is harmless."
antirez,2015-09-28 17:33:09,https://api.github.com/repos/antirez/redis/git/commits/063ecbd5e59d536d2db661c2953eaef016a60ee7,063ecbd5e59d536d2db661c2953eaef016a60ee7,writeToClient(): don't remove write handler if not needed.
antirez,2015-09-28 17:27:51,https://api.github.com/repos/antirez/redis/git/commits/b741a90ce9a7e0ff4e98523a49947a9ec545a62f,b741a90ce9a7e0ff4e98523a49947a9ec545a62f,handleClientsWithPendingWrites(): detect dead clients.
antirez,2015-09-28 17:06:36,https://api.github.com/repos/antirez/redis/git/commits/481a0db31504a01178392a9a7e93810f72faadf7,481a0db31504a01178392a9a7e93810f72faadf7,Move handleClientsWithPendingWrites() in networking.c.
antirez,2015-09-28 16:25:57,https://api.github.com/repos/antirez/redis/git/commits/1c7d87df0cd64fd786bebd5cb9636912504359d5,1c7d87df0cd64fd786bebd5cb9636912504359d5,Avoid installing the client write handler when possible.
antirez,2015-09-30 14:24:17,https://api.github.com/repos/antirez/redis/git/commits/d1b6a17d1ed64c919d55a27ea780e973196a5e98,d1b6a17d1ed64c919d55a27ea780e973196a5e98,"redis-cli pipe mode: don't stay in the write loop forever.

The code was broken and resulted in redis-cli --pipe to, most of the
times, writing everything received in the standard input to the Redis
connection socket without ever reading back the replies, until all the
content to write was written.

This means that Redis had to accumulate all the output in the output
buffers of the client, consuming a lot of memory.

Fixed thanks to the original report of anomalies in the behavior
provided by Twitter user @fsaintjacques."
antirez,2015-09-29 15:30:24,https://api.github.com/repos/antirez/redis/git/commits/622366aa74e8584a5a2ba9da8461432d3200ddb9,622366aa74e8584a5a2ba9da8461432d3200ddb9,Mark version of unstable branch in an unique way.
antirez,2015-09-15 07:37:30,https://api.github.com/repos/antirez/redis/git/commits/846da5b22e7877614694b4bda94fe0fdca34ada9,846da5b22e7877614694b4bda94fe0fdca34ada9,"Test: fix false positive in HSTRLEN test.

HINCRBY* tests later used the value ""tmp"" that was sometimes generated
by the random key generation function. The result was ovewriting what
Tcl expected to be inside Redis with another value, causing the next
HSTRLEN test to fail."
antirez,2015-09-14 21:05:40,https://api.github.com/repos/antirez/redis/git/commits/3c23b5ffd0d7dd01df79154c1701d4d3ded7bf66,3c23b5ffd0d7dd01df79154c1701d4d3ded7bf66,"GEORADIUS: Don't report duplicates when radius is huge.

Georadius works by computing the center + neighbors squares covering all
the area of the specified position and radius. Then a distance filter is
used to remove elements which are actually outside the range.

When a huge radius is used, like 5000 km or more, adjacent neighbors may
collide and be the same, leading to the reporting of the same element
multiple times. This only happens in the edge case of huge radius but is
not ideal.

A robust but slow solution would involve qsorting the range to remove
all the duplicates. However since the collisions are only in adjacent
boxes, for the way they are ordered in the code, it is much faster to
just check if the current box is the same as the previous one processed.

This commit adds a regression test for the bug.

Fixes #2767."
antirez,2015-09-14 10:35:51,https://api.github.com/repos/antirez/redis/git/commits/0a91fc459f8fb1c6ad37e6e8943bedd7903d8b69,0a91fc459f8fb1c6ad37e6e8943bedd7903d8b69,"Test: MOVE expire test improved.

Related to #2765."
antirez,2015-09-14 10:33:48,https://api.github.com/repos/antirez/redis/git/commits/4fec5ee1650131eed40044a1614bd3d70ba1696c,4fec5ee1650131eed40044a1614bd3d70ba1696c,"MOVE re-add TTL check fixed.

getExpire() returns -1 when no expire exists.

Related to #2765."
antirez,2015-09-14 10:28:22,https://api.github.com/repos/antirez/redis/git/commits/f529a01c1b52367b4337119ae8f86fd1d790a5ea,f529a01c1b52367b4337119ae8f86fd1d790a5ea,"MOVE now can move TTL metadata as well.

MOVE was not able to move the TTL: when a key was moved into a different
database number, it became persistent like if PERSIST was used.

In some incredible way (I guess almost nobody uses Redis MOVE) this bug
remained unnoticed inside Redis internals for many years.
Finally Andy Grunwald discovered it and opened an issue.

This commit fixes the bug and adds a regression test.

Close #2765."
antirez,2015-09-08 07:27:43,https://api.github.com/repos/antirez/redis/git/commits/33769f840cd53f03caf8f4b886a7c95182492027,33769f840cd53f03caf8f4b886a7c95182492027,Sentinel: command arity check added where missing.
antirez,2015-09-08 07:24:45,https://api.github.com/repos/antirez/redis/git/commits/0c62d955383a5df85ec78808cf7b79e94827e427,0c62d955383a5df85ec78808cf7b79e94827e427,"Merge pull request #2695 from rogerlz/unstable

redis-sentinel crash if ckquorum command is executed without args"
antirez,2015-09-07 14:09:23,https://api.github.com/repos/antirez/redis/git/commits/8e55537459f8be2d4310117f9f36c5a2ffa1451c,8e55537459f8be2d4310117f9f36c5a2ffa1451c,"Undo slaves state change on failed rdbSaveToSlavesSockets().

As Oran Agra suggested, in startBgsaveForReplication() when the BGSAVE
attempt returns an error, we scan the list of slaves in order to remove
them since there is no way to serve them currently.

However we check for the replication state BGSAVE_START, which was
modified by rdbSaveToSlaveSockets() before forking(). So when fork fails
the state of slaves remain BGSAVE_END and no cleanup is performed.

This commit fixes the problem by making rdbSaveToSlavesSockets() able to
undo the state change on fork failure."
antirez,2015-09-07 11:24:43,https://api.github.com/repos/antirez/redis/git/commits/5f813035033a8a355c211e9bfb1694d8025c6634,5f813035033a8a355c211e9bfb1694d8025c6634,"Merge pull request #2753 from ofirluzon/unstable

SCAN iter parsing changed from atoi to chartoull"
antirez,2015-09-07 09:14:50,https://api.github.com/repos/antirez/redis/git/commits/467de61c84965208aea6d446010a504181b453f0,467de61c84965208aea6d446010a504181b453f0,"Test: print info on HSTRLEN test failure.

This additional info may provide more clues about the test randomly
failing from time to time. Probably the failure is due to some previous
test that overwrites the logical content in the Tcl variable, but this
will make the problem more obvious."
kmiku7,2015-08-23 08:47:42,https://api.github.com/repos/antirez/redis/git/commits/413d8239dfc9ddc275b6ab87caa3819f7dfb20f8,413d8239dfc9ddc275b6ab87caa3819f7dfb20f8,fix boundary case for _dictNextPower
antirez,2015-08-21 13:29:07,https://api.github.com/repos/antirez/redis/git/commits/d036abe27d3a7bb985f94c14b596846e321dce39,d036abe27d3a7bb985f94c14b596846e321dce39,Log client details on SLAVEOF command having an effect.
antirez,2015-08-20 15:39:48,https://api.github.com/repos/antirez/redis/git/commits/f18e5b634dbca5a31b88e6cc4e4a571afed0753b,f18e5b634dbca5a31b88e6cc4e4a571afed0753b,"startBgsaveForReplication(): handle waiting slaves state change.

Before this commit, after triggering a BGSAVE it was up to the caller of
startBgsavForReplication() to handle slaves in WAIT_BGSAVE_START in
order to update them accordingly. However when the replication target is
the socket, this is not possible since the process of updating the
slaves and sending the FULLRESYNC reply must be coupled with the process
of starting an RDB save (the reason is, we need to send the FULLSYNC
command and spawn a child that will start to send RDB data to the slaves
ASAP).

This commit moves the responsibility of handling slaves in
WAIT_BGSAVE_START to startBgsavForReplication() so that for both
diskless and disk-based replication we have the same chain of
responsiblity. In order accomodate such change, the syncCommand() also
needs to put the client in the slave list ASAP (just after the initial
checks) and not at the end, so that startBgsavForReplication() can find
the new slave alrady in the list.

Another related change is what happens if the BGSAVE fails because of
fork() or other errors: we now remove the slave from the list of slaves
and send an error, scheduling the slave connection to be terminated.

As a side effect of this change the following errors found by
Oran Agra are fixed (thanks!):

1. rdbSaveToSlavesSockets() on failed fork will get the slaves cleaned
up, otherwise they remain in a wrong state forever since we setup them
for full resync before actually trying to fork.

2. updateSlavesWaitingBgsave() with replication target set as ""socket""
was broken since the function changed the slaves state from
WAIT_BGSAVE_START to WAIT_BGSAVE_END via
replicationSetupSlaveForFullResync(), so later rdbSaveToSlavesSockets()
will not find any slave in the right state (WAIT_BGSAVE_START) to feed."
seppo0010,2015-08-12 05:56:17,https://api.github.com/repos/antirez/redis/git/commits/97a2248309937a2cecb8b800af40526e06fc64c4,97a2248309937a2cecb8b800af40526e06fc64c4,"Fix race condition in unit/introspection

Make sure monitor is attached in one connection before issuing commands to be monitored in another one"
antirez,2015-08-07 10:04:35,https://api.github.com/repos/antirez/redis/git/commits/bea1259190a9f3c3850b074ef7d0af0bc3ea36a7,bea1259190a9f3c3850b074ef7d0af0bc3ea36a7,"slaveTryPartialResynchronization and syncWithMaster: better synergy.

It is simpler if removing the read event handler from the FD is up to
slaveTryPartialResynchronization, after all it is only called in the
context of syncWithMaster.

This commit also makes sure that on error all the event handlers are
removed from the socket before closing it."
antirez,2015-08-06 14:49:30,https://api.github.com/repos/antirez/redis/git/commits/88c716a0f57084bc7c4043371a95895664e3a578,88c716a0f57084bc7c4043371a95895664e3a578,syncWithMaster(): non blocking state machine.
antirez,2015-08-06 13:08:54,https://api.github.com/repos/antirez/redis/git/commits/55cb64bbfb7d4a32fd1289137631f0f0de4cd2d1,55cb64bbfb7d4a32fd1289137631f0f0de4cd2d1,"flushSlavesOutputBuffers(): details clarified via comments.

Talking with @oranagra we had to reason a little bit to understand if
this function could ever flush the output buffers of the wrong slaves,
having online state but actually not being ready to receive writes
before the first ACK is received from them (this happens with diskless
replication).

Next time we'll just read this comment."
antirez,2015-08-06 07:49:38,https://api.github.com/repos/antirez/redis/git/commits/ce5761e0618b8d5788c2f6f8f6a514a77040ab24,ce5761e0618b8d5788c2f6f8f6a514a77040ab24,startBgsaveForReplication(): log what you really do.
antirez,2015-08-06 07:41:11,https://api.github.com/repos/antirez/redis/git/commits/fd08839a3a9e8dba242886286f6d182044686e69,fd08839a3a9e8dba242886286f6d182044686e69,Client structure comments improved.
antirez,2015-08-06 07:23:23,https://api.github.com/repos/antirez/redis/git/commits/3e6d4d599a07ec347ef2f77c6b292223e7be6a16,3e6d4d599a07ec347ef2f77c6b292223e7be6a16,"Replication: add REPLCONF CAPA EOF support.

Add the concept of slaves capabilities to Redis, the slave now presents
to the Redis master with a set of capabilities in the form:

    REPLCONF capa SOMECAPA capa OTHERCAPA ...

This has the effect of setting slave->slave_capa with the corresponding
SLAVE_CAPA macros that the master can test later to understand if it
the slave will understand certain formats and protocols of the
replication process. This makes it much simpler to introduce new
replication capabilities in the future in a way that don't break old
slaves or masters.

This patch was designed and implemented together with Oran Agra
(@oranagra)."
antirez,2015-08-05 14:51:50,https://api.github.com/repos/antirez/redis/git/commits/7ab3af0edc238c869827c185f997c0a99f4506b5,7ab3af0edc238c869827c185f997c0a99f4506b5,"Fix synchronous readline ""\n"" handling.

Our function to read a line with a timeout handles newlines as requests
to refresh the timeout, however the code kept subtracting the buffer
size left every time a newline was received, for a bug in the loop
logic. Fixed by this commit."
antirez,2015-08-05 14:49:16,https://api.github.com/repos/antirez/redis/git/commits/55ba77270363400625f4563788d8f842408389a2,55ba77270363400625f4563788d8f842408389a2,"Fix replication slave pings period.

For PINGs we use the period configured by the user, but for the newlines
of slaves waiting for an RDB to be created (including slaves waiting for
the FULLRESYNC reply) we need to ping with frequency of 1 second, since
the timeout is fixed and needs to be refreshed."
antirez,2015-08-05 12:05:34,https://api.github.com/repos/antirez/redis/git/commits/1d5949734337fb9873ca0a257c4163add43cb152,1d5949734337fb9873ca0a257c4163add43cb152,Fix RDB encoding test for new csvdump format.
antirez,2015-08-05 11:58:56,https://api.github.com/repos/antirez/redis/git/commits/54ece2c583c3205ad10a6793d7de5dc5dcfda316,54ece2c583c3205ad10a6793d7de5dc5dcfda316,Remove slave state change handled by replicationSetupSlaveForFullResync().
antirez,2015-08-05 11:34:46,https://api.github.com/repos/antirez/redis/git/commits/15de6b108b5d67c4d21fc67b50b1297c4c052bc6,15de6b108b5d67c4d21fc67b50b1297c4c052bc6,"Make sure we re-emit SELECT after each new slave full sync setup.

In previous commits we moved the FULLRESYNC to the moment we start the
BGSAVE, so that the offset we provide is the right one. However this
also means that we need to re-emit the SELECT statement every time a new
slave starts to accumulate the changes.

To obtian this effect in a more clean way, the function that sends the
FULLRESYNC reply was overloaded with a more important role of also doing
this and chanigng the slave state. So it was renamed to
replicationSetupSlaveForFullResync() to better reflect what it does now."
antirez,2015-08-05 10:27:15,https://api.github.com/repos/antirez/redis/git/commits/175707e550658cf592a6d8ac7e3284649c274dad,175707e550658cf592a6d8ac7e3284649c274dad,Test: csvdump now scans all DBs.
antirez,2015-08-05 09:23:22,https://api.github.com/repos/antirez/redis/git/commits/a5a06a8ecd463ab32129134ed567ef07360eeb6a,a5a06a8ecd463ab32129134ed567ef07360eeb6a,Don't send SELECT to slaves in WAIT_BGSAVE_START state.
antirez,2015-08-05 07:18:54,https://api.github.com/repos/antirez/redis/git/commits/76e0be416d9ba1a81a91ddda08c0dad6e1c9fbe6,76e0be416d9ba1a81a91ddda08c0dad6e1c9fbe6,PSYNC test: also test the vanilla SYNC.
antirez,2015-08-05 06:41:57,https://api.github.com/repos/antirez/redis/git/commits/62b5c60ead59e29663a44a79148ee4ffdf2f6ec2,62b5c60ead59e29663a44a79148ee4ffdf2f6ec2,syncCommand() comments improved.
antirez,2015-08-04 14:56:00,https://api.github.com/repos/antirez/redis/git/commits/292fec058a32323d5aa52dddfa86be280e29fe65,292fec058a32323d5aa52dddfa86be280e29fe65,"PSYNC initial offset fix.

This commit attempts to fix a bug involving PSYNC and diskless
replication (currently experimental) found by Yuval Inbar from Redis Labs
and that was later found to have even more far reaching effects (the bug also
exists when diskstore is off).

The gist of the bug is that, a Redis master replies with +FULLRESYNC to
a PSYNC attempt that fails and requires a full resynchronization.
However, the baseline offset sent along with FULLRESYNC was always the
current master replication offset. This is not ok, because there are
many reasosn that may delay the RDB file creation. And... guess what,
the master offset we communicate must be the one of the time the RDB
was created. So for example:

1) When the BGSAVE for replication is delayed since there is one
   already but is not good for replication.
2) When the BGSAVE is not needed as we attach one currently ongoing.
3) When because of diskless replication the BGSAVE is delayed.

In all the above cases the PSYNC reply is wrong and the slave may
reconnect later claiming to need a wrong offset: this may cause
data curruption later."
antirez,2015-08-04 11:14:25,https://api.github.com/repos/antirez/redis/git/commits/d1ff328170a161fc002e47954e5dd0e0989d2ce9,d1ff328170a161fc002e47954e5dd0e0989d2ce9,"Test PSYNC with diskless replication.

Thanks to Oran Agra from Redis Labs for providing this patch."
antirez,2015-07-29 10:27:25,https://api.github.com/repos/antirez/redis/git/commits/6233d210cd624ba3645426f1a6b52f5de0388dc1,6233d210cd624ba3645426f1a6b52f5de0388dc1,"Sentinel: add more commonly useful sections to INFO.

Debugging is hard without those when there are problems like the one
investigated in issue #2700."
antirez,2015-07-29 10:13:20,https://api.github.com/repos/antirez/redis/git/commits/4bc42ca7f6608c3e77c451c580c4b9c629480169,4bc42ca7f6608c3e77c451c580c4b9c629480169,checkTcpBacklogSetting() now called in Sentinel mode too.
antirez,2015-07-28 15:01:19,https://api.github.com/repos/antirez/redis/git/commits/3c8861a73af8a472053fc3c0b47452a2b6051d53,3c8861a73af8a472053fc3c0b47452a2b6051d53,Support for CLIENT KILL TYPE MASTER.
antirez,2015-07-28 14:58:04,https://api.github.com/repos/antirez/redis/git/commits/e6f39338e6464fb29f630120d8949b0d535e2e3f,e6f39338e6464fb29f630120d8949b0d535e2e3f,CLIENT_MASTER introduced.
antirez,2015-07-28 14:14:52,https://api.github.com/repos/antirez/redis/git/commits/c1e94b6b9c6432ade2ec427dc8602189c19758e7,c1e94b6b9c6432ade2ec427dc8602189c19758e7,"Force slaves to resync after unsuccessful PSYNC.

Using chained replication where C is slave of B which is in turn slave of
A, if B reconnects the replication link with A but discovers it is no
longer possible to PSYNC, slaves of B must be disconnected and PSYNC
not allowed, since the new B dataset may be completely different after
the synchronization with the master.

Note that there are varius semantical differences in the way this is
handled now compared to the past. In the past the semantics was:

1. When a slave lost connection with its master, disconnected the chained
slaves ASAP. Which is not needed since after a successful PSYNC with the
master, the slaves can continue and don't need to resync in turn.

2. However after a failed PSYNC the replication backlog was not reset, so a
slave was able to PSYNC successfully even if the instance did a full
sync with its master, containing now an entirely different data set.

Now instead chained slaves are not disconnected when the slave lose the
connection with its master, but only when it is forced to full SYNC with
its master. This means that if the slave having chained slaves does a
successful PSYNC all its slaves can continue without troubles.

See issue #2694 for more details."
antirez,2015-07-28 12:36:50,https://api.github.com/repos/antirez/redis/git/commits/278ea9d16b24add67379e569c236c69fecf55bdb,278ea9d16b24add67379e569c236c69fecf55bdb,replicationHandleMasterDisconnection() belongs to replication.c.
antirez,2015-07-28 09:19:20,https://api.github.com/repos/antirez/redis/git/commits/54c71f2d9678881b22577951f4e5b6823d0c193e,54c71f2d9678881b22577951f4e5b6823d0c193e,RDMF: Redis -> Server in adjustOpenFilesLimit().
antirez,2015-07-28 09:10:42,https://api.github.com/repos/antirez/redis/git/commits/813ff7fdde5d03bfe7109c4a8991fd9509fafd8f,813ff7fdde5d03bfe7109c4a8991fd9509fafd8f,"Avoid magic ""0"" argument to prepareForShutdown().

Backported from Disque."
antirez,2015-07-28 09:03:01,https://api.github.com/repos/antirez/redis/git/commits/5cfb792777c18778092334bf251d97b681afda84,5cfb792777c18778092334bf251d97b681afda84,"RDMF: dictRedisObjectDestructor -> dictObjectDestructor."""
antirez,2015-07-28 08:14:33,https://api.github.com/repos/antirez/redis/git/commits/a83e79b176eb0bce412668539edf04978596a052,a83e79b176eb0bce412668539edf04978596a052,Use mstime_t as return value of mstime().
antirez,2015-07-27 13:08:58,https://api.github.com/repos/antirez/redis/git/commits/02b1d5213da7c05605766bbbc33a0cdefb359b99,02b1d5213da7c05605766bbbc33a0cdefb359b99,RDMF: use representClusterNodeFlags() generic name.
antirez,2015-07-27 12:55:45,https://api.github.com/repos/antirez/redis/git/commits/3325a9b11f9761aaee5f7993b555be44e3d51342,3325a9b11f9761aaee5f7993b555be44e3d51342,RDMF: more names updated.
antirez,2015-07-27 07:41:48,https://api.github.com/repos/antirez/redis/git/commits/32f80e2f1bf42d0508f1114a9dddd91c4719eb8e,32f80e2f1bf42d0508f1114a9dddd91c4719eb8e,RDMF: More consistent define names.
antirez,2015-07-26 21:17:55,https://api.github.com/repos/antirez/redis/git/commits/40eb548a80797b93cc733876654ff0978d7381cf,40eb548a80797b93cc733876654ff0978d7381cf,RDMF: REDIS_OK REDIS_ERR -> C_OK C_ERR.
antirez,2015-07-26 13:29:53,https://api.github.com/repos/antirez/redis/git/commits/2d9e3eb107b6b6289d5e3a51a32b3a018c96103c,2d9e3eb107b6b6289d5e3a51a32b3a018c96103c,RDMF: redisAssert -> serverAssert.
antirez,2015-07-26 13:28:00,https://api.github.com/repos/antirez/redis/git/commits/14ff572482cfe02c5ac61a1816cb8099d458e499,14ff572482cfe02c5ac61a1816cb8099d458e499,RDMF: OBJ_ macros for object related stuff.
antirez,2015-07-26 13:20:46,https://api.github.com/repos/antirez/redis/git/commits/554bd0e7bd81715e319cafda437ed2aebd44b6e9,554bd0e7bd81715e319cafda437ed2aebd44b6e9,"RDMF: use client instead of redisClient, like Disque."
antirez,2015-07-26 13:17:43,https://api.github.com/repos/antirez/redis/git/commits/424fe9afd9264991cddb502204276a244537c87f,424fe9afd9264991cddb502204276a244537c87f,RDMF: redisLog -> serverLog.
antirez,2015-07-26 13:14:57,https://api.github.com/repos/antirez/redis/git/commits/cef054e86856463d3e79d4a5048507377c85eab7,cef054e86856463d3e79d4a5048507377c85eab7,RDMF (Redis/Disque merge friendlyness) refactoring WIP 1.
antirez,2015-07-25 15:50:47,https://api.github.com/repos/antirez/redis/git/commits/b684e2dad1d884af7bf1047febbb54ee6e0324ba,b684e2dad1d884af7bf1047febbb54ee6e0324ba,deps/hiredis SDS updated to version 2.0.0.
antirez,2015-07-25 15:41:56,https://api.github.com/repos/antirez/redis/git/commits/c6333def1347c104e0861d21721121824554acee,c6333def1347c104e0861d21721121824554acee,SDS: Copyright updated further.
antirez,2015-07-25 15:25:44,https://api.github.com/repos/antirez/redis/git/commits/cb2782c314f0af3df56853974f7ba5541c095eeb,cb2782c314f0af3df56853974f7ba5541c095eeb,SDS: changes to unify Redis SDS with antirez/sds repo.
antirez,2015-07-25 15:08:44,https://api.github.com/repos/antirez/redis/git/commits/9894495c5a8e37a8e1dad9698e49cf842a027b2e,9894495c5a8e37a8e1dad9698e49cf842a027b2e,SDS: Copyright notice updated.
antirez,2015-07-25 15:05:20,https://api.github.com/repos/antirez/redis/git/commits/11425c89cf4a2c36941ac7b85c5f4d74636d4e45,11425c89cf4a2c36941ac7b85c5f4d74636d4e45,SDS: sdsjoinsds() call ported from antirez/sds fork.
rogerlz,2015-07-24 12:08:50,https://api.github.com/repos/antirez/redis/git/commits/ef29748d0d758c956f8adca70bc74902b0c2e20c,ef29748d0d758c956f8adca70bc74902b0c2e20c,Check args before run ckquorum. Fix issue #2635
antirez,2015-07-24 08:15:04,https://api.github.com/repos/antirez/redis/git/commits/6b836b6b4148a3623e35807e998097865b9ebb3a,6b836b6b4148a3623e35807e998097865b9ebb3a,"Jemalloc: use LG_QUANTUM of 3 for AMD64 and I386.

This gives us a 24 bytes size class which is dict.c dictEntry size, thus
improving the memory efficiency of Redis significantly.
Moreover other non 16 bytes aligned tiny classes are added that further
reduce the fragmentation of the allocator.

Technically speaking LG_QUANTUM should be 4 on i386 / AMD64 because of
SSE types and other 16 bytes types, however we don't use those, and our
jemalloc only targets Redis.

New versions of Jemalloc will have an explicit configure switch in order
to specify the quantum value for a platform without requiring any change
to the Jemalloc source code: we'll switch to this system when available.

This change was originally proposed by Oran Agra (@oranagra) as a change
to the Jemalloc script to generate the size classes define. We ended
doing it differently by changing LG_QUANTUM since it is apparently the
supported Jemalloc method to obtain a 24 bytes size class, moreover it
also provides us other potentially useful size classes.

Related to issue #2510."
antirez,2015-07-24 07:39:12,https://api.github.com/repos/antirez/redis/git/commits/64fcd0e6ff1f7a6b85f5432767a298a95eacfe00,64fcd0e6ff1f7a6b85f5432767a298a95eacfe00,SDS: avoid compiler warning in sdsIncrLen().
antirez,2015-07-24 06:49:23,https://api.github.com/repos/antirez/redis/git/commits/935251259f19666bb0d8b7a83db771ca49d5e182,935251259f19666bb0d8b7a83db771ca49d5e182,Merge branch 'sds' into unstable
antirez,2015-07-23 07:16:47,https://api.github.com/repos/antirez/redis/git/commits/ea9bd243ecf02760ac7a5e9a25bd2d067b71ee84,ea9bd243ecf02760ac7a5e9a25bd2d067b71ee84,"SDS: use type 8 if we are likely to append to the string.

When empty strings are created, or when sdsMakeRoomFor() is called, we
are likely into an appending pattern. Use at least type 8 SDS strings
since TYPE 5 does not remember the free allocation size and requires to
call sdsMakeRoomFor() at every new piece appended."
antirez,2015-07-20 14:18:06,https://api.github.com/repos/antirez/redis/git/commits/cf68f4ee6a4c466b893fbb269f6aff14c7c75e6a,cf68f4ee6a4c466b893fbb269f6aff14c7c75e6a,"Fix SDS type 5 sdsIncrLen() bug and added test.

Thanks to @oranagra for spotting this error."
antirez,2015-07-17 09:00:44,https://api.github.com/repos/antirez/redis/git/commits/bcb4d091233a98b025aac18b3a7e4966356323eb,bcb4d091233a98b025aac18b3a7e4966356323eb,"Merge pull request #2636 from badboy/cluster-lock-fix

Cluster lock fix"
antirez,2015-07-17 08:55:58,https://api.github.com/repos/antirez/redis/git/commits/29391002f6825d972718225354b24059a11531cd,29391002f6825d972718225354b24059a11531cd,"Merge pull request #2644 from MOON-CLJ/command_info_fix

pfcount support multi keys"
Abioy,2015-07-10 07:25:40,https://api.github.com/repos/antirez/redis/git/commits/427794d845534ea0e84e0ef9582f9ae5800c96cf,427794d845534ea0e84e0ef9582f9ae5800c96cf,"bugfix: errno might change before logging

Signed-off-by: Yongyue Sun <abioy.sun@gmail.com>"
Kiemes,2015-07-15 14:11:40,https://api.github.com/repos/antirez/redis/git/commits/6142ddc6ebf2bdaf75dca73c795e36d1f0470422,6142ddc6ebf2bdaf75dca73c795e36d1f0470422,"Fix: aof_delayed_fsync is not reset

aof_delayed_fsync was not set to 0 when calling CONFIG RESETSTAT"
antirez,2015-07-17 08:34:43,https://api.github.com/repos/antirez/redis/git/commits/f049cfdb0dbb92d64a274ecdaefa4dcc7cfee06d,f049cfdb0dbb92d64a274ecdaefa4dcc7cfee06d,"Merge pull request #2676 from july2993/unstable

config tcp-keepalive should be numerical field not bool"
antirez,2015-07-16 08:54:12,https://api.github.com/repos/antirez/redis/git/commits/25e1cb3f040262deb13c9be6a07e19b6cac485f0,25e1cb3f040262deb13c9be6a07e19b6cac485f0,"Client timeout handling improved.

The previos attempt to process each client at least once every ten
seconds was not a good idea, because:

1. Usually because of the past min iterations set to 50, you get much
better processing period most of the times.

2. However when there are many clients and a normal setting for
server.hz, the edge case is triggered, and waiting 10 seconds for a
BLPOP that asked for 1 second is not ok.

3. Moreover, because of the high min-itereations limit of 50, when HZ
was set to an high value, the actual behavior was to process a lot of
clients per second.

Also the function checking for timeouts called gettimeofday() at each
iteration which can be costly.

The new implementation will try to process each client once per second,
gets the current time as argument, and does not attempt to process more
than 5 clients per iteration if not needed.

So now:

1. The CPU usage of an idle Redis process is the same or better.
2. The CPU usage of a busy Redis process is the same or better.
3. However a non trivial amount of work may be performed per iteration
when there are many many clients. In this particular case the user may
want to raise the ""HZ"" value if needed.

Btw with 4000 clients it was still not possible to noticy any actual
latency created by processing 400 clients per second, since the work
performed for each client is pretty small."
july2993,2015-07-14 14:32:53,https://api.github.com/repos/antirez/redis/git/commits/92c146dfd3f756855a37cb50c8fe29c9fb4b12c2,92c146dfd3f756855a37cb50c8fe29c9fb4b12c2,config tcp-keepalive should be numerical field not bool
antirez,2015-07-16 07:26:36,https://api.github.com/repos/antirez/redis/git/commits/e0bb454a16eff5596814e5773540c7e5e5409bde,e0bb454a16eff5596814e5773540c7e5e5409bde,Clarify a comment in clientsCron().
antirez,2015-07-16 07:14:39,https://api.github.com/repos/antirez/redis/git/commits/3da97ea67f3b25097d5a57aeda9ce5d94461035e,3da97ea67f3b25097d5a57aeda9ce5d94461035e,Add sdshdr5 to DEBUG structsize.
antirez,2015-07-15 10:24:49,https://api.github.com/repos/antirez/redis/git/commits/0ab27a4594aa73ffdabf2afb935d85ab6c03f0ee,0ab27a4594aa73ffdabf2afb935d85ab6c03f0ee,"SDS: New sds type 5 implemented.

This is an attempt to use the refcount feature of the sds.c fork
provided in the Pull Request #2509. A new type, SDS_TYPE_5 is introduced
having a one byte header with just the string length, without
information about the available additional length at the end of the
string (this means that sdsMakeRoomFor() will be required each time
we want to append something, since the string will always report to have
0 bytes available).

More work needed in order to avoid common SDS functions will pay the
cost of this type. For example both sdscatprintf() and sdscatfmt()
should try to upgrade to SDS_TYPE_8 ASAP when appending chars."
antirez,2015-07-14 15:33:30,https://api.github.com/repos/antirez/redis/git/commits/056a0ca199edbc9f4644684468b8833884e74cd7,056a0ca199edbc9f4644684468b8833884e74cd7,"Fix redis-benchmark sds binding.

Same as redis-cli, now redis-benchmark requires to use hiredis sds copy
since it is different compared to the memory optimized fork of Redis
sds."
antirez,2015-07-14 14:04:00,https://api.github.com/repos/antirez/redis/git/commits/a76b380e06d6758dcd84277003ca7af520c2b422,a76b380e06d6758dcd84277003ca7af520c2b422,Fix DEBUG structsize output.
oranagra,2015-04-09 07:37:01,https://api.github.com/repos/antirez/redis/git/commits/f15df8ba5db09bdf4be58c53930799d82120cc34,f15df8ba5db09bdf4be58c53930799d82120cc34,sds size classes - memory optimization
antirez,2015-07-14 15:15:37,https://api.github.com/repos/antirez/redis/git/commits/0f64080dcb9f44c923379f909aae82f6c2b2ed19,0f64080dcb9f44c923379f909aae82f6c2b2ed19,"DEBUG HTSTATS <dbid> added.

The command reports information about the hash table internal state
representing the specified database ID.

This can be used in order to investigate rehashings, memory usage issues
and for other debugging purposes."
antirez,2015-07-13 16:06:24,https://api.github.com/repos/antirez/redis/git/commits/4c7ee0d5848ab12b9d2b18bca62cffcbfac0e885,4c7ee0d5848ab12b9d2b18bca62cffcbfac0e885,"EXISTS is now variadic.

The new return value is the number of keys existing, among the ones
specified in the command line, counting the same key multiple times if
given multiple times (and if it exists).

See PR #2667."
antirez,2015-07-13 13:30:11,https://api.github.com/repos/antirez/redis/git/commits/5c4fcaf3fe448c5575a9911edbcd421c6dbebb54,5c4fcaf3fe448c5575a9911edbcd421c6dbebb54,"Geo: fix command table keys position indexes for three commands.

GEOHASH, GEOPOS and GEODIST where declared as commands not accepting
keys, so the Redis Cluster redirection did not worked.

Close #2671."
antirez,2015-07-09 15:42:59,https://api.github.com/repos/antirez/redis/git/commits/b96af595a5fddbbdcbf78ed3c51acd60976416f4,b96af595a5fddbbdcbf78ed3c51acd60976416f4,"GEOENCODE / GEODECODE commands removed.

Rationale:

1. The commands look like internals exposed without a real strong use
case.
2. Whatever there is an use case, the client would implement the
commands client side instead of paying RTT just to use a simple to
reimplement library.
3. They add complexity to an otherwise quite straightforward API.

So for now KILLED ;-)"
antirez,2015-07-09 09:27:53,https://api.github.com/repos/antirez/redis/git/commits/965abcf10a2e0453ddc88dd96782418ff1d587f9,965abcf10a2e0453ddc88dd96782418ff1d587f9,Geo: use ULL suffix for unsigned 64 bit constants.
antirez,2015-07-09 09:25:10,https://api.github.com/repos/antirez/redis/git/commits/1e12784259483991710183d127dc3abd4bd21f56,1e12784259483991710183d127dc3abd4bd21f56,Geo: -Ofast breaks builds on older GCCs.
antirez,2015-07-06 16:39:25,https://api.github.com/repos/antirez/redis/git/commits/5e04189887ed9100577374cede428c62d23fabe4,5e04189887ed9100577374cede428c62d23fabe4,"Geo: validate long,lat passed by user via API"
antirez,2015-07-03 07:47:08,https://api.github.com/repos/antirez/redis/git/commits/5254c2d3c350f4edbb2f5dfde506fcb1ec58ee66,5254c2d3c350f4edbb2f5dfde506fcb1ec58ee66,Removed useless tryObjectEncoding() call from ZRANK.
antirez,2015-07-01 14:12:08,https://api.github.com/repos/antirez/redis/git/commits/4160bf0448e93e25607f844a149b1418e3fa3dd4,4160bf0448e93e25607f844a149b1418e3fa3dd4,"Geo: sync faster decoding from krtm that synched from Ardb.

Instead of successive divisions in iteration the new code uses bitwise
magic to interleave / deinterleave two 32bit values into a 64bit one.
All tests still passing and is measurably faster, so worth it."
antirez,2015-06-29 14:34:02,https://api.github.com/repos/antirez/redis/git/commits/d308cadc8a18fe8aea41898d8d881f91103617a0,d308cadc8a18fe8aea41898d8d881f91103617a0,Geo: added my copyright notice in modified files.
antirez,2015-06-29 14:02:33,https://api.github.com/repos/antirez/redis/git/commits/69c5b27273272c93822a5d2bd776ddc11210e88a,69c5b27273272c93822a5d2bd776ddc11210e88a,"Geo: support units only in abbreviated form.

I'm not a strong believer in multiple syntax for the same stuff, so
now units can be specified only as m, km, ft, mi."
antirez,2015-06-29 13:57:17,https://api.github.com/repos/antirez/redis/git/commits/083acbebc85191314840a02a8618f051f49d0319,083acbebc85191314840a02a8618f051f49d0319,"Geo: remove static declarations.

Stack traces produced by Redis on crash are the most useful tool we
have to fix non easily reproducible crashes, or even easily reproducible
ones where the user just posts a bug report and does not collaborate
furhter.

By declaring functions ""static"" they no longer show up in the stack
trace."
antirez,2015-06-29 10:44:31,https://api.github.com/repos/antirez/redis/git/commits/f108c687ad122d76e8468f98934255ffb51cc7e8,f108c687ad122d76e8468f98934255ffb51cc7e8,Geo: GEODIST and tests.
antirez,2015-06-29 10:07:18,https://api.github.com/repos/antirez/redis/git/commits/a12192f5ff33298eb7082cc3f6e2de17957e7d26,a12192f5ff33298eb7082cc3f6e2de17957e7d26,"Geo: command function names converted to lowercase, as elsewhere.

In Redis MULTIWORDCOMMANDNAME are mapped to functions where the command
name is all lowercase: multiwordcommandnameCommand()."
antirez,2015-06-29 08:47:07,https://api.github.com/repos/antirez/redis/git/commits/aae0a1f9cce0ced9e6aa2e76977d6db72f6b4edc,aae0a1f9cce0ced9e6aa2e76977d6db72f6b4edc,Geo: GEOPOS command and tests.
antirez,2015-06-29 07:52:23,https://api.github.com/repos/antirez/redis/git/commits/f6edd0cb933c1c82c3e9e9dd33597654602a1ba4,f6edd0cb933c1c82c3e9e9dd33597654602a1ba4,Geo: GEORADIUS COUNT tests.
antirez,2015-06-29 07:46:58,https://api.github.com/repos/antirez/redis/git/commits/7cd2a4e19600e827afe883b36cb899b0a5473187,7cd2a4e19600e827afe883b36cb899b0a5473187,Geo: GEOENCODE test fixed for new return value.
antirez,2015-06-29 07:39:34,https://api.github.com/repos/antirez/redis/git/commits/ddc7b85c5f28fd96009a006e5bed5c775bc7f367,ddc7b85c5f28fd96009a006e5bed5c775bc7f367,Geo: GEOENCODE: fix command arity check.
antirez,2015-06-29 07:34:05,https://api.github.com/repos/antirez/redis/git/commits/6a8e108e2d220e95668a14db4bc891bfe1bb9743,6a8e108e2d220e95668a14db4bc891bfe1bb9743,"Geo: GEOENCODE now returns score ranges.

If GEOENCODE must be our door to enter the Geocoding implementation
details and do fancy things client side, than return the scores as well
so that we can query the sorted sets directly if we wish to do the same
search multiple times, or want to compute the boxes in the client side
to refine our search needs."
antirez,2015-06-29 07:24:22,https://api.github.com/repos/antirez/redis/git/commits/1884bff12d1e91983e91c27637b5fa8854f68cba,1884bff12d1e91983e91c27637b5fa8854f68cba,Geo: fix comment indentation.
antirez,2015-06-29 07:21:31,https://api.github.com/repos/antirez/redis/git/commits/db3df441844f8479cd341d1e2d7553139ee4cfec,db3df441844f8479cd341d1e2d7553139ee4cfec,Geo: debugging printf calls removed.
antirez,2015-06-29 07:20:07,https://api.github.com/repos/antirez/redis/git/commits/6d21027a23864500aadcc200fecfc594b98e9c88,6d21027a23864500aadcc200fecfc594b98e9c88,"Geo: GEOADD form using radius removed.

Can't immagine how this is useful in the context of the API exported by
Redis, and we are always in time to add more bloat if needed, later."
antirez,2015-06-29 07:16:27,https://api.github.com/repos/antirez/redis/git/commits/7d59e0a8c3fb42bcf0e362a41f8abd01c1509429,7d59e0a8c3fb42bcf0e362a41f8abd01c1509429,Geo: commands top comment as in other Redis code.
antirez,2015-06-27 08:23:58,https://api.github.com/repos/antirez/redis/git/commits/a3b07b1718368447f76788dd8febe01635a11f69,a3b07b1718368447f76788dd8febe01635a11f69,Geo: COUNT option for GEORADIUS.
antirez,2015-06-27 07:43:47,https://api.github.com/repos/antirez/redis/git/commits/cd91beea1c11a37be9811260c16dfe8eb8e57e9e,cd91beea1c11a37be9811260c16dfe8eb8e57e9e,Geo: only one way to specify any given option.
antirez,2015-06-27 07:38:39,https://api.github.com/repos/antirez/redis/git/commits/710c05ac2ab0eedc56cc19ba16ad8fc40d24e81d,710c05ac2ab0eedc56cc19ba16ad8fc40d24e81d,Geo: remove useless variable. geoRadiusGeneric() top comment improved.
MOON-CLJ,2015-06-26 09:58:45,https://api.github.com/repos/antirez/redis/git/commits/c2322357343756b56adefd8f2f70dc09f43b1bb8,c2322357343756b56adefd8f2f70dc09f43b1bb8,pfcount support multi keys
antirez,2015-06-25 16:05:45,https://api.github.com/repos/antirez/redis/git/commits/fa9d62d34fd739160b2a45b713e912a6c4dabb75,fa9d62d34fd739160b2a45b713e912a6c4dabb75,"Geo: from lat,lon API to lon,lat API according to GIS standard

The GIS standard and all the major DBs implementing GIS related
functions take coordinates as x,y that is longitude,latitude.
It was a bad start for Redis to do things differently, so even if this
means that existing users of the Geo module will be required to change
their code, Redis now conforms to the standard.

Usually Redis is very backward compatible, but this is not an exception
to this rule, since this is the first Geo implementation entering the
official Redis source code. It is not wise to try to be backward
compatible with code forks... :-)

Close #2637."
antirez,2015-06-24 15:37:20,https://api.github.com/repos/antirez/redis/git/commits/03ce18962848fdd1b7a8427a7365096a0c7b3d4f,03ce18962848fdd1b7a8427a7365096a0c7b3d4f,Geo: explain increment magic in membersOfGeoHashBox().
antirez,2015-06-24 14:34:17,https://api.github.com/repos/antirez/redis/git/commits/5fd756bf13e05429318ceafddb89b5f8039ff7b9,5fd756bf13e05429318ceafddb89b5f8039ff7b9,Geo: GEOHASH command test.
antirez,2015-06-24 14:31:14,https://api.github.com/repos/antirez/redis/git/commits/87521f44550a4a7825af5decb8add0eab3ff8812,87521f44550a4a7825af5decb8add0eab3ff8812,"Geo: GEOHASH command added, returning standard geohash strings."
badboy,2015-06-24 12:48:48,https://api.github.com/repos/antirez/redis/git/commits/c7462ca9ffd8ccafee2605bd5c69e6a5bc5b240a,c7462ca9ffd8ccafee2605bd5c69e6a5bc5b240a,"Don't include sysctl header

It's not needed (anymore) and is not available on Solaris."
badboy,2015-06-24 10:55:00,https://api.github.com/repos/antirez/redis/git/commits/d28c51d166f554633da2fd44a26ecec2be420ee7,d28c51d166f554633da2fd44a26ecec2be420ee7,Do not attempt to lock on Solaris
antirez,2015-06-24 08:42:16,https://api.github.com/repos/antirez/redis/git/commits/55c4a365d74c5218a9303e31f1f7b67c424c9c2c,55c4a365d74c5218a9303e31f1f7b67c424c9c2c,"Geo: Fix geohashEstimateStepsByRadius() step underestimation.

The returned step was in some case not enough towards normal
coordinates (for example when our search position was was already near the
margin of the central area, and we had to match, using the east or west
neighbor, a very far point). Example:

    geoadd points 67.575457940146066 -62.001317572780565 far
    geoadd points 66.685439060295664 -58.925040587282297 center
    georadius points 66.685439060295664 -58.925040587282297 200 km

In the above case the code failed to find a match (happens at smaller
latitudes too) even if far and center are at less than 200km.

Another fix introduced by this commit is a progressively larger area
towards the poles, since meridians are a lot less far away, so we need
to compensate for this.

The current implementation works comparably to the Tcl brute-force
stress tester implemented in the fuzzy test in the geo.tcl unit for
latitudes between -70 and 70, and is pretty accurate over +/-80 too,
with sporadic false negatives.

A more mathematically clean implementation is possible by computing the
meridian distance at the specified latitude and computing the step
according to it."
antirez,2015-06-23 13:02:37,https://api.github.com/repos/antirez/redis/git/commits/cf89a19f162ce0550b1c3cfbaf11a64659856ded,cf89a19f162ce0550b1c3cfbaf11a64659856ded,"Geo: GEORADIUS fuzzy testing by reimplementing it in Tcl.

We set random points in the world, pick a random position, and check if
the returned points by Redis match the ones computed by Tcl by brute
forcing all the points using the distance between two points formula.

This approach is sounding since immediately resulted in finding a bug in
the original implementation."
antirez,2015-06-23 08:27:45,https://api.github.com/repos/antirez/redis/git/commits/8d5ad19d154dde494a87ce0af29811bc2d3217e1,8d5ad19d154dde494a87ce0af29811bc2d3217e1,"Geo: return REDIS_* where appropriate, improve commenting"
antirez,2015-06-23 08:19:40,https://api.github.com/repos/antirez/redis/git/commits/0425c60381f9f2d1adf5a08b48f305ecf30dbfa6,0425c60381f9f2d1adf5a08b48f305ecf30dbfa6,Geo: test GEOADD with wrong input coordinates
antirez,2015-06-23 08:18:23,https://api.github.com/repos/antirez/redis/git/commits/bb3284563c1465556f0d02ab7b4616dcc414b930,bb3284563c1465556f0d02ab7b4616dcc414b930,"Geo: GEOADD implementation improved, replication fixed

1. We no longer use a fake client but just rewriting.
2. We group all the inserts into a single ZADD dispatch (big speed win).
3. As a side effect of the correct implementation, replication works.
4. The return value of the command is now correct."
antirez,2015-06-23 07:35:43,https://api.github.com/repos/antirez/redis/git/commits/ae5fd11563230e06fbc637d63028b59a65e4bf51,ae5fd11563230e06fbc637d63028b59a65e4bf51,"Geo: more x,y renamed lat,lon"
antirez,2015-06-23 07:30:14,https://api.github.com/repos/antirez/redis/git/commits/a3018a215f958d42224413de04f9e34387cac4c4,a3018a215f958d42224413de04f9e34387cac4c4,"Geo: rename x,y to lat,lon for clarity"
antirez,2015-06-23 07:03:56,https://api.github.com/repos/antirez/redis/git/commits/51b4a4724b9570584ae1bbb0e30e3bf4d8db736a,51b4a4724b9570584ae1bbb0e30e3bf4d8db736a,Geo: use the high level API to decode in geoAppendIfWithinRadius()
antirez,2015-06-22 16:08:06,https://api.github.com/repos/antirez/redis/git/commits/0b93139048c9e541feeaeacb79a604f50f6a2149,0b93139048c9e541feeaeacb79a604f50f6a2149,"Geo: big refactoring of geo.c, zset.[ch] removed.

This commit simplifies the implementation in a few ways:

1. zsetScore implementation improved a bit and moved into t_zset.c where
   is now also used to implement the ZSCORE command.

2. Range extraction from the sorted set remains a separated
   implementation from the one in t_zset.c, but was hyper-specialized in
   order to avoid accumulating results into a list and remove the ones
   outside the radius.

3. A new type is introduced: geoArray, which can accumulate geoPoint
   structures in a vector with power of two expansion policy. This is
   useful since we have to call qsort() against it before returning the
   result to the user.

4. As a result of 1, 2, 3, the two files zset.c and zset.h are now
   removed, including the function to merge two lists (now handled with
   functions that can add elements to existing geoArray arrays) and
   the machinery used in order to pass zset results.

5. geoPoint structure simplified because of the general code structure
   simplification, so we no longer need to take references to objects.

6. Not counting the JSON removal the refactoring removes 200 lines of
   code for the same functionalities, with a simpler to read
   implementation.

7. GEORADIUS is now 2.5 times faster testing with 10k elements and a
   radius resulting in 124 elements returned. However this is mostly a
   side effect of the refactoring and simplification. More speed gains
   can be achieved by trying to optimize the code."
antirez,2015-06-22 15:28:48,https://api.github.com/repos/antirez/redis/git/commits/3d9031eda43c3018244c1e0495a4cfb2ef606974,3d9031eda43c3018244c1e0495a4cfb2ef606974,"Geo: compile again with optimizations

For some reason the Geo PR included disabling the fact that Redis is
compiled with optimizations. Apparently it was just @mattsta attempt to
speedup the modify-compile-test iteration and there are no other
reasons."
antirez,2015-06-22 15:26:36,https://api.github.com/repos/antirez/redis/git/commits/9fc47ddf0b8174e5e652ba11bc3d368f6536ba40,9fc47ddf0b8174e5e652ba11bc3d368f6536ba40,"Geo: zsetScore refactoring

Now used both in geo.c and t_zset to provide ZSCORE."
antirez,2015-06-22 13:00:37,https://api.github.com/repos/antirez/redis/git/commits/575e247a0e91d662163fd92032b47e7a3b1f2b6b,575e247a0e91d662163fd92032b47e7a3b1f2b6b,Geo: fix tests after distance precision change
antirez,2015-06-22 11:40:26,https://api.github.com/repos/antirez/redis/git/commits/2f66550729924ccfc20c1418f498f21e0e4bdeca,2f66550729924ccfc20c1418f498f21e0e4bdeca,"Geo: Pub/Sub feature removed

This feature apparently is not going to be very useful, to send a
GEOADD+PUBLISH combo is exactly the same. One that would make a ton of
difference is the ability to subscribe to a position and a radius, and
get the updates in terms of objects entering/exiting the area."
antirez,2015-06-22 11:08:46,https://api.github.com/repos/antirez/redis/git/commits/fc03d08ee0bc7abcb5f036454458d5b085fff10c,fc03d08ee0bc7abcb5f036454458d5b085fff10c,"Geo: addReplyDoubleDistance() precision set to 4 digits

Also:
1. The function was renamed.
2. An useless initialization of a buffer was removed."
antirez,2015-06-22 09:53:14,https://api.github.com/repos/antirez/redis/git/commits/b18c68aa7fa780ab0d591c91ad758246fa9fdc9e,b18c68aa7fa780ab0d591c91ad758246fa9fdc9e,"Geo: JSON features removed

The command can only return data in the normal Redis protocol. It is up
to the caller to translate to JSON if needed."
antirez,2015-06-22 09:24:58,https://api.github.com/repos/antirez/redis/git/commits/f193b3caa8e2de38573831d81da4bf6438c2ae79,f193b3caa8e2de38573831d81da4bf6438c2ae79,Geo: removed bool usage from Geo code inside Redis
antirez,2015-06-22 09:16:36,https://api.github.com/repos/antirez/redis/git/commits/73134f6a0b764ee1bc2df8d31180ed47ae55137e,73134f6a0b764ee1bc2df8d31180ed47ae55137e,"Geo: removed JSON failing test (false positive)

Server output is matched to a pre-computed output. The last digits
differ because of rouding errors."
antirez,2015-06-22 09:02:27,https://api.github.com/repos/antirez/redis/git/commits/5e46e8a58a3b85dae8e37a71183f8a7139ea88b9,5e46e8a58a3b85dae8e37a71183f8a7139ea88b9,"Geo: removed useless functions, Marcatore coordinates, bool usage"
mattsta,2014-05-12 18:38:17,https://api.github.com/repos/antirez/redis/git/commits/7f4ac3d19c28e0a7a608fe94411e92bc59097e11,7f4ac3d19c28e0a7a608fe94411e92bc59097e11,"[In-Progress] Add Geo Commands

Current todo:
  - replace functions in zset.{c,h} with a new unified Redis
    zset access API.

Once we get the zset interface fixed, we can squash
relevant commits in this branch and have one nice commit
to merge into unstable.

This commit adds:
  - Geo commands
  - Tests; runnable with: ./runtest --single unit/geo
  - Geo helpers in deps/geohash-int/
  - src/geo.{c,h} and src/geojson.{c,h} implementing geo commands
  - Updated build configurations to get everything working
  - TEMPORARY: src/zset.{c,h} implementing zset score and zset
    range reading without writing to client output buffers.
  - Modified linkage of one t_zset.c function for use in zset.c

Conflicts:
	src/Makefile
	src/redis.c"
antirez,2015-06-12 16:33:03,https://api.github.com/repos/antirez/redis/git/commits/821a986643717018cad8af9f35cba49818e60294,821a986643717018cad8af9f35cba49818e60294,"Sentinel: fix bug in config rewriting during failover

We have a check to rewrite the config properly when a failover is in
progress, in order to add the current (already failed over) master as
slave, and don't include in the slave list the promoted slave itself.

However there was an issue, the variable with the right address was
computed but never used when the code was modified, and no tests are
available for this feature for two reasons:

1. The Sentinel unit test currently does not test Sentinel ability to
persist its state at all.
2. It is a very hard to trigger state since it lasts for little time in
the context of the testing framework.

However this feature should be covered in the test in some way.

The bug was found by @badboy using the clang static analyzer.

Effects of the bug on safety of Sentinel
===

This bug results in severe issues in the following case:

1. A Sentinel is elected leader.
2. During the failover, it persists a wrong config with a known-slave
entry listing the master address.
3. The Sentinel crashes and restarts, reading invalid configuration from
disk.
4. It sees that the slave now does not obey the logical configuration
(should replicate from the current master), so it sends a SLAVEOF
command to the master (since the slave master is the same) creating a
replication loop (attempt to replicate from itself) which Redis is
currently unable to detect.
5. This means that the master is no longer available because of the bug.

However the lack of availability should be only transient (at least
in my tests, but other states could be possible where the problem
is not recovered automatically) because:

6. Sentinels treat masters reporting to be slaves as failing.
7. A new failover is triggered, and a slave is promoted to master.

Bug lifetime
===

The bug is there forever. Commit 16237d78 actually tried to fix the bug
but in the wrong way (the computed variable was never used! My fault).
So this bug is there basically since the start of Sentinel.

Since the bug is hard to trigger, I remember little reports matching
this condition, but I remember at least a few. Also in automated tests
where instances were stopped and restarted multiple times automatically
I remember hitting this issue, however I was not able to reproduce nor
to determine with the information I had at the time what was causing the
issue."
antirez,2015-06-11 13:15:22,https://api.github.com/repos/antirez/redis/git/commits/4b5a0f0376e122316f3f04709fd7c502b159428d,4b5a0f0376e122316f3f04709fd7c502b159428d,"Merge pull request #2614 from linfangrong/patch-1

Update t_zset.c"
antirez,2015-06-11 10:57:53,https://api.github.com/repos/antirez/redis/git/commits/8366907bed1f8e798889f51ce46c8035a28a6cae,8366907bed1f8e798889f51ce46c8035a28a6cae,"Use best effort address binding to connect to the master

We usually want to reach the master using the address of the interface
Redis is bound to (via the ""bind"" config option). That's useful since
the master will get (and publish) the slave address getting the peer
name of the incoming socket connection from the slave.

However, when this is not possible, for example because the slave is
bound to the loopback interface but repliaces from a master accessed via
an external interface, we want to still connect with the master even
from a different interface: in this case it is not really important that
the master will provide any other address, while it is vital to be able
to replicate correctly.

Related to issues #2609 and #2612."
antirez,2015-06-11 10:55:58,https://api.github.com/repos/antirez/redis/git/commits/a017b7ec0e68792fa79b611023f3065c4e0c9394,a017b7ec0e68792fa79b611023f3065c4e0c9394,"anet.c: new API anetTcpNonBlockBestEffortBindConnect()

This performs a best effort source address binding attempt. If it is
possible to bind the local address and still have a successful
connect(), then this socket is returned. Otherwise the call is retried
without source address binding attempt.

Related to issues #2609 and #2612."
antirez,2015-06-11 10:46:55,https://api.github.com/repos/antirez/redis/git/commits/8fa8b251a9766f987a7704f034e66c645f0c3afe,8fa8b251a9766f987a7704f034e66c645f0c3afe,"anetTcpGenericConnect(), jump to error not end on error

Two code paths jumped to the ""ok, return the socket to the user"" code
path to handle error conditions.

Related to issues #2609 and #2612."
antirez,2015-06-11 10:29:37,https://api.github.com/repos/antirez/redis/git/commits/a401a84eb2fb0b22e003cdd2c5231995f57bab8b,a401a84eb2fb0b22e003cdd2c5231995f57bab8b,"Don't try to bind the source address for MIGRATE

Related to issues #2609 and #2612."
benmmurphy,2015-05-11 22:24:37,https://api.github.com/repos/antirez/redis/git/commits/ffd6637e90d816b7a17a96f144f75153c952d8cf,ffd6637e90d816b7a17a96f144f75153c952d8cf,hide access to debug table
benmmurphy,2015-05-11 22:24:24,https://api.github.com/repos/antirez/redis/git/commits/fdf9d455098f54f7666c702ae464e6ea21e25411,fdf9d455098f54f7666c702ae464e6ea21e25411,disable loading lua bytecode
antirez,2015-06-03 06:44:43,https://api.github.com/repos/antirez/redis/git/commits/357a40c4fc1f5ad3c143e6afbb0ada8d68432221,357a40c4fc1f5ad3c143e6afbb0ada8d68432221,Scripting: Lua cmsgpack lib updated to include str8 support
linfangrong,2015-06-02 10:12:57,https://api.github.com/repos/antirez/redis/git/commits/0dc6a5d497904776b3a6296b08207b917ef59bab,0dc6a5d497904776b3a6296b08207b917ef59bab,Update t_zset.c
antirez,2015-05-29 10:26:27,https://api.github.com/repos/antirez/redis/git/commits/28a250d9e4ab0aa659a4ed74ad5c52272cb8dda7,28a250d9e4ab0aa659a4ed74ad5c52272cb8dda7,Merge branch 'zaddnx' into unstable
antirez,2015-05-29 09:34:43,https://api.github.com/repos/antirez/redis/git/commits/39b49bcaaf221d9d8bd6ca62fe1ea0befe4089fd,39b49bcaaf221d9d8bd6ca62fe1ea0befe4089fd,Test: ZADD CH tests
antirez,2015-05-29 09:32:22,https://api.github.com/repos/antirez/redis/git/commits/d8a8dca7fd52d6be8383b2a0d2b7e403f3c1d71d,d8a8dca7fd52d6be8383b2a0d2b7e403f3c1d71d,"ZADD RETCH option renamed CH

From Twitter:

    ""@antirez that’s an awfully-named command :(
     http://en.wikipedia.org/wiki/Retching"""
antirez,2015-05-29 09:28:49,https://api.github.com/repos/antirez/redis/git/commits/23ba5c10920b9893eb1ed82503157850131819af,23ba5c10920b9893eb1ed82503157850131819af,Test: ZADD INCR test
antirez,2015-05-29 09:23:49,https://api.github.com/repos/antirez/redis/git/commits/910e72d1c10ac8bcb7d869714dcad43dc318c8c5,910e72d1c10ac8bcb7d869714dcad43dc318c8c5,Test: ZADD NX and XX options tests
antirez,2015-05-29 09:22:03,https://api.github.com/repos/antirez/redis/git/commits/c043a4e6f407d03e794a07d3b449ebe9cd74c507,c043a4e6f407d03e794a07d3b449ebe9cd74c507,"ZADD RETCH option: Return number of elements added or updated

Normally ZADD only returns the number of elements added to a sorted
set, using the RETCH option it returns the sum of elements added or
for which the score was updated."
antirez,2015-05-29 07:59:42,https://api.github.com/repos/antirez/redis/git/commits/5d32abbb9e1b74ee08f03cae4305126063744a7a,5d32abbb9e1b74ee08f03cae4305126063744a7a,ZADD NX and XX options
antirez,2015-05-28 16:06:16,https://api.github.com/repos/antirez/redis/git/commits/382a943414d17ace950901aad07dbde577f2142a,382a943414d17ace950901aad07dbde577f2142a,ZADD implemenation able to take options.
antirez,2015-05-28 13:10:25,https://api.github.com/repos/antirez/redis/git/commits/a391c36324f43435099391c832b596603e67993a,a391c36324f43435099391c832b596603e67993a,"Merge pull request #2586 from huachaohuang/patch-1

Update anet.c"
antirez,2015-05-28 13:09:51,https://api.github.com/repos/antirez/redis/git/commits/c3297a72922bc33deb3993abf380a3bbc9f16116,c3297a72922bc33deb3993abf380a3bbc9f16116,"Merge pull request #2587 from itamarhaber/patch-5

Removed incorrect suggestion"
antirez,2015-05-25 10:06:25,https://api.github.com/repos/antirez/redis/git/commits/4082c38a60eedd524c78ef48c1b241105f4ddc50,4082c38a60eedd524c78ef48c1b241105f4ddc50,"Merge pull request #2571 from therealbill/sentinel-flushconfig-command

adding a sentinel command: ""flushconfig"" per RCP4"
antirez,2015-05-25 08:32:28,https://api.github.com/repos/antirez/redis/git/commits/20700fe566938d5bea945f739dbb5ab73131febb,20700fe566938d5bea945f739dbb5ab73131febb,Sentinel: clarify effect of resetting failover_start_time.
antirez,2015-05-25 08:24:27,https://api.github.com/repos/antirez/redis/git/commits/5080f2d69908e2324311f03224a5dc7c98322569,5080f2d69908e2324311f03224a5dc7c98322569,Sentinel: help subcommand in simulate-failure command
antirez,2015-05-22 09:49:11,https://api.github.com/repos/antirez/redis/git/commits/fb3af75f7478c6d0717d076289976f16b2389e28,fb3af75f7478c6d0717d076289976f16b2389e28,"Sentinel: initial failure simulator implemented

This commit adds the SENTINEL simulate-failure, that sets specific
hooks inside the state machine that will crash Sentinel, for testing
purposes."
itamarhaber,2015-05-21 10:24:51,https://api.github.com/repos/antirez/redis/git/commits/575eeb1a1c473ee3425175ac44bbc37fdea55e74,575eeb1a1c473ee3425175ac44bbc37fdea55e74,"Removed incorrect suggestion

DEL/INCR/DECR and others could be NTH but apparently never made it to the implementation of SORT"
huachaohuang,2015-05-21 09:40:17,https://api.github.com/repos/antirez/redis/git/commits/8c423c0bd6e2e54cc398c15f15164995b502f121,8c423c0bd6e2e54cc398c15f15164995b502f121,Update anet.c
antirez,2015-05-20 07:59:55,https://api.github.com/repos/antirez/redis/git/commits/c54de703f20d17d9484a5becabe211a4681cd746,c54de703f20d17d9484a5becabe211a4681cd746,"Sentinel: fix sentinelTryConnectionSharing() by checking for no match

Trivial omission of the obvious no-match case."
antirez,2015-05-19 10:26:57,https://api.github.com/repos/antirez/redis/git/commits/164b6bbab5c4cf3daf2e26653b114697bafb502b,164b6bbab5c4cf3daf2e26653b114697bafb502b,Merge branch 'sentinel-32' into unstable
antirez,2015-05-19 10:26:09,https://api.github.com/repos/antirez/redis/git/commits/d614f1c37e7cef759f655d72eadd9f9e421b2196,d614f1c37e7cef759f655d72eadd9f9e421b2196,Sentinel: CKQUORUM tests
antirez,2015-05-18 10:52:03,https://api.github.com/repos/antirez/redis/git/commits/abc65e8987df5a6c94132d7ff1da3cdfbe4a989e,abc65e8987df5a6c94132d7ff1da3cdfbe4a989e,"Sentinel: SENTINEL CKQUORUM command

A way for monitoring systems to check that Sentinel is technically able
to reach the quorum and failover, using the currently visible Sentinels."
antirez,2015-05-15 15:38:48,https://api.github.com/repos/antirez/redis/git/commits/eb138f1511127c3aff428729feed99741b4f0124,eb138f1511127c3aff428729feed99741b4f0124,Rewrite smoveCommand test with ternary operator
antirez,2015-05-15 15:36:18,https://api.github.com/repos/antirez/redis/git/commits/cb9a5a78219db209a7b6a4b368ce9bf87d99a7d5,cb9a5a78219db209a7b6a4b368ce9bf87d99a7d5,"Merge pull request #2529 from gnethercutt/issue_2517

Issue #2517, smove contract violation"
antirez,2015-05-15 15:06:18,https://api.github.com/repos/antirez/redis/git/commits/7f7ddbba3ce01101dceebe5ffaec054458fb2b00,7f7ddbba3ce01101dceebe5ffaec054458fb2b00,"Merge pull request #2573 from HeartSaVioR/fix-protocol-error-log-level

protocol error log should be seen by debug/verbose level"
antirez,2015-05-15 07:47:05,https://api.github.com/repos/antirez/redis/git/commits/b43431ac256c8eeb80b144b7492b04b6d692e061,b43431ac256c8eeb80b144b7492b04b6d692e061,Sentinel: port address update code to shared links logic
antirez,2015-05-14 15:44:52,https://api.github.com/repos/antirez/redis/git/commits/4dee18cb66fe37190c619232d61f4bea43d6dfb0,4dee18cb66fe37190c619232d61f4bea43d6dfb0,Sentinel: config-rewrite unique ID just one time
antirez,2015-05-14 12:12:45,https://api.github.com/repos/antirez/redis/git/commits/f9e942d4ae310a9416d0f91fa0e32c799009b8bc,f9e942d4ae310a9416d0f91fa0e32c799009b8bc,Sentinel: remove debugging message from releaseInstanceLink()
antirez,2015-05-14 12:08:19,https://api.github.com/repos/antirez/redis/git/commits/b44c37482c6d944e54765318e38f63d92f36c09b,b44c37482c6d944e54765318e38f63d92f36c09b,Sentinel: fix access to NULL link->cc in releaseInstanceLink()
antirez,2015-05-14 11:40:23,https://api.github.com/repos/antirez/redis/git/commits/87b6013adb750b1f5ba161202876a84ffac45d3a,87b6013adb750b1f5ba161202876a84ffac45d3a,Sentinel: remove SHARED! debugging printf
antirez,2015-05-14 11:39:26,https://api.github.com/repos/antirez/redis/git/commits/5a0516b5b96b7bbd16c1942b281c798f3db03630,5a0516b5b96b7bbd16c1942b281c798f3db03630,"Sentinel: rewrite callback chain removing instances with shared links

Otherwise pending commands callbacks will fire with a reference that no
longer exists."
antirez,2015-05-14 08:52:32,https://api.github.com/repos/antirez/redis/git/commits/05dbc820051daab748761ec67c9c1bba37f2717e,05dbc820051daab748761ec67c9c1bba37f2717e,Sentinel: debugging code removed from sentinelSendPing()
antirez,2015-05-14 07:56:23,https://api.github.com/repos/antirez/redis/git/commits/58d2bb951a3ad85b312e9e009a66eb1397e38780,58d2bb951a3ad85b312e9e009a66eb1397e38780,"Sentinel: use active/last time for ping logic

The PING trigger was improved again by using two fields instead of a
single one to remember when the last ping was sent:

1. The ""active"" ping is the time at which we sent the last ping that
still received no reply. However we continue to ping non replying
instances even if they have an old active ping: the link may be
disconnected and reconencted in the meantime so the older pings may get
lost even if it's a TCP socket.

2. The ""last"" ping is the time at which we really sent the last ping
on the wire, and this is used in order to throttle the amount of pings
we send during failures (when no pong is received).

All in all the failure detector effectiveness should be identical but we
avoid to flood instances with pings during failures or when they are
slow."
antirez,2015-05-13 12:23:57,https://api.github.com/repos/antirez/redis/git/commits/3ab49895b4533fac367dec7dc6be48036067f31a,3ab49895b4533fac367dec7dc6be48036067f31a,Sentinel: limit reconnection frequency to the ping period
antirez,2015-05-12 15:03:53,https://api.github.com/repos/antirez/redis/git/commits/0eb0b55ff0840c52527ff65f0fbcac84a6e0e231,0eb0b55ff0840c52527ff65f0fbcac84a6e0e231,"Sentinel: PING trigger improved

It's ok to ping as soon as the ping period has elapsed since we received
the last PONG, but it's not good that we ping again if there is a
pending ping... With this change we'll send a new ping if there is one
pending only if two times the ping period elapsed since the ping which
is still pending was sent."
antirez,2015-05-12 15:03:00,https://api.github.com/repos/antirez/redis/git/commits/9d5e2ed3922dd6f424a17c1d6712e672d4ee5fa0,9d5e2ed3922dd6f424a17c1d6712e672d4ee5fa0,Sentinel: same-Sentinel link sharing across masters
antirez,2015-05-12 10:12:25,https://api.github.com/repos/antirez/redis/git/commits/e0a5246f06951f76bc6bbfaa9900b8103f093dea,e0a5246f06951f76bc6bbfaa9900b8103f093dea,"Sentinel: add sentinelGetInstanceTypeString() fuction

This is useful for debugging and logging activities: given a
sentinelRedisInstance object returns a C string representing the
instance type: master, slave, sentinel."
HeartSaVioR,2015-05-12 01:04:52,https://api.github.com/repos/antirez/redis/git/commits/6b953a268186a37084d07046267dcbf263d61372,6b953a268186a37084d07046267dcbf263d61372,protocol error log should be seen debug/verbose level
antirez,2015-05-11 21:49:19,https://api.github.com/repos/antirez/redis/git/commits/d6e1347869d22f19746b004551d43059b375868e,d6e1347869d22f19746b004551d43059b375868e,Sentinel: add link refcount to instance description
therealbill,2015-05-11 19:08:57,https://api.github.com/repos/antirez/redis/git/commits/4e8ccbe7eac053011a281760e570ba29c4dfb905,4e8ccbe7eac053011a281760e570ba29c4dfb905,"adding a sentinel command: ""flushconfig""

This new command triggers a config flush to save the in-memory config to
disk. This is useful for cases of a configuration management system or a
package manager wiping out your sentinel config while the process is
still running - and has not yet been restarted. It can also be useful
for scripting a backup and migrate or clone of a running sentinel."
antirez,2015-05-11 11:15:26,https://api.github.com/repos/antirez/redis/git/commits/1029276c0d46e643a5740120d44a9cce8ba652b9,1029276c0d46e643a5740120d44a9cce8ba652b9,Sentinel: connection sharing WIP #1
antirez,2015-05-08 15:17:59,https://api.github.com/repos/antirez/redis/git/commits/611283f7438009fe690023673c1fac5d9393034d,611283f7438009fe690023673c1fac5d9393034d,Sentinel: suppress warnings for not used args.
antirez,2015-05-08 15:15:26,https://api.github.com/repos/antirez/redis/git/commits/3eca0752a68e6b2185c35ed95b053f7f3562b618,3eca0752a68e6b2185c35ed95b053f7f3562b618,"Sentinel: generate +sentinel again, removed in prev commit."
antirez,2015-05-08 15:12:13,https://api.github.com/repos/antirez/redis/git/commits/b91434cab122f7760b7ae4b5c514eda17e644ac8,b91434cab122f7760b7ae4b5c514eda17e644ac8,"Sentinel: Use privdata instead of c->data in sentinelReceiveHelloMessages()

This way we may later share the hiredis link ""c"" among the same Sentinel
instance referenced multiple times for multiple masters."
antirez,2015-05-08 15:04:01,https://api.github.com/repos/antirez/redis/git/commits/b849886a0df86f17d8c2f4be35f503c58dd5d178,b849886a0df86f17d8c2f4be35f503c58dd5d178,Sentinel: clarify arguments of SENTINEL IS-MASTER-DOWN-BY-ADDR
antirez,2015-05-07 08:03:40,https://api.github.com/repos/antirez/redis/git/commits/a0cd75cd1b441915655eac070bd7f93cfa0f7990,a0cd75cd1b441915655eac070bd7f93cfa0f7990,"Sentinel: don't detect duplicated Sentinels, just address switch

Since with a previous commit Sentinels now persist their unique ID, we
no longer need to detect duplicated Sentinels and re-add them. We remove
and re-add back using different events only in the case of address
switch of the same Sentinel, without generating a new +sentinel event."
antirez,2015-05-06 14:19:14,https://api.github.com/repos/antirez/redis/git/commits/794fc4c9a8b2e4721196df341b84cb0569ab0efa,794fc4c9a8b2e4721196df341b84cb0569ab0efa,"Sentinel: persist its unique ID across restarts.

Previously Sentinels always changed unique ID across restarts, relying
on the server.runid field. This is not a good idea, and forced Sentinel
to rely on detection of duplicated Sentinels and a potentially dangerous
clean-up and re-add operation of the Sentinel instance that was
rebooted.

Now the ID is generated at the first start and persisted in the
configuration file, so that a given Sentinel will have its unique
ID forever (unless the configuration is manually deleted or there is a
filesystem corruption)."
antirez,2015-05-05 16:44:46,https://api.github.com/repos/antirez/redis/git/commits/0610cb62964b86c45028f7704cbe4f97e92853f5,0610cb62964b86c45028f7704cbe4f97e92853f5,"Merge pull request #2564 from charsyam/feature/compile-error-freebsd-1

fix compile error for struct msghdr in FreeBSD 10"
antirez,2015-05-05 14:36:35,https://api.github.com/repos/antirez/redis/git/commits/23e304e3132b575d49c3b4c409fec0e40aa602c9,23e304e3132b575d49c3b4c409fec0e40aa602c9,"Substitute DISQUE to REDIS after merge from Disque

Probably this stuff should be called CLIENT_* in order to cross merge
more easily."
antirez,2015-05-05 14:35:44,https://api.github.com/repos/antirez/redis/git/commits/2bc1527a9564cf9d7776fc817b8dc13c3e53c1b0,2bc1527a9564cf9d7776fc817b8dc13c3e53c1b0,processUnblockedClients: don't process clients that blocekd again
antirez,2015-05-05 14:32:53,https://api.github.com/repos/antirez/redis/git/commits/f7bd816bbbcb5bb944750c10d798b6b9e63e1d3b,f7bd816bbbcb5bb944750c10d798b6b9e63e1d3b,Don't put clients into unblocked list multiple times
antirez,2015-05-05 09:17:40,https://api.github.com/repos/antirez/redis/git/commits/9f9c44feef1b68bb443270118570c030c04b0085,9f9c44feef1b68bb443270118570c030c04b0085,Fix order of release scripts.
antirez,2015-05-04 11:00:02,https://api.github.com/repos/antirez/redis/git/commits/8af99d0c09324598faf9f8e5b9aa300fc913ff3c,8af99d0c09324598faf9f8e5b9aa300fc913ff3c,"Merge pull request #2530 from FuGangqiang/unstable

fix sds.c"
antirez,2015-05-04 10:56:02,https://api.github.com/repos/antirez/redis/git/commits/5a23ef88bfada3c1998c51dcb4aba9fdf8ad32b0,5a23ef88bfada3c1998c51dcb4aba9fdf8ad32b0,"Merge pull request #2534 from itamarhaber/patch-3

update copyright year"
therealbill,2015-04-23 16:56:15,https://api.github.com/repos/antirez/redis/git/commits/cc799d253fc16f9f9dbc5f32269da0e90d78409f,cc799d253fc16f9f9dbc5f32269da0e90d78409f,"Making sentinel flush config on +slave

Originally, only the +slave event which occurs when a slave is
reconfigured during sentinelResetMasterAndChangeAddress triggers a flush
of the config to disk.  However, newly discovered slaves don't
apparently trigger this flush but do trigger the +slave event issuance.

So if you start up a sentinel, add a master, then add a slave to the
master (as a way to reproduce it) you'll see the +slave event issued,
but the sentinel config won't be updated with the known-slave entry.

This change makes sentinel do the flush of the config if a new slave is
deteted in sentinelRefreshInstanceInfo."
antirez,2015-05-04 10:50:44,https://api.github.com/repos/antirez/redis/git/commits/99c93f34a76fd7b64847bdbb5b8828f3bb5ea09e,99c93f34a76fd7b64847bdbb5b8828f3bb5ea09e,"Sentinel: remove useless sentinelFlushConfig() call

To rewrite the config in the loop that adds slaves back after a master
reset, in order to handle switching to another master, is useless: it
just adds latency since there is an fsync call in the inner loop,
without providing any additional guarantee, but the contrary, since if
after the first loop iteration the server crashes we end with just a
single slave entry losing all the other informations.

It is wiser to rewrite the config at the end when the full new
state is configured."
antirez,2015-05-04 10:19:44,https://api.github.com/repos/antirez/redis/git/commits/22d00d80cee85219a2c6e489592b4d8b86c16bd4,22d00d80cee85219a2c6e489592b4d8b86c16bd4,"Merge pull request #2542 from yossigo/lua_client_buffer_crash

Fix Redis server crash when Lua command exceeds client output buffer limit."
antirez,2015-05-04 10:17:41,https://api.github.com/repos/antirez/redis/git/commits/827d07f005c8fcdfa839d9541e7f2c2a9d4aa0fd,827d07f005c8fcdfa839d9541e7f2c2a9d4aa0fd,"Merge pull request #2551 from charsyam/feature/sentinel-memory-leak-1

fix sentinel memory leak"
antirez,2015-04-29 08:34:08,https://api.github.com/repos/antirez/redis/git/commits/7af420e78dea827fdc37d51da47b2b3b7e4bc63e,7af420e78dea827fdc37d51da47b2b3b7e4bc63e,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2015-04-29 08:33:21,https://api.github.com/repos/antirez/redis/git/commits/9e7f39d29dbd382212478f1c425ca4dcba89228b,9e7f39d29dbd382212478f1c425ca4dcba89228b,"Add header guard for ziplist.h

As suggested in #2543."
antirez,2015-04-29 08:06:46,https://api.github.com/repos/antirez/redis/git/commits/fe0d71d52f53ec8675e8bbcfe4efc4e6f45771c0,fe0d71d52f53ec8675e8bbcfe4efc4e6f45771c0,"Merge pull request #2550 from badboy/readme-fixes

Fix spelling and grammatical errors in readme"
antirez,2015-04-28 20:10:23,https://api.github.com/repos/antirez/redis/git/commits/c806dd799bc8f3c578581194d499b50acec44b7d,c806dd799bc8f3c578581194d499b50acec44b7d,"Fix Sentinel memory leak (hiredis bug)

This fixes issue #2535, that was actually an hiredis library bug (I
submitted an issue and fix to the redis/hiredis repo as well).

When an asynchronous hiredis connection subscribes to a Pub/Sub channel
and gets an error, and in other related conditions, the function
redisProcessCallbacks() enters a code path where the link is
disconnected, however the function returns before freeing the allocated
reply object. This causes a memory leak. The memory leak was trivial to
trigger in Redis Sentinel, which uses hiredis, every time we tried to
subscribe to an instance that required a password, in case the Sentinel
was configured either with the wrong password or without password at
all. In this case, the -AUTH error caused the leaking code path to be
executed.

It was verified with Valgrind that after this change the leak no longer
happens in Sentinel with a misconfigured authentication password."
badboy,2015-04-28 13:21:11,https://api.github.com/repos/antirez/redis/git/commits/fb53288110b6a55802999a1e9f036abefc02e01d,fb53288110b6a55802999a1e9f036abefc02e01d,One more small fix
badboy,2015-04-28 09:07:21,https://api.github.com/repos/antirez/redis/git/commits/3ff49afff1bf9b0d84d8ad53fb2d6b9b5d4b039c,3ff49afff1bf9b0d84d8ad53fb2d6b9b5d4b039c,"Fix spelling and grammatical errors in readme

Closes #2549"
antirez,2015-04-27 10:07:49,https://api.github.com/repos/antirez/redis/git/commits/1b25757f415d6e6da0cdf1769f94f8e318e5be25,1b25757f415d6e6da0cdf1769f94f8e318e5be25,sha1.c: use standard uint32_t.
antirez,2015-04-27 10:05:32,https://api.github.com/repos/antirez/redis/git/commits/1d6eb701d8cd4265ff657f1a27dee55c7293117b,1d6eb701d8cd4265ff657f1a27dee55c7293117b,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2015-04-26 17:23:24,https://api.github.com/repos/antirez/redis/git/commits/1a93501f8baebfb44bc2548b2026d47c3cc91d1f,1a93501f8baebfb44bc2548b2026d47c3cc91d1f,"Example redis.conf doc about pidfile fixed.

An user changed the behavior via a PR without upgrading the doc."
yossigo,2015-04-26 09:04:16,https://api.github.com/repos/antirez/redis/git/commits/49c1b60bd8cbca6bbec7a171645dfeb67c1a7ddf,49c1b60bd8cbca6bbec7a171645dfeb67c1a7ddf,"Fix Redis server crash when Lua command exceeds client output buffer
limit."
antirez,2015-04-24 07:05:14,https://api.github.com/repos/antirez/redis/git/commits/b100fee900d0091083233aa16a4e87d80066fb59,b100fee900d0091083233aa16a4e87d80066fb59,"Merge pull request #2539 from itamarhaber/patch-4

Added reference to IANA ticket for port 6379"
itamarhaber,2015-04-23 22:33:41,https://api.github.com/repos/antirez/redis/git/commits/066d7a29ebe5a5a2a567f15e65a6689ff71e8248,066d7a29ebe5a5a2a567f15e65a6689ff71e8248,"Added reference to IANA ticket for port 6379

Just so it's extra official :smile:"
itamarhaber,2015-04-21 15:54:49,https://api.github.com/repos/antirez/redis/git/commits/921ca063f70b6e725ca6159a00aa02d8af1e4181,921ca063f70b6e725ca6159a00aa02d8af1e4181,update copyright year
FuGangqiang,2015-04-20 15:03:34,https://api.github.com/repos/antirez/redis/git/commits/26a1a08fc798fb36c8086138b5f78119aa8c0e21,26a1a08fc798fb36c8086138b5f78119aa8c0e21,sdsfree x and y
FuGangqiang,2015-04-20 13:46:48,https://api.github.com/repos/antirez/redis/git/commits/239494db645c6ed87e605cc4b0a10db78b50e5cd,239494db645c6ed87e605cc4b0a10db78b50e5cd,fix doc example
FuGangqiang,2015-04-19 15:42:27,https://api.github.com/repos/antirez/redis/git/commits/42b36c5ce9071ebdfd5580fa0499a7bf354f1841,42b36c5ce9071ebdfd5580fa0499a7bf354f1841,fix typo
gnethercutt,2015-04-17 13:27:54,https://api.github.com/repos/antirez/redis/git/commits/626b4f69078276e35ed947e0d4ebd704e7f09992,626b4f69078276e35ed947e0d4ebd704e7f09992,"uphold the smove contract to return 0 when the element is not a member of the source set, even if source=dest"
antirez,2015-04-01 08:07:08,https://api.github.com/repos/antirez/redis/git/commits/6c60526db91e23fb2d666fc52facc9a11780a2a3,6c60526db91e23fb2d666fc52facc9a11780a2a3,"Net: improve prepareClientToWrite() error handling and comments.

When we fail to setup the write handler it does not make sense to take
the client around, it is missing writes: whatever is a client or a slave
anyway the connection should terminated ASAP.

Moreover what the function does exactly with its return value, and in
which case the write handler is installed on the socket, was not clear,
so the functions comment are improved to make the goals of the function
more obvious.

Also related to #2485."
antirez,2015-04-01 07:43:34,https://api.github.com/repos/antirez/redis/git/commits/d5a35c39468f7a8d1890ee61070d68a1e3a5cda1,d5a35c39468f7a8d1890ee61070d68a1e3a5cda1,"Merge pull request #2485 from oranagra/diskless-repl-fixes

fixes to diskless replication."
antirez,2015-03-31 21:43:38,https://api.github.com/repos/antirez/redis/git/commits/386804246f35e27a8db0d31fd0badd85cc6ecc04,386804246f35e27a8db0d31fd0badd85cc6ecc04,"Test: be more patient waiting for servers to exit.

This should likely fix a false positive when running with the --valgrind
option."
oranagra,2015-03-31 20:42:08,https://api.github.com/repos/antirez/redis/git/commits/159875b5a3a8dd7780aadbf1f7674061fc760920,159875b5a3a8dd7780aadbf1f7674061fc760920,"fixes to diskless replication.
master was closing the connection if the RDB transfer took long time.
and also sent PINGs to the slave before it got the initial ACK, in which case the slave wouldn't be able to find the EOF marker."
antirez,2015-03-31 13:22:56,https://api.github.com/repos/antirez/redis/git/commits/66f9393ee4d526e27df38e7b610daef30a4c89bd,66f9393ee4d526e27df38e7b610daef30a4c89bd,"Fix setTypeNext call assuming NULL can be passed.

Segfault introduced during a refactoring / warning suppression a few
commits away. This particular call assumed that it is safe to pass NULL
to the object pointer argument when we are sure the set has a given
encoding. This can't be assumed and is now guaranteed to segfault
because of the new API of setTypeNext()."
antirez,2015-03-30 12:29:01,https://api.github.com/repos/antirez/redis/git/commits/65090401b713a074b5261342e3079754377b6bbf,65090401b713a074b5261342e3079754377b6bbf,Sentinel / Cluster test: exit with non-zero error code on failures.
antirez,2015-03-30 10:24:57,https://api.github.com/repos/antirez/redis/git/commits/7f330b16f93d9feed0113e928a1b96f182b73e45,7f330b16f93d9feed0113e928a1b96f182b73e45,"Set: setType*() API more defensive initializing both values.

This change fixes several warnings compiling at -O3 level with GCC
4.8.2, and at the same time, in case of misuse of the API, we have the
pointer initialize to NULL or the integer initialized to the value
-123456789 which is easy to spot by naked eye."
antirez,2015-03-30 10:17:46,https://api.github.com/repos/antirez/redis/git/commits/34460dd6ee0c9ae6561de54f1005f493bfcc543c,34460dd6ee0c9ae6561de54f1005f493bfcc543c,"Check bio.c job type at thread startup.

Another one just to avoid a warning. Slightly more defensive code
anyway."
antirez,2015-03-30 09:54:49,https://api.github.com/repos/antirez/redis/git/commits/221d2932b51dc605130130369301c92f34336987,221d2932b51dc605130130369301c92f34336987,"Ensure array index is in range in addReplyLongLongWithPrefix().

Change done in order to remove a warning and improve code robustness. No
actual bug here."
antirez,2015-03-27 11:10:46,https://api.github.com/repos/antirez/redis/git/commits/37260bc3bed5fb46649262789c65089ab7de0dc6,37260bc3bed5fb46649262789c65089ab7de0dc6,Test: regression for issue #2473.
antirez,2015-03-27 09:14:52,https://api.github.com/repos/antirez/redis/git/commits/068d3c9737b368f921808e753f6f000a12ca5ae8,068d3c9737b368f921808e753f6f000a12ca5ae8,"dict.c: convert types to unsigned long where appropriate.

No semantical changes since to make dict.c truly able to scale over the
32 bit table size limit, the hash function shoulds and other internals
related to hash function output should be 64 bit ready."
antirez,2015-03-27 09:10:22,https://api.github.com/repos/antirez/redis/git/commits/9cd8333ed283689b028a062fc43820fcf15fa81c,9cd8333ed283689b028a062fc43820fcf15fa81c,"dict.c: add casting to avoid compilation warning.

rehashidx is always positive in the two code paths, since the only
negative value it could have is -1 when there is no rehashing in
progress, and the condition is explicitly checked."
antirez,2015-03-24 15:00:09,https://api.github.com/repos/antirez/redis/git/commits/c3ad70901f962808a1c0c474951406af81d26a3f,c3ad70901f962808a1c0c474951406af81d26a3f,"Replication: disconnect blocked clients when switching to slave role.

Bug as old as Redis and blocking operations. It's hard to trigger since
only happens on instance role switch, but the results are quite bad
since an inconsistency between master and slave is created.

How to trigger the bug is a good description of the bug itself.

1. Client does ""BLPOP mylist 0"" in master.
2. Master is turned into slave, that replicates from New-Master.
3. Client does ""LPUSH mylist foo"" in New-Master.
4. New-Master propagates write to slave.
5. Slave receives the LPUSH, the blocked client get served.

Now Master ""mylist"" key has ""foo"", Slave ""mylist"" key is empty.

Highlights:

* At step ""2"" above, the client remains attached, basically escaping any
  check performed during command dispatch: read only slave, in that case.
* At step ""5"" the slave (that was the master), serves the blocked client
  consuming a list element, which is not consumed on the master side.

This scenario is technically likely to happen during failovers, however
since Redis Sentinel already disconnects clients using the CLIENT
command when changing the role of the instance, the bug is avoided in
Sentinel deployments.

Closes #2473."
antirez,2015-03-24 10:07:10,https://api.github.com/repos/antirez/redis/git/commits/9b7f8b1c9b379ab842d40df4636dfbbeb6376fcb,9b7f8b1c9b379ab842d40df4636dfbbeb6376fcb,"Cluster: redirection refactoring + handling of blocked clients.

There was a bug in Redis Cluster caused by clients blocked in a blocking
list pop operation, for keys no longer handled by the instance, or
in a condition where the cluster became down after the client blocked.

A typical situation is:

1) BLPOP <somekey> 0
2) <somekey> hash slot is resharded to another master.

The client will block forever int this case.

A symmentrical non-cluster-specific bug happens when an instance is
turned from master to slave. In that case it is more serious since this
will desynchronize data between slaves and masters. This other bug was
discovered as a side effect of thinking about the bug explained and
fixed in this commit, but will be fixed in a separated commit."
antirez,2015-03-24 08:07:22,https://api.github.com/repos/antirez/redis/git/commits/eff68bd656e09b33b1edc6ff927c2cf06978a503,eff68bd656e09b33b1edc6ff927c2cf06978a503,"Merge pull request #2470 from superlogical/unstable

create-cluster fix for stop and watch commands"
jakejscott,2015-03-23 20:44:52,https://api.github.com/repos/antirez/redis/git/commits/761fc16b4a98f3be56d1bd5079a4880bd44d37f8,761fc16b4a98f3be56d1bd5079a4880bd44d37f8,create-cluster fix for stop and watch commands
antirez,2015-03-22 21:58:53,https://api.github.com/repos/antirez/redis/git/commits/9b0bcf25e1407a610f71704db17394e6d6be6622,9b0bcf25e1407a610f71704db17394e6d6be6622,Cluster: unit 10 modified to leave cluster in proper state.
antirez,2015-03-22 21:44:23,https://api.github.com/repos/antirez/redis/git/commits/f300680408c3c444f773dd0de27f8641d4cb7184,f300680408c3c444f773dd0de27f8641d4cb7184,Cluster: CLUSTER FAILOVER TAKEOVER tests.
antirez,2015-03-22 21:44:02,https://api.github.com/repos/antirez/redis/git/commits/631538cfe06c16c3e12fae63d1d81a26ce73070e,631538cfe06c16c3e12fae63d1d81a26ce73070e,Cluster: more tests for manual failover + FORCE.
antirez,2015-03-22 21:24:49,https://api.github.com/repos/antirez/redis/git/commits/3b4de6aa18b9937632c1e18042a11f5c8ce5b4b6,3b4de6aa18b9937632c1e18042a11f5c8ce5b4b6,Cluster: new tests1 for manual failover and scripts replication.
antirez,2015-03-22 21:23:41,https://api.github.com/repos/antirez/redis/git/commits/2f4240b9d9e36b83fcd6bf2525484effabe69298,2f4240b9d9e36b83fcd6bf2525484effabe69298,Cluster: fix Lua scripts replication to slave nodes.
antirez,2015-03-21 11:12:23,https://api.github.com/repos/antirez/redis/git/commits/94030fa4d7962a8e241ad27cadbc71a0f1b61d1b,94030fa4d7962a8e241ad27cadbc71a0f1b61d1b,Two cluster.c comments improved.
antirez,2015-03-21 10:54:32,https://api.github.com/repos/antirez/redis/git/commits/2950824ab67e5fef59aae87bf4c0ada8ab39d570,2950824ab67e5fef59aae87bf4c0ada8ab39d570,Cluster: TAKEOVER option for manual failover.
antirez,2015-03-21 08:19:02,https://api.github.com/repos/antirez/redis/git/commits/d544600aa524e008338bf690ced7377876d5a657,d544600aa524e008338bf690ced7377876d5a657,Fix typo in beforeSleep() comment.
antirez,2015-03-21 08:13:29,https://api.github.com/repos/antirez/redis/git/commits/2b278a3394ab6b32b4bdcb7db56323649622f784,2b278a3394ab6b32b4bdcb7db56323649622f784,"Net: processUnblockedClients() and clientsArePaused() minor changes.

1. No need to set btype in processUnblockedClients(), since clients
   flagged REDIS_UNBLOCKED should have it already cleared.
2. When putting clients in the unblocked clients list, clientsArePaused()
   should flag them with REDIS_UNBLOCKED. Not strictly needed with the
   current code but is more coherent."
antirez,2015-03-21 08:03:46,https://api.github.com/repos/antirez/redis/git/commits/5fe4a2313177a8c9bcd231dacda38317da17a3cf,5fe4a2313177a8c9bcd231dacda38317da17a3cf,"Net: clientsArePaused() should not touch blocked clients.

When the list of unblocked clients were processed, btype was set to
blocking type none, but the client remained flagged with REDIS_BLOCKED.
When timeout is reached (or when the client disconnects), unblocking it
will trigger an assertion.

There is no need to process pending requests from blocked clients, so
now clientsArePaused() just avoid touching blocked clients.

Close #2467."
antirez,2015-03-20 16:55:22,https://api.github.com/repos/antirez/redis/git/commits/a7010ae20813658c5cd3b6f1a6651ec5cb0909e2,a7010ae20813658c5cd3b6f1a6651ec5cb0909e2,Cluster: non-conditional steps of slave failover refactored into a function.
antirez,2015-03-20 15:56:44,https://api.github.com/repos/antirez/redis/git/commits/230d14142032bd054efceab21801068b5aa8a330,230d14142032bd054efceab21801068b5aa8a330,"Cluster: separate unknown master check from the rest.

In no case we should try to attempt to failover if myself->slaveof is
NULL."
antirez,2015-03-20 15:42:49,https://api.github.com/repos/antirez/redis/git/commits/4f2555aa17504b1f99a5f35a69302cc425b30d74,4f2555aa17504b1f99a5f35a69302cc425b30d74,"Cluster: refactoring around configEpoch handling.

This commit moves the process of generating a new config epoch without
consensus out of the clusterCommand() implementation, in order to make
it reusable for other reasons (current target is to have a CLUSTER
FAILOVER option forcing the failover when no master majority is
reachable).

Moreover the commit moves other functions which are similarly related to
config epochs in a new logical section of the cluster.c file, just for
clarity."
antirez,2015-03-20 08:57:10,https://api.github.com/repos/antirez/redis/git/commits/25c0f5ac63320e85f81750bd0f999fc6f5eba5c1,25c0f5ac63320e85f81750bd0f999fc6f5eba5c1,"Cluster: better cluster state transiction handling.

Before we relied on the global cluster state to make sure all the hash
slots are linked to some node, when getNodeByQuery() is called. So
finding the hash slot unbound was checked with an assertion. However
this is fragile. The cluster state is often updated in the
clusterBeforeSleep() function, and not ASAP on state change, so it may
happen to process clients with a cluster state that is 'ok' but yet
certain hash slots set to NULL.

With this commit the condition is also checked in getNodeByQuery() and
reported with a identical error code of -CLUSTERDOWN but slightly
different error message so that we have more debugging clue in the
future.

Root cause of issue #2288."
antirez,2015-03-20 08:46:10,https://api.github.com/repos/antirez/redis/git/commits/2ecb5edf3454e3752a428e50b6ee068e357c7fae,2ecb5edf3454e3752a428e50b6ee068e357c7fae,"Cluster: move clusterBeforeSleep() call before unblocked clients processing.

Related to issue #2288."
antirez,2015-03-18 11:09:31,https://api.github.com/repos/antirez/redis/git/commits/438a1a84e8aa37a19a744c38488b261dd62c145c,438a1a84e8aa37a19a744c38488b261dd62c145c,"Cluster: more robust slave check in CLUSTER REPLICATE.

There are rare conditions where node->slaveof may be NULL even if the
node is a slave. To check by flag is much more robust."
antirez,2015-03-13 17:23:36,https://api.github.com/repos/antirez/redis/git/commits/61fb441c8c9b350a48b9f5c3f69a3ce23aa3f9e8,61fb441c8c9b350a48b9f5c3f69a3ce23aa3f9e8,"Merge pull request #2386 from inkel/sentinel-add-client-command

Support CLIENT commands in Redis Sentinel"
antirez,2015-03-13 16:30:13,https://api.github.com/repos/antirez/redis/git/commits/e791e2dda19b83307790527ecd5f0086322a1478,e791e2dda19b83307790527ecd5f0086322a1478,"Test: fix SPOP replication test count.

If count is 0 SADD is called without element arguments, which is
currently invalid."
antirez,2015-03-13 12:16:30,https://api.github.com/repos/antirez/redis/git/commits/93b1320fac8eae53fd9fca570a1784cbd2a89d27,93b1320fac8eae53fd9fca570a1784cbd2a89d27,Cluster: fix CLUSTER NODES optimization error in 'j' increment.
antirez,2015-03-13 10:32:51,https://api.github.com/repos/antirez/redis/git/commits/4ed7582c7ba37dae64491e52f8b0d310e95298b8,4ed7582c7ba37dae64491e52f8b0d310e95298b8,Cluster: ignore various node files in create-cluster dir.
antirez,2015-03-13 10:26:04,https://api.github.com/repos/antirez/redis/git/commits/e1b6c9dd1839f5ce46ce06e87f6b4095e3f92a4f,e1b6c9dd1839f5ce46ce06e87f6b4095e3f92a4f,Cluster: CLUSTER NODES speedup.
antirez,2015-03-12 13:43:07,https://api.github.com/repos/antirez/redis/git/commits/b2e8eca70d3cf0c52c251f5a0a050d13846336a1,b2e8eca70d3cf0c52c251f5a0a050d13846336a1,Config: improve loglevel message error.
antirez,2015-03-12 08:59:10,https://api.github.com/repos/antirez/redis/git/commits/792c531688d81bbb1a6f4ca1b575f7137c24c8b9,792c531688d81bbb1a6f4ca1b575f7137c24c8b9,"CONFIG GET syslog-facility added.

Was missing for some reason. Trivial to add after config.c refactoring."
antirez,2015-03-11 22:20:57,https://api.github.com/repos/antirez/redis/git/commits/50b41b6ad3beee554e49fadc667ff0e6b00dfafa,50b41b6ad3beee554e49fadc667ff0e6b00dfafa,CONFIG SET refactoring: use enums in more places.
antirez,2015-03-11 16:24:55,https://api.github.com/repos/antirez/redis/git/commits/535b295f96e9644bff01650c6696ea67cc6f2470,535b295f96e9644bff01650c6696ea67cc6f2470,Net: better Unix socket error. Issue #2449.
antirez,2015-03-11 16:05:14,https://api.github.com/repos/antirez/redis/git/commits/4cd4910f267d2d9b6e24ab8f5ba1d390973e2a2b,4cd4910f267d2d9b6e24ab8f5ba1d390973e2a2b,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2015-03-11 15:59:56,https://api.github.com/repos/antirez/redis/git/commits/8e219224b9c9112806ecc868156fdc0b5e0b6d80,8e219224b9c9112806ecc868156fdc0b5e0b6d80,"CONFIG refactoring: configEnum abstraction.

Still many things to convert inside config.c in the next commits.
Some const safety in String objects creation and addReply() family
functions."
antirez,2015-03-11 08:02:04,https://api.github.com/repos/antirez/redis/git/commits/4a2a0d9e9d0112b1c870914aaeccf58ebc6c6ef2,4a2a0d9e9d0112b1c870914aaeccf58ebc6c6ef2,CONFIG SET: memory and special field macros.
antirez,2015-03-10 16:46:09,https://api.github.com/repos/antirez/redis/git/commits/36c1a7cba311997433dbb3b3dde2439ceed5b905,36c1a7cba311997433dbb3b3dde2439ceed5b905,"Merge pull request #2445 from soveran/add-cluster-myid

Add command CLUSTER MYID"
soveran,2015-03-10 16:43:19,https://api.github.com/repos/antirez/redis/git/commits/6201eb0c55503310a41a0f3448d1581069624303,6201eb0c55503310a41a0f3448d1581069624303,Add command CLUSTER MYID
antirez,2015-03-10 12:00:33,https://api.github.com/repos/antirez/redis/git/commits/3da7408359190fe3e5f7dadce1681609439b546e,3da7408359190fe3e5f7dadce1681609439b546e,CONFIG SET: additional 2 numerical fields refactored.
antirez,2015-03-10 11:37:39,https://api.github.com/repos/antirez/redis/git/commits/d68f28a367389ebf28cc31775e678d3e655aa660,d68f28a367389ebf28cc31775e678d3e655aa660,"CONFIG SET refactoring of bool and value fields.

Not perfect since The Solution IMHO is to have a DSL with a table of
configuration functions with type, limits, and aux functions to handle
the odd ones. However this hacky macro solution is already better and
forces to put limits in the range of numerical fields.

More field types to be refactored in the next commits hopefully."
antirez,2015-03-08 14:33:42,https://api.github.com/repos/antirez/redis/git/commits/a664040eb773922bd3190bd13a272bfeb70e092e,a664040eb773922bd3190bd13a272bfeb70e092e,Config: activerehashing option support in CONFIG SET.
antirez,2015-03-04 19:48:16,https://api.github.com/repos/antirez/redis/git/commits/509a6cc1e89e3d988511d8595dbc47a4e04b999c,509a6cc1e89e3d988511d8595dbc47a4e04b999c,"Fix iterator for issue #2438.

Itereator misuse due to analyzeLatencyForEvent() accessing the
dictionary during the iteration, without the iterator being
reclared as safe."
antirez,2015-02-27 21:33:54,https://api.github.com/repos/antirez/redis/git/commits/c77081a45a7c350428785b6e7fafeb2b57ea4330,c77081a45a7c350428785b6e7fafeb2b57ea4330,Migrate: replace conditional with pre-computed value.
antirez,2015-02-27 15:08:50,https://api.github.com/repos/antirez/redis/git/commits/4f56f035a70293be6fbc20a0545c1be53a131e7c,4f56f035a70293be6fbc20a0545c1be53a131e7c,"String: use new sdigits10() API in stringObjectLen().

Should be much faster, and regardless, the code is more obvious now
compared to generating a string just to get the return value of the
ll2stirng() function."
antirez,2015-02-27 15:01:45,https://api.github.com/repos/antirez/redis/git/commits/0e5e8ca9e67dbd9e8cd943db343564d26ca7e398,0e5e8ca9e67dbd9e8cd943db343564d26ca7e398,Utils: Include stdint.h and fix signess in sdigits10().
antirez,2015-02-27 14:44:44,https://api.github.com/repos/antirez/redis/git/commits/084a59c324d4213772e863d949c01a7d1b621b90,084a59c324d4213772e863d949c01a7d1b621b90,"Test: HSTRLEN stress test of corner cases.

Main point here is to correctly report LLONG_MIN length, since to take
the absolute value we need care in sdigits10()."
antirez,2015-02-27 14:37:04,https://api.github.com/repos/antirez/redis/git/commits/0ace1e6d04c6c7cb38a5e74c4bc5e53aac891905,0ace1e6d04c6c7cb38a5e74c4bc5e53aac891905,Hash: HSTRLEN crash fixed when getting len of int-encoded value
antirez,2015-02-27 14:30:15,https://api.github.com/repos/antirez/redis/git/commits/4e54b85a19027855f05b4c825ad4ac0c71fd9fea,4e54b85a19027855f05b4c825ad4ac0c71fd9fea,"Hash: HSTRLEN (was HVSTRLEN) improved.

1. HVSTRLEN -> HSTRLEN. It's unlikely one needs the length of the key,
   not clear how the API would work (by value does not make sense) and
   there will be better names anyway.
2. Default is to return 0 when field is missing.
3. Default is to return 0 when key is missing.
4. The implementation was slower than needed, and produced unnecessary COW.

Related issue #2415."
antirez,2015-02-27 14:24:25,https://api.github.com/repos/antirez/redis/git/commits/8855b8161fa08a38a8defa7968658c01facef7fc,8855b8161fa08a38a8defa7968658c01facef7fc,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2015-02-27 14:24:04,https://api.github.com/repos/antirez/redis/git/commits/b49c00a79c77cc49bfe3876daf4a1de023a68a3d,b49c00a79c77cc49bfe3876daf4a1de023a68a3d,"Merge pull request #2415 from landmime/unstable

added a new hvstrlen command"
antirez,2015-02-27 14:22:49,https://api.github.com/repos/antirez/redis/git/commits/d8f8b0575f489bba28cd2b03380bdbbbc48b6f66,d8f8b0575f489bba28cd2b03380bdbbbc48b6f66,Hash: API to get value string len by field name.
antirez,2015-02-27 14:20:58,https://api.github.com/repos/antirez/redis/git/commits/c95507881acb0d8cdaf7e0a29f445ee2fdaa2c80,c95507881acb0d8cdaf7e0a29f445ee2fdaa2c80,Utils: added function to get radix 10 string length of signed integer.
antirez,2015-02-26 17:31:06,https://api.github.com/repos/antirez/redis/git/commits/7e6b4ea67bf38595ae25bdd6aa253702a1fd5509,7e6b4ea67bf38595ae25bdd6aa253702a1fd5509,"server.current_client fix and minor refactoring.

Thanks to @codeslinger (Toby DiPasquale) for identifying the issue.

Related to issue #2409."
antirez,2015-02-26 09:25:15,https://api.github.com/repos/antirez/redis/git/commits/832b0c7ccef0e7e11e0663530367de1d3fb9a959,832b0c7ccef0e7e11e0663530367de1d3fb9a959,"Improvements to PR #2425

1. Remove useless ""cs"" initialization.
2. Add a ""select"" var to capture a condition checked multiple times.
3. Avoid duplication of the same if (!copy) conditional.
4. Don't increment dirty if copy is given (no deletion is performed),
   otherwise we propagate MIGRATE when not needed."
tektommy,2015-02-25 18:29:06,https://api.github.com/repos/antirez/redis/git/commits/7fda935ad3b00dee511283f9bed92cd43cabcbf5,7fda935ad3b00dee511283f9bed92cd43cabcbf5,"Add last_dbid to migrateCachedSocket to avoid redundant SELECT

Avoid redundant SELECT calls when continuously migrating keys to
the same dbid within a target Redis instance."
antirez,2015-02-25 12:02:04,https://api.github.com/repos/antirez/redis/git/commits/cc0d339bd19d37367806cc95111f1539aa268004,cc0d339bd19d37367806cc95111f1539aa268004,utils/hashtable/rehashing.c test updated to use new API.
antirez,2015-02-25 11:52:23,https://api.github.com/repos/antirez/redis/git/commits/126462ee3676777e8e72669d1abb3ae5c429805f,126462ee3676777e8e72669d1abb3ae5c429805f,"Merge pull request #2405 from sisirkoppaka/unstable

rehashing.c: Fix compile error originating from SPOP rewrite"
antirez,2015-02-25 09:37:52,https://api.github.com/repos/antirez/redis/git/commits/74354ceef53651aa30486a1b7181438d71cfbd1b,74354ceef53651aa30486a1b7181438d71cfbd1b,Test: fixes a few tests after basic unit refactoring.
antirez,2015-02-25 09:33:37,https://api.github.com/repos/antirez/redis/git/commits/27c30b0e84224cfc5f4189c26e16800f3e0dcd27,27c30b0e84224cfc5f4189c26e16800f3e0dcd27,"Cast sentlen to int before comparison wit bufpos.

This is safe since bufpos is small, inside the range of the local
client buffer."
antirez,2015-02-25 09:31:29,https://api.github.com/repos/antirez/redis/git/commits/954151f62b79a86b90f8b840fe7c1d1df78c71c3,954151f62b79a86b90f8b840fe7c1d1df78c71c3,"Test: split basic unit into string, incr, keyspace units."
antirez,2015-02-25 09:18:07,https://api.github.com/repos/antirez/redis/git/commits/9454f7b3db48c33cd8bb2d508a6402c4b51cf964,9454f7b3db48c33cd8bb2d508a6402c4b51cf964,"Merge pull request #2050 from mattsta/bitops-no-overalloc

Bitops: Stop overallocating storage space on set"
antirez,2015-02-25 09:09:40,https://api.github.com/repos/antirez/redis/git/commits/e00cb78f6712ec2f796f430c7de90e1e64c1ec6d,e00cb78f6712ec2f796f430c7de90e1e64c1ec6d,"Merge pull request #2054 from mattsta/fix-set-sentinel-quorum

Sentinel: Add initial quorum bounds check"
mattsta,2015-02-24 16:31:04,https://api.github.com/repos/antirez/redis/git/commits/47ab570441f8012fb9aa6a0b38606bc9462e2bd3,47ab570441f8012fb9aa6a0b38606bc9462e2bd3,"Fix types broken by previous type cleanup

Revert some size_t back to off_t
Set reply_bytes needs to 64 bits everywhere
Revert bufpos to int since it's a max of 16k into buf[]"
antirez,2015-02-24 16:22:53,https://api.github.com/repos/antirez/redis/git/commits/d83c810265c5c27ceec418b394860f82bb9ac446,d83c810265c5c27ceec418b394860f82bb9ac446,"Merge pull request #2301 from mattsta/fix/lengths

Improve type correctness"
antirez,2015-02-24 16:20:09,https://api.github.com/repos/antirez/redis/git/commits/46bd13b8062227b529c851bd2ee7431309fdcfbb,46bd13b8062227b529c851bd2ee7431309fdcfbb,"Merge pull request #1966 from mattsta/fix-sentinel-info

Sentinel: Improve INFO command behavior"
antirez,2015-02-24 16:19:17,https://api.github.com/repos/antirez/redis/git/commits/3689a0582bef619a574835044c68c05dd8bd13f7,3689a0582bef619a574835044c68c05dd8bd13f7,"Merge pull request #2273 from mattsta/improve/consistency/INFO/memory

Improve consistency of INFO MEMORY"
antirez,2015-02-24 16:13:39,https://api.github.com/repos/antirez/redis/git/commits/5ff00ac8c1e70c33e539f4d2079b665d457016fd,5ff00ac8c1e70c33e539f4d2079b665d457016fd,"Merge pull request #2401 from mattsta/fix/quicklist/pop

Fix quicklist Pop()"
antirez,2015-02-23 10:24:24,https://api.github.com/repos/antirez/redis/git/commits/fc365a3a001d0ec55e6bde914708911aa1b524c4,fc365a3a001d0ec55e6bde914708911aa1b524c4,"Change RENAME behavior when src and dst keys are the same.

Fixes issue #2392."
landmime,2015-02-21 15:01:18,https://api.github.com/repos/antirez/redis/git/commits/db9461e466afeeb9b50a80b78934144922482f5b,db9461e466afeeb9b50a80b78934144922482f5b,"added a new hvstrlen command

the hvstrlen command returns the length of a hash field value"
antirez,2015-02-19 21:47:32,https://api.github.com/repos/antirez/redis/git/commits/0aa5acc8f31a45ba4ee625227bae80e125fd8bdb,0aa5acc8f31a45ba4ee625227bae80e125fd8bdb,Give obvious instructions on how to bind all interfaces.
antirez,2015-02-19 21:42:31,https://api.github.com/repos/antirez/redis/git/commits/1024664247a0853569bcd8abe1127cd107a20fc8,1024664247a0853569bcd8abe1127cd107a20fc8,"Example redis.conf binds just to 127.0.0.1.

It's hard to pick a good approach here. A few arguments:

1) There are many exposed instances on the internet.
2) Changing the default when ""bind"" is not given is very dangerous,
   after an upgrade the server changes a fundamental behavior.
3) Usually Redis, when used in a proper way, will be protected *and*
   accessed often from other computers, so this new default is likely
   not what most people want.
4) However if users end with this default, they are using the example
   redis.conf: likely they are reading what is inside, and they'll see
   the warning."
sisirkoppaka,2015-02-18 13:16:41,https://api.github.com/repos/antirez/redis/git/commits/acb933a747ea5ecc85d984867e8627a813ffe2c1,acb933a747ea5ecc85d984867e8627a813ffe2c1,rehashing.c: Fix compile error originating from SPOP rewrite
mattsta,2015-02-17 16:28:45,https://api.github.com/repos/antirez/redis/git/commits/552e5908bb0dc7e9c7db20db20315e961612db33,552e5908bb0dc7e9c7db20db20315e961612db33,"Fix quicklist tests for Pop()

Now the tests actually compare return values instead of just
verifying _something_ got returned."
emperor1523,2015-02-16 16:03:21,https://api.github.com/repos/antirez/redis/git/commits/395e11255cc924c2ee4cc4ddcbf30d269b193316,395e11255cc924c2ee4cc4ddcbf30d269b193316,"Fix quicklist Pop() result

Closes #2398"
antirez,2015-02-14 16:19:37,https://api.github.com/repos/antirez/redis/git/commits/cfe5eaaed6c136f34db8ada4a704dc81491e2742,cfe5eaaed6c136f34db8ada4a704dc81491e2742,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2015-02-14 16:19:17,https://api.github.com/repos/antirez/redis/git/commits/41a1fb8186f2687fb738fe5cbab74e02595474e4,41a1fb8186f2687fb738fe5cbab74e02595474e4,Version bumped to 3.1.999 (3.2 alpha versions).
antirez,2015-02-13 14:55:44,https://api.github.com/repos/antirez/redis/git/commits/e5760987e9b327c18e6c0358a14da5c19341c123,e5760987e9b327c18e6c0358a14da5c19341c123,"Merge pull request #2393 from badboy/readme-fix

Readme fix"
badboy,2015-02-13 14:10:46,https://api.github.com/repos/antirez/redis/git/commits/07a89654dae420fc060743c101837e8383c69537,07a89654dae420fc060743c101837e8383c69537,Link files in README
antirez,2015-02-13 14:39:44,https://api.github.com/repos/antirez/redis/git/commits/9795ad1bc25d30fc12f7c90824937a13eb9dcf5f,9795ad1bc25d30fc12f7c90824937a13eb9dcf5f,"Fix README links again.

Apparently no refernece-style links supported in Github markdown."
antirez,2015-02-13 14:37:19,https://api.github.com/repos/antirez/redis/git/commits/78c44ca6464de71e31021b6dc8355429cd703718,78c44ca6464de71e31021b6dc8355429cd703718,Fix links into README.
antirez,2015-02-13 14:34:22,https://api.github.com/repos/antirez/redis/git/commits/f916a589b5e423a63269a3237da5cc10040ce298,f916a589b5e423a63269a3237da5cc10040ce298,README: give idea about what Redis is.
badboy,2015-02-13 14:10:20,https://api.github.com/repos/antirez/redis/git/commits/2576864ba7d26ee5ce2de883b06a41131c4babd9,2576864ba7d26ee5ce2de883b06a41131c4babd9,"Use code tags where necessary, escape special markers"
antirez,2015-02-13 13:57:05,https://api.github.com/repos/antirez/redis/git/commits/c414db2f98b4d78f7b0dc8205f870b4b77346c99,c414db2f98b4d78f7b0dc8205f870b4b77346c99,A few more README markdown conversions.
antirez,2015-02-13 13:55:53,https://api.github.com/repos/antirez/redis/git/commits/097b3079b4be704879505a51189a7e7f7028457d,097b3079b4be704879505a51189a7e7f7028457d,Fix README minor grammar issues.
antirez,2015-02-13 13:55:09,https://api.github.com/repos/antirez/redis/git/commits/cac9a900cb7e44b73d5d212309472b26c2a23765,cac9a900cb7e44b73d5d212309472b26c2a23765,README -> README.md.
antirez,2015-02-13 13:38:21,https://api.github.com/repos/antirez/redis/git/commits/f638f045ce4d54b04d2e089bb3a57b6d4740c3f5,f638f045ce4d54b04d2e089bb3a57b6d4740c3f5,"redis-cli --latency-dist: one gray more, and --mono support."
antirez,2015-02-13 11:44:40,https://api.github.com/repos/antirez/redis/git/commits/3101d2bffb9437a3a82920ef48c51955783a7070,3101d2bffb9437a3a82920ef48c51955783a7070,"redis-cli --latency-dist, hopefully better palette.

Less grays: more readable palette since usually we have a non linear
distribution of percentages and very near gray tones are hard to take
apart. Final part of the palette is gradient from yellow to red. The red
part is hardly reached because of usual distribution of latencies, but
shows up mainly when latencies are very high because of the logarithmic
scale, this is coherent to what people expect: red = bad."
antirez,2015-02-12 16:07:04,https://api.github.com/repos/antirez/redis/git/commits/b1de179c01d90378b1402526e42a7035d0bc72a0,b1de179c01d90378b1402526e42a7035d0bc72a0,"Merge pull request #2390 from sawaman/fix-typo

Unify to uppercase the headline"
antirez,2015-02-12 15:51:20,https://api.github.com/repos/antirez/redis/git/commits/cd4e0f43dfa02f718ee2e836ea96bd262c4cf28e,cd4e0f43dfa02f718ee2e836ea96bd262c4cf28e,"Extend memory unit support in CONFIG SET.

Related to PR #2357."
antirez,2015-02-12 15:42:09,https://api.github.com/repos/antirez/redis/git/commits/866b3fc0ec5c61fc3504df2b15445e79437a6b78,866b3fc0ec5c61fc3504df2b15445e79437a6b78,"Merge pull request #2357 from lamby/config-set-maxmemory-units

Support ""1G"" etc. units in CONFIG SET maxmemory"
antirez,2015-02-12 15:40:41,https://api.github.com/repos/antirez/redis/git/commits/29b54db32091fb04a75a9dc196adc492e4933493,29b54db32091fb04a75a9dc196adc492e4933493,"Better memtoll() error checking.

Related to PR #2357."
MasahikoSawada,2015-02-12 12:20:22,https://api.github.com/repos/antirez/redis/git/commits/2b3eba056cd1c36171436dad74bfeeedcdbed425,2b3eba056cd1c36171436dad74bfeeedcdbed425,Unify to uppercase the headline
antirez,2015-02-11 09:45:01,https://api.github.com/repos/antirez/redis/git/commits/a1d9ec0d448b3f0d41eff9c8ba48af3c47976ef2,a1d9ec0d448b3f0d41eff9c8ba48af3c47976ef2,SPOP replication tests.
antirez,2015-02-11 09:12:00,https://api.github.com/repos/antirez/redis/git/commits/dffbbb5a78154d42395284e9b8bf33b236a45599,dffbbb5a78154d42395284e9b8bf33b236a45599,SPOP explicit tests for the three different code paths.
antirez,2015-02-11 09:11:28,https://api.github.com/repos/antirez/redis/git/commits/a37d0f8b48e91d1ec50ac97ef7fa832794cf6edd,a37d0f8b48e91d1ec50ac97ef7fa832794cf6edd,SPOP with count: fix replication for code path #3.
antirez,2015-02-10 21:59:12,https://api.github.com/repos/antirez/redis/git/commits/9feee428f25a5681a06cd13ed1c4cc644759e719,9feee428f25a5681a06cd13ed1c4cc644759e719,"SPOP: reimplemented for speed and better distribution.

The old version of SPOP with ""count"" argument used an API call of dict.c
which was actually designed for a different goal, and was not capable of
good distribution. We follow a different three-cases approach optimized
for different ratiion between sets and requested number of elements.

The implementation is simpler and allowed the removal of a large amount
of code."
antirez,2015-02-09 22:57:52,https://api.github.com/repos/antirez/redis/git/commits/55003f7a118beb20ed1bc65926e29e207c3b721a,55003f7a118beb20ed1bc65926e29e207c3b721a,alsoPropagate: handle REDIS_CALL_PROPAGATE and AOF loading.
antirez,2015-02-09 22:44:42,https://api.github.com/repos/antirez/redis/git/commits/cc7f0434b5c590e5a61c3cefa6ed9fb193d021dd,cc7f0434b5c590e5a61c3cefa6ed9fb193d021dd,"Change alsoPropagate() behavior to make it more usable.

Now the API automatically creates its argv copy and increment ref count
of passed objects."
antirez,2015-02-09 21:49:27,https://api.github.com/repos/antirez/redis/git/commits/6b5922dcbbfe5428accc093892ff330211acf5d7,6b5922dcbbfe5428accc093892ff330211acf5d7,"SPOP with count: initial fixes to the implementation.

Severan problems are addressed but still a few missing.
Since replication of this command was more complex than others since it
needs to replicate multiple SREM commands, an old API able to do this
was reused (it was taken inside the implementation since it was pretty
obvious soon or later that would be useful). The API was improved a bit
so that now a command may opt-out for the standard command replication
when the server.dirty counter is incremented, in order to ""manually""
replicate what it wants."
antirez,2015-02-09 14:17:20,https://api.github.com/repos/antirez/redis/git/commits/585d1a60bf5b451b83e066a454d87e02ead08666,585d1a60bf5b451b83e066a454d87e02ead08666,Separate latency monitoring of eviction loop and eviction DELs.
antirez,2015-02-08 10:19:47,https://api.github.com/repos/antirez/redis/git/commits/8ddc14523fe5773d99a2dffba748d349f4419994,8ddc14523fe5773d99a2dffba748d349f4419994,"dict.c: reset emptylen when bucket is not empty.

Fixed by @oranagra, thank you."
antirez,2015-02-07 09:11:43,https://api.github.com/repos/antirez/redis/git/commits/edda00b902910c73b5d2dcb56e43a66b6d541193,edda00b902910c73b5d2dcb56e43a66b6d541193,dict.c Rehashing visualization code snippet added to utils.
antirez,2015-02-07 08:54:07,https://api.github.com/repos/antirez/redis/git/commits/05841a638697c0bbbc90bf2dc2da90659b71c26a,05841a638697c0bbbc90bf2dc2da90659b71c26a,redis-cli --stat: show LOAD when loading.
antirez,2015-02-06 15:17:11,https://api.github.com/repos/antirez/redis/git/commits/8696874d75977e2916c427db4002d053fbb3ff1f,8696874d75977e2916c427db4002d053fbb3ff1f,Remove optional single-key path from evictionPoolPopulate().
antirez,2015-02-06 14:48:42,https://api.github.com/repos/antirez/redis/git/commits/5792a217f85633225209557d952ad2fa6a3fa0c0,5792a217f85633225209557d952ad2fa6a3fa0c0,"dict.c: add dictGetSomeKeys(), specialized for eviction."
antirez,2015-02-06 09:48:13,https://api.github.com/repos/antirez/redis/git/commits/f25fdd6246f01b6ee3c0ce557e2911bc8c068518,f25fdd6246f01b6ee3c0ce557e2911bc8c068518,"dict.c: avoid code repetition in dictRehash().

Avoid code repetition introduced with PR #2367, also fixes the return
value to always return 0 if there is nothing more to rehash."
sunheehnus,2015-02-06 03:18:58,https://api.github.com/repos/antirez/redis/git/commits/2385630d0d245482027e9e36c76d6f8675dd2f6b,2385630d0d245482027e9e36c76d6f8675dd2f6b,dict.c/dictRehash: check again to update
antirez,2015-02-05 11:15:58,https://api.github.com/repos/antirez/redis/git/commits/4f427bc298b0cfc45bd25381cd04df86868c0843,4f427bc298b0cfc45bd25381cd04df86868c0843,"dict.c: don't try buckets that are empty for sure in dictGetRandomKey().

This is very similar to the optimization applied to dictGetRandomKeys,
but applied to the single key variant.

Related to issue #2306."
antirez,2015-02-05 10:28:45,https://api.github.com/repos/antirez/redis/git/commits/1bcf67a75f775b342653505465b5e8ee03974809,1bcf67a75f775b342653505465b5e8ee03974809,"dict.c: dictGetRandomKeys() optimization for big->small table case.

Related to issue #2306."
antirez,2015-02-05 09:58:28,https://api.github.com/repos/antirez/redis/git/commits/88cd9ebc0964c9daf32d97631b5eeba5fd0e8b09,88cd9ebc0964c9daf32d97631b5eeba5fd0e8b09,"dict.c: dictGetRandomKeys() visit pattern optimization.

We use the invariant that the original table ht[0] is never populated up
to the index before the current rehashing index.

Related to issue #2306."
antirez,2015-02-05 09:51:05,https://api.github.com/repos/antirez/redis/git/commits/cd0fcf11e7704c72b68a19f92e093bc5976fe7fc,cd0fcf11e7704c72b68a19f92e093bc5976fe7fc,"dict.c: put a bound to max work dictRehash() call can do.

Related to issue #2306."
antirez,2015-02-05 09:42:09,https://api.github.com/repos/antirez/redis/git/commits/777020839a1ba68ea5bd77a5b17648f4b831caf7,777020839a1ba68ea5bd77a5b17648f4b831caf7,"dict.c: prevent useless resize to same size.

Related to issue #2306."
antirez,2015-02-04 21:12:46,https://api.github.com/repos/antirez/redis/git/commits/170e41464dfff851f939fd73c1c4ec8a02507859,170e41464dfff851f939fd73c1c4ec8a02507859,"Less blocking dictGetRandomKeys().

Related to issue #2306."
antirez,2015-02-10 13:47:45,https://api.github.com/repos/antirez/redis/git/commits/5e3dcc522b13d5441d6cdf4ee6ff48bd25df13cb,5e3dcc522b13d5441d6cdf4ee6ff48bd25df13cb,"Faster memory efficiency test.

This test on Linux was extremely slow, since in Tcl we can't enable
easily tcp-nodelay, so the busy loop used to take *a lot* with bigger
writes. Fixed using pipelining."
antirez,2015-02-10 13:40:27,https://api.github.com/repos/antirez/redis/git/commits/e1fce55237ee1092384017a157882d548c6a517f,e1fce55237ee1092384017a157882d548c6a517f,Added regression test for issue #2371.
antirez,2015-02-10 08:29:14,https://api.github.com/repos/antirez/redis/git/commits/9e9abe29fee509095dcd8af3648019bbe980279b,9e9abe29fee509095dcd8af3648019bbe980279b,"HAVE_SYNC_FILE_RANGE should be protected by ifdef __linux__.

Related to issue #2372."
antirez,2015-02-10 08:27:46,https://api.github.com/repos/antirez/redis/git/commits/50a57c67b2050178487d119d56dc536a2fd661d1,50a57c67b2050178487d119d56dc536a2fd661d1,"Merge pull request #2372 from mariano-perez-rodriguez/patch-2

Fix HAVE_BACKTRACE on Linux"
antirez,2015-02-09 10:06:44,https://api.github.com/repos/antirez/redis/git/commits/bd128f7969d0b28dbefe56bfdfa0b5b54102dc97,bd128f7969d0b28dbefe56bfdfa0b5b54102dc97,redis-cli --lru-test implemented (cache workload simulator).
antirez,2015-02-08 22:28:27,https://api.github.com/repos/antirez/redis/git/commits/ca23b2a6b739f179ed0dab3a3639153d8b18fd59,ca23b2a6b739f179ed0dab3a3639153d8b18fd59,"redis-cli: interactive reconnection for latency modes.

--stat mode already used to reconnect automatically if the server is no
longer available. This is useful since this is an interactive mode used
for debugging, however the same applies to --latency and --latency-dist
modes, so now both use the reconnecting command execution as well.

The reconnection code was modified to use basic VT100 escape sequences
in order to play better with different kinds of output on the screen
when the reconnection happens, and to hide the reconnection attempt
output when finally the reconnection happens."
antirez,2015-02-08 16:39:42,https://api.github.com/repos/antirez/redis/git/commits/cfe21852e79792b08afd2fe0872440edcddf577e,cfe21852e79792b08afd2fe0872440edcddf577e,"redis-cli --latecy-dist reverted to gray scale.

So far not able to find a color palette within the 256 colors which is
not confusing. However I believe it is a possible task, so will try
better later."
antirez,2015-02-07 19:15:40,https://api.github.com/repos/antirez/redis/git/commits/2723412b7bd15f37b8e714dc43a91732b7b606a3,2723412b7bd15f37b8e714dc43a91732b7b606a3,"redis-cli --latency-dist now uses a color palette.

Still not happy with the result but low grays are hard to see in certain
monitors with a non perfect gamma."
antirez,2015-02-07 17:06:10,https://api.github.com/repos/antirez/redis/git/commits/ace1acc532516bd5bd4af7faa9f173e233fa0549,ace1acc532516bd5bd4af7faa9f173e233fa0549,redis-cli latency dist: add new top HL.
mariano-perez-rodriguez,2015-02-07 17:02:33,https://api.github.com/repos/antirez/redis/git/commits/c83a739bd8c9e6451414bcacade98733aeaa9834,c83a739bd8c9e6451414bcacade98733aeaa9834,"Fix for #2371

Fixing #2371 as per @mattsta's suggestion"
antirez,2015-02-07 14:05:40,https://api.github.com/repos/antirez/redis/git/commits/414df143f51bab2f984c0fb67fccc637733bc570,414df143f51bab2f984c0fb67fccc637733bc570,Add missing latency-dest legend symbol.
antirez,2015-02-07 13:50:12,https://api.github.com/repos/antirez/redis/git/commits/2860cf4139827c2791c5f79324555d7acf150243,2860cf4139827c2791c5f79324555d7acf150243,Initial implementation of redis-cli --latency-dist.
lamby,2015-02-04 18:29:22,https://api.github.com/repos/antirez/redis/git/commits/eaeba1b2c85812c6b16a8ef50bf889d72804db09,eaeba1b2c85812c6b16a8ef50bf889d72804db09,"Tidy grammar in CONFIG SET maxmemory warning.

Signed-off-by: Chris Lamb <chris@chris-lamb.co.uk>"
lamby,2015-02-04 18:36:38,https://api.github.com/repos/antirez/redis/git/commits/ba74711e0609b92721fc2d5a13c90aa88f623254,ba74711e0609b92721fc2d5a13c90aa88f623254,"Support ""1G"" etc. units in CONFIG SET maxmemory

Signed-off-by: Chris Lamb <chris@chris-lamb.co.uk>"
antirez,2015-02-04 10:53:19,https://api.github.com/repos/antirez/redis/git/commits/2ac7b5a8b41bb71fce52c86f9ba420769663609e,2ac7b5a8b41bb71fce52c86f9ba420769663609e,Fix RDB corruption test after server behavior change.
antirez,2015-02-04 10:26:31,https://api.github.com/repos/antirez/redis/git/commits/78dd2b313eb7b398bac64543390dcfd70e6fd148,78dd2b313eb7b398bac64543390dcfd70e6fd148,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2015-02-04 10:24:46,https://api.github.com/repos/antirez/redis/git/commits/c5dd686ecb90d8d969f521d02caade4a3fa6d56e,c5dd686ecb90d8d969f521d02caade4a3fa6d56e,Replication: put server.master client creation into separated function.
antirez,2015-02-03 14:42:56,https://api.github.com/repos/antirez/redis/git/commits/719c6c2b96bdb9638dc3eae66f3568608181add6,719c6c2b96bdb9638dc3eae66f3568608181add6,"Suppress sign warning in sort.c.

Related to #2346."
antirez,2015-02-03 14:38:21,https://api.github.com/repos/antirez/redis/git/commits/96abf659008e7e8e544e446bbfac922c059a5650,96abf659008e7e8e544e446bbfac922c059a5650,"Hopefully better sort.c optimization comments.

Related to #2346."
antirez,2015-02-03 14:32:38,https://api.github.com/repos/antirez/redis/git/commits/5fbb36f9e7cfc4012018c433b3ed682b06246f03,5fbb36f9e7cfc4012018c433b3ed682b06246f03,"Merge pull request #2346 from sunheehnus/sort

Little optimization & bug fix in sort.c"
antirez,2015-02-03 13:17:06,https://api.github.com/repos/antirez/redis/git/commits/1dbd8e94a7a0bed51c9c35f6c34486dad876ebc5,1dbd8e94a7a0bed51c9c35f6c34486dad876ebc5,More obvious indentation in setCommand().
antirez,2015-02-03 13:13:30,https://api.github.com/repos/antirez/redis/git/commits/51010007bc49b8a41525d294e34660e36339a7f6,51010007bc49b8a41525d294e34660e36339a7f6,Merge branch 'unstable' of git://github.com/mihirvj/redis into set-pr
antirez,2015-02-03 09:33:05,https://api.github.com/repos/antirez/redis/git/commits/fad758b32292b9467a65f9f0f32ec8d4d0c84d4e,fad758b32292b9467a65f9f0f32ec8d4d0c84d4e,Check RDB automatically in a few more cases.
antirez,2015-02-03 09:25:01,https://api.github.com/repos/antirez/redis/git/commits/7d1e15808422a1233280440566a5c684de7aa92f,7d1e15808422a1233280440566a5c684de7aa92f,"Handle redis-check-rdb as a standalone program.

This also makes it backward compatible in the usage, but for the command
name. However the old command name was less obvious so it is worth to
break it probably.

With the new setup the program main can perform argument parsing and
everything else useful for an RDB check regardless of the Redis server
itself."
antirez,2015-02-03 09:09:21,https://api.github.com/repos/antirez/redis/git/commits/45102a6f639712cd6025112bac6a988dc6e6b897,45102a6f639712cd6025112bac6a988dc6e6b897,"Norrow backtrace and setproctitle() to Linux+glibc.

Backtrace is a glibc extension, while setproctitle() implementation
depends on the memory layout and is partially libc dependent."
antirez,2015-02-03 08:34:20,https://api.github.com/repos/antirez/redis/git/commits/128c642d055c4502db8d096c3d63b971d4708c92,128c642d055c4502db8d096c3d63b971d4708c92,Ignore config.sh inside create-cluster script dir.
antirez,2015-02-02 21:47:57,https://api.github.com/repos/antirez/redis/git/commits/cdc0e9bfb55c8e285e50a50fd5e9a8723ac41cbc,cdc0e9bfb55c8e285e50a50fd5e9a8723ac41cbc,"Merge pull request #2318 from mattcollier/patch-1

Fix redis-cli CSV NIL output"
inkel,2015-02-02 21:16:18,https://api.github.com/repos/antirez/redis/git/commits/d5e01519e5348ddb9166473f465dfc2dfab303ac,d5e01519e5348ddb9166473f465dfc2dfab303ac,"Support CLIENT commands in Redis Sentinel

When trying to debug sentinel connections or max connections errors it
would be very useful to have the ability to see the list of connected
clients to a running sentinel. At the same time it would be very helpful
to be able to name each sentinel connection or kill offending clients.

This commits adds the already defined CLIENT commands back to Redis
Sentinel."
sunheehnus,2015-02-02 03:29:20,https://api.github.com/repos/antirez/redis/git/commits/c908774b9e071cc1e4fddd8f430e13aec31f9b67,c908774b9e071cc1e4fddd8f430e13aec31f9b67,"sort.c: REDIS_LIST's dontsort optimization

also fix the situation ""dontsort DESC"" of a list"
antirez,2015-01-30 14:19:39,https://api.github.com/repos/antirez/redis/git/commits/6502947a8519e9109c6fa1575460290d92b48f38,6502947a8519e9109c6fa1575460290d92b48f38,redis-check-rdb: initialize entry in case while is never entered.
antirez,2015-01-30 11:03:17,https://api.github.com/repos/antirez/redis/git/commits/79fa67cdb8a92ed98a499dbb31483740dac0686c,79fa67cdb8a92ed98a499dbb31483740dac0686c,Cluster: Tcl script to check avg pfail->fail time.
antirez,2015-01-30 10:54:18,https://api.github.com/repos/antirez/redis/git/commits/233729fe7f6a26bfff62eba78716b711dc1719ce,233729fe7f6a26bfff62eba78716b711dc1719ce,"Cluster: some bias towwards FAIL/PFAIL nodes in gossip sections.

This improves PFAIL -> FAIL switch. Too late at this point in the RC
releases to add proper PFAIL/FAIL separate dictionary to do this in a
less randomized way. Tested in practice with experiments that this
helps. PFAIL -> FAIL average with 20 nodes and node-timeout set to 5
seconds takes 2.5 seconds without this commit, 1 second with this
commit."
antirez,2015-01-30 10:23:27,https://api.github.com/repos/antirez/redis/git/commits/69b4f00d28f471f66ddf83155bc41ad608918f44,69b4f00d28f471f66ddf83155bc41ad608918f44,More correct wanted / maxiterations values in clusterSendPing().
antirez,2015-01-30 09:41:45,https://api.github.com/repos/antirez/redis/git/commits/6b1c6334bec4277b2c5cb8f04975deb22e8e3a58,6b1c6334bec4277b2c5cb8f04975deb22e8e3a58,Cluster: create-cluster script improved.
antirez,2015-01-29 14:40:08,https://api.github.com/repos/antirez/redis/git/commits/e5a22064cce137cb4897779050966a719dd4bdce,e5a22064cce137cb4897779050966a719dd4bdce,Cluster: magical 10% of nodes explained in comments.
antirez,2015-01-29 14:01:26,https://api.github.com/repos/antirez/redis/git/commits/1efacfe53d27913f640c886633340c37f76eafda,1efacfe53d27913f640c886633340c37f76eafda,CLUSTER count-failure-reports command added.
antirez,2015-01-29 13:17:45,https://api.github.com/repos/antirez/redis/git/commits/3fd43062c8127857f98c09a06bf70710b2dc2f68,3fd43062c8127857f98c09a06bf70710b2dc2f68,"Cluster: use a number of gossip sections proportional to cluster size.

Otherwise it is impossible to receive the majority of failure reports in
the node_timeout*2 window in larger clusters.

Still with a 200 nodes cluster, 20 gossip sections are a very reasonable
amount of bytes to send.

A side effect of this change is also fater cluster nodes joins for large
clusters, because the cluster layout makes less time to propagate."
antirez,2015-01-29 12:21:42,https://api.github.com/repos/antirez/redis/git/commits/d59ad97d76eeb7cf39809e598bb3a34c57c81978,d59ad97d76eeb7cf39809e598bb3a34c57c81978,create-cluster script: sane default timeout.
antirez,2015-01-28 22:28:27,https://api.github.com/repos/antirez/redis/git/commits/69583be1812027a1877d14639bdaf76675549989,69583be1812027a1877d14639bdaf76675549989,Ignore redis-check-rdb after the name switch.
antirez,2015-01-28 22:26:42,https://api.github.com/repos/antirez/redis/git/commits/8899f91a7f29500e0005fa8a19211503267d884f,8899f91a7f29500e0005fa8a19211503267d884f,"create-cluster script added.

Simple shell script to create / destroy Redis clusters for manual
testing."
antirez,2015-01-28 16:30:27,https://api.github.com/repos/antirez/redis/git/commits/d3ef6c94bfa2d063f0fdbf128fba20119f5c1986,d3ef6c94bfa2d063f0fdbf128fba20119f5c1986,"Merge pull request #1744 from mattsta/better-RDB-failure-error

Improve Loading RDB Failure Action"
mattsta,2014-05-12 15:44:37,https://api.github.com/repos/antirez/redis/git/commits/d8c7db1bdba3938f31856a067b2966285acbf97f,d8c7db1bdba3938f31856a067b2966285acbf97f,"Improve RDB error-on-load handling

Previouly if we loaded a corrupt RDB, Redis printed an error report
with a big ""REPORT ON GITHUB"" message at the bottom.  But, we know
RDB load failures are corrupt data, not corrupt code.

Now when RDB failure is detected (duplicate keys or unknown data
types in the file), we run check-rdb against the RDB then exit.  The
automatic check-rdb hopefully gives the user instant feedback
about what is wrong instead of providing a mysterious stack
trace."
mattsta,2014-05-12 16:12:48,https://api.github.com/repos/antirez/redis/git/commits/764b000c3e7fcb88bdef51b4d3339fa9f620ee07,764b000c3e7fcb88bdef51b4d3339fa9f620ee07,"Remove code duplication from check-rdb

redis-check-rdb (previously redis-check-dump) had every RDB define
copy/pasted from rdb.h and some defines copied from redis.h.  Since
the initial copy, some constants had changed in Redis headers and
check-dump was using incorrect values.

Since check-rdb is now a mode of Redis, the old check-dump code
is cleaned up to:
  - replace all printf with redisLog (and remove \n from all strings)
  - remove all copy/pasted defines to use defines from rdb.h and redis.h
  - replace all malloc/free with zmalloc/zfree
  - remove unnecessary include headers"
mattsta,2014-05-09 16:06:06,https://api.github.com/repos/antirez/redis/git/commits/145473acc5798a499a0f37e42df48a014a3955c1,145473acc5798a499a0f37e42df48a014a3955c1,"Convert check-dump to Redis check-rdb mode

redis-check-dump is now named redis-check-rdb and it runs
as a mode of redis-server instead of an independent binary.

You can now use 'redis-server redis.conf --check-rdb' to check
the RDB defined in redis.conf.  Using argument --check-rdb
checks the RDB and exits.  We could potentially also allow
the server to continue starting if the RDB check succeeds.

This change also enables us to use RDB checking programatically
from inside Redis for certain failure conditions."
mattcollier,2015-01-25 19:01:39,https://api.github.com/repos/antirez/redis/git/commits/6ec5f1f78064264b9b33349858f8aa9157d4efe0,6ec5f1f78064264b9b33349858f8aa9157d4efe0,"Update redis-cli.c

Code was adding '\n'  (line 521) to the end of NIL values exlusively making csv output inconsistent.  Removed '\n'"
antirez,2015-01-24 06:52:24,https://api.github.com/repos/antirez/redis/git/commits/9802ec3c83cf6b61edad50bc41ddb3f6fdb13c6f,9802ec3c83cf6b61edad50bc41ddb3f6fdb13c6f,"Cluster: initialized not used fileds in gossip section.

Otherwise we risk sending not initialized data to other nodes, that may
contain anything. This was actually not possible only because the
initialization of the buffer where the cluster packets header is created
was larger than the 3 gossip sections we use, so the memory was already
all filled with zeroes by the memset()."
antirez,2015-01-23 17:11:05,https://api.github.com/repos/antirez/redis/git/commits/8aaf5075c5bb76492e56188090f33266d5a7ad46,8aaf5075c5bb76492e56188090f33266d5a7ad46,dict.c: make chaining strategy more clear in dictAddRaw().
antirez,2015-01-23 17:10:14,https://api.github.com/repos/antirez/redis/git/commits/7885e1264e561afcc0182dd4763903def5138aa8,7885e1264e561afcc0182dd4763903def5138aa8,"DEBUG structsize

Show sizes of a few important data structures in Redis. More missing."
antirez,2015-01-22 17:57:45,https://api.github.com/repos/antirez/redis/git/commits/e22d75734e7bb2293cf8fb38c285cdc56378c60f,e22d75734e7bb2293cf8fb38c285cdc56378c60f,Avoid duplicated instance execution code in Cluster test.
antirez,2015-01-22 15:31:14,https://api.github.com/repos/antirez/redis/git/commits/ca14440aa1d63632112b4c932867eedc586d1a9d,ca14440aa1d63632112b4c932867eedc586d1a9d,Merge branch 'clusterfixes' into unstable
antirez,2015-01-22 15:08:21,https://api.github.com/repos/antirez/redis/git/commits/d5ba544e674cf7606f1d7fedf5802cd9bc4037f4,d5ba544e674cf7606f1d7fedf5802cd9bc4037f4,"Cluster test: when valgrind is enabled, use a larger node-timeout.

Removes some percentage of timing related failures."
antirez,2015-01-22 10:10:43,https://api.github.com/repos/antirez/redis/git/commits/e4d65e35e6a26086ec955470baff159f5947f4c3,e4d65e35e6a26086ec955470baff159f5947f4c3,The seed must be static in getRandomHexChars().
antirez,2015-01-22 10:10:43,https://api.github.com/repos/antirez/redis/git/commits/a330b6ca97dc92222e0405e6cbae552f5aa324eb,a330b6ca97dc92222e0405e6cbae552f5aa324eb,The seed must be static in getRandomHexChars().
antirez,2015-01-22 10:00:26,https://api.github.com/repos/antirez/redis/git/commits/9826038f0bb41a79b2ab06fd7e5f1ffa745b7156,9826038f0bb41a79b2ab06fd7e5f1ffa745b7156,counter must be static in getRandomHexChars().
antirez,2015-01-21 22:19:37,https://api.github.com/repos/antirez/redis/git/commits/87301be15152bd3627c9e87533c2c96fa9d4fd67,87301be15152bd3627c9e87533c2c96fa9d4fd67,"getRandomHexChars(): use /dev/urandom just to seed.

On Darwin /dev/urandom depletes terribly fast. This is not an issue
normally, but with Redis Cluster we generate a lot of unique IDs, for
example during nodes handshakes. Our IDs need just to be unique without
other strong crypto requirements, so this commit turns the function into
something that gets a 20 bytes seed from /dev/urandom, and produces the
rest of the output just using SHA1 in counter mode."
antirez,2015-01-21 18:30:22,https://api.github.com/repos/antirez/redis/git/commits/af8d1b4bda4e53607a6165dee67ff48419901a1c,af8d1b4bda4e53607a6165dee67ff48419901a1c,Merge branch 'clusterfixes' into unstable
antirez,2015-01-21 17:48:08,https://api.github.com/repos/antirez/redis/git/commits/7e79b3f51a06ced3c13a9b8fe756e322705d5ca9,7e79b3f51a06ced3c13a9b8fe756e322705d5ca9,"Cluster test initialization: use transaction for reset + set-config-epoch.

Otherwise between the two commands other nodes may contact us making the
next SET-CONFIG-EPOCH call impossible."
mattsta,2015-01-15 19:20:59,https://api.github.com/repos/antirez/redis/git/commits/051a43e03a4db665b3bf6e8b45790298c86a96af,051a43e03a4db665b3bf6e8b45790298c86a96af,"Fix cluster migrate memory leak

Fixes valgrind error:
48 bytes in 1 blocks are definitely lost in loss record 196 of 373
   at 0x4910D3: je_malloc (jemalloc.c:944)
   by 0x42807D: zmalloc (zmalloc.c:125)
   by 0x41FA0D: dictGetIterator (dict.c:543)
   by 0x41FA48: dictGetSafeIterator (dict.c:555)
   by 0x459B73: clusterHandleSlaveMigration (cluster.c:2776)
   by 0x45BF27: clusterCron (cluster.c:3123)
   by 0x423344: serverCron (redis.c:1239)
   by 0x41D6CD: aeProcessEvents (ae.c:311)
   by 0x41D8EA: aeMain (ae.c:455)
   by 0x41A84B: main (redis.c:3832)"
mattsta,2015-01-14 16:10:25,https://api.github.com/repos/antirez/redis/git/commits/29049507ec34efd59ce6de7cff524fb44b47f934,29049507ec34efd59ce6de7cff524fb44b47f934,"Fix potential invalid read past end of array

If array has N elements, we can't read +1 if we are already at N.

Also, we need to move elements by their storage size in the array,
not just by individual bytes."
mattsta,2015-01-14 16:31:17,https://api.github.com/repos/antirez/redis/git/commits/30152554eab1d5fa3850ad6ad372aeb3dc1ebacf,30152554eab1d5fa3850ad6ad372aeb3dc1ebacf,"Fix cluster reset memory leak

[maybe] Fixes valgrind errors:
32 bytes in 4 blocks are definitely lost in loss record 107 of 228
   at 0x80EA447: je_malloc (jemalloc.c:944)
   by 0x806E59C: zrealloc (zmalloc.c:125)
   by 0x80A9AFC: clusterSetMaster (cluster.c:801)
   by 0x80AEDC9: clusterCommand (cluster.c:3994)
   by 0x80682A5: call (redis.c:2049)
   by 0x8068A20: processCommand (redis.c:2309)
   by 0x8076497: processInputBuffer (networking.c:1143)
   by 0x8073BAF: readQueryFromClient (networking.c:1208)
   by 0x8060E98: aeProcessEvents (ae.c:412)
   by 0x806123B: aeMain (ae.c:455)
   by 0x806C3DB: main (redis.c:3832)

64 bytes in 8 blocks are definitely lost in loss record 143 of 228
   at 0x80EA447: je_malloc (jemalloc.c:944)
   by 0x806E59C: zrealloc (zmalloc.c:125)
   by 0x80AAB40: clusterProcessPacket (cluster.c:801)
   by 0x80A847F: clusterReadHandler (cluster.c:1975)
   by 0x30000FF: ???

80 bytes in 10 blocks are definitely lost in loss record 148 of 228
   at 0x80EA447: je_malloc (jemalloc.c:944)
   by 0x806E59C: zrealloc (zmalloc.c:125)
   by 0x80AAB40: clusterProcessPacket (cluster.c:801)
   by 0x80A847F: clusterReadHandler (cluster.c:1975)
   by 0x2FFFFFF: ???"
mattsta,2015-01-14 16:21:50,https://api.github.com/repos/antirez/redis/git/commits/72b8574cca7480f8d4a318727c6dacad891733d6,72b8574cca7480f8d4a318727c6dacad891733d6,"Fix sending uninitialized bytes

Fixes valgrind error:
Syscall param write(buf) points to uninitialised byte(s)
   at 0x514C35D: ??? (syscall-template.S:81)
   by 0x456B81: clusterWriteHandler (cluster.c:1907)
   by 0x41D596: aeProcessEvents (ae.c:416)
   by 0x41D8EA: aeMain (ae.c:455)
   by 0x41A84B: main (redis.c:3832)
 Address 0x5f268e2 is 2,274 bytes inside a block of size 8,192 alloc'd
   at 0x4932D1: je_realloc (jemalloc.c:1297)
   by 0x428185: zrealloc (zmalloc.c:162)
   by 0x4269E0: sdsMakeRoomFor.part.0 (sds.c:142)
   by 0x426CD7: sdscatlen (sds.c:251)
   by 0x4579E7: clusterSendMessage (cluster.c:1995)
   by 0x45805A: clusterSendPing (cluster.c:2140)
   by 0x45BB03: clusterCron (cluster.c:2944)
   by 0x423344: serverCron (redis.c:1239)
   by 0x41D6CD: aeProcessEvents (ae.c:311)
   by 0x41D8EA: aeMain (ae.c:455)
   by 0x41A84B: main (redis.c:3832)
 Uninitialised value was created by a stack allocation
   at 0x457810: nodeUpdateAddressIfNeeded (cluster.c:1236)"
antirez,2015-01-21 15:46:51,https://api.github.com/repos/antirez/redis/git/commits/acb1d8debf23f3dbd9199d1276a86ada71750196,acb1d8debf23f3dbd9199d1276a86ada71750196,"Cluster test: wait for port to unbound in kill_instance.

Otherwise kill_instance + restart_instance in short succession will
still find the port busy and will fail."
antirez,2015-01-21 15:39:38,https://api.github.com/repos/antirez/redis/git/commits/4433f5a7f24350cb398ae448fca691a53a51a155,4433f5a7f24350cb398ae448fca691a53a51a155,"AOF rewrite: set iterator var to NULL when freed.

The cleanup code expects that if 'di' is not NULL, it is a valid
iterator that should be freed.

The result of this bug was a crash of the AOF rewriting process if an
error occurred after the DBs data are written and the iterator is no
longer valid."
antirez,2015-01-21 15:18:34,https://api.github.com/repos/antirez/redis/git/commits/b3bf7584b0aa5c2dbc1acf4d7f6b2c3d420e8e42,b3bf7584b0aa5c2dbc1acf4d7f6b2c3d420e8e42,Cluster/Sentinel test: also pause on abort_sentinel_test call.
antirez,2015-01-21 15:13:30,https://api.github.com/repos/antirez/redis/git/commits/a5bb0a0774fbe89d72de13624b23079031674932,a5bb0a0774fbe89d72de13624b23079031674932,Cluster/Sentinel test: pause on exceptions as well.
antirez,2015-01-21 15:03:43,https://api.github.com/repos/antirez/redis/git/commits/2601e3e4614800552a3ff5c91b4ac475a664df5a,2601e3e4614800552a3ff5c91b4ac475a664df5a,Cluster: node deletion cleanup / centralization.
antirez,2015-01-21 14:55:53,https://api.github.com/repos/antirez/redis/git/commits/59ad6ac5feac4f6760144861b723a51383a0f19b,59ad6ac5feac4f6760144861b723a51383a0f19b,"Cluster: set the slaves->slaveof filed to NULL when master is freed.

Related to issue #2289."
mattsta,2015-01-13 16:15:30,https://api.github.com/repos/antirez/redis/git/commits/491d57abaae7ddb9f32951acc3c38e27f3638b90,491d57abaae7ddb9f32951acc3c38e27f3638b90,Add --track-origins=yes to valgrind
mattsta,2015-01-09 22:43:48,https://api.github.com/repos/antirez/redis/git/commits/b0146aafebd76e89638fe6b13947d0a53f5c7b27,b0146aafebd76e89638fe6b13947d0a53f5c7b27,Tell sentinel/cluster tests to allow valgrind
antirez,2015-01-21 13:51:42,https://api.github.com/repos/antirez/redis/git/commits/92cfab44b240750d957ae226efac7235c7ef655b,92cfab44b240750d957ae226efac7235c7ef655b,Fix gcc warning for lack of casting to char pointer.
antirez,2015-01-20 22:20:12,https://api.github.com/repos/antirez/redis/git/commits/e467cf5db31322868b8a374e57a74e9ed7150c78,e467cf5db31322868b8a374e57a74e9ed7150c78,"luaRedisGenericCommand(): log error at WARNING level when re-entered.

Rationale is that when re-entering, it is likely due to Lua debugging
hooks. Returning an error will be ignored in most cases, going totally
unnoticed. With the log at least we leave a trace.

Related to issue #2302."
antirez,2015-01-20 22:13:47,https://api.github.com/repos/antirez/redis/git/commits/bc8675612f50399568c1686ae0ee0d8d0b925254,bc8675612f50399568c1686ae0ee0d8d0b925254,"luaRedisGenericCommand() recursion: just return an error.

Instead of calling redisPanic() to abort the server.

Related to issue #2302."
antirez,2015-01-20 17:01:28,https://api.github.com/repos/antirez/redis/git/commits/839767ad0b304c5e3c18727b146a17356d1a5e7c,839767ad0b304c5e3c18727b146a17356d1a5e7c,"Panic on recursive calls to luaRedisGenericCommand().

Related to issue #2302."
mattsta,2015-01-18 21:46:25,https://api.github.com/repos/antirez/redis/git/commits/53c082ec39fb4daafba09e416279265f20d46006,53c082ec39fb4daafba09e416279265f20d46006,"Improve networking type correctness

read() and write() return ssize_t (signed long), not int.

For other offsets, we can use the unsigned size_t type instead
of a signed offset (since our replication offsets and buffer
positions are never negative)."
mattsta,2015-01-18 20:54:30,https://api.github.com/repos/antirez/redis/git/commits/f704360462640a88975eeb68fd80617921d7c97d,f704360462640a88975eeb68fd80617921d7c97d,"Improve RDB type correctness

It's possible large objects could be larger than 'int', so let's
upgrade all size counters to ssize_t.

This also fixes rdbSaveObject serialized bytes calculation.
Since entire serializations of data structures can be large,
so we don't want to limit their calculated size to a 32 bit signed max.

This commit increases object size calculation and
cascades the change back up to serializedlength printing.

Before:
127.0.0.1:6379> debug object hihihi
... encoding:quicklist serializedlength:-2147483559 ...

After:
127.0.0.1:6379> debug object hihihi
... encoding:quicklist serializedlength:2147483737 ..."
lamby,2015-01-16 09:03:00,https://api.github.com/repos/antirez/redis/git/commits/3447062d5e02cf14fd3d7765fa39a65de15f8c15,3447062d5e02cf14fd3d7765fa39a65de15f8c15,"Make some defaults explicit in the sentinel.conf for package maintainers

This may look a little pointless (and it is a complete no-op change here)
but as package maintainers need to modify these lines to actually
daemonize (etc. etc) but it's far preferable if the diff is restricted to
actually changing just that bit, not adding docs, etc. The less diff the
better, in general.

Signed-off-by: Chris Lamb <chris@chris-lamb.co.uk>"
antirez,2015-01-13 09:48:49,https://api.github.com/repos/antirez/redis/git/commits/cf76af6b9fb7f808ac6f0ab79393d390a14f9cd9,cf76af6b9fb7f808ac6f0ab79393d390a14f9cd9,"Cluster: fetch my IP even if msg is not MEET for the first time.

In order to avoid that misconfigured cluster nodes at some time may
force an IP update on other nodes, it is required that nodes update
their own address only on MEET messages. However it does not make sense
to do this the first time a node is contacted and yet does not have an
IP, we just risk that myself->ip remains not assigned if there are
messages lost or cluster creation procedures that don't make sure
everybody is targeted by at least one incoming MEET message.

Also fix the logging of the IP switch avoiding the :-1 tail."
antirez,2015-01-13 09:20:49,https://api.github.com/repos/antirez/redis/git/commits/5b0f4a83ace5d44289bfc0186449611187f081f2,5b0f4a83ace5d44289bfc0186449611187f081f2,"Cluster: clusterMsgDataGossip structure, explict padding + minor stuff.

Also explicitly set version to 0, add a protocol version define, improve
comments in the gossip structure.

Note that the structure layout is the same after the change, we are just
making the padding explicit with an additional not used 16 bits field.
So this commit is still able to talk with the previous versions of
cluster nodes."
antirez,2015-01-13 08:31:37,https://api.github.com/repos/antirez/redis/git/commits/237ab727b9b3ae025ef589bb5455443033f79bda,237ab727b9b3ae025ef589bb5455443033f79bda,"Suppress valgrind error about write sending uninitialized data.

Valgrind checks that the buffers we transfer via syscalls are all
composed of bytes actually initialized. This is useful, it makes we able
to avoid leaking informations in non initialized parts fo messages
transferred to other hosts. This commit fixes one of such issues."
antirez,2015-01-12 14:58:23,https://api.github.com/repos/antirez/redis/git/commits/f08586347d506dfec4ea74719d6bf637e88a3b1c,f08586347d506dfec4ea74719d6bf637e88a3b1c,"Revert ""Use REDIS_SUPERVISED_NONE instead of 0.""

This reverts commit 2c925b0c302ad8612cc4ac6261549482d3c69846.

Nevermind."
antirez,2015-01-12 14:57:50,https://api.github.com/repos/antirez/redis/git/commits/2c925b0c302ad8612cc4ac6261549482d3c69846,2c925b0c302ad8612cc4ac6261549482d3c69846,Use REDIS_SUPERVISED_NONE instead of 0.
antirez,2015-01-12 14:56:46,https://api.github.com/repos/antirez/redis/git/commits/10007cb78cff130d294465e64bec84c55ff0719f,10007cb78cff130d294465e64bec84c55ff0719f,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2015-01-12 14:56:36,https://api.github.com/repos/antirez/redis/git/commits/e6416ca71cd7c55d8cddd0e1596fd989e24988d9,e6416ca71cd7c55d8cddd0e1596fd989e24988d9,"Merge pull request #2266 from mattsta/improve/supervised/startup

Three fixes: explicit supervise, pidfile create, remove memory leaks."
antirez,2015-01-12 14:40:30,https://api.github.com/repos/antirez/redis/git/commits/6274a6789deaeea35951e5409e94e4ff77de645a,6274a6789deaeea35951e5409e94e4ff77de645a,"Cluster: initialize mf_end.

Can't be initialized by resetManualFailover() since it's actual state
the function uses, so we need to initialize it at startup time. Not
really a bug in practical terms, but showed up into valgrind and is not
technically correct anyway."
mattsta,2015-01-09 22:01:05,https://api.github.com/repos/antirez/redis/git/commits/5a685f35a9e09cba3b08640912aed93acbc63351,5a685f35a9e09cba3b08640912aed93acbc63351,"Add maxmemory limit to INFO MEMORY

Since we have the eviction policy, we should have the memory limit too."
mattsta,2015-01-09 22:00:43,https://api.github.com/repos/antirez/redis/git/commits/6741bb981c53eb6b168e6ff96d915a0d51e0c7cd,6741bb981c53eb6b168e6ff96d915a0d51e0c7cd,"Improve consistency of INFO MEMORY fields

Adds used_memory_rss_human and used_memory_lua_human to match
all the other fields reporting human-readable memory too."
mattsta,2015-01-08 21:23:48,https://api.github.com/repos/antirez/redis/git/commits/eb7d67a3ab1e9a41e406f582676526194575f958,eb7d67a3ab1e9a41e406f582676526194575f958,Remove RDB AUX memory leaks
mattsta,2015-01-08 20:22:33,https://api.github.com/repos/antirez/redis/git/commits/36a3b75355bd5aea9e34889918c5b78fb79586e4,36a3b75355bd5aea9e34889918c5b78fb79586e4,"Supervise redis processes only if configured

Adds configuration option 'supervised [no | upstart | systemd | auto]'

Also removed 'bzero' from the previous implementation because it's 2015.
(We could actually statically initialize those structs, but clang
throws an invalid warning when we try, so it looks bad even though it
isn't bad.)

Fixes #2264"
mattsta,2014-08-25 21:07:37,https://api.github.com/repos/antirez/redis/git/commits/5e8b7e4f356c2908bb3389e2df09473e290acae8,5e8b7e4f356c2908bb3389e2df09473e290acae8,"Define default pidfile when creating pid

We want pidfile to be NULL on startup so we can detect if the user
set an explicit value versus only using the default value.

Closes #1967
Fixes #2076"
rebx,2012-04-17 23:04:37,https://api.github.com/repos/antirez/redis/git/commits/e6d499a446e1d34ceb9b393ddd79d38877aede67,e6d499a446e1d34ceb9b393ddd79d38877aede67,"Create PID file even if in foreground

Previously, Redis only wrote the pid file if
it was daemonizing, but many times it's useful to have
the pid written out even if you're in the foreground.

Some background for this is:
I usually run redis via daemontools. That entails running
redis-server on the foreground. Given that, I'd also want
redis-server to create a pidfile so other processes (e.g. nagios)
can run checks for that.

Closes #463"
antirez,2015-01-09 10:53:47,https://api.github.com/repos/antirez/redis/git/commits/0d22121c276873152668472735d7312c591b6a74,0d22121c276873152668472735d7312c591b6a74,"Add ""-lrt"" in Makefile for Solaris.

This fix is from @NanXiao, however I was not able to retain authorship
because the Pull Request original repository was removed."
antirez,2015-01-09 10:22:14,https://api.github.com/repos/antirez/redis/git/commits/792a94153a44014b52655d4c1af0f298dc9dc9b1,792a94153a44014b52655d4c1af0f298dc9dc9b1,"Check for __sun macro in solarisfixes.h, not in includers."
antirez,2015-01-09 10:06:38,https://api.github.com/repos/antirez/redis/git/commits/f3fd58eb4a0b2a2b5966e48c6b70c344f3bc248e,f3fd58eb4a0b2a2b5966e48c6b70c344f3bc248e,Cluster test: also write from Lua script in resharding test.
antirez,2015-01-09 09:39:05,https://api.github.com/repos/antirez/redis/git/commits/da95d22ad2e8c3232fd34a2c09c30fe74d71532a,da95d22ad2e8c3232fd34a2c09c30fe74d71532a,"Prevent Lua scripts from violating Redis Cluster keyspace access rules.

Before this commit scripts were able to access / create keys outside the
set of hash slots served by the local node."
antirez,2015-01-08 18:43:14,https://api.github.com/repos/antirez/redis/git/commits/1019c72930c7d82aac91f4570736de35cc46f29f,1019c72930c7d82aac91f4570736de35cc46f29f,"Merge pull request #2265 from mattsta/fix/trib/create

Fix redis-trib creation failure"
mattsta,2015-01-08 18:31:03,https://api.github.com/repos/antirez/redis/git/commits/bf58f8b513b95134e6122f97884046afe41de7d4,bf58f8b513b95134e6122f97884046afe41de7d4,Remove end of line whitespace from redis-trib
mattsta,2015-01-08 18:28:35,https://api.github.com/repos/antirez/redis/git/commits/1c477f62bc34cc6c5ea42f48aac40148cd778441,1c477f62bc34cc6c5ea42f48aac40148cd778441,"Fix redis-trib cluster create

Under certain conditions the node list wasn't being fully populated
and 'create' would fail trying to call methods on nil objects."
antirez,2015-01-08 15:35:05,https://api.github.com/repos/antirez/redis/git/commits/622c69e93db2b7b03bb3a547f6573654819cc29b,622c69e93db2b7b03bb3a547f6573654819cc29b,README section about make distclean reworded / extended.
antirez,2015-01-08 15:30:04,https://api.github.com/repos/antirez/redis/git/commits/b45e16e7ee07bdef4c2f6287d95a3c82d6c0867e,b45e16e7ee07bdef4c2f6287d95a3c82d6c0867e,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2015-01-08 15:29:29,https://api.github.com/repos/antirez/redis/git/commits/161ff775721c87b816b750d91a9a16fe26868007,161ff775721c87b816b750d91a9a16fe26868007,"Merge pull request #2262 from HeartSaVioR/explain-make-distclean

Explain make distclean which seems not well known"
HeartSaVioR,2015-01-08 15:07:25,https://api.github.com/repos/antirez/redis/git/commits/219ab66cc8f6b348d8c67b65f99d129604a05d0a,219ab66cc8f6b348d8c67b65f99d129604a05d0a,Explain make distclean which seems not well known
antirez,2015-01-08 13:41:26,https://api.github.com/repos/antirez/redis/git/commits/42357668e8fb569c30ae37f990309f0593410973,42357668e8fb569c30ae37f990309f0593410973,Advertise Redis Cluster as experimental in redis.conf.
antirez,2015-01-08 11:06:17,https://api.github.com/repos/antirez/redis/git/commits/a7722dc31b3a10c6b6bd0fb388f5cbc424d35f33,a7722dc31b3a10c6b6bd0fb388f5cbc424d35f33,"Typo fixed: fiels -> fields in rdbSaveInfoAuxFields().

Thx to @badboy."
antirez,2015-01-08 08:08:55,https://api.github.com/repos/antirez/redis/git/commits/4c0e8923a6cb376c7b2a53fa76ae95f74610285c,4c0e8923a6cb376c7b2a53fa76ae95f74610285c,A few more AUX info fields added to RDB.
antirez,2015-01-08 07:56:35,https://api.github.com/repos/antirez/redis/git/commits/206cd219b63c2255c0238cb9c602b65f05e98120,206cd219b63c2255c0238cb9c602b65f05e98120,"RDB AUX fields support.

This commit introduces a new RDB data type called 'aux'. It is used in
order to insert inside an RDB file key-value pairs that may serve
different needs, without breaking backward compatibility when new
informations are embedded inside an RDB file. The contract between Redis
versions is to ignore unknown aux fields when encountered.

Aux fields can be used in order to:

1. Augment the RDB file with info like version of Redis that created the
RDB file, creation time, used memory while the RDB was created, and so
forth.
2. Add state about Redis inside the RDB file that we need to reload
later: replication offset, previos master run ID, in order to improve
failovers safety and allow partial resynchronization after a slave
restart.
3. Anything that we may want to add to RDB files without breaking the
ability of past versions of Redis to load the file."
antirez,2015-01-07 14:25:58,https://api.github.com/repos/antirez/redis/git/commits/1a30e7ded14f4cb2ea39e05d1b1e1fd0b4d20ad6,1a30e7ded14f4cb2ea39e05d1b1e1fd0b4d20ad6,rdbLoad() refactoring to make it simpler to follow.
antirez,2015-01-07 10:08:41,https://api.github.com/repos/antirez/redis/git/commits/e8614a1a77d2989f7be3cb7b24cd88b01f14f17e,e8614a1a77d2989f7be3cb7b24cd88b01f14f17e,"New RDB v7 opcode: RESIZEDB.

The new opcode is an hint about the size of the dataset (keys and number
of expires) we are going to load for a given Redis database inside the
RDB file. Since hash tables are resized accordingly ASAP, useless
rehashing is avoided, speeding up load times significantly, in the order
of ~ 20% or more for larger data sets.

Related issue: #1719"
antirez,2015-01-07 09:25:31,https://api.github.com/repos/antirez/redis/git/commits/32b10004e28ff6def8c310bbb264b70958460159,32b10004e28ff6def8c310bbb264b70958460159,sdsnative() removed: New rdb.c API can load native strings.
antirez,2015-01-07 09:20:55,https://api.github.com/repos/antirez/redis/git/commits/f699b5e8019e264898048bac64282f57c5b7583e,f699b5e8019e264898048bac64282f57c5b7583e,"Use RDB_LOAD_PLAIN to load quicklists and encoded types.

Before we needed to create a string object with an embedded SDS, adn
basically duplicate the SDS part into a plain zmalloc() allocation."
antirez,2014-12-23 18:26:34,https://api.github.com/repos/antirez/redis/git/commits/68bc02c36c00fa0e1601a76c38c89a5d47a80105,68bc02c36c00fa0e1601a76c38c89a5d47a80105,RDB refactored to load plain strings from RDB.
antirez,2015-01-08 08:51:55,https://api.github.com/repos/antirez/redis/git/commits/05ba119fbb9b0e05b7cca83bee8b01041e8877f2,05ba119fbb9b0e05b7cca83bee8b01041e8877f2,"Merge pull request #2143 from mattsta/quicklist

Quicklist (linked list + ziplist)"
badboy,2015-01-07 21:31:45,https://api.github.com/repos/antirez/redis/git/commits/04607b53500f71498a502ffcfc41a82792013e2b,04607b53500f71498a502ffcfc41a82792013e2b,"Check that the whole first argument is a number

Fixes #2258"
mattsta,2014-12-23 15:10:42,https://api.github.com/repos/antirez/redis/git/commits/5870e22423e069452e9f858b80ac40bfc455bfe6,5870e22423e069452e9f858b80ac40bfc455bfe6,"Upgrade LZF to 3.6 (2011) from 3.5 (2009)

This is lzf_c and lzf_d from
http://dist.schmorp.de/liblzf/liblzf-3.6.tar.gz"
mattsta,2014-12-20 02:26:04,https://api.github.com/repos/antirez/redis/git/commits/25e12d10bebfa38ce864956c0498b432c17eccdd,25e12d10bebfa38ce864956c0498b432c17eccdd,"Set optional 'static' for Quicklist+Redis

This also defines REDIS_STATIC='' for building everything
inside src/ and everything inside deps/lua/."
mattsta,2014-12-19 15:41:52,https://api.github.com/repos/antirez/redis/git/commits/9e11d07909086999d54181466eafecab44a0dbe3,9e11d07909086999d54181466eafecab44a0dbe3,"Add more quicklist info to DEBUG OBJECT

Adds: ql_compressed (boolean, 1 if compression enabled for list, 0
otherwise)
Adds: ql_uncompressed_size (actual uncompressed size of all quicklistNodes)
Adds: ql_ziplist_max (quicklist max ziplist fill factor)

Compression ratio of the list is then ql_uncompressed_size / serializedlength

We report ql_uncompressed_size for all quicklists because serializedlength
is a _compressed_ representation anyway.

Sample output from a large list:
127.0.0.1:6379> llen abc
(integer) 38370061
127.0.0.1:6379> debug object abc
Value at:0x7ff97b51d140 refcount:1 encoding:quicklist serializedlength:19878335 lru:9718164 lru_seconds_idle:5 ql_nodes:21945 ql_avg_node:1748.46 ql_ziplist_max:-2 ql_compressed:0 ql_uncompressed_size:1643187761
(1.36s)

The 1.36s result time is because rdbSavedObjectLen() is serializing the
object, not because of any new stats reporting.

If we run DEBUG OBJECT on a compressed list, DEBUG OBJECT takes almost *zero*
time because rdbSavedObjectLen() reuses already-compressed ziplists:
127.0.0.1:6379> debug object abc
Value at:0x7fe5c5800040 refcount:1 encoding:quicklist serializedlength:19878335 lru:9718109 lru_seconds_idle:5 ql_nodes:21945 ql_avg_node:1748.46 ql_ziplist_max:-2 ql_compressed:1 ql_uncompressed_size:1643187761"
mattsta,2014-12-16 05:49:14,https://api.github.com/repos/antirez/redis/git/commits/02bb515a094c081fcbc3e33c60a5dbff440eb447,02bb515a094c081fcbc3e33c60a5dbff440eb447,"Config: Add quicklist, remove old list options

This removes:
  - list-max-ziplist-entries
  - list-max-ziplist-value

This adds:
  - list-max-ziplist-size
  - list-compress-depth

Also updates config file with new sections and updates
tests to use quicklist settings instead of old list settings."
mattsta,2014-12-16 05:11:21,https://api.github.com/repos/antirez/redis/git/commits/bbbbfb14422ee84e4b79330f299ddacf9be23d88,bbbbfb14422ee84e4b79330f299ddacf9be23d88,"Add branch prediction hints to quicklist

Actually makes a noticeable difference.

Branch hints were selected based on profiler hotspots."
mattsta,2014-12-30 04:37:43,https://api.github.com/repos/antirez/redis/git/commits/5f506b6d2b4b5a3a06d8a5ee44f0ecc8b33a457f,5f506b6d2b4b5a3a06d8a5ee44f0ecc8b33a457f,"Cleanup quicklist style

Small fixes due to a new version of clang-format (it's less
crazy than the older version)."
mattsta,2014-12-11 02:26:31,https://api.github.com/repos/antirez/redis/git/commits/abdd1414a896c407c23a8f4165cfd6f027cf2b60,abdd1414a896c407c23a8f4165cfd6f027cf2b60,"Allow compression of interior quicklist nodes

Let user set how many nodes to *not* compress.

We can specify a compression ""depth"" of how many nodes
to leave uncompressed on each end of the quicklist.

Depth 0 = disable compression.
Depth 1 = only leave head/tail uncompressed.
  - (read as: ""skip 1 node on each end of the list before compressing"")
Depth 2 = leave head, head->next, tail->prev, tail uncompressed.
  - (""skip 2 nodes on each end of the list before compressing"")
Depth 3 = Depth 2 + head->next->next + tail->prev->prev
  - (""skip 3 nodes..."")
etc.

This also:
  - updates RDB storage to use native quicklist compression (if node is
    already compressed) instead of uncompressing, generating the RDB string,
    then re-compressing the quicklist node.
  - internalizes the ""fill"" parameter for the quicklist so we don't
    need to pass it to _every_ function.  Now it's just a property of
    the list.
  - allows a runtime-configurable compression option, so we can
    expose a compresion parameter in the configuration file if people
    want to trade slight request-per-second performance for up to 90%+
    memory savings in some situations.
  - updates the quicklist tests to do multiple passes: 200k+ tests now."
mattsta,2014-12-11 03:54:19,https://api.github.com/repos/antirez/redis/git/commits/5127e3998058983351b6c0b94d1341f9d646c9cc,5127e3998058983351b6c0b94d1341f9d646c9cc,"Add quicklist info to DEBUG OBJECT

Added field 'ql_nodes' and 'ql_avg_per_node'.

ql_nodes is the number of quicklist nodes in the quicklist.
ql_avg_node is the average fill level in each quicklist node. (LLEN / QL_NODES)

Sample output:
127.0.0.1:6379> DEBUG object b
Value at:0x7fa42bf2fed0 refcount:1 encoding:quicklist serializedlength:18489 lru:8983768 lru_seconds_idle:3 ql_nodes:430 ql_avg_per_node:511.73
127.0.0.1:6379> llen b
(integer) 220044"
mattsta,2014-12-11 01:37:15,https://api.github.com/repos/antirez/redis/git/commits/8d7021892ec79bfea3628bcc2999512d9a757a21,8d7021892ec79bfea3628bcc2999512d9a757a21,"Remove malloc failure checks

We trust zmalloc to kill the whole process on memory failure"
mattsta,2014-12-10 21:08:54,https://api.github.com/repos/antirez/redis/git/commits/e0d94a7b017a6600332e94e95799d8af9bda1210,e0d94a7b017a6600332e94e95799d8af9bda1210,"Increase test size for migrating large values

Previously, the old test ran 5,000 loops and used about 500k.

With quicklist, storing those same 5,000 loops takes up 24k, so the
""large value check"" failed!

This increases the test to 20,000 loops which makes the object dump 96k."
mattsta,2014-12-10 18:53:12,https://api.github.com/repos/antirez/redis/git/commits/101b3a6e42e84e5cb423ef413225d8b8d8cc0bbc,101b3a6e42e84e5cb423ef413225d8b8d8cc0bbc,"Convert quicklist RDB to store ziplist nodes

Turns out it's a huge improvement during save/reload/migrate/restore
because, with compression enabled, we're compressing 4k or 8k
chunks of data consisting of multiple elements in one ziplist
instead of compressing series of smaller individual elements."
mattsta,2014-12-10 20:46:24,https://api.github.com/repos/antirez/redis/git/commits/127c15e2b2429c602797e56d8f7e1fdec312c68f,127c15e2b2429c602797e56d8f7e1fdec312c68f,"Convert RDB ziplist loading to sdsnative()

This saves us an unnecessary zmalloc, memcpy, and two frees."
mattsta,2014-12-10 20:40:34,https://api.github.com/repos/antirez/redis/git/commits/e1619772dbac6567462db4fac524e8df7e2556da,e1619772dbac6567462db4fac524e8df7e2556da,"Add sdsnative()

Use the existing memory space for an SDS to convert it to a regular
character buffer so we don't need to allocate duplicate space just
to extract a usable buffer for native operations."
mattsta,2014-11-26 18:42:10,https://api.github.com/repos/antirez/redis/git/commits/c6bf20c2a7423f464210dd19dd59073a6bb846a2,c6bf20c2a7423f464210dd19dd59073a6bb846a2,"Add adaptive quicklist fill factor

Fill factor now has two options:
  - negative (1-5) for size-based ziplist filling
  - positive for length-based ziplist filling with implicit size cap.

Negative offsets define ziplist size limits of:
  -1: 4k
  -2: 8k
  -3: 16k
  -4: 32k
  -5: 64k

Positive offsets now automatically limit their max size to 8k.  Any
elements larger than 8k will be in individual nodes.

Positive ziplist fill factors will keep adding elements
to a ziplist until one of:
  - ziplist has FILL number of elements
    - or -
  - ziplist grows above our ziplist max size (currently 8k)

When using positive fill factors, if you insert a large
element (over 8k), that element will automatically allocate
an individual quicklist node with one element and no other elements will be
in the same ziplist inside that quicklist node.

When using negative fill factors, elements up to the size
limit can be added to one quicklist node.  If an element
is added larger than the max ziplist size, that element
will be allocated an individual ziplist in a new quicklist node.

Tests also updated to start testing at fill factor -5."
mattsta,2014-11-25 17:19:58,https://api.github.com/repos/antirez/redis/git/commits/60a9418ed9adaff7844113b89fd4a4c01100f0b9,60a9418ed9adaff7844113b89fd4a4c01100f0b9,redis-benchmark: Add RPUSH and RPOP tests
mattsta,2014-11-22 02:03:25,https://api.github.com/repos/antirez/redis/git/commits/0f15eb183b13108b08141d164edabae5b4bbef99,0f15eb183b13108b08141d164edabae5b4bbef99,"Free ziplist test lists during tests

Freeing our test lists helps keep valgrind output clean"
mattsta,2014-11-21 19:52:10,https://api.github.com/repos/antirez/redis/git/commits/9d2dc0249c5ef99586710d711e1381c4178aeb39,9d2dc0249c5ef99586710d711e1381c4178aeb39,"Add ziplistMerge()

This started out as #2158 by sunheehnus, but I kept rewriting it
until I could understand things more easily and get a few more
correctness guarantees out of the readability flow.

The original commit created and returned a new ziplist with the contents of
both input ziplists, but I prefer to grow one of the input ziplists
and destroy the other one.

So, instead of malloc+copy as in #2158, the merge now reallocs one of
the existing ziplists and copies the other ziplist into the new space.

Also added merge test cases to ziplistTest()"
mattsta,2014-11-13 19:11:47,https://api.github.com/repos/antirez/redis/git/commits/5e362b84ab8b769bf2738daea97b45a375d223f1,5e362b84ab8b769bf2738daea97b45a375d223f1,"Add quicklist implementation

This replaces individual ziplist vs. linkedlist representations
for Redis list operations.

Big thanks for all the reviews and feedback from everybody in
https://github.com/antirez/redis/pull/2143"
mattsta,2014-11-14 04:35:10,https://api.github.com/repos/antirez/redis/git/commits/d956d809acb848aec0f6524e1337d274a635980d,d956d809acb848aec0f6524e1337d274a635980d,Fix three simple clang analyzer warnings
mattsta,2014-11-13 21:21:27,https://api.github.com/repos/antirez/redis/git/commits/9b786b124d6a547b87700114acdb9a617521a4bf,9b786b124d6a547b87700114acdb9a617521a4bf,"Cleanup ziplist valgrind warnings

Valgrind can't detect 'memset' initializes things, so let's
statically initialize them to remove some unnecessary warnings."
mattsta,2014-11-13 21:12:44,https://api.github.com/repos/antirez/redis/git/commits/1dfcd75ae36f5f7bea86893c391ea863cd32dee9,1dfcd75ae36f5f7bea86893c391ea863cd32dee9,"Fix ziplist test for pop()

The previous test wasn't returning the new ziplist, so the test
was invalid.  Now the test works properly.

These problems were simultaenously discovered in #2154 and that
PR also had an additional fix we included here."
mattsta,2014-11-13 21:12:09,https://api.github.com/repos/antirez/redis/git/commits/53b1ee34ddba1446d81f2ce07c402db271a94674,53b1ee34ddba1446d81f2ce07c402db271a94674,"Fix ziplistDeleteRange index parameter

It's valid to delete from negative offsets, so we *don't*
want unsigned arguments here."
mattsta,2014-11-14 03:17:57,https://api.github.com/repos/antirez/redis/git/commits/fae53dea3333af7e5db1b26d7b7d4d5cea5a6d70,fae53dea3333af7e5db1b26d7b7d4d5cea5a6d70,"Fix how zipEntry returns values

zipEntry was returning a struct, but that caused some
problems with tests under 32 bit builds.

The tests run better if we operate on structs allocated in the
caller without worrying about copying on return."
mattsta,2014-11-13 20:12:08,https://api.github.com/repos/antirez/redis/git/commits/d01d4ddcbb62a19e841e4505930acd1986547dbf,d01d4ddcbb62a19e841e4505930acd1986547dbf,Allow forcing non-jemalloc build
mattsta,2014-11-20 18:00:08,https://api.github.com/repos/antirez/redis/git/commits/9b343678d2edaaecb10aaa314f78e41b25534f44,9b343678d2edaaecb10aaa314f78e41b25534f44,Add simple ll2string() tests
mattsta,2014-11-13 02:58:57,https://api.github.com/repos/antirez/redis/git/commits/8febcffdc597566f1e307c0534014b2bdf687c02,8febcffdc597566f1e307c0534014b2bdf687c02,"Allow all code tests to run using Redis args

Previously, many files had individual main() functions for testing,
but each required being compiled with their own testing flags.
That gets difficult when you have 8 different flags you need
to set just to run all tests (plus, some test files required
other files to be compiled aaginst them, and it seems some didn't
build at all without including the rest of Redis).

Now all individual test main() funcions are renamed to a test
function for the file itself and one global REDIS_TEST define enables
testing across the entire codebase.

Tests can now be run with:
  - `./redis-server test <test>`

  e.g. ./redis-server test ziplist

If REDIS_TEST is not defined, then no tests get included and no
tests are included in the final redis-server binary."
mattsta,2014-11-08 15:16:54,https://api.github.com/repos/antirez/redis/git/commits/8380655e85f0afd1f0afc99b464717cb97002b7a,8380655e85f0afd1f0afc99b464717cb97002b7a,"Remove ziplist compiler warnings

Only happen when compiled with the test define."
mattsta,2014-11-16 18:05:48,https://api.github.com/repos/antirez/redis/git/commits/27937c2821a85efd4245fcbac3ebed782129f5d7,27937c2821a85efd4245fcbac3ebed782129f5d7,"Add DEBUG JEMALLOC INFO

Uses jemalloc function malloc_stats_print() to return
stats about what jemalloc has allocated internally."
mattsta,2014-11-16 18:03:54,https://api.github.com/repos/antirez/redis/git/commits/ad41a7c40430bc043c2b95556197af2862a2bab5,ad41a7c40430bc043c2b95556197af2862a2bab5,"Add addReplyBulkSds() function

Refactor a common pattern into one function so we don't
end up with copy/paste programming."
antirez,2014-12-23 13:54:56,https://api.github.com/repos/antirez/redis/git/commits/9e718a1f57a18d685fc63cff9ffdeef3af734969,9e718a1f57a18d685fc63cff9ffdeef3af734969,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2014-12-23 13:52:57,https://api.github.com/repos/antirez/redis/git/commits/840435ad0be252094b118af428590ba45ba1cec2,840435ad0be252094b118af428590ba45ba1cec2,"INFO loading stats: three fixes.

1. Server unxtime may remain not updated while loading AOF, so ETA is
not updated correctly.

2. Number of processed byte was not initialized.

3. Possible division by zero condition (likely cause of issue #1932)."
antirez,2014-12-23 10:00:00,https://api.github.com/repos/antirez/redis/git/commits/f7bc1fcea9b5ffe2bf7924a2a5d10981761dab16,f7bc1fcea9b5ffe2bf7924a2a5d10981761dab16,"Merge pull request #2227 from mattsta/fix/trib/assignment/master-replica

Improve redis-trib replica assignment"
antirez,2014-12-23 09:58:43,https://api.github.com/repos/antirez/redis/git/commits/3a1ee895fad8798666d609a1dd327671327d73c6,3a1ee895fad8798666d609a1dd327671327d73c6,"Merge pull request #2234 from mattsta/feature/sentinel-info-cache/age

Add 'age' value to SENTINEL INFO-CACHE"
mattsta,2014-12-12 00:41:26,https://api.github.com/repos/antirez/redis/git/commits/32bba43ac7f9abd4efd7f79fc1ae6106656b9d8c,32bba43ac7f9abd4efd7f79fc1ae6106656b9d8c,Add 'age' value to SENTINEL INFO-CACHE
antirez,2014-12-22 10:00:39,https://api.github.com/repos/antirez/redis/git/commits/5888290d260cd60aedcd695c8625eadb6f2c349e,5888290d260cd60aedcd695c8625eadb6f2c349e,"Merge pull request #2229 from advance512/spopWithCount

Memory leak fixes (+ code style fixes)"
advance512,2014-12-21 13:10:06,https://api.github.com/repos/antirez/redis/git/commits/14b04c062efdca92cb91ef72a2efe0d531bb263f,14b04c062efdca92cb91ef72a2efe0d531bb263f,Fixed memory leaks in rdbSaveToSlavesSockets()
advance512,2014-12-21 13:08:44,https://api.github.com/repos/antirez/redis/git/commits/d74a5a088036342ed430c6199d69f00610e14370,d74a5a088036342ed430c6199d69f00610e14370,"Following @mattsta's friendly review:
  1. memory leak in t_set.c has been fixed
  2. end-of-line spaces has been removed (from all over the place)
  3. for loops have been ordered up to match existing Redis style (less weird)
  4. comments format has been fixed (added * in the beggining of every comment line)"
mattsta,2014-12-20 02:52:48,https://api.github.com/repos/antirez/redis/git/commits/b55f742e46a755e96c92eded47d9c69327f774e8,b55f742e46a755e96c92eded47d9c69327f774e8,"Improve redis-trib replica assignment

This tiny bit of code has gone through so many revisions.  Hopefully
it's more correct now.

Fixes #2204"
antirez,2014-12-19 09:04:15,https://api.github.com/repos/antirez/redis/git/commits/e3436dd9b886da95b62c347b68be5366877f7b91,e3436dd9b886da95b62c347b68be5366877f7b91,"Fix adjustOpenFilesLimit() logging to match real state.

Fixes issue #2225."
antirez,2014-12-18 14:11:44,https://api.github.com/repos/antirez/redis/git/commits/efbf5a125ec4647553bea1f91705f35e4c4e560c,efbf5a125ec4647553bea1f91705f35e4c4e560c,"Merge pull request #2224 from advance512/spopWithCount

Fix: case when SPOP with count>MAXINT, setTypeRandomElements() will get ..."
advance512,2014-12-18 10:39:58,https://api.github.com/repos/antirez/redis/git/commits/3c8a75583dd896c6b9f31b72fa394962650b8547,3c8a75583dd896c6b9f31b72fa394962650b8547,"Fix: case when SPOP with count>MAXINT, setTypeRandomElements() will get negative count argument due to signed/unsigned mismatch.

setTypeRandomElements() now returns unsigned long, and also uses unsigned long for anything related to count of members.
spopWithCountCommand() now uses unsigned long elements_returned instead of int, for values returned from setTypeRandomElements()"
antirez,2014-12-17 16:59:59,https://api.github.com/repos/antirez/redis/git/commits/70674ac6776d1b8402bec3f38fa25deb8e22fe88,70674ac6776d1b8402bec3f38fa25deb8e22fe88,"Merge pull request #2215 from advance512/spopWithCount

SPOP optional count argument. (issue #1793, supersedes pull request #1803)"
antirez,2014-12-17 16:48:18,https://api.github.com/repos/antirez/redis/git/commits/abd95ffdfd664aa269960acf15f3e11a7cf369d1,abd95ffdfd664aa269960acf15f3e11a7cf369d1,"Merge pull request #1582 from mattsta/add-error-mention-to-error-condition

Cluster: Update accept error to mention error"
antirez,2014-12-17 16:15:37,https://api.github.com/repos/antirez/redis/git/commits/9a6354316b9cde662f3c65b90e14c970c3e864ea,9a6354316b9cde662f3c65b90e14c970c3e864ea,Add info as requested by the original getMemorySize() license.
antirez,2014-12-17 16:11:20,https://api.github.com/repos/antirez/redis/git/commits/615f6923d5fde35478c82845c564eeaa38174676,615f6923d5fde35478c82845c564eeaa38174676,"getMemorySize() moved into zmalloc.c with other low level mem utils.

See issue #2218."
antirez,2014-12-17 16:07:30,https://api.github.com/repos/antirez/redis/git/commits/e1e41f691f55fe54ec37822ad4084d0e06a37870,e1e41f691f55fe54ec37822ad4084d0e06a37870,Merge branch 'improve/INFO/add-system-memory-size' of git://github.com/mattsta/redis into unstable
mattsta,2014-03-06 17:27:13,https://api.github.com/repos/antirez/redis/git/commits/a772747ffcacce26561af8902fa3c5414f854811,a772747ffcacce26561af8902fa3c5414f854811,"Cluster: Notify user on accept error

If we woke up to accept a connection, but we can't
accept it, inform the user of the error going on
with their networking.

(The previous message was the same for success or error!)"
antirez,2014-12-17 11:27:22,https://api.github.com/repos/antirez/redis/git/commits/25b06cd3ce94e595d6a043dead449d6c6ea362e1,25b06cd3ce94e595d6a043dead449d6c6ea362e1,"Merge pull request #2221 from rhoml/rhoml/fix-redis-sentinel-ln

Fix redis-sentinel symlink to a relative path"
rhoml,2014-12-17 10:04:08,https://api.github.com/repos/antirez/redis/git/commits/24f4c01832d183e40c1c55ea2a0a8e499cc1bd5c,24f4c01832d183e40c1c55ea2a0a8e499cc1bd5c,Add redis-sentinel symlink to a relative path
antirez,2014-12-16 14:03:12,https://api.github.com/repos/antirez/redis/git/commits/1aef29e0795681a3340a79c00379c246697bbcd6,1aef29e0795681a3340a79c00379c246697bbcd6,Fix comment in clusterHandleSlaveFailover().
antirez,2014-12-15 09:18:22,https://api.github.com/repos/antirez/redis/git/commits/90c7d8cfa19a8c378006943c83ace54c5d3da110,90c7d8cfa19a8c378006943c83ace54c5d3da110,Make sure buffer is enough in clusterSendPing().
mihirvj,2014-12-14 15:12:58,https://api.github.com/repos/antirez/redis/git/commits/352172a7ef5015c0c487ba6258cdf3b4b31a551c,352172a7ef5015c0c487ba6258cdf3b4b31a551c,"Stricter options for SET command

- As per Antirez's suggestion, this commit raises an error when mutually
exclusive options are provided. Duplicate options are allowed."
advance512,2014-03-11 14:38:55,https://api.github.com/repos/antirez/redis/git/commits/288028876f4428edfc044d8a1f1d6784b0dbe739,288028876f4428edfc044d8a1f1d6784b0dbe739,"Added <count> parameter to SPOP:
spopCommand() now runs spopWithCountCommand() in case the <count> param is found.
Added intsetRandomMembers() to Intset: Copies N random members from the set into inputted 'values' array. Uses either the Knuth or Floyd sample algos depending on ratio count/size.
Added setTypeRandomElements() to SET type: Returns a number of random elements from a non empty set. This is a version of setTypeRandomElement() that is modified in order to return multiple entries, using dictGetRandomKeys() and intsetRandomMembers().
Added tests for SPOP with <count>: unit/type/set, unit/scripting, integration/aof
--
Cleaned up code a bit to match with required Redis coding style"
antirez,2014-12-13 18:26:48,https://api.github.com/repos/antirez/redis/git/commits/c147cd848760c44791d73b03dbe2a4b8aa5b8c8e,c147cd848760c44791d73b03dbe2a4b8aa5b8c8e,CONTRIBUTING updated.
antirez,2014-12-13 07:57:06,https://api.github.com/repos/antirez/redis/git/commits/d6410ed19a4930895f2591eed224d5ec5449393a,d6410ed19a4930895f2591eed224d5ec5449393a,"Don't log admin commands in MONITOR.

Otherwise there are security risks, especially when providing Redis as a
service, the user may ""sniff"" for admin commands renamed to an
unguessable string via rename-command in redis.conf."
antirez,2014-12-13 07:54:33,https://api.github.com/repos/antirez/redis/git/commits/97d43d063893cc88a7b9dc10e232d3ae61cca04c,97d43d063893cc88a7b9dc10e232d3ae61cca04c,"List of commands flagged as admin commands modified.

The old list did not made much sense... and the flag is currently not
used at all, so no side effects."
rhoml,2014-10-23 08:52:35,https://api.github.com/repos/antirez/redis/git/commits/7b72dbf599e22f13d007a6dd0ec5d7d559fac38e,7b72dbf599e22f13d007a6dd0ec5d7d559fac38e,Add symlink to redis-sentinel during make install
antirez,2014-12-12 21:57:29,https://api.github.com/repos/antirez/redis/git/commits/f2858dc8dc87499d64f71cadf681d3a8dda777f8,f2858dc8dc87499d64f71cadf681d3a8dda777f8,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2014-12-12 21:56:33,https://api.github.com/repos/antirez/redis/git/commits/66e2bdf21021a787e959c943ba453e56f9787093,66e2bdf21021a787e959c943ba453e56f9787093,"Lua cmsgpack lib updated to latest version.

It fixes a bad bug that crashes the server in certain conditions
as shown in issue #2210."
antirez,2014-12-12 17:42:44,https://api.github.com/repos/antirez/redis/git/commits/67e8061b17b6bdff9bd44a0a62df6c1dd748e4d1,67e8061b17b6bdff9bd44a0a62df6c1dd748e4d1,"Merge pull request #2209 from charsyam/feature/remove_warning

remove_warning in db.c"
antirez,2014-12-11 17:28:26,https://api.github.com/repos/antirez/redis/git/commits/bbf0736c4e472c5488fae6990de51417bc8a2e42,bbf0736c4e472c5488fae6990de51417bc8a2e42,"sdsformatip() removed.

Specialized single-use function. Not the best match for sds.c btw.
Also genClientPeerId() is no longer static: we need symbols."
antirez,2014-12-11 17:20:30,https://api.github.com/repos/antirez/redis/git/commits/ce269ad3c5a13636b2c87aa69473c30410b06c36,ce269ad3c5a13636b2c87aa69473c30410b06c36,"AnetFormatIP(): renamed, commented, now sticks to IP:port format.

A few code style changes + consistent format: not nice for humans but
better for parsers."
mattsta,2014-08-07 13:43:16,https://api.github.com/repos/antirez/redis/git/commits/badf0f008bede268d3235412243fc62d618e323c,badf0f008bede268d3235412243fc62d618e323c,"Bitops: Stop overallocating storage space on set

Previously the string was created empty then re-sized
to fit the offset, but sds resize causes the sds to
over-allocate by at least 1 MB (which is a lot when
you are operating at bit-level access).

This also improves the speed of initial sets by 2% to 6%
based on quick testing.

Patch logic provided by @oranagra

Fixes #1918"
mattsta,2014-08-25 20:53:11,https://api.github.com/repos/antirez/redis/git/commits/391fc9b6335329e513664c69bdc18865ab944beb,391fc9b6335329e513664c69bdc18865ab944beb,"Sentinel: Improve INFO command behavior

Improvements:
  - Return empty string if asking for non-existing section (INFO foo)
  - Fix potential memory leak (caused by sdsempty() then returned if >2 args)
  - Clean up argument parsing
  - Allow ""all"" as valid section (same as ""default"" or zero args currently)
  - Move strcasecmp to end of evaluation chain in conditionals

Also, since we're C99, I moved some variable declarations to be closer
to where they are actually used (saves us from needing to free an empty info
if detect argument errors up front).

Closes #1915
Closes #1966"
mattsta,2014-06-18 03:05:30,https://api.github.com/repos/antirez/redis/git/commits/ec5a0c548b0afbb1bd584b5761bf740460fd20a2,ec5a0c548b0afbb1bd584b5761bf740460fd20a2,"Add cached total system memory to INFO output

There is no standard cross-platform way of obtaining
system memory info, but I found a useful function
convering all common platforms.  I removed support
for uncommon Redis platforms (windows, AIX) and left
others intact.

For more info, see:
http://nadeausoftware.com/articles/2012/09/c_c_tip_how_get_physical_memory_size_system

The system memory info is cached on startup, but some systems
may be able to change the amount of memory visible to Redis
at runtime if Redis is deployed in a VM or container.

Also see #1820"
mattsta,2014-06-17 14:42:19,https://api.github.com/repos/antirez/redis/git/commits/7d4c2a98b6d8b1b85337c2b3d3c2fbb5a2efd102,7d4c2a98b6d8b1b85337c2b3d3c2fbb5a2efd102,"Add maxmemory_policy to INFO output

Also refactors getting human string values from
the defined value in `server.maxmemory_policy`
into a common function."
mattsta,2014-10-23 17:09:58,https://api.github.com/repos/antirez/redis/git/commits/491881e13b73ab1686328efdceb4cdf8bde64046,491881e13b73ab1686328efdceb4cdf8bde64046,"Cleanup all IP formatting code

Instead of manually checking for strchr(n,':') everywhere,
we can use our new centralized IP formatting functions."
mattsta,2014-10-23 16:40:02,https://api.github.com/repos/antirez/redis/git/commits/2d90619f88b81d1a094a875d73f8afd244480730,2d90619f88b81d1a094a875d73f8afd244480730,"Add centralized IP/Peer formatting functions

This stops us from needing to manually check against "":"" to
add brackets around IPv6 addresses everywhere."
antirez,2014-12-11 14:57:11,https://api.github.com/repos/antirez/redis/git/commits/3cd36a4dd9b31b351c87f1084bc6166a44044315,3cd36a4dd9b31b351c87f1084bc6166a44044315,"SORT: Don't sort Set elements if not needed.

Related to #2094."
antirez,2014-12-11 14:54:39,https://api.github.com/repos/antirez/redis/git/commits/c50693d40fa4f950a21f48513edefd40714ff5e4,c50693d40fa4f950a21f48513edefd40714ff5e4,"Merge pull request #2094 from mattsta/nosort

Fix zero-ordering SORT when called against lists"
antirez,2014-12-11 14:20:53,https://api.github.com/repos/antirez/redis/git/commits/81772ce0e38c386579567c7ccd21cc473b13ea42,81772ce0e38c386579567c7ccd21cc473b13ea42,"Merge pull request #2103 from coderholic/unstable

Update redis_init_script.tpl"
antirez,2014-12-11 14:19:23,https://api.github.com/repos/antirez/redis/git/commits/f24a0bc1c5ba15518cff8d058af7b8e49f02468f,f24a0bc1c5ba15518cff8d058af7b8e49f02468f,In redisIsSupervised() use MSG_NOSIGNAL only for Linux.
antirez,2014-12-11 14:16:20,https://api.github.com/repos/antirez/redis/git/commits/ff01ce55d8c71335eb5a69f71d2712013d8480ed,ff01ce55d8c71335eb5a69f71d2712013d8480ed,Removed useless space in redis-benchmark.c.
antirez,2014-12-11 14:11:22,https://api.github.com/repos/antirez/redis/git/commits/f1742ac9df1ccf2ebe40bf4e1be14d2374218847,f1742ac9df1ccf2ebe40bf4e1be14d2374218847,"Merge pull request #2105 from Hailei/fix-redis-benchmark-idle-IDLE

FIXED redis-benchmark's idle mode.With idle mode shouldn't create write event"
antirez,2014-12-11 14:08:51,https://api.github.com/repos/antirez/redis/git/commits/599e52d93ed78fa7f637ef8f91236383194da4f0,599e52d93ed78fa7f637ef8f91236383194da4f0,"Merge pull request #2106 from NanXiao/unstable

Fix function prototype in redis-cli.c."
antirez,2014-12-11 14:05:38,https://api.github.com/repos/antirez/redis/git/commits/dea938440cc08d8f0d97a3e3c090d97670ef24a8,dea938440cc08d8f0d97a3e3c090d97670ef24a8,"Merge pull request #2107 from mattsta/fix-trib-import

Fix redis-trib import SCAN call"
antirez,2014-12-11 13:58:37,https://api.github.com/repos/antirez/redis/git/commits/4ff365b34a756e221abf0474ccfc941663e3a073,4ff365b34a756e221abf0474ccfc941663e3a073,"Merge pull request #2114 from h0x91b/redis-cli-fix-cluster

Reconnect redis-cli when cluster return ""moved"""
antirez,2014-12-11 13:40:18,https://api.github.com/repos/antirez/redis/git/commits/8b81383401842ea30f6df9be695cc786300f15cd,8b81383401842ea30f6df9be695cc786300f15cd,"Merge pull request #2117 from mariano-perez-rodriguez/patch-4

Typo fixes in redis.conf"
antirez,2014-12-11 13:39:09,https://api.github.com/repos/antirez/redis/git/commits/9c385ada229f88d3d214c5b0da06836b2c32cb94,9c385ada229f88d3d214c5b0da06836b2c32cb94,"Merge pull request #2134 from pyr/feature/supervised-init

Support daemon supervision by upstart or systemd"
pyr,2014-12-10 20:36:53,https://api.github.com/repos/antirez/redis/git/commits/b5686c1a4db3529cc3613f572a20789932c0cc7d,b5686c1a4db3529cc3613f572a20789932c0cc7d,Do not expect UPSTART_JOB to be redis
antirez,2014-12-10 15:10:21,https://api.github.com/repos/antirez/redis/git/commits/06e76bc3e22dd72a30a8a614d367246b03ff1312,06e76bc3e22dd72a30a8a614d367246b03ff1312,"Better read-only behavior for expired keys in slaves.

Slaves key expire is orchestrated by the master. Sometimes the master
will send the synthesized DEL to expire keys on the slave with a non
trivial delay (when the key is not accessed, only the incremental expiry
algorithm will expire it in background).

During that time, a key is logically expired, but slaves still return
the key if you GET (or whatever) it. This is a bad behavior.

However we can't simply trust the slave view of the key, since we need
the master to be able to send write commands to update the slave data
set, and DELs should only happen when the key is expired in the master
in order to ensure consistency.

However 99.99% of the issues with this behavior is when a client which
is not a master sends a read only command. In this case we are safe and
can consider the key as non existing.

This commit does a few changes in order to make this sane:

1. lookupKeyRead() is modified in order to return NULL if the above
conditions are met.
2. Calls to lookupKeyRead() in commands actually writing to the data set
are repliaced with calls to lookupKeyWrite().

There are redundand checks, so for example, if in ""2"" something was
overlooked, we should be still safe, since anyway, when the master
writes the behavior is to don't care about what expireIfneeded()
returns.

This commit is related to  #1768, #1770, #2131."
antirez,2014-12-10 14:28:41,https://api.github.com/repos/antirez/redis/git/commits/3da87b70ddb8c4ff49b3a32424baf24f0a88c2fa,3da87b70ddb8c4ff49b3a32424baf24f0a88c2fa,"Merge pull request #2133 from chooper/histfile-override

override histfile from env - fixes #831 and copies #833"
antirez,2014-12-10 10:15:13,https://api.github.com/repos/antirez/redis/git/commits/d8158771b552d0ef7f42befd894478f5fa00b894,d8158771b552d0ef7f42befd894478f5fa00b894,"Sentinel: INFO-CACHE comments reworked a bit.

Changed in order to make them more review friendly, based on the
experience of reviewing the code myself."
antirez,2014-12-10 10:11:44,https://api.github.com/repos/antirez/redis/git/commits/c83a917286ca538d521113bbc49b34fc2974a84e,c83a917286ca538d521113bbc49b34fc2974a84e,"Sentinel: INFO-CACHE GCC minior code cleanup.

I guess the initial goal of the initialization was to suppress GCC
warning, but if we have to initialize, we can do it with the base-case
value instead of NULL which is never retained."
antirez,2014-12-10 10:05:37,https://api.github.com/repos/antirez/redis/git/commits/0422321617861a4a5b7b88d8767f6c3aa33189fa,0422321617861a4a5b7b88d8767f6c3aa33189fa,Sentinel: removed useless flag var from INFO-CACHE.
antirez,2014-12-10 10:04:24,https://api.github.com/repos/antirez/redis/git/commits/7576a27d586eb2ba63848c91eaefcccaf505160e,7576a27d586eb2ba63848c91eaefcccaf505160e,Sentinel: INFO-CACHE reply format command shortened.
antirez,2014-12-10 10:02:42,https://api.github.com/repos/antirez/redis/git/commits/2d3f99a1b75c1278eb56e80af62c1ab013719559,2d3f99a1b75c1278eb56e80af62c1ab013719559,"Merge pull request #2148 from mattsta/feature/sentinel/info-cache

Add SENTINEL INFO-CACHE [masters...]"
antirez,2014-12-10 08:51:00,https://api.github.com/repos/antirez/redis/git/commits/0b7f5e258afbddf2c4f38740290732901fec68d7,0b7f5e258afbddf2c4f38740290732901fec68d7,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2014-12-10 08:50:36,https://api.github.com/repos/antirez/redis/git/commits/6a378dc31209bb04f00c56eb4e4e7474017695b0,6a378dc31209bb04f00c56eb4e4e7474017695b0,"Merge pull request #2203 from Brochen/unstable

Update sds.c"
antirez,2014-12-10 08:50:27,https://api.github.com/repos/antirez/redis/git/commits/0195afae39b590cfe30778f6685731f9bb663775,0195afae39b590cfe30778f6685731f9bb663775,test-sds target in Makefile to run sds.c tests.
antirez,2014-12-10 08:48:56,https://api.github.com/repos/antirez/redis/git/commits/9bb4ef871e0abc4d6e3df338be8a83e77f685453,9bb4ef871e0abc4d6e3df338be8a83e77f685453,sds.c: more tests for sdstrim().
Brochen,2014-12-10 03:19:13,https://api.github.com/repos/antirez/redis/git/commits/181300d4a7506f7214538178ed79b8f57a49be8a,181300d4a7506f7214538178ed79b8f57a49be8a,"Update sds.c

in the case (all chars of the string s found in 'cset' ),
line[573] will no more do the same thing line[572] did.
this will be more faster especially in the case that the string s is very long and all chars of string s found in 'cset'"
antirez,2014-12-09 14:57:17,https://api.github.com/repos/antirez/redis/git/commits/d2aa91ce1f5431f8df4499010e6f6dd742bd2531,d2aa91ce1f5431f8df4499010e6f6dd742bd2531,"Merge pull request #2165 from sunheehnus/zipmap-read

zipmap.c: update comments above"
antirez,2014-12-09 14:24:44,https://api.github.com/repos/antirez/redis/git/commits/562e72943bab6a85e5cbf90f46cd880d80863e4a,562e72943bab6a85e5cbf90f46cd880d80863e4a,"Merge pull request #2176 from deepakverma/redis_bench_authfix

redis-benchmark AUTH command to be discarded after the first send #2150"
antirez,2014-12-09 14:13:05,https://api.github.com/repos/antirez/redis/git/commits/c58db75a6927efed3103274a352d1990ee0e3cf7,c58db75a6927efed3103274a352d1990ee0e3cf7,"Merge pull request #2119 from sunheehnus/unstable

sds.c/sdscatvprintf: va_end needs to be fixed"
antirez,2014-12-09 11:59:36,https://api.github.com/repos/antirez/redis/git/commits/5f5a9f0d14b4b9f2f65393f2764ee760475f6b8c,5f5a9f0d14b4b9f2f65393f2764ee760475f6b8c,Include stropts only if __sun is defined.
antirez,2014-12-09 11:57:22,https://api.github.com/repos/antirez/redis/git/commits/f04ec18a36a55e73106aeadb17ad36b7589c7f17,f04ec18a36a55e73106aeadb17ad36b7589c7f17,"Merge pull request #2177 from badboy/solaris-ioctl-warn-fix

Fix implicit declaration of ioctl on Solaris"
antirez,2014-12-09 11:46:15,https://api.github.com/repos/antirez/redis/git/commits/87f1e27b27a652a3c6eaad31e2c67013041d5e3e,87f1e27b27a652a3c6eaad31e2c67013041d5e3e,"Merge pull request #2179 from sunheehnus/bitops-read

bitops.c/redisPopcount: optimization in loop"
antirez,2014-12-09 11:24:04,https://api.github.com/repos/antirez/redis/git/commits/b4b4192f19294f61b5b7fc430a56fda75d0b3567,b4b4192f19294f61b5b7fc430a56fda75d0b3567,"Merge pull request #2189 from jbergstroem/glibc_220_default_warn

Silence _BSD_SOURCE warnings in glibc 2.20 and forward"
antirez,2014-12-09 11:18:34,https://api.github.com/repos/antirez/redis/git/commits/5b2bbef9fc763f05cf4f48b239ecd71b69a66ce6,5b2bbef9fc763f05cf4f48b239ecd71b69a66ce6,Mark whatisdoing.sh as deprecated in top-comment.
antirez,2014-12-09 11:09:08,https://api.github.com/repos/antirez/redis/git/commits/4dab2821456429780873d5413d84d4398999c750,4dab2821456429780873d5413d84d4398999c750,"Merge pull request #2192 from sergeyklay/patch-1

getting pid fixes"
antirez,2014-12-09 10:27:40,https://api.github.com/repos/antirez/redis/git/commits/4b03be6d2fd01d8cdab39d3bf5b77cdf9c07b594,4b03be6d2fd01d8cdab39d3bf5b77cdf9c07b594,"Merge pull request #2197 from sunheehnus/sparkline

sparkline.c: mov label-ini into the AddSample Function"
antirez,2014-12-09 07:59:49,https://api.github.com/repos/antirez/redis/git/commits/b2eb202281cc9266ee7d5180512df88d5a143002,b2eb202281cc9266ee7d5180512df88d5a143002,"Merge pull request #2200 from badboy/iss2066-additional

Only ignore sigpipe in interactive mode"
badboy,2014-12-08 23:57:46,https://api.github.com/repos/antirez/redis/git/commits/7ecb880168d756e157c14094e4092cc4d37ae68a,7ecb880168d756e157c14094e4092cc4d37ae68a,"Only ignore sigpipe in interactive mode

This allows shell pipes to correctly end redis-cli.

Ref #2066"
sunheehnus,2014-12-08 03:43:32,https://api.github.com/repos/antirez/redis/git/commits/07a9e44b86eff660e55bc1044a667eda7b981973,07a9e44b86eff660e55bc1044a667eda7b981973,sparkline.c: AddSample skip Empty label
sunheehnus,2014-12-08 03:15:06,https://api.github.com/repos/antirez/redis/git/commits/c87a37661e14b288d2510b3e4de088a3fed3e5c0,c87a37661e14b288d2510b3e4de088a3fed3e5c0,sparkline.c: mov label-ini into the AddSample Function
sergeyklay,2014-12-05 16:48:20,https://api.github.com/repos/antirez/redis/git/commits/8c0f86842ea7ad162257ae62c59982eef792d0b6,8c0f86842ea7ad162257ae62c59982eef792d0b6,"Update whatisdoing.sh

Improved getting pid"
sergeyklay,2014-12-05 12:50:45,https://api.github.com/repos/antirez/redis/git/commits/d4a9836f1a4177a188537875374142e09cb4da74,d4a9836f1a4177a188537875374142e09cb4da74,"getting pid fixes

```sh
$ ~ pidof redis-server
# nothing

$ ~ ps aux | grep [r]edis
redis      593  0.0  0.0  36900  5564 ?        Ssl  Dec02   1:37 /usr/bin/redis-server 127.0.0.1:6379
klay     15927  0.0  0.0  16772  6068 pts/6    S+   13:58   0:00 redis-cli

$ ~ uname -a
Linux edge 3.17.4-1-ARCH #1 SMP PREEMPT Fri Nov 21 21:14:42 CET 2014 x86_64 GNU/Linux
```"
antirez,2014-12-05 09:51:09,https://api.github.com/repos/antirez/redis/git/commits/ff25d1896d3befe184aa1adebf5d5e961f5d4b15,ff25d1896d3befe184aa1adebf5d5e961f5d4b15,"Simplify lua_cmsgpack macro and fix build on old Linux distros.

Thanks to @badboy for the help in checking the build after the fix."
jbergstroem,2014-12-05 01:41:59,https://api.github.com/repos/antirez/redis/git/commits/af453642e18cd158d3c057b9713fd4cf7968cc98,af453642e18cd158d3c057b9713fd4cf7968cc98,"Silence _BSD_SOURCE warnings in glibc 2.20 and forward

See https://sourceware.org/glibc/wiki/Release/2.20#Packaging_Changes"
antirez,2014-12-04 09:54:31,https://api.github.com/repos/antirez/redis/git/commits/c3846becae5528e2987865ec1a5ef2cdeca3dadd,c3846becae5528e2987865ec1a5ef2cdeca3dadd,Check that tcp-backlog is matched by /proc/sys/net/core/somaxconn.
antirez,2014-12-03 11:06:54,https://api.github.com/repos/antirez/redis/git/commits/1b732c09d010cfeee57a55e3d30e93ec6f535da8,1b732c09d010cfeee57a55e3d30e93ec6f535da8,"Network bandwidth tracking + refactoring.

Track bandwidth used by clients and replication (but diskless
replication is not tracked since the actual transfer happens in the
child process).

This includes a refactoring that makes tracking new instantaneous
metrics simpler."
antirez,2014-12-03 09:50:47,https://api.github.com/repos/antirez/redis/git/commits/eca9fbdb50ab828b2382a813ccb8497bb5dd33ec,eca9fbdb50ab828b2382a813ccb8497bb5dd33ec,"Don't show the ASCII logo if syslog is enabled.

Closes issue #1935."
antirez,2014-12-03 09:38:56,https://api.github.com/repos/antirez/redis/git/commits/b8a48ad5fe65481bd41ab75a4a5ab8a4d8e5553e,b8a48ad5fe65481bd41ab75a4a5ab8a4d8e5553e,Regression test for issue #2175.
antirez,2014-12-03 09:33:00,https://api.github.com/repos/antirez/redis/git/commits/3632026210817e527508e4b3b98f8cd6837547d3,3632026210817e527508e4b3b98f8cd6837547d3,Handle infinite explicitly in createStringObjectFromLongLong().
sunheehnus,2014-12-03 02:07:58,https://api.github.com/repos/antirez/redis/git/commits/c98d4f56756f5fba18a9035aab34a853b4fae574,c98d4f56756f5fba18a9035aab34a853b4fae574,bitops.c/bitopCommand: skip short minlen for FAST PATH
antirez,2014-12-02 17:19:30,https://api.github.com/repos/antirez/redis/git/commits/92c5ab40295260352f0da09616ff15b499251bad,92c5ab40295260352f0da09616ff15b499251bad,"Use exp format and more precision output for ZSCAN.

Ref: issue #2175"
antirez,2014-12-02 16:03:15,https://api.github.com/repos/antirez/redis/git/commits/5bd3b9d93fe0747c71e86b601f936f4aae3664fb,5bd3b9d93fe0747c71e86b601f936f4aae3664fb,Over 80 chars comment trimmed in pfcountCommand().
antirez,2014-12-02 15:57:23,https://api.github.com/repos/antirez/redis/git/commits/8a7ccc58a16954a250fcb8f5ea6d184094d14653,8a7ccc58a16954a250fcb8f5ea6d184094d14653,"Mark PFCOUNT as read-only, even if not true.

PFCOUNT is technically speaking a write command, since the cached value
of the HLL is exposed in the data structure (design error, mea culpa), and
can be modified by PFCOUNT.

However if we flag PFCOUNT as ""w"", read only slaves can't execute the
command, which is a problem since there are environments where slaves
are used to scale PFCOUNT reads.

Nor it is possible to just prevent PFCOUNT to modify the data structure
in slaves, since without the cache we lose too much efficiency.

So while this commit allows slaves to create a temporary inconsistency
(the strings representing the HLLs in the master and slave can be
different in certain moments) it is actually harmless.

In the long run this should be probably fixed by turning the HLL into a
more opaque representation, for example by storing the cached value in
the part of the string which is not exposed (this should be possible
with SDS strings)."
antirez,2014-12-02 13:13:28,https://api.github.com/repos/antirez/redis/git/commits/e07dd8b3e9adad705c238ee3ebb53d572c395d8e,e07dd8b3e9adad705c238ee3ebb53d572c395d8e,Mark diskless replication as experimental in redis.conf.
sunheehnus,2014-12-02 06:46:15,https://api.github.com/repos/antirez/redis/git/commits/0ec7672a5dc2966962f33d55f959ed63da450bbd,0ec7672a5dc2966962f33d55f959ed63da450bbd,bitops.c/redisPopcount: little optimization in loop
badboy,2014-12-01 22:22:03,https://api.github.com/repos/antirez/redis/git/commits/f3c1aac7e60f6b2978436fa75bcacd6c2e32cbb7,f3c1aac7e60f6b2978436fa75bcacd6c2e32cbb7,Fix implicit declaration of ioctl on Solaris
antirez,2014-11-28 10:49:26,https://api.github.com/repos/antirez/redis/git/commits/fe0d3719956cc140115f30c4a684cbcb1a9928ad,fe0d3719956cc140115f30c4a684cbcb1a9928ad,"Test: wait for actual startup in start_server.

start_server now uses return value from Tcl exec to get the server pid,
however this introduces errors that depend from timing: a lot of the
testing code base assumed the server to be actually up and running when
server_start returns.

So the old code that waits to see the pid in the log file was restored."
antirez,2014-11-28 10:38:14,https://api.github.com/repos/antirez/redis/git/commits/bd3a51615c7752186d8a4740affedc269ce5dfc6,bd3a51615c7752186d8a4740affedc269ce5dfc6,"Test: try to cleanup still running Redis instances on exit.

It's hard to run the Redis test continuously if it leaks processes on
exceptions / errors."
antirez,2014-11-28 10:05:58,https://api.github.com/repos/antirez/redis/git/commits/8acb3a8843c2cb92c3acaf0ce30a765649496f69,8acb3a8843c2cb92c3acaf0ce30a765649496f69,"Test framework: exit on timeout with report.

There was no sane way to detect tests that may never end because of
Redis bugs or tests bugs."
antirez,2014-11-28 09:03:07,https://api.github.com/repos/antirez/redis/git/commits/669aa2a21099b4b1ba36720df390562bcfee12cd,669aa2a21099b4b1ba36720df390562bcfee12cd,"Cluster PUBLISH message: fix totlen count.

bulk_data field size was not removed from the count. It is not possible
to declare it simply as 'char bulk_data[]' since the structure is nested
into another structure."
antirez,2014-11-28 08:23:39,https://api.github.com/repos/antirez/redis/git/commits/640d30c5271059e24e029cb34c9bd9085a0bd943,640d30c5271059e24e029cb34c9bd9085a0bd943,"redis-benchmark: default num of requests is now 100000.

10000 completes in a too short time and may easily provide unreliable
figures because of tiny duration."
antirez,2014-11-28 08:21:31,https://api.github.com/repos/antirez/redis/git/commits/10c35b584edb9534240a99b82721fd90847120fc,10c35b584edb9534240a99b82721fd90847120fc,"Merge pull request #2169 from razzle/unstable

fix benchmark memleak in loop mode"
razzle,2014-11-28 01:50:17,https://api.github.com/repos/antirez/redis/git/commits/0ae65bec6054fe3b76a24bc65590fdaef2114ab6,0ae65bec6054fe3b76a24bc65590fdaef2114ab6,fix benchmark memleak in loop mode
antirez,2014-11-26 15:35:46,https://api.github.com/repos/antirez/redis/git/commits/acf73a0592261426e460a8c2917c88b4f5e4db3b,acf73a0592261426e460a8c2917c88b4f5e4db3b,"Fix DEBUG OBJECT lru field to report seconds.

Because of (not so) recent Redis changes, now the LRU internally
reported unit is milliseconds, not seconds, but the DEBUG OBJECT output
was still claiming seconds while providing milliseconds.
However OBJECT IDLETIME was working as expected, which is the correct
API to use."
antirez,2014-11-25 17:23:34,https://api.github.com/repos/antirez/redis/git/commits/e039791e394fef936bf3582de80344e2eebf587b,e039791e394fef936bf3582de80344e2eebf587b,Document redis-cli --stat in --help output.
antirez,2014-11-25 14:56:20,https://api.github.com/repos/antirez/redis/git/commits/231c8c2ecf9e1a28238251abf3af9d2ec72cdaa8,231c8c2ecf9e1a28238251abf3af9d2ec72cdaa8,Merge remote-tracking branch 'origin/unstable' into unstable
sunheehnus,2014-11-25 13:58:05,https://api.github.com/repos/antirez/redis/git/commits/9e579d91ccab01e78c8be46ae74b13e4058bac9d,9e579d91ccab01e78c8be46ae74b13e4058bac9d,zipmap.c: update comments above
antirez,2014-11-25 13:48:30,https://api.github.com/repos/antirez/redis/git/commits/a8f9a989a78601339c6ab7a72ebd925143f3cf22,a8f9a989a78601339c6ab7a72ebd925143f3cf22,"Avoid valgrind memory leak false positive in processInlineBuffer().

zmalloc(0) cauesd to actually trigger a non-zero allocation since with
standard libc malloc we have our own zmalloc header for memory tracking,
but at the same time the returned pointer is at the end of the block and
not in the middle. This triggers a false positive when testing with
valgrind.

When the inline protocol args count is 0, we now avoid reallocating
c->argv, preventing the issue to happen."
antirez,2014-11-24 21:31:52,https://api.github.com/repos/antirez/redis/git/commits/02cdb353dd7394db581cb257b0ab6417ce790064,02cdb353dd7394db581cb257b0ab6417ce790064,"Merge pull request #2162 from mattsta/fix/lua/cmsgpack/64-bit-integers-on-32-bit-platforms

Fix lua-cmsgpack 64 bit integer on 32 bit platform"
mattsta,2014-11-24 17:37:17,https://api.github.com/repos/antirez/redis/git/commits/606437108570db1b74850a0ba2ea1e722055083c,606437108570db1b74850a0ba2ea1e722055083c,"Fix lua-cmsgpack 64 bit integer on 32 bit platform

This syncs lua-cmsgpack with the mattsta/lua-cmsgpack upstream.

Fixes #2161"
antirez,2014-11-24 10:54:53,https://api.github.com/repos/antirez/redis/git/commits/8a09e129060435034d75d487e796ef6be8f6e246,8a09e129060435034d75d487e796ef6be8f6e246,Attempt to prevent false positives in replication test.
mihirvj,2014-11-22 03:35:42,https://api.github.com/repos/antirez/redis/git/commits/e9b014cfacb443a0e828002d900a5a94a704d965,e9b014cfacb443a0e828002d900a5a94a704d965,"stricter options for SET command

Issue: #2157
As the SET command is parsed, it remembers which options are already set
and if a duplicate option is found, raises an error because it is
essentially an invalid syntax.

It still allows mutually exclusive options like EX and PX because taking
an option over another (precedence) is not essentially a syntactic
error."
mattsta,2014-11-19 18:17:08,https://api.github.com/repos/antirez/redis/git/commits/f8c73e38b5f5a57d6d573fc6fdfed5b68d4879c8,f8c73e38b5f5a57d6d573fc6fdfed5b68d4879c8,"Add SENTINEL INFO-CACHE [masters...]

Sentinel queries the INFO from every master and from every replica of
every master.

We can cache the INFO results in Sentinel so Sentinel can be a single
place to quickly get all INFO output for an entire Sentinel monitoring
group.

This commit gives us SENTINEL INFO-CACHE in two forms:
  - SENTINEL INFO-CACHE — returns all masters and all replicas
  - SENTINEL INFO-CACHE master0 master1 ... masterN — vararg specify masters

Results are returned as a multibulk reply with two top-level entries
for each master.  The first entry for each master is the name of the master.
The second entry is a nested multibulk reply with the contents of INFO,
first for the master, then an additional entry for each of the
replicas."
mattsta,2014-10-10 14:35:34,https://api.github.com/repos/antirez/redis/git/commits/6739ef4447adb17ce2d644b530aea429b8d52445,6739ef4447adb17ce2d644b530aea429b8d52445,"Sentinel: Add initial quorum bounds check

Fixes #2054"
antirez,2014-11-14 16:16:23,https://api.github.com/repos/antirez/redis/git/commits/0ed2c601185eb04b3b791b218e2a48c5f0609493,0ed2c601185eb04b3b791b218e2a48c5f0609493,lua_cjson.c Lua includes: angled -> quoted.
antirez,2014-11-14 16:13:35,https://api.github.com/repos/antirez/redis/git/commits/620906693ee2e80f5b8ff835b7fa109b1ff22b63,620906693ee2e80f5b8ff835b7fa109b1ff22b63,Fix non-linux builds error introduced with THP checks.
antirez,2014-11-14 16:10:48,https://api.github.com/repos/antirez/redis/git/commits/8a75ec0fca824f789f578bffdfc897c4df1b5d2b,8a75ec0fca824f789f578bffdfc897c4df1b5d2b,Merge remote-tracking branch 'origin/unstable' into unstable
mattsta,2014-04-04 21:20:04,https://api.github.com/repos/antirez/redis/git/commits/ace628c7922221c0156f5469c85a938ebe4f6c4f,ace628c7922221c0156f5469c85a938ebe4f6c4f,"Lua: add cmsgpack scripting tests

Basically: test to make sure we can load cmsgpack
and do some sanity checks to make sure pack/unpack works
properly.  We also have a bonus test for circular encoding
and decoding because I was curious how it worked."
mattsta,2014-04-04 20:06:33,https://api.github.com/repos/antirez/redis/git/commits/90b6337c155aa0330143f5b0a0af1d430271d400,90b6337c155aa0330143f5b0a0af1d430271d400,"Lua: upgrade cmsgpack to 0.4.0

Main reasons for upgrade:
  - Remove a warning when building Redis
  - Add multi pack/unpack
  - Improve memory usage and use Lua allocator properly
  - Fix some edge case encoding/decoding bugs"
mattsta,2014-04-04 20:05:12,https://api.github.com/repos/antirez/redis/git/commits/da18dd34a29dd1a65e62bf2b7d55acf8d914260d,da18dd34a29dd1a65e62bf2b7d55acf8d914260d,"Lua: remove new warning added by cjson header

clang doesn't like ""extern inline"" when no definition
is given right away."
mattsta,2014-04-04 19:21:04,https://api.github.com/repos/antirez/redis/git/commits/a9900ad38edbae0d26d51068888017e556cdc5b2,a9900ad38edbae0d26d51068888017e556cdc5b2,"Lua: Use Redis solaris compatability for cjson too

cjson calls isinf, but some Solaris versions don't have isinf
even with the attempted fix we have in deps/Makefile.

We can harmlessly include the Redis solarisfixes.h header to
give cjson proper isinf.

Note: cjson has a compile-time setting for using their own defined
isinf, but the Redis definition in solarisfixes.h is more complete.

Fixes antirez#1620"
mattsta,2014-04-04 19:08:39,https://api.github.com/repos/antirez/redis/git/commits/4fdcd213f026b55baccc0a99a15564092582a90e,4fdcd213f026b55baccc0a99a15564092582a90e,"Lua: Upgrade cjson to 2.1.0 (2012-03-01)

The new cjson has some improvements over our current version including
increased platform compatability, a new resource limit to restrict
decode depth, and better invalid number handling.

One minor change was required to deps/Makefile because this version
of cjson doesn't export itself globally, so we added a quick little
define of -DENABLE_CJSON_GLOBAL.

cjson now has an optional higher performing float parsing interface,
but we are not including it (g_fmt.c, dtoa.c) because it requires
endianness declaration during compile time.

This commit is exactly lua_cjson.c from 2.1.0 with one minor
change of altering the two Lua includes for local search
instead of system-wide importing."
mattsta,2014-04-04 18:13:14,https://api.github.com/repos/antirez/redis/git/commits/e327c8edb907606765237a614ff05997b9f8b7c7,e327c8edb907606765237a614ff05997b9f8b7c7,"Lua: add cjson scripting test

Two simple decode tests added mainly to check that
the 'cjson' global gets registered and is usable."
antirez,2014-11-14 16:05:28,https://api.github.com/repos/antirez/redis/git/commits/a2f929ab1095bae3812712a7ac63c8fa69ea15d5,a2f929ab1095bae3812712a7ac63c8fa69ea15d5,"Merge pull request #1662 from mattsta/lua-add-bitops

Lua: Add bitop"
antirez,2014-11-12 10:17:12,https://api.github.com/repos/antirez/redis/git/commits/7ea331d60162d5469ccc2f3682f07738a480538f,7ea331d60162d5469ccc2f3682f07738a480538f,THP detection for LATENCY DOCTOR.
antirez,2014-11-12 09:55:47,https://api.github.com/repos/antirez/redis/git/commits/110f0464e09ef3ff2d4f3a3a319377c77ed70d93,110f0464e09ef3ff2d4f3a3a319377c77ed70d93,Check THP support at startup and warn about it.
antirez,2014-11-12 09:43:32,https://api.github.com/repos/antirez/redis/git/commits/3ef0876b95a6ff342bc348f5603ae282265f0ca1,3ef0876b95a6ff342bc348f5603ae282265f0ca1,THP detection / reporting functions added.
antirez,2014-11-11 16:12:12,https://api.github.com/repos/antirez/redis/git/commits/bb7fea0d5ca7b3a53532338e8654e409014c1194,bb7fea0d5ca7b3a53532338e8654e409014c1194,"Diskless SYNC: fix RDB EOF detection.

RDB EOF detection was relying on the final part of the RDB transfer to
be a magic 40 bytes EOF marker. However as the slave is put online
immediately, and because of sockets timeouts, the replication stream is
actually contiguous with the RDB file.

This means that to detect the EOF correctly we should either:

1) Scan all the stream searching for the mark. Sucks CPU-wise.
2) Start to send the replication stream only after an acknowledge.
3) Implement a proper chunked encoding.

For now solution ""2"" was picked, so the master does not start to send
ASAP the stream of commands in the case of diskless replication. We wait
for the first REPLCONF ACK command from the slave, that certifies us
that the slave correctly loaded the RDB file and is ready to get more
data."
antirez,2014-11-11 14:10:58,https://api.github.com/repos/antirez/redis/git/commits/f5c6ebbfe3620d16c1e83c2ccaf1cec5a312aaae,f5c6ebbfe3620d16c1e83c2ccaf1cec5a312aaae,Disconnect timedout slave: regression introduced with diskless repl.
pyr,2014-11-11 10:05:10,https://api.github.com/repos/antirez/redis/git/commits/bc1a3b96e6402996582602e17221f103bef3da8e,bc1a3b96e6402996582602e17221f103bef3da8e,"Support daemon supervision by upstart or systemd

Both upstart and systemd provide a way for daemons to
be supervised, as well as a mechanism for them to
signal their readyness status.

This patch provides compatibility with this functionality while
not interfering with other methods.

With this, it will be possible to use `expect stop` with upstart
and `Type=notify` with systemd.

A more detailed explanation of the mechanism can be found here:
http://spootnik.org/entries/2014/11/09_pid-tracking-in-modern-init-systems.html"
chooper,2014-11-11 06:40:25,https://api.github.com/repos/antirez/redis/git/commits/3ab832193cb58a876eba9c62df3fc0ea3814453a,3ab832193cb58a876eba9c62df3fc0ea3814453a,override histfile from env - fixes #831 and copies #833
sunheehnus,2014-11-03 09:21:54,https://api.github.com/repos/antirez/redis/git/commits/0f706adc5c2270e1084bba88279b844a91233c33,0f706adc5c2270e1084bba88279b844a91233c33,sds.c: Correct two spelling mistakes in comments
sunheehnus,2014-11-02 02:42:26,https://api.github.com/repos/antirez/redis/git/commits/bea45da07aff43e9694a14317dc555bef4e39ef6,bea45da07aff43e9694a14317dc555bef4e39ef6,sds.c/sdscatvprintf: set va_end to finish va_list cpy
sunheehnus,2014-11-02 02:40:28,https://api.github.com/repos/antirez/redis/git/commits/84ee8268c7a635cbbc4327bac20dab82d66ff9c3,84ee8268c7a635cbbc4327bac20dab82d66ff9c3,sds.c: Correct some comments
mariano-perez-rodriguez,2014-10-31 17:17:49,https://api.github.com/repos/antirez/redis/git/commits/6df9001d6c5cc7a9446bb5f42f0e8c4784d0f5ea,6df9001d6c5cc7a9446bb5f42f0e8c4784d0f5ea,"Typo fixes in redis.conf

Fix two typos in redis.conf:

- ""trnasfers"" --> ""transfers""
- ""enalbed"" --> ""enabled"""
antirez,2014-10-31 09:38:22,https://api.github.com/repos/antirez/redis/git/commits/5a526c22cc39c4b455f7e2f69eb9d48112d5eb33,5a526c22cc39c4b455f7e2f69eb9d48112d5eb33,"Merge pull request #2096 from mattsta/cluster-ipv6

Enable Cluster IPv6 Support"
antirez,2014-10-31 09:01:59,https://api.github.com/repos/antirez/redis/git/commits/a07674307925c9af0226a71c11daffabea3ad764,a07674307925c9af0226a71c11daffabea3ad764,"Merge pull request #2110 from mattsta/more-outbound-bind-fixes

Networking: add more outbound IP binding fixes"
h0x91b,2014-10-30 19:05:50,https://api.github.com/repos/antirez/redis/git/commits/7fcfbea0f53744f81f46d209dee0f5f70803f773,7fcfbea0f53744f81f46d209dee0f5f70803f773,"Reconnect redis-cli when cluster return ""moved""

    if redis works in cluster-mode and redis-cli was run with argv, reconnect if needs.
    example:
    ./redis-cli set foo bar

    if return is MOVED redis-cli just do nothing."
antirez,2014-10-30 11:01:51,https://api.github.com/repos/antirez/redis/git/commits/2c42b645bcb412e447746619480d58b7cdc058e6,2c42b645bcb412e447746619480d58b7cdc058e6,"Merge pull request #2078 from mattsta/hiredis-sigpipe

Fix redis-cli from exiting after idle connection breaks"
mattsta,2014-10-28 16:25:16,https://api.github.com/repos/antirez/redis/git/commits/0014966c1e39cf2dcb4ca271900b93990d823bec,0014966c1e39cf2dcb4ca271900b93990d823bec,"Networking: add more outbound IP binding fixes

Same as the original bind fixes (we just missed these the
first time around).

This helps Redis not automatically send
connections from the first IP on an interface if we are bound
to a specific IP address (e.g. with multiple IP aliases on one
interface, you want to send from _your_ IP, not from the first IP
on the interface)."
mattsta,2014-10-27 14:09:37,https://api.github.com/repos/antirez/redis/git/commits/14f2582da26013b09aef5a24230c2553eebfd73a,14f2582da26013b09aef5a24230c2553eebfd73a,Fix redis-trib import SCAN call
mattsta,2014-10-23 17:45:16,https://api.github.com/repos/antirez/redis/git/commits/daca1edb6ec8d8b467d2e94a39431c47dff7052b,daca1edb6ec8d8b467d2e94a39431c47dff7052b,"Parse cluster state file in IPv6 compatible way

We need to pick the port based on the _last_ colon, not the first one."
mattsta,2014-10-23 17:44:42,https://api.github.com/repos/antirez/redis/git/commits/bbf1af2da34001cf1f3af808cc3972dbc78fc6ab,bbf1af2da34001cf1f3af808cc3972dbc78fc6ab,"Fix redis-trib.rb IP:Port disassembly for IPv6

IP format is now any of:
  - 127.0.0.1:6379
  - ::1:6379"
mattsta,2014-10-23 15:52:35,https://api.github.com/repos/antirez/redis/git/commits/6c0abc4a0ee1450a7fc13076f5d04a6549286cf3,6c0abc4a0ee1450a7fc13076f5d04a6549286cf3,"Fix zero-ordering SORT when called against lists

People mostly use SORT against lists, but our prior
behavior was pretending lists were an unordered bag
requiring a forced-sort when no sort was requested.

We can just use the native list ordering to ensure
consistency across replicaion and scripting calls.

Closes #2079
Closes #545 (again)"
mattsta,2014-10-17 13:21:16,https://api.github.com/repos/antirez/redis/git/commits/e10c5444e79f8f6ce24112175dd42afb8d0b067a,e10c5444e79f8f6ce24112175dd42afb8d0b067a,"redis-cli: ignore SIGPIPE network errors

Closes #2066"
antirez,2014-10-29 13:25:18,https://api.github.com/repos/antirez/redis/git/commits/6fbaeddf3f547217df9f808da80a716661bfa591,6fbaeddf3f547217df9f808da80a716661bfa591,Merge branch 'memsync' into unstable
antirez,2014-10-29 11:48:22,https://api.github.com/repos/antirez/redis/git/commits/9ec22d9223ca3d74aa81dd5af86809ceeb730670,9ec22d9223ca3d74aa81dd5af86809ceeb730670,"Diskless replication: missing listRewind() added.

This caused BGSAVE to be triggered a second time without any need when
we switch from socket to disk target via the command

    CONFIG SET repl-diskless-sync no

and there is already a slave waiting for the BGSAVE to start.
Also comments clarified about what is happening."
antirez,2014-10-27 11:30:07,https://api.github.com/repos/antirez/redis/git/commits/4b8f4b90b904c803cdc4a3ba82fee6e8ee8423fe,4b8f4b90b904c803cdc4a3ba82fee6e8ee8423fe,Log slave ip:port in more log messages.
antirez,2014-10-27 11:23:03,https://api.github.com/repos/antirez/redis/git/commits/775cc30a98cd8f3ab3a14c76973234f84df3262d,775cc30a98cd8f3ab3a14c76973234f84df3262d,Use new slave name function for diskless repl reporting.
antirez,2014-10-27 10:58:20,https://api.github.com/repos/antirez/redis/git/commits/8a416ca46e705e52587c8ef7163b8a158fff8357,8a416ca46e705e52587c8ef7163b8a158fff8357,Added a function to get slave name for logs.
NanXiao,2014-10-27 09:53:12,https://api.github.com/repos/antirez/redis/git/commits/2540736366eedbe421118a76556438c8fbe8ab48,2540736366eedbe421118a76556438c8fbe8ab48,"Fix function prototype in redis-cli.c.

Fix function prototype in redis-cli.c."
antirez,2014-10-27 09:48:32,https://api.github.com/repos/antirez/redis/git/commits/a27befc495009693ee4c9c110fe7132f330ac25d,a27befc495009693ee4c9c110fe7132f330ac25d,Diskless replication: log BGSAVE delay only when it is non-zero.
antirez,2014-10-27 09:42:49,https://api.github.com/repos/antirez/redis/git/commits/3b9a97984a85e342cc11459a5a75b2cf80d79c08,3b9a97984a85e342cc11459a5a75b2cf80d79c08,Document repl-diskless-sync-delay in redis.conf.
antirez,2014-10-27 09:36:30,https://api.github.com/repos/antirez/redis/git/commits/707352439c317dd2151d02606de25d2d2a147a67,707352439c317dd2151d02606de25d2d2a147a67,Diskless sync delay is now configurable.
Hailei,2014-10-27 06:02:52,https://api.github.com/repos/antirez/redis/git/commits/b4c4be785cf5aeb480eabefd18a131655d36734f,b4c4be785cf5aeb480eabefd18a131655d36734f,FIXED redis-benchmark's idle mode.With idle mode shouldn't create write event
coderholic,2014-10-26 18:09:45,https://api.github.com/repos/antirez/redis/git/commits/dab5c09accf2b61957434a560d585005d6d9cf7d,dab5c09accf2b61957434a560d585005d6d9cf7d,"Update redis_init_script.tpl

status command currently reports success when redis has crashed and the pid file still exists. Changing to check the actual process is running."
antirez,2014-10-24 08:38:42,https://api.github.com/repos/antirez/redis/git/commits/c4dbc7cdecd876635318aff409e4382780ba2b15,c4dbc7cdecd876635318aff409e4382780ba2b15,Remove duplicated log message about starting BGSAVE.
antirez,2014-10-24 08:12:43,https://api.github.com/repos/antirez/redis/git/commits/18de5395b219bf407ac06dcf3baae48e4d36d1e5,18de5395b219bf407ac06dcf3baae48e4d36d1e5,Diskless replication documented inside example redis.conf.
antirez,2014-10-24 07:49:22,https://api.github.com/repos/antirez/redis/git/commits/d6797d34c0a3071bf5a458b719cd6c417932f81a,d6797d34c0a3071bf5a458b719cd6c417932f81a,Diskless replication tested with the multiple slaves consistency test.
antirez,2014-10-23 21:10:33,https://api.github.com/repos/antirez/redis/git/commits/ebb3bd53c2944e987228bcf2f841f7412865bdab,ebb3bd53c2944e987228bcf2f841f7412865bdab,"Diskless replication: child -> parent communication improved.

Child now reports full info to the parent including IDs of slaves in
failure state and exit code."
antirez,2014-10-22 13:58:13,https://api.github.com/repos/antirez/redis/git/commits/b50e3215d279d5eee6947bcba619fb1edb407f77,b50e3215d279d5eee6947bcba619fb1edb407f77,"Translate rio fdset target EWOULDBLOCK error into ETIMEDOUT.

EWOULDBLOCK with the fdset rio target is returned when we try to write
but the send timeout socket option triggered an error. Better to
translate the error in something the user can actually recognize as a
timeout."
antirez,2014-10-22 13:53:45,https://api.github.com/repos/antirez/redis/git/commits/d4f6a1711defdc0b63629c797b550abbcca2b96f,d4f6a1711defdc0b63629c797b550abbcca2b96f,"Diskless replication: set / reset socket send timeout.

We need to avoid that a child -> slaves transfer can continue forever.
We use the same timeout used as global replication timeout, which is
documented to also affect I/O operations during bulk transfers."
antirez,2014-10-22 13:23:21,https://api.github.com/repos/antirez/redis/git/commits/2309f15d89e94babb2e9ef29225a40d822828379,2309f15d89e94babb2e9ef29225a40d822828379,anet.c: new API anetSendTimeout().
antirez,2014-10-17 15:11:46,https://api.github.com/repos/antirez/redis/git/commits/456003af25fc7d78867116749a2014611f3e4f64,456003af25fc7d78867116749a2014611f3e4f64,Diskless replication: less debugging printfs around.
antirez,2014-10-17 15:02:42,https://api.github.com/repos/antirez/redis/git/commits/fd112f52dce71e1ebd3fc3ffe1b7d521c628877e,fd112f52dce71e1ebd3fc3ffe1b7d521c628877e,rio.c fdset write() method fixed: wrong type for return value.
antirez,2014-10-17 14:45:48,https://api.github.com/repos/antirez/redis/git/commits/525c488f639672e5b36cc67ede857d25a39c016d,525c488f639672e5b36cc67ede857d25a39c016d,"rio fdset target: handle short writes.

While the socket is set in blocking mode, we still can get short writes
writing to a socket."
antirez,2014-10-17 14:30:11,https://api.github.com/repos/antirez/redis/git/commits/74f90c61232859f35db4eabf5b0bf1c8e4123bf0,74f90c61232859f35db4eabf5b0bf1c8e4123bf0,anet.c: API to set sockets back to blocking mode.
antirez,2014-10-17 09:36:12,https://api.github.com/repos/antirez/redis/git/commits/10aafdad56fa79bd7f95d9b190054b2e56b6cddd,10aafdad56fa79bd7f95d9b190054b2e56b6cddd,"Diskless replication: rio fdset target new supports buffering.

To perform a socket write() for each RDB rio API write call was
extremely unefficient, so now rio has minimal buffering capabilities.
Writes are accumulated into a buffer and only when a given limit is
reacehd are actually wrote to the N slaves FDs.

Trivia: rio lacked support for buffering since our targets were:

1) Memory buffers.
2) C standard I/O.

Both were buffered already."
antirez,2014-10-17 08:43:56,https://api.github.com/repos/antirez/redis/git/commits/b1337b15b6b090315d884d7372eea344926ae95b,b1337b15b6b090315d884d7372eea344926ae95b,Diskless replication: Various fixes to backgroundSaveDoneHandlerSocket()
antirez,2014-10-17 08:23:44,https://api.github.com/repos/antirez/redis/git/commits/4b16263bd9e7b647ecc3d864481eff3de913a229,4b16263bd9e7b647ecc3d864481eff3de913a229,"Diskless replication: don't send ""\n"" pings to slaves.

This is useful for normal replication in order to refresh the slave
when we are persisting on disk, but for diskless replication the
child is already receiving data while in WAIT_BGSAVE_END state."
antirez,2014-10-17 08:23:11,https://api.github.com/repos/antirez/redis/git/commits/25a3d9965e0a130705d974ae6a8a6a51e7fabe95,25a3d9965e0a130705d974ae6a8a6a51e7fabe95,Diskless replication: remove 40 bytes EOF mark from end of RDB file.
antirez,2014-10-17 08:22:29,https://api.github.com/repos/antirez/redis/git/commits/0c5a06f6bb8aaa6d15ea1a363ed19b637934579a,0c5a06f6bb8aaa6d15ea1a363ed19b637934579a,Diskless replication: swap inverted branches to compute read len.
antirez,2014-10-17 08:21:18,https://api.github.com/repos/antirez/redis/git/commits/80f7f63b64937df4d7f0bb53450ba281a5dd26a4,80f7f63b64937df4d7f0bb53450ba281a5dd26a4,Diskless replication: don't enter the read-payload branch forever.
antirez,2014-10-16 15:35:11,https://api.github.com/repos/antirez/redis/git/commits/f70369335d85b9fed0c4192b79e6a6bb5477ab7b,f70369335d85b9fed0c4192b79e6a6bb5477ab7b,syncReadLine(): actually enforce buffer size limits.
antirez,2014-10-16 15:09:29,https://api.github.com/repos/antirez/redis/git/commits/5ee2ccf48e75012b2cabefd89f40bd09a1f10258,5ee2ccf48e75012b2cabefd89f40bd09a1f10258,Diskless replication: EOF:<mark> streaming support slave side.
antirez,2014-10-16 08:22:02,https://api.github.com/repos/antirez/redis/git/commits/43ae6064302ecba5380c149334f78033137aa850,43ae6064302ecba5380c149334f78033137aa850,Diskless replication: redis.conf and CONFIG SET/GET support.
antirez,2014-10-16 08:15:18,https://api.github.com/repos/antirez/redis/git/commits/42951ab301bdaedaa2d1eac1096f36a95ab79c12,42951ab301bdaedaa2d1eac1096f36a95ab79c12,"Diskless replication: trigger a BGSAVE after a config change.

If we turn from diskless to disk-based replication via CONFIG SET, we
need a way to start a BGSAVE if there are slaves alerady waiting for a
BGSAVE to start. Normally with disk-based replication we do it as soon
as the previous child exits, but when there is a configuration change
via CONFIG SET, we may have slaves in WAIT_BGSAVE_START state without
an RDB background process currently active."
antirez,2014-10-16 08:00:46,https://api.github.com/repos/antirez/redis/git/commits/5f8360eb21e798f468162bed76c839a8ed28f480,5f8360eb21e798f468162bed76c839a8ed28f480,Diskless replication flag renamed repl_diskless -> repl_diskless_sync.
antirez,2014-10-16 07:03:52,https://api.github.com/repos/antirez/redis/git/commits/e9e007555e03af906544c0870faaaba1e1d2d0a2,e9e007555e03af906544c0870faaaba1e1d2d0a2,Diskless replication: trigger diskless RDB transfer if needed.
antirez,2014-10-15 13:31:19,https://api.github.com/repos/antirez/redis/git/commits/3730d118a3ee0ddfc640ba1c8cf77a33dff66a35,3730d118a3ee0ddfc640ba1c8cf77a33dff66a35,Diskless replication: handle putting the slave online.
antirez,2014-10-15 09:35:00,https://api.github.com/repos/antirez/redis/git/commits/7a1e0d9898a8b2a6c36ef12b1d1f9f0b6dece4e0,7a1e0d9898a8b2a6c36ef12b1d1f9f0b6dece4e0,Diskless replication: read report from child.
antirez,2014-10-15 07:46:45,https://api.github.com/repos/antirez/redis/git/commits/fbe7545545269ab47f98be70ca41435a30043fe2,fbe7545545269ab47f98be70ca41435a30043fe2,Diskless replication: child writes report to parent.
antirez,2014-10-15 07:21:02,https://api.github.com/repos/antirez/redis/git/commits/93eed9ae0163e328c33b16ab9ea3c4fbe0f98674,93eed9ae0163e328c33b16ab9ea3c4fbe0f98674,redis-cli: add missing newline in error message.
antirez,2014-10-14 15:19:34,https://api.github.com/repos/antirez/redis/git/commits/2a436aaeabcc9cd5ad625613e7882df9495ab04b,2a436aaeabcc9cd5ad625613e7882df9495ab04b,"rio.c fdset target: tolerate (and report) a subset of FDs in error.

Fdset target is used when we want to write an RDB file directly to
slave's sockets. In this setup as long as there is a single slave that
is still receiving our payload, we want to continue sennding instead of
aborting. However rio calls should abort of no FD is ok.

Also we want the errors reported so that we can signal the parent who is
ok and who is broken, so there is a new set integers with the state of
each fd. Zero is ok, non-zero is the errno of the failure, if avaialble,
or a generic EIO."
antirez,2014-10-14 13:29:07,https://api.github.com/repos/antirez/redis/git/commits/1cd0d26c63c755aaac4997e852c4041a0237a395,1cd0d26c63c755aaac4997e852c4041a0237a395,Diskless replication: parent-child pipe and a few TODOs.
antirez,2014-10-14 08:11:26,https://api.github.com/repos/antirez/redis/git/commits/75f0cd6520c73bc868717940ed583c4809ab30db,75f0cd6520c73bc868717940ed583c4809ab30db,Diskless replication: RDB -> slaves transfer draft implementation.
antirez,2014-10-10 15:44:06,https://api.github.com/repos/antirez/redis/git/commits/850ea57c37e517eb0f10d8fc319332ca339d0ba2,850ea57c37e517eb0f10d8fc319332ca339d0ba2,rio.c: draft implementation of fdset target implemented.
antirez,2014-10-10 14:33:16,https://api.github.com/repos/antirez/redis/git/commits/29db3227ab8980f098080371ef57c4e1eeb38180,29db3227ab8980f098080371ef57c4e1eeb38180,rio.c refactoring before adding a new target.
antirez,2014-10-10 14:25:58,https://api.github.com/repos/antirez/redis/git/commits/16546f5aca1236a179bff98af9aaee491cd6fd4d,16546f5aca1236a179bff98af9aaee491cd6fd4d,Add some comments in syncCommand() to clarify RDB target.
mattsta,2014-04-04 15:34:36,https://api.github.com/repos/antirez/redis/git/commits/3fecb96122e35cb0c5809699c26eb093efda19e8,3fecb96122e35cb0c5809699c26eb093efda19e8,"Lua: Add bitop

A few people have written custom C commands because bit
manipulation isn't exposed through Lua.  Let's give
them Mike Pall's bitop.

This adds bitop 1.0.2 (2012-05-08) from http://bitop.luajit.org/

bitop is imported as ""bit"" into the global namespace.

New Lua commands: bit.tobit, bit.tohex, bit.bnot, bit.band, bit.bor, bit.bxor,
bit.lshift, bit.rshift, bit.arshift, bit.rol, bit.ror, bit.bswap

Verification of working (the asserts would abort on error, so (nil) is correct):
127.0.0.1:6379> eval ""assert(bit.tobit(1) == 1); assert(bit.band(1) == 1); assert(bit.bxor(1,2) == 3); assert(bit.bor(1,2,4,8,16,32,64,128) == 255)"" 0
(nil)
127.0.0.1:6379> eval 'assert(0x7fffffff == 2147483647, ""broken hex literals""); assert(0xffffffff == -1 or 0xffffffff == 2^32-1, ""broken hex literals""); assert(tostring(-1) == ""-1"", ""broken tostring()""); assert(tostring(0xffffffff) == ""-1"" or tostring(0xffffffff) == ""4294967295"", ""broken tostring()"")' 0
(nil)

Tests also integrated into the scripting tests and can be run with:
./runtest --single unit/scripting

Tests are excerpted from `bittest.lua` included in the bitop distribution."
antirez,2014-10-09 09:26:51,https://api.github.com/repos/antirez/redis/git/commits/5ba47b50ae6ea5e0ed56598d0ef33dc43c6a7abf,5ba47b50ae6ea5e0ed56598d0ef33dc43c6a7abf,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2014-10-09 09:26:32,https://api.github.com/repos/antirez/redis/git/commits/da838544ae5f5e914cad85c1d6766ba79d71b32b,da838544ae5f5e914cad85c1d6766ba79d71b32b,02_upload_tarball.sh: let me exit before updating site.
antirez,2014-10-09 09:17:27,https://api.github.com/repos/antirez/redis/git/commits/591b69c745f8d8a9cff7a43083c3b0d0ac333362,591b69c745f8d8a9cff7a43083c3b0d0ac333362,Fix DEBUG POPULATE warning for lack of casting.
antirez,2014-10-08 14:58:12,https://api.github.com/repos/antirez/redis/git/commits/5f6950caa893921e7cfe3d5b26109f880e060f8f,5f6950caa893921e7cfe3d5b26109f880e060f8f,"Cluster: process gossip section only for known nodes.

With the exception of nodes sending MEET packets: we have to trust them
since they can send us MEET packets only when the cluster is initially
created or because sysadmin manual action."
antirez,2014-10-08 14:27:07,https://api.github.com/repos/antirez/redis/git/commits/36e34a656aab9c0a2fccd9a841cab0592e721d6d,36e34a656aab9c0a2fccd9a841cab0592e721d6d,"Cluster: fix logic to detect we are among a minority.

In the cluster evaluation function we are supposed to set the cluster
state as ""fail"" if we are among a minority, however the code was not
detecting to be into a minority partition if exactly half the masters
were reachable, which is a minority."
antirez,2014-10-08 08:17:01,https://api.github.com/repos/antirez/redis/git/commits/908be1dbebf3e9a5a6fdb80d391e58481ddd5005,908be1dbebf3e9a5a6fdb80d391e58481ddd5005,Cluster test: helpers/onlydots.tcl: detect EOF and exit.
antirez,2014-10-08 08:12:40,https://api.github.com/repos/antirez/redis/git/commits/5b47783d77d733f0019171d6db5d7841d43f1fef,5b47783d77d733f0019171d6db5d7841d43f1fef,Cluster test: less console-spammy resharding test.
antirez,2014-10-08 07:09:01,https://api.github.com/repos/antirez/redis/git/commits/2df8341c75f46cf2d6ec28804cbda6287766262d,2df8341c75f46cf2d6ec28804cbda6287766262d,"Define different types of RDB childs.

We need to remember what is the saving strategy of the current RDB child
process, since the configuration may be modified at runtime via CONFIG
SET and still we'll need to understand, when the child exists, what to
do and for what goal the process was initiated: to create an RDB file
on disk or to write stuff directly to slave's sockets."
antirez,2014-10-07 10:56:23,https://api.github.com/repos/antirez/redis/git/commits/8beb98574ab285c910c50c877d688a11960d5bd5,8beb98574ab285c910c50c877d688a11960d5bd5,RDB file creation refactored to target non-disk target.
antirez,2014-10-07 07:52:40,https://api.github.com/repos/antirez/redis/git/commits/034ca98678e1ba122d390675fde709538bffa91a,034ca98678e1ba122d390675fde709538bffa91a,Cluster: nodes.conf added to git ignore list.
antirez,2014-10-07 07:51:55,https://api.github.com/repos/antirez/redis/git/commits/edb3987a061a8425bac8afcffe66293cf819a54c,edb3987a061a8425bac8afcffe66293cf819a54c,Cluster: more chatty slaves when failover is stalled.
antirez,2014-10-06 07:49:44,https://api.github.com/repos/antirez/redis/git/commits/e4b0c8ec50f2248286b770a655ea85d5cfcc79f4,e4b0c8ec50f2248286b770a655ea85d5cfcc79f4,Linenoise README updated to match source code.
antirez,2014-10-06 07:44:54,https://api.github.com/repos/antirez/redis/git/commits/3c6f9ac37c849c82aebf5b45e895faa6cc80e7be,3c6f9ac37c849c82aebf5b45e895faa6cc80e7be,"Merge pull request #1902 from mattsta/comment-fixes

ALL comment fixes"
antirez,2014-10-03 11:28:56,https://api.github.com/repos/antirez/redis/git/commits/389ec305b3e984422b91eca112e4ce37728fba20,389ec305b3e984422b91eca112e4ce37728fba20,Test: check that INCR object sharing works as expected.
antirez,2014-10-03 10:53:57,https://api.github.com/repos/antirez/redis/git/commits/16559b461521625271430d7d4926b632f3a326dd,16559b461521625271430d7d4926b632f3a326dd,"INCR: Modify incremented object in-place when possible.

However we don't try to do this if the integer is already inside a range
representable with a shared integer.

The performance gain appears to be around ~15% in micro benchmarks,
however in the long run this also helps to improve locality, so should
have more, hard to measure, benefits."
mparramont,2014-09-29 10:46:30,https://api.github.com/repos/antirez/redis/git/commits/be0061635eee4b489d3bb0f756ddb38dcc65dedd,be0061635eee4b489d3bb0f756ddb38dcc65dedd,"redis.conf small grammar fix

:smile:

Closes #2034"
lovelle,2014-09-25 20:40:11,https://api.github.com/repos/antirez/redis/git/commits/c3d252d9955ee4d9b4be296cb2cf8560c9caf00c,c3d252d9955ee4d9b4be296cb2cf8560c9caf00c,"Fix typo

Closes #2029"
flyingmutant,2014-09-15 17:40:11,https://api.github.com/repos/antirez/redis/git/commits/fa8786f17af6175ca6ab6d76308e21be290e25ea,fa8786f17af6175ca6ab6d76308e21be290e25ea,"Fix typos in comments

Closes #2002"
mattsta,2014-08-28 14:36:32,https://api.github.com/repos/antirez/redis/git/commits/678df67501ba030a9be801ceb8634ae094d95493,678df67501ba030a9be801ceb8634ae094d95493,Add missing 'by'
jbochi,2014-08-23 16:17:54,https://api.github.com/repos/antirez/redis/git/commits/a63b9c24f03bffb741e819c1752c9cddc0cb7f36,a63b9c24f03bffb741e819c1752c9cddc0cb7f36,"Fix typo in scripting.c comment

Closes #1960"
tjschuck,2014-08-14 15:22:52,https://api.github.com/repos/antirez/redis/git/commits/38a5db6c9ac21812e4942d7016e4e58429f9ab09,38a5db6c9ac21812e4942d7016e4e58429f9ab09,"Fix typo radis -> redis

Closes #1938"
mattsta,2014-08-11 17:28:07,https://api.github.com/repos/antirez/redis/git/commits/ef5fc599b47af5befa59102ad0f41456d96b83f5,ef5fc599b47af5befa59102ad0f41456d96b83f5,"Cleanup wording of dictScan() comment

Some language in the comment was difficult
to understand, so this commit: clarifies wording, removes
unnecessary words, and relocates some dependent clauses
closer to what they actually describe.

I also tried to break up longer chains of thought
(if X, then Y, and Q, and also F, so obviously M)
into more manageable chunks for ease of understanding."
alghak,2014-01-23 13:52:03,https://api.github.com/repos/antirez/redis/git/commits/9aba616866a113174366f53b6354f23c80766c37,9aba616866a113174366f53b6354f23c80766c37,"Fix comment inconsistencies in ziplist.c

Closes #1523"
badboy,2014-05-12 09:20:46,https://api.github.com/repos/antirez/redis/git/commits/cf737ff1c86a1c8354427bf7bc1c8ad6b47627c6,cf737ff1c86a1c8354427bf7bc1c8ad6b47627c6,"Fix sentinel.conf typo

Closes #1739"
mattsta,2014-07-31 18:39:49,https://api.github.com/repos/antirez/redis/git/commits/1cedebb79921bc5fa5bb1e5cbaf30ba67511df8b,1cedebb79921bc5fa5bb1e5cbaf30ba67511df8b,Remove trailing spaces from tests
mattsta,2014-07-31 18:33:50,https://api.github.com/repos/antirez/redis/git/commits/09cb281bc327078dc2c71163f4cb7cb5a7e3ae2c,09cb281bc327078dc2c71163f4cb7cb5a7e3ae2c,Fix spelling in some test cases
mattsta,2014-07-31 18:25:48,https://api.github.com/repos/antirez/redis/git/commits/28343966a4447ccbb23323d2dd1aae406ea62dbb,28343966a4447ccbb23323d2dd1aae406ea62dbb,Spell software correctly
mattsta,2014-07-31 18:51:05,https://api.github.com/repos/antirez/redis/git/commits/12d0195b3013aff008bb492cf59f31d823f024b0,12d0195b3013aff008bb492cf59f31d823f024b0,"Clean up text throughout project

  - Remove trailing newlines from redis.conf
  - Fix comment misspelling
  - Clarifies zipEncodeLength usage and a C API mention (#1243, #1242)
  - Fix cluster typos (inspired by @papanikge #1507)
  - Fix rewite -> rewrite in a few places (inspired by #682)

Closes #1243, #1242, #1507"
mgp,2013-10-29 18:28:19,https://api.github.com/repos/antirez/redis/git/commits/fc8f7ec7656487b8f7dea14d33dbdbb2c6b6f470,fc8f7ec7656487b8f7dea14d33dbdbb2c6b6f470,"Fix hash table size in comment for dictScan

Closes #1351"
tnm,2013-11-08 23:38:41,https://api.github.com/repos/antirez/redis/git/commits/39be4bf496fc0b045b7d8d1ff58f109c05f163da,39be4bf496fc0b045b7d8d1ff58f109c05f163da,"Fix on-place -> in-place

Closes #1373"
dlutxx,2013-11-20 06:14:27,https://api.github.com/repos/antirez/redis/git/commits/d9462d27801b337c482d8cde741081a29fcc14fb,d9462d27801b337c482d8cde741081a29fcc14fb,"Fix typo in redis.h

Closes #1386"
wuddup,2013-12-05 20:40:15,https://api.github.com/repos/antirez/redis/git/commits/f62f00e0629d95dac5d7337cc6b4471513166770,f62f00e0629d95dac5d7337cc6b4471513166770,"Grammar and typo fixes in redis.conf

Closes #1441"
badboy,2014-02-03 20:50:23,https://api.github.com/repos/antirez/redis/git/commits/9f98b29cefc337d607016cea57216cde1c25dd47,9f98b29cefc337d607016cea57216cde1c25dd47,"Fix typo: ad -> and

Closes #1537"
dchest,2014-04-09 10:10:20,https://api.github.com/repos/antirez/redis/git/commits/45409d3d8bbe36e488bfe2c054e679ae33080df8,45409d3d8bbe36e488bfe2c054e679ae33080df8,"Fix typo in 00-RELEASENOTES

Closes #1673"
jbochi,2014-04-13 21:44:58,https://api.github.com/repos/antirez/redis/git/commits/0d434a446a440b645b4538094f96434e974be767,0d434a446a440b645b4538094f96434e974be767,"Fix typo

Closes #1682"
badboy,2014-04-29 10:58:17,https://api.github.com/repos/antirez/redis/git/commits/aa628446f211d1abcdfaab4fcefe8f1572e0335e,aa628446f211d1abcdfaab4fcefe8f1572e0335e,"Fix typo in redis.conf

Closes #1713"
zionwu,2014-06-11 00:35:46,https://api.github.com/repos/antirez/redis/git/commits/a2583466e43adf2f2e56a51f9e35fbd87d9737bf,a2583466e43adf2f2e56a51f9e35fbd87d9737bf,"Fix incorrect comments

error != success; and 0 != number of bytes written

Closes #1806"
badboy,2014-07-12 16:02:17,https://api.github.com/repos/antirez/redis/git/commits/0cb874819bc90d55c39c2bb9ed2e6a2fcf0a6e35,0cb874819bc90d55c39c2bb9ed2e6a2fcf0a6e35,"Fix many small typos

Closes #1871"
mattsta,2014-07-31 15:58:53,https://api.github.com/repos/antirez/redis/git/commits/6e0a280cb55f948ecd731ca8bd87d8bb912e021f,6e0a280cb55f948ecd731ca8bd87d8bb912e021f,"Update linenoise accessory files

The core linenoise code was being backported, but not
the README or example.  It's less confusing for users
if everything matches across directories.

Fix inspired by @thrig

Closes #1872"
c9n,2014-07-17 07:25:24,https://api.github.com/repos/antirez/redis/git/commits/74aeb27a26b905489888c3020d652ddba4d4684b,74aeb27a26b905489888c3020d652ddba4d4684b,"Remove surplus double quotes

Closes #1877"
manuelmeurer,2014-07-25 20:45:27,https://api.github.com/repos/antirez/redis/git/commits/df484c7a2c5bfb085eac90d47ea14bab1e7d6bf8,df484c7a2c5bfb085eac90d47ea14bab1e7d6bf8,"Improve disable save comment in redis.conf

Closes #1897"
antirez,2014-09-26 14:57:42,https://api.github.com/repos/antirez/redis/git/commits/de10b8d9cc2ea8d0f96552f88227cf5bfe090b6b,de10b8d9cc2ea8d0f96552f88227cf5bfe090b6b,redis-trib should not abort easily on connection issues.
antirez,2014-09-25 15:01:56,https://api.github.com/repos/antirez/redis/git/commits/d4222e6bee4b6f58faec93cfb8179b695d5cdb9e,d4222e6bee4b6f58faec93cfb8179b695d5cdb9e,"DEBUG POPULATE two args form implemented.

The old DEBUG POPULATE form for automatic creation of test keys is:

    DEBUG POPULATE <count>

Now an additional form is available:

    DEBUG POPULATE <count> <prefix>

When prefix is not specified, it defaults to ""key"", so the keys are
named incrementally from key:0 to key:<count-1>. Otherwise the specified
prefix is used instead of ""key"".

The command is useful in order to populate different Redis instances
with key names guaranteed to don't collide. There are other debugging
uses, for example it is possible to add additional N keys using a count
of N and a random prefix at every call."
antirez,2014-09-22 12:55:54,https://api.github.com/repos/antirez/redis/git/commits/35a8302b7cbdf7ad59256f53f4e9704f3d256198,35a8302b7cbdf7ad59256f53f4e9704f3d256198,Linenoise lib updated.
antirez,2014-09-19 17:20:15,https://api.github.com/repos/antirez/redis/git/commits/d61e820fafa2b057c70720a8e4c5bf23c1603260,d61e820fafa2b057c70720a8e4c5bf23c1603260,Fix 03_release_hash.sh commit message.
antirez,2014-09-19 17:18:48,https://api.github.com/repos/antirez/redis/git/commits/5807558c981541e0d4087ae850d536c2dffac247,5807558c981541e0d4087ae850d536c2dffac247,03_release_hahs.sh: let me edit before committing.
antirez,2014-09-19 17:17:52,https://api.github.com/repos/antirez/redis/git/commits/f3107559bee963f1345956581f90722e7c79be81,f3107559bee963f1345956581f90722e7c79be81,"Quick, wrong, fix for create_tarball script."
antirez,2014-09-19 16:20:47,https://api.github.com/repos/antirez/redis/git/commits/eba1e652f4824d94ec548913100f1649c3f9d73e,eba1e652f4824d94ec548913100f1649c3f9d73e,03_release_hash.sh: fix commit stage.
antirez,2014-09-19 16:19:19,https://api.github.com/repos/antirez/redis/git/commits/07bd52113eb159c4dcd27081f23ebb341474c00b,07bd52113eb159c4dcd27081f23ebb341474c00b,02_upload_tarball.sh fixes.
antirez,2014-09-19 15:44:04,https://api.github.com/repos/antirez/redis/git/commits/44acd50a11aab32aa27a230e5c2ad6c3ca46fdeb,44acd50a11aab32aa27a230e5c2ad6c3ca46fdeb,First version of release scripts.
antirez,2014-09-19 10:49:35,https://api.github.com/repos/antirez/redis/git/commits/8fe3ecff09ae64f2f4648479ac8bb405989577e1,8fe3ecff09ae64f2f4648479ac8bb405989577e1,"Merge pull request #2014 from mattsta/fix-hiredis-leak

Fix hiredis getaddrinfo leak"
mattsta,2014-09-18 18:21:12,https://api.github.com/repos/antirez/redis/git/commits/56c1f8805e72cbc55d74a7fc46ff17fdc5d7882d,56c1f8805e72cbc55d74a7fc46ff17fdc5d7882d,"Fix hiredis getaddrinfo leak

Fixed in Redis by 1a5e5b6, but since that part of code
is largely copy/paste from Redis, the fix needs to be
ported over too.

Closes #2012"
antirez,2014-09-18 15:37:05,https://api.github.com/repos/antirez/redis/git/commits/747b57cfb66abf2baafa372e312298c037248f1c,747b57cfb66abf2baafa372e312298c037248f1c,"anetPeerToString(): make unix sockets distinguishable.

Following the CLIENT LIST output format, we prefix the unix socket
address with a ""/"" so that it is different than an IPv4/6 address.
This makes parsing simpler.

Related to #2010."
antirez,2014-09-18 15:22:19,https://api.github.com/repos/antirez/redis/git/commits/6d53b2f34b16a4fcd0602cb47cb58c31bd28b9e0,6d53b2f34b16a4fcd0602cb47cb58c31bd28b9e0,"anetPeerToString() refactoring and more explicit checks.

Related to PR #2010."
antirez,2014-09-18 15:21:22,https://api.github.com/repos/antirez/redis/git/commits/6d699ea4016f3567ade84a0a260701e22e865aa9,6d699ea4016f3567ade84a0a260701e22e865aa9,"Merge pull request #2010 from yossigo/unixdomain-info-string

Unix domain sockets incorrectly listed as IPv6."
yossigo,2014-09-18 14:07:29,https://api.github.com/repos/antirez/redis/git/commits/cceb58d23343345cb07850143e98f64ada4e53f7,cceb58d23343345cb07850143e98f64ada4e53f7,Unix domain sockets incorrectly listed as IPv6.
antirez,2014-09-17 14:39:41,https://api.github.com/repos/antirez/redis/git/commits/2374496799fc4d75338f821fa377a211f9557a55,2374496799fc4d75338f821fa377a211f9557a55,"Cluster: claim ping_sent time even if we can't connect.

This fixes a potential bug that was never observed in practice since
what happens is that the asynchronous connect returns ok (to fail later,
calling the handler) every time, so a ping is queued, and sent_ping
happens to always be populated.

Howver technically connect(2) with a non blocking socket may return an
error synchronously, so before this fix the code was not correct."
antirez,2014-09-17 09:10:09,https://api.github.com/repos/antirez/redis/git/commits/c89afc8e5db6166bd8855bf48d5d7f7cc16492ad,c89afc8e5db6166bd8855bf48d5d7f7cc16492ad,Cluster: new option to work with partial slots coverage.
antirez,2014-09-16 09:05:12,https://api.github.com/repos/antirez/redis/git/commits/a2c740ea931580efe2f7414661ab3c896ce8e401,a2c740ea931580efe2f7414661ab3c896ce8e401,"Better truncated AOF loading tests.

Now there are tests to write more data after loading a truncated AOF,
testing that the loaded data is correct, appending more, and testing
again."
antirez,2014-09-16 08:57:40,https://api.github.com/repos/antirez/redis/git/commits/878c089ec91484b1ae62d098d57cfcc7731031dd,878c089ec91484b1ae62d098d57cfcc7731031dd,"Seek at the end of AOF after truncate call.

It is not clear if files open in append only mode will automatically fix
their offset after a truncate(2) operation. This commit makes sure that
we reposition the AOF file descriptor offset at the end of the file
after a truncated AOF is loaded and trimmed to the last valid command."
antirez,2014-09-16 08:32:58,https://api.github.com/repos/antirez/redis/git/commits/0ba8fe1a43a624a6e4a4e5698ac7b6616ee5a133,0ba8fe1a43a624a6e4a4e5698ac7b6616ee5a133,"On AOF end of file, truncate the AOF to last valid command.

Recently we introduced the ability to load truncated AOFs, but
unfortuantely the support was broken since the server, after loading the
truncated AOF, continues appending to the file that is corrupted at the
end. The problem is fixed only in the next AOF rewrite.

This commit fixes the issue by truncating the AOF to the last valid
opcode, and aborting if it is not possible to truncate the file
correctly."
antirez,2014-09-16 08:12:50,https://api.github.com/repos/antirez/redis/git/commits/046a00a03d43a6ba1db197df24be0f888a4cf196,046a00a03d43a6ba1db197df24be0f888a4cf196,"Don't propagate SAVE.

This is a general fix (check that dirty delta is positive) but actually
should have as the only effect fixing the SAVE propagation to
AOF and slaves."
antirez,2014-09-15 16:11:45,https://api.github.com/repos/antirez/redis/git/commits/b82d650afaff867daf9ac2c69d7e631a0f531641,b82d650afaff867daf9ac2c69d7e631a0f531641,"Cluster test: unit 09, Pub/Sub across the cluster."
antirez,2014-09-15 14:48:26,https://api.github.com/repos/antirez/redis/git/commits/3064e9bd4b3f3ed1dfaaa10dbef231f2fdbf2975,3064e9bd4b3f3ed1dfaaa10dbef231f2fdbf2975,"Cluster test: unit 08, update messages."
antirez,2014-09-11 17:27:45,https://api.github.com/repos/antirez/redis/git/commits/f5efa9bbadd0c56a1b9b6216a0570cb76ab17352,f5efa9bbadd0c56a1b9b6216a0570cb76ab17352,Sentinel sentinelGetLeader() top comment improved.
antirez,2014-09-11 16:53:31,https://api.github.com/repos/antirez/redis/git/commits/f4be6f16f2accf22d463ea557cb346d4c464870a,f4be6f16f2accf22d463ea557cb346d4c464870a,"Sentinel: fix computation of total number of votes.

The code to check the number of voters was never updated to follow the new
Sentinel specification, so the number of voters was computed using only
the set of Sentinels that provided a vote.

This means that there is a changing majority on partitions, even if
usually the issue is not triggered because of the configured quorum
check (what was broken was the other implicit check that requires anyway
half of the known sentinels to agree in order to start a failover)."
grobe0ba,2014-09-11 14:21:05,https://api.github.com/repos/antirez/redis/git/commits/087b19237cbdda4a1c082a9cf1aaf6cd0a2b9066,087b19237cbdda4a1c082a9cf1aaf6cd0a2b9066,Fixed issue #1996 (Missing '-' in help message for redis-benchmark)
antirez,2014-09-10 13:41:05,https://api.github.com/repos/antirez/redis/git/commits/12b56a969f03ff2e0e28704ff2c30875ea836fe0,12b56a969f03ff2e0e28704ff2c30875ea836fe0,"luaRedisGenericCommand() cached argv handling simplified.

As discussed in issue #1945."
antirez,2014-09-10 07:57:54,https://api.github.com/repos/antirez/redis/git/commits/99871803c8d79406d939dbb43ae0b980d29dc7dc,99871803c8d79406d939dbb43ae0b980d29dc7dc,"Merge pull request #1993 from xiaost/limit-scan-iter-count

Limit the *SCAN command `dictScan` iterations"
xiaost,2014-09-09 09:53:30,https://api.github.com/repos/antirez/redis/git/commits/acfc19633dbd522de4571d7ca9cbc629987b39b6,acfc19633dbd522de4571d7ca9cbc629987b39b6,"Limit the *SCAN command `dictScan` iterations

*SCAN will cause redis server to hang for seconds
after millions of keys was deleted by SCAN/DEL pairs"
antirez,2014-09-08 08:22:23,https://api.github.com/repos/antirez/redis/git/commits/b892ea70ae4c2da7a0736943a4ee1915edda838d,b892ea70ae4c2da7a0736943a4ee1915edda838d,Tests for aof-load-truncated = yes.
antirez,2014-09-08 07:31:00,https://api.github.com/repos/antirez/redis/git/commits/9f40c25a0848d502967ca124b48b3c87bbce0106,9f40c25a0848d502967ca124b48b3c87bbce0106,"AOF tests fixed turning aof-load-truncated to no.

When aof-load-truncated option was introduced, with a default of ""yes"",
the past behavior of the server to abort with trunncated AOF changed, so
we need to explicitly configure the tests to abort with truncated AOF
by setting the option to no."
antirez,2014-09-08 07:23:55,https://api.github.com/repos/antirez/redis/git/commits/31f79a46ffbf04d372cfc0ebfcc5578daf39c532,31f79a46ffbf04d372cfc0ebfcc5578daf39c532,Make aof-load-truncated option actually configurable.
antirez,2014-09-05 13:14:36,https://api.github.com/repos/antirez/redis/git/commits/de663966c64e9f27e667ad6a0dacf66aaa8ad32e,de663966c64e9f27e667ad6a0dacf66aaa8ad32e,"Correct cleanup when aborting AOF loading.

Because of the new ability to start with a truncated AOF, we need
to correctly release all the memory on EOF error. Otherwise there is a
small leak, that is not really a problem, but causes a false positive in
the tests that detect memory leaks."
antirez,2014-09-05 09:48:35,https://api.github.com/repos/antirez/redis/git/commits/132550efc32e9738ec31f552c899dd67b5551e10,132550efc32e9738ec31f552c899dd67b5551e10,AOF ability to load truncated files.
antirez,2014-09-05 08:27:11,https://api.github.com/repos/antirez/redis/git/commits/7b2e5ff9f9d5a7c5fa93bc22c53fce74f768ad83,7b2e5ff9f9d5a7c5fa93bc22c53fce74f768ad83,Test AOF format error detection.
antirez,2014-09-05 07:56:26,https://api.github.com/repos/antirez/redis/git/commits/0ab04287aa85735e52312cb8973ec37e1a867169,0ab04287aa85735e52312cb8973ec37e1a867169,AOF loading: split handling of format errors from unexpected EOF.
antirez,2014-09-04 09:46:18,https://api.github.com/repos/antirez/redis/git/commits/d9f0094154055803631f4f2727d9bde857feea07,d9f0094154055803631f4f2727d9bde857feea07,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2014-09-04 09:45:58,https://api.github.com/repos/antirez/redis/git/commits/0a6cbabb260bb536bc1ee91e823fe7d1ee3dcd6d,0a6cbabb260bb536bc1ee91e823fe7d1ee3dcd6d,Sentinel: don't set announce-ip if is empty.
antirez,2014-09-04 09:30:08,https://api.github.com/repos/antirez/redis/git/commits/c9437fe5a3ccc2a29ef11e1222356cf4c580a7d7,c9437fe5a3ccc2a29ef11e1222356cf4c580a7d7,Sentinel: clarify announce-ip/port options in sentinel.conf.
antirez,2014-09-04 09:23:19,https://api.github.com/repos/antirez/redis/git/commits/cd576a1aab9bc321a63c1aabac8d274e3ba20f26,cd576a1aab9bc321a63c1aabac8d274e3ba20f26,"Sentinel: announce ip/port changes + rewrite.

The original implementation was modified in order to allow to
selectively announce a different IP or port, and to rewrite the two
options in the config file after a rewrite."
dkong,2014-07-29 17:49:56,https://api.github.com/repos/antirez/redis/git/commits/3d939266be28d4db5359fea0ce7e9aa7666a8a84,3d939266be28d4db5359fea0ce7e9aa7666a8a84,"sentinel: Decouple bind address from address sent to other sentinels

There are instances such as EC2 where the bind address is private
(behind a NAT) and cannot be accessible from WAN.

https://groups.google.com/d/msg/redis-db/PVVvjO4nMd0/P3oWC036v3cJ"
antirez,2014-09-03 13:10:35,https://api.github.com/repos/antirez/redis/git/commits/0019479f8650ac7f0708ffe04e2571e31c3b7189,0019479f8650ac7f0708ffe04e2571e31c3b7189,"Merge pull request #1982 from mattsta/fix-getrange-32bit

Increase size of range request in getrange"
mattsta,2014-09-02 22:56:28,https://api.github.com/repos/antirez/redis/git/commits/b20df972edf56c53a27d47839cdf58130bc6dfdc,b20df972edf56c53a27d47839cdf58130bc6dfdc,"Return empty string if GETRANGE of empty string

Previously, GETRANGE of a key containing nothing ("""")
would allocate a large (size_t)-1 return value causing
crashes on 32bit builds when it tried to allocate the
4 GB return string."
mattsta,2014-09-02 21:56:17,https://api.github.com/repos/antirez/redis/git/commits/f0e306f4a0bc0e4db15da54eb3d1d2337a1b6dea,f0e306f4a0bc0e4db15da54eb3d1d2337a1b6dea,"Increase size of range request in getrange

32 bit builds don't have a big enough long to capture
the same range as a 64 bit build.  If we use ""long long""
we get proper size limits everywhere.

Also updates size of unsigned comparison to fit new size of `end`.

Fixes #1981"
mattsta,2014-08-04 17:13:12,https://api.github.com/repos/antirez/redis/git/commits/67e414c7b871bced5e84f9eb9675a630ed6108dc,67e414c7b871bced5e84f9eb9675a630ed6108dc,"Sentinel: Abort Hello quicker if not connected

We can save a little work by aborting when we enter the function
if we're disconnected."
paddybyers,2014-08-17 14:32:26,https://api.github.com/repos/antirez/redis/git/commits/a23502e5e8c55d149a3463aad845fd530b447bfd,a23502e5e8c55d149a3463aad845fd530b447bfd,Add regression test for issue #1939
paddybyers,2014-08-15 21:02:05,https://api.github.com/repos/antirez/redis/git/commits/86cde329d16c3f69555a21a8155e998e1d91ab08,86cde329d16c3f69555a21a8155e998e1d91ab08,Store the length of the static argv when first allocated.
antirez,2014-08-26 08:32:37,https://api.github.com/repos/antirez/redis/git/commits/91e6b4d74ec0d8905bd22d46fa7b9e71ce8848c4,91e6b4d74ec0d8905bd22d46fa7b9e71ce8848c4,"Fix dictRehash assert casting type.

Also related to #1929."
antirez,2014-08-26 08:26:36,https://api.github.com/repos/antirez/redis/git/commits/72aa797c89e68d423b5c6857bbd47c275f1ed291,72aa797c89e68d423b5c6857bbd47c275f1ed291,"Cast to right type in dictNext().

This closes issue #1929, the other part was fixed in the context of issue"
antirez,2014-08-26 08:18:56,https://api.github.com/repos/antirez/redis/git/commits/064d5c96ac0545e2115edd7d4153433a99aaa707,064d5c96ac0545e2115edd7d4153433a99aaa707,"Use long for rehash and iterator index in dict.h.

This allows to support datasets with more than 2 billion of keys
(possible in very large memory instances, this bug was actually
reported).

Closes issue #1814."
antirez,2014-08-26 08:05:24,https://api.github.com/repos/antirez/redis/git/commits/293348d0de8776e409551bbbd72691f66cb121cf,293348d0de8776e409551bbbd72691f66cb121cf,Missing va_end also added in hiredis copy of sds.c.
antirez,2014-08-26 08:03:54,https://api.github.com/repos/antirez/redis/git/commits/26744da0d1afb8d5a1c840e1a0764af14737acea,26744da0d1afb8d5a1c840e1a0764af14737acea,"Merge pull request #1964 from mariano-perez-rodriguez/patch-2

Missing assert removal from sdsIncrLen()"
mariano-perez-rodriguez,2014-08-25 18:24:15,https://api.github.com/repos/antirez/redis/git/commits/8bbc1897c4d680cae0d4708981a53e27e3c0ef15,8bbc1897c4d680cae0d4708981a53e27e3c0ef15,"Missing assert removal from sdsIncrLen()

Companion for 8eeb1802ec42682a614a5ebca318a0ba44ca7c03, but dealing with hiredis."
antirez,2014-08-25 08:42:18,https://api.github.com/repos/antirez/redis/git/commits/119a7000b5b8e75016dbb554e703bae6e52cb56d,119a7000b5b8e75016dbb554e703bae6e52cb56d,Use modern typedef form in cluster.h.
antirez,2014-08-25 08:36:04,https://api.github.com/repos/antirez/redis/git/commits/8eeb1802ec42682a614a5ebca318a0ba44ca7c03,8eeb1802ec42682a614a5ebca318a0ba44ca7c03,No longer useful assert removed from sdsIncrLen().
antirez,2014-08-25 08:27:53,https://api.github.com/repos/antirez/redis/git/commits/209f266cc534471daa03501b2802f08e4fca4fe6,209f266cc534471daa03501b2802f08e4fca4fe6,Merge branch '1906-merge' into unstable
mattsta,2014-08-13 14:58:54,https://api.github.com/repos/antirez/redis/git/commits/1f8a6d806cc25ece4d092fb3d49af9ccc1443102,1f8a6d806cc25ece4d092fb3d49af9ccc1443102,Fix redis-benchmark abort output
mattsta,2014-08-06 20:56:23,https://api.github.com/repos/antirez/redis/git/commits/6b099c7de614bebe3e61a0cbb91af459cc67f1c3,6b099c7de614bebe3e61a0cbb91af459cc67f1c3,"Deny CLIENT command in scripts

We don't want scripts doing CLIENT SETNAME
or CLIENT KILL or CLIENT LIST or CLIENT PAUSE.

Originally reported by Chris Wj then proper
action inspired by Itamar Haber.

Reference: https://groups.google.com/forum/#!topic/redis-db/09B2EYwyVgk"
mattsta,2014-08-06 14:40:34,https://api.github.com/repos/antirez/redis/git/commits/aa404fc11be08f45fa0785c43f5fc7426e2b14a4,aa404fc11be08f45fa0785c43f5fc7426e2b14a4,"redis-benchmark: Remove unused buffer

This just deletes old code that didn't get removed when
logic changed.  We were setting offsets that never
got read anywhere.

Since clients are now just cloned, we don't need to track
per-client buffer offsets anywhere because they are all
the same from the original client."
charsyam,2013-05-09 14:30:20,https://api.github.com/repos/antirez/redis/git/commits/b34a8c3b754c97083e93f225e4dc6b262ff0a0de,b34a8c3b754c97083e93f225e4dc6b262ff0a0de,"redis-benchmark: add auth option

Closes #1097"
mattsta,2014-08-06 14:16:46,https://api.github.com/repos/antirez/redis/git/commits/7e63dd23f3faae7a399617128ffef224e0f21754,7e63dd23f3faae7a399617128ffef224e0f21754,"Rename two 'buf' vars to 'ip' for better clarity

Clearly ip[32] is wrong, but it's less clear that buf[32] was wrong
without further reading."
eiiches,2014-08-06 05:48:30,https://api.github.com/repos/antirez/redis/git/commits/c38884ceaca3b0be250d28b3a9e842328cde7d90,c38884ceaca3b0be250d28b3a9e842328cde7d90,"Sentinel: fix bufsize to support IPv6 address

Closes #1914"
badboy,2014-08-05 07:12:40,https://api.github.com/repos/antirez/redis/git/commits/ef57f94df0c07ccdd61e537283f45f977840f8ad,ef57f94df0c07ccdd61e537283f45f977840f8ad,"Use correct github url to find commands.json

Once this is merged:
  - merge the latest changes to commands.json in antirez/redis-doc
  - re-run: utils/generate-command-help.rb > src/help.h

Then we'll have nice and easy tab-completed help in redis-cli again.

Closes #1909"
mariano-perez-rodriguez,2014-08-05 12:50:44,https://api.github.com/repos/antirez/redis/git/commits/5afe1e37c7f04224831d6e0e34579e4ce496d006,5afe1e37c7f04224831d6e0e34579e4ce496d006,"Stop tests from leaving a black background

Uses ANSI ""default background"" color code after closing tests
so any non-black terminals don't remain polluted.

Fixes #1649
Closes #1912"
mattsta,2014-08-04 16:28:45,https://api.github.com/repos/antirez/redis/git/commits/681de88df4814a4a6e794a07530a3865ef515d2c,681de88df4814a4a6e794a07530a3865ef515d2c,"Sentinel: Reject config from STDIN

Sentinel needs to die with a more accurate error message
when attempted to open a config from STDIN.

See: https://groups.google.com/forum/#!topic/redis-db/sYx7VNMWaNM"
mattsta,2014-03-27 16:33:42,https://api.github.com/repos/antirez/redis/git/commits/60c448b58469ea08aaae16b5667788cbd8044516,60c448b58469ea08aaae16b5667788cbd8044516,"Cluster: Fix segfault if cluster config corrupt

This commit adds a size check after initial config
line parsing to make sure we have *at least* 8 arguments
per line.

Also, instead of asserting for cluster->myself, we just test
and error out normally (since the error does a hard exit anyway).

Closes #1597"
mattsta,2014-08-02 01:48:12,https://api.github.com/repos/antirez/redis/git/commits/879e18b7ec9728f52fb79eae99f8403ae3372096,879e18b7ec9728f52fb79eae99f8403ae3372096,"Fix memory leak in cluster config parsing

The continue stop us from triggering the
free after the long line for loop, so add it
earlier."
mattsta,2014-08-02 01:06:26,https://api.github.com/repos/antirez/redis/git/commits/82bac1b7297fa877f1b788f8d29ac6261616715a,82bac1b7297fa877f1b788f8d29ac6261616715a,"Remove unused global variable

It has an important name, but nothing uses it..."
antirez,2014-08-18 09:15:50,https://api.github.com/repos/antirez/redis/git/commits/a6edfceaa876ac6f21d7995aaf2380ab0eb50cbe,a6edfceaa876ac6f21d7995aaf2380ab0eb50cbe,Fix invalid expire error for SET family commands.
ccding,2013-01-13 22:21:06,https://api.github.com/repos/antirez/redis/git/commits/18ca831830b3fdcae0c3aade84c88d4204db6533,18ca831830b3fdcae0c3aade84c88d4204db6533,"Remove unused function

Closes #878"
dvdplm,2013-01-02 19:22:26,https://api.github.com/repos/antirez/redis/git/commits/100c3315be5faafbdaa3fdcc5f302a5d599f0cd0,100c3315be5faafbdaa3fdcc5f302a5d599f0cd0,"Extend range of bytesToHuman to TB and PB

Also adds a fallthrough case for when given
large values (like overflow numbers of 2^64 by mistake).

Closes #858"
yoav-steinberg,2012-12-30 22:44:30,https://api.github.com/repos/antirez/redis/git/commits/0a98b21f657b2bfc822619c33bb8f9991df742d6,0a98b21f657b2bfc822619c33bb8f9991df742d6,"Add error check for writing RDB checksum

Closes #857"
mattsta,2014-08-01 20:42:02,https://api.github.com/repos/antirez/redis/git/commits/6a7a32a806aa7a10239803293a04966d75409942,6a7a32a806aa7a10239803293a04966d75409942,Clarify existing slot wording on cluster start
antirez,2014-08-15 13:48:15,https://api.github.com/repos/antirez/redis/git/commits/c951c3ee5a12110f1c0c1270c45ab663c04e0f77,c951c3ee5a12110f1c0c1270c45ab663c04e0f77,"Fix undefined behavior in ll2string().

The bug was found by @CAFxX, thanks!
See issue #1940."
badboy,2014-08-13 17:31:57,https://api.github.com/repos/antirez/redis/git/commits/367035a9838695c1f17a78af0325de5ae6ec08fc,367035a9838695c1f17a78af0325de5ae6ec08fc,"Don't use extended Regexp Syntax

It's not POSIX (BSD systems have -E instead) and we don't actually need it.

Closes #1922"
antirez,2014-08-13 09:44:38,https://api.github.com/repos/antirez/redis/git/commits/edca2b14d213c31da9e7a919f6b898f3ea8abea8,edca2b14d213c31da9e7a919f6b898f3ea8abea8,Remove warnings and improve integer sign correctness.
antirez,2014-08-13 08:53:29,https://api.github.com/repos/antirez/redis/git/commits/7e3ccddc6d728250dd473c1ab4348d899ab69eb3,7e3ccddc6d728250dd473c1ab4348d899ab69eb3,Add -W to compilation flags.
antirez,2014-08-12 13:17:28,https://api.github.com/repos/antirez/redis/git/commits/68db7b1f564be07fa98f6102aefb33d941fc2cdc,68db7b1f564be07fa98f6102aefb33d941fc2cdc,"Use unsigned integers in SDS header.

This raises the max string to 4GB without any downside."
pietern,2013-07-11 04:12:46,https://api.github.com/repos/antirez/redis/git/commits/cf85b5ba812070442c450b5dbc6c5e12a6c0819b,cf85b5ba812070442c450b5dbc6c5e12a6c0819b,"va_copy must be matched by va_end

Hat tip to @rfuchs. See: https://github.com/redis/hiredis/pull/178.

Fixes #1187"
charsyam,2013-05-14 15:15:25,https://api.github.com/repos/antirez/redis/git/commits/3426866e0a62926e62143b9ede8880e48e51a038,3426866e0a62926e62143b9ede8880e48e51a038,"Remove duplicate prototypes in redis.h

Also moves acceptHandler() to be near the other accept...() functions.

Closes #1105"
NanXiao,2013-05-07 06:59:03,https://api.github.com/repos/antirez/redis/git/commits/951eefae3c7a318860fd78ac60ec0b4c77aab10f,951eefae3c7a318860fd78ac60ec0b4c77aab10f,"Use resolv library in Solaris

For some Solaris flavours, the inet_aton in in resolv library.
Not linking this library will introduce link error.

Improves compatability with older Solaris and still
works on new Solaris.

Closes #1092"
danielbprice,2013-03-12 01:04:40,https://api.github.com/repos/antirez/redis/git/commits/b57a4d07a210fd0c99d5a3cd286ffdcf9d639ad9,b57a4d07a210fd0c99d5a3cd286ffdcf9d639ad9,"Define AR to help with lua cross-compilation

Closes #997"
antirez,2014-08-08 13:52:04,https://api.github.com/repos/antirez/redis/git/commits/ded57795ff860d27d2889641d0fea9554df4a973,ded57795ff860d27d2889641d0fea9554df4a973,"representRedisNodeFlags() moved into right code section.

The funciton was also modified in order to be more standalone and
produce an output without trailing spaces, making the reuse simpler.
The global variable was renamed in cammel case as most other Redis
globals, except the main ones we refer too many times, like 'server'."
charsyam,2013-02-18 04:10:48,https://api.github.com/repos/antirez/redis/git/commits/de5465baf7f30b1040ae7e8c36ad8fec14edfea4,de5465baf7f30b1040ae7e8c36ad8fec14edfea4,"Refactor cluster flag printing

Less copy/paste code duplication.

Closes #952"
mattsta,2014-08-01 19:42:50,https://api.github.com/repos/antirez/redis/git/commits/da0132638f15d81782c5543ed49a1d1f17594d9d,da0132638f15d81782c5543ed49a1d1f17594d9d,"Cleanup double semicolons

Closes #1161"
hsb0818,2013-10-14 15:12:06,https://api.github.com/repos/antirez/redis/git/commits/dec58464d8d41f9438fcfaac07b71a8e4b7ac310,dec58464d8d41f9438fcfaac07b71a8e4b7ac310,"Free memory in clusterLoadConfig error handler

Closes #1327"
lamby,2013-07-11 11:45:15,https://api.github.com/repos/antirez/redis/git/commits/af62d9a687c7f61178c1fd8a4c7c9f1cc3d5083f,af62d9a687c7f61178c1fd8a4c7c9f1cc3d5083f,"redis-check-dump: Prevent segfault if can't malloc

Found by The Mayhem Team (Alexandre Rebert, Thanassis Avgerinos,
Sang Kil Cha, David Brumley, Manuel Egele) Cylab, Carnegie Mellon
University. See http://bugs.debian.org/716259 for more.

Signed-off-by: Chris Lamb <lamby@debian.org>

Fixes #1191"
charsyam,2013-05-25 10:22:24,https://api.github.com/repos/antirez/redis/git/commits/354119e4c50fbb3074f2d085300a1b399d4d89af,354119e4c50fbb3074f2d085300a1b399d4d89af,"Remove unused LINE_BUFLEN definition

Closes #1129"
mattsta,2014-08-01 18:55:24,https://api.github.com/repos/antirez/redis/git/commits/498ad7482b2eb4ebc6f4c7458fe6a35f244adaf6,498ad7482b2eb4ebc6f4c7458fe6a35f244adaf6,"Reject MOVE to non-integer DBs

Previously, ""MOVE key somestring"" would move the key to
DB 0 which is just unexpected and wrong.
String as DB == error.

Test added too.

Modified by @antirez in order to use the getLongLongFromObject() API
instead of strtol().

Fixes #1428"
mattsta,2014-08-01 17:57:30,https://api.github.com/repos/antirez/redis/git/commits/25791550e085930c196b9234465f6538fe8ee383,25791550e085930c196b9234465f6538fe8ee383,"pubsub: Return integers for NUMSUB, not strings

Also adds test for numsub — due to tcl being tcl,
it doesn't capture the ""numberness"" of the fix,
but now we at least have one test case for numsub.

Closes #1561"
alghak,2014-01-22 13:23:54,https://api.github.com/repos/antirez/redis/git/commits/4bb6844e4354738b1fc7400be016277e22fa585b,4bb6844e4354738b1fc7400be016277e22fa585b,"Avoid unnecessary decoding in ziplist.c

Closes #1519"
reflection,2013-12-09 18:18:36,https://api.github.com/repos/antirez/redis/git/commits/7e9f24d6940f0edba71f15f8606e58045a84ead0,7e9f24d6940f0edba71f15f8606e58045a84ead0,"Improve accuracy of HAVE_ATOMIC dependency check

[I had to split out the clang check due to
 clang *really* not liking the __GLIBC_PREREQ macro; -matt]

Closes #1456"
liexusong,2013-12-07 03:27:00,https://api.github.com/repos/antirez/redis/git/commits/a8d3e930bced31cc0f5211cc0874ca6f837faca0,a8d3e930bced31cc0f5211cc0874ca6f837faca0,"Remove redundant event loop fd processing

Reason:
https://github.com/antirez/redis/pull/1450#issuecomment-30432925

Closes #1450"
Joshua-Anderson,2014-03-17 03:22:36,https://api.github.com/repos/antirez/redis/git/commits/7a2450a7e5852beb29a923caf091161e06e39cc9,7a2450a7e5852beb29a923caf091161e06e39cc9,"src/Makefile: Reword ""to run make test"" message

Closes #1610"
cubicdaiya,2014-03-15 23:51:54,https://api.github.com/repos/antirez/redis/git/commits/23f08510d5c63a1936bced5a3aaf7ae4860090f9,23f08510d5c63a1936bced5a3aaf7ae4860090f9,"Use 'void' for zero-argument functions

According to the C standard,
it is desirable to give the type 'void'
to functions have no argument.

Closes #1631"
mattsta,2014-08-01 17:07:38,https://api.github.com/repos/antirez/redis/git/commits/8db020e2a1255a2595b5c4215271dcbad3b9aac2,8db020e2a1255a2595b5c4215271dcbad3b9aac2,"Fix assert technical correctness

dictAdd returns DICT_OK, not REDIS_OK. They both
have the same underlying values, so it works even though
the code is technically wrong.

Fixes #1512"
badboy,2014-05-07 16:25:10,https://api.github.com/repos/antirez/redis/git/commits/6df1251baa68d44ef27d6abff512c7286278502c,6df1251baa68d44ef27d6abff512c7286278502c,"install_server.sh: add missing bang

This was discovered by _bodya and reported in the IRC channel.
Everything worked fine as these scripts are always executed as shell
scripts.

Closes #1728"
edgarsi,2014-04-21 18:48:14,https://api.github.com/repos/antirez/redis/git/commits/67c4fbed8206cc091ff6a699c38cfa19e52eb005,67c4fbed8206cc091ff6a699c38cfa19e52eb005,"Change unixsocketperm comment to 700 from 755

According to unix manuals, ""Connecting to the socket object requires
read/write permission."" -- mode 755 is useless for anybody
other than the owner.

Fixes #1696"
kashif,2014-04-04 08:25:40,https://api.github.com/repos/antirez/redis/git/commits/c49378fe3e6f8900e753ff60a1b1f59e2e2c8755,c49378fe3e6f8900e753ff60a1b1f59e2e2c8755,"Fix issues raised by clang analyzer

Modified by @antirez since the original fix to genInfoString() looked
weak. Probably the clang analyzer complained about `section` being
possibly NULL, and strcasecmp() called with a NULL pointer. In the
practice this can never happen, still for the sake of correctness
the right fix is not to modify only the first call, but to set `section`
to the value of ""default"" if it happens to be NULL.

Closes #1660"
antirez,2014-08-07 14:32:50,https://api.github.com/repos/antirez/redis/git/commits/7bb25f8a46cafee90ba927d98141ccfa57e190df,7bb25f8a46cafee90ba927d98141ccfa57e190df,"Force quit when receiving a second SIGINT.

Also quit ASAP when we are still loading a DB, since care is not needed
in this special condition, especially for a SIGINT."
mattsta,2014-03-27 02:15:44,https://api.github.com/repos/antirez/redis/git/commits/d99a7246f805f20a99bd2fa428c10a64433e6e81,d99a7246f805f20a99bd2fa428c10a64433e6e81,Add graceful exit when Ctrl-C is received
mattsta,2014-08-01 17:01:33,https://api.github.com/repos/antirez/redis/git/commits/c82e0b701f86989711988dae8be97bdbe63395ba,c82e0b701f86989711988dae8be97bdbe63395ba,"Fix intset midpoint selection

The classic (min+max)/2 is provably unsafe.  Fixed
as recommended in research:
http://googleresearch.blogspot.com/2006/06/extra-extra-read-all-about-it-nearly.html

Fix inspired by @wjin, but I used a different approach.
(later, I found @kuebler fixed the same issue too).

Fixes #1741, #1602"
mattsta,2014-07-21 21:31:21,https://api.github.com/repos/antirez/redis/git/commits/87815ab5ba305770c0e6de7995b1688e55602589,87815ab5ba305770c0e6de7995b1688e55602589,"Fix key extraction for SORT

We only want to use the last STORE key, but we have to record
we actually found a STORE key so we can increment the final return
key count.

Test added to prevent further regression.

Closes #1883, #1645, #1647"
badboy,2014-06-29 10:32:06,https://api.github.com/repos/antirez/redis/git/commits/53fdfda9e3316a5763c78569fa74bf42e1c4b3a7,53fdfda9e3316a5763c78569fa74bf42e1c4b3a7,"Handle large getrange requests

Previously the end was casted to a smaller type
which resulted in a wrong check and failed
with values larger than handled by unsigned.

Closes #1847, #1844"
mattsta,2014-06-29 02:20:44,https://api.github.com/repos/antirez/redis/git/commits/f17f8521f005321d3e163ed83ec2fa9f1b925b0f,f17f8521f005321d3e163ed83ec2fa9f1b925b0f,"scripting: no eval with negative key count

Negative key count causes segfault in Lua functions.

Fixes #1842
Closes #1843"
kingsumos,2014-06-09 18:32:27,https://api.github.com/repos/antirez/redis/git/commits/1a5e5b6bd44eb106dcb7114a8f22dda4b475238d,1a5e5b6bd44eb106dcb7114a8f22dda4b475238d,"cluster: fix node connection memory leak

Cluster leaks memory while connecting due to missing freeaddrinfo()

(Commit modified by @antirez. The freeaddrinfo() call was misplaced so
 in case of no address was bound, the memory leak was still there).

Closes #1801"
badboy,2014-05-22 22:26:40,https://api.github.com/repos/antirez/redis/git/commits/05676c5d1614ad894a1ff77d941b83732739046e,05676c5d1614ad894a1ff77d941b83732739046e,"redis-cli: fix latency result output

(Cleaned up a little by @mattsta)

Closes #1774"
wjin,2014-05-12 12:55:54,https://api.github.com/repos/antirez/redis/git/commits/5b3930655fc8aa68d7cd7ae58b32ff8874476e30,5b3930655fc8aa68d7cd7ae58b32ff8874476e30,"Remove redundant else/return block

Fixes #1741"
antirez,2014-08-07 10:14:21,https://api.github.com/repos/antirez/redis/git/commits/9756f61fda6397da0c57bbe353fc0d144a51aaea,9756f61fda6397da0c57bbe353fc0d144a51aaea,"Clarify AIX ""#undef hz""."
siahh,2014-07-29 21:39:37,https://api.github.com/repos/antirez/redis/git/commits/009cabf1031db42271a1e05980965a129cbbfe1d,009cabf1031db42271a1e05980965a129cbbfe1d,"Add support for compiling on AIX

Closes #1900"
mattsta,2014-08-01 16:05:04,https://api.github.com/repos/antirez/redis/git/commits/426553164d6807e67999101cec95d2afb7aaa3d7,426553164d6807e67999101cec95d2afb7aaa3d7,"redis-cli: Add --no-raw option

Some people need formatted output even when they have no
interactive tty.

Fixes #760"
mattsta,2014-08-01 15:44:28,https://api.github.com/repos/antirez/redis/git/commits/0042fb0eb09aceb279f073d84bbc05068ea5e3ff,0042fb0eb09aceb279f073d84bbc05068ea5e3ff,"redis-cli: stop showing incorrectly selected DB

Previously redis-cli would happily show ""-1"" or ""99999""
as valid DB choices.

Now, if the SELECT call returned an error, we don't update
the DB number in the CLI.

Inspired by @anupshendkar in #1313

Fixes #566, #1313"
mattsta,2014-03-29 03:08:56,https://api.github.com/repos/antirez/redis/git/commits/bbc1cd0bd9cb50e0734a98d066ccc7d0171fc652,bbc1cd0bd9cb50e0734a98d066ccc7d0171fc652,"redis-cli: Re-attach selected DB after auth

Previously, if you did SELECT then AUTH, redis-cli
would show your SELECT'd db even though it didn't
happen.

Note: running into this situation is a (hopefully) very limited
used case of people using multiple DBs and AUTH all at the same
time.

Fixes antirez#1639"
antirez,2014-07-28 12:45:31,https://api.github.com/repos/antirez/redis/git/commits/78a012d81a0f487b92b2b79a91de1f28697100e8,78a012d81a0f487b92b2b79a91de1f28697100e8,"Merge pull request #1896 from yossigo/bgsave-signal-fix

Fail SYNC if background save child aborted due to a signal."
yossigo,2014-07-28 11:43:30,https://api.github.com/repos/antirez/redis/git/commits/a75a57414120426012f49983cbe2b6f7f48ae741,a75a57414120426012f49983cbe2b6f7f48ae741,Fail SYNC if background save child aborted due to a signal.
veselov,2014-07-28 03:14:39,https://api.github.com/repos/antirez/redis/git/commits/c90af7cd14214e35d3a570d6619e30e965f692d6,c90af7cd14214e35d3a570d6619e30e965f692d6,* fixed doc URL for keyspace events
antirez,2014-07-28 10:49:04,https://api.github.com/repos/antirez/redis/git/commits/f231edc672830143324bfffa70b176883e43fe2d,f231edc672830143324bfffa70b176883e43fe2d,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2014-07-28 10:48:51,https://api.github.com/repos/antirez/redis/git/commits/ddd9fd417eb77db3ed25a4fde690d0d642d20938,ddd9fd417eb77db3ed25a4fde690d0d642d20938,"Cluster test: unit 07, replicas migration."
antirez,2014-07-28 10:35:05,https://api.github.com/repos/antirez/redis/git/commits/75b92fe7c456acb6660a7d30f06e7b12b13a3f38,75b92fe7c456acb6660a7d30f06e7b12b13a3f38,Cluster test: unit 06 cluster creation comment fixed.
antirez,2014-07-28 07:37:41,https://api.github.com/repos/antirez/redis/git/commits/d76c663dfe68f73489d145fd0d64b2e0e2dedff6,d76c663dfe68f73489d145fd0d64b2e0e2dedff6,"Merge pull request #1895 from mattrobenolt/patch-1

Fix spelling of ""stand alone"" in ascii art"
mattrobenolt,2014-07-28 07:30:12,https://api.github.com/repos/antirez/redis/git/commits/0f8df3df417a22ce8f34e4c21b09f8ff5eb60320,0f8df3df417a22ce8f34e4c21b09f8ff5eb60320,"Fix spelling of ""stand alone"" in ascii art

Also unified the logic to match `genRedisInfoString`"
antirez,2014-07-25 14:17:13,https://api.github.com/repos/antirez/redis/git/commits/351ad518b3744b22ef2a219c5bd67a234c63a003,351ad518b3744b22ef2a219c5bd67a234c63a003,Cluster test: node reachability condition fixed.
antirez,2014-07-25 14:10:18,https://api.github.com/repos/antirez/redis/git/commits/628c5641c031a6208850f9395c6a5ec5832130ee,628c5641c031a6208850f9395c6a5ec5832130ee,"Cluster test: init test, be patient during restarts."
antirez,2014-07-25 14:09:31,https://api.github.com/repos/antirez/redis/git/commits/0d35b467610baa39d23f76049cba0f09f54db0d4,0d35b467610baa39d23f76049cba0f09f54db0d4,"Cluster test: 03 unit speedup, don't send WAIT to slaves."
antirez,2014-07-25 13:40:25,https://api.github.com/repos/antirez/redis/git/commits/ad87ec4fb750283663e2733376e74707e540976e,ad87ec4fb750283663e2733376e74707e540976e,"Cluster test: unit 06, slaves with stale data can't failover."
antirez,2014-07-25 12:20:23,https://api.github.com/repos/antirez/redis/git/commits/49c817c2502ee98a770ae93c4479681cef27a790,49c817c2502ee98a770ae93c4479681cef27a790,Example redis.conf: improve slaveof description.
antirez,2014-07-25 09:23:51,https://api.github.com/repos/antirez/redis/git/commits/c22fc1ac6f5fe77b13a4cba41e57701d8d424c8d,c22fc1ac6f5fe77b13a4cba41e57701d8d424c8d,"Cluster test: new unit 05, slave selection."
antirez,2014-07-25 09:02:09,https://api.github.com/repos/antirez/redis/git/commits/0d9bcb1c12b73ea3835528a02a142cb6ec681a84,0d9bcb1c12b73ea3835528a02a142cb6ec681a84,"Cluster: don't migrate to a master that never had slaves.

Replica migration algorithm modified so that slaves never try to migrate
to masters that were never configured to have slaves in the past.
We want the algorithm to take care of masters that remained without
*working* slaves, but that used to have slaves according to the cluster
configuration."
antirez,2014-07-23 16:01:51,https://api.github.com/repos/antirez/redis/git/commits/7eb47ae290a05403972ebacffb173a67a6bafabe,7eb47ae290a05403972ebacffb173a67a6bafabe,Fix util.c compilation by including stdint.h.
antirez,2014-06-24 13:45:03,https://api.github.com/repos/antirez/redis/git/commits/0ce352c19f296c37893f5f506af3c4fa7f496d37,0ce352c19f296c37893f5f506af3c4fa7f496d37,"Faster ll2string() implementation.

Based on ideas documented in this blog post:

https://www.facebook.com/notes/facebook-engineering/three-optimization-tips-for-c/10151361643253920

The original code was modified to handle signed integers, reformetted to
fit inside the Redis code base, and was stress-tested with a program
in order to validate the implementation against snprintf().

Redis was measured to be measurably faster from the point of view of
clients in real-world operations because of this change, since sometimes
number to string conversion is used extensively (for example every time
a GET results into an integer encoded object to be returned to the
user)."
antirez,2014-07-23 09:43:57,https://api.github.com/repos/antirez/redis/git/commits/0adf4482f0d3ee036bf9babd66f3974493a6b0e1,0adf4482f0d3ee036bf9babd66f3974493a6b0e1,"PFSELFTEST: less false positives.

This is just a quickfix, for the nature of the test the right way to fix
it is to average the error of N runs, since otherwise it is always
possible to get a false positive with a bad run, or to minimize too much
this possibility we may end testing with too much ""large"" error ranges."
antirez,2014-07-22 15:52:04,https://api.github.com/repos/antirez/redis/git/commits/b9bb7e2d4a7a8499ad7ef356c29b2adaa6901b29,b9bb7e2d4a7a8499ad7ef356c29b2adaa6901b29,"Test: check sorted set elements order after union.

This is not a regression but issue #1786 showed the need for this test."
antirez,2014-06-06 16:59:17,https://api.github.com/repos/antirez/redis/git/commits/d74e422b5e1f43139dc0ffa344c7eddbe32d7e7d,d74e422b5e1f43139dc0ffa344c7eddbe32d7e7d,Remove useless var and check in zunionInterGenericCommand().
antirez,2014-06-06 16:04:04,https://api.github.com/repos/antirez/redis/git/commits/119813e96845d9e8b3e4eddd1a950372158c2229,119813e96845d9e8b3e4eddd1a950372158c2229,"ZUNIONSTORE reimplemented for speed.

The user @kjmph provided excellent ideas to improve speed of ZUNIONSTORE
(in certain cases by many order of magnitude), together with an
implementation of the ideas.

While the ideas were sounding, the implementation could be improved both
in terms of speed and clearness, so that's my attempt at reimplementing
the speedup proposed, trying to improve by directly using just a
dictionary with an embedded score inside, and reusing the single-pass
aggregate + order-later approach.

Note that you can't apply this commit without applying the previous
commit in this branch that adds a double in the dictEntry value union.

Issue #1786."
antirez,2014-06-06 13:32:21,https://api.github.com/repos/antirez/redis/git/commits/d1cb6a0fc40a63238e3090c5ac5c6334a4a1af1f,d1cb6a0fc40a63238e3090c5ac5c6334a4a1af1f,Add double field in dict.c entry value union.
antirez,2014-07-22 13:29:57,https://api.github.com/repos/antirez/redis/git/commits/89af463124f303b1d681aa4b29623385a1442f94,89af463124f303b1d681aa4b29623385a1442f94,"CLUSTER RESET: Flush dataset if node is a slave.

For non-empty masters, CLUSTER RESET is denied, and the user requires to
start to reset a node by explicitly clearing it with FLUSHALL.
However CLUSTER RESET when executed with slaves don't have this
restrictions since data is just a replica of the master, and with
read-only slaves it is also not possible to remove the data set. However
the node was turned from slave to master after a reset, without touching
the old slave data. This is 99.99% of times not appropriate and forces
full resets to follow this path to work with both slave and master
nodes:

    FLUSHALL
    CLUSTER RESET HARD
    FLUSHALL

Since we need the first flushall for masters, and the second for slaves.

This commit changes the behavior so that CLUSTER RESET removes the data set
of a slave node during a reset, in the moment it gets turned into a master,
so the new pattern is simply:

    FLUSHALL (that may fail for slaves)
    CLUSTER RESET"
antirez,2014-07-21 14:29:49,https://api.github.com/repos/antirez/redis/git/commits/10088d5087e46342f836e0d16f3eaae134f666b9,10088d5087e46342f836e0d16f3eaae134f666b9,Cluster test: use larger keyspace in resharding test.
antirez,2014-07-21 14:26:05,https://api.github.com/repos/antirez/redis/git/commits/54f1c682e6fdeefc4cc711258d2f7ab66e59d46c,54f1c682e6fdeefc4cc711258d2f7ab66e59d46c,"Cluster test: unit 04, consistency during resharding."
antirez,2014-07-21 13:30:25,https://api.github.com/repos/antirez/redis/git/commits/15336ffe867d5028447486dab02ebece3b9c37e1,15336ffe867d5028447486dab02ebece3b9c37e1,Cluster: fix redis-trib --from all.
antirez,2014-07-18 15:43:49,https://api.github.com/repos/antirez/redis/git/commits/73a809b1591378e1042a1028d0b8e10217e6e7c7,73a809b1591378e1042a1028d0b8e10217e6e7c7,"redis-trib: allow to reshard in non-interactive way.

The introduction of --from --to --slots --yes options allow to reshard
from cli in an automated way from scripts. The code is ugly and needs
refactoring as soon as we get it in RC / stable release."
antirez,2014-07-18 15:13:46,https://api.github.com/repos/antirez/redis/git/commits/8d4ff87b26772300e0d584c360edb17763d69a68,8d4ff87b26772300e0d584c360edb17763d69a68,"Cluster test: test that writes are retained during failovers.

In the test we use WAIT when the master and slave are up, and only later the
partition is created killing the master, so we are sure we don't incur
in failure modes that may lose writes in this test: the goal here is to
make sure that the elected slave was replicating correctly with the
master."
antirez,2014-07-18 10:03:31,https://api.github.com/repos/antirez/redis/git/commits/509c888dfa59c62648f9d138364615aff12983c9,509c888dfa59c62648f9d138364615aff12983c9,Test: Pub/Sub PING.
antirez,2014-07-18 08:55:08,https://api.github.com/repos/antirez/redis/git/commits/420584a46d757f22525682ecbb9e41b7b410d03a,420584a46d757f22525682ecbb9e41b7b410d03a,Test: small integer sharing depends on maxmemory policy.
antirez,2014-07-18 08:15:51,https://api.github.com/repos/antirez/redis/git/commits/6b9b958e00c8a0eff64af255f790ee5bea40f197,6b9b958e00c8a0eff64af255f790ee5bea40f197,PING: backward compatible error for wrong number of args.
antirez,2014-07-18 08:09:51,https://api.github.com/repos/antirez/redis/git/commits/b3c042cdb2acfd9d33c8820763f9156789dc97ee,b3c042cdb2acfd9d33c8820763f9156789dc97ee,"tryObjectEncoding(): use shared objects with maxmemory and non-LRU policy.

In order to make sure every object has its own private LRU counter, when
maxmemory is enabled tryObjectEncoding() does not use the pool of shared
integers. However when the policy is not LRU-based, it does not make
sense to do so, and it is much better to save memory using shared
integers."
antirez,2014-07-16 15:47:17,https://api.github.com/repos/antirez/redis/git/commits/27839e5ecb562d9b79e740e2e20f7a6db7270a66,27839e5ecb562d9b79e740e2e20f7a6db7270a66,"Variadic PING with support for Pub/Sub.

PING can now be called with an additional arugment, behaving exactly
like the ECHO command. PING can now also be called in Pub/Sub mode (with
one more more subscriptions to channels / patterns) in order to trigger
the delivery of an asynchronous pong message with the optional payload.

This fixes issue #420."
antirez,2014-07-16 15:34:07,https://api.github.com/repos/antirez/redis/git/commits/59cf0824d9e424af0477a133ce700ee76f39f81a,59cf0824d9e424af0477a133ce700ee76f39f81a,"PubSub clients refactoring and new PUBSUB flag.

The code tested many times if a client had active Pub/Sub subscriptions
by checking the length of a list and dictionary where the patterns and
channels are stored. This was substituted with a client flag called
REDIS_PUBSUB that is simpler to test for. Moreover in order to manage
this flag some code was refactored.

This commit is believed to have no effects in the behavior of the
server."
antirez,2014-07-16 09:36:22,https://api.github.com/repos/antirez/redis/git/commits/c7822bf38287596a39ea0dfd99654d4680b15d3e,c7822bf38287596a39ea0dfd99654d4680b15d3e,RDB: load string objects directly as EMBSTR objects when possible.
antirez,2014-07-14 13:37:33,https://api.github.com/repos/antirez/redis/git/commits/9e7e0cd613d9045a74a6050cb2935613f4a38533,9e7e0cd613d9045a74a6050cb2935613f4a38533,"Merge pull request #1870 from michael-grunder/object_arity

Fix OBJECT arity"
michael-grunder,2014-07-11 20:03:26,https://api.github.com/repos/antirez/redis/git/commits/ce8a68b1fdf5c26d06d2e2972109881bd16e6856,ce8a68b1fdf5c26d06d2e2972109881bd16e6856,"Fix OBJECT arity

Previously, the command definition for the OBJECT command specified
a minimum of two args (and that it was variadic), which meant that
if you sent this:

OBJECT foo

When cluster was enabled, it would result in an assertion/SEGFAULT
when Redis was attempting to extract keys.

It appears that OBJECT is not variadic, and only ever takes 3 args.

https://gist.github.com/michael-grunder/25960ce1508396d0d36a"
antirez,2014-07-11 08:57:28,https://api.github.com/repos/antirez/redis/git/commits/6382936ebcffb893e6f404bdafb058ed3150f8ec,6382936ebcffb893e6f404bdafb058ed3150f8ec,Fix typo in LATENCY DOCTOR output.
antirez,2014-07-10 14:42:43,https://api.github.com/repos/antirez/redis/git/commits/3bf72d0d5fb032e7d4b6beaaae8b70b2cb23fa6b,3bf72d0d5fb032e7d4b6beaaae8b70b2cb23fa6b,Test: more reliable AOF rewrite test under write load.
antirez,2014-07-10 14:23:48,https://api.github.com/repos/antirez/redis/git/commits/a94aa39c86706e3f1eca5a3ff8b647cc0fc9a53c,a94aa39c86706e3f1eca5a3ff8b647cc0fc9a53c,LATENCY command / monitor basic tests.
antirez,2014-07-10 14:20:40,https://api.github.com/repos/antirez/redis/git/commits/0dcc754f6863a792e3598850237ae3e30463e08d,0dcc754f6863a792e3598850237ae3e30463e08d,"LATENCY HISTORY returns empty array if no data is available.

Previously we returned an error."
antirez,2014-07-10 13:04:34,https://api.github.com/repos/antirez/redis/git/commits/79d2f70f5cbfde6235890761d8bc9b6515883836,79d2f70f5cbfde6235890761d8bc9b6515883836,"Test: enable latency monitor in the default config.

This way as a side effect of running the test we also stress the latency
monitor data collection."
antirez,2014-07-10 09:24:59,https://api.github.com/repos/antirez/redis/git/commits/e01195e90d1afd52b62071029cea5702eba4c3c3,e01195e90d1afd52b62071029cea5702eba4c3c3,Test: AOF rewrite during write load.
antirez,2014-07-09 14:45:40,https://api.github.com/repos/antirez/redis/git/commits/067e365042f8d26feff0bf06f8caff1bd9abbbce,067e365042f8d26feff0bf06f8caff1bd9abbbce,Fixed a few missing newline in createLatencyReport().
antirez,2014-07-08 15:17:02,https://api.github.com/repos/antirez/redis/git/commits/fda2b303469c35764601bd75516149465f58f786,fda2b303469c35764601bd75516149465f58f786,createLatencyReport(): compile before commit avoids commits.
antirez,2014-07-08 15:12:21,https://api.github.com/repos/antirez/redis/git/commits/924dc9731f91ced699a4a05987c66b33f669b06f,924dc9731f91ced699a4a05987c66b33f669b06f,"createLatencyReport(), fix mount option name."
antirez,2014-07-08 15:11:56,https://api.github.com/repos/antirez/redis/git/commits/51e01c0450c2b985a03a34f46e19b0d0ec67176a,51e01c0450c2b985a03a34f46e19b0d0ec67176a,createLatencyReport(): initialize all advices to zero.
antirez,2014-07-08 15:05:56,https://api.github.com/repos/antirez/redis/git/commits/7fb90a670e27748ad0a8b21174936eea2f997cef,7fb90a670e27748ad0a8b21174936eea2f997cef,LATENCY DOCTOR first implementation complete.
antirez,2014-07-08 10:56:45,https://api.github.com/repos/antirez/redis/git/commits/57e931debc3267570ac4ef5cf5ae2dc0bcb3272f,57e931debc3267570ac4ef5cf5ae2dc0bcb3272f,Fix analyzeLatencyForEvent() MAD computation.
antirez,2014-07-08 09:31:46,https://api.github.com/repos/antirez/redis/git/commits/2a232dfa9a9e00a5abcb4a0f02bf5db55590f17e,2a232dfa9a9e00a5abcb4a0f02bf5db55590f17e,LATENCY DOCTOR: initial draft and events summary output.
antirez,2014-07-07 12:59:57,https://api.github.com/repos/antirez/redis/git/commits/19853db892aa10a8b00a561b7dc1d48f7176ee38,19853db892aa10a8b00a561b7dc1d48f7176ee38,Latency: low level time series analysis implemented.
antirez,2014-07-07 10:35:24,https://api.github.com/repos/antirez/redis/git/commits/b2604dc58c69f357a66df54067eec33a4f262cc9,b2604dc58c69f357a66df54067eec33a4f262cc9,LATENCY SAMPLES renamed LATENCY HISTORY.
antirez,2014-07-07 10:34:54,https://api.github.com/repos/antirez/redis/git/commits/f8934657b2c568be46e896627ea2c51eb16aa455,f8934657b2c568be46e896627ea2c51eb16aa455,LATENCY RESET implemented.
antirez,2014-07-05 13:40:08,https://api.github.com/repos/antirez/redis/git/commits/2de5bab368fc1ed7630935df8762e3a2679b3453,2de5bab368fc1ed7630935df8762e3a2679b3453,"Better ""final read from parent"" algorithm in rewriteAppendOnlyFile*(.

We now wait up to 1 second for diff data to come from the parent,
however we use poll(2) to wait for more data, and use a counter of
contiguous failures to get data for N times (set to 20 experimentally
after different tests) as an early stop condition to avoid wasting 1
second when the write traffic is too low."
antirez,2014-07-05 10:37:44,https://api.github.com/repos/antirez/redis/git/commits/895409ca784c38a15719fb6d6a94575212fbc136,895409ca784c38a15719fb6d6a94575212fbc136,Log AOF diff sizes in MBs instead of bytes.
antirez,2014-07-04 23:11:28,https://api.github.com/repos/antirez/redis/git/commits/93cd75bbe084f5d94bbf6216200820ff0b2785fe,93cd75bbe084f5d94bbf6216200820ff0b2785fe,aofChildWriteDiffData() better handling of free blocks.
antirez,2014-07-04 15:52:14,https://api.github.com/repos/antirez/redis/git/commits/ac33c049c647cbe09b424cff5755504fddc0b4c7,ac33c049c647cbe09b424cff5755504fddc0b4c7,redis-benchmark: abort when all clients are disconnected.
antirez,2014-07-04 15:51:03,https://api.github.com/repos/antirez/redis/git/commits/20a0959964b9214fab02556f11ef3aad95f77333,20a0959964b9214fab02556f11ef3aad95f77333,Fine tuning of aofReadDiffFromParent() calls trigger.
antirez,2014-07-04 14:03:46,https://api.github.com/repos/antirez/redis/git/commits/cc24447a1a9c05b04b369106776d01e95c91c4c9,cc24447a1a9c05b04b369106776d01e95c91c4c9,Use amount of I/O not ops to trigger aofReadDiffFromParent().
antirez,2014-07-04 13:54:20,https://api.github.com/repos/antirez/redis/git/commits/62f9d34c5625e356c4376868def8a6458479f09f,62f9d34c5625e356c4376868def8a6458479f09f,aofChildWriteDiffData(): write as much as possible.
antirez,2014-07-04 13:37:40,https://api.github.com/repos/antirez/redis/git/commits/30c42f12b098a5e44fe7f517ba0a47e5c4b5e588,30c42f12b098a5e44fe7f517ba0a47e5c4b5e588,Handle write failure in AOF parent -> child ACK.
antirez,2014-07-04 13:35:01,https://api.github.com/repos/antirez/redis/git/commits/75ef41058dc20ca913f25f3edf513ea41cb72ed0,75ef41058dc20ca913f25f3edf513ea41cb72ed0,Use a timeout when reading parent ack from AOF child.
antirez,2014-07-04 13:22:49,https://api.github.com/repos/antirez/redis/git/commits/2fa9fb647f24362a33c95e057826a70e7c433d82,2fa9fb647f24362a33c95e057826a70e7c433d82,Send AOF diffs from parent to child to improve latency.
antirez,2014-07-04 09:51:30,https://api.github.com/repos/antirez/redis/git/commits/57852ff207bbd9d1b4c2f365b8736bbbc42728b6,57852ff207bbd9d1b4c2f365b8736bbbc42728b6,"Use fsync instead of aof_fsync in final AOF sync.

This happens in the child process so we don't care about latency:
better to sync metadata as well."
antirez,2014-07-02 15:42:29,https://api.github.com/repos/antirez/redis/git/commits/a99766fda1ef6a2594c51fc57080ac1725d0672c,a99766fda1ef6a2594c51fc57080ac1725d0672c,Fixed conditional for aof-write-pending-fsync latency event selection.
antirez,2014-07-02 15:04:14,https://api.github.com/repos/antirez/redis/git/commits/f0f9d583add3f37433b0ff84cc1c8491ac8e2713,f0f9d583add3f37433b0ff84cc1c8491ac8e2713,Dependencies updated.
antirez,2014-07-02 14:56:08,https://api.github.com/repos/antirez/redis/git/commits/1f665d6e82bb11454d239e676cfcb96e29651291,1f665d6e82bb11454d239e676cfcb96e29651291,Cast void* to char* to avoid waring in latencyCommand().
antirez,2014-07-02 14:55:34,https://api.github.com/repos/antirez/redis/git/commits/e3c0125b70476fa256a7b09acf11344a81f3a8d5,e3c0125b70476fa256a7b09acf11344a81f3a8d5,Properly initialize min/max in latency.c.
antirez,2014-07-02 14:53:44,https://api.github.com/repos/antirez/redis/git/commits/a887af34e1b0146d05b374effc27d4a9e2e11d31,a887af34e1b0146d05b374effc27d4a9e2e11d31,latencyStartMonitor() modified to avoid warnings.
antirez,2014-07-02 14:45:45,https://api.github.com/repos/antirez/redis/git/commits/53ae687d594890e5f6b93a9f2c3e5aa2199615ae,53ae687d594890e5f6b93a9f2c3e5aa2199615ae,Latency monitor: specialize delayed aof writes events.
antirez,2014-07-02 14:37:53,https://api.github.com/repos/antirez/redis/git/commits/a53c7340947886b434719dd050d63dd705339cd5,a53c7340947886b434719dd050d63dd705339cd5,LATENCY GRAPH: filling under the curve is more readable.
antirez,2014-07-02 14:31:22,https://api.github.com/repos/antirez/redis/git/commits/aa16f87b87a71f6d70e8f43d62550913f18b64fa,aa16f87b87a71f6d70e8f43d62550913f18b64fa,LATENCY GRAPH implemented.
antirez,2014-07-02 14:14:28,https://api.github.com/repos/antirez/redis/git/commits/6f20482a8695d8f8313caea11927a39ce1c5fdb7,6f20482a8695d8f8313caea11927a39ce1c5fdb7,latencyTimeSeries structure max field type fixed.
antirez,2014-07-02 10:49:14,https://api.github.com/repos/antirez/redis/git/commits/9d4d810861c64106b9ba5d1a8d8e6241b8de469e,9d4d810861c64106b9ba5d1a8d8e6241b8de469e,Free labels in freeSparklineSequence().
antirez,2014-07-02 10:40:38,https://api.github.com/repos/antirez/redis/git/commits/1766d91697cae7f28b50f7ec3347b7789549c35f,1766d91697cae7f28b50f7ec3347b7789549c35f,LATENCY LATEST: add the max field.
antirez,2014-07-02 10:27:24,https://api.github.com/repos/antirez/redis/git/commits/e173f7a0e318156efbaefa4e27b02b1da008a337,e173f7a0e318156efbaefa4e27b02b1da008a337,"Latency monitor trheshold value is now configurable.

This commit adds both support for redis.conf and CONFIG SET/GET."
antirez,2014-07-02 08:13:53,https://api.github.com/repos/antirez/redis/git/commits/cc4df5a6b8b62482dfc3f827d495883db0a1f17f,cc4df5a6b8b62482dfc3f827d495883db0a1f17f,ASCII sparklines generation API.
antirez,2014-07-02 08:06:58,https://api.github.com/repos/antirez/redis/git/commits/ed4980243a4f98212d79b8f04432c9c80752bc43,ed4980243a4f98212d79b8f04432c9c80752bc43,License added to latency.h.
antirez,2014-07-01 15:23:59,https://api.github.com/repos/antirez/redis/git/commits/b809676a9e6b61029d542a1a165385946c55a3fc,b809676a9e6b61029d542a1a165385946c55a3fc,"Latency monitor turned off by default.

It is not a good idea to bloat the code with gettimeofday() calls if the
instance is working well, and turning monitoring on at runtime is a
joke."
antirez,2014-07-01 15:19:08,https://api.github.com/repos/antirez/redis/git/commits/de88bc63d5eff769a385b1e51bba75997a969177,de88bc63d5eff769a385b1e51bba75997a969177,Latency monitor: more hooks around the code.
antirez,2014-07-01 15:12:09,https://api.github.com/repos/antirez/redis/git/commits/f35abe2ff5d7f0389991aee1d6b4ccec8cb8ecf9,f35abe2ff5d7f0389991aee1d6b4ccec8cb8ecf9,"Latency monitor: don't add new samples in the same second.

Instead we update the old sample with the new latency if it is greater."
antirez,2014-07-01 14:17:33,https://api.github.com/repos/antirez/redis/git/commits/83beaa886cd33e2b08ffb193be27faf7403024ea,83beaa886cd33e2b08ffb193be27faf7403024ea,LATENCY LATEST implemented.
antirez,2014-07-01 14:09:02,https://api.github.com/repos/antirez/redis/git/commits/753b707d2ad15a4d6588f94ac82ff22b0567d052,753b707d2ad15a4d6588f94ac82ff22b0567d052,Latency monitor: command duration is in useconds. Convert.
antirez,2014-07-01 14:04:59,https://api.github.com/repos/antirez/redis/git/commits/551bee86b42e7c41c9cd550795685eb20b207b88,551bee86b42e7c41c9cd550795685eb20b207b88,LATENCY SAMPLES implemented.
antirez,2014-07-01 09:43:38,https://api.github.com/repos/antirez/redis/git/commits/8612e6de888fe30bd8cfcd0f4ad1979a92434a2f,8612e6de888fe30bd8cfcd0f4ad1979a92434a2f,"Latency monitor: collect slow commands.

We introduce the distinction between slow and fast commands since those
are two different sources of latency. An O(1) or O(log N) command without
side effects (can't trigger deletion of large objects as a side effect of
its execution) if delayed is a symptom of inherent latency of the system.

A non-fast command (commands that may run large O(N) computations) if
delayed may just mean that the user is executing slow operations.

The advices LATENCY should provide in this two different cases are
different, so we log the two classes of commands in a separated way."
antirez,2014-07-01 09:30:15,https://api.github.com/repos/antirez/redis/git/commits/d7a07a20121b409bcba47deb1c0eb9f41c2e8f0f,d7a07a20121b409bcba47deb1c0eb9f41c2e8f0f,Latency monitor: basic samples collection.
antirez,2014-06-30 14:28:22,https://api.github.com/repos/antirez/redis/git/commits/0afb7a48c079c083d4efaaec99168538c536c49d,0afb7a48c079c083d4efaaec99168538c536c49d,"Fix Solaris compilation due to ctime_r() call.

Introduced in Redis 2.8.10 because of a change in Sentinel.
This closes issue #1837."
antirez,2014-06-30 10:07:26,https://api.github.com/repos/antirez/redis/git/commits/54157bc49ebf7b49a1d2a95c7b09b4e3ce56e2a6,54157bc49ebf7b49a1d2a95c7b09b4e3ce56e2a6,"Test: find_available_port: check that cluster port is free as well.

The function will only return ports that have also port+10000 free, so
that Redis Cluster instances can be executed at the returned port."
antirez,2014-06-30 09:54:13,https://api.github.com/repos/antirez/redis/git/commits/612bc784fca7ca83d6267a5d407daee9d5996b89,612bc784fca7ca83d6267a5d407daee9d5996b89,Test: fix instances.tcl restart_instance abort error.
antirez,2014-06-27 10:22:15,https://api.github.com/repos/antirez/redis/git/commits/683f41adf27864987983c6fb4535a8568c288f86,683f41adf27864987983c6fb4535a8568c288f86,DEBUG CMDKEYS moved to COMMAND GETKEYS.
antirez,2014-06-27 10:11:15,https://api.github.com/repos/antirez/redis/git/commits/885b6fc577531b4bb1319ce4a66710b62fa68c84,885b6fc577531b4bb1319ce4a66710b62fa68c84,COMMAND COUNT subcommand added.
antirez,2014-06-27 10:05:54,https://api.github.com/repos/antirez/redis/git/commits/a92ae7774052ebdb305249ac548d5ed4f7887b82,a92ae7774052ebdb305249ac548d5ed4f7887b82,"COMMAND: fix argument parsing.

This fixes detection of wrong subcommand (that resulted in the default
all-commands output instead) and allows COMMAND INFO to be called
without arguments (resulting into an empty array) which is useful in
programmtically generated calls like the following (in Ruby):

    redis.commands(""command"",""info"",*mycommands)

Note: mycommands may be empty."
antirez,2014-06-27 10:01:29,https://api.github.com/repos/antirez/redis/git/commits/7fd0149d3401e9f173097cf1f39b467dd491bdcd,7fd0149d3401e9f173097cf1f39b467dd491bdcd,COMMANDS command renamed COMMAND.
antirez,2014-06-27 09:59:48,https://api.github.com/repos/antirez/redis/git/commits/9bf6921f3d8d26c3e330b6646b9e6752dfc0a086,9bf6921f3d8d26c3e330b6646b9e6752dfc0a086,"COMMANDS command: remove static + aesthetic changes.

Static was removed since it is needed in order to get symbols in stack
traces. Minor changes in the source code were operated to make it more
similar to the existing Redis code base."
mattsta,2014-06-17 03:35:45,https://api.github.com/repos/antirez/redis/git/commits/183458f76a0ef579eec3bd8ec1652062fbb111d6,183458f76a0ef579eec3bd8ec1652062fbb111d6,"Cluster: Add COMMANDS command

COMMANDS returns a nested multibulk reply for each
command in the command table.  The reply for each
command contains:
  - command name
  - arity
  - array of command flags
  - start key position
  - end key position
  - key offset step
  - optional: if the keys are not deterministic and
    Redis uses an internal key evaluation function,
    the 6th field appears and is defined as a status
    reply of: REQUIRES ARGUMENT PARSING

Cluster clients need to know where the keys are in each
command to implement proper routing to cluster nodes.

Redis commands can have multiple keys, keys at offset steps, or other
issues where you can't always assume the first element after
the command name is the cluster routing key.

Using the information exposed by COMMANDS, client implementations
can have live, accurate key extraction details for all commands.

Also implements COMMANDS INFO [commands...] to return only a
specific set of commands instead of all 160+ commands live in Redis."
antirez,2014-06-26 20:13:46,https://api.github.com/repos/antirez/redis/git/commits/1f0c0df4a8e526728c51fb351703051e30068fee,1f0c0df4a8e526728c51fb351703051e30068fee,Fixed assert conditional in ROLE command test.
antirez,2014-06-26 16:48:40,https://api.github.com/repos/antirez/redis/git/commits/95b1979c321eb6353f75df892ab8be68cf8f9a77,95b1979c321eb6353f75df892ab8be68cf8f9a77,No more trailing spaces in Redis source code.
antirez,2014-06-26 16:34:57,https://api.github.com/repos/antirez/redis/git/commits/97f1fc65cf0331a367c2075c3adf09964dda2556,97f1fc65cf0331a367c2075c3adf09964dda2556,"CLIENT KILL: don't kill the master as a normal client.

Technically the problem is due to the client type API that does not
return a special value for the master, however fixing it locally in the
CLIENT KILL command is better currently because otherwise we would
introduce a new output buffer limit class as a side effect."
antirez,2014-06-26 16:30:03,https://api.github.com/repos/antirez/redis/git/commits/42231117a735ebb24389435e8a636de02565c07f,42231117a735ebb24389435e8a636de02565c07f,"Remove infinite loop from PSYNC test.

Added for debugging and forgot there."
antirez,2014-06-26 14:00:24,https://api.github.com/repos/antirez/redis/git/commits/e7887e60609be05f4390c4671d910ff700705aae,e7887e60609be05f4390c4671d910ff700705aae,"Test: hopefully more robust PSYNC test.

This is supposed to fix issue #1417, but we'll know if this is enough
only after a couple of runs of the CI test without false positives."
antirez,2014-06-26 13:13:49,https://api.github.com/repos/antirez/redis/git/commits/f86798ba6b3a0fb34109c55141c18997b55266b6,f86798ba6b3a0fb34109c55141c18997b55266b6,"Merge pull request #1838 from mattsta/powerpc-fixes

PowerPC compile-time improvements"
mattsta,2014-06-26 12:55:47,https://api.github.com/repos/antirez/redis/git/commits/a3e7a665ad62ab276b098c3c10460f111ea81200,a3e7a665ad62ab276b098c3c10460f111ea81200,"Allow __powerpc__ to define HAVE_ATOMIC too

From mailing list post https://groups.google.com/forum/#!topic/redis-db/D3k7KmJmYgM

In the file “config.h”, the definition HAVE_ATOMIC is used to indicate
if an architecture on which redis is implemented supports atomic
synchronization primitives.  Powerpc  supports atomic synchronization
primitives, however, it is not listed as one of the architectures
supported in config.h. This patch  adds the __powerpc__ to the list of
architectures supporting these primitives. The improvement of redis
due to the atomic synchronization on powerpc is significant,
around 30% to 40%, over the default implementation using pthreads.

This proposal adds __powerpc__ to the list of architectures designated
to support atomic builtins."
mattsta,2014-06-26 12:52:53,https://api.github.com/repos/antirez/redis/git/commits/a953c883815bada9365504940af52306d9a413ea,a953c883815bada9365504940af52306d9a413ea,"Allow atomic memory count update with C11 builtins

From mailing list post https://groups.google.com/forum/#!topic/redis-db/QLjiQe4D7LA

In zmalloc.c the following primitives are currently used
to synchronize access to single global variable:
__sync_add_and_fetch
__sync_sub_and_fetch

In some architectures such as powerpc these primitives are overhead
intensive. More efficient C11 __atomic builtins are available with
newer GCC versions, see
http://gcc.gnu.org/onlinedocs/gcc-4.8.2/gcc/_005f_005fatomic-Builtins.html#_005f_005fatomic-Builtins

By substituting the following  __atomic… builtins:
__atomic_add_fetch
__atomic_sub_fetch

the performance improvement on certain architectures such as powerpc can be significant,
around 10% to 15%, over the implementation using __sync builtins while there is only slight uptick on
Intel architectures because it was already enforcing Intel Strongly ordered memory semantics.

The selection of __atomic built-ins can be predicated on the definition of ATOMIC_RELAXED
which Is available on in gcc 4.8.2 and later versions."
mattsta,2014-06-26 12:51:13,https://api.github.com/repos/antirez/redis/git/commits/f9bca13a1a216c27509a6fb910f71c039dd60c7a,f9bca13a1a216c27509a6fb910f71c039dd60c7a,Use predefined macro for used_memory() update
antirez,2014-06-25 13:30:34,https://api.github.com/repos/antirez/redis/git/commits/9be3ee8283cffbb6cecc544a54db6c44a0e9cd45,9be3ee8283cffbb6cecc544a54db6c44a0e9cd45,Make unstable branch version unique and distinguishable.
antirez,2014-06-25 13:19:35,https://api.github.com/repos/antirez/redis/git/commits/75c57d53ea82674b16782a5e937e467bbdca985f,75c57d53ea82674b16782a5e937e467bbdca985f,"CLUSTER SLOTS: don't output failing slaves.

While we have to output failing masters in order to provide an accurate
map (that may be the one of a Redis Cluster in down state because not
all slots are served by a working master), to provide slaves in FAIL
state is not a good idea since those are not necesarely needed, and the
client will likely incur into a latency penalty trying to connect with a
slave which is down.

Note that this means that CLUSTER SLOTS does not provide a *complete*
map of slaves, however this would not be of any help since slaves may be
added later, and a client that needs to scale reads and requires to
stay updated with the list of slaves, need to do a refresh of the map
from time to time, anyway."
antirez,2014-06-25 13:08:33,https://api.github.com/repos/antirez/redis/git/commits/a6fe4ca3214a8ff5b17d73bcd3c293454b6ad15c,a6fe4ca3214a8ff5b17d73bcd3c293454b6ad15c,CLUSTER SLOTS: main loop should skip only slaves and zero slot masters.
mattsta,2014-06-16 16:36:13,https://api.github.com/repos/antirez/redis/git/commits/e14829de3025ffb0d3294e5e5a1553afd9f10b60,e14829de3025ffb0d3294e5e5a1553afd9f10b60,"Cluster: Add CLUSTER SLOTS command

CLUSTER SLOTS returns a Redis-formatted mapping from
slot ranges to IP/Port pairs serving that slot range.

The outer return elements group return values by slot ranges.

The first two entires in each result are the min and max slots for the range.

The third entry in each result is guaranteed to be either
an IP/Port of the master for that slot range - OR - null
if that slot range, for some reason, has no master

The 4th and higher entries in each result are replica instances
for the slot range.

Output comparison:
127.0.0.1:7001> cluster nodes
f853501ec8ae1618df0e0f0e86fd7abcfca36207 127.0.0.1:7001 myself,master - 0 0 2 connected 4096-8191
5a2caa782042187277647661ffc5da739b3e0805 127.0.0.1:7005 slave f853501ec8ae1618df0e0f0e86fd7abcfca36207 0 1402622415859 6 connected
6c70b49813e2ffc9dd4b8ec1e108276566fcf59f 127.0.0.1:7007 slave 26f4729ca0a5a992822667fc16b5220b13368f32 0 1402622415357 8 connected
2bd5a0e3bb7afb2b56a2120d3fef2f2e4333de1d 127.0.0.1:7006 slave 32adf4b8474fdc938189dba00dc8ed60ce635b0f 0 1402622419373 7 connected
5a9450e8279df36ff8e6bb1c139ce4d5268d1390 127.0.0.1:7000 master - 0 1402622418872 1 connected 0-4095
32adf4b8474fdc938189dba00dc8ed60ce635b0f 127.0.0.1:7002 master - 0 1402622419874 3 connected 8192-12287
5db7d05c245267afdfe48c83e7de899348d2bdb6 127.0.0.1:7004 slave 5a9450e8279df36ff8e6bb1c139ce4d5268d1390 0 1402622417867 5 connected
26f4729ca0a5a992822667fc16b5220b13368f32 127.0.0.1:7003 master - 0 1402622420877 4 connected 12288-16383

127.0.0.1:7001> cluster slots
1) 1) (integer) 0
   2) (integer) 4095
   3) 1) ""127.0.0.1""
      2) (integer) 7000
   4) 1) ""127.0.0.1""
      2) (integer) 7004
2) 1) (integer) 12288
   2) (integer) 16383
   3) 1) ""127.0.0.1""
      2) (integer) 7003
   4) 1) ""127.0.0.1""
      2) (integer) 7007
3) 1) (integer) 4096
   2) (integer) 8191
   3) 1) ""127.0.0.1""
      2) (integer) 7001
   4) 1) ""127.0.0.1""
      2) (integer) 7005
4) 1) (integer) 8192
   2) (integer) 12287
   3) 1) ""127.0.0.1""
      2) (integer) 7002
   4) 1) ""127.0.0.1""
      2) (integer) 7006"
antirez,2014-06-25 09:28:57,https://api.github.com/repos/antirez/redis/git/commits/f29b12d0bf368ef6a7e12baa0ce11dd7eaa149bf,f29b12d0bf368ef6a7e12baa0ce11dd7eaa149bf,"Cluster: myself->ip autodiscovery.

Instead of having an hardcoded IP address in the node configuration, we
autodiscover it via MEET messages for automatic update when the node is
restarted with a different IP address.

This mechanism was discussed in the context of PR #1782."
antirez,2014-06-24 10:49:18,https://api.github.com/repos/antirez/redis/git/commits/46319094dba97e1e5627ad52687d8d9dab26c070,46319094dba97e1e5627ad52687d8d9dab26c070,Old form of CLIENT KILL should still allow suicide.
antirez,2014-06-23 12:04:09,https://api.github.com/repos/antirez/redis/git/commits/e21e0ba3dcd67d9048ecea9be5398b2a791e7bc5,e21e0ba3dcd67d9048ecea9be5398b2a791e7bc5,"Sentinel test: more correct sentinels config reset.

In the initialization test for each instance we used to unregister the
old master and register it again to clear the config.
However there is a race condition doing this: as soon as we unregister
and re-register ""mymaster"", another Sentinel can update the new
configuration with the old state because of gossip ""hello"" messages.

So the correct procedure is instead, unregister ""mymaster"" from all the
sentinel instances, and re-register it everywhere again."
antirez,2014-06-23 10:07:41,https://api.github.com/repos/antirez/redis/git/commits/e3bae84606389dadaff03c495d4ec37c306af3a1,e3bae84606389dadaff03c495d4ec37c306af3a1,Sentinel implementation of ROLE.
antirez,2014-06-23 09:56:16,https://api.github.com/repos/antirez/redis/git/commits/54c46bafa36fc997d55695439b01f7abe906cd0d,54c46bafa36fc997d55695439b01f7abe906cd0d,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2014-06-23 09:50:24,https://api.github.com/repos/antirez/redis/git/commits/be8f4d49d4015260e1fd14506dbf17ee3797cc78,be8f4d49d4015260e1fd14506dbf17ee3797cc78,Silence different signs comparison warning in sds.c.
antirez,2014-06-23 09:42:47,https://api.github.com/repos/antirez/redis/git/commits/5c7286efbde3ac2a584aa6cc8b0617c74a1adce0,5c7286efbde3ac2a584aa6cc8b0617c74a1adce0,Use Redis updated sds.c for deps/hiredis.
mattsta,2014-04-24 19:22:52,https://api.github.com/repos/antirez/redis/git/commits/5cd83ef53984ea2d5fcef4d48cfa0b4927637c27,5cd83ef53984ea2d5fcef4d48cfa0b4927637c27,"Sentinel: bind source address

Some deployments need traffic sent from a specific address.  This
change uses the same policy as Cluster where the first listed bindaddr
becomes the source address for outgoing Sentinel communication.

Fixes #1667"
mattsta,2014-04-24 19:19:06,https://api.github.com/repos/antirez/redis/git/commits/d830dcb12d0a99bf5488cb58c3a541b9387dcfb0,d830dcb12d0a99bf5488cb58c3a541b9387dcfb0,"Add REDIS_BIND_ADDR access macro

We need to access (bindaddr[0] || NULL) in a few places, so centralize
access with a nice macro."
antirez,2014-06-23 09:43:37,https://api.github.com/repos/antirez/redis/git/commits/1506c64c8b8b4a964f331f502a5d0006dd3077f0,1506c64c8b8b4a964f331f502a5d0006dd3077f0,Dummy zmalloc.h restored into deps/hiredis.
mattsta,2014-04-24 19:14:54,https://api.github.com/repos/antirez/redis/git/commits/28f32c99d0118eb60b236a0c8a96ea4bd9b7fa5b,28f32c99d0118eb60b236a0c8a96ea4bd9b7fa5b,"hiredis: Update to latest version

This is hiredis f225c276be7fd0646019b51023e3f41566633dfe

This update includes all changes that diverged inside of Redis since
the last update.  This version also allows optional source address
binding for connections which we need for some Sentinel deployments."
mattsta,2014-06-21 15:14:05,https://api.github.com/repos/antirez/redis/git/commits/ef897a41e80eb03a18d131d6a3c4d1d868f38ea0,ef897a41e80eb03a18d131d6a3c4d1d868f38ea0,"Cancel SHUTDOWN if initial AOF is being written

Fixes #1826 (and many other reports of the same problem)"
antirez,2014-06-23 08:07:13,https://api.github.com/repos/antirez/redis/git/commits/af7647b20d42f0544944ca83492d5353617bb2b8,af7647b20d42f0544944ca83492d5353617bb2b8,"Merge pull request #1829 from mattsta/stop-aof-dataloss

Cancel SHUTDOWN if initial AOF is being written"
antirez,2014-06-23 07:08:51,https://api.github.com/repos/antirez/redis/git/commits/1206bdf13f3afbc242a52ee1ce190ef48432fa90,1206bdf13f3afbc242a52ee1ce190ef48432fa90,Basic tests for the ROLE command.
mattsta,2014-06-21 15:14:05,https://api.github.com/repos/antirez/redis/git/commits/72980c7005f0c7ee1ea97a25229af3a7bc6edd96,72980c7005f0c7ee1ea97a25229af3a7bc6edd96,"Cancel SHUTDOWN if initial AOF is being written

Fixes #1826 (and many other reports of the same problem)"
antirez,2014-06-21 09:39:43,https://api.github.com/repos/antirez/redis/git/commits/fb2f637c4a48521e4ea4191f9e101d09130ccac9,fb2f637c4a48521e4ea4191f9e101d09130ccac9,Allow to call ROLE in LOADING state.
antirez,2014-06-21 09:17:18,https://api.github.com/repos/antirez/redis/git/commits/7970d5399740d001d746cd95ddd5e159c450c0e6,7970d5399740d001d746cd95ddd5e159c450c0e6,ROLE command: array len fixed for slave output.
antirez,2014-06-20 12:59:18,https://api.github.com/repos/antirez/redis/git/commits/fceef8e0ddfca103b2f0328e3ad9ae522093f2c8,fceef8e0ddfca103b2f0328e3ad9ae522093f2c8,"Jemalloc updated to 3.6.0.

Not a single bug in about 3 months, and our previous version was
too old (3.2.0)."
antirez,2014-06-20 12:53:47,https://api.github.com/repos/antirez/redis/git/commits/fe596d67e3c871cb13b4c909cb4ec435dd738cd8,fe596d67e3c871cb13b4c909cb4ec435dd738cd8,Jemalloc update script added.
antirez,2014-06-20 07:32:47,https://api.github.com/repos/antirez/redis/git/commits/22d17bc14f06112c27d54b0bb7768ee53e9732c5,22d17bc14f06112c27d54b0bb7768ee53e9732c5,Cluster: clear NOADDR flag when updating node address.
antirez,2014-06-19 13:58:45,https://api.github.com/repos/antirez/redis/git/commits/f62dfa0f50f70e4651201b5803aa5c6f7f43721c,f62dfa0f50f70e4651201b5803aa5c6f7f43721c,Sentinel test: tolerate larger delays in init tests.
antirez,2014-06-19 13:56:28,https://api.github.com/repos/antirez/redis/git/commits/d06d8d6ffabf92914cb4f640ce3000a63d22c3ad,d06d8d6ffabf92914cb4f640ce3000a63d22c3ad,"Sentinel test: unit 02, avoid some time related false positives."
antirez,2014-06-19 13:17:06,https://api.github.com/repos/antirez/redis/git/commits/41f12ac988e0e65e045bda9e90bc44a42ff58611,41f12ac988e0e65e045bda9e90bc44a42ff58611,"Sentinel: send hello messages ASAP after config change.

Eventual configuration convergence is guaranteed by our periodic hello
messages to all the instances, however when there are important notices
to share, better make a phone call. With this commit we force an hello
message to other Sentinal and Redis instances within the next 100
milliseconds of a config update, which is practically better than
waiting a few seconds."
antirez,2014-06-19 08:32:38,https://api.github.com/repos/antirez/redis/git/commits/f16ad11c712dae011463b563cab6b512f5c8169c,f16ad11c712dae011463b563cab6b512f5c8169c,Sentinel test: add manual failover test.
antirez,2014-06-19 08:28:27,https://api.github.com/repos/antirez/redis/git/commits/94bc467328cfaf9f8561e146fda1dfcc91f5c70e,94bc467328cfaf9f8561e146fda1dfcc91f5c70e,"Sentinel: handle SRI_PROMOTED flag correctly.

Lack of check of the SRI_PROMOTED flag caused Sentienl to act with the
promoted slave turned into a master during failover like if it was a
normal instance.

Normally this problem was not apparent because during real failovers the
old master is down so the bugged code path was not entered, however with
manual failovers via the SENTINEL FAILOVER command, the problem was
easily triggered.

This commit prevents promoted slaves from getting reconfigured, moreover
we now explicitly check that during a failover the slave turning into a
master is the one we selected for promotion and not a different one."
antirez,2014-06-18 13:54:55,https://api.github.com/repos/antirez/redis/git/commits/1c343ec29f49bbe8c83a61b1c5c10d5ec3c1ca8f,1c343ec29f49bbe8c83a61b1c5c10d5ec3c1ca8f,Test: use higher level redis.tcl proc to read replies.
antirez,2014-06-18 13:54:55,https://api.github.com/repos/antirez/redis/git/commits/5260ce1260803f5153e33e66014c60d7b6f855ab,5260ce1260803f5153e33e66014c60d7b6f855ab,Sentienl/Redis test: enable link reconnection in instances.tcl.
antirez,2014-06-18 13:52:14,https://api.github.com/repos/antirez/redis/git/commits/670d164fbe60b5f6018ea6cb7a1c778f838ea755,670d164fbe60b5f6018ea6cb7a1c778f838ea755,Test: Tcl client initial support for automatic reconnection.
antirez,2014-06-18 13:07:08,https://api.github.com/repos/antirez/redis/git/commits/9162b5f8f9e387b793d46a02f9ef980159851807,9162b5f8f9e387b793d46a02f9ef980159851807,"Test: tcl client, unset deferred var on close."
antirez,2014-06-18 12:59:43,https://api.github.com/repos/antirez/redis/git/commits/36bbfeef7bbc34b807b7ae3f89b4b2fce5104f06,36bbfeef7bbc34b807b7ae3f89b4b2fce5104f06,"Merge pull request #1824 from mattsta/fix-test-error-signal

Add correct exit value to failed tests"
mattsta,2014-06-18 12:10:04,https://api.github.com/repos/antirez/redis/git/commits/f7d9827330b7ddabb6dc53a06c154c34b2c6ad6c,f7d9827330b7ddabb6dc53a06c154c34b2c6ad6c,Add correct exit value to failed tests
antirez,2014-06-18 07:31:02,https://api.github.com/repos/antirez/redis/git/commits/3f8865bcdc26c52a80b97e32c6f3dc4e37c91d45,3f8865bcdc26c52a80b97e32c6f3dc4e37c91d45,"Merge pull request #1822 from vito/patch-1

add missing signal.h include"
vito,2014-06-18 04:59:12,https://api.github.com/repos/antirez/redis/git/commits/9f8dcfe69a63e9b8436dd3aa332deb2ba869a43a,9f8dcfe69a63e9b8436dd3aa332deb2ba869a43a,add missing signal.h include
antirez,2014-06-17 21:38:02,https://api.github.com/repos/antirez/redis/git/commits/3a482689c510bf8f2c8daca3ddd15af14ab036ac,3a482689c510bf8f2c8daca3ddd15af14ab036ac,"Merge pull request #1658 from mattsta/redis-cli-latency-clean-interrupt

Add SIGINT handler to cli --intrinsic-latency"
mattsta,2014-06-17 14:12:57,https://api.github.com/repos/antirez/redis/git/commits/20c2a38ad0b8ac54a0eef165bc4e1b58e599a7b1,20c2a38ad0b8ac54a0eef165bc4e1b58e599a7b1,"Add SIGINT handler to cli --intrinsic-latency

If we run a long latency session and want to Ctrl-C out of it,
it's nice to still get the summary output at the end."
antirez,2014-06-17 09:03:21,https://api.github.com/repos/antirez/redis/git/commits/2c175912249ffabb2ffb60bae618701e8476a7b8,2c175912249ffabb2ffb60bae618701e8476a7b8,"Sentinel: send SLAVEOF with MULTI, CLIENT KILL, CONFIG REWRITE.

This implements the new Sentinel-Client protocol for the Sentinel part:
now instances are reconfigured using a transaction that ensures that the
config is rewritten in the target instance, and that clients lose the
connection with the instance, in order to be forced to: ask Sentinel,
reconnect to the instance, and verify the instance role with the new
ROLE command."
antirez,2014-06-16 12:50:15,https://api.github.com/repos/antirez/redis/git/commits/bb2011d992cebbfaa94d099c043c55f2342690cb,bb2011d992cebbfaa94d099c043c55f2342690cb,"CLIENT KILL API modified.

Added a new SKIPME option that is true by default, that prevents the
client sending the command to be killed, unless SKIPME NO is sent."
antirez,2014-06-16 12:28:23,https://api.github.com/repos/antirez/redis/git/commits/e06b3819ea61727fc2312e17d2038736d3428fb7,e06b3819ea61727fc2312e17d2038736d3428fb7,CLIENT KILL: fix closing link of the current client.
antirez,2014-06-16 12:24:28,https://api.github.com/repos/antirez/redis/git/commits/e7affd266c4884ce4fc60e567e3aae55cac49828,e7affd266c4884ce4fc60e567e3aae55cac49828,New features for CLIENT KILL.
antirez,2014-06-16 12:22:55,https://api.github.com/repos/antirez/redis/git/commits/f26f79ea3725a37cefad7ad5dd6353b1a92ad8e3,f26f79ea3725a37cefad7ad5dd6353b1a92ad8e3,"Assign an unique non-repeating ID to each new client.

This will be used by CLIENT KILL and is also a good way to ensure a
given client is still the same across CLIENT LIST calls.

The output of CLIENT LIST was modified to include the new ID, but this
change is considered to be backward compatible as the API does not imply
you can do positional parsing, since each filed as a different name."
antirez,2014-06-16 08:43:05,https://api.github.com/repos/antirez/redis/git/commits/56d26c23801b53458dfe8ac614106a9ab71473f1,56d26c23801b53458dfe8ac614106a9ab71473f1,"Client types generalized.

Because of output buffer limits Redis internals had this idea of type of
clients: normal, pubsub, slave. It is possible to set different output
buffer limits for the three kinds of clients.

However all the macros and API were named after output buffer limit
classes, while the idea of a client type is a generic one that can be
reused.

This commit does two things:

1) Rename the API and defines with more general names.
2) Change the class of clients executing the MONITOR command from ""slave""
   to ""normal"".

""2"" is a good idea because you want to have very special settings for
slaves, that are not a good idea for MONITOR clients that are instead
normal clients even if they are conceptually slave-alike (since it is a
push protocol).

The backward-compatibility breakage resulting from ""2"" is considered to
be minimal to care, since MONITOR is a debugging command, and because
anyway this change is not going to break the format or the behavior, but
just when a connection is closed on big output buffer issues."
antirez,2014-06-12 14:20:30,https://api.github.com/repos/antirez/redis/git/commits/aa19fd612b39b0270434f4cd049769680dfc74bc,aa19fd612b39b0270434f4cd049769680dfc74bc,Scripting: regression test for issue #1811.
antirez,2014-06-12 13:51:55,https://api.github.com/repos/antirez/redis/git/commits/96e0fe6232afabff501bc72d3978a157ead7f359,96e0fe6232afabff501bc72d3978a157ead7f359,"Fix semantics of Lua calls to SELECT.

Lua scripts are executed in the context of the currently selected
database (as selected by the caller of the script).

However Lua scripts are also free to use the SELECT command in order to
affect other DBs. When SELECT is called frm Lua, the old behavior, before
this commit, was to automatically set the Lua caller selected DB to the
last DB selected by Lua. See for example the following sequence of
commands:

    SELECT 0
    SET x 10
    EVAL ""redis.call('select','1')"" 0
    SET x 20

Before this commit after the execution of this sequence of commands,
we'll have x=10 in DB 0, and x=20 in DB 1.

Because of the problem above, there was a bug affecting replication of
Lua scripts, because of the actual implementation of replication. It was
possible to fix the implementation of Lua scripts in order to fix the
issue, but looking closely, the bug is the consequence of the behavior
of Lua ability to set the caller's DB.

Under the old semantics, a script selecting a different DB, has no simple
ways to restore the state and select back the previously selected DB.
Moreover the script auhtor must remember that the restore is needed,
otherwise the new commands executed by the caller, will be executed in
the context of a different DB.

So this commit fixes both the replication issue, and this hard-to-use
semantics, by removing the ability of Lua, after the script execution,
to force the caller to switch to the DB selected by the Lua script.

The new behavior of the previous sequence of commadns is to just set
X=20 in DB 0. However Lua scripts are still capable of writing / reading
from different DBs if needed.

WARNING: This is a semantical change that will break programs that are
conceived to select the client selected DB via Lua scripts.

This fixes issue #1811."
antirez,2014-06-11 14:25:17,https://api.github.com/repos/antirez/redis/git/commits/38a06e86cf487f9483729920ed59c7aa182ab22c,38a06e86cf487f9483729920ed59c7aa182ab22c,"Cluser test: write multiple keys in unit 03.

The write-failover-read test is better if we write 100 keys so that we
are sure all the nodes are affected by the write."
antirez,2014-06-11 14:23:13,https://api.github.com/repos/antirez/redis/git/commits/1d5b12c54ae52816d0d0577e17cbbc4def59d247,1d5b12c54ae52816d0d0577e17cbbc4def59d247,Cluster test: rewrite config when resetting nodes.
antirez,2014-06-11 08:10:58,https://api.github.com/repos/antirez/redis/git/commits/73fefd0bc05b7711d3710761b49197596ba39aa4,73fefd0bc05b7711d3710761b49197596ba39aa4,"Scripting: Fix for a #1118 regression simplified.

It is more straightforward to just test for a numerical type avoiding
Lua's automatic conversion. The code is technically more correct now,
however Lua should automatically convert to number only if the original
type is a string that ""looks like a number"", and not from other types,
so practically speaking the fix is identical AFAIK."
antirez,2014-06-11 08:09:02,https://api.github.com/repos/antirez/redis/git/commits/3ac1dad77a1c06c063de06946bc0cff2dc9b8934,3ac1dad77a1c06c063de06946bc0cff2dc9b8934,"Merge pull request #1804 from mattsta/lua-regression-1118

Scripting: Fix regression from #1118"
mattsta,2014-06-10 18:21:37,https://api.github.com/repos/antirez/redis/git/commits/76efe1225fcd76cd10d6ea87ae9bec36b17edcfa,76efe1225fcd76cd10d6ea87ae9bec36b17edcfa,"Scripting: Fix regression from #1118

The new check-for-number behavior of Lua arguments broke
users who use large strings of just integers.

The Lua number check would convert the string to a number, but
that breaks user data because
Lua numbers have limited precision compared to an arbitrarily
precise number wrapped in a string.

Regression fixed and new test added.

Fixes #1118 again."
antirez,2014-06-10 15:39:42,https://api.github.com/repos/antirez/redis/git/commits/8ef79e72ac890b076df3f35ab8571c01848a53f1,8ef79e72ac890b076df3f35ab8571c01848a53f1,Cluster: fix an error message when logging failover auth denied.
antirez,2014-06-10 15:20:16,https://api.github.com/repos/antirez/redis/git/commits/58799718be9e79ea9279f5cbc211ce4d483ba010,58799718be9e79ea9279f5cbc211ce4d483ba010,Cluster: better comment for clusterSendFailoverAuthIfNeeded() epoch test.
antirez,2014-06-10 14:56:43,https://api.github.com/repos/antirez/redis/git/commits/605303d9c675d2b4dd1bc65f2f3e7f1884909500,605303d9c675d2b4dd1bc65f2f3e7f1884909500,Cluster test: set config epochs when creating clusters.
antirez,2014-06-10 14:56:08,https://api.github.com/repos/antirez/redis/git/commits/61eb0eae838d06a9f9da21d00bcdb7b9ede2bd5b,61eb0eae838d06a9f9da21d00bcdb7b9ede2bd5b,Cluster: log granted failover authorizations.
antirez,2014-06-10 14:38:36,https://api.github.com/repos/antirez/redis/git/commits/d5d92deb6cf0c87459710b8c0da013e643e389d9,d5d92deb6cf0c87459710b8c0da013e643e389d9,Cluster: log configEpoch updates to myself.
antirez,2014-06-10 14:07:26,https://api.github.com/repos/antirez/redis/git/commits/8204ab0098e80a81c6bee2ff849ad5fc2d235a51,8204ab0098e80a81c6bee2ff849ad5fc2d235a51,Cluster: log when a master denies a failover auth.
antirez,2014-06-10 13:46:36,https://api.github.com/repos/antirez/redis/git/commits/64e6d7af47c24606f75f53386872576568512278,64e6d7af47c24606f75f53386872576568512278,"Cluster test: unit 03, check epochs correctness."
antirez,2014-06-10 13:33:53,https://api.github.com/repos/antirez/redis/git/commits/4fd35a28d3be275b821b7d3a9d10b50ddc5fb99c,4fd35a28d3be275b821b7d3a9d10b50ddc5fb99c,Cluster test: better failover detection in unit 03.
antirez,2014-06-10 13:19:35,https://api.github.com/repos/antirez/redis/git/commits/92dcae8fe4d6bc3b4ce7fbfcae0dcb6708cad18e,92dcae8fe4d6bc3b4ce7fbfcae0dcb6708cad18e,Cluster test: added show-redis-logs command in the interactive console.
antirez,2014-06-10 13:05:52,https://api.github.com/repos/antirez/redis/git/commits/1617c36c355c0ac27a5cc8ec0b635e2d690405ae,1617c36c355c0ac27a5cc8ec0b635e2d690405ae,"Cluster test: new unit 03, failover loop stress testing."
antirez,2014-06-10 13:00:39,https://api.github.com/repos/antirez/redis/git/commits/2ed450c3220c903ef1d18a9e261e5187e276ac73,2ed450c3220c903ef1d18a9e261e5187e276ac73,Cluster test: 02 unit more reliable waiting for slave sync.
antirez,2014-06-10 12:18:54,https://api.github.com/repos/antirez/redis/git/commits/9865ce0e64f1877588e9c87f05a2203ced6356be,9865ce0e64f1877588e9c87f05a2203ced6356be,Cluster test: unit 02 should wait for failover.
antirez,2014-06-10 11:54:38,https://api.github.com/repos/antirez/redis/git/commits/6785b39eba761ccdcf8879ed19a8c3ac61f977f2,6785b39eba761ccdcf8879ed19a8c3ac61f977f2,Cluster test: check master -> slave role switch.
antirez,2014-06-10 09:35:40,https://api.github.com/repos/antirez/redis/git/commits/9b3bc82c1aa1bf8ecba460efe83ca8743b828d8e,9b3bc82c1aa1bf8ecba460efe83ca8743b828d8e,Cluster: cluster_my_epoch added to CLUSTER INFO output.
antirez,2014-06-09 09:42:14,https://api.github.com/repos/antirez/redis/git/commits/08c7363647f9096cd40bedf8427f2de05cfa1276,08c7363647f9096cd40bedf8427f2de05cfa1276,"Merge pull request #1743 from mattsta/cygwin-compile-fix

Cygwin compile fix"
antirez,2014-06-09 09:37:28,https://api.github.com/repos/antirez/redis/git/commits/c7f93143f6678ac1b0d6e008ab9f4ecf3f1dedef,c7f93143f6678ac1b0d6e008ab9f4ecf3f1dedef,"Merge pull request #1669 from mattsta/blpop-internally-added-keys

Fix blocking operations from missing new lists"
antirez,2014-06-07 15:38:16,https://api.github.com/repos/antirez/redis/git/commits/6a13193d8f3110216a8ed3982d1109b84d0ac65c,6a13193d8f3110216a8ed3982d1109b84d0ac65c,"ROLE output improved for slaves.

Info about the replication state with the master added."
antirez,2014-06-07 15:27:49,https://api.github.com/repos/antirez/redis/git/commits/d34c2fa3bb79f9bbbaaafc6d0e74973e5a3b963a,d34c2fa3bb79f9bbbaaafc6d0e74973e5a3b963a,"ROLE command added.

The new ROLE command is designed in order to provide a client with
informations about the replication in a fast and easy to use way
compared to the INFO command where the same information is also
available."
antirez,2014-06-07 12:37:09,https://api.github.com/repos/antirez/redis/git/commits/32d0a79f7871052429f38c65ee0b341c7fbbe3e5,32d0a79f7871052429f38c65ee0b341c7fbbe3e5,"Cluster: check that configEpoch never goes back.

Since there are ways to alter the configEpoch outside of the failover
procedure (for exampel CLUSTER SET-CONFIG-EPOCH and via the configEpoch
collision resolution algorithm), make always sure, before replacing our
configEpoch with a new one, that it is greater than the current one."
antirez,2014-06-07 12:25:47,https://api.github.com/repos/antirez/redis/git/commits/a2c2ef7de593ca9ae80b09c3b243965a746a106c,a2c2ef7de593ca9ae80b09c3b243965a746a106c,"Cluster: SET-CONFIG-EPOCH should update currentEpoch.

SET-CONFIG-EPOCH, used by redis-trib at cluster creation time, failed to
update the currentEpoch, making it possible after a failover for a
server to set its configEpoch to a value smaller than the current one
(since configEpochs are obtained using currentEpoch).

The bug totally break the Redis Cluster algorithms and protocols
allowing for permanent split brain conditions about the slots
configuration as shown in issue #1799."
antirez,2014-06-06 09:19:21,https://api.github.com/repos/antirez/redis/git/commits/a2403227c7b164e546e53bf329c70caaadef2c14,a2403227c7b164e546e53bf329c70caaadef2c14,"Merge pull request #1772 from andygrunwald/typo-avarege-average

Fixed typo in word avarege in result message of --intrinsic-latency analyzer"
antirez,2014-06-06 08:45:00,https://api.github.com/repos/antirez/redis/git/commits/113be48221ad07706a15f253657cc805acb8047a,113be48221ad07706a15f253657cc805acb8047a,"Merge pull request #1780 from badboy/patch-8

Small typo fixed"
antirez,2014-06-06 08:37:57,https://api.github.com/repos/antirez/redis/git/commits/e8ebd7d0e05b72d3ab749093493ee3c1cf7023d0,e8ebd7d0e05b72d3ab749093493ee3c1cf7023d0,"Merge pull request #1789 from yoav-steinberg/fix_eval_in_tests

Fix eval usage in tests to conform with eval semantics"
antirez,2014-06-06 08:33:11,https://api.github.com/repos/antirez/redis/git/commits/1e221d101cd834c8f13fe570ce4ee2c69bffa109,1e221d101cd834c8f13fe570ce4ee2c69bffa109,"Merge pull request #1788 from zionwu/unstable

fix issue 1787"
antirez,2014-06-05 08:48:05,https://api.github.com/repos/antirez/redis/git/commits/14fb0ac649062d250659a153aa576870e151cb4b,14fb0ac649062d250659a153aa576870e151cb4b,"Don't process min-slaves-to-write for slaves.

Replication is totally broken when a slave has this option, since it
stops accepting updates from masters.

This fixes issue #1434."
antirez,2014-06-05 08:46:08,https://api.github.com/repos/antirez/redis/git/commits/134fd9eaf4b683e200be1d42d20632767c6e2e5c,134fd9eaf4b683e200be1d42d20632767c6e2e5c,Tests for min-slaves-* feature.
antirez,2014-06-04 16:57:12,https://api.github.com/repos/antirez/redis/git/commits/3758f27bc1d3be0b12676fa9a7f26678e4789c6c,3758f27bc1d3be0b12676fa9a7f26678e4789c6c,"Fixed dbuf variable scope in luaRedisGenericCommand().

I'm not sure if while the visibility is the inner block, the fact we
point to 'dbuf' is a problem or not, probably the stack var isx
guaranteed to live until the function returns. However obvious code is
better anyway."
antirez,2014-06-04 16:51:20,https://api.github.com/repos/antirez/redis/git/commits/3307db49bd9b8eceaa9672ecfb1d32a5ba7497ce,3307db49bd9b8eceaa9672ecfb1d32a5ba7497ce,Regression test for issue #1118.
antirez,2014-06-04 16:33:24,https://api.github.com/repos/antirez/redis/git/commits/072982d83c83b161f555538bad6a82815d1c36eb,072982d83c83b161f555538bad6a82815d1c36eb,"Scripting: better Lua number -> string conversion in luaRedisGenericCommand().

The lua_to*string() family of functions use a non optimal format
specifier when converting integers to strings. This has both the problem
of the number being converted in exponential notation, which we don't
use as a Redis return value when floating point numbers are involed,
and, moreover, there is a loss of precision since the default format
specifier is not able to represent numbers that must be represented
exactly in the IEEE 754 number mantissa.

The new code handles it as a special case using a saner conversion.

This fixes issue #1118."
zionwu,2014-05-31 18:23:24,https://api.github.com/repos/antirez/redis/git/commits/dc8584696a3f97fc1fda90b4c50fb3f8f7dda0cf,dc8584696a3f97fc1fda90b4c50fb3f8f7dda0cf,fix issue 1787
antirez,2014-05-28 13:46:05,https://api.github.com/repos/antirez/redis/git/commits/8a588ac14d229aa330d7b2daea1778c606e6588b,8a588ac14d229aa330d7b2daea1778c606e6588b,More trailing spaces in sentinel.c removed.
badboy,2014-05-28 07:46:01,https://api.github.com/repos/antirez/redis/git/commits/b187c591e39e072fa169bf60a1a46bebc855973b,b187c591e39e072fa169bf60a1a46bebc855973b,Small typo fixed
antirez,2014-05-26 16:06:48,https://api.github.com/repos/antirez/redis/git/commits/efbe17396248082bb9a9b1f30c6b2774c22422df,efbe17396248082bb9a9b1f30c6b2774c22422df,Cluster test: add tmp dir to Git repo.
antirez,2014-05-26 15:56:58,https://api.github.com/repos/antirez/redis/git/commits/3e0aef1e2e7e9cf9ef3bc3a0d63c57499295cf14,3e0aef1e2e7e9cf9ef3bc3a0d63c57499295cf14,"Merge pull request #1775 from mattsta/fix-test-against-new-PID-format

Fix test framework to detect proper server PID"
mattsta,2014-05-22 19:34:02,https://api.github.com/repos/antirez/redis/git/commits/7a0c5fdf12d9cd035e41734f518aa4568dc48c9d,7a0c5fdf12d9cd035e41734f518aa4568dc48c9d,"Disable recursive watchdog signal handler

If we are in the signal handler, we don't want to handle
the signal again.  In extreme cases, this can cause a stack overflow
and segfault Redis.

Fixes #1771"
antirez,2014-05-26 14:24:12,https://api.github.com/repos/antirez/redis/git/commits/88c23075355e22471cb9b35cafd3ba65f8870dba,88c23075355e22471cb9b35cafd3ba65f8870dba,"Cluster: always allow ok -> fail switch in clusterUpdateState().

There is a time defined by REDIS_CLUSTER_WRITABLE_DELAY where fail -> ok
switch is not possible after startup as a master for some time, however
the contrary (ok -> fail) should always be possible."
antirez,2014-05-26 09:00:11,https://api.github.com/repos/antirez/redis/git/commits/3495caf4fb323a76d5206a35aab5dce42a722ea2,3495caf4fb323a76d5206a35aab5dce42a722ea2,"Cluster test: catch FLUSHALL errors on node reset.

FLUSHALL will fail on read-only slaves, but there the command is not
needed in order to reset the instance with CLUSTER RESET so errors can
be ignored."
antirez,2014-05-26 08:17:12,https://api.github.com/repos/antirez/redis/git/commits/69fa133ec22dca419fedc932952b8bc29d40937f,69fa133ec22dca419fedc932952b8bc29d40937f,Sentinel example config: explain you don't need to specify slaves.
mattsta,2014-05-23 17:54:29,https://api.github.com/repos/antirez/redis/git/commits/6c16ecaaaab0d933249aaaef49fe50afd373df83,6c16ecaaaab0d933249aaaef49fe50afd373df83,"Fix test framework to detect proper server PID

Previously the PID format was:
[PID] Timestamp

But it recently changed to:
PID:X Timestamp

The tcl testing framework was grabbing the PID from \[\d+\], but
that's not valid anymore.

Now we grab the pid from ""PID: <PID>"" in the part of Redis startup
output to the right of the ASCII logo."
antirez,2014-05-23 09:47:47,https://api.github.com/repos/antirez/redis/git/commits/d0566daeaf656353e1ec759c7b9c876c9ce9f801,d0566daeaf656353e1ec759c7b9c876c9ce9f801,Cluster test: basic failover unit added.
antirez,2014-05-23 09:41:50,https://api.github.com/repos/antirez/redis/git/commits/aa5dfb3c2ca93c4238cd9b80d312dedd777a187e,aa5dfb3c2ca93c4238cd9b80d312dedd777a187e,Cluster test: move basic read/write test into a procedure.
antirez,2014-05-23 09:40:25,https://api.github.com/repos/antirez/redis/git/commits/a700bc74a8094c6bcb310aab7b4494d880c5de6c,a700bc74a8094c6bcb310aab7b4494d880c5de6c,"Cluster test: more reliable 01-faildet unit.

Do things in a sequence that prevents failover during failure detection."
andygrunwald,2014-05-22 18:01:12,https://api.github.com/repos/antirez/redis/git/commits/94e3bb568ac2cb7763a1caab299337ed72149e4c,94e3bb568ac2cb7763a1caab299337ed72149e4c,Fixed typo in word avarege in result message of --intrinsic-latency analyzer
antirez,2014-05-22 17:24:35,https://api.github.com/repos/antirez/redis/git/commits/b239a32aaee896fbff704b1aefffa18980b2e22d,b239a32aaee896fbff704b1aefffa18980b2e22d,redisLogFromHandler() format changed to match new logs format.
antirez,2014-05-22 16:48:37,https://api.github.com/repos/antirez/redis/git/commits/d98fa718e0e3034b1e21effa3ed3ce6d0c096791,d98fa718e0e3034b1e21effa3ed3ce6d0c096791,"Tag every log line with role.

Every log contains, just after the pid, a single character that provides
information about the role of an instance:

S - Slave
M - Master
C - Writing child
X - Sentinel"
antirez,2014-05-22 14:57:47,https://api.github.com/repos/antirez/redis/git/commits/39603a7e315f36b51cdd9d0cf20d6d43f66be606,39603a7e315f36b51cdd9d0cf20d6d43f66be606,"Cluster: slave validity factor is now user configurable.

Check the commit changes in the example redis.conf for more information."
antirez,2014-05-22 14:03:46,https://api.github.com/repos/antirez/redis/git/commits/ce374889195bea7c8aefecf994a702f799fe4fd1,ce374889195bea7c8aefecf994a702f799fe4fd1,"Test: AOF test false positive when running in slow hosts.

The bug was triggered by running the test with Valgrind (which is a lot
slower and more sensible to timing issues) after the recent changes
that made Redis more promptly able to reply with the -LOADING error."
antirez,2014-05-22 13:56:17,https://api.github.com/repos/antirez/redis/git/commits/17b05afda9b751f46facfc1948276ead137a6801,17b05afda9b751f46facfc1948276ead137a6801,Test: dump.tcl fixed for RESTORE new error msg.
antirez,2014-05-21 16:17:02,https://api.github.com/repos/antirez/redis/git/commits/762b1ae2becf26c5ae5b4dc3e31b7f93cc2a5302,762b1ae2becf26c5ae5b4dc3e31b7f93cc2a5302,"Fix an error in redis-trib where we always talk with same node.

While iterating the list of nodes we want to set the slot as stable in
the current node, not always in the first node of the list."
antirez,2014-05-21 14:40:36,https://api.github.com/repos/antirez/redis/git/commits/c68c78719f3e790fe655d1dd2a6b8ae1de4ae456,c68c78719f3e790fe655d1dd2a6b8ae1de4ae456,redis-trib fix improved: move keys from N nodes to owner.
mattsta,2014-04-08 01:22:30,https://api.github.com/repos/antirez/redis/git/commits/33f943b4cddb0bf90b436ccd47d12363e13d0fce,33f943b4cddb0bf90b436ccd47d12363e13d0fce,"Fix blocking operations from missing new lists

Behrad Zari discovered [1] and Josiah reported [2]: if you block
and wait for a list to exist, but the list creates from
a non-push command, the blocked client never gets notified.

This commit adds notification of blocked clients into
the DB layer and away from individual commands.

Lists can be created by [LR]PUSH, SORT..STORE, RENAME, MOVE,
and RESTORE.  Previously, blocked client notifications were
only triggered by [LR]PUSH.  Your client would never get
notified if a list were created by SORT..STORE or RENAME or
a RESTORE, etc.

Blocked client notification now happens in one unified place:
  - dbAdd() triggers notification when adding a list to the DB

Two new tests are added that fail prior to this commit.

All test pass.

Fixes #1668

[1]: https://groups.google.com/forum/#!topic/redis-db/k4oWfMkN1NU
[2]: #1668"
antirez,2014-05-21 10:15:03,https://api.github.com/repos/antirez/redis/git/commits/56161ca0a444ff6653f884561ab95bd09ecbc1af,56161ca0a444ff6653f884561ab95bd09ecbc1af,"redis-trib fix: use MIGRATE REPLACE when fixing slots.

This fixes issue #1765."
antirez,2014-05-20 14:20:16,https://api.github.com/repos/antirez/redis/git/commits/7f772355f403a1be9592e60f606d457d117fccc5,7f772355f403a1be9592e60f606d457d117fccc5,Regression test for issue #1764.
antirez,2014-05-20 14:15:13,https://api.github.com/repos/antirez/redis/git/commits/ce2b2f22d9858eeb31ed7159d9e33b620da10c24,ce2b2f22d9858eeb31ed7159d9e33b620da10c24,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2014-05-20 14:14:34,https://api.github.com/repos/antirez/redis/git/commits/ce7c47265bfd133e0205152820f89a04b16333ef,ce7c47265bfd133e0205152820f89a04b16333ef,"Merge pull request #1764 from michael-grunder/lua_cache_segfault

Fix LUA_OBJCACHE segfault."
antirez,2014-05-20 14:11:22,https://api.github.com/repos/antirez/redis/git/commits/4ddc77041f6de5b47b88e54e790a51bfcad0d197,4ddc77041f6de5b47b88e54e790a51bfcad0d197,Remove trailing spaces from scripting.c
antirez,2014-05-20 12:22:34,https://api.github.com/repos/antirez/redis/git/commits/01e3f9ba1d42a4113a24d8d37fa55400bca2fb5d,01e3f9ba1d42a4113a24d8d37fa55400bca2fb5d,Remove trailing spaces from sentinel.c.
michael-grunder,2014-05-19 20:18:13,https://api.github.com/repos/antirez/redis/git/commits/ea0e2524aae1bbd0fa6bd29e1867dc1ca133bfa5,ea0e2524aae1bbd0fa6bd29e1867dc1ca133bfa5,"Fix LUA_OBJCACHE segfault.

When scanning the argument list inside of a redis.call() invocation
for pre-cached values, there was no check being done that the
argument we were on was in fact within the bounds of the cache size.

So if a redis.call() command was ever executed with more than 32
arguments (current cache size #define setting) redis-server could
segfault."
antirez,2014-05-19 13:44:04,https://api.github.com/repos/antirez/redis/git/commits/a9e62ab9faee3d18478df8583d2bbb2eabfc3cef,a9e62ab9faee3d18478df8583d2bbb2eabfc3cef,HyperLogLog regression test for issue #1762.
antirez,2014-05-19 13:39:30,https://api.github.com/repos/antirez/redis/git/commits/04d901aed5e93c91f6642797f400bdc7f010086a,04d901aed5e93c91f6642797f400bdc7f010086a,"Merge pull request #1762 from trink/unstable

Correct the HyperLogLog stale cache flag to prevent unnecessary computat..."
antirez,2014-05-19 13:26:17,https://api.github.com/repos/antirez/redis/git/commits/194b78050e16431aa6b756b06476f458de540acc,194b78050e16431aa6b756b06476f458de540acc,Cluster test: better failure detection test and framework improvements.
antirez,2014-05-19 09:39:15,https://api.github.com/repos/antirez/redis/git/commits/a7da78e472b90aec6d877904394b8481d59d1f70,a7da78e472b90aec6d877904394b8481d59d1f70,Cluster test: failure detection initial tests.
antirez,2014-05-19 09:24:05,https://api.github.com/repos/antirez/redis/git/commits/4c04744734098576f884aa7ee3dfc64cd856043d,4c04744734098576f884aa7ee3dfc64cd856043d,Cluster test: proper initialization at unit startup.
trink,2014-05-18 14:26:26,https://api.github.com/repos/antirez/redis/git/commits/ba52cd06c87383964a44451f10310f0ea015277e,ba52cd06c87383964a44451f10310f0ea015277e,"Correct the HyperLogLog stale cache flag to prevent unnecessary computations.

Set the MSB as documented."
antirez,2014-05-15 15:03:28,https://api.github.com/repos/antirez/redis/git/commits/67133d2f4882da652fd3e78ba15220bce2488d05,67133d2f4882da652fd3e78ba15220bce2488d05,"Cluster: use clusterSetNodeAsMaster() during slave failover.

clusterHandleSlaveFailover() was reimplementing what
clusterSetNodeAsMaster() without any good reason."
antirez,2014-05-15 14:33:13,https://api.github.com/repos/antirez/redis/git/commits/8c6e92c3bc59052f16d8ba6f24040b66d28c03b2,8c6e92c3bc59052f16d8ba6f24040b66d28c03b2,"Cluster: clear todo_before_sleep flags when executing actions.

Thanks to this change, when there is some code like:

    clusterDoBeforeSleep(CLUSTER_TODO_UPDATE_STATE|...);
    ... and later before returning to the event loop ...
    clusterUpdateState();

The clusterUpdateState() function will clar the flag and will not be
repeated in the clusterBeforeSleep() function. This especially important
for config save/fsync flags which are slow to execute and not a good
idea to repeat without a good reason.

This is implemented for all the CLUSTER_TODO flags."
antirez,2014-05-15 10:33:57,https://api.github.com/repos/antirez/redis/git/commits/7b87cda70e1462aa4208c666a7816facf17c8938,7b87cda70e1462aa4208c666a7816facf17c8938,Fixed typo in CLUSTER RESET implementation.
antirez,2014-05-15 09:43:06,https://api.github.com/repos/antirez/redis/git/commits/796f4ae9f788849877d632c47d08076583f3d2d9,796f4ae9f788849877d632c47d08076583f3d2d9,"CLUSTER RESET implemented.

The new command is able to reset a cluster node so that it starts again
as a fresh node. By default the command performs a soft reset (the same
as calling it as CLUSTER RESET SOFT), and the following steps are
performed:

1) All slots are set as unassigned.
2) The list of known nodes is flushed.
3) Node is set as master if it is a slave.

When an hard reset is performed with CLUSTER RESET HARD the following
additional operations are performed:

4) A new Node ID is created at random.
5) Epochs are set to 0.

CLUSTER RESET is useful both when the sysadmin wants to reconfigure a
node with a different role (for example turning a slave into a master)
and for testing purposes.

It also may play a role in automatically provisioned Redis Clusters,
since it allows to reset a node back to the initial state in order to be
reconfigured."
antirez,2014-05-15 08:18:16,https://api.github.com/repos/antirez/redis/git/commits/8b9d5ecbd10307e19452d5f70c39f643fea878c2,8b9d5ecbd10307e19452d5f70c39f643fea878c2,Remove trailing spaces from cluster.c file.
antirez,2014-05-14 13:21:57,https://api.github.com/repos/antirez/redis/git/commits/0b7aa26164dcdd80a90ad2750c67d48be7c291fc,0b7aa26164dcdd80a90ad2750c67d48be7c291fc,Cluster test: added function assert_cluster_state.
antirez,2014-05-14 10:04:42,https://api.github.com/repos/antirez/redis/git/commits/60e5d1724cf3482ad50eab17ce9f29c0febab14d,60e5d1724cf3482ad50eab17ce9f29c0febab14d,Cluster: don't accept cluster bus connections during startup.
antirez,2014-05-14 08:46:37,https://api.github.com/repos/antirez/redis/git/commits/6baac558d87093bcc64fe053540f059664a0a429,6baac558d87093bcc64fe053540f059664a0a429,"Cluster: better handling of stolen slots.

The previous code handling a lost slot (by another master with an higher
configuration for the slot) was defensive, considering it an error and
putting the cluster in an odd state requiring redis-cli fix.

This was changed, because actually this only happens either in a
legitimate way, with failovers, or when the admin messed with the config
in order to reconfigure the cluster. So the new code instead will try to
make sure that the keys stored match the new slots map, by removing all
the keys in the slots we lost ownership from.

The function that deletes the keys from the lost slots is called only
if the node does not lose all its slots (resulting in a reconfiguration
as a slave of the node that got ownership). This is an optimization
since the replication code will anyway flush all the instance data in
a faster way."
antirez,2014-05-14 07:10:03,https://api.github.com/repos/antirez/redis/git/commits/27ca133d35323346714c0af5a650d3a8c0238099,27ca133d35323346714c0af5a650d3a8c0238099,cluster.tcl: fix redis links leak in refresh_nodes_map.
antirez,2014-05-13 22:15:52,https://api.github.com/repos/antirez/redis/git/commits/cdf2271c5b8c8574f8441cd1214ed28d9cb583db,cdf2271c5b8c8574f8441cd1214ed28d9cb583db,"cluster.tcl: saner error handling.

Better handling of connection errors in order to update the table and
recovery, populate the startup nodes table after fetching the list of
nodes.

More work to do about it, it is still not as reliable as
redis-rb-cluster implementation which is the minimal reference
implementation for Redis Cluster clients."
antirez,2014-05-13 22:14:35,https://api.github.com/repos/antirez/redis/git/commits/bae30479fba0f260dd65f2e8218ea69b5090f6b8,bae30479fba0f260dd65f2e8218ea69b5090f6b8,redis.tcl: return I/O error message when peer closes connection.
antirez,2014-05-12 15:43:36,https://api.github.com/repos/antirez/redis/git/commits/832a298005a8f7ccbdf1ff974a6928934f4c0ee9,832a298005a8f7ccbdf1ff974a6928934f4c0ee9,Cluster: fixed data_age computation / check integer overflow.
mattsta,2014-05-12 15:09:07,https://api.github.com/repos/antirez/redis/git/commits/7c4decb10183224ad9b33505bd6d5cbdb5d8d98b,7c4decb10183224ad9b33505bd6d5cbdb5d8d98b,"Fix lack of strtold under Cygwin

Renaming strtold to strtod then casting
the result is the standard way of dealing with
no strtold in Cygwin."
mattsta,2014-05-12 14:56:43,https://api.github.com/repos/antirez/redis/git/commits/3e0e51dd9fcfa9c361d716ba2fc935a40fadace3,3e0e51dd9fcfa9c361d716ba2fc935a40fadace3,"Fix lack of SA_ONSTACK under Cygwin

Fixes #232"
antirez,2014-05-12 14:34:20,https://api.github.com/repos/antirez/redis/git/commits/269233913800a51bdc0ef3eba6de1da13107b8fc,269233913800a51bdc0ef3eba6de1da13107b8fc,"Cluster: forced failover implemented.

Using CLUSTER FAILOVER FORCE it is now possible to failover a master in
a forced way, which means:

1) No check to understand if the master is up is performed.
2) No data age of the slave is checked. Evan a slave with very old data
   can manually failover a master in this way.
3) No chat with the master is attempted to reach its replication offset:
   the master can just be down."
antirez,2014-05-12 14:12:12,https://api.github.com/repos/antirez/redis/git/commits/005f564eb3e7c5675dfce0a250c6d0b30c69932c,005f564eb3e7c5675dfce0a250c6d0b30c69932c,"Cluster: bypass data_age check for manual failovers.

Automatic failovers only happen in Redis Cluster if the slave trying to
be elected was disconnected from its master for no more than 10 times
the node-timeout value. However there should be no such a check for
manual failovers, since these are initiated by the sysadmin that, in
theory, knows what she is doing when a slave is selected to be promoted."
antirez,2014-05-12 09:06:37,https://api.github.com/repos/antirez/redis/git/commits/658ad301ccb2876f316b8b6095e21ee855cd6e6e,658ad301ccb2876f316b8b6095e21ee855cd6e6e,"redis-trib create: use CONFIG SET-CONFIG-EPOCH before joining the cluster.

This way there is no need for the conflict resolution algo to be used in
order to start with a cluster where each node has a different
configEpoch."
antirez,2014-05-12 08:46:25,https://api.github.com/repos/antirez/redis/git/commits/63d1f9e570a80f73e56d02384307b3d4f6355daf,63d1f9e570a80f73e56d02384307b3d4f6355daf,"Sentinel: Add ""dir /tmp"" directive in example sentinel.conf."
antirez,2014-05-12 08:36:33,https://api.github.com/repos/antirez/redis/git/commits/715a6d3a7824b7c1cd1902be800b5aa8b638aa76,715a6d3a7824b7c1cd1902be800b5aa8b638aa76,redis-trib import: trap MIGRATE errors.
antirez,2014-05-12 08:22:04,https://api.github.com/repos/antirez/redis/git/commits/939c586ef74bbfbaa5fa88b270734a9332d7ca63,939c586ef74bbfbaa5fa88b270734a9332d7ca63,"redis-trib.rb: MIGRATE hardcoded timeout set to 15 sec.

Will be configurable / adaptive at some point but let's start with a
saner value compared to 1 sec which is not a good idea for big data
structures stored into a single key."
antirez,2014-05-12 08:01:59,https://api.github.com/repos/antirez/redis/git/commits/5c78f876661497a8588eed48b5c04cb6848280f4,5c78f876661497a8588eed48b5c04cb6848280f4,"RESTORE: reply with -BUSYKEY special error code.

The error when the target key is busy was a generic one, while it makes
sense to be able to distinguish between the target key busy error and
the others easily."
antirez,2014-05-10 15:59:31,https://api.github.com/repos/antirez/redis/git/commits/2a48bd4a372abedfb229f8ac4e607d022ed31bdd,2a48bd4a372abedfb229f8ac4e607d022ed31bdd,Cluster: initial ability to import data from standalone instance.
antirez,2014-05-09 14:36:59,https://api.github.com/repos/antirez/redis/git/commits/71d0e7e0ea97903c0fe631bc97ff49d60a418d86,71d0e7e0ea97903c0fe631bc97ff49d60a418d86,"CLUSTER MEET: better error messages when address is invalid.

Fixes issue #1734."
antirez,2014-05-09 14:11:11,https://api.github.com/repos/antirez/redis/git/commits/74435aba4794cfd0a29f8c746abae902aaaf8295,74435aba4794cfd0a29f8c746abae902aaaf8295,redis-trib: allow support for mandatory options.
antirez,2014-05-09 13:02:29,https://api.github.com/repos/antirez/redis/git/commits/72ff03346fcf3d5a839b85bd1ebd7850c2e5d9aa,72ff03346fcf3d5a839b85bd1ebd7850c2e5d9aa,DEBUG POPULATE: call dictExpand() to avoid useless rehashing.
antirez,2014-05-09 09:51:36,https://api.github.com/repos/antirez/redis/git/commits/8a170c817dd17be2823339620de1cf2ea8aa1468,8a170c817dd17be2823339620de1cf2ea8aa1468,"Cluster: bulk-accept new nodes connections.

The same change was operated for normal client connections. This is
important for Cluster as well, since when a node rejoins the cluster,
when a partition heals or after a restart, it gets flooded with new
connection attempts by all the other nodes trying to form a full
mesh again."
antirez,2014-05-09 09:44:46,https://api.github.com/repos/antirez/redis/git/commits/3625b52791ca0ff9e27ee5f1708a06a2229bf6d6,3625b52791ca0ff9e27ee5f1708a06a2229bf6d6,Cluster: clusterAcceptHandler() comments updated to match the code.
antirez,2014-05-08 14:38:53,https://api.github.com/repos/antirez/redis/git/commits/210277860645b15bf79815a47fe35f778c83ebc7,210277860645b15bf79815a47fe35f778c83ebc7,"Sentinel: log when a failover will be attempted again.

When a Sentinel performs a failover (successful or not), or when a
Sentinel votes for a different Sentinel trying to start a failover, it
sets a min delay before it will try to get elected for a failover.

While not strictly needed, because if multiple Sentinels will try
to failover the same master at the same time, only one configuration
will eventually win, this serialization is practically very useful.
Normal failovers are cleaner: one Sentinel starts to failover, the
others update their config when the Sentinel performing the failover
is able to get the selected slave to move from the role of slave to the
one of master.

However currently this timeout was implicit, so users could see
Sentinels not reacting, after a failed failover, for some time, without
giving any feedback in the logs to the poor sysadmin waiting for clues.

This commit makes Sentinels more verbose about the delay: when a master
is down and a failover attempt is not performed because the delay has
still not elaped, something like that will be logged:

    Next failover delay: I will not start a failover
    before Thu May  8 16:48:59 2014"
antirez,2014-05-08 13:59:34,https://api.github.com/repos/antirez/redis/git/commits/931beae9b07a2db105f904147c7cc65f1321773f,931beae9b07a2db105f904147c7cc65f1321773f,"Sentinel: generate +config-update-from event when a new config is received.

This event makes clear, before the switch-master event is generated,
that a Sentinel received a configuration update from another Sentinel."
antirez,2014-05-07 15:05:09,https://api.github.com/repos/antirez/redis/git/commits/0b0f872f3f1536e30b2fab0b4297ea960d8247e1,0b0f872f3f1536e30b2fab0b4297ea960d8247e1,"REDIS_ENCODING_EMBSTR_SIZE_LIMIT set to 39.

The new value is the limit for the robj + SDS header + string +
null-term to stay inside the 64 bytes Jemalloc arena in 64 bits
systems."
antirez,2014-05-07 14:04:45,https://api.github.com/repos/antirez/redis/git/commits/76c31d425e797ddf5daedd29d893d3fc9c7cfc19,76c31d425e797ddf5daedd29d893d3fc9c7cfc19,"Scripting test: check that Lua can call commands rewirting argv.

SPOP, tested in the new test, is among the commands rewritng the
client->argv argument vector (it gets rewritten as SREM) for command
replication purposes.

Because of recent optimizations to client->argv caching in the context
of the Lua internal Redis client, it is important to test for SPOP to be
callable from Lua without bad effects to the other commands."
antirez,2014-05-07 13:57:32,https://api.github.com/repos/antirez/redis/git/commits/088b9eadc430401df38cc7546ffa3156b71a0cd3,088b9eadc430401df38cc7546ffa3156b71a0cd3,"Test: handle new osx 'leaks' error.

Sometimes the process is still there but no longer in a state that can
be checked (after being killed). This used to happen after a call to
SHUTDOWN NOSAVE in the scripting unit, causing a false positive."
antirez,2014-05-06 13:39:14,https://api.github.com/repos/antirez/redis/git/commits/4f686555ce962e6632235d824512ea8fdeda003c,4f686555ce962e6632235d824512ea8fdeda003c,"Scripting: objects caching for Lua c->argv creation.

Reusing small objects when possible is a major speedup under certain
conditions, since it is able to avoid the malloc/free pattern that
otherwise is performed for every argument in the client command vector."
antirez,2014-05-06 13:04:02,https://api.github.com/repos/antirez/redis/git/commits/1e4ba6e7e64afa5e94987c09ac69469209791203,1e4ba6e7e64afa5e94987c09ac69469209791203,"Scripting: Use faster API for Lua client c->argv creation.

Replace the three calls to Lua API lua_tostring, lua_lua_strlen,
and lua_isstring, with a single call to lua_tolstring.

~ 5% consistent speed gain measured."
antirez,2014-05-06 10:10:22,https://api.github.com/repos/antirez/redis/git/commits/76fda9f8e10eb9cf1299fa6ca04f60d79462759e,76fda9f8e10eb9cf1299fa6ca04f60d79462759e,"Scripting: don't call lua_gc() after Lua script run.

Calling lua_gc() after every script execution is too expensive, and
apparently does not make the execution smoother: the same peak latency
was measured before and after the commit.

This change accounts for scripts execution speedup in the order of 10%."
antirez,2014-05-06 09:13:00,https://api.github.com/repos/antirez/redis/git/commits/48c49c485155ba9e4a7851fd1644c171674c6f0f,48c49c485155ba9e4a7851fd1644c171674c6f0f,"Scripting: cache argv in luaRedisGenericCommand().

~ 4% consistently measured speed improvement."
antirez,2014-05-06 08:34:22,https://api.github.com/repos/antirez/redis/git/commits/3318b747053bf5009f16c4f10599d4fd9d418b1c,3318b747053bf5009f16c4f10599d4fd9d418b1c,"Fixed missing c->bufpos reset in luaRedisGenericCommand().

Bug introduced when adding a fast path to avoid copying the reply buffer
for small replies that fit into the client static buffer."
antirez,2014-05-06 08:19:51,https://api.github.com/repos/antirez/redis/git/commits/c49955fd77e037cf2343bb664afe2332c6f5713e,c49955fd77e037cf2343bb664afe2332c6f5713e,"Scripting: replace tolower() with faster code in evalGenericCommand().

The function showed up consuming a non trivial amount of time in the
profiler output. After this change benchmarking gives a 6% speed
improvement that can be consistently measured."
antirez,2014-05-05 20:14:23,https://api.github.com/repos/antirez/redis/git/commits/0ef4f44c5a6b8d8900444c852baff223c647d5cb,0ef4f44c5a6b8d8900444c852baff223c647d5cb,"Scripting: luaRedisGenericCommand() fast path for buffer-only replies.

When the reply is only contained in the client static output buffer, use
a fast path avoiding the dynamic allocation of an SDS string to
concatenate the client reply objects."
antirez,2014-05-05 20:13:11,https://api.github.com/repos/antirez/redis/git/commits/8226be61ecb4e35a4e4f6845aa13eebd9c182b65,8226be61ecb4e35a4e4f6845aa13eebd9c182b65,Define HAVE_ATOMIC for clang.
antirez,2014-05-05 15:07:09,https://api.github.com/repos/antirez/redis/git/commits/40abeb1f40fecbb772630a7e9d8d4bb82f7d11a1,40abeb1f40fecbb772630a7e9d8d4bb82f7d11a1,"Scripting: simpler reply buffer creation in luaRedisGenericCommand().

It if faster to just create the string with a single sdsnewlen() call.
If c->bufpos is zero, the call will simply be like sdsemtpy()."
antirez,2014-05-02 14:37:12,https://api.github.com/repos/antirez/redis/git/commits/1c130c6b037f9f2ec27ddf6da095d25deb3d6fa2,1c130c6b037f9f2ec27ddf6da095d25deb3d6fa2,"Test: cluster/base, check that we can write/read from cluster."
antirez,2014-05-02 13:35:08,https://api.github.com/repos/antirez/redis/git/commits/3bc119c1558b1633f96050e2439057b7754136fc,3bc119c1558b1633f96050e2439057b7754136fc,Cluster: Tcl cluster client: handle MOVED/ASK.
antirez,2014-05-02 08:55:07,https://api.github.com/repos/antirez/redis/git/commits/fcd2065f8eb6ca0518027188eea5c03eaa3d5e70,fcd2065f8eb6ca0518027188eea5c03eaa3d5e70,"Cluster: Tcl cluster client: slots-nodes map and close method.

Now the client is able to actually run commands in a Redis Cluster
assuming the slots->nodes map is stable."
antirez,2014-05-02 08:19:28,https://api.github.com/repos/antirez/redis/git/commits/5344357f802c4882a2af781fab4ba72d6c26e34d,5344357f802c4882a2af781fab4ba72d6c26e34d,Cluster: Tcl cluster client: build nodes representation.
antirez,2014-05-02 07:55:27,https://api.github.com/repos/antirez/redis/git/commits/8b7e23bddeba6cb0727de3f1a83f2f672ebf1d05,8b7e23bddeba6cb0727de3f1a83f2f672ebf1d05,Cluster: Tcl cluster client: get nodes description.
antirez,2014-04-30 16:55:28,https://api.github.com/repos/antirez/redis/git/commits/bc8ea04a7db7b080f734b111102c97ba6cadf489,bc8ea04a7db7b080f734b111102c97ba6cadf489,Cluster: Tcl cluster client key -> hashslot.
antirez,2014-04-30 13:47:17,https://api.github.com/repos/antirez/redis/git/commits/e8357d0f858f2cd90fb1671fcfa02620d246e7c1,e8357d0f858f2cd90fb1671fcfa02620d246e7c1,Cluster test: Tcl cluster library initial skeleton.
antirez,2014-04-30 07:29:03,https://api.github.com/repos/antirez/redis/git/commits/1db45ba58cf612f9b7857771ffc8c41e8a355f50,1db45ba58cf612f9b7857771ffc8c41e8a355f50,Cluster test: check for state=ok after slot allocation.
antirez,2014-04-29 17:15:16,https://api.github.com/repos/antirez/redis/git/commits/11d9ecb71d44987d2cb365e90b00fe15434426d7,11d9ecb71d44987d2cb365e90b00fe15434426d7,"CLUSTER SET-CONFIG-EPOCH implemented.

Initially Redis Cluster accepted that after cluster creation all the
nodes were at configEpoch 0, evolving from zero as failovers happen.

However later the semantic was made more strict in order to make sure a
cluster has always all the master nodes with a different configEpoch,
which is more robust in some corner case (especially resulting from
errors by the system administrator).

To assign different configEpochs to different nodes at startup was a
task performed naturally by the config conflicts resolution algorithm
(see the Cluster specification). However this works well only for small
clusters or when there are actually just a few collisions, since it is
designed for exceptional cases.

When a large cluster is created hundred of nodes can be at epoch 0, so
the conflict resolution code is slow to provide an unique config to each
node. For this reason this new command was introduced. It can be called
only when a node is totally fresh: no other nodes known, and configEpoch
set to zero, so it is safe even against misuses.

redis-trib will use the new command in order to start the cluster
already setting an incremental unique config to every node."
antirez,2014-04-29 16:40:43,https://api.github.com/repos/antirez/redis/git/commits/7b5ce1ffb1d730774f1d8e990fea38e9ab54a148,7b5ce1ffb1d730774f1d8e990fea38e9ab54a148,Cluster test: slots allocation.
antirez,2014-04-29 14:20:02,https://api.github.com/repos/antirez/redis/git/commits/4a3db2550441423f84c964a0d519426cf44020dc,4a3db2550441423f84c964a0d519426cf44020dc,"Cluster test: use 20 instances.

This makes tests a bit slower, but it is better to test things at a
decent scale instead of using just a few nodes, and for a few tests we
actually need so many nodes."
antirez,2014-04-29 14:17:15,https://api.github.com/repos/antirez/redis/git/commits/e8631a69917f1c0581a28edac8dcdf98cca82e18,e8631a69917f1c0581a28edac8dcdf98cca82e18,Cluster / Sentinel test: instances count moved to run.tcl.
antirez,2014-04-29 13:39:54,https://api.github.com/repos/antirez/redis/git/commits/9e422f74a6ef110eacb29c975c25a3403eba1aec,9e422f74a6ef110eacb29c975c25a3403eba1aec,Cluster test: config epoch conflict resolution.
antirez,2014-04-29 13:00:11,https://api.github.com/repos/antirez/redis/git/commits/2c556223330e656404bbce82db61daec604e7015,2c556223330e656404bbce82db61daec604e7015,Cluster test: auto-discovery to form full mesh.
antirez,2014-04-29 08:42:32,https://api.github.com/repos/antirez/redis/git/commits/2555b2f4bd0499fe16f50d004d3596132e8a33ba,2555b2f4bd0499fe16f50d004d3596132e8a33ba,Cluster test: check that every node has a different ID.
antirez,2014-04-29 08:42:17,https://api.github.com/repos/antirez/redis/git/commits/e1b129811af5010730108537fede2421dbc841fa,e1b129811af5010730108537fede2421dbc841fa,Cluster test: basic cluster nodes info access functions.
antirez,2014-04-28 15:36:57,https://api.github.com/repos/antirez/redis/git/commits/0bcc7cb4bfe733e7ea12599a926e52aece3bfa50,0bcc7cb4bfe733e7ea12599a926e52aece3bfa50,"CLIENT LIST speedup via peerid caching + smart allocation.

This commit adds peer ID caching in the client structure plus an API
change and the use of sdsMakeRoomFor() in order to improve the
reallocation pattern to generate the CLIENT LIST output.

Both the changes account for a very significant speedup."
antirez,2014-04-28 14:41:38,https://api.github.com/repos/antirez/redis/git/commits/f9a4a80f499a30b7240328b46fdb9bf76d173fe9,f9a4a80f499a30b7240328b46fdb9bf76d173fe9,Use sdscatfmt() in getClientInfoString() to make it faster.
antirez,2014-04-28 14:38:17,https://api.github.com/repos/antirez/redis/git/commits/2d76736a2ef00419320dae793e3523144e5f8c1c,2d76736a2ef00419320dae793e3523144e5f8c1c,"Added new sdscatfmt() %u and %U format specifiers.

This commit also fixes a bug in the implementation of sdscatfmt()
resulting from stale references to the SDS string header after
sdsMakeRoomFor() calls."
antirez,2014-04-28 08:52:08,https://api.github.com/repos/antirez/redis/git/commits/53575c4708318a2d33270d36943c206a016eecef,53575c4708318a2d33270d36943c206a016eecef,"sdscatfmt() added to SDS library.

sdscatprintf() relies on printf() family libc functions and is sometimes
too slow in critical code paths. sdscatfmt() is an alternative which is:

1) Far less capable.
2) Format specifier uncompatible.
3) Faster.

It is suitable to be used in those speed critical code paths such as
CLIENT LIST output generation."
antirez,2014-04-24 16:21:12,https://api.github.com/repos/antirez/redis/git/commits/93e7a130fc9594e41ccfc996b5eca7626ae5356a,93e7a130fc9594e41ccfc996b5eca7626ae5356a,Test: fixed scripting.tcl test false positive.
antirez,2014-04-24 15:36:47,https://api.github.com/repos/antirez/redis/git/commits/e29d3307244b899587e155571176fb209e26c4c6,e29d3307244b899587e155571176fb209e26c4c6,"Process events with processEventsWhileBlocked() when blocked.

When we are blocked and a few events a processed from time to time, it
is smarter to call the event handler a few times in order to handle the
accept, read, write, close cycle of a client in a single pass, otherwise
there is too much latency added for clients to receive a reply while the
server is busy in some way (for example during the DB loading)."
antirez,2014-04-24 15:33:57,https://api.github.com/repos/antirez/redis/git/commits/3a3458ee7b48f66355e328ab9ed20830e5a58ef6,3a3458ee7b48f66355e328ab9ed20830e5a58ef6,"Accept multiple clients per iteration.

When the listening sockets readable event is fired, we have the chance
to accept multiple clients instead of accepting a single one. This makes
Redis more responsive when there is a mass-connect event (for example
after the server startup), and in workloads where a connect-disconnect
pattern is used often, so that multiple clients are waiting to be
accepted continuously.

As a side effect, this commit makes the LOADING, BUSY, and similar
errors much faster to deliver to the client, making Redis more
responsive when there is to return errors to inform the clients that the
server is blocked in an not interruptible operation."
antirez,2014-04-24 19:43:16,https://api.github.com/repos/antirez/redis/git/commits/cac4bae11ae9f5ce770220ce1f8a70f5033866f4,cac4bae11ae9f5ce770220ce1f8a70f5033866f4,"AE_ERR -> ANET_ERR in acceptUnixHandler().

No actual changes since the value is the same."
antirez,2014-04-24 16:01:41,https://api.github.com/repos/antirez/redis/git/commits/c3f85c010738a9a84bf60d2b4c7654c5c6b76e92,c3f85c010738a9a84bf60d2b4c7654c5c6b76e92,Redis Cluster test framework skeleton.
antirez,2014-04-24 15:03:07,https://api.github.com/repos/antirez/redis/git/commits/7d9b45b4a17edbfbce776487051539ff9a7f886d,7d9b45b4a17edbfbce776487051539ff9a7f886d,"While ANET_ERR is -1, check syscall retval for -1 itself."
antirez,2014-04-24 14:23:03,https://api.github.com/repos/antirez/redis/git/commits/e3cf812c9e7db2bedd1063421d4b3bb1d46484be,e3cf812c9e7db2bedd1063421d4b3bb1d46484be,"clusterLoadConfig() REDIS_ERR retval semantics refined.

We should return REDIS_ERR to signal we can't read the configuration
because there is no config file only after checking errno, othewise
we risk to rewrite an existing file that was not accessible for some
other reason."
antirez,2014-04-24 14:04:08,https://api.github.com/repos/antirez/redis/git/commits/db06108bc17205f29e363b5ba1664e1b9dbd9afc,db06108bc17205f29e363b5ba1664e1b9dbd9afc,"Lock nodes.conf to avoid multiple processes using the same file.

This was a common source of problems among users.
The solution adopted is not bullet-proof as if the user deletes the
nodes.conf file manually, and starts a new instance with the same
nodes.conf file path, two instances will use the same file. However
following this reasoning the user may drop a nuclear bomb into the
datacenter as well."
antirez,2014-04-24 09:08:22,https://api.github.com/repos/antirez/redis/git/commits/897adc1c8c6bbe5bc23bb85b97f5114fbb59cd99,897adc1c8c6bbe5bc23bb85b97f5114fbb59cd99,"Sentinel test files / directories layout improved.

The test now runs in a self-contained directory.
The general abstractions to run the tests in an environment where
mutliple instances are executed at the same time was extrapolated into
instances.tcl, that will be reused to test Redis Cluster."
antirez,2014-04-24 08:50:51,https://api.github.com/repos/antirez/redis/git/commits/e6b681365614a7e49110b0547456288a8f02d5e6,e6b681365614a7e49110b0547456288a8f02d5e6,Test: spawn_instance now supports additional config.
antirez,2014-04-23 14:13:49,https://api.github.com/repos/antirez/redis/git/commits/32c917964efb7c617597a409e02deef9952763f8,32c917964efb7c617597a409e02deef9952763f8,"Merge pull request #1677 from mattsta/expire-before-delete

Check key expiration before deleting"
nirvdrum,2014-04-22 14:51:19,https://api.github.com/repos/antirez/redis/git/commits/12e435d2a49a3a121b91b14c23162c800d5fb798,12e435d2a49a3a121b91b14c23162c800d5fb798,Fixed typos.
glommer,2014-04-08 10:47:50,https://api.github.com/repos/antirez/redis/git/commits/7dd4432798ddf48a02f1ce1296aa142cf57e3703,7dd4432798ddf48a02f1ce1296aa142cf57e3703,"fix null pointer access with no file pointer

I happen to be working on a system that lacks urandom. While the code does try
to handle this case and artificially create some bytes if the file pointer is
empty, it does try to close it unconditionally, leading to a segfault."
antirez,2014-04-23 09:37:47,https://api.github.com/repos/antirez/redis/git/commits/e0918a332dd2fd03c39df4b86007a423160dc6b2,e0918a332dd2fd03c39df4b86007a423160dc6b2,"Merge pull request #1701 from kingsumos/node_description

fix cluster node description showing wrong slot allocation"
antirez,2014-04-23 08:19:43,https://api.github.com/repos/antirez/redis/git/commits/cb4e2ee9e784f23bbef1bb57c6c332dd3d2472bd,cb4e2ee9e784f23bbef1bb57c6c332dd3d2472bd,"Missing return REDIS_ERR added to processMultibulkBuffer().

When we set a protocol error we should return with REDIS_ERR to let the
caller know it should stop processing the client.

Bug found in a code auditing related to issue #1699."
kingsumos,2014-04-22 15:44:53,https://api.github.com/repos/antirez/redis/git/commits/a69178fdd2df5a0045a49f89ac24e4f91c2a89cf,a69178fdd2df5a0045a49f89ac24e4f91c2a89cf,fix cluster node description showing wrong slot allocation
antirez,2014-04-22 14:14:38,https://api.github.com/repos/antirez/redis/git/commits/20c040d364e2af83a55e70af01663f46f22e1c28,20c040d364e2af83a55e70af01663f46f22e1c28,redis-cli help.h updated.
antirez,2014-04-22 14:13:58,https://api.github.com/repos/antirez/redis/git/commits/9eeb03e5f70e8e6cd505423d861dba8c1495f7d0,9eeb03e5f70e8e6cd505423d861dba8c1495f7d0,generate-command-help.rb updated with new hyperloglog group.
yoav-steinberg,2014-04-22 07:01:21,https://api.github.com/repos/antirez/redis/git/commits/fdaab0234787d1bb835680825ea919d7cba3723e,fdaab0234787d1bb835680825ea919d7cba3723e,Merge remote-tracking branch 'upstream/unstable' into unstable
antirez,2014-04-18 11:02:16,https://api.github.com/repos/antirez/redis/git/commits/9caa1ae96aa6ff7dcb5058d2ff0b132abcb205f7,9caa1ae96aa6ff7dcb5058d2ff0b132abcb205f7,Fuzzy test for ZREMRANGEBYLEX added.
antirez,2014-04-18 11:01:04,https://api.github.com/repos/antirez/redis/git/commits/ab3afe2f4d3732ee908ef1c78752dbf492643de2,ab3afe2f4d3732ee908ef1c78752dbf492643de2,ZREMRANGEBYLEX memory leak removed calling zslFreeLexRange().
antirez,2014-04-18 10:36:33,https://api.github.com/repos/antirez/redis/git/commits/85a2f2354ea604f0b69f109aa8d117e9968353ac,85a2f2354ea604f0b69f109aa8d117e9968353ac,PFCOUNT multi-key test added.
antirez,2014-04-17 16:02:45,https://api.github.com/repos/antirez/redis/git/commits/5eb7ac0c920336b5711f125b6dcc627d89b9f970,5eb7ac0c920336b5711f125b6dcc627d89b9f970,"Speedup hllRawSum() processing 8 bytes per iteration.

The internal HLL raw encoding used by PFCOUNT when merging multiple keys
is aligned to 8 bits (1 byte per register) so we can exploit this to
improve performances by processing multiple bytes per iteration.

In benchmarks the new code was several times faster with HLLs with many
registers set to zero, while no slowdown was observed with populated
HLLs."
antirez,2014-04-17 15:53:20,https://api.github.com/repos/antirez/redis/git/commits/192a21327469cf3b01fd8bb17581dfda05a772f7,192a21327469cf3b01fd8bb17581dfda05a772f7,"Speedup SUM(2^-reg[m]) in HyperLogLog computation.

When the register is set to zero, we need to add 2^-0 to E, which is 1,
but it is faster to just add 'ez' at the end, which is the number of
registers set to zero, a value we need to compute anyway."
antirez,2014-04-17 15:29:04,https://api.github.com/repos/antirez/redis/git/commits/0feb2aabcad2943b9cec850f2495a7d7f91a998b,0feb2aabcad2943b9cec850f2495a7d7f91a998b,PFCOUNT support for multi-key union.
antirez,2014-04-17 15:08:43,https://api.github.com/repos/antirez/redis/git/commits/fcd2155b6f6d0beb88ba3b008e23a9c366af5c9f,fcd2155b6f6d0beb88ba3b008e23a9c366af5c9f,HyperLogLog low level merge extracted from PFMERGE.
antirez,2014-04-17 12:47:52,https://api.github.com/repos/antirez/redis/git/commits/78954ca3a2a3b4fdb731bd43b7cbab2d3a619871,78954ca3a2a3b4fdb731bd43b7cbab2d3a619871,ZREMRANGEBYLEX implemented.
antirez,2014-04-17 12:30:12,https://api.github.com/repos/antirez/redis/git/commits/8827dc4eec0130e292387db0e81930bd8515dd0e,8827dc4eec0130e292387db0e81930bd8515dd0e,Always pass sorted set range objects by reference.
antirez,2014-04-17 12:19:14,https://api.github.com/repos/antirez/redis/git/commits/95098b7230606299769df89b070105c755b5f594,95098b7230606299769df89b070105c755b5f594,ZREMRANGE* commands refactored into a single generic function.
antirez,2014-04-17 08:25:58,https://api.github.com/repos/antirez/redis/git/commits/c0ccd4da7d9e2d3c4ae21d563da7c2633b50435c,c0ccd4da7d9e2d3c4ae21d563da7c2633b50435c,Sorted set lex ranges stress tester.
antirez,2014-04-16 22:08:11,https://api.github.com/repos/antirez/redis/git/commits/5c4843234032f11c43d0b337142fb4c46c336c7a,5c4843234032f11c43d0b337142fb4c46c336c7a,Basic ZRANGEBYLEX / ZLEXCOUNT tests.
antirez,2014-04-16 21:55:58,https://api.github.com/repos/antirez/redis/git/commits/bcab07f7fcc6962c49b9899879bb9be957c9539c,bcab07f7fcc6962c49b9899879bb9be957c9539c,"Pass by pointer and release of lex ranges.

Given that the code was written with a 2 years pause... something
strange happened in the middle. So there was no function to free a
lex range min/max objects, and in some places the range was passed by
value."
antirez,2014-04-16 10:17:00,https://api.github.com/repos/antirez/redis/git/commits/8b5e0b213e9dafa88f206155fd60df23d0bc803a,8b5e0b213e9dafa88f206155fd60df23d0bc803a,"ZLEXCOUNT implemented.

Like ZCOUNT for lexicographical ranges."
antirez,2014-04-16 07:17:38,https://api.github.com/repos/antirez/redis/git/commits/cffeafe39165f5d5d73486d1a3c337a2edadfd5f,cffeafe39165f5d5d73486d1a3c337a2edadfd5f,More HyperLogLog tests.
antirez,2014-04-16 07:10:30,https://api.github.com/repos/antirez/redis/git/commits/8e8f8189eb1b15ce4f03f542c36b7a626e08cf8e,8e8f8189eb1b15ce4f03f542c36b7a626e08cf8e,HyperLogLog invalid representation error code set to INVALIDOBJ.
antirez,2014-04-16 07:05:42,https://api.github.com/repos/antirez/redis/git/commits/0bbdaca6a0b10de3b8bfdbb57c902975a79c2646,0bbdaca6a0b10de3b8bfdbb57c902975a79c2646,"PFDEBUG TODENSE added.

Converts HyperLogLogs from sparse to dense. Used for testing."
antirez,2014-04-15 15:46:51,https://api.github.com/repos/antirez/redis/git/commits/402110f9fdf62ccbd5d3d5e95cf5b6b760442b9e,402110f9fdf62ccbd5d3d5e95cf5b6b760442b9e,User-defined switch point between sparse-dense HLL encodings.
antirez,2014-04-15 08:10:38,https://api.github.com/repos/antirez/redis/git/commits/d541f65d66706c63a5eb60c13319238297e53971,d541f65d66706c63a5eb60c13319238297e53971,PFSELFTEST improved with sparse encoding checks.
antirez,2014-04-14 17:35:00,https://api.github.com/repos/antirez/redis/git/commits/dde8dff73fd814910b317df2beb84b88d5659d37,dde8dff73fd814910b317df2beb84b88d5659d37,PFDEBUG ENCODING added.
antirez,2014-04-14 14:15:55,https://api.github.com/repos/antirez/redis/git/commits/54f0156e8cbf1a58243d3a2b35f61311e1a034a4,54f0156e8cbf1a58243d3a2b35f61311e1a034a4,"Set HLL_SPARSE_MAX to 3000.

After running a few benchmarks, 3000 looks like a reasonable value to
keep HLLs with a few thousand elements small while the CPU cost is
still not huge.

This covers all the cases where the dense representation would use N
orders of magnitude more space, like in the case of many HLLs with
carinality of a few tens or hundreds.

It is not impossible that in the future this gets user configurable,
however it is easy to pick an unreasoable value just looking at savings
in the space dimension without checking what happens in the time
dimension."
antirez,2014-04-14 14:11:54,https://api.github.com/repos/antirez/redis/git/commits/848d0461f9025fad994efec2e685c4c68fe625fe,848d0461f9025fad994efec2e685c4c68fe625fe,Error message for invalid HLL objects unified.
antirez,2014-04-14 14:09:32,https://api.github.com/repos/antirez/redis/git/commits/81ceef7d22bcc1a30bce029ffae1a53f4752b7ed,81ceef7d22bcc1a30bce029ffae1a53f4752b7ed,PFMERGE fixed to work with sparse encoding.
antirez,2014-04-14 13:57:50,https://api.github.com/repos/antirez/redis/git/commits/9df77fc0c4586a7b49605a85a6e68fd1a5273a20,9df77fc0c4586a7b49605a85a6e68fd1a5273a20,"Mark PFDEBUG as write command in the commands table.

It is safer since it is able to have side effects."
antirez,2014-04-14 13:56:30,https://api.github.com/repos/antirez/redis/git/commits/3bc35f9ce917c630c401b2ed0d56b3a51658a5e2,3bc35f9ce917c630c401b2ed0d56b3a51658a5e2,"Correctly replicate PFDEBUG GETREG.

Even if it is a debugging command, make sure that when it forces a
change in encoding, the command is propagated."
antirez,2014-04-14 13:55:21,https://api.github.com/repos/antirez/redis/git/commits/ba0afb45661d1ab4d607782cd8afee0dfa3eb893,ba0afb45661d1ab4d607782cd8afee0dfa3eb893,"Added assertion in hllSparseAdd() when promotion to dense occurs.

If we converted to dense, a register must be updated in the dense
representation."
antirez,2014-04-14 13:42:05,https://api.github.com/repos/antirez/redis/git/commits/e9cd51c7ebbe998a79b52b28fde0b31970dcb7a0,e9cd51c7ebbe998a79b52b28fde0b31970dcb7a0,"hllSparseAdd(): speed optimization.

Mostly by reordering opcodes check conditional by frequency of opcodes
in larger sparse-encoded HLLs."
antirez,2014-04-14 13:20:26,https://api.github.com/repos/antirez/redis/git/commits/681bf7468bd55d524ee71cbb7aa43526dad07d5c,681bf7468bd55d524ee71cbb7aa43526dad07d5c,Detect corrupted sparse HLLs in hllSparseSum().
antirez,2014-04-14 10:58:46,https://api.github.com/repos/antirez/redis/git/commits/db40da0a47ef924ea26ceb9bb73ffa121c20031c,db40da0a47ef924ea26ceb9bb73ffa121c20031c,"hllSparseAdd(): faster code removing conditional.

Bottleneck found profiling. Big run time improvement found when testing
after the change."
antirez,2014-04-14 10:12:53,https://api.github.com/repos/antirez/redis/git/commits/4e0a99ba51cf22ae695187e9215796f1c645a253,4e0a99ba51cf22ae695187e9215796f1c645a253,Comment typo in hllSparseAdd(). first -> fits.
antirez,2014-04-14 10:09:37,https://api.github.com/repos/antirez/redis/git/commits/5532b5308a65f627a5d9a17e4ae6da77fd95b8c2,5532b5308a65f627a5d9a17e4ae6da77fd95b8c2,"Merge adjacent VAL opcodes in hllSparseAdd().

As more values are added splitting ZERO or XZERO opcodes, try to merge
adjacent VAL opcodes if they have the same value."
antirez,2014-04-14 09:49:53,https://api.github.com/repos/antirez/redis/git/commits/837ca39081855bb1ea00e63f6cee642bffb35e71,837ca39081855bb1ea00e63f6cee642bffb35e71,"More robust HLL_SPARSE macros protecting 'p' with parens.

Now the macros will work with arguments such as ""ptr+1""."
antirez,2014-04-14 09:04:11,https://api.github.com/repos/antirez/redis/git/commits/142d133c8a9d83540b4543796ec108d913024304,142d133c8a9d83540b4543796ec108d913024304,hllSparseAdd() opcode seek stop condition fixed.
antirez,2014-04-14 08:25:19,https://api.github.com/repos/antirez/redis/git/commits/1ee18db922aaf03cc1e0f04a5b0d9764f9d0ceb5,1ee18db922aaf03cc1e0f04a5b0d9764f9d0ceb5,"Fixed error message generation in PFDEBUG GETREG.

Bulk length for registers was emitted too early, so if there was a bug
the reply looked like a long array with just one element, blocking the
client as result."
antirez,2014-04-14 07:40:07,https://api.github.com/repos/antirez/redis/git/commits/82c31f750d71686f0412085ff35f67b37b407cc6,82c31f750d71686f0412085ff35f67b37b407cc6,Fixed memmove() count in hllSparseAdd().
antirez,2014-04-14 07:36:27,https://api.github.com/repos/antirez/redis/git/commits/3b200035037652e439ed22e884c2f8c10b097a52,3b200035037652e439ed22e884c2f8c10b097a52,"hllSparseAdd(): more correct dense conversion conditional.

We want to promote if the total string size exceeds the resulting size
after the upgrade."
antirez,2014-04-14 07:27:01,https://api.github.com/repos/antirez/redis/git/commits/b7571b7453e1597ef7ed5041a06a3fd97c99c0d0,b7571b7453e1597ef7ed5041a06a3fd97c99c0d0,"hllSparseToDense(): sanity check added.

The function checks if all the HLL_REGISTERS were processed during the
convertion from sparse to dense encoding, returning REDIS_OK or
REDIS_ERR to signal a corruption problem.

A bug in PFDEBUG GETREG was fixed: when the object is converted to the
dense representation we need to reassign the new pointer to the header
structure pointer."
antirez,2014-04-14 06:59:13,https://api.github.com/repos/antirez/redis/git/commits/f9dc3cb04d5fdca59bc2d92fe1bae586eb4a9a5b,f9dc3cb04d5fdca59bc2d92fe1bae586eb4a9a5b,"PFDEBUG DECODE added.

Provides a human readable description of the opcodes composing a
run-length encoded HLL (sparse encoding).
The command is only useful for debugging / development tasks."
antirez,2014-04-13 21:01:21,https://api.github.com/repos/antirez/redis/git/commits/261da523e860146066e052771e2217a84bc8d168,261da523e860146066e052771e2217a84bc8d168,"PFDEBUG added, PFGETREG removed.

PFDEBUG will be the interface to do debugging tasks with a key
containing an HLL object."
antirez,2014-04-13 20:59:27,https://api.github.com/repos/antirez/redis/git/commits/e8e717e1452ecef60590f3d7a2c5dab37b620cfd,e8e717e1452ecef60590f3d7a2c5dab37b620cfd,"hllSparseToDense API changed to take ref to object.

The new API takes directly the object doing everything needed to
turn it into a dense representation, including setting the new
representation as object->ptr."
antirez,2014-04-13 08:19:12,https://api.github.com/repos/antirez/redis/git/commits/2067644a8ce31731bd2b811f6372cd404f42bd48,2067644a8ce31731bd2b811f6372cd404f42bd48,hllSparseAdd() sanity check for span != 0 added.
antirez,2014-04-12 21:55:29,https://api.github.com/repos/antirez/redis/git/commits/80140fa0069f48ee4753c90a9c6cec41ba26f44e,80140fa0069f48ee4753c90a9c6cec41ba26f44e,"Fix hllSparseAdd() new sequence replacement when next is NULL.

sdsIncrLen() must be called anyway even if we are replacing the last
oppcode of the sparse representation."
antirez,2014-04-12 21:52:36,https://api.github.com/repos/antirez/redis/git/commits/3c3c16561a5e0896109a26a1cb50555dae996868,3c3c16561a5e0896109a26a1cb50555dae996868,Fix seqlen computation in hllSparseAdd().
antirez,2014-04-12 21:42:48,https://api.github.com/repos/antirez/redis/git/commits/a9e057e095a6ccc38f79fe427c8a7624bbb57a4f,a9e057e095a6ccc38f79fe427c8a7624bbb57a4f,Abstract hllSparseAdd() / hllDenseAdd() via hllAdd().
antirez,2014-04-12 14:47:50,https://api.github.com/repos/antirez/redis/git/commits/0b7d08efb985781bddadc8e528fef9bd4cadb863,0b7d08efb985781bddadc8e528fef9bd4cadb863,hllSparseSum(): multiply 1 * runlen for zero entries.
antirez,2014-04-12 14:46:08,https://api.github.com/repos/antirez/redis/git/commits/d9314079cac4fc869e8c277c4ea7e57b53a2ded2,d9314079cac4fc869e8c277c4ea7e57b53a2ded2,Macro HLL_SPARSE_XZERO_LEN fixed.
antirez,2014-04-12 14:37:11,https://api.github.com/repos/antirez/redis/git/commits/f5c03044a6ff53daeafce786908c548645312964,f5c03044a6ff53daeafce786908c548645312964,"Fix HLL sparse object creation #2.

Two vars initialized to wrong values in createHLLObject()."
antirez,2014-04-12 09:02:14,https://api.github.com/repos/antirez/redis/git/commits/b5659cb0a6c25d26d5dad0675a99e20bade986ed,b5659cb0a6c25d26d5dad0675a99e20bade986ed,Increment pointer while iterating sparse HLL object.
antirez,2014-04-12 08:59:12,https://api.github.com/repos/antirez/redis/git/commits/1ccb661569635e07d146c133cdfdb9b648da2b99,1ccb661569635e07d146c133cdfdb9b648da2b99,"Fix HLL sparse object creation.

The function didn't considered the fact that each XZERO opcode is
two bytes."
antirez,2014-04-12 08:56:11,https://api.github.com/repos/antirez/redis/git/commits/a79386b1af299fc708acb4fabee3fbe9d529eb0a,a79386b1af299fc708acb4fabee3fbe9d529eb0a,Create HyperLogLog objects with sparse encoding.
antirez,2014-04-12 08:55:28,https://api.github.com/repos/antirez/redis/git/commits/1fc04a62217ab38efa2ce86654016f882c6763c1,1fc04a62217ab38efa2ce86654016f882c6763c1,HyperLogLog sparse to dense conversion function.
antirez,2014-04-11 15:27:40,https://api.github.com/repos/antirez/redis/git/commits/c756936b1df92459fd577ad1fd733c7d08bb09c0,c756936b1df92459fd577ad1fd733c7d08bb09c0,"HyperLogLog sparse representation initial implementation.

Code never tested, but the basic layout is shaped in this commit.
Also missing:

1) Sparse -> Dense conversion function.
2) New HLL object creation using the sparse representation.
3) Implementation of PFMERGE for the sparse representation."
antirez,2014-04-11 08:25:07,https://api.github.com/repos/antirez/redis/git/commits/8ea5b46d30cf7e314eaf7b78ef7f754cb868335a,8ea5b46d30cf7e314eaf7b78ef7f754cb868335a,hllCount() refactored to support multiple representations.
antirez,2014-04-11 07:47:52,https://api.github.com/repos/antirez/redis/git/commits/1efc1e052da15e78f3c1b17c3adf8ba4690a36e5,1efc1e052da15e78f3c1b17c3adf8ba4690a36e5,"hllAdd() refactored into two functions.

Also dense representation access macro renamed accordingly."
antirez,2014-04-11 07:26:45,https://api.github.com/repos/antirez/redis/git/commits/d55474e558c9743720e5cfeb500ada59c3a51bbd,d55474e558c9743720e5cfeb500ada59c3a51bbd,"HyperLogLog refactoring to support different encodings.

Metadata are now placed at the start of the representation as an header.
There is a proper structure to access the representation.
Still work to do in order to truly abstract the implementation from the
representation, commands still work assuming dense representation."
mattsta,2014-04-10 22:32:19,https://api.github.com/repos/antirez/redis/git/commits/88530804e8c7ad977277ea693026b2b0a5f4816d,88530804e8c7ad977277ea693026b2b0a5f4816d,"Add test for deleting an expired key

Verify proper expire-before-delete behavior.

This test passes with the expire-before-delete commit and fails
without it."
mattsta,2014-04-10 21:08:02,https://api.github.com/repos/antirez/redis/git/commits/83d28303725ea48e6ba1ab08b57d1eacf9137961,83d28303725ea48e6ba1ab08b57d1eacf9137961,"Check key expiration before deleting

Deleting an expired key should return 0, not success.

Fixes #1648"
antirez,2014-04-10 14:36:31,https://api.github.com/repos/antirez/redis/git/commits/9c037ba85f5af0f9e41c82a6e95f0013ab1d46c9,9c037ba85f5af0f9e41c82a6e95f0013ab1d46c9,"HyperLogLog sparse representation slightly modified.

After running a few simulations with different alternative encodings,
it was found that the VAL opcode performs better using 5 bits for the
value and 2 bits for the run length, at least for cardinalities in the
range of interest."
antirez,2014-04-09 16:56:00,https://api.github.com/repos/antirez/redis/git/commits/da2fbcf93d63cba792fbc3b78e0152bab3688f56,da2fbcf93d63cba792fbc3b78e0152bab3688f56,HyperLogLog sparse representation description and macros.
antirez,2014-04-07 06:57:05,https://api.github.com/repos/antirez/redis/git/commits/67bb2c46b2b3882ba1ceadcbf94fab7d44b39ef6,67bb2c46b2b3882ba1ceadcbf94fab7d44b39ef6,"Add casting to match printf format.

adjustOpenFilesLimit() and clusterUpdateSlotsWithConfig() that were
assuming uint64_t is the same as unsigned long long, which is true
probably for all the systems out there that we target, but still GCC
emitted a warning since technically they are two different types."
yoav-steinberg,2014-04-06 14:20:01,https://api.github.com/repos/antirez/redis/git/commits/4930d903fc341faf4c5dce7197f4f81af941dfa5,4930d903fc341faf4c5dce7197f4f81af941dfa5,Fix eval usage in tests to conform with eval semantics
antirez,2012-02-04 07:11:31,https://api.github.com/repos/antirez/redis/git/commits/3a6a1e42f11bfee780eda6661865e59d2e747b59,3a6a1e42f11bfee780eda6661865e59d2e747b59,ZRANGEBYLEX and ZREVRANGEBYLEX implementation.
antirez,2014-04-04 13:29:32,https://api.github.com/repos/antirez/redis/git/commits/d5be696db8e3256d5546252dc3534164a1970edf,d5be696db8e3256d5546252dc3534164a1970edf,"PFCOUNT: always unshare/decode the object.

This will be a non-op most of the times since the object will be
unshared / decoded, however it is more technically correct to start this
way since the object may be decoded even in the read-only code path."
antirez,2014-04-04 08:28:34,https://api.github.com/repos/antirez/redis/git/commits/1c12bcbcfb1b4bd7b13edaa534eaebd7d89ff9c3,1c12bcbcfb1b4bd7b13edaa534eaebd7d89ff9c3,"tryObjectEncoding() refactoring.

We also avoid to re-create an object that is already in EMBSTR encoding."
antirez,2014-04-04 07:33:35,https://api.github.com/repos/antirez/redis/git/commits/433ce7f85c3fb81b2ac9becb3cb5a94c798a148d,433ce7f85c3fb81b2ac9becb3cb5a94c798a148d,"Changed HyperLogLog hash seed to a non-zero value.

Using a seed of zero has the side effect of having the empty string
hashing to what is a very special case in the context of HyperLogLog: a
very long run of zeroes.

This did not influenced the correctness of the result with 16k registers
because of the harmonic mean, but still it is inconvenient that a so
obvious value maps to a so special hash.

The seed 0xadc83b19 is used instead, which is the first 64 bits of the
SHA1 of the empty string.

Reference: issue #1657."
antirez,2014-04-03 20:15:53,https://api.github.com/repos/antirez/redis/git/commits/352208ff68f213a59729809ae3eaa2f0b0d0a2ad,352208ff68f213a59729809ae3eaa2f0b0d0a2ad,Initial HyperLogLog tests.
antirez,2014-04-03 20:10:20,https://api.github.com/repos/antirez/redis/git/commits/d2ca4bb62d807291f9e21ec57c44373a03a99a5e,d2ca4bb62d807291f9e21ec57c44373a03a99a5e,"Return ""WRONGTYPE"" error on PF* type mismatch."
antirez,2014-04-03 17:31:26,https://api.github.com/repos/antirez/redis/git/commits/349c97818995de9ff6fed337844ff4bbb1b36153,349c97818995de9ff6fed337844ff4bbb1b36153,"Fix PFADD infinite loop.

We need to guarantee that the last bit is 1, otherwise an element may
hash to just zeroes with probability 1/(2^64) and trigger an infinite
loop.

See issue #1657."
antirez,2014-04-03 14:38:11,https://api.github.com/repos/antirez/redis/git/commits/b612affba305fd34662fc4afae5663c764915c12,b612affba305fd34662fc4afae5663c764915c12,Make hll-gnuplot-graph.rb callable from cli.
antirez,2014-04-03 11:20:34,https://api.github.com/repos/antirez/redis/git/commits/ce637b2fef04d4f073e5e045410f3527b65001ca,ce637b2fef04d4f073e5e045410f3527b65001ca,Remove HyperLogLog type checking duplicated code.
antirez,2014-04-03 08:45:30,https://api.github.com/repos/antirez/redis/git/commits/aaaed66c566910277fddd35a345dea6664c8e646,aaaed66c566910277fddd35a345dea6664c8e646,"PFGETREG added for testing purposes.

The new command allows to get a dump of the registers stored
into an HyperLogLog data structure for testing / debugging purposes."
antirez,2014-04-03 08:37:32,https://api.github.com/repos/antirez/redis/git/commits/9682295f68e5bd7ca72441ced23ba35539bdaeec,9682295f68e5bd7ca72441ced23ba35539bdaeec,PFCOUNT: unshare the object when cached cardinality is modified.
antirez,2014-04-03 08:17:39,https://api.github.com/repos/antirez/redis/git/commits/be9860d0e93bb301577df9bc01c73e1b38031a38,be9860d0e93bb301577df9bc01c73e1b38031a38,PFSELFTEST improved to test the approximation error.
antirez,2014-04-02 10:30:11,https://api.github.com/repos/antirez/redis/git/commits/cf34507b870124f99a68f13128274af3d708b50b,cf34507b870124f99a68f13128274af3d708b50b,"hll-gnuplot-graph.rb improved with new filter.

The function to generate graphs is also more flexible as now includes
step and max value. The step of the samples generation function is no
longer limited to min step of 1000."
antirez,2014-04-02 07:58:47,https://api.github.com/repos/antirez/redis/git/commits/096b5e921ec64f1258c86d9ba92d823525896516,096b5e921ec64f1258c86d9ba92d823525896516,"HyperLogLog: added magic / version.

This will allow future changes like compressed representations.
Currently the magic is not checked for performance reasons but this may
change in the future, for example if we add new types encoded in strings
that may have the same size of HyperLogLogs."
antirez,2014-04-02 06:12:27,https://api.github.com/repos/antirez/redis/git/commits/cef505d7390c5f5c7268fc0589cad90beb39f16f,cef505d7390c5f5c7268fc0589cad90beb39f16f,"Merge pull request #1646 from raydog/unstable

Change HLL* to PF* in a few spots"
antirez,2014-04-01 13:52:15,https://api.github.com/repos/antirez/redis/git/commits/4ab162a5599b900173a3b4ced218c46971ba6507,4ab162a5599b900173a3b4ced218c46971ba6507,"Include redis.h before other stuff in hyperloglog.c.

Otherwise fmacros.h is included later and this may break compilation on
different systems."
antirez,2014-03-31 20:48:01,https://api.github.com/repos/antirez/redis/git/commits/5afcca34ce5a87c933b48ada9076025c7b76b8bf,5afcca34ce5a87c933b48ada9076025c7b76b8bf,"HyperLogLog API prefix modified from ""P"" to ""PF"".

Using both the initials of Philippe Flajolet instead of just ""P""."
antirez,2014-03-31 17:51:34,https://api.github.com/repos/antirez/redis/git/commits/ba4e20835a769eb1934bed41b00155e3c9f448c8,ba4e20835a769eb1934bed41b00155e3c9f448c8,Makefile.dep updated with hyperloglog.o deps.
antirez,2014-03-31 17:16:47,https://api.github.com/repos/antirez/redis/git/commits/e887c62e451e94dfb096a31f95888615cd2d7291,e887c62e451e94dfb096a31f95888615cd2d7291,HyperLogLog: make API use the P prefix in honor of Philippe Flajolet.
antirez,2014-03-31 14:02:36,https://api.github.com/repos/antirez/redis/git/commits/f1b76081281ca088a95401cf074ab8ccce6005fa,f1b76081281ca088a95401cf074ab8ccce6005fa,HLLMERGE fixed by adding a... missing loop!
antirez,2014-03-31 13:45:06,https://api.github.com/repos/antirez/redis/git/commits/0c9f06a237cba9cb64ab9f330e1f6209d466c0ed,0c9f06a237cba9cb64ab9f330e1f6209d466c0ed,"hll-gnuplot-graph.rb: added new filter ""all""."
antirez,2014-03-31 13:41:38,https://api.github.com/repos/antirez/redis/git/commits/ec1ee66256a7fa05d6cd4ea0002c309b4fe238a9,ec1ee66256a7fa05d6cd4ea0002c309b4fe238a9,"HyperLogLog apply bias correction using a polynomial.

Better results can be achieved by compensating for the bias of the raw
approximation just after 2.5m (when LINEARCOUNTING is no longer used) by
using a polynomial that approximates the bias at a given cardinality.

The curve used was found using this web page:

    http://www.xuru.org/rt/PR.asp

That performs polynomial regression given a set of values."
antirez,2014-03-31 12:39:44,https://api.github.com/repos/antirez/redis/git/commits/f2277475b2e6b165527866a8923a64d6862059e3,f2277475b2e6b165527866a8923a64d6862059e3,"HLLMERGE implemented.

Merge N HLL data structures by selecting the max value for every
M[i] register among the set of HLLs."
antirez,2014-03-31 10:29:24,https://api.github.com/repos/antirez/redis/git/commits/4ab45183fc8ad6f6448e869efacf537d5e0df1a1,4ab45183fc8ad6f6448e869efacf537d5e0df1a1,"HLLCOUNT is technically a write command

When we update the cached value, we need to propagate the command and
signal the key as modified for WATCH."
antirez,2014-03-31 10:21:08,https://api.github.com/repos/antirez/redis/git/commits/8aeb0c196a2720c50554fa481c475317492a1577,8aeb0c196a2720c50554fa481c475317492a1577,"HLLADD: propagate write when only variable name is given.

The following form is given:

    HLLADD myhll

No element is provided in the above case so if 'myhll' var does not
exist the result is to just create an empty HLL structure, and no update
will be performed on the registers.

In this case, the DB should still be set dirty and the command
propagated."
antirez,2014-03-31 09:57:47,https://api.github.com/repos/antirez/redis/git/commits/69a93194fd4a8c448cf9e9990ab9991fa9573a55,69a93194fd4a8c448cf9e9990ab9991fa9573a55,hll-gnuplot-graph.rb: Use |error| when filter is :max
antirez,2014-03-31 08:21:14,https://api.github.com/repos/antirez/redis/git/commits/a8fb1a328db57e98893c91ffddc138b61d153129,a8fb1a328db57e98893c91ffddc138b61d153129,"Ignore txt files inside utils/hyperloglog.

Those are generated to trace graphs using gnuplot."
antirez,2014-03-31 07:27:33,https://api.github.com/repos/antirez/redis/git/commits/60e60f4ee0b2d78b9b0d65f99e715958e2a3ce82,60e60f4ee0b2d78b9b0d65f99e715958e2a3ce82,"HyperLogLog: use LINEARCOUNTING up to 3m.

The HyperLogLog original paper suggests using LINEARCOUNTING for
cardinalities < 2.5m, however for P=14 the median / max error
curves show that a value of '3' is the best pick for m = 16384."
antirez,2014-03-31 08:01:42,https://api.github.com/repos/antirez/redis/git/commits/7f9d289e100725a8eab67ec1a0d069e8d1a6221e,7f9d289e100725a8eab67ec1a0d069e8d1a6221e,hll-gnuplot-graph.rb added to plot HyperLogLog error graphs.
antirez,2014-03-30 17:26:13,https://api.github.com/repos/antirez/redis/git/commits/307a189900c06bb4f76638277275f70f2e480558,307a189900c06bb4f76638277275f70f2e480558,"HyperLogLog approximated cardinality caching.

The more we add elements to an HyperLogLog counter, the smaller is
the probability that we actually update some register.

From this observation it is easy to see how it is possible to use
caching of a previously computed cardinality and reuse it to serve
HLLCOUNT queries as long as no register was updated in the data
structure.

This commit does exactly this by using just additional 8 bytes for the
data structure to store a 64 bit unsigned integer value cached
cardinality. When the most significant bit of the 64 bit integer is set,
it means that the value computed is no longer usable since at least a
single register was modified and we need to recompute it at the next
call of HLLCOUNT.

The value is always stored in little endian format regardless of the
actual CPU endianess."
antirez,2014-03-30 16:32:17,https://api.github.com/repos/antirez/redis/git/commits/543ede03f2e54b45b22164e17c7f51de9cfc69fa,543ede03f2e54b45b22164e17c7f51de9cfc69fa,"String value unsharing refactored into proper function.

All the Redis functions that need to modify the string value of a key in
a destructive way (APPEND, SETBIT, SETRANGE, ...) require to make the
object unshared (if refcount > 1) and encoded in raw format (if encoding
is not already REDIS_ENCODING_RAW).

This was cut & pasted many times in multiple places of the code. This
commit puts the small logic needed into a function called
dbUnshareStringValue()."
antirez,2014-03-29 23:54:08,https://api.github.com/repos/antirez/redis/git/commits/aaf6db459b34dc2182fe1d84596733a9b9e97ec4,aaf6db459b34dc2182fe1d84596733a9b9e97ec4,"Use endian neutral hash function for HyperLogLog.

We need to be sure that you can save a dataset in a Redis instance,
reload it in a different architecture, and continue to count in the same
HyperLogLog structure.

So 32 and 64 bit, little or bit endian, must all guarantee to output the
same hash for the same element."
antirez,2014-03-29 14:58:44,https://api.github.com/repos/antirez/redis/git/commits/4628ac00650591777d34427fa7ee6d5f1f6c484e,4628ac00650591777d34427fa7ee6d5f1f6c484e,"HyperLogLog internal representation modified.

The new representation is more obvious, starting from the LSB of the
first byte and using bits going to MSB, and passing to next byte as
needed.

There was also a subtle error: first two bits were unused, everything
was carried over on the right of two bits, even if it worked because of
the code requirement of always having a byte more at the end.

During the rewrite the code was made safer trying to avoid undefined
behavior due to shifting an uint8_t for more than 8 bits."
antirez,2014-03-29 11:17:56,https://api.github.com/repos/antirez/redis/git/commits/5317a582cf1a50f7be077e333eac3694d76a8d76,5317a582cf1a50f7be077e333eac3694d76a8d76,Remove a few useless operations from hllCount() fast path.
antirez,2014-03-29 11:12:44,https://api.github.com/repos/antirez/redis/git/commits/3ed947fb30727aab198e164853cf3dcfc960429e,3ed947fb30727aab198e164853cf3dcfc960429e,HLLCOUNT 3x faster taking fast path for default params.
antirez,2014-03-29 07:37:01,https://api.github.com/repos/antirez/redis/git/commits/28dce36f76b13e9a1d92c250428b17b88216e313,28dce36f76b13e9a1d92c250428b17b88216e313,"Use processor base types in HLL_(GET|SET)_REGISTER.

This speedups the macros by a noticeable factor."
antirez,2014-03-28 21:49:24,https://api.github.com/repos/antirez/redis/git/commits/ac8fbe8829cc3ff7b8ff23afd9e5b46c9b2b3ec9,ac8fbe8829cc3ff7b8ff23afd9e5b46c9b2b3ec9,HyperLogLog: use precomputed table for 2^(-M[i]).
antirez,2014-03-28 21:25:26,https://api.github.com/repos/antirez/redis/git/commits/fdf81b2d3557ec379bb966db25ce14bfb5a988ff,fdf81b2d3557ec379bb966db25ce14bfb5a988ff,hll-err.rb: speedup using pipelining.
antirez,2014-03-28 17:35:14,https://api.github.com/repos/antirez/redis/git/commits/f29123364b9f953c2467e52d8bf91c7cfd9a7f5d,f29123364b9f953c2467e52d8bf91c7cfd9a7f5d,hll-err.rb added to test error rate of Redis HyperLogLog.
antirez,2014-03-28 17:24:05,https://api.github.com/repos/antirez/redis/git/commits/f90a4af3d75a3a97c6572429ad7bdb9a207c8bce,f90a4af3d75a3a97c6572429ad7bdb9a207c8bce,"HyperLogLog algorithm fixed in two ways.

There was an error in the computation of 2^register, and the sequence of
zeroes computed after the hashing did not included the ""1""."
antirez,2014-03-28 16:37:18,https://api.github.com/repos/antirez/redis/git/commits/ded86076b382c72a12b4444e36a7d12bb009e850,ded86076b382c72a12b4444e36a7d12bb009e850,HLLCOUNT implemented.
antirez,2014-03-28 15:24:35,https://api.github.com/repos/antirez/redis/git/commits/156929ee974ce968585144b0d0226e56622e6add,156929ee974ce968585144b0d0226e56622e6add,HLLADD implemented.
antirez,2014-03-28 13:42:30,https://api.github.com/repos/antirez/redis/git/commits/5660ff1cc1038f14aa5f577a5117e1561c21d50a,5660ff1cc1038f14aa5f577a5117e1561c21d50a,"hllAdd() low level HyperLogLog ""add"" implemented."
antirez,2014-03-28 13:09:28,https://api.github.com/repos/antirez/redis/git/commits/e3234116ada02bdaff72a0d1eab91e381b0277b5,e3234116ada02bdaff72a0d1eab91e381b0277b5,"HyperLogLog: redefine constants using ""P""."
antirez,2014-03-28 12:56:04,https://api.github.com/repos/antirez/redis/git/commits/e73839e7d5ed223d4adda66db1c0cb748d485998,e73839e7d5ed223d4adda66db1c0cb748d485998,"HLL_SET_REGISTER fixed.

There was an error in the first version of the macro.
Now the HLLSELFTEST test reports success."
antirez,2014-03-28 11:16:39,https://api.github.com/repos/antirez/redis/git/commits/f22397dd7f5eba16f3c6264614c24f55c6b8fc33,f22397dd7f5eba16f3c6264614c24f55c6b8fc33,Use REDIS_HLL_REGISTER_MAX when possible.
antirez,2014-03-28 11:15:39,https://api.github.com/repos/antirez/redis/git/commits/1c88c5941b2392d3592583f8e99a9c05c8d0b2e2,1c88c5941b2392d3592583f8e99a9c05c8d0b2e2,HLL_(SET|GET)_REGISTER types fixed.
antirez,2014-03-28 11:11:36,https://api.github.com/repos/antirez/redis/git/commits/552eb5407a49cf6b604230d1994a5e441ba10f5c,552eb5407a49cf6b604230d1994a5e441ba10f5c,"HLLSELFTEST command implemented.

To test the bitfield array of counters set/get macros from the Redis Tcl
suite is hard, so a specialized command that is able to test the
internals was developed."
antirez,2014-03-28 10:18:48,https://api.github.com/repos/antirez/redis/git/commits/0609380603bb235e63c97049bd8217856c062edb,0609380603bb235e63c97049bd8217856c062edb,HyperLogLog: initial sketch of registers access.
antirez,2014-03-27 14:01:24,https://api.github.com/repos/antirez/redis/git/commits/8f52173b2cdf47b7ef5ceda831ff44bf481d2090,8f52173b2cdf47b7ef5ceda831ff44bf481d2090,"Cluster: last_vote_epoch -> lastVoteEpoch.

Use cammel case for epochs that are persisted on disk."
antirez,2014-03-27 13:54:57,https://api.github.com/repos/antirez/redis/git/commits/7fb14b73ba67c70eb6c8a728c892c8d5b3fe954e,7fb14b73ba67c70eb6c8a728c892c8d5b3fe954e,"Cluster: save/restore vars that must persist after recovery.

This fixes issue #1479."
antirez,2014-03-26 15:35:38,https://api.github.com/repos/antirez/redis/git/commits/6dd2dbbd367aaa79a0ebb1a73f8cc6815314f163,6dd2dbbd367aaa79a0ebb1a73f8cc6815314f163,"Cluster: handshake ""already known"" error logged to VERBOSE.

This is not really an error but something that always happens for
example when creating a new cluster, or if the sysadmin rejoins manually
a node that is already known.

Since useless logs don't help, moved to VERBOSE level."
antirez,2014-03-26 11:29:43,https://api.github.com/repos/antirez/redis/git/commits/3cf6f1f54fb3a31fb7157ab54919455feda41466,3cf6f1f54fb3a31fb7157ab54919455feda41466,"Cluster: clusterHandleConfigEpochCollision() fixed.

New config epochs must always be obtained incrementing the currentEpoch,
that is itself guaranteed to be >= the max configEpoch currently known
to the node."
antirez,2014-03-26 11:09:38,https://api.github.com/repos/antirez/redis/git/commits/80d4c52cdfeaee480ad81c682f914ade88dbc620,80d4c52cdfeaee480ad81c682f914ade88dbc620,Cluster: better logging for clusterUpdateSlotsConfigWith().
antirez,2014-03-25 16:50:46,https://api.github.com/repos/antirez/redis/git/commits/eb746ec40890f2edfcd6c05a099814cb96d2f448,eb746ec40890f2edfcd6c05a099814cb96d2f448,"Cluster: CLUSTER SETSLOT implementation comment updated.

Update the comment since the implementation details changed."
antirez,2014-03-25 16:44:39,https://api.github.com/repos/antirez/redis/git/commits/0064b1a583f2feb4852a22d84248548dc7e66a3a,0064b1a583f2feb4852a22d84248548dc7e66a3a,"Cluster: redis-trib cluster allocation more even across nodes.

redis-trib used to allocate slots not considering fractions of nodes
when computing the slots_per_node amount. So the fractional part was
carried over till the end of the allocation, where the last node
received a few more slots than any other (or a lot more if the cluster
was composed of many nodes).

The computation was changed to allocate slots more evenly when they are
not exactly divisible for the number of masters we have."
antirez,2014-03-25 15:45:37,https://api.github.com/repos/antirez/redis/git/commits/6c527a89a06ad93d7e250de78d3fecb39f13a6a3,6c527a89a06ad93d7e250de78d3fecb39f13a6a3,"Cluster: configEpoch collisions resolution.

The slave election in Redis Cluster guarantees that slaves promoted to
masters always end with unique config epochs, however failures during
manual reshardings, software bugs and operational errors may in theory
cause two nodes to have the same configEpoch.

This commit introduces a mechanism to eventually always end with different
configEpochs if a collision ever happens.

As a (wanted) side effect, this also ensures that after a new cluster
is created, all nodes will end with a different configEpoch automatically."
antirez,2014-03-25 15:07:14,https://api.github.com/repos/antirez/redis/git/commits/c1041c570fe2722481eb6c4ee4b9505ce4e0437f,c1041c570fe2722481eb6c4ee4b9505ce4e0437f,Cluster: stay within 80 cols.
antirez,2014-03-25 09:30:01,https://api.github.com/repos/antirez/redis/git/commits/6540e9eeaae0e4b9a28e51680466d10c6ba3a3a1,6540e9eeaae0e4b9a28e51680466d10c6ba3a3a1,"Fix off by one bug in freeMemoryIfNeeded() eviction pool.

Bug found by the continuous integration test running the Redis
with valgrind:

==6245== Invalid read of size 8
==6245==    at 0x4C2DEEF: memcpy@GLIBC_2.2.5 (mc_replace_strmem.c:876)
==6245==    by 0x41F9E6: freeMemoryIfNeeded (redis.c:3010)
==6245==    by 0x41D2CC: processCommand (redis.c:2069)

memmove() size argument was accounting for an extra element, going
outside the bounds of the array."
antirez,2014-03-25 08:33:27,https://api.github.com/repos/antirez/redis/git/commits/9e0b9f12b2bd0a522c75dbdbacbf2a7204ee2588,9e0b9f12b2bd0a522c75dbdbacbf2a7204ee2588,"Test: do not complain when ""leaks"" can't run because process died."
antirez,2014-03-25 08:01:46,https://api.github.com/repos/antirez/redis/git/commits/6e33c908ddb626810bae27fbc481ab572e4df793,6e33c908ddb626810bae27fbc481ab572e4df793,"adjustOpenFilesLimit() refactoring.

In this commit:
* Decrement steps are semantically differentiated from the reserved FDs.
  Previously both values were 32 but the meaning was different.
* Make it clear that we save setrlimit errno.
* Don't explicitly handle wrapping of 'f', but prevent it from
  happening.
* Add comments to make the function flow more readable.

This integrates PR #1630"
antirez,2014-03-25 07:42:39,https://api.github.com/repos/antirez/redis/git/commits/72c5ebcba44d34efcb3f7a0afe9e21ec65a42b31,72c5ebcba44d34efcb3f7a0afe9e21ec65a42b31,"Merge pull request #1630 from mattsta/fix-infinite-loop-ulimit

Fix infinite loop ulimit"
antirez,2014-03-24 20:07:44,https://api.github.com/repos/antirez/redis/git/commits/35667d75c38af8f7fc523dd47fa0751cb7afadac,35667d75c38af8f7fc523dd47fa0751cb7afadac,"Fixed undefined variable value with certain code paths.

In sentinelFlushConfig() fd could be undefined when the following if
statement was true:

        if (rewrite_status == -1) goto werr;

This could cause random file descriptors to get closed."
antirez,2014-03-24 20:04:03,https://api.github.com/repos/antirez/redis/git/commits/fc0fb0bad35d31c422395d9f71eaf829bb2d240d,fc0fb0bad35d31c422395d9f71eaf829bb2d240d,"Merge pull request #1635 from mattsta/lruclock-instead-of-getlruclock

Use LRU_CLOCK() instead of function getLRUClock()"
mattsta,2014-03-24 18:39:26,https://api.github.com/repos/antirez/redis/git/commits/78782ed59f107c7819440ca1f63dc3adb97ce4c1,78782ed59f107c7819440ca1f63dc3adb97ce4c1,"Use LRU_CLOCK() instead of function getLRUClock()

lookupKey() uses LRU_CLOCK(), so it seems object
creation should use LRU_CLOCK() too."
antirez,2014-03-24 18:26:25,https://api.github.com/repos/antirez/redis/git/commits/7f1c3607ec17542fe59427591f0bbf8528d48a7b,7f1c3607ec17542fe59427591f0bbf8528d48a7b,"Merge pull request #1606 from mattsta/fix-disk-full-dataloss

Fix data loss when save AOF/RDB with no free space"
mattsta,2014-03-14 21:07:52,https://api.github.com/repos/antirez/redis/git/commits/429045514512b2791a0297f08c7024c389d41981,429045514512b2791a0297f08c7024c389d41981,Sentinel: Notify user when config can't be saved
mattsta,2014-03-13 18:40:25,https://api.github.com/repos/antirez/redis/git/commits/b47b343fab3dd11eb983cef0a5d4de65dca2ed51,b47b343fab3dd11eb983cef0a5d4de65dca2ed51,"Fix data loss when save AOF/RDB with no free space

Previously, the (!fp) would only catch lack of free space
under OS X.  Linux waits to discover it can't write until
it actually writes contents to disk.

(fwrite() returns success even if the underlying file
has no free space to write into.  All the errors
only show up at flush/sync/close time.)

Fixes antirez/redis#1604"
antirez,2014-03-24 17:33:22,https://api.github.com/repos/antirez/redis/git/commits/906c4d77c0e4d365da4ce7169e84700df9ab8429,906c4d77c0e4d365da4ce7169e84700df9ab8429,"Merge pull request #1617 from mattsta/remove-unused-warning

Cluster: remove variable causing warning"
antirez,2014-03-24 17:31:55,https://api.github.com/repos/antirez/redis/git/commits/8e6625e6ae8a77d6c0869d8e5d5409bc6068cfd1,8e6625e6ae8a77d6c0869d8e5d5409bc6068cfd1,"Merge pull request #1629 from mattsta/fix-trib-master-assignment

Cluster: Restore proper trib master iteration"
antirez,2014-03-24 17:26:17,https://api.github.com/repos/antirez/redis/git/commits/a006fcb8a77127e38bc45c7a622281b622623bf8,a006fcb8a77127e38bc45c7a622281b622623bf8,"Merge pull request #1628 from mattsta/fix-trib-create

Cluster: Fix trib create when masters==replicas"
mattsta,2014-03-24 17:21:15,https://api.github.com/repos/antirez/redis/git/commits/386a46946babca7b9962a94837ef96bb40b448c7,386a46946babca7b9962a94837ef96bb40b448c7,"Fix potentially incorrect errno usage

errno may be reset by the previous call to redisLog, so capture
the original value for proper error reporting."
mattsta,2014-03-24 17:15:35,https://api.github.com/repos/antirez/redis/git/commits/3b54ee6ea414e0b52a4936f341be5c8c865959c6,3b54ee6ea414e0b52a4936f341be5c8c865959c6,"Add REDIS_MIN_RESERVED_FDS define for open fds

Also update the original REDIS_EVENTLOOP_FDSET_INCR to
include REDIS_MIN_RESERVED_FDS. REDIS_EVENTLOOP_FDSET_INCR
exists to make sure more than (maxclients+RESERVED) entries
are allocated, but we can only guarantee that if we include
the current value of REDIS_MIN_RESERVED_FDS as a minimum
for the INCR size."
antirez,2014-03-24 17:13:39,https://api.github.com/repos/antirez/redis/git/commits/896e15f3e3632fb368af8fc8657e2e553844d390,896e15f3e3632fb368af8fc8657e2e553844d390,"Merge pull request #1627 from badboy/lru-fix

Fixed a few typos."
antirez,2014-03-24 17:10:50,https://api.github.com/repos/antirez/redis/git/commits/68a3af5f9c17217287d9abcb3552d87b68ac0b2f,68a3af5f9c17217287d9abcb3552d87b68ac0b2f,"Merge pull request #1609 from badboy/install_server-fix

Finally fix the `install_server.sh` script."
mattsta,2014-03-21 18:42:38,https://api.github.com/repos/antirez/redis/git/commits/e942f3ce0fee5033d2d4b4e8c5b9f1d912a1d370,e942f3ce0fee5033d2d4b4e8c5b9f1d912a1d370,"Cluster: Restore proper trib master iteration

This got removed in 2e5c394 during a new feature addition.

The prior commit had ""break if masters.length == masters_count""
but we are guaranteed to aready have that condition met since
otherwise we would haven't gotten this far.

Without this break statement, it's possible some masters may
be forgotten and have zero replicas while other masters have
more than their requested number of replicas.

Thanks to carlos for pointing out this regression at:
https://groups.google.com/forum/#!topic/redis-db/_WVVqDw5B7c"
mattsta,2014-03-21 17:09:23,https://api.github.com/repos/antirez/redis/git/commits/df4bdbf688c2e4f5d9305d6d59ec3086ab701d04,df4bdbf688c2e4f5d9305d6d59ec3086ab701d04,"Cluster: Fix trib create when masters==replicas

This bug was introduced in 2e5c394f during a refactor.

It took me a while to understand what was going on with
the code, so I've refactored it further by:
  - Replacing boolean values with meaningful symbols
  - Replacing 'i' with a meaningful variable name
  - Adding the proper abort check
  - Factoring out now duplicated conditionals
  - Adding optional verbose logging (we're inside *four*
    different looping constructs, so it takes a while to
    figure out where all the moving parts are)
  - Updating comment for the section

This fixes a problem when the number of master instances
equaled the number of replica instances.  Before, when
there were equal numbers of both, nodes_count would go to
zero, but the while loop would spin in i < @replicas because
i would never be updated (because the nodes_list of each ip
was length == 0, which triggered an endless loop of
next -> i = 0 -> 0 < 1? -> true -> next -> i = 0 ...)

Thanks to carlo who found this problem at:
https://groups.google.com/forum/#!topic/redis-db/_WVVqDw5B7c"
mattsta,2014-03-22 23:29:28,https://api.github.com/repos/antirez/redis/git/commits/90b844212d38fec80d0690d30396c462aa5655cd,90b844212d38fec80d0690d30396c462aa5655cd,"Fix infinite loop on startup if ulimit too low

Fun fact: rlim_t is an unsigned long long on all platforms.

Continually subtracting from a rlim_t makes it get smaller
and smaller until it wraps, then you're up to 2^64-1.

This was causing an infinite loop on Redis startup if
your ulimit was extremely (almost comically) low.

The case of (f > oldlimit) would never be met in a case like:

    f = 150
    while (f > 20) f -= 128

Since f is unsigned, it can't go negative and would
take on values of:

    Iteration 1: 150 - 128 => 22
    Iteration 2:  22 - 128 => 18446744073709551510
    Iterations 3-∞: ...

To catch the wraparound, we use the previous value of f
stored in limit.rlimit_cur.  If we subtract from f and
get a larger number than the value it had previously,
we print an error and exit since we don't have enough
file descriptors to help the user at this point.

Thanks to @bs3g for the inspiration to fix this problem.
Patches existed from @bs3g at antirez#1227, but I needed to repair a few other
parts of Redis simultaneously, so I didn't get a chance to use them."
mattsta,2014-03-22 23:23:01,https://api.github.com/repos/antirez/redis/git/commits/4a25983f8fe70e105bfd7cc42fed825001afd1df,4a25983f8fe70e105bfd7cc42fed825001afd1df,"Improve error handling around setting ulimits

The log messages about open file limits have always
been slightly opaque and confusing.  Here's an attempt to
fix their wording, detail, and meaning.  Users will have a
better understanding of how to fix very common problems
with these reworded messages.

Also, we handle a new error case when maxclients becomes less
than one, essentially rendering the server unusable.  We
now exit on startup instead of leaving the user with a server
unable to handle any connections.

This fixes antirez#356 as well."
mattsta,2014-03-22 23:15:04,https://api.github.com/repos/antirez/redis/git/commits/491532a713ae28fdd5e489e8f2d88076da8adf44,491532a713ae28fdd5e489e8f2d88076da8adf44,"Replace magic 32 with REDIS_EVENTLOOP_FDSET_INCR

32 was the additional number of file descriptors Redis
would reserve when managing a too-low ulimit.  The
number 32 was in too many places statically, so now
we use a macro instead that looks more appropriate.

When Redis sets up the server event loop, it uses:
    server.maxclients+REDIS_EVENTLOOP_FDSET_INCR

So, when reserving file descriptors, it makes sense to
reserve at least REDIS_EVENTLOOP_FDSET_INCR FDs instead
of only 32.  Currently, REDIS_EVENTLOOP_FDSET_INCR is
set to 128 in redis.h.

Also, I replaced the static 128 in the while f < old loop
with REDIS_EVENTLOOP_FDSET_INCR as well, which results
in no change since it was already 128.

Impact: Users now need at least maxclients+128 as
their open file limit instead of maxclients+32 to obtain
actual ""maxclients"" number of clients.  Redis will carve
the extra REDIS_EVENTLOOP_FDSET_INCR file descriptors it
needs out of the ""maxclients"" range instead of failing
to start (unless the local ulimit -n is too low to accomidate
the request)."
mattsta,2014-03-22 22:56:28,https://api.github.com/repos/antirez/redis/git/commits/c138631cd16e5a28cf7f5169bee28ed4c6dae598,c138631cd16e5a28cf7f5169bee28ed4c6dae598,"Fix maxclients error handling

Everywhere in the Redis code base, maxclients is treated
as an int with (int)maxclients or `maxclients = atoi(source)`,
so let's make maxclients an int.

This fixes a bug where someone could specify a negative maxclients
on startup and it would work (as well as set maxclients very high)
because:

    unsigned int maxclients;
    char *update = ""-300"";
    maxclients = atoi(update);
    if (maxclients < 1) goto fail;

But, (maxclients < 1) can only catch the case when maxclients
is exactly 0.  maxclients happily sets itself to -300, which isn't
-300, but rather 4294966996, which isn't < 1, so... everything
""worked.""

maxclients config parsing checks for the case of < 1, but maxclients
CONFIG SET parsing was checking for case of < 0 (allowing
maxclients to be set to 0).  CONFIG SET parsing is now updated to
match config parsing of < 1.

It's tempting to add a MINIMUM_CLIENTS define, but... I didn't.

These changes were inspired by antirez#356, but this doesn't
fix that issue."
antirez,2014-03-24 11:00:20,https://api.github.com/repos/antirez/redis/git/commits/93253c27620647deb3cb60e2666fbf7db9eff4cb,93253c27620647deb3cb60e2666fbf7db9eff4cb,"Sample and cache RSS in serverCron().

Obtaining the RSS (Resident Set Size) info is slow in Linux and OSX.
This slowed down the generation of the INFO 'memory' section.

Since the RSS does not require to be a real-time measurement, we
now sample it with server.hz frequency (10 times per second by default)
and use this value both to show the INFO rss field and to compute the
fragmentation ratio.

Practically this does not make any difference for memory profiling of
Redis but speeds up the INFO call significantly."
antirez,2014-03-24 09:20:33,https://api.github.com/repos/antirez/redis/git/commits/30639c8ca957b3ece9985d8261f89b4494494886,30639c8ca957b3ece9985d8261f89b4494494886,"sdscatvprintf(): Try to use a static buffer.

For small content the function now tries to use a static buffer to avoid
a malloc/free cycle that is too costly when the function is used in the
context of performance critical code path such as INFO output generation.

This change was verified to have positive effects in the execution speed
of the INFO command."
antirez,2014-03-24 09:00:08,https://api.github.com/repos/antirez/redis/git/commits/d3efe04c4731bda4657b80f099f8bcaca3c26319,d3efe04c4731bda4657b80f099f8bcaca3c26319,"Cache uname() output across INFO calls.

Uname was profiled to be a slow syscall. It produces always the same
output in the context of a single execution of Redis, so calling it at
every INFO output generation does not make too much sense.

The uname utsname structure was modified as a static variable. At the
same time a static integer was added to check if we need to call uname
the first time."
antirez,2014-03-24 08:38:33,https://api.github.com/repos/antirez/redis/git/commits/a9caca0424197e1b43cc98c5106cca5c86e3ac34,a9caca0424197e1b43cc98c5106cca5c86e3ac34,"sdscatvprintf(): guess buflen using format length.

sdscatvprintf() uses a loop where it tries to output the formatted
string in a buffer of the initial length, if there was not enough room,
a buffer of doubled size is tried and so forth.

The initial guess for the buffer length was very poor, an hardcoded
""16"". This caused the printf to be processed multiple times without a
good reason. Given that printf functions are already not fast, the
overhead was significant.

The new heuristic is to use a buffer 4 times the length of the format
buffer, and 32 as minimal size. This appears to be a good balance for
typical uses of the function inside the Redis code base.

This change improved INFO command performances 3 times."
antirez,2014-03-21 08:52:00,https://api.github.com/repos/antirez/redis/git/commits/6972f18cbd1b71ebaf4a8f077ab79a59ccaccea2,6972f18cbd1b71ebaf4a8f077ab79a59ccaccea2,"Add test-lru.rb to utils.

This is a program useful to evaluate the Redis LRU algorithm behavior."
antirez,2014-03-21 08:08:08,https://api.github.com/repos/antirez/redis/git/commits/4d2e8fa189665e8e76040da9642ca89ef55fba10,4d2e8fa189665e8e76040da9642ca89ef55fba10,"Use getLRUClock() instead of server.lruclock to create objects.

Thanks to Matt Stancliff for noticing this error. It was in the original
code but somehow I managed to remove the change from the commit..."
antirez,2014-03-21 07:03:30,https://api.github.com/repos/antirez/redis/git/commits/5fa3248badcd042cecc5aed29b8fb6cc59cd009a,5fa3248badcd042cecc5aed29b8fb6cc59cd009a,"The default maxmemory policy is now noeviction.

This is safer as by default maxmemory should just set a memory limit
without any key to be deleted, unless the policy is set to something
more relaxed."
badboy,2014-03-20 22:16:38,https://api.github.com/repos/antirez/redis/git/commits/4fdd7a05463fee21e9d19d64c8505de09e0de8a1,4fdd7a05463fee21e9d19d64c8505de09e0de8a1,Fixed a few typos.
antirez,2014-03-20 16:56:27,https://api.github.com/repos/antirez/redis/git/commits/a98369929e250e94240f719abcf1d6e1255202a9,a98369929e250e94240f719abcf1d6e1255202a9,"Use 24 bits for the lru object field and improve resolution.

There were 2 spare bits inside the Redis object structure that are now
used in order to enlarge 4x the range of the LRU field.

At the same time the resolution was improved from 10 to 1 second: this
still provides 194 days before the LRU counter overflows (restarting from
zero).

This is not a problem since it only causes lack of eviction precision for
objects not touched for a very long time, and the lack of precision is
only temporary."
antirez,2014-03-20 16:05:42,https://api.github.com/repos/antirez/redis/git/commits/f4da796c539928e3c2dc5a643bd5e6d3af8d29ce,f4da796c539928e3c2dc5a643bd5e6d3af8d29ce,Default LRU samples is now 5.
antirez,2014-03-20 15:52:12,https://api.github.com/repos/antirez/redis/git/commits/c641b670c333486dc0ea887ae61c86ff9202ab69,c641b670c333486dc0ea887ae61c86ff9202ab69,"Use new dictGetRandomKeys() API to get samples for eviction.

The eviction quality degradates a bit in my tests, but since the API is
faster, it allows to raise the number of samples, and overall is a win."
antirez,2014-03-20 15:20:37,https://api.github.com/repos/antirez/redis/git/commits/82b53c650c41db4bd8af8d54cb75227df5b7abd4,82b53c650c41db4bd8af8d54cb75227df5b7abd4,struct dictEntry -> dictEntry.
antirez,2014-03-20 14:50:46,https://api.github.com/repos/antirez/redis/git/commits/5317f5e99af6505048793343d94b0631b63ba029,5317f5e99af6505048793343d94b0631b63ba029,"Added dictGetRandomKeys() to dict.c: mass get random entries.

This new function is useful to get a number of random entries from an
hash table when we just need to do some sampling without particularly
good distribution.

It just jumps at a random place of the hash table and returns the first
N items encountered by scanning linearly.

The main usefulness of this function is to speedup Redis internal
sampling of the key space, for example for key eviction or expiry."
antirez,2014-03-20 10:57:29,https://api.github.com/repos/antirez/redis/git/commits/22c9cfaf57d330dcea487aca96526fdd78401fa2,22c9cfaf57d330dcea487aca96526fdd78401fa2,"LRU eviction pool implementation.

This is an improvement over the previous eviction algorithm where we use
an eviction pool that is persistent across evictions of keys, and gets
populated with the best candidates for evictions found so far.

It allows to approximate LRU eviction at a given number of samples
better than the previous algorithm used."
antirez,2014-03-20 10:55:18,https://api.github.com/repos/antirez/redis/git/commits/6d5790d68289e8824477d8187076f743d87b66e5,6d5790d68289e8824477d8187076f743d87b66e5,"Fix OBJECT IDLETIME return value converting to seconds.

estimateObjectIdleTime() returns a value in milliseconds now, so we need
to scale the output of OBJECT IDLETIME to seconds."
antirez,2014-03-20 10:47:12,https://api.github.com/repos/antirez/redis/git/commits/ad6b0f70b27712879c6435cb58edc5bff259f7a8,ad6b0f70b27712879c6435cb58edc5bff259f7a8,"Obtain LRU clock in a resolution dependent way.

For testing purposes it is handy to have a very high resolution of the
LRU clock, so that it is possible to experiment with scripts running in
just a few seconds how the eviction algorithms works.

This commit allows Redis to use the cached LRU clock, or a value
computed on demand, depending on the resolution. So normally we have the
good performance of a precomputed value, and a clock that wraps in many
days using the normal resolution, but if needed, changing a define will
switch behavior to an high resolution LRU clock."
antirez,2014-03-20 10:36:56,https://api.github.com/repos/antirez/redis/git/commits/1faf82663ff44d309a7a28989c1d99c8addf971c,1faf82663ff44d309a7a28989c1d99c8addf971c,"Specify lruclock in redisServer structure via REDIS_LRU_BITS.

The padding field was totally useless: removed."
antirez,2014-03-20 10:33:25,https://api.github.com/repos/antirez/redis/git/commits/d77e2316825ec9dfa21b4ef74f6e90d335b846e8,d77e2316825ec9dfa21b4ef74f6e90d335b846e8,Specify LRU resolution in milliseconds.
antirez,2014-03-20 10:22:47,https://api.github.com/repos/antirez/redis/git/commits/fe30847016dae6f0e05542b662e3d5e57abcd563,fe30847016dae6f0e05542b662e3d5e57abcd563,Set LRU parameters via REDIS_LRU_BITS define.
antirez,2014-03-19 11:55:49,https://api.github.com/repos/antirez/redis/git/commits/e150ec7d0c83d56f81496084b2e5f119c958ab6f,e150ec7d0c83d56f81496084b2e5f119c958ab6f,"Unify stats reset for CONFIG RESETSTAT / initServer().

Now CONFIG RESETSTAT makes sure to reset all the fields, and in the
future it will be simpler to avoid missing new fields."
mattsta,2014-03-18 19:35:09,https://api.github.com/repos/antirez/redis/git/commits/67ed5f00aaaf8f064a851d33b14920c20231e961,67ed5f00aaaf8f064a851d33b14920c20231e961,"Cluster: remove variable causing warning

GCC-4.9 warned about this, but clang didn't.

This commit fixes warning:
sentinel.c: In function 'sentinelReceiveHelloMessages':
sentinel.c:2156:43: warning: variable 'master' set but not used [-Wunused-but-set-variable]
     sentinelRedisInstance *ri = c->data, *master;"
antirez,2014-03-18 14:35:47,https://api.github.com/repos/antirez/redis/git/commits/b9e90a70fa3a8b9bf7cd8f26450b667de4250227,b9e90a70fa3a8b9bf7cd8f26450b667de4250227,"Sentinel: sentinelRefreshInstanceInfo() minor refactoring.

Test sentinel.tilt condition on top and return if it is true.
This allows to remove the check for the tilt condition in the remaining
code paths of the function."
antirez,2014-03-18 14:18:51,https://api.github.com/repos/antirez/redis/git/commits/258d377d8ee428698e9b8fa323bd32612786954a,258d377d8ee428698e9b8fa323bd32612786954a,Sentinel test: 02 unit better coverage + refactoring.
antirez,2014-03-18 14:06:52,https://api.github.com/repos/antirez/redis/git/commits/58f104e2eebd076a94bb1eeb9064ec8da2f14410,58f104e2eebd076a94bb1eeb9064ec8da2f14410,Sentinel test: foreach_instance_id implements 'break'.
antirez,2014-03-18 13:58:27,https://api.github.com/repos/antirez/redis/git/commits/2586ea76377f8144be904676ffdf331d262fdf24,2586ea76377f8144be904676ffdf331d262fdf24,Sentinel: instance_is_killed proc added to sentinel.tcl.
antirez,2014-03-18 13:37:44,https://api.github.com/repos/antirez/redis/git/commits/218cc5fc394d15af3d7b5fbf6b15376c3e23cd6c,218cc5fc394d15af3d7b5fbf6b15376c3e23cd6c,Sentinel: propagate down-after-ms changes to slaves and sentinels.
antirez,2014-03-18 10:21:17,https://api.github.com/repos/antirez/redis/git/commits/bb6d8501604179d9e5f4b43d2ea5afdf7458d26f,bb6d8501604179d9e5f4b43d2ea5afdf7458d26f,"Sentinel: down-after-milliseconds is not master-specific.

addReplySentinelRedisInstance() modified so that this field is displayed
for all the kind of instances: Sentinels, Masters, Slaves."
antirez,2014-03-17 16:20:44,https://api.github.com/repos/antirez/redis/git/commits/ae0b7680b38e97d5aca5cb17e25eb380b101fecd,ae0b7680b38e97d5aca5cb17e25eb380b101fecd,"Sentinel failure detection implementation improved.

Failure detection in Sentinel is ping-pong based. It used to work by
remembering the last time a valid PONG reply was received, and checking
if the reception time was too old compared to the current current time.

PINGs were sent at a fixed interval of 1 second.

This works in a decent way, but does not scale well when we want to set
very small values of ""down-after-milliseconds"" (this is the node
timeout basically).

This commit reiplements the failure detection making a number of
changes. Some changes are inspired to Redis Cluster failure detection
code:

* A new last_ping_time field is added in representation of instances.
  If non zero, we have an active ping that was sent at the specified
  time. When a valid reply to ping is received, the field is zeroed
  again.
* last_ping_time is not reset when we reconnect the link or send a new
  ping, so from our point of view it represents the time we started
  waiting for the instance to reply to our pings without receiving a
  reply.
* last_ping_time is now used in order to check if the instance is
  timed out. This means that we can have a node timeout of 100
  milliseconds and yet the system will work well since the new check is
  not bound to the period used to send pings.
* Pings are now sent every second, or often if the value of
  down-after-milliseconds is less than one second. With a lower limit of
  10 HZ ping frequency.
* Link reconnection code was improved. This is used in order to try to
  reconnect the link when we are at 50% of the node timeout without a
  valid reply received yet. However the old code triggered unnecessary
  reconnections when the node timeout was very small. Now that should be
  ok.

The new code passes the tests but more testing is needed and more unit
tests stressing the failure detector, so currently this is merged only
in the unstable branch."
antirez,2014-03-15 13:59:23,https://api.github.com/repos/antirez/redis/git/commits/3a2ff5561781807ebbe98706953b88ea8ed6fe6d,3a2ff5561781807ebbe98706953b88ea8ed6fe6d,"Sentinel: use CLIENT SETNAME when connecting to Redis.

This makes debugging / monitoring of Sentinels simpler since you can
identify sentinels in CLIENT LIST output of Redis instances."
badboy,2014-03-15 13:43:50,https://api.github.com/repos/antirez/redis/git/commits/2209d077d397352a11480501a691bd991c05ff36,2209d077d397352a11480501a691bd991c05ff36,"Finally fix the `install_server.sh` script.

Includes changes from a dozen bug reports and pull requests.
Was tested on Ubuntu, Debian and CentOS."
antirez,2014-03-14 21:56:24,https://api.github.com/repos/antirez/redis/git/commits/c65b75e740ae6f3321b90627fad9c86a8cb3b9ac,c65b75e740ae6f3321b90627fad9c86a8cb3b9ac,"Merge pull request #1608 from mattsta/fix-sentinel-current-epoch-segfault

Fix segfault from accessing array out of bounds"
mattsta,2014-03-14 21:38:05,https://api.github.com/repos/antirez/redis/git/commits/584052ee6b0bcd26465d8585c51029217b60b134,584052ee6b0bcd26465d8585c51029217b60b134,"Fix segfault from accessing array out of bounds

argc == 2; argv[2] == crash"
antirez,2014-03-14 13:52:49,https://api.github.com/repos/antirez/redis/git/commits/ed813863f0624c40fe4d4e85b363c07c70cf10cd,ed813863f0624c40fe4d4e85b363c07c70cf10cd,"Sentinel: be safe under crash-recovery assumptions.

Sentinel's main safety argument is that there are no two configurations
for the same master with the same version (configuration epoch).

For this to be true Sentinels require to be authorized by a majority.
Additionally Sentinels require to do two important things:

* Never vote again for the same epoch.
* Never exchange an old vote for a fresh one.

The first prerequisite, in a crash-recovery system model, requires to
persist the master->leader_epoch on durable storage before to reply to
messages. This was not the case.

We also make sure to persist the current epoch in order to never reply
to stale votes requests from other Sentinels, after a recovery.

The configuration is persisted by making use of fsync(), this is
considered in the context of this code a good enough guarantee that
after a restart our durable state is restored, however this may not
always be the case depending on the kind of hardware and operating
system used."
antirez,2014-03-14 10:04:54,https://api.github.com/repos/antirez/redis/git/commits/365094028bf6dc311c0246f68e6bf40944136e9b,365094028bf6dc311c0246f68e6bf40944136e9b,"Sentinel: fake PUBLISH command to receive HELLO messages.

Now the way HELLO messages are received is unified.
Now it is no longer needed for Sentinels to converge to the higher
configuration for a master to be able to chat via some Redis instance,
the are able to directly exchanges configurations.

Note that this commit does not include the (trivial) change needed to
send HELLO messages to Sentinel instances as well, since for an error I
committed the change in the previous commit that refactored hello
messages processing into a separated function."
antirez,2014-03-14 09:56:44,https://api.github.com/repos/antirez/redis/git/commits/9dfe426fc8f0e4c244451a13b8831dfcd2befd49,9dfe426fc8f0e4c244451a13b8831dfcd2befd49,Sentinel: HELLO processing refactored into sentinelProcessHelloMessage().
antirez,2014-03-11 14:19:00,https://api.github.com/repos/antirez/redis/git/commits/133fccb03f2a9b5caff2ae1dd1537c984949392f,133fccb03f2a9b5caff2ae1dd1537c984949392f,Cluster: flag the transaction as dirty for the new redirections.
antirez,2014-03-13 14:11:08,https://api.github.com/repos/antirez/redis/git/commits/429aff4ef4ae6f2947614e1005048af78570b8a8,429aff4ef4ae6f2947614e1005048af78570b8a8,"Linenoise updated, multiline mode enabled in redis-cli."
antirez,2014-03-11 15:10:13,https://api.github.com/repos/antirez/redis/git/commits/cc11d103c09eb5a34f9097adf014b5193a8c9df3,cc11d103c09eb5a34f9097adf014b5193a8c9df3,"redis-trib: call MIGRATE via r.client.call as fix for redis-rb API changes.

See issue #1593.

Thanks to @badboy for suggesting the direct client.call fix."
antirez,2014-03-11 13:58:33,https://api.github.com/repos/antirez/redis/git/commits/df32eb68271976662ffab503d630362a35ae48ff,df32eb68271976662ffab503d630362a35ae48ff,"redis-trib: new subcommand 'call'. Exec command in all nodes.

Example:

./redis-trib.rb call 192.168.1.11:7000 config get cluster-node-timeout"
antirez,2014-03-11 13:17:28,https://api.github.com/repos/antirez/redis/git/commits/2e5c394fa8dbc0fc09811fb2075271d68d05ad62,2e5c394fa8dbc0fc09811fb2075271d68d05ad62,"redis-trib: create subcommand is now able to assign spare slaves.

Example: if the user will try to configure a cluster with 9 nodes,
asking for 1 slave for master, redis-trib will configure a 4 masters
cluster with 1 slave each as usually, but this time will assign the
spare node as a slave of one of the masters."
antirez,2014-03-11 10:53:09,https://api.github.com/repos/antirez/redis/git/commits/e26f4486b07070d795644a16e50429917b86eee0,e26f4486b07070d795644a16e50429917b86eee0,"Cluster: update node configEpoch on UPDATE messages.

The UPDATE message contains the configEpoch of the node configuration
advertised in the packet. Update it if needed."
antirez,2014-03-11 10:49:47,https://api.github.com/repos/antirez/redis/git/commits/a2ff90919f568a9a8db9d95be90131aa02007039,a2ff90919f568a9a8db9d95be90131aa02007039,"Cluster: set slot error if we receive an update for a busy slot.

By manually modifying nodes configurations in random ways, it is possible
to create the following scenario:

A is serving keys for slot 10
B is manually configured to serve keys for slot 10

A receives an update from B (or another node) where it is informed that
the slot 10 is now claimed by B with a greater configuration epoch,
however A still has keys from slot 10.

With this commit A will put the slot in error setting it in IMPORTING
state, so that redis-trib can detect the issue."
antirez,2014-03-11 10:32:40,https://api.github.com/repos/antirez/redis/git/commits/1ed0ad77f06ea749464296f2b50af569b5682d93,1ed0ad77f06ea749464296f2b50af569b5682d93,Cluster: clarified a comment in clusterUpdateSlotsConfigWith().
antirez,2014-03-11 10:22:06,https://api.github.com/repos/antirez/redis/git/commits/8287945ff862cfa578afe83e2f27fbe9fc1ba13f,8287945ff862cfa578afe83e2f27fbe9fc1ba13f,Cluster: flush importing/migrating state when master is turned into slave.
antirez,2014-03-11 10:16:18,https://api.github.com/repos/antirez/redis/git/commits/2e8e0ad44e92965878ac4196e5603701a8850be5,2e8e0ad44e92965878ac4196e5603701a8850be5,Cluster: clusterCloseAllSlots() added.
antirez,2014-03-10 22:01:55,https://api.github.com/repos/antirez/redis/git/commits/8eae54aa1e3102ce0e8184a557a32c08d51a8cca,8eae54aa1e3102ce0e8184a557a32c08d51a8cca,"DEBUG ERROR implemented.

The new ""error"" subcommand of the DEBUG command can reply with an user
selected error, specified as its sole argument:

    DEBUG ERROR ""LOADING please wait...""

The error is generated just prefixing the command argument with a ""-""
character, and replacing newlines with spaces (since error replies can't
include newlines).

The goal of the command is to help in Client libraries unit tests by
making simple to simulate a command call triggering a given error."
antirez,2014-03-10 15:43:38,https://api.github.com/repos/antirez/redis/git/commits/2705306ba1304e6db46d4ebc3006b1dea40588b7,2705306ba1304e6db46d4ebc3006b1dea40588b7,"DEBUG CMDKEYS: provide some guarantee to getKeysFromCommand().

getKeysFromCommand() is designed to be called with the command arguments
passing the basic arity checks described in the command table.

DEBUG CMDKEYS must provide the same guarantees for calling
getKeysFromCommand() to be safe."
antirez,2014-03-10 15:39:07,https://api.github.com/repos/antirez/redis/git/commits/5b864617bc50dbfc34dcc3393b78b3d07e0f291b,5b864617bc50dbfc34dcc3393b78b3d07e0f291b,"Cluster: make sortGetKeys() able to handle multiple STORE options.

It does not make sense to pass multiple store options, so, better to
handle it ;-)"
antirez,2014-03-10 15:35:58,https://api.github.com/repos/antirez/redis/git/commits/c4ef1d64945fdd707a0136f581c0d946d0334d5c,c4ef1d64945fdd707a0136f581c0d946d0334d5c,"DEBUG CMDKEYS added for getKeysFromCommand() testing.

Examples:

    redis 127.0.0.1:6379> debug cmdkeys set foo bar
    1) ""foo""
    redis 127.0.0.1:6379> debug cmdkeys mget a b c
    1) ""a""
    2) ""b""
    3) ""c""
    redis 127.0.0.1:6379> debug cmdkeys zunionstore foo 2 a b
    1) ""a""
    2) ""b""
    3) ""foo""
    redis 127.0.0.1:6379> debug cmdkeys ping
    (empty list or set)"
antirez,2014-03-10 15:28:18,https://api.github.com/repos/antirez/redis/git/commits/3e1d77267759083fa0d011193a2ad5713dee72e3,3e1d77267759083fa0d011193a2ad5713dee72e3,"Cluster: don't allow BY option of SORT as well.

There is the exception of a ""constant"" BY pattern that is used in order
to signal to don't sort at all. In this case no lookup is needed so it
is possible to support this case in Cluster mode."
antirez,2014-03-10 15:26:08,https://api.github.com/repos/antirez/redis/git/commits/04cf02e8dc102105b9d302dc86f499e4be63cb55,04cf02e8dc102105b9d302dc86f499e4be63cb55,Cluster: SORT get keys helper implemented.
antirez,2014-03-10 15:23:42,https://api.github.com/repos/antirez/redis/git/commits/21765c858886bfeb1349ab83dccb1113b5e55d2c,21765c858886bfeb1349ab83dccb1113b5e55d2c,Cluster: evalGetKeys() fixed: was not setting keys count.
antirez,2014-03-10 15:10:50,https://api.github.com/repos/antirez/redis/git/commits/03344196f375761a90fa1429ff617a12fb1f3ff6,03344196f375761a90fa1429ff617a12fb1f3ff6,"Cluster: don't allow GET option in cluster mode.

The commit also refactors a bit the error handling during SORT option
parsing."
antirez,2014-03-10 14:44:41,https://api.github.com/repos/antirez/redis/git/commits/8caecc9ab466011fd1432c0a7e2dc51ae8797629,8caecc9ab466011fd1432c0a7e2dc51ae8797629,Fixed memory leak in SORT LIMIT option argument parsing on error.
antirez,2014-03-10 14:31:01,https://api.github.com/repos/antirez/redis/git/commits/ef5e7fbaa20fcda2debd2751d8437d7c2c53b1e0,ef5e7fbaa20fcda2debd2751d8437d7c2c53b1e0,Cluster: getKeysFromCommand() top comment improved.
antirez,2014-03-10 14:26:10,https://api.github.com/repos/antirez/redis/git/commits/c0e818ab080f8c07eb1885945eea4a42f3ca3d29,c0e818ab080f8c07eb1885945eea4a42f3ca3d29,"Cluster: evalGetKey() added for EVAL/EVALSHA.

Previously we used zunionInterGetKeys(), however after this function was
fixed to account for the destination key (not needed when the API was
designed for ""diskstore"") the two set of commands can no longer be served
by an unique keys-extraction function."
antirez,2014-03-10 14:24:38,https://api.github.com/repos/antirez/redis/git/commits/caf7b9b425807bd72577ae22e75d42e29fb675fa,caf7b9b425807bd72577ae22e75d42e29fb675fa,Cluster: getKeysFromCommand() and related: top-comments added.
antirez,2014-03-10 12:18:41,https://api.github.com/repos/antirez/redis/git/commits/787b297046b5695c5dbca87060566cf1d93762de,787b297046b5695c5dbca87060566cf1d93762de,"Cluster: getKeysFromCommand() API cleaned up.

This API originated from the ""diskstore"" experiment, not for Redis
Cluster itself, so there were legacy/useless things trying to
differentiate between keys that are going to be overwritten and keys
that need to be fetched from disk (preloaded).

All useless with Cluster, so removed with the result of code
simplification."
antirez,2014-03-10 10:43:56,https://api.github.com/repos/antirez/redis/git/commits/55b88e004414359fe8e33d7e0cf4e8454367cf6d,55b88e004414359fe8e33d7e0cf4e8454367cf6d,"Cluster: some zunionInterGetKeys() comment trimmed.

Everything was pretty clear again from the initial statements."
antirez,2014-03-10 10:39:45,https://api.github.com/repos/antirez/redis/git/commits/aca6cb529bf27b29e7bec4050371a852fb3e8222,aca6cb529bf27b29e7bec4050371a852fb3e8222,"Merge pull request #1586 from mattsta/fix-zunioninterstorekeys

Fix key extraction for z{union,inter}store"
antirez,2014-03-10 09:41:27,https://api.github.com/repos/antirez/redis/git/commits/c1a7d3e61f84344393f47924777c89d9cd78b775,c1a7d3e61f84344393f47924777c89d9cd78b775,"Cluster: abort on port too high error.

It also fixes multi-line comment style to be consistent with the rest of
the code base.

Related to #1555."
antirez,2014-03-10 09:37:50,https://api.github.com/repos/antirez/redis/git/commits/442b06db54b98189a472e2ebacf31090c61571e6,442b06db54b98189a472e2ebacf31090c61571e6,"Merge pull request #1555 from mattsta/cluster-port-error-out

Cluster port error out"
antirez,2014-03-10 09:33:53,https://api.github.com/repos/antirez/redis/git/commits/ed8c55237b4f2c1c5c5fbac0c0b4d6b12ca7695a,ed8c55237b4f2c1c5c5fbac0c0b4d6b12ca7695a,"Cluster: be explicit about passing NULL as bind addr for connect.

The code was already correct but it was using that bindaddr[0] is set to
NULL as a side effect of current implementation if no bind address is
configured. This is not guarnteed to hold true in the future."
antirez,2014-03-10 09:32:28,https://api.github.com/repos/antirez/redis/git/commits/3e8a92ef8d93e50ac57e688ebd68838437921f27,3e8a92ef8d93e50ac57e688ebd68838437921f27,Cluster: log error when anetTcpNonBlockBindConnect() fails.
antirez,2014-03-10 09:28:32,https://api.github.com/repos/antirez/redis/git/commits/3b0edb80ecf0f8702b484fed9cb3aaccc63f60ed,3b0edb80ecf0f8702b484fed9cb3aaccc63f60ed,"Merge pull request #1567 from mattsta/fix-cluster-join

Bind source address for cluster communication"
antirez,2014-03-10 08:57:52,https://api.github.com/repos/antirez/redis/git/commits/0f1f25784f6440f3476609065edfb524e3bbbcf4,0f1f25784f6440f3476609065edfb524e3bbbcf4,"Cluster: better timeout and retry time for failover.

When node-timeout is too small, in the order of a few milliseconds,
there is no way the voting process can terminate during that time, so we
set a lower limit for the failover timeout of two seconds.

The retry time is set to two times the failover timeout time, so it is
at least 4 seconds."
mattsta,2014-03-07 21:32:04,https://api.github.com/repos/antirez/redis/git/commits/f0782a6e8633988a935097c195899773da2c2ad1,f0782a6e8633988a935097c195899773da2c2ad1,"Fix key extraction for z{union,inter}store

The previous implementation wasn't taking into account
the storage key in position 1 being a requirement (it
was only counting the source keys in positions 3 to N).

Fixes antirez/redis#1581"
antirez,2014-03-07 17:03:51,https://api.github.com/repos/antirez/redis/git/commits/0f2597092fdcd17547282bd434e46d3dc8412e23,0f2597092fdcd17547282bd434e46d3dc8412e23,"Typo in sentinel.conf, exists -> exits."
antirez,2014-03-07 15:18:00,https://api.github.com/repos/antirez/redis/git/commits/6984692060106de666ee89d092163075282c6498,6984692060106de666ee89d092163075282c6498,Cluster: fix conditional generating TRYAGAIN error.
antirez,2014-03-07 12:19:09,https://api.github.com/repos/antirez/redis/git/commits/36676c23186617ff096d534c6faa353829c4e437,36676c23186617ff096d534c6faa353829c4e437,Redis Cluster: support for multi-key operations.
antirez,2014-03-06 17:14:36,https://api.github.com/repos/antirez/redis/git/commits/bbf39b7a3a6d1860abb59aae1af3f91eb13962c3,bbf39b7a3a6d1860abb59aae1af3f91eb13962c3,"Merge pull request #1576 from Hailei/fix-lruidletime-comment

Fix REDIS_LRU_CLOCK_MAX's value"
antirez,2014-03-06 17:06:30,https://api.github.com/repos/antirez/redis/git/commits/b74c899da39dc52ce38801a447ef15459ae02466,b74c899da39dc52ce38801a447ef15459ae02466,Merge branch 'unstable' of github.com:/antirez/redis into unstable
mattsta,2014-03-04 22:31:34,https://api.github.com/repos/antirez/redis/git/commits/e8bae92e5479bc64a82d92c73e9360438cf9f6f5,e8bae92e5479bc64a82d92c73e9360438cf9f6f5,"Reset op_sec_last_sample_ops when reset requested

This value needs to be set to zero (in addition to
stat_numcommands) or else people may see
a negative operations per second count after they
run CONFIG RESETSTAT.

Fixes antirez/redis#1577"
mattsta,2014-02-26 23:05:12,https://api.github.com/repos/antirez/redis/git/commits/385c25f70f97903df64d19b8e54cbba13ec66f74,385c25f70f97903df64d19b8e54cbba13ec66f74,"Remove redundant IP length definition

REDIS_CLUSTER_IPLEN had the same value as
REDIS_IP_STR_LEN.  They were both #define'd
to the same INET6_ADDRSTRLEN."
mattsta,2014-02-26 23:02:55,https://api.github.com/repos/antirez/redis/git/commits/d2040ab9b13bc4edd07825e2ecee55b3679e0651,d2040ab9b13bc4edd07825e2ecee55b3679e0651,"Remove some redundant code

Function nodeIp2String in cluster.c is exactly
anetPeerToString with a pre-extracted fd."
mattsta,2014-02-26 22:58:46,https://api.github.com/repos/antirez/redis/git/commits/59cf0b1902f20436e01f2a7523609a597e688c5b,59cf0b1902f20436e01f2a7523609a597e688c5b,"Fix return value check for anetTcpAccept

anetTcpAccept returns ANET_ERR, not AE_ERR.

This isn't a physical error since both ANET_ERR
and AE_ERR are -1, but better to be consistent."
antirez,2014-03-06 16:40:04,https://api.github.com/repos/antirez/redis/git/commits/54e99fb2266f12070b905ad1e8f9638625126056,54e99fb2266f12070b905ad1e8f9638625126056,"Merge pull request #1578 from badboy/patch-5

Small typo fixed"
antirez,2014-03-05 10:26:14,https://api.github.com/repos/antirez/redis/git/commits/9b401819c009c85f285c5b4890fb91a6a2a91f7f,9b401819c009c85f285c5b4890fb91a6a2a91f7f,Cast saveparams[].seconds to long for %ld format specifier.
badboy,2014-03-04 23:41:02,https://api.github.com/repos/antirez/redis/git/commits/5f5118bdad709c5eef10140130ba1329b6a5e661,5f5118bdad709c5eef10140130ba1329b6a5e661,Small typo fixed
mattsta,2014-03-03 15:57:27,https://api.github.com/repos/antirez/redis/git/commits/e5b1e7be64d82b0360af3bed0eaa22ca942be4f4,e5b1e7be64d82b0360af3bed0eaa22ca942be4f4,"Bind source address for cluster communication

The first address specified as a bind parameter
(server.bindaddr[0]) gets used as the source IP
for cluster communication.

If no bind address is specified by the user, the
behavior is unchanged.

This patch allows multiple Redis Cluster instances
to communicate when running on the same interface
of the same host."
antirez,2014-03-04 16:10:29,https://api.github.com/repos/antirez/redis/git/commits/8d011492a0802c45114bab63c41b7311648632be,8d011492a0802c45114bab63c41b7311648632be,"Sentinel test: set less time sensitive defaults.

This commit sets the failover timeout to 30 seconds instead of the 180
seconds default, and allows to reconfigure multiple slaves at the same
time.

This makes tests less sensible to timing, with the result that there are
less false positives due to normal behaviors that require time to
succeed or to be retried.

However the long term solution is probably some way in order to detect
when a test failed because of timing issues (for example split brain
during leader election) and retry it."
antirez,2014-03-04 15:54:40,https://api.github.com/repos/antirez/redis/git/commits/47750998a61c4ba88be542292fb438ae651f8de3,47750998a61c4ba88be542292fb438ae651f8de3,"Sentinel: more aggressive failover start desynchronization.

Sentinel needs to avoid split brain conditions due to multiple sentinels
trying to get voted at the exact same time.

So far some desynchronization was provided by fluctuating server.hz,
that is the frequency of the timer function call. However the
desynchonization provided in this way was not enough when using many
Sentinel instances, especially when a large quorum value is used in
order to force a greater degree of agreement (more than N/2+1).

It was verified that it was likely to trigger a split brain
condition, forcing the system to try again after a timeout.
Usually the system will succeed after a few retries, but this is not
optimal.

This commit desynchronizes instances in a more effective way to make it
likely that the first attempt will be successful."
antirez,2014-03-04 15:39:44,https://api.github.com/repos/antirez/redis/git/commits/08da025f56b2b99523fc9fa9a8976ceafa69fe57,08da025f56b2b99523fc9fa9a8976ceafa69fe57,CONFIG REWRITE should be logged at WARNING level.
antirez,2014-03-04 14:55:36,https://api.github.com/repos/antirez/redis/git/commits/efb092baa6541c4541f944ce1b0c2ed9f72da019,efb092baa6541c4541f944ce1b0c2ed9f72da019,Sentinel test: debugging console improved.
antirez,2014-03-04 11:05:49,https://api.github.com/repos/antirez/redis/git/commits/7d97a4c99b6564902c16be24ed352101a63e813d,7d97a4c99b6564902c16be24ed352101a63e813d,Sentinel test: initial debugging console.
antirez,2014-03-04 10:20:53,https://api.github.com/repos/antirez/redis/git/commits/3072a1e7813f57cf70f401caa928840a1afbe5f7,3072a1e7813f57cf70f401caa928840a1afbe5f7,Sentinel test: be more patient in create_redis_master_slave_cluster.
antirez,2014-03-04 10:17:27,https://api.github.com/repos/antirez/redis/git/commits/dd8d883c9c81517a851df7f13f38a4fca801e4c9,dd8d883c9c81517a851df7f13f38a4fca801e4c9,Sentiel test: add test start time in output.
antirez,2014-03-03 16:11:51,https://api.github.com/repos/antirez/redis/git/commits/c5edd91716486b1134aa9318657e38e43445a75d,c5edd91716486b1134aa9318657e38e43445a75d,Cluster: invalidate current transaction on redirections.
antirez,2014-03-03 12:26:18,https://api.github.com/repos/antirez/redis/git/commits/35e8bc305dd800e44b528f71a581b23c777340e5,35e8bc305dd800e44b528f71a581b23c777340e5,Sentinel test: use 1000 as retry in initial 00 unit test.
antirez,2014-03-03 12:25:14,https://api.github.com/repos/antirez/redis/git/commits/1734f7aedb105974e401acfbabc9139fcdac449d,1734f7aedb105974e401acfbabc9139fcdac449d,Sentinel test: initial tests in 03 unit.
antirez,2014-03-03 12:23:32,https://api.github.com/repos/antirez/redis/git/commits/db9e718c8a004b5fbd012f106a2e6d670dfc80c2,db9e718c8a004b5fbd012f106a2e6d670dfc80c2,Sentinel test: foreach_instance_id now supports 'continue'.
antirez,2014-03-03 12:01:11,https://api.github.com/repos/antirez/redis/git/commits/69cc3b692ffc543e9d46064438ac380ef33513a7,69cc3b692ffc543e9d46064438ac380ef33513a7,Sentienl test: fixed typo in unit 03 top comment.
antirez,2014-03-03 10:20:54,https://api.github.com/repos/antirez/redis/git/commits/e41a3edfab107acf9241cfc1db5ddece8e9fc9ff,e41a3edfab107acf9241cfc1db5ddece8e9fc9ff,Merge branch 'cli_improved_bigkeys' of git://github.com/michael-grunder/redis into unstable
antirez,2014-03-03 10:19:54,https://api.github.com/repos/antirez/redis/git/commits/12a88d575d2cdd1fb36c8eef043f1f7e6fdd5246,12a88d575d2cdd1fb36c8eef043f1f7e6fdd5246,Document why we update peak memory in INFO.
antirez,2014-03-03 10:17:37,https://api.github.com/repos/antirez/redis/git/commits/0c1bb1313c4ae33cb3cb8f4f16f8ad415ed85a75,0c1bb1313c4ae33cb3cb8f4f16f8ad415ed85a75,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2014-03-03 10:16:51,https://api.github.com/repos/antirez/redis/git/commits/68d6d1597f3c346d8a011314c1e255cc296d1c90,68d6d1597f3c346d8a011314c1e255cc296d1c90,"Merge pull request #1572 from mattsta/consistent-max-memory-info

Force INFO used_memory_peak to match peak memory"
antirez,2014-03-03 10:12:11,https://api.github.com/repos/antirez/redis/git/commits/8dea2029a4ec3382b7d80de82d793ef2ba2773e5,8dea2029a4ec3382b7d80de82d793ef2ba2773e5,"Fix configEpoch assignment when a cluster slot gets ""closed"".

This is still code to rework in order to use agreement to obtain a new
configEpoch when a slot is migrated, however this commit handles the
special case that happens when the nodes are just started and everybody
has a configEpoch of 0. In this special condition to have the maximum
configEpoch is not enough as the special epoch 0 is not unique (all the
others are).

This does not fixes the intrinsic race condition of a failover happening
while we are resharding, that will be addressed later."
mattsta,2014-02-28 22:47:41,https://api.github.com/repos/antirez/redis/git/commits/f1c9a203b2eda46c2980582d3bdb12b6e66f4aaf,f1c9a203b2eda46c2980582d3bdb12b6e66f4aaf,"Force INFO used_memory_peak to match peak memory

used_memory_peak only updates in serverCron every server.hz,
but Redis can use more memory and a user can request memory
INFO before used_memory_peak gets updated in the next
cron run.

This patch updates used_memory_peak to the current
memory usage if the current memory usage is higher
than the recorded used_memory_peak value.

(And it only calls zmalloc_used_memory() once instead of
twice as it was doing before.)"
antirez,2014-02-28 15:00:00,https://api.github.com/repos/antirez/redis/git/commits/a89c8bb87cdc0e734888d148c84eb7be63b18587,a89c8bb87cdc0e734888d148c84eb7be63b18587,Sentinel test: Makefile target added.
michael-grunder,2014-02-27 20:01:57,https://api.github.com/repos/antirez/redis/git/commits/806788d009f3d95b3f48c624253c80165b6ed04d,806788d009f3d95b3f48c624253c80165b6ed04d,"Improved bigkeys with progress, pipelining and summary

This commit reworks the redis-cli --bigkeys command to provide more
information about our progress as well as output summary information
when we're done.

 - We now show an approximate percentage completion as we go
 - Hiredis pipelining is used for TYPE and SIZE retreival
 - A summary of keyspace distribution and overall breakout at the end"
antirez,2014-02-27 14:27:05,https://api.github.com/repos/antirez/redis/git/commits/8b8c1cd4c2a40a4a11dce3d072e3e53d8d89a1b1,8b8c1cd4c2a40a4a11dce3d072e3e53d8d89a1b1,BITPOS fuzzy testing.
antirez,2014-02-27 14:01:45,https://api.github.com/repos/antirez/redis/git/commits/b21f4d63de4db35900f7f9e999f606fb87ab3770,b21f4d63de4db35900f7f9e999f606fb87ab3770,Basic BITPOS tests.
antirez,2014-02-27 12:17:23,https://api.github.com/repos/antirez/redis/git/commits/76a6e82d8926be859a272fa60612e610334f93ad,76a6e82d8926be859a272fa60612e610334f93ad,warnigns -> warnings in redisBitpos().
antirez,2014-02-27 11:53:03,https://api.github.com/repos/antirez/redis/git/commits/0e31eaa27f995fead02b861a7df403771ce772d2,0e31eaa27f995fead02b861a7df403771ce772d2,"More consistent BITPOS behavior with bit=0 and ranges.

With the new behavior it is possible to specify just the start in the
range (the end will be assumed to be the first byte), or it is possible
to specify both start and end.

This is useful to change the behavior of the command when looking for
zeros inside a string.

1) If the user specifies both start and end, and no 0 is found inside
   the range, the command returns -1.

2) If instead no range is specified, or just the start is given, even
   if in the actual string no 0 bit is found, the command returns the
   first bit on the right after the end of the string.

So for example if the string stored at key foo is ""\xff\xff"":

    BITPOS foo (returns 16)
    BITPOS foo 0 -1 (returns -1)
    BITPOS foo 0 (returns 16)

The idea is that when no end is given the user is just looking for the
first bit that is zero and can be set to 1 with SETBIT, as it is
""available"". Instead when a specific range is given, we just look for a
zero within the boundaries of the range."
antirez,2014-02-27 11:40:58,https://api.github.com/repos/antirez/redis/git/commits/38c620b3b5676281463ab155e2447889f984b44f,38c620b3b5676281463ab155e2447889f984b44f,"Initial implementation of BITPOS.

It appears to work but more stress testing, and both unit tests and
fuzzy testing, is needed in order to ensure the implementation is sane."
antirez,2014-02-27 09:14:03,https://api.github.com/repos/antirez/redis/git/commits/addd4de9c1886f683b9f5220b5ada15ea3312d3b,addd4de9c1886f683b9f5220b5ada15ea3312d3b,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2014-02-27 09:07:29,https://api.github.com/repos/antirez/redis/git/commits/8d95a47408e5b1accc8e51d182684e8c83cd133d,8d95a47408e5b1accc8e51d182684e8c83cd133d,Added two more BITCOUNT tests stressing misaligned access.
antirez,2014-02-27 09:00:17,https://api.github.com/repos/antirez/redis/git/commits/2a7847a3b5732667f1b63a12f6cdbd25285dccf8,2a7847a3b5732667f1b63a12f6cdbd25285dccf8,"BITCOUNT fuzzy test with random start/end added.

It was verified in practice that this test is able to stress much more
the implementation by introducing errors that were only trivially to
detect with different offsets but impossible to detect starting always
at zero and counting bits the full length of the string."
antirez,2014-02-27 08:46:20,https://api.github.com/repos/antirez/redis/git/commits/746ce35f5f7296fbf829cfde031820ea8dffdc89,746ce35f5f7296fbf829cfde031820ea8dffdc89,Fix misaligned word access in redisPopcount().
antirez,2014-02-25 21:07:46,https://api.github.com/repos/antirez/redis/git/commits/5edc7f76edb8d4e6786be2a2ad44af6564c303cd,5edc7f76edb8d4e6786be2a2ad44af6564c303cd,"Merge pull request #1565 from mattsta/fix-cluster-ipv6-addr

Fix IP representation in clusterMsgDataGossip"
mattsta,2014-02-25 21:02:28,https://api.github.com/repos/antirez/redis/git/commits/d769cad4bf37ac913bf41d3b555b2b3d765dc829,d769cad4bf37ac913bf41d3b555b2b3d765dc829,Fix IP representation in clusterMsgDataGossip
antirez,2014-02-25 14:36:51,https://api.github.com/repos/antirez/redis/git/commits/55c059e27078e86cd097707be67faf6280f5321b,55c059e27078e86cd097707be67faf6280f5321b,Sentinel test: add stub for unit 04.
antirez,2014-02-25 14:21:53,https://api.github.com/repos/antirez/redis/git/commits/fe9a489b29ac6f9f138ab1f94bc1c862fe0af2f3,fe9a489b29ac6f9f138ab1f94bc1c862fe0af2f3,Sentinel test: added TODO items in 02 unit.
antirez,2014-02-25 13:59:57,https://api.github.com/repos/antirez/redis/git/commits/55e36e1132e0d13e788629f72ccb5d92e6fc6ae2,55e36e1132e0d13e788629f72ccb5d92e6fc6ae2,Merge branch 'bigkeys_scan' of git://github.com/michael-grunder/redis into unstable
antirez,2014-02-25 13:59:36,https://api.github.com/repos/antirez/redis/git/commits/339322fe58f711ee5c5ebaad114bcb3017059188,339322fe58f711ee5c5ebaad114bcb3017059188,Sentinel test: check role at end of unit 01.
michael-grunder,2014-02-25 13:41:30,https://api.github.com/repos/antirez/redis/git/commits/013a4ce242eb4c13c4eee68b54a68f3e7b23f0f3,013a4ce242eb4c13c4eee68b54a68f3e7b23f0f3,"Update --bigkeys to use SCAN

This commit changes the findBigKeys() function in redis-cli.c to use the new
SCAN command for iterating the keyspace, rather than RANDOMKEY.  Because we
can know when we're done using SCAN, it will exit after exhausting the keyspace."
antirez,2014-02-25 13:33:44,https://api.github.com/repos/antirez/redis/git/commits/fef88681f287ddbd54123d581d02d59771e57311,fef88681f287ddbd54123d581d02d59771e57311,Sentinel test: kill masters instead of using DEBUG SLEEP in all tests.
antirez,2014-02-25 12:47:37,https://api.github.com/repos/antirez/redis/git/commits/a2c76ffb1c307e0d77a46d8e9e104778d4b8c626,a2c76ffb1c307e0d77a46d8e9e104778d4b8c626,redis-cli: also remove useless uint8_t.
antirez,2014-02-25 12:43:47,https://api.github.com/repos/antirez/redis/git/commits/ba993cc685811d5e75acc9ff562c53c505368f0f,ba993cc685811d5e75acc9ff562c53c505368f0f,"redis-cli: don't use uint64_t where actually not needed.

The computation is just something to take the CPU busy, no need to use a
specific type. Since stdint.h was not included this prevented
compilation on certain systems."
antirez,2014-02-25 11:38:24,https://api.github.com/repos/antirez/redis/git/commits/5580350a7b179bffc96b277dca2958c64ac773a8,5580350a7b179bffc96b277dca2958c64ac773a8,redis-cli: check argument existence for --pattern.
antirez,2014-02-25 11:37:52,https://api.github.com/repos/antirez/redis/git/commits/c1d67ea9b46f88098e88450adb968d8d7c140cda,c1d67ea9b46f88098e88450adb968d8d7c140cda,redis-cli: --intrinsic-latency run mode added.
antirez,2014-02-25 11:24:45,https://api.github.com/repos/antirez/redis/git/commits/dcac007b814d36205f317349152db116842cd326,dcac007b814d36205f317349152db116842cd326,redis-cli: added comments to split program in parts.
antirez,2014-02-25 07:48:46,https://api.github.com/repos/antirez/redis/git/commits/386467acfb53e855369e9ffdad316462462802e5,386467acfb53e855369e9ffdad316462462802e5,"Sentinel test: restart instances left killed by previous unit.

An unit can abort in the middle for an error. The next unit should not
assume that the instances are in a clean state, and must restart what
was left killed."
antirez,2014-02-25 07:33:41,https://api.github.com/repos/antirez/redis/git/commits/a9360c62e8b9f0d612e3cb7054d9fb7a1a251f52,a9360c62e8b9f0d612e3cb7054d9fb7a1a251f52,"Sentinel test: jump to next unit on test failure.

Sentinel tests are designed to be dependent on the previous tests in the
same unit, so usually we can't continue with the next test in the same
unit if a previous test failed."
antirez,2014-02-25 07:29:12,https://api.github.com/repos/antirez/redis/git/commits/044b62754959d8cbba3fb24a37a3e6b29b4e773c,044b62754959d8cbba3fb24a37a3e6b29b4e773c,"Sentinel test: test majority crashing Sentinels.

The test was previously performed by removing the master from the
Sentinel monitored masters. The test with the Sentinels crashed is
more similar to real-world partitions / failures."
antirez,2014-02-25 07:23:48,https://api.github.com/repos/antirez/redis/git/commits/630fb3539f402b07b4a27a65d8ab0fe21df2feb1,630fb3539f402b07b4a27a65d8ab0fe21df2feb1,"Sentinel test: restart_instance should refresh pid attrib.

Also kill_instance was modified to warn when a test will try to kill the
same instance multiple times for error."
antirez,2014-02-24 16:21:50,https://api.github.com/repos/antirez/redis/git/commits/d3a3ef0bc1f993661de83bca07256902aff8ecab,d3a3ef0bc1f993661de83bca07256902aff8ecab,"Sentinel test: more stuff mored from 00-base to init.

The area a number of mandatory tests to craete a stable setup for
testing that is not too sensitive to timing issues. All those tests
moved to includes/init-tests, and marked as (init)."
antirez,2014-02-24 16:10:20,https://api.github.com/repos/antirez/redis/git/commits/b15411df98fbd1eea941e729c457aff5dee3bfa3,b15411df98fbd1eea941e729c457aff5dee3bfa3,Sentinel: log quorum with +monitor event.
antirez,2014-02-24 15:57:52,https://api.github.com/repos/antirez/redis/git/commits/29f4df801815712d70154a43103d815b006e5546,29f4df801815712d70154a43103d815b006e5546,"Sentinel test: removed useless code to set SDOWN timeout.

The new common initialization code used to start a new unit already set
the timeout to 2000 milliseconds."
antirez,2014-02-24 15:32:09,https://api.github.com/repos/antirez/redis/git/commits/6b373edb773787e67cec502ab7e42234bdf365f2,6b373edb773787e67cec502ab7e42234bdf365f2,Sentinel: generate +monitor events at startup.
antirez,2014-02-24 15:25:34,https://api.github.com/repos/antirez/redis/git/commits/3b7a7574685f184b9c88e8aed5f97e07265f21ec,3b7a7574685f184b9c88e8aed5f97e07265f21ec,"Sentinel: log +monitor and +set events.

Now that we have a runtime configuration system, it is very important to
be able to log how the Sentinel configuration changes over time because
of API calls."
antirez,2014-02-24 15:22:52,https://api.github.com/repos/antirez/redis/git/commits/25cebf72853ccf0e8d7a042217b4f39f2ad9d793,25cebf72853ccf0e8d7a042217b4f39f2ad9d793,Sentinel: added missing exit(1) after checking for config file.
antirez,2014-02-24 10:51:31,https://api.github.com/repos/antirez/redis/git/commits/540536c05519cce1174b00d1ff25a125b9c7c4a1,540536c05519cce1174b00d1ff25a125b9c7c4a1,Sentinel test: tmp dir and gitignore added.
antirez,2014-02-23 17:01:30,https://api.github.com/repos/antirez/redis/git/commits/09dec3613e7af60a084704eb2e80c5cf4ecd1b09,09dec3613e7af60a084704eb2e80c5cf4ecd1b09,Sentinel test: minor fixes to --pause-on-error.
antirez,2014-02-23 16:57:53,https://api.github.com/repos/antirez/redis/git/commits/afd3db17a01fd2fa8b2d1b85edcae389b3e7f647,afd3db17a01fd2fa8b2d1b85edcae389b3e7f647,"Sentinel test: --pause-on-error option added.

Pause the test with running instances available for state inspection on
error."
antirez,2014-02-23 16:50:59,https://api.github.com/repos/antirez/redis/git/commits/a929867cca5c31c5923ff97ab4ddbc35a094bbc6,a929867cca5c31c5923ff97ab4ddbc35a094bbc6,Sentinel test: added empty units to fill later.
antirez,2014-02-23 16:47:28,https://api.github.com/repos/antirez/redis/git/commits/e16333285813c8dc5d1af3a55aeb7e81e91f01cb,e16333285813c8dc5d1af3a55aeb7e81e91f01cb,"Merge pull request #1545 from mattsta/fix-redis-cli-sync

Deny SYNC and PSYNC in redis-cli"
antirez,2014-02-22 16:34:46,https://api.github.com/repos/antirez/redis/git/commits/b1c1386374aabd085a6d2c9659cc8d50bc0b866a,b1c1386374aabd085a6d2c9659cc8d50bc0b866a,"Sentinel: IDONTKNOW error removed.

This error was conceived for the older version of Sentinel that worked
via master redirection and that was not able to get configuration
updates from other Sentinels via the Pub/Sub channel of masters or
slaves.

This reply does not make sense today, every Sentinel should reply with
the best information it has currently. The error will make even more
sense in the future since the plan is to allow Sentinels to update the
configuration of other Sentinels via gossip with a direct chat without
the prerequisite that they have at least a monitored instance in common."
antirez,2014-02-22 16:26:30,https://api.github.com/repos/antirez/redis/git/commits/8c254415f7caa392b750131e3f37ccf123e03cd3,8c254415f7caa392b750131e3f37ccf123e03cd3,"Sentinel test: framework improved and conf-update unit added.

It is now possible to kill and restart sentinel or redis instances for
more real-world testing.

The 01 unit tests the capability of Sentinel to update the configuration
of Sentinels rejoining the cluster, however the test is pretty trivial
and more tests should be added."
antirez,2014-02-21 08:32:13,https://api.github.com/repos/antirez/redis/git/commits/1d7d1d9b1fb27b23321c7a9e8adac7d6c1122d2a,1d7d1d9b1fb27b23321c7a9e8adac7d6c1122d2a,"Merge pull request #1559 from mattsta/more-detailed-process-title

Add cluster or sentinel to proc title"
mattsta,2014-02-21 04:45:56,https://api.github.com/repos/antirez/redis/git/commits/2c273e359130f6546aa471ffd0f1855d415a05c5,2c273e359130f6546aa471ffd0f1855d415a05c5,"Add cluster or sentinel to proc title

If you launch redis with `redis-server --sentinel` then
in a ps, your output only says ""redis-server IP:Port"" — this
patch changes the proc title to include [sentinel] or
[cluster] depending on the current server mode:
e.g.  ""redis-server IP:Port [sentinel]""
      ""redis-server IP:Port [cluster]"""
antirez,2014-02-20 15:57:51,https://api.github.com/repos/antirez/redis/git/commits/d7da507683028e6bb7b53220f85b574e4a51dce9,d7da507683028e6bb7b53220f85b574e4a51dce9,"Sentinel test: move init tests as includes.

Most units will start with these two basic tests to create an
environment where the real tests are ran."
antirez,2014-02-20 15:28:38,https://api.github.com/repos/antirez/redis/git/commits/57654444542b54e178b07fa904aee8b019f3a9c9,57654444542b54e178b07fa904aee8b019f3a9c9,Sentinel test: ability to run just a subset of test files.
antirez,2014-02-20 11:13:52,https://api.github.com/repos/antirez/redis/git/commits/7d7b3810e7080cceeb58d39a193f06ac4585c8e7,7d7b3810e7080cceeb58d39a193f06ac4585c8e7,"Sentinel: report instances role switch events.

This is useful mostly for debugging of issues."
mattsta,2014-02-19 22:30:07,https://api.github.com/repos/antirez/redis/git/commits/ce68caea371cc75378c2261927c953fbd27147c7,ce68caea371cc75378c2261927c953fbd27147c7,"Cluster: error out quicker if port is unusable

The default cluster control port is 10,000 ports higher than
the base Redis port.  If Redis is started on a too-high port,
Cluster can't start and everything will exit later anyway."
mattsta,2014-02-19 22:26:33,https://api.github.com/repos/antirez/redis/git/commits/b20ae393f1129f97eea4d9b70f44bf2309cfbd65,b20ae393f1129f97eea4d9b70f44bf2309cfbd65,"Fix ""can't bind to address"" error reporting.

Report the actual port used for the listening attempt instead of
server.port.

Originally, Redis would just listen on server.port.
But, with clustering, Redis uses a Cluster Port too,
so we can't say server.port is always where we are listening.

If you tried to launch Redis with a too-high port number (any
port where Port+10000 > 65535), Redis would refuse to start, but
only print an error saying it can't connect to the Redis port.

This patch fixes much confusions."
antirez,2014-02-19 09:26:23,https://api.github.com/repos/antirez/redis/git/commits/e087d8a20df0867c611a85361257bbed758f7448,e087d8a20df0867c611a85361257bbed758f7448,Sentinel test: some reliability fixes to 00-base tests.
antirez,2014-02-19 09:08:49,https://api.github.com/repos/antirez/redis/git/commits/a88a057a1faff1ffe6296b305cca4f0936c29ed8,a88a057a1faff1ffe6296b305cca4f0936c29ed8,Sentinel test: check that role matches at end of 00-base.
antirez,2014-02-19 08:44:38,https://api.github.com/repos/antirez/redis/git/commits/2a08c7e5ac86b9f0c38e844af5ecb35091df74e5,2a08c7e5ac86b9f0c38e844af5ecb35091df74e5,Sentinel test: ODOWN and agreement.
antirez,2014-02-18 16:03:56,https://api.github.com/repos/antirez/redis/git/commits/136537dcb06ec19fe62c4c7c13e17cbf7fad867a,136537dcb06ec19fe62c4c7c13e17cbf7fad867a,Sentinel test: check reconfig of slaves and old master.
antirez,2014-02-18 15:31:52,https://api.github.com/repos/antirez/redis/git/commits/8e553ec67cdc1d2720b2c37d5ccbacf1924bd3a9,8e553ec67cdc1d2720b2c37d5ccbacf1924bd3a9,Sentinel test: basic failover tested. Framework improvements.
antirez,2014-02-18 10:53:54,https://api.github.com/repos/antirez/redis/git/commits/c7b7439528a9eaf693664fc5c543b19438870e01,c7b7439528a9eaf693664fc5c543b19438870e01,Sentinel test: basic tests for MONITOR and auto-discovery.
antirez,2014-02-18 10:38:49,https://api.github.com/repos/antirez/redis/git/commits/c4fbc1d3368734838fd3004dc0b38a8c862e080d,c4fbc1d3368734838fd3004dc0b38a8c862e080d,"Sentinel test: info fields, master-slave setup, fixes."
antirez,2014-02-18 10:07:25,https://api.github.com/repos/antirez/redis/git/commits/19b863c7fadbfd9c0c11340a75337c86234ea104,19b863c7fadbfd9c0c11340a75337c86234ea104,Prefix test file names with numbers to force exec order.
antirez,2014-02-18 10:04:01,https://api.github.com/repos/antirez/redis/git/commits/141bac4c79917675c8b1dd0692413f520ed3b474,141bac4c79917675c8b1dd0692413f520ed3b474,Sentinel test: provide basic commands to access instances.
antirez,2014-02-18 09:27:38,https://api.github.com/repos/antirez/redis/git/commits/7cec9e48cea8caf3d03685f017ca51510ead7f7c,7cec9e48cea8caf3d03685f017ca51510ead7f7c,"Sentinel: SENTINEL_SLAVE_RECONF_RETRY_PERIOD -> RECONF_TIMEOUT

Rename define to match the new meaning."
antirez,2014-02-18 07:50:57,https://api.github.com/repos/antirez/redis/git/commits/18b8bad53cf380471ec28ec097fd38960a246077,18b8bad53cf380471ec28ec097fd38960a246077,"Sentinel: fix slave promotion timeout.

If we can't reconfigure a slave in time during failover, go forward as
anyway the slave will be fixed by Sentinels in the future, once they
detect it is misconfigured.

Otherwise a failover in progress may never terminate if for some reason
the slave is uncapable to sync with the master while at the same time
it is not disconnected."
antirez,2014-02-17 16:37:56,https://api.github.com/repos/antirez/redis/git/commits/af788b585268deeb0f58767e8832add87d12fec1,af788b585268deeb0f58767e8832add87d12fec1,"Sentinel: initial testing framework.

Nothing tested at all so far... Just the infrastructure spawning N
Sentinels and N Redis instances that the test will use again and again."
antirez,2014-02-17 16:36:50,https://api.github.com/repos/antirez/redis/git/commits/34c404e069644336325fb568860cb8248d054089,34c404e069644336325fb568860cb8248d054089,Test: colorstr moved to util.tcl.
antirez,2014-02-17 11:29:54,https://api.github.com/repos/antirez/redis/git/commits/a1dca2efab3e5b18054072e487f6f54814fd8992,a1dca2efab3e5b18054072e487f6f54814fd8992,"Test: code to test server availability refactored.

Some inline test moved into server_is_up procedure.
Also find_available_port was moved into util since it is going
to be used for the Sentinel test as well."
antirez,2014-02-17 11:14:19,https://api.github.com/repos/antirez/redis/git/commits/ede33fb91259000950db667b1e92dd6e398a01f7,ede33fb91259000950db667b1e92dd6e398a01f7,"Get absoulte config file path before processig 'dir'.

The code tried to obtain the configuration file absolute path after
processing the configuration file. However if config file was a relative
path and a ""dir"" statement was processed reading the config, the absolute
path obtained was wrong.

With this fix the absolute path is obtained before processing the
configuration while the server is still in the original directory where
it was executed."
antirez,2014-02-17 11:10:12,https://api.github.com/repos/antirez/redis/git/commits/e1b77b61f320077dd41d8ea2a7fd74561084d75f,e1b77b61f320077dd41d8ea2a7fd74561084d75f,"Sentinel: better specify startup errors due to config file.

Now it logs the file name if it is not accessible. Also there is a
different error for the missing config file case, and for the non
writable file case."
antirez,2014-02-13 14:09:41,https://api.github.com/repos/antirez/redis/git/commits/51bd9da1fdf3d4bb0d4f81234f33003c16db9a51,51bd9da1fdf3d4bb0d4f81234f33003c16db9a51,"Update cached time in rdbLoad() callback.

server.unixtime and server.mstime are cached less precise timestamps
that we use every time we don't need an accurate time representation and
a syscall would be too slow for the number of calls we require.

Such an example is the initialization and update process of the last
interaction time with the client, that is used for timeouts.

However rdbLoad() can take some time to load the DB, but at the same
time it did not updated the time during DB loading. This resulted in the
bug described in issue #1535, where in the replication process the slave
loads the DB, creates the redisClient representation of its master, but
the timestamp is so old that the master, under certain conditions, is
sensed as already ""timed out"".

Thanks to @yoav-steinberg and Redis Labs Inc for the bug report and
analysis."
antirez,2014-02-13 13:32:44,https://api.github.com/repos/antirez/redis/git/commits/7e8abcf6932120b5f9c8a7dadafbd5a8045c2bb6,7e8abcf6932120b5f9c8a7dadafbd5a8045c2bb6,Log when CONFIG REWRITE goes bad.
antirez,2014-02-13 11:25:44,https://api.github.com/repos/antirez/redis/git/commits/f2bdf601bee92972bad7493950a72391b9278606,f2bdf601bee92972bad7493950a72391b9278606,"Test: regression for issue #1549.

It was verified that reverting the commit that fixes the bug, the test
no longer passes."
antirez,2014-02-13 11:10:43,https://api.github.com/repos/antirez/redis/git/commits/21e6b0fbe9810a37844bbdf86e5aba655cfa5fe9,21e6b0fbe9810a37844bbdf86e5aba655cfa5fe9,"Fix script cache bug in the scripting engine.

This commit fixes a serious Lua scripting replication issue, described
by Github issue #1549. The root cause of the problem is that scripts
were put inside the script cache, assuming that slaves and AOF already
contained it, even if the scripts sometimes produced no changes in the
data set, and were not actaully propagated to AOF/slaves.

Example:

    eval ""if tonumber(KEYS[1]) > 0 then redis.call('incr', 'x') end"" 1 0

Then:

    evalsha <sha1 step 1 script> 1 0

At this step sha1 of the script is added to the replication script cache
(the script is marked as known to the slaves) and EVALSHA command is
transformed to EVAL. However it is not dirty (there is no changes to db),
so it is not propagated to the slaves. Then the script is called again:

    evalsha <sha1 step 1 script> 1 1

At this step master checks that the script already exists in the
replication script cache and doesn't transform it to EVAL command. It is
dirty and propagated to the slaves, but they fail to evaluate the script
as they don't have it in the script cache.

The fix is trivial and just uses the new API to force the propagation of
the executed command regardless of the dirty state of the data set.

Thank you to @minus-infinity on Github for finding the issue,
understanding the root cause, and fixing it."
antirez,2014-02-12 15:27:59,https://api.github.com/repos/antirez/redis/git/commits/fc08c8599f36761530b3ba40c31d4e8efb2e7113,fc08c8599f36761530b3ba40c31d4e8efb2e7113,AOF write error: retry with a frequency of 1 hz.
antirez,2014-02-12 11:47:10,https://api.github.com/repos/antirez/redis/git/commits/fe8352540fa5d6157648427b0651de9d5574e48d,fe8352540fa5d6157648427b0651de9d5574e48d,"AOF: don't abort on write errors unless fsync is 'always'.

A system similar to the RDB write error handling is used, in which when
we can't write to the AOF file, writes are no longer accepted until we
are able to write again.

For fsync == always we still abort on errors since there is currently no
easy way to avoid replying with success to the user otherwise, and this
would violate the contract with the user of only acknowledging data
already secured on disk."
antirez,2014-02-11 09:34:14,https://api.github.com/repos/antirez/redis/git/commits/db6d628c3ee9f39a196026b5bb5ac47cb8551aef,db6d628c3ee9f39a196026b5bb5ac47cb8551aef,Cluster: clusterDelNode(): remove node from master's slaves.
antirez,2014-02-11 09:18:24,https://api.github.com/repos/antirez/redis/git/commits/5e0e03be41e7b07455f9f502fbaaa3dbd9e2daaf,5e0e03be41e7b07455f9f502fbaaa3dbd9e2daaf,"Cluster: UPDATE messages are the norm and verbose.

Logging them at WARNING level was of little utility and of sure disturb."
antirez,2014-02-11 09:13:18,https://api.github.com/repos/antirez/redis/git/commits/8251d2d150e454b2783d394eb3f131423b5b89d0,8251d2d150e454b2783d394eb3f131423b5b89d0,Cluster: redis-trib fix: handling of another trivial case.
antirez,2014-02-11 09:06:10,https://api.github.com/repos/antirez/redis/git/commits/4a64286c363267acff39b1f2ec9d4b47640871c0,4a64286c363267acff39b1f2ec9d4b47640871c0,"Cluster: configEpoch assignment in SETNODE improved.

Avoid to trash a configEpoch for every slot migrated if this node has
already the max configEpoch across the cluster.

Still work to do in this area but this avoids both ending with a very
high configEpoch without any reason and to flood the system with fsyncs."
antirez,2014-02-11 09:00:11,https://api.github.com/repos/antirez/redis/git/commits/72f7abf6a2e9a6fc2b6e710e049b48ba6c3cdfa6,72f7abf6a2e9a6fc2b6e710e049b48ba6c3cdfa6,"Cluster: clusterSetStartupEpoch() made more generally useful.

The actual goal of the function was to get the max configEpoch found in
the cluster, so make it general by removing the assignment of the max
epoch to currentEpoch that is useful only at startup."
antirez,2014-02-11 08:48:53,https://api.github.com/repos/antirez/redis/git/commits/44f7afe28a6483c048155098d0606b968264b511,44f7afe28a6483c048155098d0606b968264b511,"Cluster: always increment the configEpoch in SETNODE after import.

Removed a stale conditional preventing the configEpoch from incrementing
after the import in certain conditions. Since the master got a new slot
it should always claim a new configuration."
antirez,2014-02-10 23:32:39,https://api.github.com/repos/antirez/redis/git/commits/a1349728ea1281977e1dd2b82d65465165137390,a1349728ea1281977e1dd2b82d65465165137390,"Cluster: on resharding upgrade version of receiving node.

The node receiving the hash slot needs to have a version that wins over
the other versions in order to force the ownership of the slot.

However the current code is far from perfect since a failover can happen
during the manual resharding. The fix is a work in progress but the
bottom line is that the new version must either be voted as usually,
set by redis-trib manually after it makes sure can't be used by other
nodes, or reserved configEpochs could be used for manual operations (for
example odd versions could be never used by slaves and are always used
by CLUSTER SETSLOT NODE)."
antirez,2014-02-10 22:54:08,https://api.github.com/repos/antirez/redis/git/commits/6dc26795aa949d6cacad4f7c6ab2df0f18f670e4,6dc26795aa949d6cacad4f7c6ab2df0f18f670e4,"Cluster: fsync at every SETSLOT command puts too pressure on disks.

During slots migration redis-trib can send a number of SETSLOT commands.
Fsyncing every time is a bit too much in production as verified
empirically.

To make sure configs are fsynced on all nodes after a resharding
redis-trib may send something like CLUSTER CONFSYNC.

In this case fsyncs were not providing too much value since anyway
processes can crash in the middle of the resharding of an hash slot, and
redis-trib should be able to recover from this condition anyway."
antirez,2014-02-10 22:48:42,https://api.github.com/repos/antirez/redis/git/commits/218358bbbd6ed9b717db50868ca069a3731e08b2,218358bbbd6ed9b717db50868ca069a3731e08b2,"Cluster: conditions to clear ""migrating"" on slot for SETSLOT ... NODE changed.

If the slot is manually assigned to another node, clear the migrating
status regardless of the fact it was previously assigned to us or not,
as long as we no longer have keys for this slot.

This avoid a race during slots migration that may leave the slot in
migrating status in the source node, since it received an update message
from the destination node that is already claiming the slot.

This way we are sure that redis-trib at the end of the slot migration is
always able to close the slot correctly."
antirez,2014-02-10 18:14:05,https://api.github.com/repos/antirez/redis/git/commits/3107e7ca60a126ba096e785b575dd0980e9ae29f,3107e7ca60a126ba096e785b575dd0980e9ae29f,Cluster: remove debugging xputs from redis-trib.
antirez,2014-02-10 18:10:21,https://api.github.com/repos/antirez/redis/git/commits/1ae50a9b1dd0ac9cebb694a184b7da67543d1d60,1ae50a9b1dd0ac9cebb694a184b7da67543d1d60,"Cluster: redis-trib fix: cover new case of open slot.

The case is the trivial one a single node claiming the slot as
migrating, without nodes claiming it as importing."
antirez,2014-02-10 17:48:36,https://api.github.com/repos/antirez/redis/git/commits/59e03a8f3521dddfab5dcbe99f20cf68e69791ad,59e03a8f3521dddfab5dcbe99f20cf68e69791ad,redis-trib: log event after we have reference to 'master'.
antirez,2014-02-10 17:33:34,https://api.github.com/repos/antirez/redis/git/commits/bf670e0745100e1214e5d1ff74ff2e0d869a31ad,bf670e0745100e1214e5d1ff74ff2e0d869a31ad,"Cluster: don't update slave's master if we don't know it.

There is no way we can update the slave's node->slaveof pointer if we
don't know the master (no node with such an ID in our tables)."
antirez,2014-02-10 17:04:43,https://api.github.com/repos/antirez/redis/git/commits/a3755ae9ee6391b0ebb6fa0a26e0f38f00574654,a3755ae9ee6391b0ebb6fa0a26e0f38f00574654,Cluster: ignore slot config changes if we are importing it.
antirez,2014-02-10 17:01:58,https://api.github.com/repos/antirez/redis/git/commits/6fc53e16adba5a3f096bf4f242f883c95d2b12de,6fc53e16adba5a3f096bf4f242f883c95d2b12de,Cluster: update configEpoch after manually messing with slots.
antirez,2014-02-10 16:44:16,https://api.github.com/repos/antirez/redis/git/commits/be0bb19fd3f7159a63a889ecc8db4a06bda2cf15,be0bb19fd3f7159a63a889ecc8db4a06bda2cf15,"Cluster: redis-trib, more info about open slots error."
antirez,2014-02-10 16:21:10,https://api.github.com/repos/antirez/redis/git/commits/1a73c992a3aeedab3c7fd57ab538722327f3fc99,1a73c992a3aeedab3c7fd57ab538722327f3fc99,Cluster: fixed inverted arguments in logging function call.
antirez,2014-02-10 16:18:16,https://api.github.com/repos/antirez/redis/git/commits/32563b4a5f44bee87da2bbe431b6bf3a375dd939,32563b4a5f44bee87da2bbe431b6bf3a375dd939,"Cluster: clear the FAIL status for masters without slots.

Masters without slots don't participate to the cluster but just do
redirections, no need to take them in FAIL state if they are back
reachable."
mattsta,2014-02-10 16:06:13,https://api.github.com/repos/antirez/redis/git/commits/21648473aad5c3d09c6e9a9ed440564c8135ef6f,21648473aad5c3d09c6e9a9ed440564c8135ef6f,"Auto-enter slaveMode when SYNC from redis-cli

If someone asks for SYNC or PSYNC from redis-cli,
automatically enter slaveMode (as if they ran
redis-cli --slave) and continue printing the replication
stream until either they Ctrl-C or the master gets disconnected."
antirez,2014-02-10 16:08:37,https://api.github.com/repos/antirez/redis/git/commits/5b2082ead3489523c336e3047550bad5cad25d98,5b2082ead3489523c336e3047550bad5cad25d98,Cluster: replica migration should only work for masters serving slots.
antirez,2014-02-10 15:59:09,https://api.github.com/repos/antirez/redis/git/commits/f106a79309c540aa49989e53ab8cba66c94b9349,f106a79309c540aa49989e53ab8cba66c94b9349,Cluster: redis-trib del-node variable typo fixed.
antirez,2014-02-10 15:27:33,https://api.github.com/repos/antirez/redis/git/commits/f885fa8bac6e476e4ca9ad8be80707ac74a320af,f885fa8bac6e476e4ca9ad8be80707ac74a320af,Cluster: clusterReadHandler() fixed to work with new message header.
antirez,2014-02-10 15:00:27,https://api.github.com/repos/antirez/redis/git/commits/344a065d51aa79a96c58c490cf202d5950cb60da,344a065d51aa79a96c58c490cf202d5950cb60da,"Cluster: don't propagate PUBLISH two times.

PUBLISH both published messages via Cluster bus and replication when
cluster was enabled, resulting in duplicated message in the slave."
antirez,2014-02-10 14:55:21,https://api.github.com/repos/antirez/redis/git/commits/7bf7b7350cb16d2bc5084d41469f96c9565bf089,7bf7b7350cb16d2bc5084d41469f96c9565bf089,"Cluster: signature changed to ""RCmb"" (Redis Cluster message bus).

Sounds better after all."
antirez,2014-02-10 14:54:19,https://api.github.com/repos/antirez/redis/git/commits/dced9c06198d6b80caf7aa6fe8cb865a562c12db,dced9c06198d6b80caf7aa6fe8cb865a562c12db,Cluster: discard bus messages with version != 0.
antirez,2014-02-10 14:53:09,https://api.github.com/repos/antirez/redis/git/commits/007e1c7cb27045f8c6693ba62680beda3eb86e75,007e1c7cb27045f8c6693ba62680beda3eb86e75,Cluster: added signature + version in bus packets.
antirez,2014-02-10 14:38:54,https://api.github.com/repos/antirez/redis/git/commits/100cd7b21efa965637c5e95cd3bf72f211c00122,100cd7b21efa965637c5e95cd3bf72f211c00122,"Added a release notes file good for ""unstable""."
antirez,2014-02-10 14:19:12,https://api.github.com/repos/antirez/redis/git/commits/b1c3c6e5181e5ff4200155036bea48c935566054,b1c3c6e5181e5ff4200155036bea48c935566054,Old Changelog file removed from unstable branch.
antirez,2014-02-10 11:34:21,https://api.github.com/repos/antirez/redis/git/commits/dca95f241cf71bd030cb5c788349970f34f5f11f,dca95f241cf71bd030cb5c788349970f34f5f11f,Cluster: redis-trib: options table entry for add-node fixed.
antirez,2014-02-07 17:29:20,https://api.github.com/repos/antirez/redis/git/commits/6df4ffe639e1a773855d5c8e87f14fb459a2e4e7,6df4ffe639e1a773855d5c8e87f14fb459a2e4e7,Don't count time to feed MONITORs in SLOWLOG.
antirez,2014-02-07 15:59:24,https://api.github.com/repos/antirez/redis/git/commits/142281dc79a1428a8deae4f531e7340851e66797,142281dc79a1428a8deae4f531e7340851e66797,"Cluster: keys slot computation now supports hash tags.

Currently this is marginally useful, only to make sure two keys are in
the same hash slot when the cluster is stable (no rehashing in
progress).

In the future it is possible that support will be added to run
mutli-keys operations with keys in the same hash slot."
antirez,2014-02-07 10:22:24,https://api.github.com/repos/antirez/redis/git/commits/2d6eb6899319276c0071b922b9458caa909040e1,2d6eb6899319276c0071b922b9458caa909040e1,Sentinel: allow SHUTDOWN command in Sentinel mode.
antirez,2014-02-05 15:38:10,https://api.github.com/repos/antirez/redis/git/commits/970de3e9c0f4e4b0ac56d1710e3b66f4a0cd06a5,970de3e9c0f4e4b0ac56d1710e3b66f4a0cd06a5,"Check for EAGAIN in sendBulkToSlave().

Sometime an osx master with a Linux server over a slow link caused
a strange error where osx called the writable function for
the socket but actually apparently there was no room in the socket
buffer to accept the write: write(2) call returned an EAGAIN error,
that was not checked, so we considered write(2) == 0 always as a connection
reset, which was unfortunate since the bulk transfer has to start again.

Also more errors are logged with the WARNING level in the same code path
now."
antirez,2014-02-05 15:01:52,https://api.github.com/repos/antirez/redis/git/commits/04fe000bf8e53d12a329b7e7f761f3eeb821ea6f,04fe000bf8e53d12a329b7e7f761f3eeb821ea6f,"Cluster: fixed MF condition in clusterHandleSlaveFailover().

For manual failover we need a manual failover in progress, and that
mf_can_start is true (master offset received and matched)."
antirez,2014-02-05 14:52:38,https://api.github.com/repos/antirez/redis/git/commits/c6f02fd67a6a51e127003acf9a6ee14299dfa9a0,c6f02fd67a6a51e127003acf9a6ee14299dfa9a0,Cluster: CLUSTER FAILOVER replies with OK and logs the event.
antirez,2014-02-05 14:45:15,https://api.github.com/repos/antirez/redis/git/commits/c72449af30af7d8607163bbe4da2153c4a912bdc,c72449af30af7d8607163bbe4da2153c4a912bdc,"Cluster: check that a MF is in progress in manualFailoverCheckTimeout().

Otherwise it is always detected as a manual failover timed out."
antirez,2014-02-05 12:10:03,https://api.github.com/repos/antirez/redis/git/commits/b7402bcad58cfcc78beb3f7119aa556b87d985d1,b7402bcad58cfcc78beb3f7119aa556b87d985d1,"Cluster: force AUTH ACK on manual failover.

When a slave requests masters vote for a manual failover, the
REQUEST_AUTH message is flagged in a special way in order to force the
masters to give the authorization even if the master is not marked as
failing."
antirez,2014-02-05 12:01:24,https://api.github.com/repos/antirez/redis/git/commits/4cf0cd57192d07735a1ddd3aeb84151665929f5c,4cf0cd57192d07735a1ddd3aeb84151665929f5c,Cluster: manual failover initial implementation.
antirez,2014-02-04 14:52:09,https://api.github.com/repos/antirez/redis/git/commits/4919a13f503ab4ac5ad5611987996c4432c8de08,4919a13f503ab4ac5ad5611987996c4432c8de08,"CLIENT PAUSE and related API implemented.

The API is one of the bulding blocks of CLUSTER FAILOVER command that
executes a manual failover in Redis Cluster. However exposed as a
command that the user can call directly, it makes much simpler to
upgrade a standalone Redis instance using a slave in a safer way.

The commands works like that:

    CLIENT PAUSE <milliesconds>

All the clients that are not slaves and not in MONITOR state are paused
for the specified number of milliesconds. This means that slaves are
normally served in the meantime.

At the end of the specified amount of time all the clients are unblocked
and will continue operations normally. This command has no effects on
the population of the slow log, since clients are not blocked in the
middle of operations but only when there is to process new data.

Note that while the clients are unblocked, still new commands are
accepted and queued in the client buffer, so clients will likely not
block while writing to the server while the pause is active."
antirez,2014-02-03 15:15:53,https://api.github.com/repos/antirez/redis/git/commits/b089ba98cc9f638d79895535c6ae6aed25651a03,b089ba98cc9f638d79895535c6ae6aed25651a03,"Scripting: expire keys in scripts only at first access.

Keys expiring in the middle of the execution of Lua scripts are to
create inconsistencies in masters and / or AOF files. See the following
example:

    if redis.call(""exists"",KEYS[1]) == 1
    then
        redis.call(""incr"",""mycounter"")
    end

    if redis.call(""exists"",KEYS[1]) == 1
    then
        return redis.call(""incr"",""mycounter"")
    end

The script executes two times the same *if key exists then incrementcounter*
logic. However the two executions will work differently in the master and
the slaves, provided some unlucky timing happens.

In the master the first time the key may still exist, while the second time
the key may no longer exist. This will result in the key incremented just one
time. However as a side effect the master will generate a synthetic
`DEL` command in the replication channel in order to force the slaves to
expire the key (given that key expiration is master-driven).

When the same script will run in the slave, the key will no longer be
there, so the script will not increment the key.

The key idea used to implement the expire-at-first-lookup semantics was
provided by Marc Gravell."
antirez,2014-02-03 14:51:03,https://api.github.com/repos/antirez/redis/git/commits/b770079f2c9177daef571f76fec21059bea7dbca,b770079f2c9177daef571f76fec21059bea7dbca,Allow CONFIG and SHUTDOWN while in stale-slave state.
antirez,2014-02-03 14:45:40,https://api.github.com/repos/antirez/redis/git/commits/89884e8f6ea1271801e70d9d7c9c91a585a656b6,89884e8f6ea1271801e70d9d7c9c91a585a656b6,"Scripting: use mstime() and mstime_t for lua_time_start.

server.lua_time_start is expressed in milliseconds. Use mstime_t instead
of long long, and populate it with mstime() instead of ustime()/1000.

Functionally identical but more natural."
antirez,2014-02-03 10:18:24,https://api.github.com/repos/antirez/redis/git/commits/b0335287ac1ff54c302a2eb1bcfc0df99f1360af,b0335287ac1ff54c302a2eb1bcfc0df99f1360af,"Merge pull request #1534 from gdi2290/patch-1

update copyright year"
PatrickJS,2014-02-03 10:10:54,https://api.github.com/repos/antirez/redis/git/commits/79270cae649e48a3c4d0d7fdbb4f2312f41912df,79270cae649e48a3c4d0d7fdbb4f2312f41912df,update copyright year
antirez,2014-01-31 15:25:13,https://api.github.com/repos/antirez/redis/git/commits/331de6930a562777d8c2ddd554c3691964ce61a9,331de6930a562777d8c2ddd554c3691964ce61a9,"Test: fixed osx msg passing issue in testing framework.

The Redis test uses a server-clients model in order to parallelize the
execution of different tests. However in recent versions of osx not
setting the channel to a binary encoding caused issues even if AFAIK no
binary data is really sent via this channel. However now the channels
are deliberately set to a binary encoding and this solves the issue.

The exact issue was the test not terminating and giving the impression
of running forever, since test clients or servers were unable to
exchange the messages to continue."
antirez,2014-01-31 13:59:50,https://api.github.com/repos/antirez/redis/git/commits/e40d3e28e8ac63f840473f15c8b7a640cd314598,e40d3e28e8ac63f840473f15c8b7a640cd314598,Redis.conf comment about tcp-backlog option improved.
antirez,2014-01-31 13:55:43,https://api.github.com/repos/antirez/redis/git/commits/7be946fde2df23bc983d97e099b8955fc0f69bfb,7be946fde2df23bc983d97e099b8955fc0f69bfb,"Option ""backlog"" renamed ""tcp-backlog"".

This is especially important since we already have a concept of backlog
(the replication backlog)."
nmerdan,2013-11-08 19:55:48,https://api.github.com/repos/antirez/redis/git/commits/d76aa96d1afa556b0adb74b901831cf13134cf1d,d76aa96d1afa556b0adb74b901831cf13134cf1d,"Add support for listen(2) backlog definition

In high RPS environments, the default listen backlog is not sufficient, so
giving users the power to configure it is the right approach, especially
since it requires only minor modifications to the code."
antirez,2014-01-31 10:31:50,https://api.github.com/repos/antirez/redis/git/commits/b8bfbf46c5e3771c11fc26571510f4b59814423a,b8bfbf46c5e3771c11fc26571510f4b59814423a,Cluster: fix an error in migration-barrier comment in redis.conf.
antirez,2014-01-31 10:30:49,https://api.github.com/repos/antirez/redis/git/commits/cbfdd13b3a2ab7a5fcefaba93b4cc4e9e069a695,cbfdd13b3a2ab7a5fcefaba93b4cc4e9e069a695,Cluster: barrer -> barrier in redis.conf.
antirez,2014-01-31 10:12:34,https://api.github.com/repos/antirez/redis/git/commits/a7d30681c9977511951432a17a1e0805d303aa4b,a7d30681c9977511951432a17a1e0805d303aa4b,"Cluster: configurable replicas migration barrier.

It is possible to configure the min number of additional working slaves
a master should be left with, for a slave to migrate to an orphaned
master."
antirez,2014-01-31 09:13:36,https://api.github.com/repos/antirez/redis/git/commits/3ff1bb4b2e146f94672967f1a37bd01b83cd6150,3ff1bb4b2e146f94672967f1a37bd01b83cd6150,"Sentinel: check arity for SENTINEL MASTER command.

This fixes issue #1530."
antirez,2014-01-30 17:23:31,https://api.github.com/repos/antirez/redis/git/commits/6c9359add1aace9680c03b9992705dbf5f25edaf,6c9359add1aace9680c03b9992705dbf5f25edaf,"Cluster: perform orphaned masters check before continue statements.

The check was placed in a way that conflicted with the continue
statements used by the node hearth beat code later that needs to skip
the current node sometimes. Moved at the start of the function so that's
always executed."
antirez,2014-01-30 17:05:11,https://api.github.com/repos/antirez/redis/git/commits/c2507b0ff6346f4443e1753ca8e565214a09d6dd,c2507b0ff6346f4443e1753ca8e565214a09d6dd,"Cluster: replica migration implementation.

This feature allows slaves to migrate to orphaned masters (masters
without working slaves), as long as a set of conditions are met,
including the fact that the migrating slave needs to be in a
master-slaves ring with at least another slave working."
antirez,2014-01-30 15:34:23,https://api.github.com/repos/antirez/redis/git/commits/5b4020fb425f04c1aa18d9bd00931d5d05d81c81,5b4020fb425f04c1aa18d9bd00931d5d05d81c81,Cluster: swap two code blocks to have a more obvious flow.
antirez,2014-01-29 16:28:46,https://api.github.com/repos/antirez/redis/git/commits/4beaaff8eabcf709e81004bb5d125c1a7dce885e,4beaaff8eabcf709e81004bb5d125c1a7dce885e,Cluster: remove not needed return statement breaking failover.
antirez,2014-01-29 16:19:55,https://api.github.com/repos/antirez/redis/git/commits/35820549825791a8f188c2870a9069d36edd019d,35820549825791a8f188c2870a9069d36edd019d,"Cluster: broadcast pong to other slaves in the same ring.

When we schedule a failover, broadcast a PONG to the slaves.
The other slaves that plan to get elected will do the same too, this way
it is likely that every slave will have a good picture of its own rank.

Note that this is N*N messages where N is the number of slaves for the
failing master, however usually even large clusters have many master
nodes but a limited number of replicas per node, so this is harmless."
antirez,2014-01-29 16:16:10,https://api.github.com/repos/antirez/redis/git/commits/e2b59621a84a852577cbb4597dbd7d7240f1a917,e2b59621a84a852577cbb4597dbd7d7240f1a917,Cluster: log offset when announcing the failover election delay.
antirez,2014-01-29 15:51:11,https://api.github.com/repos/antirez/redis/git/commits/940531e9b71dc1538cdaf96744a2b87e339ce836,940531e9b71dc1538cdaf96744a2b87e339ce836,"Cluster: added progressive election delay according to slave rank.

Note that when we compute the initial delay, there are probably still
more up to date information to receive from slaves with new offsets, so
the delay is recomputed when new data is available."
antirez,2014-01-29 15:39:04,https://api.github.com/repos/antirez/redis/git/commits/6f54032080d03c8e0145f9f816ce21879b2c98df,6f54032080d03c8e0145f9f816ce21879b2c98df,"Cluster: function clusterGetSlaveRank() added.

Return the number of slaves for the same master having a better
replication offset of the current slave, that is, the slave ""rank"" used
to pick a delay before the request for election."
antirez,2014-01-29 15:01:00,https://api.github.com/repos/antirez/redis/git/commits/40cd38f0c4988838a2b0e31799ddfc5a96537b95,40cd38f0c4988838a2b0e31799ddfc5a96537b95,Cluster: update node replication offset from bus packets headers.
antirez,2014-01-29 11:17:16,https://api.github.com/repos/antirez/redis/git/commits/9d4ded7ec6cc38f1576cc34e6f30d24c202a5963,9d4ded7ec6cc38f1576cc34e6f30d24c202a5963,Cluster: refactoring: new macros to check node flags.
antirez,2014-01-29 10:38:14,https://api.github.com/repos/antirez/redis/git/commits/099bd336db69b0195b2b151bbd690f7373ad1665,099bd336db69b0195b2b151bbd690f7373ad1665,Cluster: use myself instead of server->cluster.myself.
antirez,2014-01-29 10:22:22,https://api.github.com/repos/antirez/redis/git/commits/e36bd8b43e6e99b0e4936d4a5d326424b13d6107,e36bd8b43e6e99b0e4936d4a5d326424b13d6107,"Cluster: added a global myself pointer in cluster.c.

Accessing to the 'myself' node, the node representing the currently
running instance, is handy without the need to type
server.cluster->myself every time."
antirez,2014-01-29 10:08:52,https://api.github.com/repos/antirez/redis/git/commits/f1e09d8c41f66cf8e2de644da889ee1b2f92e8e6,f1e09d8c41f66cf8e2de644da889ee1b2f92e8e6,"Cluster: clusterBroadcastPong() improved with target selection.

Now we can broadcast a pong to all the instances or just the local
slaves (that is useful for replication offset propagation)."
antirez,2014-01-28 15:51:50,https://api.github.com/repos/antirez/redis/git/commits/befcf6259e1596661a454d1a1013e84178ac9426,befcf6259e1596661a454d1a1013e84178ac9426,Cluster: broadcast master/slave replication offset in bus header.
antirez,2014-01-28 15:34:23,https://api.github.com/repos/antirez/redis/git/commits/8b32bd483aecb3271aa3527ac869b87342a8a9b6,8b32bd483aecb3271aa3527ac869b87342a8a9b6,Cluster: limit cluster.h to 80 cols.
antirez,2014-01-28 15:28:07,https://api.github.com/repos/antirez/redis/git/commits/0b1b25c51cb6e4ed4469d413284d2a8a9051cf0d,0b1b25c51cb6e4ed4469d413284d2a8a9051cf0d,"Cluster: introduced repl_offset fields in clusterNode.

The two fields are used in order to remember the latest known
replication offset and the time we received it from other slave nodes.

This will be used by slaves in order to start the election procedure
with a delay that is proportional to the rank of the slave among the
other slaves for this master, when sorted for replication offset.

Usually this allows the slave with the most updated offset to win the
election and replace the failing master in the cluster."
antirez,2014-01-28 09:10:56,https://api.github.com/repos/antirez/redis/git/commits/72f1715e45c8e8418e158fb676b7e491d51ab9e7,72f1715e45c8e8418e158fb676b7e491d51ab9e7,Fixed inverted if condition in MISCONF error code path.
antirez,2014-01-25 10:53:53,https://api.github.com/repos/antirez/redis/git/commits/23f4e9f0d91ee5845a9edab298c4b4a3c00d5f07,23f4e9f0d91ee5845a9edab298c4b4a3c00d5f07,Don't log MONITOR clients as disconnecting slaves.
antirez,2014-01-24 14:06:01,https://api.github.com/repos/antirez/redis/git/commits/40377fa522383ec73036ba07fe95a1e315e1c19e,40377fa522383ec73036ba07fe95a1e315e1c19e,Cluster: redis-trib set-timeout implemented.
antirez,2014-01-22 17:46:06,https://api.github.com/repos/antirez/redis/git/commits/0f9422d5756da2b05814cb24f235fc0fa9f5044b,0f9422d5756da2b05814cb24f235fc0fa9f5044b,Cluster: update slaves lists in clusterSetMaster().
antirez,2014-01-22 17:38:42,https://api.github.com/repos/antirez/redis/git/commits/5383ab0bc6abeda0c8c10ecf1797bbff238315da,5383ab0bc6abeda0c8c10ecf1797bbff238315da,Cluster: CLUSTER SLAVES subcommand added.
antirez,2014-01-22 17:09:06,https://api.github.com/repos/antirez/redis/git/commits/603e480fd5e209f41fd042cfd6e1ef5e2860ddc2,603e480fd5e209f41fd042cfd6e1ef5e2860ddc2,Cluster: clusterGenNodesDescription() refactored into two functions.
antirez,2014-01-22 11:07:42,https://api.github.com/repos/antirez/redis/git/commits/1cf532dc37a5f853e87790087ea357b78b1b6796,1cf532dc37a5f853e87790087ea357b78b1b6796,redis-cli --help output improved with --scan and periods.
antirez,2014-01-22 11:04:08,https://api.github.com/repos/antirez/redis/git/commits/994c5b26dd1f66e4db728f3760a9cff79ff1f756,994c5b26dd1f66e4db728f3760a9cff79ff1f756,redis-cli: support for --scan option.
antirez,2014-01-22 08:54:43,https://api.github.com/repos/antirez/redis/git/commits/172f14d48c26d35435a77cafbb49458a1a788887,172f14d48c26d35435a77cafbb49458a1a788887,"Use fflush() before fsync() in rio.c.

Incremental flushing in rio.c is only used to avoid huge kernel buffers
synched to slow disks creating big latency spikes, so this fix has no
durability implications, however it is certainly more correct to make
sure that the FILE buffers are flushed to the kernel before calling
fsync on the file descriptor.

Thanks to Li Shao Kai for reporting this issue in the Redis mailing
list."
antirez,2014-01-20 10:52:52,https://api.github.com/repos/antirez/redis/git/commits/80e80668f47698320bff4fe45ce2ecd2a463d787,80e80668f47698320bff4fe45ce2ecd2a463d787,"Cluster: master nodes wait before rejoining the cluster after reboot.

One of the simple heuristics used by Redis Cluster in order to avoid
losing data in the typical failure modes created by the asynchronous
replication with the slaves (a master is unable, when accepting a
write, to immediately tell if it should be really accepted or refused
because of a configuration change), is to wait some time before to
rejoin the cluster after being partitioned away from the majority of
instances.

A similar condition happens when a master is restarted. It does not know
if it was already failed over, nor if all the clients have already an
updated configuration about the cluster map, so it is possible that
clients will try to write to stale masters that were restarted.

In a similar way this commit changes masters behavior so they wait
2000 milliseconds before accepting writes after a reboot. There is
nothing special about 2 seconds if not to be a value supposedly larger
a few orders of magnitude compared to the cluster bus communication
latencies."
antirez,2014-01-20 10:19:04,https://api.github.com/repos/antirez/redis/git/commits/e6970e204f8f05572d5500297905ef68a6f38b41,e6970e204f8f05572d5500297905ef68a6f38b41,"Cluster: debug printf statemets removed.

These were committed for error after being inserted in order to fix an
issue."
antirez,2014-01-20 10:10:42,https://api.github.com/repos/antirez/redis/git/commits/e4a5605c9a7e5b8c425e46b6f12dddefbaff3e73,e4a5605c9a7e5b8c425e46b6f12dddefbaff3e73,Cluster: don't rewrite slaveof config directive in cluster mode.
antirez,2014-01-20 10:08:14,https://api.github.com/repos/antirez/redis/git/commits/437fc2cb56102b753579420e2bcf1065c09bd2b3,437fc2cb56102b753579420e2bcf1065c09bd2b3,Cluster: fix error reporting when slaveof is found in config.
antirez,2014-01-17 17:22:35,https://api.github.com/repos/antirez/redis/git/commits/ac3850cabd3944c06a07ece83ad44f3dc6ad50c3,ac3850cabd3944c06a07ece83ad44f3dc6ad50c3,"Cluster: allow CLUSTER REPLICATE to switch master.

The code was doing checks for slaves that should be done only when the
instance is currently a master. Switching a slave from a master to
another one should just work."
antirez,2014-01-17 17:20:31,https://api.github.com/repos/antirez/redis/git/commits/abd6308d273cd214a67645d28b2c329ea43e9bd6,abd6308d273cd214a67645d28b2c329ea43e9bd6,"Set server.repl_down_since to 0 when changing master.

When an instance is potentially set to replicate with another master, it
is conceptually disconnected forever, since we have no old copy of the
dataset for this master in memory."
antirez,2014-01-17 16:56:45,https://api.github.com/repos/antirez/redis/git/commits/36c24bcca0855004bcbdb9b51b0ae83b26e671ca,36c24bcca0855004bcbdb9b51b0ae83b26e671ca,Cluster: redis-trib shows number of replicas of masters.
antirez,2014-01-17 11:32:49,https://api.github.com/repos/antirez/redis/git/commits/27ed9da3834850233d6a793556f06ce9d6834c1b,27ed9da3834850233d6a793556f06ce9d6834c1b,Cluster: redis-trib help output format modified.
antirez,2014-01-17 11:06:06,https://api.github.com/repos/antirez/redis/git/commits/a68c9ba97eb8ea7b475df354fc505ca4634a8e0a,a68c9ba97eb8ea7b475df354fc505ca4634a8e0a,"Cluster: redis-trib shows what a slave replicates + fixes.

Also the :replicates info field in the node object is now correctly
populated. This also fixes the :replicas field computation."
antirez,2014-01-17 10:48:42,https://api.github.com/repos/antirez/redis/git/commits/b4511767342b18335faaf37e5780711e57f88616,b4511767342b18335faaf37e5780711e57f88616,Cluster: redis-trib addnode is now able to add replicas.
antirez,2014-01-17 09:29:40,https://api.github.com/repos/antirez/redis/git/commits/30d9c1dc32f9028ed80b0e20237ba201d7bfcbb5,30d9c1dc32f9028ed80b0e20237ba201d7bfcbb5,Cluster: fix redis-trib help subcommand.
antirez,2014-01-16 17:02:16,https://api.github.com/repos/antirez/redis/git/commits/17d0c3e85aceb12b87bc35d98d2768671f03d719,17d0c3e85aceb12b87bc35d98d2768671f03d719,Cluster: redis-trib delnode implementation.
antirez,2014-01-16 16:49:35,https://api.github.com/repos/antirez/redis/git/commits/3d455393a6a874e49abe51543fb442d38073f07d,3d455393a6a874e49abe51543fb442d38073f07d,"Cluster: don't let a node forget its own master.

redis-trib should make sure to reconfigure slaves of a node to remove
from the cluster to replicate with other nodes before sending CLUSTER
FORGET."
antirez,2014-01-16 15:23:28,https://api.github.com/repos/antirez/redis/git/commits/9531c84807910e0d85e34e6bbadecec587371355,9531c84807910e0d85e34e6bbadecec587371355,"Cluster: redis-trib help output improved.

Show options if any. Clarify that for some command any node address is
ok."
antirez,2014-01-16 08:46:23,https://api.github.com/repos/antirez/redis/git/commits/0c373207fa5092bb0f7cdaef5ac78b8e64614bfd,0c373207fa5092bb0f7cdaef5ac78b8e64614bfd,Cluster: don't forget yourself with CLUSTER FORGET.
antirez,2014-01-15 15:50:45,https://api.github.com/repos/antirez/redis/git/commits/3e948970fe81d2a209c5f9731123ca5cebfe1458,3e948970fe81d2a209c5f9731123ca5cebfe1458,"Cluster: use the node blacklist in CLUSTER FORGET.

CLUSTER FORGET is not useful if we can't remove a node from all the
nodes of our cluster because of the Gossip protocol that keeps adding
a given node to nodes where we already tried to remove it.

So now CLUSTER FORGET implements a nodes blacklist that is set and
checked by the Gossip section processing function. This way before a
node is re-added at least 60 seconds must elapse since the FORGET
execution.

This means that redis-trib has some time to remove a node from a whole
cluster. It is possible that in the future it will be uesful to raise
the 60 sec figure to something bigger."
antirez,2014-01-15 15:49:31,https://api.github.com/repos/antirez/redis/git/commits/ccf268fa17a4debbd40256470940ddcbb8875e88,ccf268fa17a4debbd40256470940ddcbb8875e88,"Cluster: fix clusterBlacklistAddNode() by setting right expire time.

The hash table value should be set to now + 60 seconds otherwise it
expires immediately."
antirez,2014-01-15 15:44:06,https://api.github.com/repos/antirez/redis/git/commits/4e1861155f2dfc52e357b9253ea894c6f7959a06,4e1861155f2dfc52e357b9253ea894c6f7959a06,"Cluster: clusterBlacklistAddNode() key lookup fixed.

We can't lookup by node->name that's not an SDS string but a plain C
array in the node structure."
antirez,2014-01-15 15:06:54,https://api.github.com/repos/antirez/redis/git/commits/b51be7b34feaab78b6a382f9dc55b6fbc38813a7,b51be7b34feaab78b6a382f9dc55b6fbc38813a7,Cluster: clusterBlacklistExists() requires blacklist cleanup before lookup.
antirez,2014-01-15 11:34:33,https://api.github.com/repos/antirez/redis/git/commits/a81340abaf16006ac78a9b6aecb44d50cb589822,a81340abaf16006ac78a9b6aecb44d50cb589822,"Cluster: set a minimum rejoin delay if node_timeout is too small.

The rejoin delay usually is the node timeout. However if the node
timeout is too small, we set it to 500 milliseconds, that is a value
chosen to be greater than most setups RTT / instances latency figures
so that likely communication with other nodes happen before rejoining."
antirez,2014-01-15 11:26:12,https://api.github.com/repos/antirez/redis/git/commits/a687cbc19c3aab75c49d1bfa593f9327afe44e03,a687cbc19c3aab75c49d1bfa593f9327afe44e03,"Cluster: periodically call clusterUpdateState() when cluster is down.

Usually we update the cluster state (to understand if we should accept
queries or reply with an error) only when there is a change in the state
of the nodes. However for the ""delayed rejoin"" feature to work, that is,
for a master to wait some time before accepting queries again after it
rejoins the majority, we need to periodically update the last time when
the node was partitioned away from the majority.

With this commit if the cluster is down we update the state ten times
per second."
antirez,2014-01-15 10:33:41,https://api.github.com/repos/antirez/redis/git/commits/25ddefdea300958f356365ab8830a9676193df70,25ddefdea300958f356365ab8830a9676193df70,"Cluster: range checking in getSlotOrReply() fixed.

See issue #1426 on Github."
antirez,2014-01-15 10:23:34,https://api.github.com/repos/antirez/redis/git/commits/fb659cd334fde195cc86a4cb8cbecacc9b7358f5,fb659cd334fde195cc86a4cb8cbecacc9b7358f5,"Cluster: ignore empty lines in nodes.conf.

Even without the user messing manually with the file, it is still
possible to have blank lines (just a single ""\n"" per line) because of
how the nodes.conf update/write process works."
antirez,2014-01-15 09:31:12,https://api.github.com/repos/antirez/redis/git/commits/6c63df3031ee8908757b4f016f4df2e7591a0a20,6c63df3031ee8908757b4f016f4df2e7591a0a20,"Cluster: atomic update of nodes.conf file.

The way the file was generated was unsafe and leaded to nodes.conf file
corruption (zero length file) on server stop/crash during the creation
of the file.

The previous file update method was as simple as open with O_TRUNC
followed by the write call. While the write call was a single one with
the full payload, ensuring no half-written files for POSIX semantics,
stopping the server just after the open call resulted into a zero-length
file (all the nodes information lost!)."
antirez,2014-01-14 15:33:14,https://api.github.com/repos/antirez/redis/git/commits/28273394cb37a3fabc5869bb5e2725a401e04c6f,28273394cb37a3fabc5869bb5e2725a401e04c6f,"Cluster: support to read from slave nodes.

A client can enter a special cluster read-only mode using the READONLY
command: if the client read from a slave instance after this command,
for slots that are actually served by the instance's master, the queries
will be processed without redirection, allowing clients to read from
slaves (but without any kind fo read-after-write guarantee).

The READWRITE command can be used in order to exit the readonly state."
antirez,2014-01-14 14:37:49,https://api.github.com/repos/antirez/redis/git/commits/aacbba2607489e7f36f439b99e0bba3d4bfa9f9d,aacbba2607489e7f36f439b99e0bba3d4bfa9f9d,Fix typo in aofRewriteBufferAppend() comment.
antirez,2014-01-14 10:27:28,https://api.github.com/repos/antirez/redis/git/commits/5189485625d9b3e6b3d38a465e9b4555a50e073e,5189485625d9b3e6b3d38a465e9b4555a50e073e,"Set REDIS_AOF_REWRITE_MIN_SIZE to 64mb.

64mb is the default value in redis.conf. For some reason instead the
hard-coded default was 1mb that is too small."
antirez,2014-01-14 08:23:26,https://api.github.com/repos/antirez/redis/git/commits/d5763dceaffcd2347e588352cceaf3a1615a4601,d5763dceaffcd2347e588352cceaf3a1615a4601,SENTINEL SET master quorum implemented.
antirez,2014-01-13 10:55:57,https://api.github.com/repos/antirez/redis/git/commits/fe86f890b07a124afdc0417bb0089677a892d454,fe86f890b07a124afdc0417bb0089677a892d454,SENTINEL SET: error on bad option name + flush config on error.
antirez,2014-01-13 10:50:38,https://api.github.com/repos/antirez/redis/git/commits/f822516e43b8fadcfbb97cee281eee19fdcfe2ad,f822516e43b8fadcfbb97cee281eee19fdcfe2ad,"SENTINEL SET implemented.

The new command allows to change master-specific configurations
at runtime. All the settable parameters can be retrivied via the
SENTINEL MASTER command, so there is no equivalent ""GET"" command."
antirez,2014-01-13 10:05:13,https://api.github.com/repos/antirez/redis/git/commits/3cdcaff0699a7d0737260c519ccf28510f5d9131,3cdcaff0699a7d0737260c519ccf28510f5d9131,Sentinel: fix wrong arity error message.
antirez,2014-01-10 14:39:10,https://api.github.com/repos/antirez/redis/git/commits/964f6b17e9c9bf7b20efb56ac922c29985d9f31d,964f6b17e9c9bf7b20efb56ac922c29985d9f31d,"Sentinel: SENTINEL REMOVE command added.

The command totally removes a monitored master."
antirez,2014-01-10 14:33:42,https://api.github.com/repos/antirez/redis/git/commits/cf2835519eab7d4695ead10a771fa2f3847f6d05,cf2835519eab7d4695ead10a771fa2f3847f6d05,"Sentinel: releaseSentinelRedisInstance() top comment fixed.

The claim about unlinking the instance from the connected hash tables
was the opposite of the reality. Also the current actual behavior is
safer in most cases, so it is better to manually unlink when needed."
antirez,2014-01-10 14:22:06,https://api.github.com/repos/antirez/redis/git/commits/9d0f46c6f536379a549a393682432f14751bd8a0,9d0f46c6f536379a549a393682432f14751bd8a0,Sentinel: flush config on disk when new master is added.
antirez,2014-01-10 14:18:41,https://api.github.com/repos/antirez/redis/git/commits/d4f296bc1d9a9d64830825a789ce44e5234f0b12,d4f296bc1d9a9d64830825a789ce44e5234f0b12,anetResolveIP() prototype added to anet.h.
antirez,2014-01-10 14:16:55,https://api.github.com/repos/antirez/redis/git/commits/39f9f449b08b5838144160dcea1b9e0b5923e43b,39f9f449b08b5838144160dcea1b9e0b5923e43b,"Sentinel: SENTINEL MONITOR command implemented.

It allows to add new masters to monitor at runtime."
antirez,2014-01-10 14:02:39,https://api.github.com/repos/antirez/redis/git/commits/774f0bd45e04caf606c09ca774283f36252998c6,774f0bd45e04caf606c09ca774283f36252998c6,"anetResolveIP() added to anet.c.

The new function is used when we want to normalize an IP address without
performing a DNS lookup if the string to resolve is not a valid IP.

This is useful every time only IPs are valid inputs or when we want to
skip DNS resolution that is slow during runtime operations if we are
required to block."
antirez,2014-01-10 13:41:44,https://api.github.com/repos/antirez/redis/git/commits/c42e4bd0b62d5e542d9ff100b2a9ab374f84fb1a,c42e4bd0b62d5e542d9ff100b2a9ab374f84fb1a,"Sentinel: added SENTINEL MASTER <name> command.

With SENTINEL MASTERS it was already possible to list all the configured
masters, but not a specific one."
antirez,2014-01-10 13:31:41,https://api.github.com/repos/antirez/redis/git/commits/2bb9cd464e4b6a7f59525fced6ad60fd9c11fcae,2bb9cd464e4b6a7f59525fced6ad60fd9c11fcae,"Add all the configurable fields to addReplySentinelRedisInstance().

Note: the auth password with the master is voluntarily not exposed."
antirez,2014-01-10 13:13:04,https://api.github.com/repos/antirez/redis/git/commits/5a7d04ee7b77d686c8bf433907064391dff8b42a,5a7d04ee7b77d686c8bf433907064391dff8b42a,Trip comment to 80 cols in SentinelCommand().
antirez,2014-01-09 10:19:03,https://api.github.com/repos/antirez/redis/git/commits/5d08413b13252cef928aedae242f3b60310278bc,5d08413b13252cef928aedae242f3b60310278bc,Test: regression for issues #1483.
antirez,2014-01-09 10:09:23,https://api.github.com/repos/antirez/redis/git/commits/58c8a071a51632c0e337f467e3ca7b2127e3fb43,58c8a071a51632c0e337f467e3ca7b2127e3fb43,"Fix RESTORE ttl handling in 32 bit archs.

long was used instead of long long in order to handle a 64 bit
resolution millisecond timestamp.

This fixes issue #1483."
antirez,2014-01-08 16:18:00,https://api.github.com/repos/antirez/redis/git/commits/e1ab2991c3daefd9482ab589539f184141166648,e1ab2991c3daefd9482ab589539f184141166648,"Fix keyspace events flags-to-string conversion.

Fixes issue #1491 on Github."
antirez,2014-01-08 16:16:04,https://api.github.com/repos/antirez/redis/git/commits/a2f99478271e0ec9b224ee3aec23b3328ff87713,a2f99478271e0ec9b224ee3aec23b3328ff87713,Test: stress events flags to/from string conversion.
antirez,2014-01-08 13:25:06,https://api.github.com/repos/antirez/redis/git/commits/90a81b4ebb155c8c07a30f0a0562e7a05fea4294,90a81b4ebb155c8c07a30f0a0562e7a05fea4294,"Don't send REPLCONF ACK to old masters.

Masters not understanding REPLCONF ACK will reply with errors to our
requests causing a number of possible issues.

This commit detects a global replication offest set to -1 at the end of
the replication, and marks the client representing the master with the
REDIS_PRE_PSYNC flag.

Note that this flag was called REDIS_PRE_PSYNC_SLAVE but now it is just
REDIS_PRE_PSYNC as it is used for both slaves and masters starting with
this commit.

This commit fixes issue #1488."
antirez,2014-01-08 13:11:02,https://api.github.com/repos/antirez/redis/git/commits/3f92e056375ecf1bb1ca03e8af3dab730a32f3b9,3f92e056375ecf1bb1ca03e8af3dab730a32f3b9,Clarify a comment in slaveTryPartialResynchronization().
antirez,2013-12-25 17:41:10,https://api.github.com/repos/antirez/redis/git/commits/fdf50e1e3dc3e9e3ce9bedd2b41b9fc5f0aab220,fdf50e1e3dc3e9e3ce9bedd2b41b9fc5f0aab220,Log disconnection with slave only when ip:port is available.
antirez,2013-12-25 17:39:49,https://api.github.com/repos/antirez/redis/git/commits/20418822867065cdbbeffc05a0bd0abae64284ff,20418822867065cdbbeffc05a0bd0abae64284ff,anetPeerToString / SockName: port can be NULL on errors too.
antirez,2013-12-25 17:28:30,https://api.github.com/repos/antirez/redis/git/commits/a2a900356e62628588742dd6b2de8c8d55b86784,a2a900356e62628588742dd6b2de8c8d55b86784,"anetTcpGenericConnect() bug introduced in 9d19977 fixed.

Durign a refactoring I mispelled _port for port.
This is one of the reasons I never used _varname myself."
antirez,2013-12-25 17:24:04,https://api.github.com/repos/antirez/redis/git/commits/cb23d510f49ce0930a55bb07915853a83b7f9867,cb23d510f49ce0930a55bb07915853a83b7f9867,Remove useless goto from anetTcpGenericConnect().
antirez,2013-12-25 17:13:27,https://api.github.com/repos/antirez/redis/git/commits/491f68108868baed5b60045b75099b5475eddd35,491f68108868baed5b60045b75099b5475eddd35,"anetTcpGenericConnect() code improved + 1 bug fix.

Now the socket is closed if anetNonBlock() fails, and in general the
code structure makes it harder to introduce this kind of bugs in the
future.

Reference: pull request #1059."
antirez,2013-12-25 16:57:36,https://api.github.com/repos/antirez/redis/git/commits/f510549044623d4a17d6b2618f90da85edc40796,f510549044623d4a17d6b2618f90da85edc40796,"Cluster: clusterProcessPacket() was not 80 cols friendly.

The function actually needs to be split into sub-functions at some
point in the future."
antirez,2013-12-23 11:48:39,https://api.github.com/repos/antirez/redis/git/commits/e78938425536748e63932ccebb7248f6389db102,e78938425536748e63932ccebb7248f6389db102,"Fix CONFIG REWRITE handling of unknown options.

There were two problems with the implementation.

1) ""save"" was not correctly processed when no save point was configured,
   as reported in issue #1416.
2) The way the code checked if an option existed in the ""processed""
   dictionary was wrong, as we add the element with as a key associated
   with a NULL value, so dictFetchValue() can't be used to check for
   existance, but dictFind() must be used, that returns NULL only if the
   entry does not exist at all."
antirez,2013-12-23 10:31:35,https://api.github.com/repos/antirez/redis/git/commits/7e9433cee16364f9352cc95f36fbad056eadd964,7e9433cee16364f9352cc95f36fbad056eadd964,"Configuring port to 0 disables IP socket as specified.

This was no longer the case with 2.8 becuase of a bug introduced with
the IPv6 support. Now it is fixed.

This fixes issue #1287 and #1477."
antirez,2013-12-22 10:43:25,https://api.github.com/repos/antirez/redis/git/commits/94e8c9e77eeb5498286da060691db5f51537b61b,94e8c9e77eeb5498286da060691db5f51537b61b,"Make new masters inherit replication offsets.

Currently replication offsets could be used into a limited way in order
to understand, out of a set of slaves, what is the one with the most
updated data. For example this comparison is possible of N slaves
were replicating all with the same master.

However the replication offset was not transferred from master to slaves
(that are later promoted as masters) in any way, so for instance if
there were three instances A, B, C, with A master and B and C
replication from A, the following could happen:

C disconnects from A.
B is turned into master.
A is switched to master of B.
B receives some write.

In this context there was no way to compare the offset of A and C,
because B would use its own local master replication offset as
replication offset to initialize the replication with A.

With this commit what happens is that when B is turned into master it
inherits the replication offset from A, making A and C comparable.
In the above case assuming no inconsistencies are created during the
disconnection and failover process, A will show to have a replication
offset greater than C.

Note that this does not mean offsets are always comparable to understand
what is, in a set of instances, since in more complex examples the
replica with the higher replication offset could be partitioned away
when picking the instance to elect as new master. However this in
general improves the ability of a system to try to pick a good replica
to promote to master."
antirez,2013-12-22 09:15:35,https://api.github.com/repos/antirez/redis/git/commits/ba5eb44d144c6503c5da21057c126997f6ab662f,ba5eb44d144c6503c5da21057c126997f6ab662f,Slave disconnection is an event worth logging.
antirez,2013-12-22 09:05:16,https://api.github.com/repos/antirez/redis/git/commits/66ec1412fec9ef60a0158832ed82e8ef490efe69,66ec1412fec9ef60a0158832ed82e8ef490efe69,"Redis Cluster: add repl_ping_slave_period to slave data validity time.

When the configured node timeout is very small, the data validity time
(maximum data age for a slave to try a failover) is too little (ten
times the configured node timeout) when the replication link with the
master is mostly idle. In this case we'll receive some data from the
master only every server.repl_ping_slave_period to refresh the last
interaction with the master.

This commit adds to the max data validity time the slave ping period to
avoid this problem of slaves sensing too old data without a good reason.
However this max data validity time is likely a setting that should be
configurable by the Redis Cluster user in a way completely independent
from the node timeout."
antirez,2013-12-20 23:23:37,https://api.github.com/repos/antirez/redis/git/commits/b2dedd9da8afad8e86b32d2d0e7c5e7bbbf92c8c,b2dedd9da8afad8e86b32d2d0e7c5e7bbbf92c8c,Log when a slave lose the connection with its master.
antirez,2013-12-20 23:04:53,https://api.github.com/repos/antirez/redis/git/commits/658aff9d29f3846b5b60868b767fdc2c2cc1d4af,658aff9d29f3846b5b60868b767fdc2c2cc1d4af,Redis Cluster: move node failure reports logging from VERBOSE to NOTICE level.
antirez,2013-12-20 13:40:11,https://api.github.com/repos/antirez/redis/git/commits/5a404c87c19c6fca8b7f096902f954df5b6188fd,5a404c87c19c6fca8b7f096902f954df5b6188fd,Redis Cluster: remove no longer relevant comment.
antirez,2013-12-20 11:47:13,https://api.github.com/repos/antirez/redis/git/commits/fda4cba912dd8483bd4a991555e179ca5fcce8a2,fda4cba912dd8483bd4a991555e179ca5fcce8a2,Redis Cluster: reconfigure replication when master changes address.
antirez,2013-12-20 11:37:18,https://api.github.com/repos/antirez/redis/git/commits/d7374032c0d9d87d9169139b0182c49891504d7c,d7374032c0d9d87d9169139b0182c49891504d7c,"Redis Cluster: handshake code refactoring + Gossip IP switch detection.

This commit makes it simple to start an handshake with a specific node
address, and uses this in order to detect a node IP change and start a
new handshake in order to fix the IP if possible."
antirez,2013-12-20 08:56:18,https://api.github.com/repos/antirez/redis/git/commits/a2c938c83450c8be4e4c39874fd6f467b86db273,a2c938c83450c8be4e4c39874fd6f467b86db273,"Redis Cluster: delay state change when in the majority again.

As specified in the Redis Cluster specification, when a node can reach
the majority again after a period in which it was partitioend away with
the minorty of masters, wait some time before accepting queries, to
provide a reasonable amount of time for other nodes to upgrade its
configuration.

This lowers the probabilities of both a client and a master with not
updated configuration to rejoin the cluster at the same time, with a
stale master accepting writes."
antirez,2013-12-19 15:02:24,https://api.github.com/repos/antirez/redis/git/commits/305d7f29f348cc98590b3cf985550b5f51365664,305d7f29f348cc98590b3cf985550b5f51365664,Clarify include directive behavior in example redis.conf.
antirez,2013-12-19 14:55:25,https://api.github.com/repos/antirez/redis/git/commits/b3632319a47321393e36c627f6c59e08773c07ff,b3632319a47321393e36c627f6c59e08773c07ff,"CONFIG REWRITE: no special handling or include and rename-command.

CONFIG REWRITE is now wiser and does not touch what it does not
understand inside redis.conf."
Dieken,2013-11-30 15:57:48,https://api.github.com/repos/antirez/redis/git/commits/7da423f79fee78b002b7e25f27cf1698c08974ed,7da423f79fee78b002b7e25f27cf1698c08974ed,"CONFIG REWRITE: don't throw some options on config rewrite

Those options will be thrown without this patch:
  include, rename-command, min-slaves-to-write, min-slaves-max-lag,
appendfilename."
antirez,2013-12-19 14:30:06,https://api.github.com/repos/antirez/redis/git/commits/3b9cf3ed3a7e7ba518f9410f9764bf89aac335ff,3b9cf3ed3a7e7ba518f9410f9764bf89aac335ff,CONFIG REWRITE: old development comments removed.
antirez,2013-12-19 14:25:45,https://api.github.com/repos/antirez/redis/git/commits/b221e13dac3ac1878a365b0b4d4573429e5bc5e2,b221e13dac3ac1878a365b0b4d4573429e5bc5e2,"CONFIG REWRITE: don't wipe unknown options.

With this commit options not explicitly rewritten by CONFIG REWRITE are
not touched at all. These include new options that may not have support
for REWRITE, and other special cases like rename-command and include."
antirez,2013-12-19 09:18:45,https://api.github.com/repos/antirez/redis/git/commits/6d184e02be362d2c4e5ac56d4fdc6dbf9acbda0b,6d184e02be362d2c4e5ac56d4fdc6dbf9acbda0b,Example redis.conf formatted to better show appendfilename option.
antirez,2013-12-17 13:50:24,https://api.github.com/repos/antirez/redis/git/commits/7a666ac4194997363f6098996ddda141e78e315a,7a666ac4194997363f6098996ddda141e78e315a,"Cluster: set n->slaves to NULL in clusterNodeResetSlaves().

The value was otherwise undefined, so next time the node was promoted
again from slave to master, adding a slave to the list of slaves
would likely crash the server or result into undefined behavior."
antirez,2013-12-17 11:28:37,https://api.github.com/repos/antirez/redis/git/commits/fda91dbde38e0a384aaf731559683c67561eef52,fda91dbde38e0a384aaf731559683c67561eef52,Cluster: check link is valid before sending UPDATE.
antirez,2013-12-17 11:22:02,https://api.github.com/repos/antirez/redis/git/commits/f57bb36ce7c17958df6bcabfbd3b41037ae74c2f,f57bb36ce7c17958df6bcabfbd3b41037ae74c2f,Cluster: initialize todo_before_sleep flags to 0.
antirez,2013-12-17 09:27:12,https://api.github.com/repos/antirez/redis/git/commits/c70c0c6db74616e892995ee87b0bcd2f7102cbf9,c70c0c6db74616e892995ee87b0bcd2f7102cbf9,Cluster: use proper type mstime_t for ping delay var.
antirez,2013-12-17 09:00:33,https://api.github.com/repos/antirez/redis/git/commits/7c1cbdceb2aa1ed3c6ae346dad04e5afb6eba973,7c1cbdceb2aa1ed3c6ae346dad04e5afb6eba973,"Cluster: use an hardcoded 60 sec timeout in redis-trib connections.

Later this should be configurable from the command line but at least now
we use something more appropriate for our use case compared to the
redis-rb default timeout."
antirez,2013-12-17 08:45:42,https://api.github.com/repos/antirez/redis/git/commits/47815d38e0f39476494c5da8dcd90c9ba24aefd8,47815d38e0f39476494c5da8dcd90c9ba24aefd8,"Fixed clearNodeFailureIfNeeded() time type to mstime_t.

This prevented 32bit cluster instances from clearing the FAIL flag when
needed."
antirez,2013-12-17 08:38:11,https://api.github.com/repos/antirez/redis/git/commits/e88e6a633414bb66d58e23f2df8f91eed5bb5aec,e88e6a633414bb66d58e23f2df8f91eed5bb5aec,"Cluster: use long long for timestamps in clusterGenNodesDescription().

Ping sent and pong received fields need to be casted to long long to be
printed correctly into 32 bit systems."
antirez,2013-12-13 12:10:05,https://api.github.com/repos/antirez/redis/git/commits/2dfc5e35a9773c0a9982ec5147159053eb763c6e,2dfc5e35a9773c0a9982ec5147159053eb763c6e,Makefile.dep updated.
antirez,2013-12-13 10:37:03,https://api.github.com/repos/antirez/redis/git/commits/b1ba58f3417728dfb768890eb1075c90a028d63a,b1ba58f3417728dfb768890eb1075c90a028d63a,"SDIFF iterator misuse bug regression test added.

See commit c00453d for more info about the bug."
antirez,2013-12-13 10:29:59,https://api.github.com/repos/antirez/redis/git/commits/c00453da1d01dbd2de40d26602c979b516f8a47f,c00453da1d01dbd2de40d26602c979b516f8a47f,"SDIFF iterator misuse fixed in diff algorithm #1.

The bug could be easily triggered by:

    SADD foo a b c 1 2 3 4 5 6
    SDIFF foo foo

When the key was the same in two sets, an unsafe iterator was used to
check existence of elements in the same set we were iterating.
Usually this would just result into a wrong output, however with the
dict.c API misuse protection we have in place, the result was actually
an assertion failed that was triggered by the CI test, while creating
random datasets for the ""MASTER and SLAVE consistency"" test."
antirez,2013-12-13 10:01:13,https://api.github.com/repos/antirez/redis/git/commits/53201488832f17b659133b18fdd7fd78e48e05ea,53201488832f17b659133b18fdd7fd78e48e05ea,Sentinel: dead code removed.
antirez,2013-12-12 14:19:08,https://api.github.com/repos/antirez/redis/git/commits/452dea30f6414709855d6bb96302d69bc737c566,452dea30f6414709855d6bb96302d69bc737c566,"Makefile: remove odd syntax not compatible with some make versions.

See issue #1448."
antirez,2013-12-12 10:30:11,https://api.github.com/repos/antirez/redis/git/commits/62e4956936717aaf192e2ca8b42d6eed464edba5,62e4956936717aaf192e2ca8b42d6eed464edba5,"Merge pull request #1415 from Dieken/fix-typo

fix typo in redis.conf and sentinel.conf"
antirez,2013-12-12 10:23:44,https://api.github.com/repos/antirez/redis/git/commits/a99c751d6c136f3ada83c1c8fd2b0d3c2c6cf297,a99c751d6c136f3ada83c1c8fd2b0d3c2c6cf297,"Merge pull request #1460 from codeeply/simplify2

comment mistake fixed"
codeeply,2013-12-12 08:33:29,https://api.github.com/repos/antirez/redis/git/commits/0f06f8df079073263974110643ddbebe8c3447ac,0f06f8df079073263974110643ddbebe8c3447ac,comment mistake fixed
antirez,2013-12-11 14:23:10,https://api.github.com/repos/antirez/redis/git/commits/a5ec247f13f70d4d60337460ab2b3eb583f7f5e7,a5ec247f13f70d4d60337460ab2b3eb583f7f5e7,"Replication: publish the slave_repl_offset when disconnected from master.

When a slave was disconnected from its master the replication offset was
reported as -1. Now it is reported as the replication offset of the
previous master, so that failover can be performed using this value in
order to try to select a slave with more processed data from a set of
slaves of the old master."
antirez,2013-12-11 11:06:18,https://api.github.com/repos/antirez/redis/git/commits/0a89d9a0b1abcbd91e7c8a83d6fa9e3aaefbb556,0a89d9a0b1abcbd91e7c8a83d6fa9e3aaefbb556,"Merge pull request #1451 from yossigo/unbalanced-quotes-fix

Return proper error on requests with an unbalanced number of quotes."
yossigo,2012-12-24 21:10:41,https://api.github.com/repos/antirez/redis/git/commits/88a5cede882ee4268685acae5ef6c8660f7f4e44,88a5cede882ee4268685acae5ef6c8660f7f4e44,Fix wrong repldboff type which causes dropped replication in rare cases.
Dieken,2013-11-30 06:14:28,https://api.github.com/repos/antirez/redis/git/commits/6d5fa2e06ce8b35a85715b9960ff5a5e14bc1bdd,6d5fa2e06ce8b35a85715b9960ff5a5e14bc1bdd,fix typo in redis.conf and sentinel.conf
antirez,2013-12-10 17:38:26,https://api.github.com/repos/antirez/redis/git/commits/11120689c4c59b0fdde5446ea40f6abdc215d7c9,11120689c4c59b0fdde5446ea40f6abdc215d7c9,"Slaves heartbeats during sync improved.

The previous fix for false positive timeout detected by master was not
complete. There is another blocking stage while loading data for the
first synchronization with the master, that is, flushing away the
current data from the DB memory.

This commit uses the newly introduced dict.c callback in order to make
some incremental work (to send ""\n"" heartbeats to the master) while
flushing the old data from memory.

It is hard to write a regression test for this issue unfortunately. More
support for debugging in the Redis core would be needed in terms of
functionalities to simulate a slow DB loading / deletion."
antirez,2013-12-10 17:18:24,https://api.github.com/repos/antirez/redis/git/commits/2eb781b35bfa9bde5ab88b192cd3e666e7872625,2eb781b35bfa9bde5ab88b192cd3e666e7872625,"dict.c: added optional callback to dictEmpty().

Redis hash table implementation has many non-blocking features like
incremental rehashing, however while deleting a large hash table there
was no way to have a callback called to do some incremental work.

This commit adds this support, as an optiona callback argument to
dictEmpty() that is currently called at a fixed interval (one time every
65k deletions)."
antirez,2013-12-10 16:51:14,https://api.github.com/repos/antirez/redis/git/commits/2c4ab8a534f9c1452ea07e51fa1215d8b617b27b,2c4ab8a534f9c1452ea07e51fa1215d8b617b27b,Log empty DB + Loading data into two separated messages.
antirez,2013-12-10 16:49:45,https://api.github.com/repos/antirez/redis/git/commits/7c531eb5ad3310e4b25262dfdc2b43cf665bb975,7c531eb5ad3310e4b25262dfdc2b43cf665bb975,Don't send more than 1 newline/sec while loading RDB.
antirez,2013-12-09 12:32:44,https://api.github.com/repos/antirez/redis/git/commits/27db38d0696580cb6538f893ab090603ccb5bf95,27db38d0696580cb6538f893ab090603ccb5bf95,"Slaves heartbeat while loading RDB files.

Starting with Redis 2.8 masters are able to detect timed out slaves,
while before 2.8 only slaves were able to detect a timed out master.

Now that timeout detection is bi-directional the following problem
happens as described ""in the field"" by issue #1449:

1) Master and slave setup with big dataset.
2) Slave performs the first synchronization, or a full sync
   after a failed partial resync.
3) Master sends the RDB payload to the slave.
4) Slave loads this payload.
5) Master detects the slave as timed out since does not receive back the
   REPLCONF ACK acknowledges.

Here the problem is that the master has no way to know how much the
slave will take to load the RDB file in memory. The obvious solution is
to use a greater replication timeout setting, but this is a shame since
for the 0.1% of operation time we are forced to use a timeout that is
not what is suited for 99.9% of operation time.

This commit tries to fix this problem with a solution that is a bit of
an hack, but that modifies little of the replication internals, in order
to be back ported to 2.8 safely.

During the RDB loading time, we send the master newlines to avoid
being sensed as timed out. This is the same that the master already does
while saving the RDB file to still signal its presence to the slave.

The single newline is used because:

1) It can't desync the protocol, as it is only transmitted all or
nothing.
2) It can be safely sent while we don't have a client structure for the
master or in similar situations just with write(2)."
antirez,2013-12-09 12:28:39,https://api.github.com/repos/antirez/redis/git/commits/eaf1bfb88bdd6e7f4f4a7015280572cc234088c4,eaf1bfb88bdd6e7f4f4a7015280572cc234088c4,Handle inline requested terminated with just \n.
yossigo,2013-12-08 10:57:03,https://api.github.com/repos/antirez/redis/git/commits/6e70c011484018ca9946cc536b7ab4531580b8de,6e70c011484018ca9946cc536b7ab4531580b8de,Return proper error on requests with an unbalanced number of quotes.
antirez,2013-12-06 11:46:56,https://api.github.com/repos/antirez/redis/git/commits/c590549e40e9a38bc052d68073d6ba9a995599b0,c590549e40e9a38bc052d68073d6ba9a995599b0,"Sentinel: fix reported role info sampling.

The way the role change was recoded was not sane and too much
convoluted, causing the role information to be not always updated.

This commit fixes issue #1445."
antirez,2013-12-06 10:37:46,https://api.github.com/repos/antirez/redis/git/commits/2b414a4b5f280216c5d97564506ae3ee742ef673,2b414a4b5f280216c5d97564506ae3ee742ef673,"Sentinel: fix reported role fields when master is reset.

When there is a master address switch, the reported role must be set to
master so that we have a chance to re-sample the INFO output to check if
the new address is reporting the right role.

Otherwise if the role was wrong, it will be sensed as wrong even after
the address switch, and for enough time according to the role change
time, for Sentinel consider the master SDOWN.

This fixes isue #1446, that describes the effects of this bug in
practice."
antirez,2013-12-06 09:48:40,https://api.github.com/repos/antirez/redis/git/commits/8534a290d3b3bc4021c99b27f8df63514c39f8ce,8534a290d3b3bc4021c99b27f8df63514c39f8ce,Fixed typo in redis.conf.
antirez,2013-12-05 17:53:45,https://api.github.com/repos/antirez/redis/git/commits/2ef57f8d47b43bb80baf6b3fd7e148a06d64f008,2ef57f8d47b43bb80baf6b3fd7e148a06d64f008,"Merge pull request #1439 from AnuragRamdasan/patch-3

Grammar fix."
AnuragRamdasan,2013-12-05 17:45:47,https://api.github.com/repos/antirez/redis/git/commits/839ed7a60baae4cb86ac4c37021412acf7d98191,839ed7a60baae4cb86ac4c37021412acf7d98191,Grammar fix.
antirez,2013-12-05 16:18:20,https://api.github.com/repos/antirez/redis/git/commits/026e561446453b928244c380639266a3e7c795b3,026e561446453b928244c380639266a3e7c795b3,"Merge pull request #1438 from AnuragRamdasan/patch-2

fixed typo"
AnuragRamdasan,2013-12-05 16:17:17,https://api.github.com/repos/antirez/redis/git/commits/fb6b9b14bde7a2227ac0ee5c4f03ce2afa7a878a,fb6b9b14bde7a2227ac0ee5c4f03ce2afa7a878a,fixed typo
antirez,2013-12-05 15:42:05,https://api.github.com/repos/antirez/redis/git/commits/cbaad0b26f959b71e8585c34daf6ed9f12747462,cbaad0b26f959b71e8585c34daf6ed9f12747462,"Merge pull request #1437 from AnuragRamdasan/patch-1

Fixed grammar: 'usually' to 'usual'"
AnuragRamdasan,2013-12-05 15:39:31,https://api.github.com/repos/antirez/redis/git/commits/74431b80a3ea5981bd465a953000476851b023a3,74431b80a3ea5981bd465a953000476851b023a3,Fixed grammar: 'usually' to 'usual'
antirez,2013-12-05 15:35:32,https://api.github.com/repos/antirez/redis/git/commits/11e81a1e9ad1d1b4639aa8ed3fd2616ed8d1f176,11e81a1e9ad1d1b4639aa8ed3fd2616ed8d1f176,"Fixed grammar: before H the article is a, not an."
antirez,2013-12-05 15:28:35,https://api.github.com/repos/antirez/redis/git/commits/74da4a574ffa39c09f1ff85fc27c0614bc23d532,74da4a574ffa39c09f1ff85fc27c0614bc23d532,Fixed typos in redis.conf file.
antirez,2013-12-05 13:55:07,https://api.github.com/repos/antirez/redis/git/commits/58713c6b13ebe736ad33ff48fba13a1db5d58e68,58713c6b13ebe736ad33ff48fba13a1db5d58e68,"Fix clients timeout handling.

During the refactoring of blocking operations, commit
82b672f6335ac2db32a724ba5dc10398c949a4a8, a bug was introduced where
a milliseconds time is compared to a seconds time, so all the clients
always appear to timeout if timeout is set to non-zero value.

Thanks to Jonathan Leibiusky for finding the bug and helping verifying
the cause and fix."
antirez,2013-12-04 14:52:20,https://api.github.com/repos/antirez/redis/git/commits/c5618e7fdd1db874b785c19f53f01e78ea56007a,c5618e7fdd1db874b785c19f53f01e78ea56007a,WAIT command: synchronous replication for Redis.
antirez,2013-12-03 17:03:15,https://api.github.com/repos/antirez/redis/git/commits/c2f305545aa9b2c9f68bc537363c73f8b831e055,c2f305545aa9b2c9f68bc537363c73f8b831e055,blocked.c API commented.
antirez,2013-12-03 16:43:53,https://api.github.com/repos/antirez/redis/git/commits/82b672f6335ac2db32a724ba5dc10398c949a4a8,82b672f6335ac2db32a724ba5dc10398c949a4a8,BLPOP blocking code refactored to be generic & reusable.
antirez,2013-12-03 12:54:06,https://api.github.com/repos/antirez/redis/git/commits/2e027c48e5ab5e43e547bc4fb091574d1c7ed52b,2e027c48e5ab5e43e547bc4fb091574d1c7ed52b,Removed old comments and dead code from freeClient().
antirez,2013-12-03 12:40:41,https://api.github.com/repos/antirez/redis/git/commits/e4025ea9262a507d6e63021a081e8caaeb38fbd6,e4025ea9262a507d6e63021a081e8caaeb38fbd6,Grammar fix in freeClient().
antirez,2013-12-02 14:55:19,https://api.github.com/repos/antirez/redis/git/commits/f80cf7363abbd51f43d9d6f15a273fc11356f6c6,f80cf7363abbd51f43d9d6f15a273fc11356f6c6,"Sentinel: don't write HZ when flushing config.

See issue #1419."
antirez,2013-12-02 11:22:17,https://api.github.com/repos/antirez/redis/git/commits/dffebbc90447a2fa5835cde61b09bf9e0c6c70e2,dffebbc90447a2fa5835cde61b09bf9e0c6c70e2,"Sentinel: better time desynchronization.

Sentinels are now desynchronized in a better way changing the time
handler frequency between 10 and 20 HZ. This way on average a
desynchronization of 25 milliesconds is produced that should be larger
enough compared to network latency, avoiding most split-brain condition
during the vote.

Now that the clocks are desynchronized, to have larger random delays when
performing operations can be easily achieved in the following way.
Take as example the function that starts the failover, that is
called with a frequency between 10 and 20 HZ and will start the
failover every time there are the conditions. By just adding as an
additional condition something like rand()%4 == 0, we can amplify the
desynchronization between Sentinel instances easily.

See issue #1419."
antirez,2013-12-02 10:12:23,https://api.github.com/repos/antirez/redis/git/commits/6fa42b75070b96e23d169b3df747a979a0db487b,6fa42b75070b96e23d169b3df747a979a0db487b,Cluster: nodes re-addition blacklist API.
antirez,2013-11-29 16:37:06,https://api.github.com/repos/antirez/redis/git/commits/8f18345ef0fe3adacb4be4434210b939a7198bed,8f18345ef0fe3adacb4be4434210b939a7198bed,Cluster: basic data structures for nodes black list.
antirez,2013-11-29 15:17:05,https://api.github.com/repos/antirez/redis/git/commits/3db825fde4f8af8fd3ba56438b4af3b58c1dbb04,3db825fde4f8af8fd3ba56438b4af3b58c1dbb04,"Cluster: some code about clusterHandleSlaveFailover() marginally improved.

80 cols friendly, some minor change to the code to make it simpler."
antirez,2013-11-28 15:25:49,https://api.github.com/repos/antirez/redis/git/commits/55f90b11c9ad7850ca5ea9b6504b691ebf065c3c,55f90b11c9ad7850ca5ea9b6504b691ebf065c3c,"Stop writes on MISCONF only if instance is a master.

From the point of view of the slave not accepting writes from the master
can only create a bigger consistency issue."
antirez,2013-11-28 15:16:58,https://api.github.com/repos/antirez/redis/git/commits/60817bb2628af20f6a02e156a3437631478a0a26,60817bb2628af20f6a02e156a3437631478a0a26,Reply to PING with error when there is a MISCONF state.
antirez,2013-11-28 14:23:46,https://api.github.com/repos/antirez/redis/git/commits/0addf8aff1d2569abc9bc7664755e01b34f5b206,0addf8aff1d2569abc9bc7664755e01b34f5b206,Sentinel: log vote received from other Sentinels.
antirez,2013-11-26 14:15:25,https://api.github.com/repos/antirez/redis/git/commits/c7136269c6fee1fa5a704f7f157f73ba74380965,c7136269c6fee1fa5a704f7f157f73ba74380965,"Merge pull request #1401 from huangz1990/fix_sentinel_bug

fix a bug in sentinel.c about pub/sub link"
huangz1990,2013-11-26 11:55:51,https://api.github.com/repos/antirez/redis/git/commits/86a540a66e3a429ada1efe25534c8db255ac9895,86a540a66e3a429ada1efe25534c8db255ac9895,fix a bug in sentinel.c about pub/sub link
antirez,2013-11-25 09:57:20,https://api.github.com/repos/antirez/redis/git/commits/6f4fd5576242cc98829dbf0f4683adc703188a71,6f4fd5576242cc98829dbf0f4683adc703188a71,"Sentinel: fixes inverted strcmp() test preventing config updates.

The result of this one-char bug was pretty serious, if the new master
had the same port of the previous master, but just a different IP
address, non-leader Sentinels would not be able to recognize the
configuration change.

This commit fixes issue #1394.

Many thanks to @shanemadden that reported the bug and helped
investigating it."
antirez,2013-11-25 09:24:34,https://api.github.com/repos/antirez/redis/git/commits/8d547ebd5696ed2e6943e74990f51f9c9204861c,8d547ebd5696ed2e6943e74990f51f9c9204861c,"Sentinel: fix type specifier for Hello msg generation.

This fixes issue #1395."
antirez,2013-11-25 09:21:18,https://api.github.com/repos/antirez/redis/git/commits/fcebd9b0f9a7b1f78abaf556e9d1a8f3b857e614,fcebd9b0f9a7b1f78abaf556e9d1a8f3b857e614,"Fix false positive in memory efficiency test.

Fixes issue #1298."
antirez,2013-11-21 16:07:00,https://api.github.com/repos/antirez/redis/git/commits/37b43c8a245984d1249ed4ffbb604cef2ddc69e4,37b43c8a245984d1249ed4ffbb604cef2ddc69e4,Sentinel: example sentinel.conf updated.
antirez,2013-11-21 15:22:59,https://api.github.com/repos/antirez/redis/git/commits/cc6053681fba524d35831447bb83841bb4a2d2b0,cc6053681fba524d35831447bb83841bb4a2d2b0,Sentinel: different comments updated to new implementation.
antirez,2013-11-21 15:05:41,https://api.github.com/repos/antirez/redis/git/commits/685e79998c079ba514f1824804509ba153274f04,685e79998c079ba514f1824804509ba153274f04,Sentinel: cleanup around SENTINEL_INFO_VALIDITY_TIME.
antirez,2013-11-21 14:43:48,https://api.github.com/repos/antirez/redis/git/commits/489d889726cfb0b9e84f5de7b32251fb44d0418d,489d889726cfb0b9e84f5de7b32251fb44d0418d,Sentinel: removed mem leak and useless code.
antirez,2013-11-21 14:01:25,https://api.github.com/repos/antirez/redis/git/commits/1ca56ea7962e9c0b25a9d77745ddcf046fd07804,1ca56ea7962e9c0b25a9d77745ddcf046fd07804,Merge branch 'newsentinel' into unstable
antirez,2013-11-21 11:39:47,https://api.github.com/repos/antirez/redis/git/commits/f55ad3038fa4c7130fe59392e2a256432b546f5d,f55ad3038fa4c7130fe59392e2a256432b546f5d,Sentinel: manual failover works again.
antirez,2013-11-21 11:27:14,https://api.github.com/repos/antirez/redis/git/commits/297de1ab26789f8a30a5d4c8a188636a5b9ea821,297de1ab26789f8a30a5d4c8a188636a5b9ea821,"Sentinel: test for writable config file.

This commit introduces a funciton called when Sentinel is ready for
normal operations to avoid putting Sentinel specific stuff in redis.c."
antirez,2013-11-21 10:35:50,https://api.github.com/repos/antirez/redis/git/commits/d920177f8ddadc4af7fbc8a02438340eea5ca1f3,d920177f8ddadc4af7fbc8a02438340eea5ca1f3,"Sentinel: check for disconnected links in sentinelSendHello().

Does not fix any bug as the test is performed by the caller, but better
to have the check."
antirez,2013-11-21 10:31:06,https://api.github.com/repos/antirez/redis/git/commits/8810167d13cb5d7aef12c2ee1d7c48895cb79626,8810167d13cb5d7aef12c2ee1d7c48895cb79626,Sentinel: Hello message sending code refactored.
antirez,2013-11-20 15:05:36,https://api.github.com/repos/antirez/redis/git/commits/0101c2bcfe6f03db10a4ee625209cc46ad4f8c8b,0101c2bcfe6f03db10a4ee625209cc46ad4f8c8b,Sentinel: select slave with best (greater) replication offset.
antirez,2013-11-20 14:52:44,https://api.github.com/repos/antirez/redis/git/commits/a6ebd910d80c0ecfb6c510e06b63dcee926ff07c,a6ebd910d80c0ecfb6c510e06b63dcee926ff07c,Sentinel: take the replication offset in slaves state.
antirez,2013-11-19 16:58:11,https://api.github.com/repos/antirez/redis/git/commits/b1f5a0b3ece05de66b22e7544c63ac7659b6d06b,b1f5a0b3ece05de66b22e7544c63ac7659b6d06b,"CONFIG REWRITE: don't add the signature if it already exists.

At the end of the file, CONFIG REWRITE adds a comment line that:

    # Generated by CONFIG REWRITE

Followed by the additional config options required. However this was
added again and again at every rewrite in praticular conditions (when a
given set of options change in a given time during the time).

Now if it was alrady encountered, it is not added a second time.

This is especially important for Sentinel that rewrites the config at
every state change."
antirez,2013-11-19 15:50:04,https://api.github.com/repos/antirez/redis/git/commits/37a51a2568ed8558c60920e1bc08dd5265e74efe,37a51a2568ed8558c60920e1bc08dd5265e74efe,"Sentinel: distinguish between is-master-down-by-addr requests.

Some are just to know if the master is down, and in this case the runid
in the request is set to ""*"", others are actually in order to seek for a
vote and get elected. In the latter case the runid is set to the runid
of the instance seeking for the vote."
antirez,2013-11-19 15:20:42,https://api.github.com/repos/antirez/redis/git/commits/b22d1beea07383eaaf19ed1ab304224c5829a83a,b22d1beea07383eaaf19ed1ab304224c5829a83a,Sentinel: various fixes to leader election implementation.
antirez,2013-11-19 11:34:39,https://api.github.com/repos/antirez/redis/git/commits/1f9728cb20f7eaed3f613e7b8c49292edd1edc34,1f9728cb20f7eaed3f613e7b8c49292edd1edc34,Sentinel: failover script execution fixed.
antirez,2013-11-19 10:24:36,https://api.github.com/repos/antirez/redis/git/commits/90635488ce6b6f48cc0fd767cdb34b1c8c9eab79,90635488ce6b6f48cc0fd767cdb34b1c8c9eab79,Sentinel: no longer used defines removed.
antirez,2013-11-19 10:11:43,https://api.github.com/repos/antirez/redis/git/commits/0a35f65301481a6165f34c1c3e38e2b805ba595e,0a35f65301481a6165f34c1c3e38e2b805ba595e,"Sentinel: when writing config on disk, remember sentinels runid."
antirez,2013-11-19 10:03:47,https://api.github.com/repos/antirez/redis/git/commits/5450833d025bbe84a2da1bbb1df38d3fad70856f,5450833d025bbe84a2da1bbb1df38d3fad70856f,Sentinel: arity of known-sentinel/slave is 4 not 3.
antirez,2013-11-19 09:59:47,https://api.github.com/repos/antirez/redis/git/commits/b8a94463b751e55c9b3dfe08646738a13974c274,b8a94463b751e55c9b3dfe08646738a13974c274,Sentinel: rewriteConfigSentinelOption() sub-iterators var typo fixed.
antirez,2013-11-19 09:55:43,https://api.github.com/repos/antirez/redis/git/commits/16237d78c83ed7c7182b60b9e66d29db44465986,16237d78c83ed7c7182b60b9e66d29db44465986,"Sentinel: call sentinelFlushConfig() to persist state when needed.

Also the sentinel configuration rewriting was modified in order to
account for failover in progress, where we need to provide the promoted
slave address as master address, and the old master address as one of
the slaves address."
antirez,2013-11-19 09:13:04,https://api.github.com/repos/antirez/redis/git/commits/e257ab2bfeabfec5b4af562a5f0bbc28983ce26d,e257ab2bfeabfec5b4af562a5f0bbc28983ce26d,Sentinel: sentinelFlushConfig() to CONFIG REWRITE + fsync.
antirez,2013-11-19 08:48:12,https://api.github.com/repos/antirez/redis/git/commits/5998769c2803ded68b56b8f5836c57c895e0e807,5998769c2803ded68b56b8f5836c57c895e0e807,Sentinel: CONFIG REWRITE support for Sentinel config.
antirez,2013-11-19 08:28:47,https://api.github.com/repos/antirez/redis/git/commits/47df12d5d9ab45a2603e1b16e862e8d0e29c0f2c,47df12d5d9ab45a2603e1b16e862e8d0e29c0f2c,"Sentinel: can-failover option removed, many comments fixed."
antirez,2013-11-18 17:18:04,https://api.github.com/repos/antirez/redis/git/commits/cd4ff9992b4ab734cc49e5658ab53fc487c977fa,cd4ff9992b4ab734cc49e5658ab53fc487c977fa,Fix typo 'configuraiton' in rewriteConfigRewriteLine() comment.
antirez,2013-11-18 15:02:58,https://api.github.com/repos/antirez/redis/git/commits/232cdb95ab9b5ea92c3351fcac4a414b35a3ec55,232cdb95ab9b5ea92c3351fcac4a414b35a3ec55,"Sentinel: added config options useful to take state on config rewrite.

We'll use CONFIG REWRITE (internally) in order to store the new
configuration of a Sentinel after the internal state changes. In order
to do so, we need configuration options (that usually the user will not
touch at all) about config epoch of the master, Sentinels and Slaves
known for this master, and so forth."
antirez,2013-11-18 10:43:35,https://api.github.com/repos/antirez/redis/git/commits/3a374b05117250c19e9786a01ccc6ab9528181dd,3a374b05117250c19e9786a01ccc6ab9528181dd,Sentinel: failover abort function simplified.
antirez,2013-11-18 10:37:24,https://api.github.com/repos/antirez/redis/git/commits/e0750acf11576588a8421b3f60fb4b8f813f772c,e0750acf11576588a8421b3f60fb4b8f813f772c,"Sentinel: slaves reconfig delay modified.

The time Sentinel waits since the slave is detected to be configured to
the wrong master, before reconfiguring it, is now the failover_timeout
time as this makes more sense in order to give the Sentinel performing
the failover enoung time to reconfigure the slaves slowly (if required
by the configuration).

Also we now PUBLISH more frequently the new configuraiton as this allows
to switch the reapprearing master back to slave faster."
antirez,2013-11-18 10:30:08,https://api.github.com/repos/antirez/redis/git/commits/83316f515c94f3e4c13c82df1b25fa63435645b8,83316f515c94f3e4c13c82df1b25fa63435645b8,"Sentinel: failover restart time is now multiple of failover timeout.

Also defaulf failover timeout changed to 3 minutes as the failover is a
fairly fast procedure most of the times, unless there are a very big
number of slaves and the user picked to configure them sequentially (in
that case the user should change the failover timeout accordingly)."
antirez,2013-11-18 10:12:58,https://api.github.com/repos/antirez/redis/git/commits/3a56013acb7e07eb314cea6606418355d4a452d4,3a56013acb7e07eb314cea6606418355d4a452d4,Sentinel: state machine and timeouts simplified.
antirez,2013-11-18 09:08:06,https://api.github.com/repos/antirez/redis/git/commits/4be53b1c5d9b566f2994e8445b6a5300a8eabdb6,4be53b1c5d9b566f2994e8445b6a5300a8eabdb6,Sentinel: election timeout define.
antirez,2013-11-14 09:25:55,https://api.github.com/repos/antirez/redis/git/commits/69d826a354f69918e3887bac1d11c208917f0b4e,69d826a354f69918e3887bac1d11c208917f0b4e,"Sentinel: fix address of master in Hello messages.

Once we switched configuration during a failover, we should advertise
the new address.

This was a serious race condition as the Sentinel performing the
failover for a moment advertised the old address with the new
configuration epoch: once trasmitted to the other Sentinels the broken
configuration would remain there forever, until the next failover
(because a greater configuration epoch is required to overwrite an older
one)."
antirez,2013-11-14 09:23:54,https://api.github.com/repos/antirez/redis/git/commits/e4c65e72c60c4d25ed1521609cd3f55030a5aada,e4c65e72c60c4d25ed1521609cd3f55030a5aada,Sentinel: master address selection in get-master-address refactored.
antirez,2013-11-14 09:23:05,https://api.github.com/repos/antirez/redis/git/commits/c0d72293645eeef2da73080d1f77cf9944947b45,c0d72293645eeef2da73080d1f77cf9944947b45,Sentinel: fix conditional to only affect slaves with wrong master.
antirez,2013-11-13 23:36:43,https://api.github.com/repos/antirez/redis/git/commits/dfbd9c5aeb9f18cff20f450b6643ab476a3624a9,dfbd9c5aeb9f18cff20f450b6643ab476a3624a9,Sentinel: simplify and refactor slave reconfig code.
antirez,2013-11-13 23:29:38,https://api.github.com/repos/antirez/redis/git/commits/64ad6648a8595bfd265b3eb3e80a45189ade25b7,64ad6648a8595bfd265b3eb3e80a45189ade25b7,Sentinel: reconfigure slaves to right master.
antirez,2013-11-13 23:08:13,https://api.github.com/repos/antirez/redis/git/commits/3e27d678da8ea0e3aeeadf93f39e45d184bf778d,3e27d678da8ea0e3aeeadf93f39e45d184bf778d,Sentinel: remember last time slave changed master.
antirez,2013-11-13 16:03:42,https://api.github.com/repos/antirez/redis/git/commits/8297745fa6dab7a9a73964ab2ee2c8eca17bd41a,8297745fa6dab7a9a73964ab2ee2c8eca17bd41a,"Sentinel: redirect-to-master is not ok with new algorithm.

Now Sentinel believe the current configuration is always the winner and
should be applied by Sentinels instead of trying to adapt our view of
the cluster based on what we observe.

So the only way to modify what a Sentinel believe to be the truth is to
win an election and advertise the new configuration via Pub / Sub with a
greater configuration epoch."
antirez,2013-11-13 16:02:09,https://api.github.com/repos/antirez/redis/git/commits/76a88f56e5799140d316aaaaabd51b23b2461826,76a88f56e5799140d316aaaaabd51b23b2461826,"Sentinel: safer slave reconfig, master reported role should match."
antirez,2013-11-13 15:36:40,https://api.github.com/repos/antirez/redis/git/commits/ddaad9fe2d9100f9ccbd6aa3515157ecbf7e413e,ddaad9fe2d9100f9ccbd6aa3515157ecbf7e413e,Sentinel: role reporting fixed and added in SENTINEL output.
antirez,2013-11-13 15:28:52,https://api.github.com/repos/antirez/redis/git/commits/a0afa66f4b3353072879cf87bcc8cc1129a812ac,a0afa66f4b3353072879cf87bcc8cc1129a812ac,Sentinel: being a master and reporting as slave is considered SDOWN.
antirez,2013-11-13 15:21:58,https://api.github.com/repos/antirez/redis/git/commits/17718fdcbae91bb47a370962fd87e660f5452b06,17718fdcbae91bb47a370962fd87e660f5452b06,Sentinel: make sure role_reported is always updated.
antirez,2013-11-13 15:18:23,https://api.github.com/repos/antirez/redis/git/commits/46a053d34bedeccba7523fb4756aab7245e86da3,46a053d34bedeccba7523fb4756aab7245e86da3,Sentinel: track role change time. Wait before reconfigurations.
antirez,2013-11-13 12:43:59,https://api.github.com/repos/antirez/redis/git/commits/9e40c46f5e2e4799f072cb91ab7e5af46cccdc18,9e40c46f5e2e4799f072cb91ab7e5af46cccdc18,Sentinel: fix no-down check in master->slave conversion code.
antirez,2013-11-13 12:01:11,https://api.github.com/repos/antirez/redis/git/commits/ae35b7e2405c8e68298d658f6793d545e3dc03ad,ae35b7e2405c8e68298d658f6793d545e3dc03ad,Sentinel: readd slaves back after a master reset.
antirez,2013-11-13 09:30:45,https://api.github.com/repos/antirez/redis/git/commits/6bd4f6bffe96878cee454ade8595aae3e2913477,6bd4f6bffe96878cee454ade8595aae3e2913477,"Sentinel: sentinelResetMaster() new flag to avoid removing set of sentinels.

This commit also removes some dead code and cleanup generic flags."
antirez,2013-11-12 22:07:33,https://api.github.com/repos/antirez/redis/git/commits/1569af1f2390fa746e8ad363949cfc23a3407199,1569af1f2390fa746e8ad363949cfc23a3407199,Sentinel: receive Pub/Sub messages from slaves.
antirez,2013-11-12 22:00:14,https://api.github.com/repos/antirez/redis/git/commits/dfa5f8b777cefdfcdad3665dd1eade734022636b,dfa5f8b777cefdfcdad3665dd1eade734022636b,Sentinel: change event name when converting master to slave.
antirez,2013-11-12 16:21:48,https://api.github.com/repos/antirez/redis/git/commits/24158d1488654cd5bfd2a66ab49ff7c8d0f4ad96,24158d1488654cd5bfd2a66ab49ff7c8d0f4ad96,Sentinel: added config-epoch to SENTINEL masters output.
antirez,2013-11-12 16:07:31,https://api.github.com/repos/antirez/redis/git/commits/d2bc6dc39a50a412234ed05147b1e92e68fbe8aa,d2bc6dc39a50a412234ed05147b1e92e68fbe8aa,"Sentinel: new failover algo, desync slaves and update config epoch."
antirez,2013-11-12 15:38:02,https://api.github.com/repos/antirez/redis/git/commits/4a128b949df68d24517e3692b456b460377b7790,4a128b949df68d24517e3692b456b460377b7790,Sentinel: when starting failover seek for votes ASAP.
antirez,2013-11-12 12:35:25,https://api.github.com/repos/antirez/redis/git/commits/e6b9d5e97ead58ce819d33edfbfce55ffdd63568,e6b9d5e97ead58ce819d33edfbfce55ffdd63568,Sentinel: +new-epoch events.
antirez,2013-11-12 12:30:31,https://api.github.com/repos/antirez/redis/git/commits/54c447be52d89389f31c0794690f51db27d88cd5,54c447be52d89389f31c0794690f51db27d88cd5,Sentinel: wait some time between failover attempts.
antirez,2013-11-12 10:32:40,https://api.github.com/repos/antirez/redis/git/commits/ab4b2ec88f192ea894bcf9ce3a7ba2c1a5765aff,ab4b2ec88f192ea894bcf9ce3a7ba2c1a5765aff,Sentinel: allow to vote for myself.
antirez,2013-11-12 10:10:10,https://api.github.com/repos/antirez/redis/git/commits/b6b65b29c0f5021f2f7845e53ebc1641f2de1615,b6b65b29c0f5021f2f7845e53ebc1641f2de1615,Sentinel: fix PUBLISH to masters and slaves.
antirez,2013-11-12 10:09:35,https://api.github.com/repos/antirez/redis/git/commits/90ab62fd5e3a7cfe82919d47376dda1a7366e519,90ab62fd5e3a7cfe82919d47376dda1a7366e519,Sentinel: epoch introduced in leader vote.
antirez,2013-11-11 17:30:11,https://api.github.com/repos/antirez/redis/git/commits/8c1bf9a2bdf2059a13f614a924ff226c86aa4b79,8c1bf9a2bdf2059a13f614a924ff226c86aa4b79,"Sentinel: leadership handling changes WIP.

Changes to leadership handling.

Now the leader gets selected by every Sentinel, for a specified epoch,
when the SENTINEL is-master-down-by-addr is sent.

This command now includes the runid and the currentEpoch of the instance
seeking for a vote. The Sentinel only votes a single time in a given
epoch.

Still a work in progress, does not even compile at this stage."
antirez,2013-11-11 16:10:28,https://api.github.com/repos/antirez/redis/git/commits/0bac36d0a1832453df156e7e7493aa0ad17baf0d,0bac36d0a1832453df156e7e7493aa0ad17baf0d,"Sentinel: handle Hello messages received via slaves correctly.

Even when messages are received via the slave, we should perform
operations (like adding a new Sentinel) in the context of the master."
antirez,2013-11-11 11:05:16,https://api.github.com/repos/antirez/redis/git/commits/9e1b27d49ea362bf97fca51734c9628289b4fb50,9e1b27d49ea362bf97fca51734c9628289b4fb50,Sentinel: remove code not useful in the new design.
antirez,2013-11-11 10:05:58,https://api.github.com/repos/antirez/redis/git/commits/b93b0adc89fff22349623b9fec9d1b9aeb0d1f12,b93b0adc89fff22349623b9fec9d1b9aeb0d1f12,"Sentinel: epoch introduced.

Sentinel state now includes the idea of current epoch and config epoch.
In the Hello message, that is now published both on masters and slaves,
a Sentinel no longer just advertises itself but also broadcasts its
current view of the configuration: the master name / ip / port and its
current epoch.

Sentinels receiving such information switch to the new master if the
configuration epoch received is newer and the ip / port of the master
are indeed different compared to the previos ones."
antirez,2013-11-11 08:25:36,https://api.github.com/repos/antirez/redis/git/commits/b2f834390ce6adc5763e91e8c49cf1b85fe348a3,b2f834390ce6adc5763e91e8c49cf1b85fe348a3,Log to what master a slave is going to connect to.
antirez,2013-11-08 16:27:59,https://api.github.com/repos/antirez/redis/git/commits/a5e7358a120bf6f1a2c7b928584555483fceb6f4,a5e7358a120bf6f1a2c7b928584555483fceb6f4,Cluster: removed not needed newline at end of redisLog() msg.
antirez,2013-11-08 16:25:49,https://api.github.com/repos/antirez/redis/git/commits/28071caf3841085cbadcf151fdcff42b17f8cd38,28071caf3841085cbadcf151fdcff42b17f8cd38,Cluster: send a single UPDATE packet for now.
antirez,2013-11-08 16:19:19,https://api.github.com/repos/antirez/redis/git/commits/d289c628b1130988c69b55fd65d23fdbe385396b,d289c628b1130988c69b55fd65d23fdbe385396b,Cluster: replace hardcoded 4096 for bus msg len with sizeof().
antirez,2013-11-08 16:02:10,https://api.github.com/repos/antirez/redis/git/commits/94a07d59019ee9aea583bc9eebed0818dc597c79,94a07d59019ee9aea583bc9eebed0818dc597c79,"Cluster: slots update refactored + UPDATE msg processing.

Now there is a function that handles the update of the local slot
configuration every time we have some new info about a node and its set
of served slots and configEpoch.

Moreoever the UPDATE packets are now processed when received (it was a
work in progress in the previous commit)."
antirez,2013-11-08 15:26:50,https://api.github.com/repos/antirez/redis/git/commits/dc43f66eacb0e5d5957f05c5974d016e7351b2d2,dc43f66eacb0e5d5957f05c5974d016e7351b2d2,Cluster: UPDATE msg data structure and sending function.
antirez,2013-11-08 09:32:16,https://api.github.com/repos/antirez/redis/git/commits/6c6572be9575914d43cc2011563c7726d2a1df48,6c6572be9575914d43cc2011563c7726d2a1df48,"Cluster: refactoring of slots update code and more.

The commit also introduces detection of nodes publishing not updated
configuration. More work in progress to send an UPDATE packet to inform
of the config change."
antirez,2013-11-07 22:53:18,https://api.github.com/repos/antirez/redis/git/commits/d3588dc1943277b698f4cad284c9f88dda8dd8fc,d3588dc1943277b698f4cad284c9f88dda8dd8fc,"Fix broken rdbWriteRaw() return value check in rdb.c.

Thanks to @PhoneLi for reporting."
antirez,2013-11-07 15:12:06,https://api.github.com/repos/antirez/redis/git/commits/d75ab87226cfaf80a6aa83c7ec9fe9a55316984d,d75ab87226cfaf80a6aa83c7ec9fe9a55316984d,redis-trib: fixed slot allocation when --replicas is used.
antirez,2013-11-06 10:30:44,https://api.github.com/repos/antirez/redis/git/commits/e1a1d904dec30ccec2ee17d634d97b72f1b23fb0,e1a1d904dec30ccec2ee17d634d97b72f1b23fb0,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2013-11-06 10:23:49,https://api.github.com/repos/antirez/redis/git/commits/80da056c291108e13ab96ec281e8f541e6a21c68,80da056c291108e13ab96ec281e8f541e6a21c68,Sentinel: sentinelSendSlaveOf() was missing a var and the prototype.
antirez,2013-11-06 10:21:44,https://api.github.com/repos/antirez/redis/git/commits/23800d9e496a582760a35573cb33e0431d077808,23800d9e496a582760a35573cb33e0431d077808,"Sentinel: increment pending_commands counter in two more places.

AUTH and SCRIPT KILL were sent without incrementing the pending commands
counter. Clearly this needs some kind of wrapper doing it for the caller
in order to be less bug prone."
antirez,2013-11-05 16:23:11,https://api.github.com/repos/antirez/redis/git/commits/671c1dfb5629e32f3addfe865e5e5a04f35b007d,671c1dfb5629e32f3addfe865e5e5a04f35b007d,"Sentinel: always send CONFIG REWRITE when changing instance role.

This change makes Sentinel less fragile about a number of failure modes.

This commit also fixes a different bug as a side effect, SLAVEOF command
was sent multiple times without incrementing the pending commands count."
antirez,2013-11-06 08:42:03,https://api.github.com/repos/antirez/redis/git/commits/b5ec3ede7a9714e32f08ef9b9c13dbcf3612c738,b5ec3ede7a9714e32f08ef9b9c13dbcf3612c738,"Merge pull request #1365 from yaauie/deprecate-redis-copy-script

Deprecate utils/redis-copy.rb in favor of redis-copy gem"
yaauie,2013-11-06 08:31:57,https://api.github.com/repos/antirez/redis/git/commits/ae8642fb79867ef7a6a672567e66a43dab94fcbc,ae8642fb79867ef7a6a672567e66a43dab94fcbc,Deprecate utils/redis-copy.rb in favor of redis-copy gem
antirez,2013-11-05 16:23:11,https://api.github.com/repos/antirez/redis/git/commits/5fd6dee0e633cc3c2f4cb6f33741e6cb1eed9653,5fd6dee0e633cc3c2f4cb6f33741e6cb1eed9653,"Fixed typo in parseScanCursorOrReply(): ad -> at.

Thanks to @badboy for reporting it."
antirez,2013-11-05 14:47:50,https://api.github.com/repos/antirez/redis/git/commits/ebcb6251e6311622edb7dc1100a9c7cadb8842e8,ebcb6251e6311622edb7dc1100a9c7cadb8842e8,"SCAN code refactored to parse cursor first.

The previous implementation of SCAN parsed the cursor in the generic
function implementing SCAN, SSCAN, HSCAN and ZSCAN.

The actual higher-level command implementation only checked for empty
keys and return ASAP in that case. The result was that inverting the
arguments of, for instance, SSCAN for example and write:

    SSCAN 0 key

Instead of

    SSCAN key 0

Resulted into no error, since 0 is a non-existing key name very likely.
Just the iterator returned no elements at all.

In order to fix this issue the code was refactored to extract the
function to parse the cursor and return the error. Every higher level
command implementation now parses the cursor and later checks if the key
exist or not."
antirez,2013-11-05 14:32:21,https://api.github.com/repos/antirez/redis/git/commits/b4048dfec07eba76304140241f6c923271f7b396,b4048dfec07eba76304140241f6c923271f7b396,"SCAN: when iterating ziplists or intsets always return cursor of 0.

The previous implementation assumed that the first call always happens
with cursor set to 0, this may not be the case, and we want to return 0
anyway otherwise the (broken) client code will loop forever."
antirez,2013-11-05 14:30:21,https://api.github.com/repos/antirez/redis/git/commits/101d4bf86724faf9a5abb251f6cc212546cc6c65,101d4bf86724faf9a5abb251f6cc212546cc6c65,Use strtoul() instead of sscanf() in SCAN implementation.
antirez,2013-11-05 14:19:44,https://api.github.com/repos/antirez/redis/git/commits/bf79c0cda240f7cad95955de9e4119bc24f50d80,bf79c0cda240f7cad95955de9e4119bc24f50d80,Added tests for [SHZ]SCAN with MATCH.
antirez,2013-11-05 11:16:29,https://api.github.com/repos/antirez/redis/git/commits/f56f78d15932ea219cfe62e7d07f17034b11a504,f56f78d15932ea219cfe62e7d07f17034b11a504,"HSCAN/ZSCAN: skip value when matching.

This fixes issue #1360 and #1362."
antirez,2013-11-05 11:01:07,https://api.github.com/repos/antirez/redis/git/commits/1a0cea33a046324a16846f0abadcff9f61e67d10,1a0cea33a046324a16846f0abadcff9f61e67d10,Cluster: initialize senderConfigEpoch and senderCurrentEpoch for warnings suppression.
antirez,2013-11-05 10:57:30,https://api.github.com/repos/antirez/redis/git/commits/eb95d288984d19fe7caf259708f4b8770662b2e7,eb95d288984d19fe7caf259708f4b8770662b2e7,Pass int64_t to intsetGet() instead of long long.
antirez,2013-11-05 10:56:11,https://api.github.com/repos/antirez/redis/git/commits/20fb91fd31e1de9ca687e302f0f05d229713c9ed,20fb91fd31e1de9ca687e302f0f05d229713c9ed,removed not used vars in dictScan().
antirez,2013-11-05 10:24:24,https://api.github.com/repos/antirez/redis/git/commits/6cf230ea91619f1a90f1df2ffd0de023458bf9e5,6cf230ea91619f1a90f1df2ffd0de023458bf9e5,Initial support for --replicas in redis-trib.
antirez,2013-10-31 09:37:27,https://api.github.com/repos/antirez/redis/git/commits/9fba193a5995208f911b7184017df780d155c685,9fba193a5995208f911b7184017df780d155c685,SSCAN with integer encoded object test improved.
antirez,2013-10-31 09:35:56,https://api.github.com/repos/antirez/redis/git/commits/c4ca5f99bf4ce0c2424b870128c3f398f8675b36,c4ca5f99bf4ce0c2424b870128c3f398f8675b36,Inverted variable boolean value and name after scanGenericCommand() refactoring.
antirez,2013-10-31 09:32:33,https://api.github.com/repos/antirez/redis/git/commits/8fc85a1218e76e26620ba6c19aaf5a5f5bf5d3ce,8fc85a1218e76e26620ba6c19aaf5a5f5bf5d3ce,"scanGenericCommand() refactoring and handling of integer encoded elements.

This commit fixes issue #1354."
antirez,2013-10-31 08:43:21,https://api.github.com/repos/antirez/redis/git/commits/e6bb738b873e9922437c918426dd3c7b18968552,e6bb738b873e9922437c918426dd3c7b18968552,Regression test added for [SHZ]SCAN issue #1354.
antirez,2013-10-30 15:50:25,https://api.github.com/repos/antirez/redis/git/commits/0b8a0ca4bcd45cc0ba89261e427612be118dd18a,0b8a0ca4bcd45cc0ba89261e427612be118dd18a,Test: added a SCAN test trying to trigger HT resize.
antirez,2013-10-30 15:25:47,https://api.github.com/repos/antirez/redis/git/commits/6cb52256c9b1e52858ae9d3e90821612fa9223ba,6cb52256c9b1e52858ae9d3e90821612fa9223ba,Test: added ZSCAN test.
antirez,2013-10-30 15:24:39,https://api.github.com/repos/antirez/redis/git/commits/1b960378e8a78996d373e9e5744c3d21aa4f629e,1b960378e8a78996d373e9e5744c3d21aa4f629e,Test: added HSCAN test.
antirez,2013-10-30 10:58:04,https://api.github.com/repos/antirez/redis/git/commits/ddc80e026f27e217e53f5051df0c6f787edea484,ddc80e026f27e217e53f5051df0c6f787edea484,Test: added SSCAN test.
antirez,2013-10-30 10:36:12,https://api.github.com/repos/antirez/redis/git/commits/5fdb94fd98dcd9e4a73bcf24b03c97923058a0d1,5fdb94fd98dcd9e4a73bcf24b03c97923058a0d1,SCAN test keys sorting turned into more idiomatic Tcl.
antirez,2013-10-30 10:34:01,https://api.github.com/repos/antirez/redis/git/commits/a881827b6ed3db807fb0d4a7f60765d34600aec2,a881827b6ed3db807fb0d4a7f60765d34600aec2,SCAN: tests moved to unit/scan.tcl.
antirez,2013-10-28 17:13:39,https://api.github.com/repos/antirez/redis/git/commits/3c7a0677b0f226ba09c9c68c6902b9cca864088d,3c7a0677b0f226ba09c9c68c6902b9cca864088d,redis-benchmark: update help for new __rand_int__ form.
antirez,2013-10-28 12:20:03,https://api.github.com/repos/antirez/redis/git/commits/9b2d44e63fb36096750664072b68d1f2002df3ac,9b2d44e63fb36096750664072b68d1f2002df3ac,"Aesthetic fix (missing space) into HSCAN and ZSCAN implementations.

Thanks to @badboy for reporting."
antirez,2013-10-28 10:36:42,https://api.github.com/repos/antirez/redis/git/commits/2c643ffa8d08daa06dd7abc7a07223851115a58a,2c643ffa8d08daa06dd7abc7a07223851115a58a,ZSCAN implemented.
antirez,2013-10-28 10:32:34,https://api.github.com/repos/antirez/redis/git/commits/e50090aa06c21ce039df39211b62183217b7f648,e50090aa06c21ce039df39211b62183217b7f648,HSCAN implemented.
antirez,2013-10-28 10:17:32,https://api.github.com/repos/antirez/redis/git/commits/4a1f1cc0d74bc58dc5b2514bfda7fc445a4cb446,4a1f1cc0d74bc58dc5b2514bfda7fc445a4cb446,SSCAN implemented.
antirez,2013-10-28 10:17:18,https://api.github.com/repos/antirez/redis/git/commits/dfeaa84d462a93070ee63ec87278a30d3105fa8d,dfeaa84d462a93070ee63ec87278a30d3105fa8d,dictScan(): empty hash table requires special handling.
antirez,2013-10-28 10:13:43,https://api.github.com/repos/antirez/redis/git/commits/cd8cb49dc4ed54a059ee10fba22df2b1e1c059f4,cd8cb49dc4ed54a059ee10fba22df2b1e1c059f4,"SCAN is a random command and does not require output sorting.

Sorting the output helps when we want to turn a non-deterministic into a
deterministic command, in that case this is not possible."
antirez,2013-10-28 10:11:34,https://api.github.com/repos/antirez/redis/git/commits/442ae833b217dd986ebd1677fb9cc0c1fdfe84a6,442ae833b217dd986ebd1677fb9cc0c1fdfe84a6,"SCAN: refactored into scanGenericCommand.

The new implementation is capable of iterating the keyspace but also
sets, hashes, and sorted sets, and can be used to implement SSCAN, ZSCAN
and HSCAN."
antirez,2013-10-25 15:05:55,https://api.github.com/repos/antirez/redis/git/commits/7bd45659b9e7dc9efc4e939e211971be2f9ee528,7bd45659b9e7dc9efc4e939e211971be2f9ee528,Fixed typos in dictScan() comment.
antirez,2013-10-25 15:01:30,https://api.github.com/repos/antirez/redis/git/commits/34c207227c3700149bb7cb0d894a4c3c5980cdf7,34c207227c3700149bb7cb0d894a4c3c5980cdf7,dictScan() algorithm documented.
antirez,2013-10-25 10:01:49,https://api.github.com/repos/antirez/redis/git/commits/48ea8a0a11d6525c2edcde23863bffc735f9ad31,48ea8a0a11d6525c2edcde23863bffc735f9ad31,SCAN: stay inside 80 cols.
antirez,2013-10-25 10:00:13,https://api.github.com/repos/antirez/redis/git/commits/df13adb037cfdd590ec5a833c1b22b043fe6affb,df13adb037cfdd590ec5a833c1b22b043fe6affb,"Revert ""Fixed typo in SCAN comment. iff -> if.""

Probably here Pieter means ""if and only if"".

This reverts commit 43fdf3b404413f6e3b2c39ac491238c70ecee81c."
antirez,2013-10-25 09:58:03,https://api.github.com/repos/antirez/redis/git/commits/a25fe0b28d72b715300d96dcd9fa687e31030da2,a25fe0b28d72b715300d96dcd9fa687e31030da2,SCAN: simplify keys list cleanup using listSetFreeMethod().
antirez,2013-10-25 09:55:28,https://api.github.com/repos/antirez/redis/git/commits/0471b908448682d7a9b19cdede6056648cdfd631,0471b908448682d7a9b19cdede6056648cdfd631,SCAN: Fix test after option renamed from PATTERN to MATCH.
antirez,2013-10-25 09:54:37,https://api.github.com/repos/antirez/redis/git/commits/fd1b0ad07c945954b35a2577b113ddc03da67744,fd1b0ad07c945954b35a2577b113ddc03da67744,SCAN: improve variable names for readability.
antirez,2013-10-25 09:51:08,https://api.github.com/repos/antirez/redis/git/commits/908eba5a8fd88354e9254cc312b0013ccf60121c,908eba5a8fd88354e9254cc312b0013ccf60121c,SCAN: remove additional newlines to conform to Redis code base.
antirez,2013-10-25 09:49:08,https://api.github.com/repos/antirez/redis/git/commits/6e55e543c6424eb6d5e4942a10a57a18dd58379a,6e55e543c6424eb6d5e4942a10a57a18dd58379a,"SCAN: remove useless assertion, already enforced by command table."
antirez,2013-10-25 09:48:18,https://api.github.com/repos/antirez/redis/git/commits/64722b0946716a524528462379416ed212c971f2,64722b0946716a524528462379416ed212c971f2,SCAN: use define REDIS_LONGSTR_SIZE instead of fixed len.
antirez,2013-10-25 09:45:56,https://api.github.com/repos/antirez/redis/git/commits/43fdf3b404413f6e3b2c39ac491238c70ecee81c,43fdf3b404413f6e3b2c39ac491238c70ecee81c,Fixed typo in SCAN comment. iff -> if.
antirez,2013-10-25 09:45:32,https://api.github.com/repos/antirez/redis/git/commits/9c88ace9274d3291119204c98a1dc31384abcb56,9c88ace9274d3291119204c98a1dc31384abcb56,SCAN option name changed: pattern -> match.
pietern,2013-04-23 17:02:36,https://api.github.com/repos/antirez/redis/git/commits/b63fbea5e4b86e21ce80f20d2649b407f5741495,b63fbea5e4b86e21ce80f20d2649b407f5741495,"Fix error in scan algorithm

The irrelevant bits shouldn't be masked to 1. This can result in slots being
skipped when the hash table is resized between calls to the iterator."
pietern,2012-07-10 22:51:43,https://api.github.com/repos/antirez/redis/git/commits/7a6cfb18f31b18303e822ce3ad887fdf8c2138e9,7a6cfb18f31b18303e822ce3ad887fdf8c2138e9,SCAN requires at least 1 argument
pietern,2012-07-09 08:00:26,https://api.github.com/repos/antirez/redis/git/commits/7f490b197ffbb27f0c655acb9aaf4adaa698d978,7f490b197ffbb27f0c655acb9aaf4adaa698d978,Add SCAN command
antirez,2013-10-11 15:33:19,https://api.github.com/repos/antirez/redis/git/commits/85f52ebcd85341485d3286b7f99cd03576abae1e,85f52ebcd85341485d3286b7f99cd03576abae1e,Cluster: rough support for sub-command options in redis-trib.
antirez,2013-10-11 08:34:32,https://api.github.com/repos/antirez/redis/git/commits/0c9f60a628941cfc07ae65d5f7fc9ac754f47552,0c9f60a628941cfc07ae65d5f7fc9ac754f47552,Cluster: there is a lower limit for the handshake timeout.
antirez,2013-10-09 14:36:00,https://api.github.com/repos/antirez/redis/git/commits/1447d28c0f2659a7a3df769c8426a6ee8a5b4552,1447d28c0f2659a7a3df769c8426a6ee8a5b4552,Cluster: data_age conversion to milliseconds fixed.
antirez,2013-10-09 14:29:14,https://api.github.com/repos/antirez/redis/git/commits/573c2fea91c6bf6e9007d8ccc98598b140f99c68,573c2fea91c6bf6e9007d8ccc98598b140f99c68,"Cluster: clusterCron() freq is now 10h. Still ping 1 node every sec.

After the change in clusterCron() frequency of call, we still want to
ping just one random node every second."
antirez,2013-10-09 14:21:27,https://api.github.com/repos/antirez/redis/git/commits/e5864c73b646d7974baa86496fde00fdb0b898a7,e5864c73b646d7974baa86496fde00fdb0b898a7,Cluster: example redis.conf updated from sec to ms for cluster-node-timeout.
antirez,2013-10-09 14:18:33,https://api.github.com/repos/antirez/redis/git/commits/ba4242863351a1ba3794532844545860c77ba6f6,ba4242863351a1ba3794532844545860c77ba6f6,"Cluster: time switched from seconds to milliseconds.

All the internal state of cluster involving time is now using mstime_t
and mstime() in order to use milliseconds resolution.

Also the clusterCron() function is called with a 10 hz frequency instead
of 1 hz.

The cluster node_timeout must be also configured in milliseconds by the
user in redis.conf."
antirez,2013-10-09 13:37:20,https://api.github.com/repos/antirez/redis/git/commits/929b6a44805e31936b607ac656455dd48298670d,929b6a44805e31936b607ac656455dd48298670d,Cluster: cluster stuff moved from redis.h to cluster.h.
antirez,2013-10-08 11:04:33,https://api.github.com/repos/antirez/redis/git/commits/6fa9b1a420769e8cce2e337628b4f9ce730c2909,6fa9b1a420769e8cce2e337628b4f9ce730c2909,Merge branch 'bettercluster' into unstable
antirez,2013-10-08 10:45:35,https://api.github.com/repos/antirez/redis/git/commits/ae2763f564589c1b68b085ad6f9e68f657ba93d7,ae2763f564589c1b68b085ad6f9e68f657ba93d7,"Cluster: masters don't vote for a slave with stale config.

When a slave requests our vote, the configEpoch he claims for its master
and the set of served slots must be greater or equal to the configEpoch
of the nodes serving these slots in the current configuraiton of the
master granting its vote.

In other terms, masters don't vote for slaves having a stale
configuration for the slots they want to serve."
antirez,2013-10-07 14:07:13,https://api.github.com/repos/antirez/redis/git/commits/f7d6ad436681963f6bbada2552e67f2c5233495a,f7d6ad436681963f6bbada2552e67f2c5233495a,Cluster: fix slave data age computation when master is still connected.
antirez,2013-10-07 13:44:58,https://api.github.com/repos/antirez/redis/git/commits/2c3301b9f539e3cab9f41d684eba3e12bbd0dadb,2c3301b9f539e3cab9f41d684eba3e12bbd0dadb,Cluster: log message improved when FAIL is cleared from a slave node.
antirez,2013-10-07 09:30:58,https://api.github.com/repos/antirez/redis/git/commits/72f38cd70f680fcc8b6f952b2592404a80af46c9,72f38cd70f680fcc8b6f952b2592404a80af46c9,Cluster: slave nodes advertise master slots bitmap and configEpoch.
antirez,2013-10-04 14:12:25,https://api.github.com/repos/antirez/redis/git/commits/0150c70b2bc50ab4d29680619115bd1629801f5d,0150c70b2bc50ab4d29680619115bd1629801f5d,"Replication: install the write handler when reusing a cached master.

Sometimes when we resurrect a cached master after a successful partial
resynchronization attempt, there is pending data in the output buffers
of the client structure representing the master (likely REPLCONF ACK
commands).

If we don't reinstall the write handler, it will never be installed
again by addReply*() family functions as they'll assume that if there is
already data pending, the write handler is already installed.

This bug caused some slaves after a successful partial sync to never
send REPLCONF ACK, and continuously being detected as timing out by the
master, with a disconnection / reconnection loop."
antirez,2013-10-04 14:12:25,https://api.github.com/repos/antirez/redis/git/commits/1461422ce66056eb79231e8240dde01db2260fa0,1461422ce66056eb79231e8240dde01db2260fa0,"Replication: install the write handler when reusing a cached master.

Sometimes when we resurrect a cached master after a successful partial
resynchronization attempt, there is pending data in the output buffers
of the client structure representing the master (likely REPLCONF ACK
commands).

If we don't reinstall the write handler, it will never be installed
again by addReply*() family functions as they'll assume that if there is
already data pending, the write handler is already installed.

This bug caused some slaves after a successful partial sync to never
send REPLCONF ACK, and continuously being detected as timing out by the
master, with a disconnection / reconnection loop."
antirez,2013-10-04 10:59:24,https://api.github.com/repos/antirez/redis/git/commits/6d8c2a484840b625353bb1252b35a61d5782f409,6d8c2a484840b625353bb1252b35a61d5782f409,"Replication: fix master timeout.

Since we started sending REPLCONF ACK from slaves to masters, the
lastinteraction field of the client structure is always refreshed as
soon as there is room in the socket output buffer, so masters in timeout
are detected with too much delay (the socket buffer takes a lot of time
to be filled by small REPLCONF ACK <number> entries).

This commit only counts data received as interactions with a master,
solving the issue."
antirez,2013-10-04 10:59:24,https://api.github.com/repos/antirez/redis/git/commits/b41570f7193b3c3bd81a420cfa234512725a0700,b41570f7193b3c3bd81a420cfa234512725a0700,"Replication: fix master timeout.

Since we started sending REPLCONF ACK from slaves to masters, the
lastinteraction field of the client structure is always refreshed as
soon as there is room in the socket output buffer, so masters in timeout
are detected with too much delay (the socket buffer takes a lot of time
to be filled by small REPLCONF ACK <number> entries).

This commit only counts data received as interactions with a master,
solving the issue."
antirez,2013-10-04 10:25:09,https://api.github.com/repos/antirez/redis/git/commits/d62ae1ec059942a39060a3dcb18fd171372a6100,d62ae1ec059942a39060a3dcb18fd171372a6100,"PSYNC: safer handling of PSYNC requests.

There was a bug that over-esteemed the amount of backlog available,
however this could only happen when a slave was asking for an offset
that was in the ""future"" compared to the master replication backlog.

Now this case is handled well and logged as an incident in the master
log file."
antirez,2013-09-30 09:53:18,https://api.github.com/repos/antirez/redis/git/commits/4f9a69399bc2751f8fc658f998f895ddd280cf45,4f9a69399bc2751f8fc658f998f895ddd280cf45,Add REWRITE to CONFIG subcommands help message.
antirez,2013-10-04 10:25:09,https://api.github.com/repos/antirez/redis/git/commits/37e06bd95262f69144aae7c85401a9e7d9411b3f,37e06bd95262f69144aae7c85401a9e7d9411b3f,"PSYNC: safer handling of PSYNC requests.

There was a bug that over-esteemed the amount of backlog available,
however this could only happen when a slave was asking for an offset
that was in the ""future"" compared to the master replication backlog.

Now this case is handled well and logged as an incident in the master
log file."
antirez,2013-10-03 07:55:20,https://api.github.com/repos/antirez/redis/git/commits/7afc0dd59a7ac0a76b35d6589f83f4fce1f69a0f,7afc0dd59a7ac0a76b35d6589f83f4fce1f69a0f,"Cluster: new clusterDoBeforeSleep() API.

The new API is able to remember operations to perform before returning
to the event loop, such as checking if there is the failover quorum for
a slave, save and fsync the configuraiton file, and so forth.

Because this operations are performed before returning on the event
loop we are sure that messages that are sent in the same event loop run
will be delivered *after* the configuration is already saved, that is a
requirement sometimes. For instance we want to publish a new epoch only
when it is already stored in nodes.conf in order to avoid returning back
in the logical clock when a node is restarted.

This new API provides a big performance advantage compared to saving and
possibly fsyncing the configuration file multiple times in the same
event loop run, especially in the case of big clusters with tens or
hundreds of nodes."
antirez,2013-10-02 10:27:12,https://api.github.com/repos/antirez/redis/git/commits/211dcbe339be00b84dcbbd8afdb6578ddc793df6,211dcbe339be00b84dcbbd8afdb6578ddc793df6,Cluster: update cluster config when slave changes master.
antirez,2013-10-02 08:10:08,https://api.github.com/repos/antirez/redis/git/commits/6c4d904baf7d5c8717cce04ec69fc491f710823a,6c4d904baf7d5c8717cce04ec69fc491f710823a,Cluster: bus messages stats in CLUSTER info.
antirez,2013-10-02 07:42:35,https://api.github.com/repos/antirez/redis/git/commits/abe81781aeaeb0d7d3837df6c5cba71f0fae5161,abe81781aeaeb0d7d3837df6c5cba71f0fae5161,"Cluster: FAIL messages from unknown senders are handled better.

Previously the event was not logged but instead the node reported an
unknown packet type received."
antirez,2013-10-01 15:21:28,https://api.github.com/repos/antirez/redis/git/commits/7970ebd80a735f6c73c8be1bda0e77f4bcc47a34,7970ebd80a735f6c73c8be1bda0e77f4bcc47a34,"Cluster: senderCurrentEpoch == node currentEpoch was too strict.

We can accept a vote as long as its epoch is >= the epoch at which we
started the voting process. There is no need for it to be exactly the
same."
antirez,2013-10-01 13:40:20,https://api.github.com/repos/antirez/redis/git/commits/f1bfd8233bac4b8e07b1f3f89cb3790d05445b11,f1bfd8233bac4b8e07b1f3f89cb3790d05445b11,Cluster: fix typo in clusterProcessPacket() comment.
antirez,2013-09-30 14:19:44,https://api.github.com/repos/antirez/redis/git/commits/1dedf9aa36b69d8721be19b7eb37b0c1b4f8e917,1dedf9aa36b69d8721be19b7eb37b0c1b4f8e917,"Cluster: time field removed from cluster messages header.

The new algorithm does not check replies time as checking for the
currentEpoch in the reply ensures that the reply is about the current
election process."
antirez,2013-09-30 09:53:18,https://api.github.com/repos/antirez/redis/git/commits/2b93a195374665d8bc74b33b4c769bdf9db97014,2b93a195374665d8bc74b33b4c769bdf9db97014,Add REWRITE to CONFIG subcommands help message.
antirez,2013-09-30 09:51:58,https://api.github.com/repos/antirez/redis/git/commits/2d0844ee3762fa49f71a983cb0acad40bfc7e469,2d0844ee3762fa49f71a983cb0acad40bfc7e469,Cluster: log message shortened.
antirez,2013-09-30 09:48:09,https://api.github.com/repos/antirez/redis/git/commits/707ff0f714dd19391c52ecb0e6a1264c1a9f1de4,707ff0f714dd19391c52ecb0e6a1264c1a9f1de4,Make clear that runids are not cluster node IDs.
antirez,2013-09-30 09:44:23,https://api.github.com/repos/antirez/redis/git/commits/4dc247eb31e697228d9de0298397dfc582b470aa,4dc247eb31e697228d9de0298397dfc582b470aa,"Cluster: detect cluster reconfiguration when master slots drop to 0.

The old algorithm used a PROMOTED flag and explicitly checks about
slave->master convertions. Wit the new cluster meta-data propagation
algorithm we just look at the configEpoch to check if we need to
reconfigure slots, then:

1) If a node is a master but it reaches zero served slots becuase of
reconfiguration.
2) If a node is a slave but the master reaches zero served slots because
of a reconfiguration.

We switch as a replica of the new slots owner."
antirez,2013-09-30 08:13:58,https://api.github.com/repos/antirez/redis/git/commits/62b1591439901557b3a177469ed8d54da77e7503,62b1591439901557b3a177469ed8d54da77e7503,"Cluster: re-order failover operations to make it safer.

We need to:

1) Increment the configEpoch.
2) Save it to disk and fsync the file.
3) Broadcast the PONG with the new configuration.

If other nodes will receive the updated configuration we need to be sure
to restart with this new config in the event of a crash."
antirez,2013-09-30 08:13:33,https://api.github.com/repos/antirez/redis/git/commits/b1875177198959710d9c9a348eb9f116b797b6bc,b1875177198959710d9c9a348eb9f116b797b6bc,"Cluster: when upading the configEpoch for a node, save config on disk ASAP."
antirez,2013-09-30 08:13:07,https://api.github.com/repos/antirez/redis/git/commits/03ca9039835872b5ea14c361a6a970e7646cecb8,03ca9039835872b5ea14c361a6a970e7646cecb8,Cluster: fsync data when saving the cluster config.
antirez,2013-09-27 07:55:41,https://api.github.com/repos/antirez/redis/git/commits/026e63392e29b2d4d66bc833d2194e0679df55f2,026e63392e29b2d4d66bc833d2194e0679df55f2,Cluster: update the node configEpoch when newer is detected.
antirez,2013-09-26 14:54:43,https://api.github.com/repos/antirez/redis/git/commits/7c4b8f29e76ec24f41a0180df54057701345cf54,7c4b8f29e76ec24f41a0180df54057701345cf54,Cluster: react faster when a slave wins an election.
antirez,2013-09-26 11:28:19,https://api.github.com/repos/antirez/redis/git/commits/42fa46e49a9b71d38f4410b3376f3f2bec8d716d,42fa46e49a9b71d38f4410b3376f3f2bec8d716d,Cluster: removed an old source of delay to start the slave failover.
antirez,2013-09-26 11:00:41,https://api.github.com/repos/antirez/redis/git/commits/a445aa30a0fb72bc54da083998b3458fad92820f,a445aa30a0fb72bc54da083998b3458fad92820f,Cluster: master node now uses new protocol to vote.
antirez,2013-09-26 09:13:17,https://api.github.com/repos/antirez/redis/git/commits/fb9b76fe1435c83d84a3144f1c06ddb1378899b8,fb9b76fe1435c83d84a3144f1c06ddb1378899b8,Cluster: slave node now uses the new protocol to get elected.
soveran,2013-09-21 19:36:32,https://api.github.com/repos/antirez/redis/git/commits/347ab78e90c481e6273a8410beb73358603e8db0,347ab78e90c481e6273a8410beb73358603e8db0,Document the redis-cli --csv option.
antirez,2013-09-25 10:51:01,https://api.github.com/repos/antirez/redis/git/commits/656c3ffe4a6fe5fb07243cd755d4b0112e636204,656c3ffe4a6fe5fb07243cd755d4b0112e636204,Cluster: fix redis-trib node config fingerprinting for new nodes format.
antirez,2013-09-25 10:44:47,https://api.github.com/repos/antirez/redis/git/commits/341ed1d1a88bfea230a04066f6b496e4457277c0,341ed1d1a88bfea230a04066f6b496e4457277c0,Cluster: fix redis-trib for added configEpoch field in CLUSTER NODES.
antirez,2013-09-25 10:38:36,https://api.github.com/repos/antirez/redis/git/commits/32b5410af928b9d651a837f79c6c6002615a3048,32b5410af928b9d651a837f79c6c6002615a3048,Cluster: add currentEpoch to CLUSTER INFO.
antirez,2013-09-25 10:36:29,https://api.github.com/repos/antirez/redis/git/commits/6ec795d2cf3147fb8541aed45b9b53cef6e4c627,6ec795d2cf3147fb8541aed45b9b53cef6e4c627,Cluster: update our currentEpoch when a greater one is seen.
antirez,2013-09-25 09:53:35,https://api.github.com/repos/antirez/redis/git/commits/d426ada891bfe8b1e35d667f4357c14fb357c9af,d426ada891bfe8b1e35d667f4357c14fb357c9af,Cluster: broadcast currentEpoch and configEpoch in packets header.
antirez,2013-09-25 09:47:13,https://api.github.com/repos/antirez/redis/git/commits/12483b0061e0755d17730f24a976d61301450216,12483b0061e0755d17730f24a976d61301450216,Cluster: configEpoch added in cluster nodes description.
antirez,2013-09-25 07:26:36,https://api.github.com/repos/antirez/redis/git/commits/da257afe5777e1bcf3b6b01e2355252be956b511,da257afe5777e1bcf3b6b01e2355252be956b511,htonu64() and ntohu64 added to endianconv.h.
antirez,2013-09-20 09:26:44,https://api.github.com/repos/antirez/redis/git/commits/3c9bb8751a440c9f4bde69ceb54b624f52f589f6,3c9bb8751a440c9f4bde69ceb54b624f52f589f6,"Cluster: PFAIL -> FAIL transition allowed for slaves.

First change: now there is no need to be a master in order to detect a
failure, however the majority of masters signaling PFAIL or FAIL is needed.

This change is important because it allows slaves rejoining the cluster
after a partition to sense the FAIL condition so that eventually all the
nodes agree on failures."
antirez,2013-09-20 07:22:21,https://api.github.com/repos/antirez/redis/git/commits/925ea9f8583a34ecb3d46bd773957ec98ce39bfa,925ea9f8583a34ecb3d46bd773957ec98ce39bfa,"Cluster: added time field in cluster bus messages.

The time is sent in requests, and copied back in reply packets.
This way the receiver can compare the time field in a reply with its
local clock and check the age of the request associated with this reply.

This is an easy way to discard delayed replies. Note that only a clock
is used here, that is the one of the node sending the packet. The
receiver only copies the field back into the reply, so no
synchronization is needed between clocks of different hosts."
antirez,2013-09-17 07:46:01,https://api.github.com/repos/antirez/redis/git/commits/7bec743e66e260b54f000edc5f39340d4d2a9d9c,7bec743e66e260b54f000edc5f39340d4d2a9d9c,Allow AUTH / PING when disconnected from slave and serve-stale-data is no.
antirez,2013-09-04 13:52:16,https://api.github.com/repos/antirez/redis/git/commits/d0e327413be157e1eab25751458a7d362bf49a23,d0e327413be157e1eab25751458a7d362bf49a23,Cluster: don't add an handshake node for the same ip:port pair multiple times.
antirez,2013-09-04 10:41:21,https://api.github.com/repos/antirez/redis/git/commits/72587e6cc5857d4314e045baa1f424e59d6ab0ce,72587e6cc5857d4314e045baa1f424e59d6ab0ce,"Cluster: free HANDSHAKE nodes after node_timeout.

Handshake nodes should turn into normal nodes or be freed in a
reasonable amount of time, otherwise they'll keep accumulating if the
address they are associated with is not reachable for some reason."
antirez,2013-09-04 08:35:53,https://api.github.com/repos/antirez/redis/git/commits/2debce325bf52b45ec8c0ee274cd9af63e4d2957,2debce325bf52b45ec8c0ee274cd9af63e4d2957,"redis-cli: fix big keys search when the key no longer exist.

The code freed a reply object that was never created, resulting in a
segfault every time randomkey returned a key that was deleted before we
queried it for size."
antirez,2013-09-04 08:32:09,https://api.github.com/repos/antirez/redis/git/commits/8eff339ca43c403615a7821be054221274cb113f,8eff339ca43c403615a7821be054221274cb113f,Cluster: CLUSTER SAVECONFIG command added.
antirez,2013-09-04 08:25:26,https://api.github.com/repos/antirez/redis/git/commits/528201ad6c2b2f9758003f8676d400a5f94fa1f0,528201ad6c2b2f9758003f8676d400a5f94fa1f0,Cluster: don't save HANDSHAKE nodes in nodes.conf.
antirez,2013-09-04 08:07:50,https://api.github.com/repos/antirez/redis/git/commits/e5d5da6f7c3f40ccf3ea3d1cbf72fbd3943f0ee9,e5d5da6f7c3f40ccf3ea3d1cbf72fbd3943f0ee9,Cluster: always use safe iteartors to iterate server.cluster->nodes.
Maxime2,2013-08-28 05:34:52,https://api.github.com/repos/antirez/redis/git/commits/43fe2d0d979b23b18d3ebe0f52299c42b9708ec1,43fe2d0d979b23b18d3ebe0f52299c42b9708ec1,mistype fixed
Maxime2,2013-08-28 05:44:40,https://api.github.com/repos/antirez/redis/git/commits/70e82e5c79affb255d57e88474e254f1ccee56cf,70e82e5c79affb255d57e88474e254f1ccee56cf,A mistype fixed
antirez,2013-09-03 09:43:07,https://api.github.com/repos/antirez/redis/git/commits/354a5de27069ac841c15e34ed87943d416f53762,354a5de27069ac841c15e34ed87943d416f53762,Cluster: clusterReadHandler() reworked to be more correct and simpler to follow.
antirez,2013-09-03 09:42:09,https://api.github.com/repos/antirez/redis/git/commits/1036b4b21b0edb8a9075827f7b1d33918b7557a6,1036b4b21b0edb8a9075827f7b1d33918b7557a6,Cluster: use non-blocking I/O for the cluster bus.
antirez,2013-09-03 09:27:01,https://api.github.com/repos/antirez/redis/git/commits/f6efb6cdec292f5f4891445346e9125965874f30,f6efb6cdec292f5f4891445346e9125965874f30,"Cluster: fixed a bug in clusterSendPublish() due to inverted statements.

The code used to copy the header *after* the 'hdr' pointer was already
switched to the new buffer. Of course we need to do the reverse."
antirez,2013-08-30 06:59:11,https://api.github.com/repos/antirez/redis/git/commits/e9d97b453e6f62938d6a89150110a67e0d0a216b,e9d97b453e6f62938d6a89150110a67e0d0a216b,Test: Lua stack leak regression test added.
antirez,2013-08-29 14:23:57,https://api.github.com/repos/antirez/redis/git/commits/f79b1cb49e8dec1cb21bd4d7ccdee21931114429,f79b1cb49e8dec1cb21bd4d7ccdee21931114429,Test: added a memory efficiency test.
antirez,2013-08-29 09:49:23,https://api.github.com/repos/antirez/redis/git/commits/41d3147344da4656b6a21c73373c34d25fe8f24d,41d3147344da4656b6a21c73373c34d25fe8f24d,"Fixed critical memory leak from EVAL.

Multiple missing calls to lua_pop prevented the error handler function
pushed on the stack for lua_pcall() to be popped before returning,
causing a memory leak in almost all the code paths of EVAL (both
successful calls and calls returning errors).

This caused two issues: Lua leaking memory (and this was very visible
from INFO memory output, as the 'used_memory_lua' field reported an
always increasing amount of memory used), and as a result slower and
slower GC cycles resulting in all the CPU being used.

Thanks to Tanguy Le Barzic for noticing something was wrong with his 2.8
slave, and for creating a testing EC2 environment where I was able to
investigate the issue."
yihuang,2013-08-13 09:47:42,https://api.github.com/repos/antirez/redis/git/commits/9bb91d198cd6130efbdde7406b3f603cc5d0c648,9bb91d198cd6130efbdde7406b3f603cc5d0c648,fix lua_cmsgpack pack map as array
antirez,2013-08-27 11:00:06,https://api.github.com/repos/antirez/redis/git/commits/e29e426b4368b68f23c5b6f78b072d1126824653,e29e426b4368b68f23c5b6f78b072d1126824653,Fix an hypothetical issue in processMultibulkBuffer().
antirez,2013-08-27 10:36:52,https://api.github.com/repos/antirez/redis/git/commits/8811d49009fd0bbf8ce0877e6d5bf3e54c29e85a,8811d49009fd0bbf8ce0877e6d5bf3e54c29e85a,"Remove useful check from tryObjectEncoding().

We are sure the string is large, since when the sds optimization branch
is entered it means that it was not possible to encode it as EMBSTR for
size concerns."
antirez,2013-08-27 09:59:34,https://api.github.com/repos/antirez/redis/git/commits/38b2e65e15b5be11ebefbaedeb761ece2066c747,38b2e65e15b5be11ebefbaedeb761ece2066c747,"tryObjectEncoding(): optimize sds strings if possible.

When no encoding is possible, at least try to reallocate the sds string
with one that does not waste memory (with free space at the end of the
buffer) when the string is large enough."
antirez,2013-08-27 09:56:47,https://api.github.com/repos/antirez/redis/git/commits/6672bc8b3bfbcb6a0d6f643063be296d3acfda3b,6672bc8b3bfbcb6a0d6f643063be296d3acfda3b,"tryObjectEncoding(): don't call stringl2() for too big strings.

We are sure that a string that is longer than 21 chars cannot be
represented by a 64 bit signed integer, as -(2^64) is 21 chars:

strlen(-18446744073709551616) => 21"
antirez,2013-08-27 09:54:38,https://api.github.com/repos/antirez/redis/git/commits/ff9d66c4a9a6fc91233034bfbcaf5c65379a3bed,ff9d66c4a9a6fc91233034bfbcaf5c65379a3bed,"Don't over-allocate the sds string for large bulk requests.

The call to sdsMakeRoomFor() did not accounted for the amount of data
already present in the query buffer, resulting into over-allocation."
antirez,2013-08-27 09:52:12,https://api.github.com/repos/antirez/redis/git/commits/e21803348a1c707c5fe36524a589b2475d5ad791,e21803348a1c707c5fe36524a589b2475d5ad791,"DEBUG SDSLEN added.

This command is only useful for low-level debugging of memory issues due
to sds wasting memory as empty buffer at the end of the string."
antirez,2013-08-27 08:16:01,https://api.github.com/repos/antirez/redis/git/commits/b34126e37850f70d55ee441a54e28be18e9141c4,b34126e37850f70d55ee441a54e28be18e9141c4,Update server.lastbgsave_status when fork() fails.
antirez,2013-08-27 07:31:43,https://api.github.com/repos/antirez/redis/git/commits/003cc8a4f575cdff6a79ce5c856bf0e24fe497df,003cc8a4f575cdff6a79ce5c856bf0e24fe497df,Only run the fast active expire cycle if master & enabled.
antirez,2013-08-26 14:16:25,https://api.github.com/repos/antirez/redis/git/commits/303dde3757b75f9ce529ad804abf7e6d6ae5e793,303dde3757b75f9ce529ad804abf7e6d6ae5e793,"Don't update node pong time via gossip.

This feature was implemented in the initial days of the Redis Cluster
implementaiton but is not a good idea at all.

1) It depends on clocks to be synchronized, that is already very bad.
2) Moreover it adds a bug where the pong time is updated via gossip so
no new PING is ever sent by the current node, with the effect of no PONG
received, no update of tables, no clearing of PFAIL flag.

In general to trust other nodes about the reachability of other nodes is
a broken distributed programming model."
antirez,2013-08-22 12:53:53,https://api.github.com/repos/antirez/redis/git/commits/6ae37b0e1de3b0255b667edc9efdaf436a3edb6b,6ae37b0e1de3b0255b667edc9efdaf436a3edb6b,"Cluster: set event handler in cluster bus listening socket.

The commit using listenToPort() introduced this bug by no longer
creating the event handler to handle incoming messages from the cluster
bus."
antirez,2013-08-22 12:05:07,https://api.github.com/repos/antirez/redis/git/commits/81a6a9639a5650082fcc78f5c83c4dfee79eaeb2,81a6a9639a5650082fcc78f5c83c4dfee79eaeb2,Use listenToPort() in cluster.c as well.
antirez,2013-08-22 12:01:16,https://api.github.com/repos/antirez/redis/git/commits/4f310e05c0adbded9c077b0634355fa9b8b47985,4f310e05c0adbded9c077b0634355fa9b8b47985,Opening TCP listening ports refactored into a function.
antirez,2013-08-22 11:02:59,https://api.github.com/repos/antirez/redis/git/commits/0f0cc88589aea634cd66121fd0f473520f86e143,0f0cc88589aea634cd66121fd0f473520f86e143,Print error message when can't bind * on any address.
antirez,2013-08-22 09:54:25,https://api.github.com/repos/antirez/redis/git/commits/042776aff78833a2c8885a2a76db361c75105203,042776aff78833a2c8885a2a76db361c75105203,"Cluster: fix CLUSTER MEET ip address validation.

This was broken by the IPv6 support patches."
antirez,2013-08-22 09:53:28,https://api.github.com/repos/antirez/redis/git/commits/9cf30132cc8972b59ca2e8f01325a99ba0a915b0,9cf30132cc8972b59ca2e8f01325a99ba0a915b0,"Cluster: process MEET packets as PING packets.

Somewhat a previous commit broken this so CLUSTER MEET was no longer
working."
antirez,2013-08-21 13:51:10,https://api.github.com/repos/antirez/redis/git/commits/b804afcf01db8096889c2756c0752fa5b40aea3c,b804afcf01db8096889c2756c0752fa5b40aea3c,Use a safe dict.c iterator in clusterCron().
antirez,2013-08-21 09:36:09,https://api.github.com/repos/antirez/redis/git/commits/35a977c4990bf5cad3f9f9c73ecdf26d11a2e430,35a977c4990bf5cad3f9f9c73ecdf26d11a2e430,Fix for issue #1214 simplified.
antirez,2013-08-21 09:18:41,https://api.github.com/repos/antirez/redis/git/commits/038e356dbc9b33a52bc1e4eb432665d2274f7a27,038e356dbc9b33a52bc1e4eb432665d2274f7a27,"Merge pull request #1214 from kaoshijuan/unstable

fixed initServer fail problem"
antirez,2013-08-20 10:04:57,https://api.github.com/repos/antirez/redis/git/commits/7e9929e12e6e20ef100ac55be659e8df8e2800ef,7e9929e12e6e20ef100ac55be659e8df8e2800ef,Use printf %zu specifier to print private_dirty.
antirez,2013-08-20 09:49:55,https://api.github.com/repos/antirez/redis/git/commits/1c08302edc4f635df6eaf99e2257294dabf7628e,1c08302edc4f635df6eaf99e2257294dabf7628e,dictFingerprint(): cast pointers to integer of same size.
antirez,2013-08-19 15:25:48,https://api.github.com/repos/antirez/redis/git/commits/00ddc3500c2679e473c3a7769470887a38489fb0,00ddc3500c2679e473c3a7769470887a38489fb0,"Revert ""Fixed type in dict.c comment: 265 -> 256.""

This reverts commit 6253180abd9fd11a385c644fe1dee932ef83d86f."
antirez,2013-08-19 13:10:33,https://api.github.com/repos/antirez/redis/git/commits/6253180abd9fd11a385c644fe1dee932ef83d86f,6253180abd9fd11a385c644fe1dee932ef83d86f,Fixed type in dict.c comment: 265 -> 256.
antirez,2013-08-19 12:54:31,https://api.github.com/repos/antirez/redis/git/commits/1c75408457841d94b2e9f6730861516555796341,1c75408457841d94b2e9f6730861516555796341,"assert.h replaced with redisassert.h when appropriate.

Also a warning was suppressed by including unistd.h in redisassert.h
(needed for _exit())."
antirez,2013-08-19 12:53:38,https://api.github.com/repos/antirez/redis/git/commits/ca294c6b1e515a7da42f8106ed4e596e649165ba,ca294c6b1e515a7da42f8106ed4e596e649165ba,"Added redisassert.h as drop in replacement for assert.h.

By using redisassert.h version of assert() you get stack traces in the
log instead of a process disappearing on assertions."
antirez,2013-08-19 09:29:18,https://api.github.com/repos/antirez/redis/git/commits/905d4822daa7befde5a70fb7d2b84d8428ad127c,905d4822daa7befde5a70fb7d2b84d8428ad127c,"dictFingerprint() fingerprinting made more robust.

The previous hashing used the trivial algorithm of xoring the integers
together. This is not optimal as it is very likely that different
hash table setups will hash the same, for instance an hash table at the
start of the rehashing process, and at the end, will have the same
fingerprint.

Now we hash N integers in a smarter way, by summing every integer to the
previous hash, and taking the integer hashing again (see the code for
further details). This way it is a lot less likely that we get a
collision. Moreover this way of hashing explicitly protects from the
same set of integers in a different order to hash to the same number.

This commit is related to issue #1240."
antirez,2013-08-16 13:31:25,https://api.github.com/repos/antirez/redis/git/commits/3039e806d84518773b157fe26068b5527db78981,3039e806d84518773b157fe26068b5527db78981,"Fix comments for correctness in zunionInterGenericCommand().

Related to issue #1240."
antirez,2013-08-16 13:26:44,https://api.github.com/repos/antirez/redis/git/commits/cfb9d025c6d489a72fa444f74345131fbb68a4ea,cfb9d025c6d489a72fa444f74345131fbb68a4ea,"Properly init/release iterators in zunionInterGenericCommand().

This commit does mainly two things:

1) It fixes zunionInterGenericCommand() by removing mass-initialization
of all the iterators used, so that we don't violate the unsafe iterator
API of dictionaries. This fixes issue #1240.

2) Since the zui* APIs required the allocator to be initialized in the
zsetopsrc structure in order to use non-iterator related APIs, this
commit fixes this strict requirement by accessing objects directly via
the op->subject->ptr pointer we have to the object."
antirez,2013-08-16 12:08:04,https://api.github.com/repos/antirez/redis/git/commits/48cde3fe4710b43be6537854ab464b8568616fb8,48cde3fe4710b43be6537854ab464b8568616fb8,"dict.c iterator API misuse protection.

dict.c allows the user to create unsafe iterators, that are iterators
that will not touch the dictionary data structure in any way, preventing
copy on write, but at the same time are limited in their usage.

The limitation is that when itearting with an unsafe iterator, no call
to other dictionary functions must be done inside the iteration loop,
otherwise the dictionary may be incrementally rehashed resulting into
missing elements in the set of the elements returned by the iterator.

However after introducing this kind of iterators a number of bugs were
found due to misuses of the API, and we are still finding
bugs about this issue. The bugs are not trivial to track because the
effect is just missing elements during the iteartion.

This commit introduces auto-detection of the API misuse. The idea is
that an unsafe iterator has a contract: from initialization to the
release of the iterator the dictionary should not change.

So we take a fingerprint of the dictionary state, xoring a few important
dict properties when the unsafe iteartor is initialized. We later check
when the iterator is released if the fingerprint is still the same. If it
is not, we found a misuse of the iterator, as not allowed API calls
changed the internal state of the dictionary.

This code was checked against a real bug, issue #1240.

This is what Redis prints (aborting) when a misuse is detected:

Assertion failed: (iter->fingerprint == dictFingerprint(iter->d)),
function dictReleaseIterator, file dict.c, line 587."
antirez,2013-08-12 10:43:26,https://api.github.com/repos/antirez/redis/git/commits/739893075675af06b1cc5d782a984e3624e98ff9,739893075675af06b1cc5d782a984e3624e98ff9,Use precomptued objects for bulk and mbulk prefixes.
antirez,2013-08-12 10:38:52,https://api.github.com/repos/antirez/redis/git/commits/c06de115af0871464c52662355d4b2b107d4f1c8,c06de115af0871464c52662355d4b2b107d4f1c8,replicationFeedSlaves() func name typo: feedReplicationBacklogWithObject -> feedReplicationBacklog.
antirez,2013-08-12 10:10:38,https://api.github.com/repos/antirez/redis/git/commits/dcc48a81436c08128a15f88170eee1287122e87a,dcc48a81436c08128a15f88170eee1287122e87a,"replicationFeedSlave() reworked for correctness and speed.

The previous code using a static buffer as an optimization was lame:

1) Premature optimization, actually it was *slower* than naive code
   because resulted into the creation / destruction of the object
   encapsulating the output buffer.
2) The code was very hard to test, since it was needed to have specific
   tests for command lines exceeding the size of the static buffer.
3) As a result of ""2"" the code was bugged as the current tests were not
   able to stress specific corner cases.

It was replaced with easy to understand code that is safer and faster."
antirez,2013-08-12 09:50:54,https://api.github.com/repos/antirez/redis/git/commits/aa05128f51baf8063606770b608432e9ffd96981,aa05128f51baf8063606770b608432e9ffd96981,Fix a PSYNC bug caused by a variable name typo.
antirez,2013-08-12 09:38:21,https://api.github.com/repos/antirez/redis/git/commits/610224d0d0409b337ee3435ac77720dc59f5fd80,610224d0d0409b337ee3435ac77720dc59f5fd80,Fix sdsempty() prototype in sds.h.
antirez,2013-08-12 08:29:14,https://api.github.com/repos/antirez/redis/git/commits/89ffba9133bc78f6c797d248f22335da490d20d0,89ffba9133bc78f6c797d248f22335da490d20d0,"Replication: better way to send a preamble before RDB payload.

During the replication full resynchronization process, the RDB file is
transfered from the master to the slave. However there is a short
preamble to send, that is currently just the bulk payload length of the
file in the usual Redis form $..length..<CR><LF>.

This preamble used to be sent with a direct write call, assuming that
there was alway room in the socket output buffer to hold the few bytes
needed, however this does not scale in case we'll need to send more
stuff, and is not very robust code in general.

This commit introduces a more general mechanism to send a preamble up to
2GB in size (the max length of an sds string) in a non blocking way."
antirez,2013-08-08 14:42:08,https://api.github.com/repos/antirez/redis/git/commits/db862e8ef0a7f857beb8b7db1a5c70093832033b,db862e8ef0a7f857beb8b7db1a5c70093832033b,"redis-benchmark: changes to random arguments substitution.

Before this commit redis-benchmark supported random argumetns in the
form of :rand:000000000000. In every string of that form, the zeros were
replaced with a random number of 12 digits at every command invocation.

However this was far from perfect as did not allowed to generate simply
random numbers as arguments, there was always the :rand: prefix.

Now instead every argument in the form __rand_int__ is replaced with a
12 digits number. Note that ""__rand_int__"" is 12 characters itself.

In order to implement the new semantic, it was needed to change a few
thigns in the internals of redis-benchmark, as new clients are created
cloning old clients, so without a stable prefix such as "":rand:"" the old
way of cloning the client was no longer able to understand, from the old
command line, what was the position of the random strings to substitute.

Now instead a client structure is passed as a reference for cloning, so
that we can directly clone the offsets inside the command line."
antirez,2013-08-08 12:31:54,https://api.github.com/repos/antirez/redis/git/commits/92ab77f8d5ae12e938a07be2280d558360c25e09,92ab77f8d5ae12e938a07be2280d558360c25e09,"redis-benchmark: replace snprintf()+memcpy with faster code.

This change was profiler-driven, but the actual effect is hard to
measure in real-world redis benchmark runs."
antirez,2013-08-07 14:08:04,https://api.github.com/repos/antirez/redis/git/commits/de698798bc20dee17840ed2ba75fb609d42c8eb1,de698798bc20dee17840ed2ba75fb609d42c8eb1,"Merge pull request #1234 from badboy/patch-2

Little typo"
badboy,2013-08-07 14:05:09,https://api.github.com/repos/antirez/redis/git/commits/74c0af21f506b84882ea425801b4c3c2c0aea9db,74c0af21f506b84882ea425801b4c3c2c0aea9db,Little typo
antirez,2013-08-07 13:59:59,https://api.github.com/repos/antirez/redis/git/commits/36a0947185973f7c90fa4c54d2747d220981d222,36a0947185973f7c90fa4c54d2747d220981d222,redis-benchmark: fix memory leak introduced by 346256f
antirez,2013-08-07 13:58:51,https://api.github.com/repos/antirez/redis/git/commits/346256f933d2e5f0c2559e15f3ecfbe55fb79965,346256f933d2e5f0c2559e15f3ecfbe55fb79965,redis-benchmark: max pipeline length hardcoded limit removed.
antirez,2013-08-06 17:01:54,https://api.github.com/repos/antirez/redis/git/commits/6cbfdd95205cf81b098a48d6331dcc7f04f5680a,6cbfdd95205cf81b098a48d6331dcc7f04f5680a,redis-benchmark: fix db selection when :rand: feature is used.
antirez,2013-08-06 16:50:54,https://api.github.com/repos/antirez/redis/git/commits/d52c9b6cdb1d885e647cf9be0114d481133ec485,d52c9b6cdb1d885e647cf9be0114d481133ec485,redis-benchmark: ability to SELECT a specifid db number.
antirez,2013-08-06 13:00:43,https://api.github.com/repos/antirez/redis/git/commits/112fa479783e8975848ab79d695a65363d330f18,112fa479783e8975848ab79d695a65363d330f18,"Add per-db average TTL information in INFO output.

Example:

db0:keys=221913,expires=221913,avg_ttl=655

The algorithm uses a running average with only two samples (current and
previous). Keys found to be expired are considered at TTL zero even if
the actual TTL can be negative.

The TTL is reported in milliseconds."
antirez,2013-08-06 10:59:04,https://api.github.com/repos/antirez/redis/git/commits/4befe73b60f7e02dd304ea0c19febce8fea0bd13,4befe73b60f7e02dd304ea0c19febce8fea0bd13,"activeExpireCycle(): fix about fast cycle early start.

We don't want to repeat a fast cycle too soon, the previous code was
broken, we need to wait two times the period *since* the start of the
previous cycle in order to avoid there is an even space between cycles:

.-> start                   .-> second start
|                           |
+-------------+-------------+--------------+
| first cycle |    pause    | second cycle |
+-------------+-------------+--------------+

The second and first start must be PERIOD*2 useconds apart hence the *2
in the new code."
antirez,2013-08-06 10:55:49,https://api.github.com/repos/antirez/redis/git/commits/6500fabfb881a7ffaadfbff74ab801c55d4591fc,6500fabfb881a7ffaadfbff74ab801c55d4591fc,Some activeExpireCycle() refactoring.
antirez,2013-08-06 10:36:13,https://api.github.com/repos/antirez/redis/git/commits/d398f38879a3d29f74fd2cea61f9ae93a3a2af50,d398f38879a3d29f74fd2cea61f9ae93a3a2af50,Remove dead code and fix comments for new expire code.
antirez,2013-08-05 14:11:56,https://api.github.com/repos/antirez/redis/git/commits/66a26471dc829bb60641781cbf8e74f40d2b7bb0,66a26471dc829bb60641781cbf8e74f40d2b7bb0,"Darft #2 for key collection algo: more improvements.

This commit makes the fast collection cycle time configurable, at
the same time it does not allow to run a new fast collection cycle
for the same amount of time as the max duration of the fast
collection cycle."
antirez,2013-08-05 10:05:22,https://api.github.com/repos/antirez/redis/git/commits/b09ea1bd90c96ad26f0eb109ffcd36e2e7cb21e1,b09ea1bd90c96ad26f0eb109ffcd36e2e7cb21e1,"Draft #1 of a new expired keys collection algorithm.

The main idea here is that when we are no longer to expire keys at the
rate the are created, we can't block more in the normal expire cycle as
this would result in too big latency spikes.

For this reason the commit introduces a ""fast"" expire cycle that does
not run for more than 1 millisecond but is called in the beforeSleep()
hook of the event loop, so much more often, and with a frequency bound
to the frequency of executed commnads.

The fast expire cycle is only called when the standard expiration
algorithm runs out of time, that is, consumed more than
REDIS_EXPIRELOOKUPS_TIME_PERC of CPU in a given cycle without being able
to take the number of already expired keys that are yet not collected
to a number smaller than 25% of the number of keys.

You can test this commit with different loads, but a simple way is to
use the following:

Extreme load with pipelining:

redis-benchmark -r 100000000 -n 100000000  \
        -P 32 set ele:rand:000000000000 foo ex 2

Remove the -P32 in order to avoid the pipelining for a more real-world
load.

In another terminal tab you can monitor the Redis behavior with:

redis-cli -i 0.1 -r -1 info keyspace

and

redis-cli --latency-history

Note: this commit will make Redis printing a lot of debug messages, it
is not a good idea to use it in production."
antirez,2013-07-29 15:39:19,https://api.github.com/repos/antirez/redis/git/commits/cd0ea1f20210839be4234a43716ee7200622edf1,cd0ea1f20210839be4234a43716ee7200622edf1,Test: regression test for issue #1221.
antirez,2013-07-28 10:49:07,https://api.github.com/repos/antirez/redis/git/commits/c151eb6d92ae69a8fecf14f7429d38929e0c75d0,c151eb6d92ae69a8fecf14f7429d38929e0c75d0,"Fix replicationFeedSlaves() off-by-one bug.

This fixes issue #1221."
antirez,2013-07-28 09:00:09,https://api.github.com/repos/antirez/redis/git/commits/bf56948fd0c9dfd3bf7ac63e8dc50b47a4f6e98c,bf56948fd0c9dfd3bf7ac63e8dc50b47a4f6e98c,"Remove dead variable bothsds from object.c.

Thanks to @run and @badboy for spotting this.
Triva: clang was not able to provide me a warning about that when
compiling.

This closes #1024 and #1207, committing the change myself as the pull
requests no longer apply cleanly after other changes to the same
function."
antirez,2013-07-25 08:32:19,https://api.github.com/repos/antirez/redis/git/commits/320fa02b9b48ee1c63d88db6344fc0d328e24853,320fa02b9b48ee1c63d88db6344fc0d328e24853,Use latest sds.c in the hiredis library under deps.
kaoshijuan,2013-07-25 07:36:00,https://api.github.com/repos/antirez/redis/git/commits/a0e986d7f28d79ba0d6fcf7d5a4104e5d5398916,a0e986d7f28d79ba0d6fcf7d5a4104e5d5398916,fixed initServer fail while having no IPv6 nor IPv4
kaoshijuan,2013-07-25 07:28:33,https://api.github.com/repos/antirez/redis/git/commits/cba7a4e69a9fbfadf0e0206a0a3859abf26ef0f8,cba7a4e69a9fbfadf0e0206a0a3859abf26ef0f8,fixed initServer failed if no IPV4 or no IPV6
antirez,2013-07-24 16:59:36,https://api.github.com/repos/antirez/redis/git/commits/3ccc17a4a5d00fafcbd9b385689837e94682c010,3ccc17a4a5d00fafcbd9b385689837e94682c010,Ignore sdsrange return value.
kaoshijuan,2013-07-24 13:34:55,https://api.github.com/repos/antirez/redis/git/commits/1e7cff23b34041f2be8a208841ae398091683790,1e7cff23b34041f2be8a208841ae398091683790,fixed bug issue of #1213
antirez,2013-07-24 09:21:39,https://api.github.com/repos/antirez/redis/git/commits/6ea8e0949c6cc6cd222c13f4a13d39fe8652f65e,6ea8e0949c6cc6cd222c13f4a13d39fe8652f65e,"sdsrange() does not need to return a value.

Actaully the string is modified in-place and a reallocation is never
needed, so there is no need to return the new sds string pointer as
return value of the function, that is now just ""void""."
antirez,2013-07-24 08:37:55,https://api.github.com/repos/antirez/redis/git/commits/75b760a72d916a91d86f5cf9531d95e0f524ec40,75b760a72d916a91d86f5cf9531d95e0f524ec40,Inline protocol improved to accept quoted strings.
antirez,2013-07-23 14:35:55,https://api.github.com/repos/antirez/redis/git/commits/076c2623aceadfc9247515841fa0970ce56e3081,076c2623aceadfc9247515841fa0970ce56e3081,Every function inside sds.c is now commented.
antirez,2013-07-23 09:50:17,https://api.github.com/repos/antirez/redis/git/commits/ec7f480e11e1b697c05ac40d69a6a9fca88fc439,ec7f480e11e1b697c05ac40d69a6a9fca88fc439,"getStringObjectSdsUsedMemory() function added.

Now that EMBSTR encoding exists we calculate the amount of memory used
by the SDS part of a Redis String object in two different ways:

1) For raw string object, the size of the allocation is considered.
2) For embstr objects, the length of the string itself is used.

The new function takes care of this logic."
antirez,2013-07-22 21:40:03,https://api.github.com/repos/antirez/redis/git/commits/ddccd0ed58eafaa7394965156dd0e95cf035dcae,ddccd0ed58eafaa7394965156dd0e95cf035dcae,Test: regression test for issue #1208.
antirez,2013-07-22 21:27:56,https://api.github.com/repos/antirez/redis/git/commits/dbaa5b0b9a0a68cb44f32b6fcc8d9dbf0b2fc49d,dbaa5b0b9a0a68cb44f32b6fcc8d9dbf0b2fc49d,"Fix setDeferredMultiBulkLength() c->reply_bytes handling with EMBSTR

This function missed proper handling of reply_bytes when gluing to the
previous object was used. The issue was introduced with the EMBSTR new
string object encoding.

This fixes issue #1208."
antirez,2013-07-22 09:05:55,https://api.github.com/repos/antirez/redis/git/commits/7ed7652846a0cb5f3db25e98b323ba75a31ebcb5,7ed7652846a0cb5f3db25e98b323ba75a31ebcb5,Fixed a possible bug in client->reply_bytes computation.
antirez,2013-07-22 08:36:27,https://api.github.com/repos/antirez/redis/git/commits/a31693417dba3b2ddad46386778e191daef85e21,a31693417dba3b2ddad46386778e191daef85e21,Fix replicationFeedSlaves() to use sdsEncodedObject() macro.
antirez,2012-06-05 19:50:10,https://api.github.com/repos/antirez/redis/git/commits/894eba07c8484c0f34b09d54a84e69314c37c427,894eba07c8484c0f34b09d54a84e69314c37c427,"Introduction of a new string encoding: EMBSTR

Previously two string encodings were used for string objects:

1) REDIS_ENCODING_RAW: a string object with obj->ptr pointing to an sds
stirng.

2) REDIS_ENCODING_INT: a string object where the obj->ptr void pointer
is casted to a long.

This commit introduces a experimental new encoding called
REDIS_ENCODING_EMBSTR that implements an object represented by an sds
string that is not modifiable but allocated in the same memory chunk as
the robj structure itself.

The chunk looks like the following:

+--------------+-----------+------------+--------+----+
| robj data... | robj->ptr | sds header | string | \0 |
+--------------+-----+-----+------------+--------+----+
                     |                       ^
                     +-----------------------+

The robj->ptr points to the contiguous sds string data, so the object
can be manipulated with the same functions used to manipulate plan
string objects, however we need just on malloc and one free in order to
allocate or release this kind of objects. Moreover it has better cache
locality.

This new allocation strategy should benefit both the memory usage and
the performances. A performance gain between 60 and 70% was observed
during micro-benchmarks, however there is more work to do to evaluate
the performance impact and the memory usage behavior."
antirez,2013-07-17 13:04:22,https://api.github.com/repos/antirez/redis/git/commits/b9cc90a1192a3ac2edbdac63540f889843f37284,b9cc90a1192a3ac2edbdac63540f889843f37284,"addReplyDouble(): format infinite in a libc agnostic way.

There are systems that when printing +/- infinte with printf-family
functions will not use the usual ""inf"" ""-inf"", but different strings.
Handle that explicitly.

Fixes issue #930."
antirez,2013-07-16 13:43:36,https://api.github.com/repos/antirez/redis/git/commits/f590dd82cec9e06a2bdc5bd80f643705103a3e1b,f590dd82cec9e06a2bdc5bd80f643705103a3e1b,"Fixed typo in rio.h, simgle -> single."
yoav-steinberg,2012-12-12 13:59:22,https://api.github.com/repos/antirez/redis/git/commits/63d15dfc879489ebe811064886d69a347cca544d,63d15dfc879489ebe811064886d69a347cca544d,Chunked loading of RDB to prevent redis from stalling reading very large keys.
antirez,2013-07-16 13:05:13,https://api.github.com/repos/antirez/redis/git/commits/9d520a7f70d24ea663b8de9c7178624d76a8d846,9d520a7f70d24ea663b8de9c7178624d76a8d846,"Make sure that ZADD can accept the full range of double values.

This fixes issue #1194, that contains many details.

However in short, it was possible for ZADD to not accept as score values
that was however possible to obtain with multiple calls to ZINCRBY, like
in the following example:

redis 127.0.0.1:6379> zadd k 2.5e-308 m
(integer) 1
redis 127.0.0.1:6379> zincrby k -2.4e-308 m
""9.9999999999999694e-310""
redis 127.0.0.1:6379> zscore k m
""9.9999999999999694e-310""
redis 127.0.0.1:6379> zadd k 9.9999999999999694e-310 m1
(error) ERR value is not a valid float

The problem was due to strtod() returning ERANGE in the following case
specified by POSIX:

""If the correct value would cause an underflow, a value whose magnitude
is no greater than the smallest normalized positive number in the return
type shall be returned and errno set to [ERANGE]."".

Now instead the returned value is accepted even when ERANGE is returned
as long as the return value of the function is not negative or positive
HUGE_VAL or zero."
antirez,2013-07-12 21:12:04,https://api.github.com/repos/antirez/redis/git/commits/34e20658307ae47bba4b4e14198534b361f4a642,34e20658307ae47bba4b4e14198534b361f4a642,"Merge pull request #1193 from tnm/patch-1

Make sure the log standardizes on 'timeout'"
tnm,2013-07-12 21:06:27,https://api.github.com/repos/antirez/redis/git/commits/f39a0bdb7744314c0b999c996ae43be1768877c7,f39a0bdb7744314c0b999c996ae43be1768877c7,Make sure the log standardizes on 'timeout'
antirez,2013-07-12 10:06:05,https://api.github.com/repos/antirez/redis/git/commits/123b221dc94627f9776e880956b629a8144a04a2,123b221dc94627f9776e880956b629a8144a04a2,Use the environment locale for strcoll() collation.
antirez,2013-07-12 10:02:36,https://api.github.com/repos/antirez/redis/git/commits/cf1579a798f3dbc6274b2d0b662e3254465707fb,cf1579a798f3dbc6274b2d0b662e3254465707fb,"SORT ALPHA: use collation instead of binary comparison.

Note that we only do it when STORE is not used, otherwise we want an
absolutely locale independent and binary safe sorting in order to ensure
AOF / replication consistency.

This is probably an unexpected behavior violating the least surprise
rule, but there is currently no other simple / good alternative."
antirez,2013-07-12 09:56:52,https://api.github.com/repos/antirez/redis/git/commits/81e55ec0f399d5bb2b75e5b2ffa5a62d60a31bc2,81e55ec0f399d5bb2b75e5b2ffa5a62d60a31bc2,"Fixed compareStringObject() and introduced collateStringObject().

compareStringObject was not always giving the same result when comparing
two exact strings, but encoded as integers or as sds strings, since it
switched to strcmp() when at least one of the strings were not sds
encoded.

For instance the two strings ""123"" and ""123\x00456"", where the first
string was integer encoded, would result into the old implementation of
compareStringObject() to return 0 as if the strings were equal, while
instead the second string is ""greater"" than the first in a binary
comparison.

The same compasion, but with ""123"" encoded as sds string, would instead
return a value < 0, as it is correct. It is not impossible that the
above caused some obscure bug, since the comparison was not always
deterministic, and compareStringObject() is used in the implementation
of skiplists, hash tables, and so forth.

At the same time, collateStringObject() was introduced by this commit, so
that can be used by SORT command to return sorted strings usign
collation instead of binary comparison. See next commit."
antirez,2013-07-12 08:55:09,https://api.github.com/repos/antirez/redis/git/commits/2ed64e1f7a1724ee57e92a1a502f32134ac4d99a,2ed64e1f7a1724ee57e92a1a502f32134ac4d99a,"Merge pull request #1192 from badboy/ipv6-rediscli

Wrap IPv6 in brackets in the prompt."
badboy,2013-07-11 15:47:55,https://api.github.com/repos/antirez/redis/git/commits/1b696dc07ce137c4e5bfc7c7e35e0f9b751099fc,1b696dc07ce137c4e5bfc7c7e35e0f9b751099fc,Wrap IPv6 in brackets in the prompt.
antirez,2013-07-11 14:38:30,https://api.github.com/repos/antirez/redis/git/commits/73ae8558c17a486a694f49dede5a6febed99e9e5,73ae8558c17a486a694f49dede5a6febed99e9e5,Sentinel: embed IPv6 address into [] when naming slave/sentinel instance.
antirez,2013-07-11 14:31:39,https://api.github.com/repos/antirez/redis/git/commits/3fc7f324d243c718d8076e9dcc71e0990deb8192,3fc7f324d243c718d8076e9dcc71e0990deb8192,"Sentinel: use comma as separator to publish hello messages.

We use comma to play well with IPv6 addresses, but the implementation is
still able to parse the old messages separated by colons."
antirez,2013-07-11 11:11:27,https://api.github.com/repos/antirez/redis/git/commits/4735f03c5ab4ee3518943576e2ebf8e4d463abcc,4735f03c5ab4ee3518943576e2ebf8e4d463abcc,hiredis: minimal IPv6 support.
antirez,2013-07-10 12:44:38,https://api.github.com/repos/antirez/redis/git/commits/5c5ebb0b9a70d428f982ed7aec5d5a60de605e42,5c5ebb0b9a70d428f982ed7aec5d5a60de605e42,"Sentinel: make sure published addr/id buffer is large enough.

With ipv6 support we need more space, so we account for the IP address
max size plus what we need for the Run ID, port, flags."
antirez,2013-07-10 12:37:13,https://api.github.com/repos/antirez/redis/git/commits/bd3c897e9fa86ec0e1ddd80986fc704858129897,bd3c897e9fa86ec0e1ddd80986fc704858129897,anet.c: save some vertical space.
antirez,2013-07-10 12:34:58,https://api.github.com/repos/antirez/redis/git/commits/d83dca4c79850cd8a271f534fa651b0c46666c6a,d83dca4c79850cd8a271f534fa651b0c46666c6a,"anet.c: use SO_REUSEADDR when creating listening sockets.

It used to be ok, but the socket option was removed when adding IPv6
support."
antirez,2013-07-09 14:21:21,https://api.github.com/repos/antirez/redis/git/commits/d1cbad6d1404c62d90921280f5d180bb5d67f097,d1cbad6d1404c62d90921280f5d180bb5d67f097,Use getClientPeerId() for MONITOR implementation.
antirez,2013-07-09 13:46:34,https://api.github.com/repos/antirez/redis/git/commits/d0001fe810150edbbf25e188e949d7de494c9327,d0001fe810150edbbf25e188e949d7de494c9327,getClientPeerId() refactored into two functions.
antirez,2013-07-09 13:28:30,https://api.github.com/repos/antirez/redis/git/commits/e4c019e7a8617e4fdc776611001c42683f4b25e0,e4c019e7a8617e4fdc776611001c42683f4b25e0,"getClientPeerId() now reports errors.

We now also use it in CLIENT KILL implementation."
antirez,2013-07-09 10:49:20,https://api.github.com/repos/antirez/redis/git/commits/5cdc5da990d10b211f3554afa62395f1f0a41655,5cdc5da990d10b211f3554afa62395f1f0a41655,"getClientPeerID introduced.

The function returns an unique identifier for the client, as ip:port for
IPv4 and IPv6 clients, or as path:0 for Unix socket clients.

See the top comment in the function for more info."
antirez,2013-07-09 09:32:52,https://api.github.com/repos/antirez/redis/git/commits/631d656a94bdc8e23bcfaad3e64cb8210cc03aa9,631d656a94bdc8e23bcfaad3e64cb8210cc03aa9,All IP string repr buffers are now REDIS_IP_STR_LEN bytes.
antirez,2013-07-09 08:47:17,https://api.github.com/repos/antirez/redis/git/commits/f19e267e9a422e2c791489e5d46ec16e966f55d6,f19e267e9a422e2c791489e5d46ec16e966f55d6,IPv6: bind IPv4 and IPv6 interfaces by default.
antirez,2013-07-08 14:11:52,https://api.github.com/repos/antirez/redis/git/commits/90038906f44be7adef9ac656f24f2f32889e1975,90038906f44be7adef9ac656f24f2f32889e1975,Fix old anetPeerToString() API call in replication.c
antirez,2013-07-08 14:08:43,https://api.github.com/repos/antirez/redis/git/commits/c76df730109f770793403cd9fb9b68b945c210f6,c76df730109f770793403cd9fb9b68b945c210f6,"Revert ""Document port6 and bind6 config options.""

IPv6 support is not going to use IPv6 specific options, just it will be
possible to specify all the ipv4 / ipv6 addresses of the interfaces to
bind, otherwise connections will be accepted from all the interfaces in
both IPv4 and IPv6 addresses.

This reverts commit 93570e179e96dc096b85aa0fcd5021b05208594a."
geoffgarside,2012-10-17 22:45:44,https://api.github.com/repos/antirez/redis/git/commits/e04fdf26fe929b4f80312f29ead449cf1295c17b,e04fdf26fe929b4f80312f29ead449cf1295c17b,"Add IPv6 support to sentinel.c.

This has been done by exposing the anetSockName() function anet.c
to be used when the sentinel is publishing its existence to the masters.

This implementation is very unintelligent as it will likely break if used
with IPv6 as the nested colons will break any parsing of the PUBLISH string
by the master."
geoffgarside,2012-10-17 22:26:30,https://api.github.com/repos/antirez/redis/git/commits/a68e3d4c6ae0079c7aed3f11510e50e2dcb8f7cb,a68e3d4c6ae0079c7aed3f11510e50e2dcb8f7cb,Cleanup main() and BACKTRACE mistaken pulled while rebasing.
geoffgarside,2012-06-07 18:01:51,https://api.github.com/repos/antirez/redis/git/commits/1ca4008d149af10a3a388e949299c680a03540ac,1ca4008d149af10a3a388e949299c680a03540ac,Fix calls to anetPeerToString() missing buffer size.
geoffgarside,2011-09-19 22:41:39,https://api.github.com/repos/antirez/redis/git/commits/93570e179e96dc096b85aa0fcd5021b05208594a,93570e179e96dc096b85aa0fcd5021b05208594a,"Document port6 and bind6 config options.

Add commented port6 and bind6 options to default redis.conf file."
geoffgarside,2011-09-19 22:32:41,https://api.github.com/repos/antirez/redis/git/commits/56df82719879cdec95507d0f06365156310c09a7,56df82719879cdec95507d0f06365156310c09a7,"Add anetTcp6Server() function.

Refactor the common code from anetTcpServer into internal function which
can be used by both anetTcpServer and anetTcp6Server."
geoffgarside,2011-09-19 22:31:41,https://api.github.com/repos/antirez/redis/git/commits/72a39226178d49a7574f805190ba2fb190a0ca2e,72a39226178d49a7574f805190ba2fb190a0ca2e,"Add static anetV6Only() function.

This function sets the IPV6_V6ONLY option to 1 to use separate stack
IPv6 sockets."
geoffgarside,2011-06-18 18:54:05,https://api.github.com/repos/antirez/redis/git/commits/62a3b7e3d9229870d550ef5c93bf17a81c67172e,62a3b7e3d9229870d550ef5c93bf17a81c67172e,"Change anetTcpGenericConnect to use AF_UNSPEC.

This allows anetTcpGenericConnect to try to connect to AF_INET6
addresses in addition to any resolved AF_INET addresses."
geoffgarside,2011-06-18 18:43:47,https://api.github.com/repos/antirez/redis/git/commits/ca78446c55a09e9e871d55f8421da35016b7bda1,ca78446c55a09e9e871d55f8421da35016b7bda1,"Mark places that might want changing for IPv6.

Any places which I feel might want to be updated to work differently
with IPv6 have been marked with a comment starting ""IPV6:"".

Currently the only comments address places where an IP address is
combined with a port using the standard : separated form. These may want
to be changed when printing IPv6 addresses to wrap the address in []
such as

	[2001:db8::c0:ffee]:6379

instead of

	2001:db8::c0:ffee:6379

as the latter format is a technically valid IPv6 address and it is hard
to distinguish the IPv6 address component from the port unless you know
the port is supposed to be there."
geoffgarside,2011-06-18 18:37:45,https://api.github.com/repos/antirez/redis/git/commits/96b02dc0556417800b566ae105d55ee5b23b9a95,96b02dc0556417800b566ae105d55ee5b23b9a95,"Expand ip char buffers which are too small for v6.

Increase the size of character buffers being used to store printable IP
addresses so that they can safely store IPv6 addresses."
geoffgarside,2011-06-18 18:34:16,https://api.github.com/repos/antirez/redis/git/commits/f7d9a92d4e57e7a7960e2f0c0e1f5efc3ed102cc,f7d9a92d4e57e7a7960e2f0c0e1f5efc3ed102cc,"Mark ip string buffers which could be reduced.

In two places buffers have been created with a size of 128 bytes which
could be reduced to INET6_ADDRSTRLEN to still hold a full IP address.
These places have been marked as they are presently big enough to handle
the needs of storing a printable IPv6 address."
geoffgarside,2011-06-18 18:21:43,https://api.github.com/repos/antirez/redis/git/commits/e6bf4c2676cf4e81dea57200310187329d96db49,e6bf4c2676cf4e81dea57200310187329d96db49,"Update clusterCommand to handle AF_INET6 addresses

Changes the sockaddr_in to a sockaddr_storage. Attempts to convert the
IP address into an AF_INET or AF_INET6 before returning an ""Invalid IP
address"" error. Handles converting the sockaddr from either AF_INET or
AF_INET6 back into a string for storage in the clusterNode ip field."
geoffgarside,2011-06-18 18:19:10,https://api.github.com/repos/antirez/redis/git/commits/5be83eecacb8b4a23e1822e81f77d765afbdb7b1,5be83eecacb8b4a23e1822e81f77d765afbdb7b1,"Update node2IpString to handle AF_INET6 addresses.

Change the sockaddr_in to sockaddr_storage which is capable of storing
both AF_INET and AF_INET6 sockets. Uses the sockaddr_storage ss_family
to correctly return the printable IP address and port.

Function makes the assumption that the buffer is of at least
REDIS_CLUSTER_IPLEN bytes in size."
geoffgarside,2011-06-18 18:17:22,https://api.github.com/repos/antirez/redis/git/commits/6181455ac614356fcc13a09e532d5ee65857c528,6181455ac614356fcc13a09e532d5ee65857c528,"Update REDIS_CLUSTER_IPLEN to INET6_ADDRSTRLEN.

Change REDIS_CLUSTER_IPLEN to INET6_ADDRSTRLEN so that the clusterNode
ip character buffer is big enough to hold an IPv6 address."
geoffgarside,2011-06-18 15:20:08,https://api.github.com/repos/antirez/redis/git/commits/23f4d905ceb35aaa84a5d851842f6ab98f25d8a6,23f4d905ceb35aaa84a5d851842f6ab98f25d8a6,"Update anetPeerToString to handle AF_INET6 addrs.

Change the sockaddr_in to sockaddr_storage which is capable of storing
both AF_INET and AF_INET6 sockets. Uses the sockaddr_storage ss_family
to correctly return the printable IP address and port."
geoffgarside,2011-06-18 13:47:38,https://api.github.com/repos/antirez/redis/git/commits/fa723d98d6d4a76a8c64fdc4324f2a25cd4c104b,fa723d98d6d4a76a8c64fdc4324f2a25cd4c104b,"Update anetTcpAccept to handle AF_INET6 addresses.

Change the sockaddr_in to sockaddr_storage which is capable of storing
both AF_INET and AF_INET6 sockets. Uses the sockaddr_storage ss_family
to correctly return the printable IP address and port."
geoffgarside,2011-06-18 12:25:31,https://api.github.com/repos/antirez/redis/git/commits/e7b34e8dc3569b5e1065013e46357b5085967cbe,e7b34e8dc3569b5e1065013e46357b5085967cbe,"Update anetResolve to resolve AF_INET6 as well.

Change the getaddrinfo(3) hints family from AF_INET to AF_UNSPEC to
allow resolution of IPv6 addresses as well as IPv4 addresses. The
function will return the IP address of whichever address family is
preferenced by the operating system. Most current operating systems
will preference AF_INET6 over AF_INET.

Unfortunately without attempting to establish a connection to the
remote address we can't know if the host is capable of using the
returned IP address. It might be desirable to have anetResolve
accept an additional argument specifying the AF_INET/AF_INET6 address
the caller would like to receive. Currently though it does not appear
as though the anetResolve function is ever used within Redis."
geoffgarside,2012-10-17 21:32:48,https://api.github.com/repos/antirez/redis/git/commits/2345cee33572cc5485f0b8ea190c1d8cb226bc3f,2345cee33572cc5485f0b8ea190c1d8cb226bc3f,Update calls to anetResolve to include buffer size
geoffgarside,2012-10-17 21:32:21,https://api.github.com/repos/antirez/redis/git/commits/ee5a6df101ae27f2209ae358d2b5e0e0ada1cb36,ee5a6df101ae27f2209ae358d2b5e0e0ada1cb36,Update calls to anetPeerToString to include ip_len.
geoffgarside,2011-09-19 23:00:14,https://api.github.com/repos/antirez/redis/git/commits/b39e827d22cbec5752a2a70d7b350f2215c385e2,b39e827d22cbec5752a2a70d7b350f2215c385e2,"Add missing includes for getpeername.

getpeername(2) requires <sys/socket.h> which on some systems also
requires <sys/types.h>. Include both to avoid compilation warnings."
geoffgarside,2011-06-18 18:06:26,https://api.github.com/repos/antirez/redis/git/commits/9cfa02fe734cce966385169427511e8d282fb5a7,9cfa02fe734cce966385169427511e8d282fb5a7,"Add macro to define clusterNode.ip buffer size.

Add REDIS_CLUSTER_IPLEN macro to define the size of the clusterNode ip
character array. Additionally use this macro in inet_ntop(3) calls where
the size of the array was being defined manually.

The REDIS_CLUSTER_IPLEN is defined as INET_ADDRSTRLEN which defines the
correct size of a buffer to store an IPv4 address in. The
INET_ADDRSTRLEN macro itself is defined in the <netinet/in.h> header
file and should be portable across the majority of systems."
geoffgarside,2011-06-18 17:59:07,https://api.github.com/repos/antirez/redis/git/commits/6e894f02cf305ac0e86413e96f51b03571fdbebf,6e894f02cf305ac0e86413e96f51b03571fdbebf,"Fix cluster.c inet_ntop use of sizeof(n->ip).

Using sizeof with an array will only return expected results if the
array is created in the scope of the function where sizeof is used. This
commit changes the inet_ntop calls so that they use the fixed buffer
value as defined in redis.h which is 16."
geoffgarside,2011-06-17 19:37:45,https://api.github.com/repos/antirez/redis/git/commits/693b640510cb8e09b69e42205ec87a104fa79b57,693b640510cb8e09b69e42205ec87a104fa79b57,"Use inet_pton(3) in clusterCommand.

Replace inet_aton(3) call with the more future proof inet_pton(3)
function which is capable of handling additional address families."
geoffgarside,2011-06-17 19:35:56,https://api.github.com/repos/antirez/redis/git/commits/a6ea707cec9d31a3e30594f1a0b3ae8c8597602a,a6ea707cec9d31a3e30594f1a0b3ae8c8597602a,"Use inet_ntop(3) in nodeIp2String & clusterCommand

Replace inet_ntoa(3) calls with the more future proof inet_ntop(3)
function which is capable of handling additional address families."
geoffgarside,2011-06-17 18:54:17,https://api.github.com/repos/antirez/redis/git/commits/f5494a427e448502713c3d5a8990b37c1b1e096a,f5494a427e448502713c3d5a8990b37c1b1e096a,"Update anetTcpAccept & anetPeerToString calls.

Add the additional ip buffer length argument to function calls of
anetTcpAccept and anetPeerToString in network.c and cluster.c"
geoffgarside,2011-06-17 18:47:49,https://api.github.com/repos/antirez/redis/git/commits/ef839f9006ad1d6a05bed69f58bdf7d4af7f2901,ef839f9006ad1d6a05bed69f58bdf7d4af7f2901,"Use inet_ntop(3) in anet. #apichange

Replace inet_ntoa(3) calls with the more future proof inet_ntop(3)
function which is capable of handling additional address families.

API Change: anetTcpAccept() & anetPeerToString() additional argument
  additional argument required to specify the length of the character
  buffer the IP address is written to in order to comply with
  inet_ntop(3) function semantics."
geoffgarside,2011-06-17 00:49:21,https://api.github.com/repos/antirez/redis/git/commits/e0cb24351cb2ebbfdda5d1b4bdc2e83ca14c09a2,e0cb24351cb2ebbfdda5d1b4bdc2e83ca14c09a2,"Use getaddrinfo(3) in a anetTcpServer.

Change anetTcpServer() function to use getaddrinfo(3) to perform
address resolution, socket creation and binding. Resolved addresses
are limited to those reachable by the AF_INET address family."
geoffgarside,2011-06-17 00:06:19,https://api.github.com/repos/antirez/redis/git/commits/0e01ce1b13c4e0a974dc4009dc78811a234f0244,0e01ce1b13c4e0a974dc4009dc78811a234f0244,"Use getaddrinfo(3) in anetTcpGenericConnect.

Change anetTcpGenericConnect() function to use getaddrinfo(3) to
perform address resolution, socket creation and connection. Resolved
addresses are limited to those reachable by the AF_INET family."
geoffgarside,2011-06-16 23:55:00,https://api.github.com/repos/antirez/redis/git/commits/580b7dce9b1d7adac1d0bfe33e5023f8fbf91158,580b7dce9b1d7adac1d0bfe33e5023f8fbf91158,"Add anetSetReuseAddr(err, fd) static function.

Extract setting SO_REUSEADDR socket option into separate function
so the same code can be more easily used by anetCreateSocket and
other functions."
geoffgarside,2011-06-16 23:29:49,https://api.github.com/repos/antirez/redis/git/commits/071963c8555451116abf288382ecd1057393a6ae,071963c8555451116abf288382ecd1057393a6ae,"Use getaddrinfo(3) in anetResolve. #apichange

Change anetResolve() function to use getaddrinfo(3) to resolve hostnames.
Resolved hostnames are limited to those reachable by the AF_INET address
family.

API Change: anetResolve requires additional argument.
  additional argument required to specify the length of the character
  buffer the IP address is written to in order to comply with
  inet_ntop(3) function semantics. inet_ntop(3) replaces inet_ntoa(3)
  as it has been designed to be compatible with more address families."
antirez,2013-07-08 08:42:16,https://api.github.com/repos/antirez/redis/git/commits/64b3b9b1d48527f2b16b44be983a9b8735c15273,64b3b9b1d48527f2b16b44be983a9b8735c15273,Example redis.conf: bind to multiple interfaces documented.
antirez,2013-07-05 09:47:20,https://api.github.com/repos/antirez/redis/git/commits/98eecb70ebd215d4bc5a9a6917cd9ef04f9e01cf,98eecb70ebd215d4bc5a9a6917cd9ef04f9e01cf,Binding multiple IPs done properly with multiple sockets.
antirez,2013-07-05 09:08:44,https://api.github.com/repos/antirez/redis/git/commits/2160effc78463d6602082302486beb51eb6a999d,2160effc78463d6602082302486beb51eb6a999d,"Revert ""Cluster: use new anet.c listening socket creation API.""

This reverts commit 016ac38a216d1b701991a451e637ca584f804f93."
antirez,2013-07-05 09:07:55,https://api.github.com/repos/antirez/redis/git/commits/c978b864f74a86dcffc54d66873f7eae6c2c7121,c978b864f74a86dcffc54d66873f7eae6c2c7121,"Revert ""anet.c: Allow creation of TCP listening sockets bound to N addresses.""

Bind() can't be called multiple times against the same socket, multiple
sockets are required to bind multiple interfaces, silly me.

This reverts commit bd234d62bbfe9feb735fd6d1cdb8f5ce811f54b4."
antirez,2013-07-04 16:50:15,https://api.github.com/repos/antirez/redis/git/commits/90b0d66cce97aaac3a6437ac77b5dad9064136d1,90b0d66cce97aaac3a6437ac77b5dad9064136d1,Ability to bind multiple addresses.
antirez,2013-07-04 16:49:49,https://api.github.com/repos/antirez/redis/git/commits/016ac38a216d1b701991a451e637ca584f804f93,016ac38a216d1b701991a451e637ca584f804f93,Cluster: use new anet.c listening socket creation API.
antirez,2013-07-04 16:48:46,https://api.github.com/repos/antirez/redis/git/commits/bd234d62bbfe9feb735fd6d1cdb8f5ce811f54b4,bd234d62bbfe9feb735fd6d1cdb8f5ce811f54b4,anet.c: Allow creation of TCP listening sockets bound to N addresses.
antirez,2013-07-04 16:30:59,https://api.github.com/repos/antirez/redis/git/commits/585b0a61ce0cc7ddf136c1c4e462a0d4ad2a8fc7,585b0a61ce0cc7ddf136c1c4e462a0d4ad2a8fc7,sds.c: new function sdsjoin() to join strings.
antirez,2013-07-03 10:18:55,https://api.github.com/repos/antirez/redis/git/commits/1135e9faa253789a6d6e67fd6a44d7395af8fb35,1135e9faa253789a6d6e67fd6a44d7395af8fb35,"redis-cli: introduced --pipe-timeout.

When in --pipe mode, after all the data transfer to the server is
complete, now redis-cli waits at max the specified amount of
seconds (30 by default, use 0 to wait forever) without receiving any
reply at all from the server. After this time limit the operation is
aborted with an error.

That's related to issue #681."
antirez,2013-07-03 09:59:44,https://api.github.com/repos/antirez/redis/git/commits/fbb97c6b13308df876f277117b74b58f4a717e4f,fbb97c6b13308df876f277117b74b58f4a717e4f,"redis-cli --pipe: send final ECHO in a safer way.

If the protocol read from stdin happened to contain grabage (invalid
random chars), in the previous implementation it was possible to end
with something like:

dksfjdksjflskfjl*2\r\n$4\r\nECHO....

That is invalid as the *2 should start into a new line. Now we prefix
the ECHO with a CRLF that has no effects on the server but prevents this
issues most of the times.

Of course if the offending wrong sequence is something like:

$3248772349\r\n

No one is going to save us as Redis will wait for data in the context of
a big argument, so this fix does not cover all the cases.

This partially fixes issue #681."
antirez,2013-07-02 15:44:42,https://api.github.com/repos/antirez/redis/git/commits/7e63167d27d8dc9ceb96bd595e010115285c4b89,7e63167d27d8dc9ceb96bd595e010115285c4b89,"pqsort.c: remove the ""switch to insertion sort"" optimization.

It causes catastrophic performance for certain inputs.

Relevant NetBSD commit:

http://cvsweb.netbsd.org/bsdweb.cgi/src/lib/libc/stdlib/qsort.c?rev=1.20&content-type=text/x-cvsweb-markup&only_with_tag=MAIN

This fixes issue #968."
antirez,2013-07-02 10:18:18,https://api.github.com/repos/antirez/redis/git/commits/7d626d49753672147792070bf290d8ff470b14cf,7d626d49753672147792070bf290d8ff470b14cf,"Merge pull request #776 from charsyam/ziplist-bug

fix randstring bug in ziplist.c"
antirez,2013-07-02 10:14:28,https://api.github.com/repos/antirez/redis/git/commits/1b10522a08284d563b2876e9deb827dbc6697742,1b10522a08284d563b2876e9deb827dbc6697742,"Only allow basenames for dbfilename and appendfilename.

This fixes issue #1094."
antirez,2013-07-02 10:08:07,https://api.github.com/repos/antirez/redis/git/commits/6978aeb3bf2c44bdfe2422847a52f22d61ed034b,6978aeb3bf2c44bdfe2422847a52f22d61ed034b,"pathIsBaseName() added to utils.c

The function is used to test that the specified string looks like just
as the basename of a path, without any absolute or relative path."
antirez,2013-07-02 09:56:52,https://api.github.com/repos/antirez/redis/git/commits/0781ad68991171360becfc472c492861ba119c01,0781ad68991171360becfc472c492861ba119c01,getAbsolutePath() moved into utils.c
antirez,2013-06-28 15:08:03,https://api.github.com/repos/antirez/redis/git/commits/de9a221749b10af3a408385056bb51255ca860f6,de9a221749b10af3a408385056bb51255ca860f6,CONFIG SET maxclients.
antirez,2013-06-28 14:39:49,https://api.github.com/repos/antirez/redis/git/commits/8e2d082066e5b9892ead6cd30e8d3852d02fbc04,8e2d082066e5b9892ead6cd30e8d3852d02fbc04,ae.c event loop: API to resize the fd set size on the run.
antirez,2013-06-27 10:14:23,https://api.github.com/repos/antirez/redis/git/commits/3130670b978e0d4baa805016386e5ca56af08123,3130670b978e0d4baa805016386e5ca56af08123,Allow SHUTDOWN in loading state.
antirez,2013-06-26 13:19:06,https://api.github.com/repos/antirez/redis/git/commits/13585dd677ab3401a395858e86cd2dbc626a211b,13585dd677ab3401a395858e86cd2dbc626a211b,function renamed: popcount_binary -> redisPopcount.
antirez,2013-06-26 13:17:02,https://api.github.com/repos/antirez/redis/git/commits/bae60ede1d60687f1240258c9298d3515b24b091,bae60ede1d60687f1240258c9298d3515b24b091,"Merge pull request #1111 from yamt/netbsd3

netbsd support"
antirez,2013-06-26 08:11:20,https://api.github.com/repos/antirez/redis/git/commits/8ca265cdb728799ecec27c2bb5e0d2092a62aa03,8ca265cdb728799ecec27c2bb5e0d2092a62aa03,"Don't disconnect pre PSYNC replication clients for timeout.

Clients using SYNC to replicate are older implementations, such as
redis-cli --slave, and are not designed to acknowledge the master with
REPLCONF ACK commands, so we don't have any feedback and should not
disconnect them on timeout."
antirez,2013-06-25 13:49:07,https://api.github.com/repos/antirez/redis/git/commits/d5f1e4b0b5845b31b147569f1086d4375c32a919,d5f1e4b0b5845b31b147569f1086d4375c32a919,Test: add some AOF testing to EVALSHA replication test.
antirez,2013-06-25 13:36:48,https://api.github.com/repos/antirez/redis/git/commits/73d7955c6f53edf7597303bbdc605c84ba7a5954,73d7955c6f53edf7597303bbdc605c84ba7a5954,Flush the replication script cache after SCRIPT FLUSH.
antirez,2013-06-25 13:35:48,https://api.github.com/repos/antirez/redis/git/commits/882e36366f64ba34d02a95191e54baed6a0ef040,882e36366f64ba34d02a95191e54baed6a0ef040,Test: EVALSHA replication.
antirez,2013-06-25 13:32:37,https://api.github.com/repos/antirez/redis/git/commits/d1f2d0733c8b893811938c60bf110a2a7e19f208,d1f2d0733c8b893811938c60bf110a2a7e19f208,Test: randomInt() behavior commented.
antirez,2013-06-25 13:13:14,https://api.github.com/repos/antirez/redis/git/commits/7e5be50cbf8a03d3bd2e45d72f0e6b1d7c31bf06,7e5be50cbf8a03d3bd2e45d72f0e6b1d7c31bf06,Test: replication-3 test speedup in master-slave setup.
antirez,2013-06-25 10:49:56,https://api.github.com/repos/antirez/redis/git/commits/fb67468813a4bbb8f43ee739e54f3f0c8658dd56,fb67468813a4bbb8f43ee739e54f3f0c8658dd56,Force propagation of SCRIPT LOAD to AOF.
antirez,2013-06-25 08:56:59,https://api.github.com/repos/antirez/redis/git/commits/e27b13606927b28437cea8be625624335a38f05b,e27b13606927b28437cea8be625624335a38f05b,SCRIPT FLUSH comment minor pedantic improvement.
antirez,2013-06-24 17:27:49,https://api.github.com/repos/antirez/redis/git/commits/82ea1c6f5d05cb016e1eb85c54fa5105be2ac0b6,82ea1c6f5d05cb016e1eb85c54fa5105be2ac0b6,"Move Replication Script Cache initialization in safer place.

It should be called just one time at startup and not every time the Lua
scripting engine is re-initialized, otherwise memory is leaked."
antirez,2013-06-24 16:57:31,https://api.github.com/repos/antirez/redis/git/commits/f0bf5fd8c779d70a853de7b5eb165c6b3d863f69,f0bf5fd8c779d70a853de7b5eb165c6b3d863f69,"Use the RSC to replicate EVALSHA unmodified.

This commit uses the Replication Script Cache in order to avoid
translating EVALSHA into EVAL whenever possible for both the AOF and
slaves."
antirez,2013-06-24 08:26:04,https://api.github.com/repos/antirez/redis/git/commits/94ec7db47067ce8644e800b669ced032095747f3,94ec7db47067ce8644e800b669ced032095747f3,"Replication of scripts as EVALSHA: sha1 caching implemented.

This code is only responsible to take an LRU-evicted fixed length cache
of SHA1 that we are sure all the slaves received.

In this commit only the implementation is provided, but the Redis core
does not use it to actually send EVALSHA to slaves when possible."
antirez,2013-06-21 10:07:53,https://api.github.com/repos/antirez/redis/git/commits/515a26bbc157ca76d6e2441dd21fbac32e37bbd6,515a26bbc157ca76d6e2441dd21fbac32e37bbd6,"New API to force propagation.

The old REDIS_CMD_FORCE_REPLICATION flag was removed from the
implementation of Redis, now there is a new API to force specific
executions of a command to be propagated to AOF / Replication link:

    void forceCommandPropagation(int flags);

The new API is also compatible with Lua scripting, so a script that will
execute commands that are forced to be propagated, will also be
propagated itself accordingly even if no change to data is operated.

As a side effect, this new design fixes the issue with scripts not able
to propagate PUBLISH to slaves (issue #873)."
antirez,2013-06-20 14:56:31,https://api.github.com/repos/antirez/redis/git/commits/b0c2cdd6a788e736ef7b24d2a7e96e174f76365b,b0c2cdd6a788e736ef7b24d2a7e96e174f76365b,"Merge pull request #1167 from badboy/patch-1

Initialize char* to NULL to remove compiler warning"
badboy,2013-06-20 14:53:35,https://api.github.com/repos/antirez/redis/git/commits/5ac7ca9c946e0f30442414112068dbe1a70e0265,5ac7ca9c946e0f30442414112068dbe1a70e0265,Initialize char* to NULL to remove compiler warning
antirez,2013-06-20 13:34:56,https://api.github.com/repos/antirez/redis/git/commits/519c9e11d195336240ec586c61a640250a1a11ef,519c9e11d195336240ec586c61a640250a1a11ef,"Allow PUBSUB NUMSUB without channels.

The result is an empty list but it is handy to call it programmatically."
antirez,2013-06-20 13:32:00,https://api.github.com/repos/antirez/redis/git/commits/455563faec4b904c8ee9a1a16eac2a5bae532dc7,455563faec4b904c8ee9a1a16eac2a5bae532dc7,"PUBSUB command implemented.

Currently it implements three subcommands:

PUBSUB CHANNELS [<pattern>]    List channels with non-zero subscribers.
PUBSUB NUMSUB [channel_1 ...]  List number of subscribers for channels.
PUBSUB NUMPAT                  Return number of subscribed patterns."
antirez,2013-06-20 08:21:38,https://api.github.com/repos/antirez/redis/git/commits/4c0f8c4e5aecaf7176122b3e9671caa090ad4f87,4c0f8c4e5aecaf7176122b3e9671caa090ad4f87,"Sentinel: parse new INFO replication output correctly.

Sentinel was not able to detect slaves when connected to a very recent
version of Redis master since a previos non-backward compatible change
to INFO broken the parsing of the slaves ip:port INFO output.

This fixes issue #1164"
antirez,2013-06-19 16:53:07,https://api.github.com/repos/antirez/redis/git/commits/b02bb47e67858bcac25c3d2e4f726e5aa164c9f6,b02bb47e67858bcac25c3d2e4f726e5aa164c9f6,Test: regression test for #1163.
antirez,2013-06-19 16:31:33,https://api.github.com/repos/antirez/redis/git/commits/f8ba3b566890f994aec4d0fb1a14d4a8851955e1,f8ba3b566890f994aec4d0fb1a14d4a8851955e1,Fix comment typo in integration/aof.tcl.
antirez,2013-06-19 16:25:03,https://api.github.com/repos/antirez/redis/git/commits/d363299af33fefb8753c44ed554f313d0203b803,d363299af33fefb8753c44ed554f313d0203b803,"Allow writes from scripts called by AOF loading in read-only slaves.

This fixes issue #1163"
antirez,2013-06-19 12:44:40,https://api.github.com/repos/antirez/redis/git/commits/338cd4835dd163c5f54f63db59e41ea1ebbc900f,338cd4835dd163c5f54f63db59e41ea1ebbc900f,"Fix logStackTrace() when logging to stdout.

When the semantics changed from logfile = NULL to logfile = """" to log
into standard output, no proper change was made to logStackTrace() to
make it able to work with the new setup.

This commit fixes the issue."
antirez,2013-06-18 17:30:56,https://api.github.com/repos/antirez/redis/git/commits/9c2c878e45a7bed90154c682b3e3ce915b372aba,9c2c878e45a7bed90154c682b3e3ce915b372aba,"Lua script errors format more unified.

lua_pcall error handler now formats errors in a way more similar to
luaPushError() so that errors generated in different contexts look alike."
antirez,2013-06-18 15:33:35,https://api.github.com/repos/antirez/redis/git/commits/51adc6e1bcc2ef43f668ba156f65213068117553,51adc6e1bcc2ef43f668ba156f65213068117553,"Lua scripting: improve error reporting.

When calling Lua scripts we try to report not just the error but
information about the code line causing the error."
antirez,2013-06-17 10:14:31,https://api.github.com/repos/antirez/redis/git/commits/b96ba52cfabc97496cf9485394ab5cec5d2162c0,b96ba52cfabc97496cf9485394ab5cec5d2162c0,"Merge pull request #1124 from ioddly/fix-issue-1121

Try to report source of bad Lua API calls"
antirez,2013-06-17 10:08:14,https://api.github.com/repos/antirez/redis/git/commits/82d782d3b56b19f4969b045b3195ea6853290d1e,82d782d3b56b19f4969b045b3195ea6853290d1e,"Merge pull request #819 from Keruspe/unstable

test-server: only listen to 127.0.0.1"
Keruspe,2012-12-10 17:21:10,https://api.github.com/repos/antirez/redis/git/commits/edd7eb9b7d4d8c8a7dbdf7b847c3e0025796e2d7,edd7eb9b7d4d8c8a7dbdf7b847c3e0025796e2d7,"test-server: only listen to 127.0.0.1

Signed-off-by: Marc-Antoine Perennou <Marc-Antoine@Perennou.com>"
antirez,2013-06-12 17:50:07,https://api.github.com/repos/antirez/redis/git/commits/dfc98dccf45c639cff45e84bb78a5a2d41a214bb,dfc98dccf45c639cff45e84bb78a5a2d41a214bb,Cluster: detect nodes address change.
antirez,2013-06-11 19:33:00,https://api.github.com/repos/antirez/redis/git/commits/d427373f0186aa23596ac9b9e9ad92c3dad32f8b,d427373f0186aa23596ac9b9e9ad92c3dad32f8b,clusterProcessPacket() comments improved for correctness.
antirez,2013-06-04 13:53:53,https://api.github.com/repos/antirez/redis/git/commits/cf71b82111e8e099b2667fc0126fe9624a1f69f7,cf71b82111e8e099b2667fc0126fe9624a1f69f7,Binary safe dump of object content in redisLogObjectDebugInfo().
antirez,2013-05-31 17:31:36,https://api.github.com/repos/antirez/redis/git/commits/b6a2878aa536c476264bf8903a6ac9daef9cfd1a,b6a2878aa536c476264bf8903a6ac9daef9cfd1a,"CONFIG SET: accept slave-priority zero, it is valid."
antirez,2013-05-31 09:43:23,https://api.github.com/repos/antirez/redis/git/commits/ca35de1d1f876c167af311e5d275f287c2c5b45e,ca35de1d1f876c167af311e5d275f287c2c5b45e,Test: avoid a false positive in min-slaves test.
antirez,2013-05-30 16:54:28,https://api.github.com/repos/antirez/redis/git/commits/434a86dbd879e7feeea6c939899565717bf9d913,434a86dbd879e7feeea6c939899565717bf9d913,Tests added for min-slaves feature.
antirez,2013-05-30 10:23:28,https://api.github.com/repos/antirez/redis/git/commits/915c06a96ca7d96818321da5e0a8201c11bbac22,915c06a96ca7d96818321da5e0a8201c11bbac22,"Refresh good slaves count after CONFIG SET min-slaves-...

This way just after the CONFIG SET enabling the min-slaves feature it is
possible to write to the database without delays."
antirez,2013-05-30 10:18:31,https://api.github.com/repos/antirez/redis/git/commits/88441bf18f554b965eaf83cfce5eeaeff35c3ed4,88441bf18f554b965eaf83cfce5eeaeff35c3ed4,"New INFO field ""min_slaves_good_slaves"".

When min-slaves-to-write feature is active, this field reports the
number of slaves considered good (online state, lag within the specified
range)."
antirez,2013-05-30 10:13:25,https://api.github.com/repos/antirez/redis/git/commits/1a54d5963e8c50ed90dbcc72b55e01d91589ea2f,1a54d5963e8c50ed90dbcc72b55e01d91589ea2f,Refresh good slaves count when setting slave state as online.
antirez,2013-05-30 09:43:43,https://api.github.com/repos/antirez/redis/git/commits/d64d2e21c93df54a7b39bcb7a46e34824edff75d,d64d2e21c93df54a7b39bcb7a46e34824edff75d,Make tests compatible with new INFO replication output.
antirez,2013-05-29 09:45:40,https://api.github.com/repos/antirez/redis/git/commits/2ec7875cbf649a52c2e82e10810fac3fe1ba7fb2,2ec7875cbf649a52c2e82e10810fac3fe1ba7fb2,"min-replicas-to-write: only deny write commands.

I guess I needed another coffee..."
antirez,2013-05-29 09:36:44,https://api.github.com/repos/antirez/redis/git/commits/ed599d3aca723d46984871131610f623f09cf0cd,ed599d3aca723d46984871131610f623f09cf0cd,"min-slaves-to-write: don't accept writes with less than N replicas.

This feature allows the user to specify the minimum number of
connected replicas having a lag less or equal than the specified
amount of seconds for writes to be accepted."
antirez,2013-05-28 14:48:21,https://api.github.com/repos/antirez/redis/git/commits/cbdb2153c5f6d5b7543ae4ebd22a9b3ce5379ef2,cbdb2153c5f6d5b7543ae4ebd22a9b3ce5379ef2,min-slaves-to-write: initial description of the feature in redis.conf
antirez,2013-05-29 17:56:33,https://api.github.com/repos/antirez/redis/git/commits/888400ebd57c85682edc147bb0f666af29c76d5b,888400ebd57c85682edc147bb0f666af29c76d5b,repl_offset field in INFO replication is now just offset.
antirez,2013-05-29 17:52:54,https://api.github.com/repos/antirez/redis/git/commits/37c29e037b08159e901227f0184973442bb86c2d,37c29e037b08159e901227f0184973442bb86c2d,"Slaves list in INFO output: lag added, format changed.

There is a new 'lag' information in the list of slaves, in the
""replication"" section of the INFO output.

Also the format was changed in a backward incompatible way in order to
make it more easy to parse if new fields are added in the future, as the
new format is comma separated but has named fields (no longer positional
fields)."
antirez,2013-05-28 13:23:42,https://api.github.com/repos/antirez/redis/git/commits/091ed386f7557cd8feeead6cfa8ac851dba1306b,091ed386f7557cd8feeead6cfa8ac851dba1306b,Accept REPLCONF in any state.
antirez,2013-05-27 17:33:03,https://api.github.com/repos/antirez/redis/git/commits/a864cae2a55e708e094a879c604841a9d396a07c,a864cae2a55e708e094a879c604841a9d396a07c,A comment about BLPOP timeout did not reflected actual behavior.
antirez,2013-05-27 09:44:04,https://api.github.com/repos/antirez/redis/git/commits/1909b8753d246e55aee7c76dd974d2c49321998e,1909b8753d246e55aee7c76dd974d2c49321998e,Version bumped to 2.9.11
antirez,2013-05-27 09:24:05,https://api.github.com/repos/antirez/redis/git/commits/c9b55a29d644d6703c00daa0da31c0eec8143dfc,c9b55a29d644d6703c00daa0da31c0eec8143dfc,redis.conf updated: repl-timeout now uesd by masters as well.
antirez,2013-05-27 09:17:17,https://api.github.com/repos/antirez/redis/git/commits/3c82c85fcfb7e80b6177a080f5d4be64c1506245,3c82c85fcfb7e80b6177a080f5d4be64c1506245,"Close connection with timedout slaves.

Now masters, using the time at which the last REPLCONF ACK was received,
are able to explicitly disconnect slaves that are no longer responding.

Previously the only chance was to see a very long output buffer, that
was highly suboptimal."
antirez,2013-05-27 08:45:37,https://api.github.com/repos/antirez/redis/git/commits/e06a560466e53b3a8a8e2b2fa232635ef962b1db,e06a560466e53b3a8a8e2b2fa232635ef962b1db,"Send ACK to master once every second.

ACKs can be also used as a base for synchronous replication. However in
that case they'll be explicitly requested by the master when the client
sends a request that needs to be replicated synchronously."
antirez,2013-05-27 08:41:53,https://api.github.com/repos/antirez/redis/git/commits/efd87031d06aadada48a6f04fbb031d2155bb2c4,efd87031d06aadada48a6f04fbb031d2155bb2c4,"Don't ACK the master after every command.

Sending an ACK is now moved into the replicationSendAck() function."
antirez,2013-05-24 23:22:27,https://api.github.com/repos/antirez/redis/git/commits/dd0adbb777f37b38bc647c15837ba53ed9edc9d4,dd0adbb777f37b38bc647c15837ba53ed9edc9d4,Make sure that REPLCONF ACK really has no return value.
antirez,2013-05-24 22:54:00,https://api.github.com/repos/antirez/redis/git/commits/0292c5f7aeae7f43e1116a8e668bd00f3357c53b,0292c5f7aeae7f43e1116a8e668bd00f3357c53b,Replication: send REPLCONF ACK to master.
antirez,2013-05-24 22:37:56,https://api.github.com/repos/antirez/redis/git/commits/6b4635f4f5fe296f07325a2b61a0706b8fc91f8c,6b4635f4f5fe296f07325a2b61a0706b8fc91f8c,"REPLCONF ACK command.

This special command is used by the slave to inform the master the
amount of replication stream it currently consumed.

it does not return anything so that we not need to consume additional
bandwidth needed by the master to reply something.

The master can do a number of things knowing the amount of stream
processed, such as understanding the ""lag"" in bytes of the slave, verify
if a given command was already processed by the slave, and so forth."
antirez,2013-05-24 23:00:07,https://api.github.com/repos/antirez/redis/git/commits/a950f48906a7699314d2f1c3e2dee522a29e97fb,a950f48906a7699314d2f1c3e2dee522a29e97fb,Fixed a bug in no queueing replies to master.
antirez,2013-05-24 16:58:57,https://api.github.com/repos/antirez/redis/git/commits/dd937030f02f4c3100b05fa0a9d40257b52f1eb0,dd937030f02f4c3100b05fa0a9d40257b52f1eb0,"Replication: don't even queue replies to master commands.

When master send commands, there is no need for the slave to reply.
Redis used to queue the reply in the output buffer and discard the reply
later, this is a waste of work and it is not clear why it was this way
(I sincerely don't remember).

This commit changes it in order to don't queue the reply at all.

All tests passing."
antirez,2013-05-24 16:41:43,https://api.github.com/repos/antirez/redis/git/commits/c853239a5e803f413163ee4080a6a7667c0eb446,c853239a5e803f413163ee4080a6a7667c0eb446,"Top comment for prepareClientToWrite() clarified.

We don't write the output buffer to the client socket for slaves only if
the slave is not online."
upvalue,2013-05-22 23:17:58,https://api.github.com/repos/antirez/redis/git/commits/c3229c33b1cd6cf21180c9a44ddd67a5ecd39503,c3229c33b1cd6cf21180c9a44ddd67a5ecd39503,Try to report source of bad Lua API calls
antirez,2013-05-18 14:21:52,https://api.github.com/repos/antirez/redis/git/commits/5d0f408d429d4ef0eedcff66bba1464ff0e5a01a,5d0f408d429d4ef0eedcff66bba1464ff0e5a01a,"Don't stop reading redis.conf if line has no args.

Should be ""continue"" and was ""return"".

This fixes issue #1110"
yamt,2012-10-28 04:33:04,https://api.github.com/repos/antirez/redis/git/commits/9fcead7a5967f31cc391fbed25c256406247b638,9fcead7a5967f31cc391fbed25c256406247b638,"don't assume time_t == long

time_t is always 64bit on recent versions of NetBSD."
yamt,2012-07-19 12:37:34,https://api.github.com/repos/antirez/redis/git/commits/ae828676649f05feb113078fa166c78dd0ad0266,ae828676649f05feb113078fa166c78dd0ad0266,"use nanosleep instead of usleep

SUSv3 says that:
	The useconds argument shall be less than one million. If the value of
	useconds is 0, then the call has no effect.
and actually NetBSD's implementation rejects such a value with EINVAL.
use nanosleep which has no such a limitation instead."
yamt,2012-07-19 12:28:11,https://api.github.com/repos/antirez/redis/git/commits/b2dd0849ce7f229ea5eb9fb88a112b7ad2c31642,b2dd0849ce7f229ea5eb9fb88a112b7ad2c31642,"rename popcount to popcount_binary to avoid a conflict with NetBSD libc

NetBSD-current's libc has a function named popcount.
hiding these extensions using feature macros is not possible because
redis uses other extensions covered by the same feature macro.
eg. inet_aton"
yamt,2012-07-19 12:25:30,https://api.github.com/repos/antirez/redis/git/commits/0a20ad40de3395eb5e71b163e1bd4119ab099709,0a20ad40de3395eb5e71b163e1bd4119ab099709,"don't define _XOPEN_SOURCE for NetBSD

on NetBSD, defining _XOPEN_SOURCE hides extensions
like inet_aton, strcasecmp, etc."
antirez,2013-05-15 09:58:21,https://api.github.com/repos/antirez/redis/git/commits/92f18d04a04918651825e34caa7372c6790aff7e,92f18d04a04918651825e34caa7372c6790aff7e,Merge branch 'config-rewrite' into unstable
antirez,2013-05-15 09:55:14,https://api.github.com/repos/antirez/redis/git/commits/78167807beab6f34967a7310a93211a1efbbcff9,78167807beab6f34967a7310a93211a1efbbcff9,Use memtoll() when parsing the backlog-size option.
antirez,2013-05-15 09:39:29,https://api.github.com/repos/antirez/redis/git/commits/25f2be6267f0a0a91154f44099653a2d561d8df7,25f2be6267f0a0a91154f44099653a2d561d8df7,CONFIG REWRITE: backlog size is a bytes option.
antirez,2013-05-15 09:38:43,https://api.github.com/repos/antirez/redis/git/commits/cd48e4fc4022b8110111e621654781fee08b88c3,cd48e4fc4022b8110111e621654781fee08b88c3,CONFIG REWRITE: bindaddr -> bind.
antirez,2013-05-15 09:33:02,https://api.github.com/repos/antirez/redis/git/commits/8a44e6c4905b4cf59ffca92d80ff4b9560850e49,8a44e6c4905b4cf59ffca92d80ff4b9560850e49,"CONFIG REWRITE: when rewriting amount of bytes use GB, MB, KB if possible."
antirez,2013-05-15 09:15:18,https://api.github.com/repos/antirez/redis/git/commits/c590e18d15bed4dc576c86bc4b10eed2b0997e15,c590e18d15bed4dc576c86bc4b10eed2b0997e15,CONFIG REWRITE: correctly escape the notify-keyspace-events option.
antirez,2013-05-15 09:09:19,https://api.github.com/repos/antirez/redis/git/commits/328843849f070c5cbdf154b7a96da6dcd317bdd6,328843849f070c5cbdf154b7a96da6dcd317bdd6,"CONFIG REWRITE: ""active-rehashing"" -> ""activerehashing""."
antirez,2013-05-15 09:06:56,https://api.github.com/repos/antirez/redis/git/commits/402a0f1ca0c317cf1ba374c633984c7fefb07be1,402a0f1ca0c317cf1ba374c633984c7fefb07be1,CONFIG REWRITE: fixed typo in AOF fsync policy.
antirez,2013-05-15 09:04:53,https://api.github.com/repos/antirez/redis/git/commits/72e980231c9595bde6b14a810b2380fdba805681,72e980231c9595bde6b14a810b2380fdba805681,CONFIG REWRITE: repl-disable-tcp-nodelay is a boolean option.
antirez,2013-05-15 08:14:36,https://api.github.com/repos/antirez/redis/git/commits/86a6aad98424434a4d0ed80f3a8db059608a8b14,86a6aad98424434a4d0ed80f3a8db059608a8b14,"Test default config modified to set logfile to empty string.

Required because of recent changes in the way logfile is set to standard
output."
antirez,2013-05-15 08:12:29,https://api.github.com/repos/antirez/redis/git/commits/310dbba01cf694a13d077a5156be756bba5eac8b,310dbba01cf694a13d077a5156be756bba5eac8b,"Added a define for most configuration defaults.

Also the logfile option was modified to always have an explicit value
and to log to stdout when an empty string is used as log file.

Previously there was special handling of the string ""stdout"" that set
the logfile to NULL, this always required some special handling."
antirez,2013-05-14 10:45:04,https://api.github.com/repos/antirez/redis/git/commits/9e74d216e1385dd7d45880b14c12100599e38cfb,9e74d216e1385dd7d45880b14c12100599e38cfb,CONFIG REWRITE: Use sane perms when creating redis.conf from scratch.
antirez,2013-05-14 10:32:25,https://api.github.com/repos/antirez/redis/git/commits/e252045454bfa90cd5c9d937e249821969c7425f,e252045454bfa90cd5c9d937e249821969c7425f,"CONFIG REWRITE: actually rewrite the config file, atomically."
antirez,2013-05-14 09:22:50,https://api.github.com/repos/antirez/redis/git/commits/25e049cc6859d154ece478246f7e6703b4e57cdb,25e049cc6859d154ece478246f7e6703b4e57cdb,redis-cli: help.h updated.
antirez,2013-05-14 09:17:18,https://api.github.com/repos/antirez/redis/git/commits/78f94d90eb5b750c3aa38a17ee390bfa4238e91c,78f94d90eb5b750c3aa38a17ee390bfa4238e91c,CONFIG REWRITE: remove orphaned lines.
antirez,2013-05-14 08:22:55,https://api.github.com/repos/antirez/redis/git/commits/ee721f1e5c703dd5a674239e17384be66a9fd544,ee721f1e5c703dd5a674239e17384be66a9fd544,CONFIG REWRITE: strip multiple empty lines.
antirez,2013-05-13 16:34:18,https://api.github.com/repos/antirez/redis/git/commits/c184f36d21cae47a4b9b4484b657d2e58fdc4f58,c184f36d21cae47a4b9b4484b657d2e58fdc4f58,CONFIG REWRITE: support for client-output-buffer-limit.
antirez,2013-05-13 09:26:43,https://api.github.com/repos/antirez/redis/git/commits/d95592b11689130382d7bf71aedf8963cc7f7431,d95592b11689130382d7bf71aedf8963cc7f7431,CONFIG REWRITE: support for dir and slaveof.
antirez,2013-05-13 09:11:35,https://api.github.com/repos/antirez/redis/git/commits/2bc31e55eedf24b7ecac0172c47006e79231dcde,2bc31e55eedf24b7ecac0172c47006e79231dcde,CONFIG REWRITE: support for save and syslog-facility.
antirez,2013-05-09 22:15:18,https://api.github.com/repos/antirez/redis/git/commits/7e049fafd38a602b9689f4311183c3968a3fa182,7e049fafd38a602b9689f4311183c3968a3fa182,CONFIG REWRITE: Initial support code and design.
antirez,2013-05-09 14:57:59,https://api.github.com/repos/antirez/redis/git/commits/5947f170f91f1985eb316a9fd59c9ca8f2ea73f9,5947f170f91f1985eb316a9fd59c9ca8f2ea73f9,"Obtain absoute path of configuration file, expose it in INFO."
antirez,2013-05-09 10:52:04,https://api.github.com/repos/antirez/redis/git/commits/e938575220c1b925dcdc608f46dc24e42aa6b2ed,e938575220c1b925dcdc608f46dc24e42aa6b2ed,Test: more PSYNC tests (backlog TTL).
antirez,2013-05-08 13:24:40,https://api.github.com/repos/antirez/redis/git/commits/a7486a659291d946de652d22c8730d8046198ebe,a7486a659291d946de652d22c8730d8046198ebe,Version bumped to 2.9.10
antirez,2013-05-08 11:01:42,https://api.github.com/repos/antirez/redis/git/commits/16f2c3ea144384e7713e9e10b48da129f9b67d1e,16f2c3ea144384e7713e9e10b48da129f9b67d1e,"Test: check that replication partial sync works if we break the link.

The test checks both successful syncs and unsuccessful ones by changing
the backlog size."
antirez,2013-05-08 09:58:26,https://api.github.com/repos/antirez/redis/git/commits/c87dd0fe494fc258f941c43c6843c4ed11b95c00,c87dd0fe494fc258f941c43c6843c4ed11b95c00,"Test: various issues with the replication-4.tcl test fixed.

The test actually worked, but vars for master and slave were inverted
and sometimes used incorrectly."
antirez,2013-05-08 07:59:51,https://api.github.com/repos/antirez/redis/git/commits/0ae1b5b0a197154167a895f1188f1822a78732e4,0ae1b5b0a197154167a895f1188f1822a78732e4,"Revert ""use long long instead of size_t make it more safe""

This reverts commit 2c75f2cf1aa0d9cc8256517bd6f3d8a82088ee1a.

After further analysis, it is very unlikely that we'll raise the
string size limit to > 512MB, and at the same time such big strings
will be used in 32 bit systems.

Better to revert to size_t so that 32 bit processors will not be
forced to use a 64 bit counter in normal operations, that is currently
completely useless."
antirez,2013-05-08 07:49:33,https://api.github.com/repos/antirez/redis/git/commits/c1ae7d2377d716bec7d064fff71ea37a66293f48,c1ae7d2377d716bec7d064fff71ea37a66293f48,"Merge pull request #1093 from july2993/unstable

in 32bit machine, popcount don't work with a input string length up to 5..."
antirez,2013-05-08 07:48:38,https://api.github.com/repos/antirez/redis/git/commits/5885a34b671ed873f529dd9798d2b0904e3f5428,5885a34b671ed873f529dd9798d2b0904e3f5428,Added more info about 32 bit builds into README.
july2993,2013-05-07 15:37:22,https://api.github.com/repos/antirez/redis/git/commits/2c75f2cf1aa0d9cc8256517bd6f3d8a82088ee1a,2c75f2cf1aa0d9cc8256517bd6f3d8a82088ee1a,use long long instead of size_t make it more safe
july2993,2013-05-07 11:55:57,https://api.github.com/repos/antirez/redis/git/commits/e3ed78d43ba1329b9f736d3141b1e90ef071d5fa,e3ed78d43ba1329b9f736d3141b1e90ef071d5fa,"in 32bit machine, popcount don't work with a input string length up to 512 MB,
bitcount commant may return negtive integer with string length more than 256 MB"
antirez,2013-05-03 10:37:45,https://api.github.com/repos/antirez/redis/git/commits/5c9f6d4f55c321aa22a4a51f9046f762fbb1655d,5c9f6d4f55c321aa22a4a51f9046f762fbb1655d,"Cluster: link reconnection on delayed PONG reply.

When the PONG delay is half the cluster node timeout, the link gets
disconnected (and later automatically reconnected) in order to ensure
that it's not just a dead connection issue.

However this operation is only performed if the link is old enough, in
order to avoid to disconnect the same link again and again (and among
the other problems, never receive the PONG because of that).

Note: when the link is reconnected, the 'ping_sent' field is not updated
even if a new ping is sent using the new connection, so we can still
reliably detect a node ping timeout."
antirez,2013-04-11 17:12:29,https://api.github.com/repos/antirez/redis/git/commits/1315b9f2463b59b8dae440e62657be91363e29c7,1315b9f2463b59b8dae440e62657be91363e29c7,Cluster: restore PING sent time on reconnections.
antirez,2013-04-11 16:55:58,https://api.github.com/repos/antirez/redis/git/commits/ae71731019317e171781300f67b81e9857551dc2,ae71731019317e171781300f67b81e9857551dc2,Cluster: PING/PONG handling redesigned.
antirez,2013-04-11 16:19:48,https://api.github.com/repos/antirez/redis/git/commits/a120560f700a1cd59bcd52568e113c03e2da31a3,a120560f700a1cd59bcd52568e113c03e2da31a3,"Cluster: process config from PING packets as we do for PONG.

Also clusterBroadcastPing() was renamed into clusterBroadcastPong()
that's what the function is actually doing."
antirez,2013-04-11 15:02:39,https://api.github.com/repos/antirez/redis/git/commits/8a51c067adf56996644a4fadab10d9ce4f05b370,8a51c067adf56996644a4fadab10d9ce4f05b370,Cluster: createClusterLink() comment fixed for grammar.
antirez,2013-05-02 15:20:49,https://api.github.com/repos/antirez/redis/git/commits/0d9c1f536bd26244f94add211138568135ed623a,0d9c1f536bd26244f94add211138568135ed623a,"CONFIG SET server.masterauth aesthetic change.

This is just to make the code exactly like the above instance used for
requirepass. No actual change nor the original code violated the Redis
coding style."
soveran,2013-04-25 14:06:10,https://api.github.com/repos/antirez/redis/git/commits/649b304e0f01d59e9ee3eb6fb522e1cc9c8e1940,649b304e0f01d59e9ee3eb6fb522e1cc9c8e1940,Reset masterauth if an empty string is configured.
charsyam,2013-04-30 03:07:58,https://api.github.com/repos/antirez/redis/git/commits/9cd06e4406377254c4d788299d11e4a040c200d6,9cd06e4406377254c4d788299d11e4a040c200d6,"Fix AOF bug: expire could be removed from key on AOF rewrite.

There was a race condition in the AOF rewrite code that, with bad enough
timing, could cause a volatile key just about to expire to be turned
into a non-volatile key. The bug was never reported to cause actualy
issues, but was found analytically by an user in the Redis mailing list:

https://groups.google.com/forum/?fromgroups=#!topic/redis-db/Kvh2FAGK4Uk

This commit fixes issue #1079."
antirez,2013-04-30 10:24:46,https://api.github.com/repos/antirez/redis/git/commits/e5ef85c4441b8cdfdbd39dc2626376311f36e4ec,e5ef85c4441b8cdfdbd39dc2626376311f36e4ec,"Sentinel: changes to tilt mode.

Tilt mode was too aggressive (not processing INFO output), this
resulted in a few problems:

1) Redirections were not followed when in tilt mode. This opened a
   window to misinform clients about the current master when a Sentinel
   was in tilt mode and a fail over happened during the time it was not
   able to update the state.

2) It was possible for a Sentinel exiting tilt mode to detect a false
   fail over start, if a slave rebooted with a wrong configuration
   about at the same time. This used to happen since in tilt mode we
   lose the information that the runid changed (reboot).

   Now instead the Sentinel in tilt mode will still remove the instance
   from the list of slaves if it changes state AND runid at the same
   time.

Both are edge conditions but the changes should overall improve the
reliability of Sentinel."
antirez,2013-04-30 13:08:22,https://api.github.com/repos/antirez/redis/git/commits/ef05a78e7ee8dd179022157d09072d92ae966c55,ef05a78e7ee8dd179022157d09072d92ae966c55,Sentinel: more sensible delay in master demote after tilt.
antirez,2013-04-29 10:00:54,https://api.github.com/repos/antirez/redis/git/commits/214adc50512b6410e2aab1c93e8401ac67afaf90,214adc50512b6410e2aab1c93e8401ac67afaf90,Lua updated to version 5.1.5.
antirez,2013-04-26 09:11:21,https://api.github.com/repos/antirez/redis/git/commits/48ede0d84d43cc40addaa7de5e88daafe717abba,48ede0d84d43cc40addaa7de5e88daafe717abba,"Sentinel: only demote old master into slave under certain conditions.

We used to always turn a master into a slave if the DEMOTE flag was set,
as this was a resurrecting master instance.

However the following race condition is possible for a Sentinel that
got partitioned or internal issues (tilt mode), and was not able to
refresh the state in the meantime:

1) Sentinel X is running, master is instance ""A"".
3) ""A"" fails, sentinels will promote slave ""B"" as master.
2) Sentinel X goes down because of a network partition.
4) ""A"" returns available, Sentinels will demote it as a slave.
5) ""B"" fails, other Sentinels will promote slave ""A"" as master.
6) At this point Sentinel X comes back.

When ""X"" comes back he thinks that:

""B"" is the master.
""A"" is the slave to demote.

We want to avoid that Sentinel ""X"" will demote ""A"" into a slave.
We also want that Sentinel ""X"" will detect that the conditions changed
and will reconfigure itself to monitor the right master.

There are two main ways for the Sentinel to reconfigure itself after
this event:

1) If ""B"" is reachable and already configured as a slave by other
sentinels, ""X"" will perform a redirection to ""A"".
2) If there are not the conditions to demote ""A"", the fact that ""A""
reports to be a master will trigger a failover detection in ""X"", that
will end into a reconfiguraiton to monitor ""A"".

However if the Sentinel was not reachable, its state may not be updated,
so in case it titled, or was partiitoned from the master instance of the
slave to demote, the new implementation waits some time (enough to
guarantee we can detect the new INFO, and new DOWN conditions).

If after some time still there are not the right condiitons to demote
the instance, the DEMOTE flag is cleared."
antirez,2013-04-24 09:30:17,https://api.github.com/repos/antirez/redis/git/commits/1965e22aa1daf2321579dc0e2d14ac7e0cf31dbe,1965e22aa1daf2321579dc0e2d14ac7e0cf31dbe,"Sentinel: always redirect on master->slave transition.

Sentinel redirected to the master if the instance changed runid or it
was the first time we got INFO, and a role change was detected from
master to slave.

While this is a good idea in case of slave->master, since otherwise we
could detect a failover without good reasons just after a reboot with a
slave with a wrong configuration, in the case of master->slave
transition is much better to always perform the redirection for the
following reasons:

1) A Sentinel may go down for some time. When it is back online there is
no other way to understand there was a failover.
2) Pointing clients to a slave seems to be always the wrong thing to do.
3) There is no good rationale about handling things differently once an
instance is rebooted (runid change) in that case."
antirez,2013-04-24 08:57:07,https://api.github.com/repos/antirez/redis/git/commits/d264122f6af7082755efa624e36ad199851d1c7f,d264122f6af7082755efa624e36ad199851d1c7f,Config option to turn AOF rewrite incremental fsync on/off.
antirez,2013-04-03 16:55:38,https://api.github.com/repos/antirez/redis/git/commits/336d722fbaa6beb3ef65a7a7df8bbda73dcc9fe9,336d722fbaa6beb3ef65a7a7df8bbda73dcc9fe9,"AOF: sync data on disk every 32MB when rewriting.

This prevents the kernel from putting too much stuff in the output
buffers, doing too heavy I/O all at once. So the goal of this commit is
to split the disk pressure due to the AOF rewrite process into smaller
spikes.

Please see issue #1019 for more information."
antirez,2013-04-03 13:31:40,https://api.github.com/repos/antirez/redis/git/commits/91f4213ddf489be1ecba99ed7c40716a8f9852a7,91f4213ddf489be1ecba99ed7c40716a8f9852a7,rio.c: added ability to fdatasync() from time to time while writing.
antirez,2013-04-23 12:08:42,https://api.github.com/repos/antirez/redis/git/commits/c4656119b6d64f0777c9a3113b1908ac581fecf5,c4656119b6d64f0777c9a3113b1908ac581fecf5,"Test: fix RDB test checking file permissions.

When the test is executed using the root account, setting the permission
to 222 does not work as expected, as root can read files with 222
permission.

Now we skip the test if root is detected.

This fixes issue #1034 and the duplicated #1040 issue.

Thanks to Jan-Erik Rediger (@badboy on Github) for finding a way to reproduce the issue."
antirez,2013-04-22 09:25:44,https://api.github.com/repos/antirez/redis/git/commits/4ed2581a9284de0c77ccf31857cdbe27733428c4,4ed2581a9284de0c77ccf31857cdbe27733428c4,Test: split conceptually unrelated comments in RDB test.
antirez,2013-04-19 14:34:07,https://api.github.com/repos/antirez/redis/git/commits/8e222c888fd115eb1cdfbb98d5bb2b625be23afb,8e222c888fd115eb1cdfbb98d5bb2b625be23afb,Sentinel: turn old master into a slave when it comes back.
antirez,2013-04-19 13:11:34,https://api.github.com/repos/antirez/redis/git/commits/9d823fc2221a289ba20a599ea50e318084fb2dd5,9d823fc2221a289ba20a599ea50e318084fb2dd5,More explicit panic message on out of memory.
xiaost,2013-04-19 04:42:22,https://api.github.com/repos/antirez/redis/git/commits/ecdbaf4695e55a59e5f9425e7c603507b2017f49,ecdbaf4695e55a59e5f9425e7c603507b2017f49,"Cluster: fix clusterNode.name print format on debug message.

It was %40s instead of %.40s, and since the string is not null
terminated it caused random garbage to be displayed, and possibly a
crash."
antirez,2013-04-18 14:21:32,https://api.github.com/repos/antirez/redis/git/commits/d04afd62d69306361fd4dfe9fee8ac99c16dee72,d04afd62d69306361fd4dfe9fee8ac99c16dee72,"Redis/Jemalloc Gitignore were too aggressive.

Redis gitignore was too aggressive since simply broken.

Jemalloc gitignore was too agressive because it is conceived to just
keep the files that allow to generate all the rest in development
environments (so for instance the ""configure"" file is excluded)."
antirez,2013-04-11 11:15:20,https://api.github.com/repos/antirez/redis/git/commits/f8ae70cf7c514c14ca3d2b4d82d959b717d257af,f8ae70cf7c514c14ca3d2b4d82d959b717d257af,"redis-cli: raise error on bad command line switch.

Previously redis-cli never tried to raise an error when an unrecognized
switch was encountered, as everything after the initial options is to be
transmitted to the server.

However this is too liberal, as there are no commands starting with ""-"".
So the new behavior is to produce an error if there is an unrecognized
switch starting with ""-"". This should not break past redis-cli usages
but should prevent broken options to be silently discarded.

As far the first token not starting with ""-"" is encountered, all the
rest is considered to be part of the command, so you cna still use
strings starting with ""-"" as values, like in:

    redis-cli --port 6380 set foo --my-value"
antirez,2013-04-11 11:11:41,https://api.github.com/repos/antirez/redis/git/commits/0280c2f25250536192d5a71f49c170cd5708ab7e,0280c2f25250536192d5a71f49c170cd5708ab7e,redis-cli: --latency-history mode implemented.
antirez,2013-04-09 10:13:26,https://api.github.com/repos/antirez/redis/git/commits/b84570dece33e43a08be87d1e05c79095aa56d8a,b84570dece33e43a08be87d1e05c79095aa56d8a,Cluster: reconfigure additonal slaves on failover.
antirez,2013-04-09 09:29:51,https://api.github.com/repos/antirez/redis/git/commits/d1aee359c08b6fcac31a76a2e4a9b9bef81d2947,d1aee359c08b6fcac31a76a2e4a9b9bef81d2947,Cluster: CONFIG SET cluster-node-timeout.
antirez,2013-04-09 09:24:18,https://api.github.com/repos/antirez/redis/git/commits/68cf249f81045371c6fd5a04e1e860eab9d2c935,68cf249f81045371c6fd5a04e1e860eab9d2c935,"Cluster: use server.cluster_node_timeout directly.

We used to copy this value into the server.cluster structure, however this
was not necessary.

The reason why we don't directly use server.cluster->node_timeout is
that things that can be configured via redis.conf need to be directly
available in the server structure as server.cluster is allocated later
only if needed in order to reduce the memory footprint of non-cluster
instances."
antirez,2013-04-09 09:07:25,https://api.github.com/repos/antirez/redis/git/commits/ef4f25ff6ec9749549b009b515a272ebd0710707,ef4f25ff6ec9749549b009b515a272ebd0710707,Cluster: configdigest field no longer used. Removed.
antirez,2013-04-08 17:40:20,https://api.github.com/repos/antirez/redis/git/commits/f09b2508f42fcaa14b0fb36a013747611ee2159d,f09b2508f42fcaa14b0fb36a013747611ee2159d,"Cluster: properly send ping to nodes not pinged foro too much time.

In commit d728ec6 it was introduced the concept of sending a ping to
every node not receiving a ping since node_timeout/2 seconds.
However the code was located in a place that was not executed because of
a previous conditional causing the loop to re-iterate.

This caused false positives in nodes availability detection.

The current code is still not perfect as a node may be detected to be in
PFAIL state even if it does not reply for just node_timeout/2 seconds
that is not correct. There is a plan to improve this code ASAP."
antirez,2013-04-04 12:30:05,https://api.github.com/repos/antirez/redis/git/commits/ace86cfaefa5f182535b748803cc8d8a3eb96794,ace86cfaefa5f182535b748803cc8d8a3eb96794,Test: remove useless statements and comments from test default config.
antirez,2013-04-04 12:23:34,https://api.github.com/repos/antirez/redis/git/commits/d5b383477ef805281de8888b0ad0ddb648df1afc,d5b383477ef805281de8888b0ad0ddb648df1afc,Cluster: move REDIS_CLUSTER_FAILOVER_DELAY near other timing defines.
antirez,2013-04-04 12:21:01,https://api.github.com/repos/antirez/redis/git/commits/3cc6e7d01da2d95c45cead068a85df079a269948,3cc6e7d01da2d95c45cead068a85df079a269948,Cluster: CONFIG GET cluster-node-timeout.
antirez,2013-04-04 10:29:10,https://api.github.com/repos/antirez/redis/git/commits/05fa4f403460d8121de05dfc0d377dbcbd3ab264,05fa4f403460d8121de05dfc0d377dbcbd3ab264,Cluster: node timeout is now configurable.
antirez,2013-04-04 10:02:48,https://api.github.com/repos/antirez/redis/git/commits/00bab23c4188bea8bfed9b232fc2c771d9734276,00bab23c4188bea8bfed9b232fc2c771d9734276,"Cluster: turn hardcoded node timeout multiplicators into defines.

Most Redis Cluster time limits are expressed in terms of the configured
node timeout. Turn them into defines."
antirez,2013-04-03 10:41:14,https://api.github.com/repos/antirez/redis/git/commits/8419397665432f7933dfe244938147e6dc4174eb,8419397665432f7933dfe244938147e6dc4174eb,Make rio.c comment 80-columns friendly.
antirez,2013-04-02 12:05:50,https://api.github.com/repos/antirez/redis/git/commits/b237de33d1462e81ac30277033fe2bdffe994784,b237de33d1462e81ac30277033fe2bdffe994784,"Throttle BGSAVE attempt on saving error.

When a BGSAVE fails, Redis used to flood itself trying to BGSAVE at
every next cron call, that is either 10 or 100 times per second
depending on configuration and server version.

This commit does not allow a new automatic BGSAVE attempt to be
performed before a few seconds delay (currently 5).

This avoids both the auto-flood problem and filling the disk with
logs at a serious rate.

The five seconds limit, considering a log entry of 200 bytes, will use
less than 4 MB of disk space per day that is reasonable, the sysadmin
should notice before of catastrofic events especially since by default
Redis will stop serving write queries after the first failed BGSAVE.

This fixes issue #849"
antirez,2013-04-02 09:55:23,https://api.github.com/repos/antirez/redis/git/commits/b14fda7deb8a1f66f1f388fdf12b904cd6315822,b14fda7deb8a1f66f1f388fdf12b904cd6315822,Version bumped to 2.9.9.
antirez,2013-04-02 09:24:52,https://api.github.com/repos/antirez/redis/git/commits/63457d1a5d366b89405e057960d4d8d985cbdbba,63457d1a5d366b89405e057960d4d8d985cbdbba,"Merge pull request #1017 from jbergstroem/build-improvements

Build improvements"
charsyam,2013-03-28 21:41:46,https://api.github.com/repos/antirez/redis/git/commits/86d87e355483314fdaa620e35c2804fe888f4094,86d87e355483314fdaa620e35c2804fe888f4094,Support for case unsensitive SET options.
antirez,2013-03-28 15:25:17,https://api.github.com/repos/antirez/redis/git/commits/dfc31a1ee8d89c962616e30c0f51fe90a81a7407,dfc31a1ee8d89c962616e30c0f51fe90a81a7407,Test: Extended SET tests.
antirez,2013-03-28 14:40:19,https://api.github.com/repos/antirez/redis/git/commits/30d5d416e6022b7ffdf72926a631d216a448e579,30d5d416e6022b7ffdf72926a631d216a448e579,Extended SET command implemented (issue #931).
antirez,2013-03-28 11:45:07,https://api.github.com/repos/antirez/redis/git/commits/140260409eef36dd4d155e488eb9531cf119728e,140260409eef36dd4d155e488eb9531cf119728e,EXPIRE should not resurrect keys. Issue #1026.
antirez,2013-03-28 10:46:14,https://api.github.com/repos/antirez/redis/git/commits/601cea665d63bb7b5e335ce922dc4c01905e04e7,601cea665d63bb7b5e335ce922dc4c01905e04e7,Test: regression test for issue #1026.
antirez,2013-03-28 10:39:02,https://api.github.com/repos/antirez/redis/git/commits/3816e7bda90422283884a1e738701e526ca7fdd3,3816e7bda90422283884a1e738701e526ca7fdd3,Better DEBUG error message when num of arguments is wrong.
antirez,2013-03-28 10:36:49,https://api.github.com/repos/antirez/redis/git/commits/1b13adf38875fe4a25be4e51ea59fd82a437509d,1b13adf38875fe4a25be4e51ea59fd82a437509d,Test: verify that lazy-expire works.
antirez,2013-03-27 16:55:02,https://api.github.com/repos/antirez/redis/git/commits/32a83c8206a501f300e971f46cb6cd469731e74f,32a83c8206a501f300e971f46cb6cd469731e74f,"DEBUG set-active-expire added.

We need the ability to disable the activeExpireCycle() (active
expired key collection) call for testing purposes."
antirez,2013-03-27 10:31:27,https://api.github.com/repos/antirez/redis/git/commits/252cf3052dedbfd7a74d076898762e8ad0f265a0,252cf3052dedbfd7a74d076898762e8ad0f265a0,Test: test replication of MULTI/EXEC.
antirez,2013-03-27 10:30:23,https://api.github.com/repos/antirez/redis/git/commits/40b692e82275ae5a17b23c2ddd74b9b2edd69c25,40b692e82275ae5a17b23c2ddd74b9b2edd69c25,Test: Restore DB back to 9 after testing MULTI/EXEC with DB 5.
antirez,2013-03-27 10:29:47,https://api.github.com/repos/antirez/redis/git/commits/7572dc47da38f5527472935f1f7289fab9c0703f,7572dc47da38f5527472935f1f7289fab9c0703f,Test: new functions to capture and analyze the replication stream.
antirez,2013-03-26 17:16:03,https://api.github.com/repos/antirez/redis/git/commits/4fa30b781ea31a9f0d3d509438190ed5cea8b981,4fa30b781ea31a9f0d3d509438190ed5cea8b981,"redis-trib: ClusterNode #info_string output modified.

The hope is that the new one is more readable."
antirez,2013-03-26 12:51:17,https://api.github.com/repos/antirez/redis/git/commits/df69155e8a75b433217487d2806bd854cde2f6f7,df69155e8a75b433217487d2806bd854cde2f6f7,"Allow SELECT while loading the DB.

Fixes issue #1024."
antirez,2013-03-26 10:42:14,https://api.github.com/repos/antirez/redis/git/commits/873f328fd84aea9b3b7ac0ae9621383ec84e0eb3,873f328fd84aea9b3b7ac0ae9621383ec84e0eb3,"TTL / PTTL commands: two bugs fixed.

This commit fixes two corner cases for the TTL command.

1) When the key was already logically expired (expire time older
than current time) the command returned -1 instead of -2.

2) When the key was existing and the expire was found to be exactly 0
(the key was just about to expire), the command reported -1 (that is, no
expire) instead of a TTL of zero (that is, about to expire)."
antirez,2013-03-26 10:09:22,https://api.github.com/repos/antirez/redis/git/commits/8bb5eb7357e089564838dbb75ca709f33697b618,8bb5eb7357e089564838dbb75ca709f33697b618,Flag PUBLISH as read-only in the command table.
antirez,2013-03-26 09:58:10,https://api.github.com/repos/antirez/redis/git/commits/71f3e7431700f55b88582301d5b36b52b37a0740,71f3e7431700f55b88582301d5b36b52b37a0740,"Transactions: propagate MULTI/EXEC only when needed.

MULTI/EXEC is now propagated to the AOF / Slaves only once we encounter
the first command that is not a read-only one inside the transaction.

The old behavior was to always propagate an empty MULTI/EXEC block when
the transaction was composed just of read only commands, or even
completely empty. This created two problems:

1) It's a bandwidth waste in the replication link and a space waste
   inside the AOF file.

2) We used to always increment server.dirty to force the propagation of
   the EXEC command, resulting into triggering RDB saves more often
   than needed.

Note: even read-only commands may also trigger writes that will be
propagated, when we access a key that is found expired and Redis will
synthesize a DEL operation. However there is no need for this to stay
inside the transaction itself, but only to be ordered.

So for instance something like:

    MULTI
    GET foo
    SET key zap
    EXEC

May be propagated into:

    DEL foo
    MULTI
    SET key zap
    EXEC

While the DEL is outside the transaction, the commands are delivered in
the right order and it is not possible for other commands to be inserted
between DEL and MULTI."
antirez,2013-03-26 09:48:15,https://api.github.com/repos/antirez/redis/git/commits/02c269e27e846b904db80636d321686fa11695d4,02c269e27e846b904db80636d321686fa11695d4,Transactions: use discardTransaction() in EXEC implementation.
antirez,2013-03-26 09:27:45,https://api.github.com/repos/antirez/redis/git/commits/2f49734029bb94c74466e13f517a480cdcf548df,2f49734029bb94c74466e13f517a480cdcf548df,"Transactions: use the propagate() API to propagate MULTI.

The behavior is the same, but the code is now cleaner and uses the
proper interface instead of dealing directly with AOF/replication
functions."
antirez,2013-03-25 18:30:59,https://api.github.com/repos/antirez/redis/git/commits/afce0106391213721775d6c0888dba26db7793fa,afce0106391213721775d6c0888dba26db7793fa,"Merge pull request #1003 from NanXiao/patch-3

Update config.c"
antirez,2013-03-25 14:01:25,https://api.github.com/repos/antirez/redis/git/commits/c39e34d007491dbb5be8f6c1fe48934c6aaebf49,c39e34d007491dbb5be8f6c1fe48934c6aaebf49,"Cluster: when slave changes master, remove it from the old master."
antirez,2013-03-25 12:14:17,https://api.github.com/repos/antirez/redis/git/commits/70091a2f633f9ed1231d4f013ffc17253c9a68f7,70091a2f633f9ed1231d4f013ffc17253c9a68f7,redis-trib: wait cluster join after cluster creation.
antirez,2013-03-25 12:03:01,https://api.github.com/repos/antirez/redis/git/commits/34c1871e9f80d9f23fb7add614dfb49ee1bd056a,34c1871e9f80d9f23fb7add614dfb49ee1bd056a,Cluster: set node role on successful handshake.
antirez,2013-03-25 11:51:53,https://api.github.com/repos/antirez/redis/git/commits/cda0cdfb700f8bb22475f2f4a93c94e1902af5bc,cda0cdfb700f8bb22475f2f4a93c94e1902af5bc,redis-trib: Don't use colorization if TERM != xterm.
antirez,2013-03-25 11:50:38,https://api.github.com/repos/antirez/redis/git/commits/4286d8b979f77d63346d4f4bbc43318eed29488f,4286d8b979f77d63346d4f4bbc43318eed29488f,redis-trib: initial output colorization
antirez,2013-03-25 10:56:08,https://api.github.com/repos/antirez/redis/git/commits/797d98e906f4ca8e994356279afa94bf87241137,797d98e906f4ca8e994356279afa94bf87241137,"Test: obuf-limits test false positive removed.

Fixes #621."
antirez,2013-03-22 16:54:32,https://api.github.com/repos/antirez/redis/git/commits/09aa55a3343d72a35fe77279eb35c3be5bc92342,09aa55a3343d72a35fe77279eb35c3be5bc92342,"redis-cli --stat, stolen from redis-tools.

Redis-tools is a connection of tools no longer mantained that was
intented as a way to economically make sense of Redis in the pre-vmware
sponsorship era. However there was a nice redis-stat utility, this
commit imports one of the functionalities of this tool here in redis-cli
as it seems to be pretty useful.

Usage: redis-cli --stat

The output is similar to vmstat in the format, but with Redis specific
stuff of course.

From the point of view of the monitored instance, only INFO is used in
order to grab data."
antirez,2013-03-22 16:39:43,https://api.github.com/repos/antirez/redis/git/commits/c195289e5ec49d52ea93e258facfb2f9bc070e05,c195289e5ec49d52ea93e258facfb2f9bc070e05,"redis-trib: All output wrapped by a specific function.

This is needed in order to colorize it as next step.
We use conventions in output messages such as

>>> This is an action
*** This is a warning
[ERR] This is an error
[OK] That's fine

And so forth, so that a color will be associated checking the first
three chars."
antirez,2013-03-22 12:03:33,https://api.github.com/repos/antirez/redis/git/commits/be7bdd376e62e9a2788cf2b2f7cf43eda02eeeca,be7bdd376e62e9a2788cf2b2f7cf43eda02eeeca,"redis-trib: fix open slot correction.

Slot zero was hardcoded (!)"
antirez,2013-03-22 11:59:18,https://api.github.com/repos/antirez/redis/git/commits/813d7cbdd13ef4d332843eefef1b5ef78bf78c7c,813d7cbdd13ef4d332843eefef1b5ef78bf78c7c,redis-trib: added cluster_error method to add errors.
antirez,2013-03-22 11:53:37,https://api.github.com/repos/antirez/redis/git/commits/d7eae8d8d7c4fd2c5cf4f8a6c31a9a2d2c876877,d7eae8d8d7c4fd2c5cf4f8a6c31a9a2d2c876877,redis-trib: fixed ClusterNode migrating/importing slots detection.
antirez,2013-03-22 11:47:49,https://api.github.com/repos/antirez/redis/git/commits/1baa15302853d3f1a9fc74c040def8c2ee393c59,1baa15302853d3f1a9fc74c040def8c2ee393c59,redis-trib: added some more output for check.
antirez,2013-03-22 11:28:06,https://api.github.com/repos/antirez/redis/git/commits/77bba91b4827f81088092dee22b360fc4b822be3,77bba91b4827f81088092dee22b360fc4b822be3,redis-trib: fixed type has_flags? -> has_flag.
antirez,2013-03-21 17:17:06,https://api.github.com/repos/antirez/redis/git/commits/4dded0c187e89b65e67f87ef6f94866ceaebf4e0,4dded0c187e89b65e67f87ef6f94866ceaebf4e0,redis-trib: ignore slaves when resharding.
antirez,2013-03-21 16:22:14,https://api.github.com/repos/antirez/redis/git/commits/47da76576e1e509466fc55aec9bdcbf01c154aa5,47da76576e1e509466fc55aec9bdcbf01c154aa5,redis-trib: fix conditional otherwise always true.
antirez,2013-03-21 16:13:08,https://api.github.com/repos/antirez/redis/git/commits/a89d435d8ea2369617a951a975f13a4a639a0eba,a89d435d8ea2369617a951a975f13a4a639a0eba,"Cluster: move slotToKeyFlush() to emptyDb().

This way we are sure to destroy the slot->key map every time we destroy
the DB, for instance when reloading a DB due to replication."
antirez,2013-03-21 16:11:54,https://api.github.com/repos/antirez/redis/git/commits/ed47f77977a62043266e8e12de6e1af97a2edb54,ed47f77977a62043266e8e12de6e1af97a2edb54,"redis-trib: initial support to fix ""open"" slots.

Open slots are slots found in importing or migrating slot when a
cluster check is performed."
antirez,2013-03-21 15:31:53,https://api.github.com/repos/antirez/redis/git/commits/1a6df1049d4b212908f8873424ad6fdfedb71d1a,1a6df1049d4b212908f8873424ad6fdfedb71d1a,redis-trib: load info about importing/migrating slots from node.
antirez,2013-03-21 09:47:10,https://api.github.com/repos/antirez/redis/git/commits/a8b09faf3de7105c11f005be7acd684215bec12c,a8b09faf3de7105c11f005be7acd684215bec12c,Cluster: comment no longer in sync with code removed.
jbergstroem,2013-03-20 11:05:59,https://api.github.com/repos/antirez/redis/git/commits/8080e1cfbe13503bea8fc7b5933ebd461f787ba8,8080e1cfbe13503bea8fc7b5933ebd461f787ba8,use `install`  as default installer (except on SunOS)
antirez,2013-03-20 10:50:55,https://api.github.com/repos/antirez/redis/git/commits/8c1bc8e8659d29d98315e3d8d6cc482667afc001,8c1bc8e8659d29d98315e3d8d6cc482667afc001,"Cluster: clear the PROMOTED slave directly into clusterSetMaster().

This way we make sure every time a master is turned into a replica
the flag will be cleared."
antirez,2013-03-20 10:32:35,https://api.github.com/repos/antirez/redis/git/commits/e006407fd08bb2b0a7f0aac703e367786ae85168,e006407fd08bb2b0a7f0aac703e367786ae85168,"Cluster: master node must clear its hash slots when turning into a slave.

When a master turns into a slave after a failover event, make sure to
clear the assigned slots before setting up the replication, as a slave
should never claim slots in an explicit way, but just take over the
master slots when replacing its master."
antirez,2013-03-20 09:48:42,https://api.github.com/repos/antirez/redis/git/commits/506f9a42b07649d793b9c3245da14aa0fecd2d59,506f9a42b07649d793b9c3245da14aa0fecd2d59,"Cluster: new flag PROMOTED introduced.

A slave node set this flag for itself when, after receiving authorization
from the majority of nodes, it turns itself into a master.

At the same time now this flag is tested by nodes receiving a PING
message before reconfiguring after a failover event. This makes the
system more robust: even if currently there is no way to manually turn
a slave into a master it is possible that we'll have such a feature in
the future, or that simply because of misconfiguration a node joins the
cluster as master while others believe it's a slave. This alone is now
no longer enough to trigger reconfiguration as other nodes will check
for the PROMOTED flag.

The PROMOTED flag is cleared every time the node is turned back into a
replica of some other node."
antirez,2013-03-20 09:32:00,https://api.github.com/repos/antirez/redis/git/commits/026b9483db2dd1f99deb1f4b398f93f7edc0404d,026b9483db2dd1f99deb1f4b398f93f7edc0404d,"Cluster: add sender flags in cluster bus messages header.

Sender flags were not propagated for the sender, but only for nodes in
the gossip section. This is odd and in the next commits we'll need to
get updated flags for the sender node, so this commit adds a new field
in the cluster messages header.

The message header is the same size as we reused some free space that
was marked as 'unused' because of alignment concerns."
antirez,2013-03-19 23:30:47,https://api.github.com/repos/antirez/redis/git/commits/d15b027d91f833eddbee47de26fadd9ff6c782ec,d15b027d91f833eddbee47de26fadd9ff6c782ec,"Cluster: turn old master into a replica of node that failed over.

So when the failing master node is back in touch with the cluster,
instead of remaining unused it is converted into a replica of the
new master, ready to perform the fail over if the new master node
will fail at some point.

Note that as a side effect clients with stale configuration are now
not an issue as well, as the node converted into a slave will not
accept queries but will redirect clients accordingly."
antirez,2013-03-19 15:01:30,https://api.github.com/repos/antirez/redis/git/commits/4d626230154122bae919125aecedc699b4200a81,4d626230154122bae919125aecedc699b4200a81,"Cluster: node replication role change handle improved.

The code handling a master that turns into a slave or the contrary was
improved in order to avoid repeating the same operations. Also
the readability and conceptual simplicity was improved."
antirez,2013-03-19 08:58:05,https://api.github.com/repos/antirez/redis/git/commits/88221f88c05bd9b0ff6e7941006661e630507659,88221f88c05bd9b0ff6e7941006661e630507659,"Cluster: new command CLUSTER FLUSHSLOTS.

It's just a simpler way to CLUSTER DELSLOTS with all the slots as
arguments, in order to obtain a node without assigned slots for
reconfiguration."
antirez,2013-03-19 08:46:12,https://api.github.com/repos/antirez/redis/git/commits/7d3e32d526b72f41ed35fd129e137d8de51cacf4,7d3e32d526b72f41ed35fd129e137d8de51cacf4,redis-trib: don't load cluster config from nodes in FAIL state.
jbergstroem,2013-03-17 07:03:14,https://api.github.com/repos/antirez/redis/git/commits/dc4003be715e4ed024ec7c95594c08ba8ddd006c,dc4003be715e4ed024ec7c95594c08ba8ddd006c,Silence mkdir output
jbergstroem,2013-03-17 06:49:57,https://api.github.com/repos/antirez/redis/git/commits/348be19b5f42da0f61044a0cbbe5eecaaa257c6d,348be19b5f42da0f61044a0cbbe5eecaaa257c6d,Only pass -rdynamic as linker option
jbergstroem,2013-03-16 07:44:38,https://api.github.com/repos/antirez/redis/git/commits/33a4bc2c70a04c33b10779e163625b150d69eb6f,33a4bc2c70a04c33b10779e163625b150d69eb6f,Remove extra spaces
jbergstroem,2013-03-16 07:40:22,https://api.github.com/repos/antirez/redis/git/commits/978c895b69f2aa330eb704d8b5b0bb792f0dd8ae,978c895b69f2aa330eb704d8b5b0bb792f0dd8ae,make check is a common naming convention for tests
jbergstroem,2013-03-16 07:38:37,https://api.github.com/repos/antirez/redis/git/commits/a66195629b297bf670d351a52304b1a10cf71c71,a66195629b297bf670d351a52304b1a10cf71c71,Inherit CC for Lua
jbergstroem,2013-03-16 07:35:20,https://api.github.com/repos/antirez/redis/git/commits/ada7aa7ac930a50e0f860c3028554a0c6c775cd2,ada7aa7ac930a50e0f860c3028554a0c6c775cd2,Spaces to tabs
jbergstroem,2013-03-16 07:33:42,https://api.github.com/repos/antirez/redis/git/commits/bea60bec750a458d69c6f42c080d9ffa1daeea2b,bea60bec750a458d69c6f42c080d9ffa1daeea2b,"Slightly refactor CFLAGS/LDFLAGS/LIBS

This way, we can avoid -rdynamic and -pthread warnings on darwin."
antirez,2013-03-15 15:53:41,https://api.github.com/repos/antirez/redis/git/commits/e28e61e839ba8cbc5db8a3661329ee5a613350b6,e28e61e839ba8cbc5db8a3661329ee5a613350b6,Cluster: when failing over claim master slots.
antirez,2013-03-15 15:45:45,https://api.github.com/repos/antirez/redis/git/commits/b8127e337a96d87acb7d3fc7721ac78595037ce4,b8127e337a96d87acb7d3fc7721ac78595037ce4,Version incremented to 2.9.8 after major cluster progresses.
antirez,2013-03-15 15:44:08,https://api.github.com/repos/antirez/redis/git/commits/dd091661d43316fe319d254a0e6d99fb8c5448bf,dd091661d43316fe319d254a0e6d99fb8c5448bf,Cluster: log when a slave asks for failover authorization.
antirez,2013-03-15 15:39:49,https://api.github.com/repos/antirez/redis/git/commits/1375b0611b7a2e030426f6bc23ab905a2e1c0da4,1375b0611b7a2e030426f6bc23ab905a2e1c0da4,"Cluster: slaves start failover with a small delay.

Redis Cluster can cope with a minority of nodes not informed about the
failure of a master in time for some reason (netsplit or node not
functioning properly, blocked, ...) however to wait a few seconds before
to start the failover will make most ""normal"" failovers simpler as the
FAIL message will propagate before the slave election happens."
antirez,2013-03-15 15:35:16,https://api.github.com/repos/antirez/redis/git/commits/d512a09c201a9aa2e1c233b30a9732249e9e2cce,d512a09c201a9aa2e1c233b30a9732249e9e2cce,Cluster: a bit more serious node role change handling.
antirez,2013-03-15 15:15:40,https://api.github.com/repos/antirez/redis/git/commits/004fbef8475b0af006e52ac65f0c8e3356c55445,004fbef8475b0af006e52ac65f0c8e3356c55445,"Cluster: remove node from master slaves when it turns into a master.

Also, a few nearby comments improved."
antirez,2013-03-15 15:11:34,https://api.github.com/repos/antirez/redis/git/commits/44c92f5aeb909aade90769c0660831e043861b4f,44c92f5aeb909aade90769c0660831e043861b4f,Cluster: slave failover implemented.
antirez,2013-03-15 14:44:49,https://api.github.com/repos/antirez/redis/git/commits/1d8f302e0d7f6b09ed365197cef7d9ec7d7000a1,1d8f302e0d7f6b09ed365197cef7d9ec7d7000a1,Cluster: election -> promotion in two comments.
antirez,2013-03-15 14:43:53,https://api.github.com/repos/antirez/redis/git/commits/bf821954672121c592ced7454b6de182ddb0d4b7,bf821954672121c592ced7454b6de182ddb0d4b7,"Cluster: added function to broadcast pings.

See the function top-comment for info why this is useful sometimes."
antirez,2013-03-15 14:36:36,https://api.github.com/repos/antirez/redis/git/commits/892e98548a46bfa5a0c93f04b6d057cd96afe7fe,892e98548a46bfa5a0c93f04b6d057cd96afe7fe,"Cluster: don't broadcast messages to HANDSHAKE nodes.

Also don't check for NOADDR as we check that node->link is not NULL
that's enough."
antirez,2013-03-15 12:20:23,https://api.github.com/repos/antirez/redis/git/commits/76a3954f4ad4fe138bc77c36d3f1f78528551dbb,76a3954f4ad4fe138bc77c36d3f1f78528551dbb,Cluster: fix clusterHandleSlaveFailover() conditional: quorum is enough.
antirez,2013-03-14 20:27:12,https://api.github.com/repos/antirez/redis/git/commits/90e99a208277d976a7682f4249fa873295c65de8,90e99a208277d976a7682f4249fa873295c65de8,Cluster: two lame bugs fixed in FAILOVER AUTH messages generation.
antirez,2013-03-14 20:21:58,https://api.github.com/repos/antirez/redis/git/commits/aeacaa57e6727e20719aebf311192b77898049cc,aeacaa57e6727e20719aebf311192b77898049cc,Cluster: code to process messages moved in the right if-else chain.
antirez,2013-03-14 15:42:56,https://api.github.com/repos/antirez/redis/git/commits/35f05c66b6ae9cd0e81672ce67942a25589d2c2e,35f05c66b6ae9cd0e81672ce67942a25589d2c2e,"Cluster: handle FAILOVER_AUTH_ACK messages.

That's trivial as we just need to increment the count of masters that
received with an ACK."
antirez,2013-03-14 15:39:02,https://api.github.com/repos/antirez/redis/git/commits/c2595500ac6f9075b8a4f872e3c83ae1b0aee9c3,c2595500ac6f9075b8a4f872e3c83ae1b0aee9c3,"Cluster: request failover authorization, log if we have quorum.

However the failover is yet not really performed."
antirez,2013-03-14 15:31:57,https://api.github.com/repos/antirez/redis/git/commits/7fa42b801de4607734ad9f76b799ce7948a610bb,7fa42b801de4607734ad9f76b799ce7948a610bb,Cluster: clusterSendFailoverAuth() implementation.
NanXiao,2013-03-14 05:52:43,https://api.github.com/repos/antirez/redis/git/commits/79a13b46fbad91418a223ee1a2846dad8bd9117e,79a13b46fbad91418a223ee1a2846dad8bd9117e,"Update config.c

Fix bug in configGetCommand function: get correct masterauth value."
antirez,2013-03-13 18:08:03,https://api.github.com/repos/antirez/redis/git/commits/f59ff6fe61dacf79be3200ec3fd1628711df2438,f59ff6fe61dacf79be3200ec3fd1628711df2438,Cluster: clusterSendFailoverAuthIfNeeded() work in progress.
antirez,2013-03-13 17:38:08,https://api.github.com/repos/antirez/redis/git/commits/44f6fdab6024592b085904b1993cbaf3bafcb982,44f6fdab6024592b085904b1993cbaf3bafcb982,"Cluster: handle FAILOVER_AUTH_REQUEST in clusterProcessPacket().

However currently the control is passed to a function doing nothing at
all."
antirez,2013-03-13 16:31:19,https://api.github.com/repos/antirez/redis/git/commits/ece95b2deae80409596bbb0e5502f1ed778cd1d8,ece95b2deae80409596bbb0e5502f1ed778cd1d8,Cluster: sanity check FAILOVER_AUTH_REQUEST messages for proper length.
antirez,2013-03-13 16:27:06,https://api.github.com/repos/antirez/redis/git/commits/66144337bfb924f1ad2e189cd562f2516b381f9a,66144337bfb924f1ad2e189cd562f2516b381f9a,Cluster: use 'else if' for mutually exclusive conditionals.
antirez,2013-03-13 16:21:20,https://api.github.com/repos/antirez/redis/git/commits/db7c17e969cb09cd2a03a13036c2aaa80e1485a4,db7c17e969cb09cd2a03a13036c2aaa80e1485a4,"Cluster: FAILOVER_AUTH_REQUEST message type introduced.

This message is sent by a slave that is ready to failover its master to
other nodes to get the authorization from the majority of masters."
antirez,2013-03-13 12:10:49,https://api.github.com/repos/antirez/redis/git/commits/575cbc9990f18e7f1048efd96c93ec652e5fcf9b,575cbc9990f18e7f1048efd96c93ec652e5fcf9b,Cluster: clusterHandleSlaveFailover() stub.
antirez,2013-03-13 11:51:10,https://api.github.com/repos/antirez/redis/git/commits/1902a9c5320f4dfdb3151324c2e64548addbcb4d,1902a9c5320f4dfdb3151324c2e64548addbcb4d,"Replication: master_link_down_since_seconds initial value should be huge.

server.repl_down_since used to be initialized to the current time at
startup. This is wrong since the replication never started. Clients
testing this filed to check if data is uptodate should never believe
data is recent if we never ever connected to our master."
antirez,2013-03-13 11:44:02,https://api.github.com/repos/antirez/redis/git/commits/3d448bda39e3ec922849211f22a26609789ce1d5,3d448bda39e3ec922849211f22a26609789ce1d5,Cluster: call clusterHandleSlaveFailover() when our master is down.
antirez,2013-03-13 10:12:45,https://api.github.com/repos/antirez/redis/git/commits/ae94fe7e48f6a18577c51d6ef5e646f26d80089a,ae94fe7e48f6a18577c51d6ef5e646f26d80089a,Test: make sure broken RDB checksum is detected.
antirez,2013-03-13 09:04:33,https://api.github.com/repos/antirez/redis/git/commits/82b0eae690bfb9a08fa516215252bf81f5371488,82b0eae690bfb9a08fa516215252bf81f5371488,"Test: more RDB loading checks.

A test for issue #1001 is included."
antirez,2013-03-12 18:55:33,https://api.github.com/repos/antirez/redis/git/commits/0b74a85678f96be8980de3dbdf4316137587b4b9,0b74a85678f96be8980de3dbdf4316137587b4b9,Test: check that Redis starts empty without an RDB file.
antirez,2013-03-12 18:46:33,https://api.github.com/repos/antirez/redis/git/commits/79a6844e44ca4a2773f2b971b3c692d6ffff34b5,79a6844e44ca4a2773f2b971b3c692d6ffff34b5,rdbLoad(): rework code to save vertical space.
antirez,2013-03-12 18:40:36,https://api.github.com/repos/antirez/redis/git/commits/9925c7c670067684db883876fd6cb0b3dc78ba61,9925c7c670067684db883876fd6cb0b3dc78ba61,"Merge pull request #1001 from djanowski/fatal-errors-rdb-load

Abort when opening the RDB file results in an error other than ENOENT."
djanowski,2013-03-12 17:37:50,https://api.github.com/repos/antirez/redis/git/commits/4178a80282ac917a48771da2c2d1ee65bc562161,4178a80282ac917a48771da2c2d1ee65bc562161,"Abort when opening the RDB file results in an error other than ENOENT.

This fixes cases where the RDB file does exist but can't be accessed for
any reason. For instance, when the Redis process doesn't have enough
permissions on the file."
antirez,2013-03-12 17:34:08,https://api.github.com/repos/antirez/redis/git/commits/215bfaea164350762ce5917acfb10269f63bfa68,215bfaea164350762ce5917acfb10269f63bfa68,"Set default for stop_writes_on_bgsave_err in initServerConfig().

It was placed for error in initServer() that's called after the
configuation is already loaded, causing issue #1000."
antirez,2013-03-12 08:57:49,https://api.github.com/repos/antirez/redis/git/commits/91d3b487e7d27454a0562e4131f9ab79c8288074,91d3b487e7d27454a0562e4131f9ab79c8288074,redis-cli --bigkeys: don't crash with empty DBs.
antirez,2013-03-11 10:10:33,https://api.github.com/repos/antirez/redis/git/commits/2d851333a649fb20f3bbfdebdde499920d61d4cd,2d851333a649fb20f3bbfdebdde499920d61d4cd,"activeExpireCycle() smarter with many DBs and under expire pressure.

activeExpireCycle() tries to test just a few DBs per iteration so that
it scales if there are many configured DBs in the Redis instance.
However this commit makes it a bit smarter when one a few of those DBs
are under expiration pressure and there are many many keys to expire.

What we do is to remember if in the last iteration had to return because
we ran out of time. In that case the next iteration we'll test all the
configured DBs so that we are sure we'll test again the DB under
pressure.

Before of this commit after some mass-expire in a given DB the function
tested just a few of the next DBs, possibly empty, a few per iteration,
so it took a long time for the function to reach again the DB under
pressure. This resulted in a lot of memory being used by already expired
keys and never accessed by clients."
antirez,2013-03-11 09:51:03,https://api.github.com/repos/antirez/redis/git/commits/08b107e4057d76aa7e3a4bb5bceb75b8fcaf3c2a,08b107e4057d76aa7e3a4bb5bceb75b8fcaf3c2a,In databasesCron() never test more DBs than we have.
antirez,2013-03-11 09:42:14,https://api.github.com/repos/antirez/redis/git/commits/4b1ccdfd4935d842ff465f8686b085cdcd3ebc1c,4b1ccdfd4935d842ff465f8686b085cdcd3ebc1c,Make comment name match var name in activeExpireCycle().
antirez,2013-03-09 10:48:54,https://api.github.com/repos/antirez/redis/git/commits/1f7d2c1e27a5378c5db438cb9d1a00fc30f1d598,1f7d2c1e27a5378c5db438cb9d1a00fc30f1d598,Optimize inner loop of activeExpireCycle() for no-expires case.
antirez,2013-03-09 10:44:20,https://api.github.com/repos/antirez/redis/git/commits/5f5aa487f9263762b399c0fa5ad49753b259ced6,5f5aa487f9263762b399c0fa5ad49753b259ced6,REDIS_DBCRON_DBS_PER_SEC -> REDIS_DBCRON_DBS_PER_CALL
antirez,2013-03-08 16:48:58,https://api.github.com/repos/antirez/redis/git/commits/db29d71a300f6ca7fd58541ea3c3b8ca7c27a03f,db29d71a300f6ca7fd58541ea3c3b8ca7c27a03f,"activeExpireCycle(): process only a small number of DBs per iteration.

This small number of DBs is set to 16 so actually in the default
configuraiton Redis should behave exactly like in the past.
However the difference is that when the user configures a very large
number of DBs we don't do an O(N) operation, consuming a non trivial
amount of CPU per serverCron() iteration."
antirez,2013-03-08 16:41:20,https://api.github.com/repos/antirez/redis/git/commits/40a2da159cbbfbee5f858f1cede378caea9376fc,40a2da159cbbfbee5f858f1cede378caea9376fc,"Use unsigned integers for DB ids, for defined wrap-to-zero."
antirez,2013-03-08 13:01:12,https://api.github.com/repos/antirez/redis/git/commits/7ac3b3a486f637fb1331c0c81ae1e2b2c8e70664,7ac3b3a486f637fb1331c0c81ae1e2b2c8e70664,"Only resize/rehash a few databases per cron iteration.

This is the first step to lower the CPU usage when many databases are
configured. The other is to also process a limited number of DBs per
call in the active expire cycle."
antirez,2013-03-08 12:59:50,https://api.github.com/repos/antirez/redis/git/commits/dfd732dff397d77df4d3dd23e9beb2fb9650d031,dfd732dff397d77df4d3dd23e9beb2fb9650d031,Actually call databasesCron() inside serverCron().
antirez,2013-03-08 10:54:33,https://api.github.com/repos/antirez/redis/git/commits/cd9dcd1835f94a8540c4bf929546cff0a2716411,cd9dcd1835f94a8540c4bf929546cff0a2716411,Move Redis databases background processing to databasesCron().
antirez,2013-03-07 14:40:53,https://api.github.com/repos/antirez/redis/git/commits/f0b807cd475151bcd67a10c8e7906e88f46a28de,f0b807cd475151bcd67a10c8e7906e88f46a28de,Cluster: update cluster state on PFAIL flag set/cleared on nodes.
antirez,2013-03-07 14:36:59,https://api.github.com/repos/antirez/redis/git/commits/299b8f76c2fcb87f7030aae6eeb15e894bdf72cb,299b8f76c2fcb87f7030aae6eeb15e894bdf72cb,Cluster: mark cluster state as fail of majority of masters is unreachable.
antirez,2013-03-07 14:22:32,https://api.github.com/repos/antirez/redis/git/commits/abf06fd5ff27be9d73e39c1e6bd53e8e47c528a9,abf06fd5ff27be9d73e39c1e6bd53e8e47c528a9,Cluster: log global cluster state change.
antirez,2013-03-06 17:24:43,https://api.github.com/repos/antirez/redis/git/commits/3dad8196b7325105b7edbfe9dd09bcd7ab60de8b,3dad8196b7325105b7edbfe9dd09bcd7ab60de8b,"Cluster: clusterUpdateState() function simplified.

Also the NEEDHELP Cluster state was removed as it will no longer be
used by Redis Cluster."
gengliangwang,2013-03-04 16:47:05,https://api.github.com/repos/antirez/redis/git/commits/042ed270c83d91c3dfd6f63db092f4ef8fb0c1a8,042ed270c83d91c3dfd6f63db092f4ef8fb0c1a8,"Removed useless ""return"" statements in pubsub.c

(original commit message edited)"
antirez,2013-03-06 15:28:26,https://api.github.com/repos/antirez/redis/git/commits/7b190a08cfe9aded4c64b775fa2a2ab24b7b9405,7b190a08cfe9aded4c64b775fa2a2ab24b7b9405,"API to lookup commands with their original name.

A new server.orig_commands table was added to the server structure, this
contains a copy of the commant table unaffected by rename-command
statements in redis.conf.

A new API lookupCommandOrOriginal() was added that checks both tables,
new first, old later, so that rewriteClientCommandVector() and friends
can lookup commands with their new or original name in order to fix the
client->cmd pointer when the argument vector is renamed.

This fixes the segfault of issue #986, but does not fix a wider range of
problems resulting from renaming commands that actually operate on data
and are registered into the AOF file or propagated to slaves... That is
command renaming should be handled with care."
antirez,2013-03-06 14:47:16,https://api.github.com/repos/antirez/redis/git/commits/4d62912619d10667bf06d683290fd0d33c1fcf6c,4d62912619d10667bf06d683290fd0d33c1fcf6c,Add a warning about command renaming in redis.conf.
antirez,2013-03-06 11:40:48,https://api.github.com/repos/antirez/redis/git/commits/bfa25441e74e931e6f582b3e578faa9cec0fe3a8,bfa25441e74e931e6f582b3e578faa9cec0fe3a8,"Handle a non-impossible empty argv in loadServerConfigFromString().

Usually this does not happens since we trim for "" \t\r\n"", but if there
are other chars that return true with isspace(), we may end with an
empty argv. Better to handle the condition in an explicit way."
antirez,2013-03-06 11:38:32,https://api.github.com/repos/antirez/redis/git/commits/8c193af6969ed3e24f0d4ba9e3780f8b51b44ce0,8c193af6969ed3e24f0d4ba9e3780f8b51b44ce0,redis-cli: use sdsfreesplitres() instead of hand-coding it.
antirez,2013-03-06 11:36:07,https://api.github.com/repos/antirez/redis/git/commits/011fa89ac957091f5652475e88758093a80dcd5e,011fa89ac957091f5652475e88758093a80dcd5e,Cluster: sdssplitargs_free() -> sdsfreesplitres().
antirez,2013-03-06 11:34:43,https://api.github.com/repos/antirez/redis/git/commits/729a3432ba000c50fd6875600df62f4ef1a768ab,729a3432ba000c50fd6875600df62f4ef1a768ab,sds.c: sdssplitargs_free() removed as it was a duplicate.
antirez,2013-03-06 11:24:12,https://api.github.com/repos/antirez/redis/git/commits/cf4d7737bb198af008c076a02d85acc22b380ef9,cf4d7737bb198af008c076a02d85acc22b380ef9,More specific error message in loadServerConfigFromString().
antirez,2013-03-06 11:19:38,https://api.github.com/repos/antirez/redis/git/commits/4ea89e64c03e33ef9f1f2b338fa654f15e5a7f52,4ea89e64c03e33ef9f1f2b338fa654f15e5a7f52,"sdssplitargs(): on error set *argc to 0.

This makes programs not checking the return value for NULL much safer
since with this change:

1) It is still possible to iterate the zero-length result without
crashes.
2) sdssplitargs_free will work against NULL and 0 count."
antirez,2013-03-06 11:14:42,https://api.github.com/repos/antirez/redis/git/commits/5cabae84e60fa4b9ae0de00984ad0e9c08190532,5cabae84e60fa4b9ae0de00984ad0e9c08190532,"sdssplitargs(): now returns NULL only on error.

An empty input string also resulted into the function returning NULL
making it harder for the caller to distinguish between error and empty
string without checking the original input string length."
charsyam,2013-02-06 05:47:14,https://api.github.com/repos/antirez/redis/git/commits/1303f02be63a88b13c5bf4f6b14ab59526f562a2,1303f02be63a88b13c5bf4f6b14ab59526f562a2,Don't segfault on unbalanced quotes.
antirez,2013-03-06 10:50:38,https://api.github.com/repos/antirez/redis/git/commits/304ef5e283c4309c3d5d75d17b98f9e77fcfeca9,304ef5e283c4309c3d5d75d17b98f9e77fcfeca9,"Allow AUTH while loading the DB in memory.

While Redis is loading the AOF or RDB file in memory only a subset of
commands are allowed. This commit adds AUTH to this subset."
antirez,2013-03-05 15:12:08,https://api.github.com/repos/antirez/redis/git/commits/1025dd778686b23168bcedbdaf3b1d02508ceb37,1025dd778686b23168bcedbdaf3b1d02508ceb37,Cluster: connect to our master ASAP after startup if we are a slave node.
antirez,2013-03-05 14:05:32,https://api.github.com/repos/antirez/redis/git/commits/bac57ad14b6902e822c94a21857810e917bd07d3,bac57ad14b6902e822c94a21857810e917bd07d3,"Cluster: more robust FAIL flag cleaup.

If we have a master in FAIL state that's reachable again, and apparently
no one is going to serve its slots, clear the FAIL flag and let the
cluster continue with its operations again."
antirez,2013-03-05 12:15:05,https://api.github.com/repos/antirez/redis/git/commits/1a02b7440aa02cb24c845d8bda48b98c4a60eb4c,1a02b7440aa02cb24c845d8bda48b98c4a60eb4c,"Cluster: new node field fail_time.

This is the unix time at which we set the FAIL flag for the node.
It is only valid if FAIL is set.

The idea is to use it in order to make the cluster more robust, for
instance in order to revert a FAIL state if it is long-standing but
still slots are assigned to this node, that is, no one is going to fix
these slots apparently."
antirez,2013-03-05 12:02:44,https://api.github.com/repos/antirez/redis/git/commits/d3b4662347a1099d90339328ef6df7bc939cf42a,d3b4662347a1099d90339328ef6df7bc939cf42a,"Cluster: don't check keys hash slots when the source is our master.

Usually we redirect clients to the right hash slot, however we don't
want to do that with our master, we want just to mirror it."
antirez,2013-03-05 11:58:22,https://api.github.com/repos/antirez/redis/git/commits/31ac376051c3b92c917d3e042fd94bd3b9b20ef4,31ac376051c3b92c917d3e042fd94bd3b9b20ef4,Cluster: slaveof not allowed in redis.conf as well.
antirez,2013-03-05 11:39:11,https://api.github.com/repos/antirez/redis/git/commits/b7d085fc0dea44bb614da7edce2370521802250d,b7d085fc0dea44bb614da7edce2370521802250d,Cluster: SLAVEOF command not allowed in cluster mode.
antirez,2013-03-05 11:17:30,https://api.github.com/repos/antirez/redis/git/commits/e4b481a5f652bd0390e64f9276fcc1312caff614,e4b481a5f652bd0390e64f9276fcc1312caff614,Cluster: A comment updated in clusterCron().
antirez,2013-03-05 11:13:39,https://api.github.com/repos/antirez/redis/git/commits/d728ec6deefa10c4bdb99b190e47368f7f1747f2,d728ec6deefa10c4bdb99b190e47368f7f1747f2,"Cluster: send a ping to every node we never contacted in timeout/2 seconds.

Usually we try to send just 1 ping every second, however when we detect
we are going to have unreliable failure detection because we can't ping
some node in time, send an additional ping.

This should only happen with very large clusters or when the the node
timeout is set to a very low value."
antirez,2013-03-05 10:50:11,https://api.github.com/repos/antirez/redis/git/commits/e7628be2a7307ee4f3b8b8e307436bc2d1a6f551,e7628be2a7307ee4f3b8b8e307436bc2d1a6f551,Cluster: set node->slaveof correctly when a node state is updated.
antirez,2013-03-04 18:47:00,https://api.github.com/repos/antirez/redis/git/commits/d6457577d4a1378f15fb4c2965c1d5862117290d,d6457577d4a1378f15fb4c2965c1d5862117290d,"Cluster: don't perform startup slots sanity check for slaves.

If we are a cluster node the DB content will not match our configured
slots. Don't do the check at all."
antirez,2013-03-04 18:45:36,https://api.github.com/repos/antirez/redis/git/commits/d334897e80d026b0b7b66b4c8b1ff318c2caebce,d334897e80d026b0b7b66b4c8b1ff318c2caebce,"Cluster: fix maximum line length when loading config.

There are pathological cases where the line can be even longer a single
node may contain all the slots in importing/migrating state."
antirez,2013-03-04 14:39:43,https://api.github.com/repos/antirez/redis/git/commits/3be893123f495efb7239f802549f82bd248033de,3be893123f495efb7239f802549f82bd248033de,Make sure replicationSetMaster() works when ip argument is not an sds.
antirez,2013-03-04 14:27:58,https://api.github.com/repos/antirez/redis/git/commits/b8a28bf4422b95d99527b6c73023621d1d350758,b8a28bf4422b95d99527b6c73023621d1d350758,Cluster: actually setup replication in CLUSTER REPLICATE.
antirez,2013-03-04 12:22:21,https://api.github.com/repos/antirez/redis/git/commits/7bead003e267a852a514e6deaf05c1b5b37cd412,7bead003e267a852a514e6deaf05c1b5b37cd412,"SLAVEOF command refactored into a proper API.

We now have replicationSetMaster() and replicationUnsetMaster() that can
be called in other contexts (for instance Redis Cluster)."
antirez,2013-03-04 12:15:09,https://api.github.com/repos/antirez/redis/git/commits/0c01088b511e794218ab226541cfacdf75b4b744,0c01088b511e794218ab226541cfacdf75b4b744,Cluster: REPLICATE subcommand and stub for clusterSetMaster().
charsyam,2013-02-21 09:22:24,https://api.github.com/repos/antirez/redis/git/commits/bc84c399f8b7ab891f72cf3920214a6fd5037f41,bc84c399f8b7ab891f72cf3920214a6fd5037f41,"adding check error code

adding check error code"
antirez,2013-03-04 10:14:32,https://api.github.com/repos/antirez/redis/git/commits/3b3974410ed12899ae244aefd0fe4dc4f669d6a2,3b3974410ed12899ae244aefd0fe4dc4f669d6a2,"redis-cli: use keepalive socket option.

This should improve things in two ways:

1) Prevent timeouts caused by the execution of long commands.
2) Improve detection of real connection errors.

This is mostly effective only on Linux because of the bogus default
keepalive settings. In Linux we have OS-specific calls to set the
keepalive interval to reasonable values."
antirez,2013-03-04 09:57:01,https://api.github.com/repos/antirez/redis/git/commits/174e51cb75323f2d81e71af16f961a3679d1a0ad,174e51cb75323f2d81e71af16f961a3679d1a0ad,"Merge pull request #967 from 0x20h/fix-git-diff

suppress external diff program when using git diff."
stamhe,2013-03-02 09:16:46,https://api.github.com/repos/antirez/redis/git/commits/d783860457f30d54a8c207b8ea952b14d19ca509,d783860457f30d54a8c207b8ea952b14d19ca509,point 2 of slave-serve-stale-data miss '-' between 'stale' and 'data'
antirez,2013-02-28 14:54:29,https://api.github.com/repos/antirez/redis/git/commits/caf9b24a7d5f59be45fde702e074589af0eeec85,caf9b24a7d5f59be45fde702e074589af0eeec85,"Cluster: don't set the slot as unassigned because of PONG info.

As stated in the comment this is usually due to a resharding in progress
so the client should be still redirected to the old node that will
handle the redirection elsewhere."
antirez,2013-02-28 14:41:54,https://api.github.com/repos/antirez/redis/git/commits/0d77440b2698b693cc31a0ee59df88b63cc704e7,0d77440b2698b693cc31a0ee59df88b63cc704e7,"Cluster: better handling of slots changes in PONG packets.

The new code makes sure that the node slots bitmap is always consistent
with the cluster->slots array."
antirez,2013-02-28 14:23:09,https://api.github.com/repos/antirez/redis/git/commits/5f8fd27ace0d1f98c480fa7b2b6b293cbbcf921f,5f8fd27ace0d1f98c480fa7b2b6b293cbbcf921f,Cluster: refactoring of clusterNode*Bit to use helper bitmap functions.
antirez,2013-02-28 14:13:32,https://api.github.com/repos/antirez/redis/git/commits/d21d6b666f868d1eeffc366fc8c08f2219fd882b,d21d6b666f868d1eeffc366fc8c08f2219fd882b,Cluster: use node->numslots instead of popcount() where possible.
antirez,2013-02-28 14:11:05,https://api.github.com/repos/antirez/redis/git/commits/4521115b1767081f17acf67d154c69e1a589c0bb,4521115b1767081f17acf67d154c69e1a589c0bb,"Cluster: new field in cluster node structure, ""numslots"".

Before a relatively slow popcount() operation was needed every time we
needed to get the number of slots served by a given cluster node.
Now we just need to check an integer that is taken in sync with the
bitmap."
antirez,2013-02-28 14:00:09,https://api.github.com/repos/antirez/redis/git/commits/a2566d66188a96562b4f9238497cd35bb14ea029,a2566d66188a96562b4f9238497cd35bb14ea029,Cluster: don't gossip about nodes that are not useful to the cluster.
antirez,2013-02-28 12:12:56,https://api.github.com/repos/antirez/redis/git/commits/bc922dc688ed22a8dc3f5fd8a765beb3e230a836,bc922dc688ed22a8dc3f5fd8a765beb3e230a836,redis-trib: skip nodes without slots when creating the config signature.
antirez,2013-02-27 17:02:22,https://api.github.com/repos/antirez/redis/git/commits/64942fca01c67d36a28bfe1703e75d0dbfc19272,64942fca01c67d36a28bfe1703e75d0dbfc19272,redis-trib help.
antirez,2013-02-27 16:55:59,https://api.github.com/repos/antirez/redis/git/commits/d45d184118326bb33c0768338f801f7cbab2d363,d45d184118326bb33c0768338f801f7cbab2d363,Cluster: CLUSTER FORGET implemented.
antirez,2013-02-27 16:53:48,https://api.github.com/repos/antirez/redis/git/commits/d2b8281b3f2c19d6510bb066bca6d8ebd04a38dd,d2b8281b3f2c19d6510bb066bca6d8ebd04a38dd,Cluster: added a missing return on CLUSTER SETSLOT.
antirez,2013-02-27 16:23:11,https://api.github.com/repos/antirez/redis/git/commits/7ddc0fe652bfb4dc09702c98c95082626a66cd03,7ddc0fe652bfb4dc09702c98c95082626a66cd03,redis-trib: skip noaddr and disconnected nodes while loading cluster info.
antirez,2013-02-27 16:09:33,https://api.github.com/repos/antirez/redis/git/commits/d20dea3eb7dc830c49c48988e1318039d1735e11,d20dea3eb7dc830c49c48988e1318039d1735e11,Cluster: blank node address when flagging it as NOADDR.
antirez,2013-02-27 15:12:59,https://api.github.com/repos/antirez/redis/git/commits/2dcb5ab72b01d170915a8527dc11d8d021caff39,2dcb5ab72b01d170915a8527dc11d8d021caff39,Cluster: add comments in sub-sections of CLUSTER command.
antirez,2013-02-27 14:58:41,https://api.github.com/repos/antirez/redis/git/commits/96dd2109708b09b3434b1d595e6de4cbc580ed7f,96dd2109708b09b3434b1d595e6de4cbc580ed7f,redis-trib: initial implementation of addnode command.
antirez,2013-02-27 11:33:27,https://api.github.com/repos/antirez/redis/git/commits/f7dac639a907f7186920075f462d0cb15e2c5804,f7dac639a907f7186920075f462d0cb15e2c5804,Remove warning when printing redisBuildId().
antirez,2013-02-27 11:29:20,https://api.github.com/repos/antirez/redis/git/commits/e4682c82e325718bd74ef3b2881a1b3ed10208df,e4682c82e325718bd74ef3b2881a1b3ed10208df,Remove too agressive/spamming log in rdb.c.
antirez,2013-02-27 11:27:15,https://api.github.com/repos/antirez/redis/git/commits/f9b5ca29fd4a1e72d1bb00afc74f76dc14b383d7,f9b5ca29fd4a1e72d1bb00afc74f76dc14b383d7,"Use GCC printf format attribute for redisLog().

This commit also fixes redisLog() statements producing warnings."
antirez,2013-02-27 11:00:11,https://api.github.com/repos/antirez/redis/git/commits/c35b065a642ca02ec550c6eaa54df53f113aa124,c35b065a642ca02ec550c6eaa54df53f113aa124,Better panic message for failed time event creation.
stamhe,2013-02-27 10:00:47,https://api.github.com/repos/antirez/redis/git/commits/e431a9766074aa5a74845f7dd3680079d4ef404e,e431a9766074aa5a74845f7dd3680079d4ef404e,"add a check for aeCreateTimeEvent

1) Add a check for aeCreateTimeEvent in function initServer."
stamhe,2013-02-27 03:53:11,https://api.github.com/repos/antirez/redis/git/commits/9c8be6cab9e4ec6c4fad2e1dd01fb13f7032205b,9c8be6cab9e4ec6c4fad2e1dd01fb13f7032205b,"Set proctitle: avoid the use of __attribute__((constructor)).

This cased a segfault in some Linux system and was GCC-specific.

Commit modified by @antirez:

1) Stripped away the part to set the proc title via config for now.
2) Handle initialization of setproctitle only when the replacement
   is used.
3) Don't require GCC now that the attribute constructor is no
   longer used."
antirez,2013-02-26 14:51:15,https://api.github.com/repos/antirez/redis/git/commits/deb1f4d841d402508d27a5bda0bf3a7c19cc0a6d,deb1f4d841d402508d27a5bda0bf3a7c19cc0a6d,setproctitle.c: declar tmp as static so valgrind will not detect a leak.
antirez,2013-02-26 14:15:44,https://api.github.com/repos/antirez/redis/git/commits/d0992d6e8b883d6f04fa4da21611180766fd8df7,d0992d6e8b883d6f04fa4da21611180766fd8df7,Cluster: a few random fixes to the new failure detection.
antirez,2013-02-26 14:03:27,https://api.github.com/repos/antirez/redis/git/commits/f288b07563c833ae7c3748692ea7e35d299c0082,f288b07563c833ae7c3748692ea7e35d299c0082,Cluster: log the event when we clear the FAIL flag.
antirez,2013-02-26 13:58:39,https://api.github.com/repos/antirez/redis/git/commits/97ffcd351b7e43b48cce0e89ff26d5517156f9cd,97ffcd351b7e43b48cce0e89ff26d5517156f9cd,"Cluster: use the failure report API to reimplement failure detection.

The new system detects a failure only when there is quorum from masters."
antirez,2013-02-26 10:52:12,https://api.github.com/repos/antirez/redis/git/commits/6356cf6808be9ea88ab97be33ebf1576eeb57da6,6356cf6808be9ea88ab97be33ebf1576eeb57da6,"Set process name in ps output to make operations safer.

This commit allows Redis to set a process name that includes the binding
address and the port number in order to make operations simpler.

Redis children processes doing AOF rewrites or RDB saving change the
name into redis-aof-rewrite and redis-rdb-bgsave respectively.

This in general makes harder to kill the wrong process because of an
error and makes simpler to identify saving children.

This feature was suggested by Arnaud GRANAL in the Redis Google Group,
Arnaud also pointed me to the setproctitle.c implementation includeed in
this commit.

This feature should work on all the Linux, OSX, and all the three major
BSD systems."
antirez,2013-02-26 10:19:48,https://api.github.com/repos/antirez/redis/git/commits/1b1b3f6c068eab655c5c5e84891fe1970f36c923,1b1b3f6c068eab655c5c5e84891fe1970f36c923,Cluster: invert two functions declarations in more natural order.
antirez,2013-02-26 10:08:03,https://api.github.com/repos/antirez/redis/git/commits/d5e8b0a47fa84debb9b0b5b2ce617b3739c04245,d5e8b0a47fa84debb9b0b5b2ce617b3739c04245,"Cluster: cleanup idle failure reports every time we remove one.

This is not very important as anyway when the function counting the
number of reports is called the cleanup is performed. However with this
change if only part of the nodes that reported the failure will report
the node is back ok, we'll cleanup the older entries ASAP. In complex
split net split scenarios, and when we are dealing with clusters having
nodes in the order of ~ 1000, this can save some CPU."
antirez,2013-02-25 18:13:22,https://api.github.com/repos/antirez/redis/git/commits/9cb578ced0c8ffb3b2a5ae2927cadb83b66726f8,9cb578ced0c8ffb3b2a5ae2927cadb83b66726f8,"Cluster: new function clusterNodeDelFailureReport() for failure reports.

This is the missing part of the API that will be used to reimplement
failure detection of Cluster nodes."
antirez,2013-02-25 17:38:15,https://api.github.com/repos/antirez/redis/git/commits/b26bb768bcb83627e5cbc035d6355f1c0f6c818f,b26bb768bcb83627e5cbc035d6355f1c0f6c818f,"Merge pull request #969 from serphen/unstable

Fix error ""repl-backlog-size must be 1 or greater"""
serphen,2013-02-25 17:25:48,https://api.github.com/repos/antirez/redis/git/commits/3d588b37cedc49d29628da7d66e35fbf05aa440b,3d588b37cedc49d29628da7d66e35fbf05aa440b,"Fix error ""repl-backlog-size must be 1 or greater""

The parameter repl-backlog-size is not parsed correctly in the configuration file. argv[0] is parsed instead of argv[1]."
antirez,2013-02-25 11:41:13,https://api.github.com/repos/antirez/redis/git/commits/18f537083aaf54b35e2a5aa0a683d031ac54e253,18f537083aaf54b35e2a5aa0a683d031ac54e253,"Cluster: no limits for the count parameter of CLUSTER GETKEYSINSLOT.

Not sure why I set a limit to 1 million keys, there is no reason for
this artificial limit, and anyway this is s a stupid limit because it is
already high enough to create latency issues. So let's the users shoot
on their feet because maybe they just actually know what they are doing."
antirez,2013-02-25 11:40:32,https://api.github.com/repos/antirez/redis/git/commits/544bbe5387b9c4fd925693b947fce574bd9854a5,544bbe5387b9c4fd925693b947fce574bd9854a5,Cluster: validate slot number in CLUSTER COUNTKEYSINSLOT.
antirez,2013-02-25 11:37:50,https://api.github.com/repos/antirez/redis/git/commits/996a643752b311b26228c2044b29d9034ee910d5,996a643752b311b26228c2044b29d9034ee910d5,Cluster: use O(log(N)) algo for countKeysInSlot().
antirez,2013-02-25 11:04:31,https://api.github.com/repos/antirez/redis/git/commits/d4fa40655dfdbc9bbff9299f773812452875c6c8,d4fa40655dfdbc9bbff9299f773812452875c6c8,"Cluster: new sub-command CLUSTER COUNTKEYSINSLOT.

The new sub-command uses the new countKeysInSlot() API and allows a
cluster client to get the number of keys for a given hashslot."
antirez,2013-02-25 10:43:49,https://api.github.com/repos/antirez/redis/git/commits/a517c89321527d030c4cfed768444e4c49ad3cf4,a517c89321527d030c4cfed768444e4c49ad3cf4,Cluster: verifyClusterConfigWithData() implemented.
antirez,2013-02-25 10:40:21,https://api.github.com/repos/antirez/redis/git/commits/9947b0d96d733d411622186e6db835967270ad48,9947b0d96d733d411622186e6db835967270ad48,A comment in main() clarified.
antirez,2013-02-25 10:24:42,https://api.github.com/repos/antirez/redis/git/commits/d2154254be252e34c441f22a43c69cba01e2fcaf,d2154254be252e34c441f22a43c69cba01e2fcaf,"Cluster: fix case for getKeysInSlot() and countKeysInSlot().

Redis functions start in low case. A few functions about cluster were
capitalized the wrong way."
antirez,2013-02-25 10:23:04,https://api.github.com/repos/antirez/redis/git/commits/c2eb4a606f5bf534de6b6f68ed4051afdd5e3aa1,c2eb4a606f5bf534de6b6f68ed4051afdd5e3aa1,Cluster: use CountKeysInSlot() when we just need the count.
antirez,2013-02-25 10:20:17,https://api.github.com/repos/antirez/redis/git/commits/ad3bca1fdf68db5276d5b7457d542bcdd72e7622,ad3bca1fdf68db5276d5b7457d542bcdd72e7622,"Cluster: added stub for verifyClusterConfigWithData().

See the top-comment for the function in this commit for details about
what the function is supposed to do."
antirez,2013-02-25 10:15:03,https://api.github.com/repos/antirez/redis/git/commits/1abce14611e01b38e0b461a12a01ce71b35a6342,1abce14611e01b38e0b461a12a01ce71b35a6342,"Cluster: added new API countKeysInSlot().

This is similar to getKeysInSlot() but just returns the number of keys
found in a given hash slot, without returning the keys."
0x20h,2013-02-24 16:43:56,https://api.github.com/repos/antirez/redis/git/commits/977035b7b509310497cad25e0256d6d3bdafbc63,977035b7b509310497cad25e0256d6d3bdafbc63,suppress external diff program when using git diff.
antirez,2013-02-22 18:24:01,https://api.github.com/repos/antirez/redis/git/commits/825e07f2fd8949cffabcc0d5800ea46778dddafd,825e07f2fd8949cffabcc0d5800ea46778dddafd,"Cluster: if no previous config exists, create the myself node as master."
antirez,2013-02-22 18:20:38,https://api.github.com/repos/antirez/redis/git/commits/f4093753e495799d2473f40cee29d5e47878372a,f4093753e495799d2473f40cee29d5e47878372a,Cluster: add cluster_size field in CLUSTER INFO output.
antirez,2013-02-22 18:18:30,https://api.github.com/repos/antirez/redis/git/commits/d218a4e2447feb18af59e702df8ea3815d55a375,d218a4e2447feb18af59e702df8ea3815d55a375,"Cluster: new state information, cluster size.

The definition of cluster size is: the number of known nodes in the
cluster that are masters and serving at least an hash slot."
antirez,2013-02-22 16:45:49,https://api.github.com/repos/antirez/redis/git/commits/5c55ed9388988fe4bb1035a98b5e6821fa256c49,5c55ed9388988fe4bb1035a98b5e6821fa256c49,Cluster: remove warning adding clusterNodeSetSlotBit() prototype.
antirez,2013-02-22 16:43:35,https://api.github.com/repos/antirez/redis/git/commits/974929770b49491d108da4ab1a0f7134b4011697,974929770b49491d108da4ab1a0f7134b4011697,"Cluster: introduced a failure reports system.

A §Redis Cluster node used to mark a node as failing when itself
detected a failure for that node, and a single acknowledge was received
about the possible failure state.

The new API will be used in order to possible to require that N other
nodes have a PFAIL or FAIL state for a given node for a node to set it
as failing."
antirez,2013-02-22 11:25:16,https://api.github.com/repos/antirez/redis/git/commits/36af851550b7aedf7a3fafaaa1331ffb9747b16e,36af851550b7aedf7a3fafaaa1331ffb9747b16e,redis-trib: check that all the nodes agree about the slots configuration.
antirez,2013-02-22 10:33:10,https://api.github.com/repos/antirez/redis/git/commits/51b5058d04233bce24927ac233d68cfdfda2cfb9,51b5058d04233bce24927ac233d68cfdfda2cfb9,"redis-trib: skeleton of coverage fix for ""keys in multiple nodes"" case."
antirez,2013-02-22 09:23:53,https://api.github.com/repos/antirez/redis/git/commits/a81c598f9550a83f32981cdf1026b0bd2c8d19e6,a81c598f9550a83f32981cdf1026b0bd2c8d19e6,"redis-trib: handle slot coverage fix in the ""no nodes with keys"" case."
antirez,2013-02-22 09:16:21,https://api.github.com/repos/antirez/redis/git/commits/392e0fa7eba81eb54a64dfc275592bf2086608ee,392e0fa7eba81eb54a64dfc275592bf2086608ee,Cluster: fix case of slotToKey...() functions.
antirez,2013-02-22 09:15:32,https://api.github.com/repos/antirez/redis/git/commits/d04770988d5cbbf5134935245ea720d176a11fd4,d04770988d5cbbf5134935245ea720d176a11fd4,Cluster: empty the internal sorted set mapping keys to slots on FLUSHDB/ALL.
antirez,2013-02-22 09:05:07,https://api.github.com/repos/antirez/redis/git/commits/efe51dfff51caf81c4731ea41cb14bfc55b411f2,efe51dfff51caf81c4731ea41cb14bfc55b411f2,redis-trib: specify single node address when fixing coverage.
antirez,2013-02-21 17:10:06,https://api.github.com/repos/antirez/redis/git/commits/915e81335e773aca5b0e16c4268ddab1ed9314ad,915e81335e773aca5b0e16c4268ddab1ed9314ad,redis-trib: ability to fix uncovered slots for the trivial case.
antirez,2013-02-21 15:58:27,https://api.github.com/repos/antirez/redis/git/commits/619d3945f88a6574014692af5c50825b02d20ace,619d3945f88a6574014692af5c50825b02d20ace,redis-trib: fixed typo in method name.
antirez,2013-02-21 15:52:06,https://api.github.com/repos/antirez/redis/git/commits/07b63227358164dc872d9a869af38ec71b6529fc,07b63227358164dc872d9a869af38ec71b6529fc,Cluster: more correct update of slots state when PONG is received.
antirez,2013-02-21 15:31:22,https://api.github.com/repos/antirez/redis/git/commits/c6da9d9fac86a239e1381e9aa90cfedd08fa5511,c6da9d9fac86a239e1381e9aa90cfedd08fa5511,Call clusterUpdateState() after CLUSTER SETSLOT too.
antirez,2013-02-21 15:24:48,https://api.github.com/repos/antirez/redis/git/commits/3a99d1228ae1d15897bbdd713d72e6394e0684c0,3a99d1228ae1d15897bbdd713d72e6394e0684c0,Aesthetic change to make a line more 80-cols friendly.
antirez,2013-02-21 12:06:59,https://api.github.com/repos/antirez/redis/git/commits/5fd9f701da8612f70fd120fde26e39df89924452,5fd9f701da8612f70fd120fde26e39df89924452,redis-trib: move instance vars in the right class.
antirez,2013-02-21 12:00:41,https://api.github.com/repos/antirez/redis/git/commits/7898bf4b7ec636bf2c61a0d56e13ce63a781781b,7898bf4b7ec636bf2c61a0d56e13ce63a781781b,"redis-trib: some refactoring and skeleton of the ""fix"" command."
antirez,2013-02-21 10:51:17,https://api.github.com/repos/antirez/redis/git/commits/dc4af6062897abb8b2b4dc8c754e64a640992ce0,dc4af6062897abb8b2b4dc8c754e64a640992ce0,Cluster: clusterAddSlot() was not doing what stated in the comment.
antirez,2013-02-21 10:44:58,https://api.github.com/repos/antirez/redis/git/commits/fdb57233e2ab021329fd18f1a1f94819e54f4744,fdb57233e2ab021329fd18f1a1f94819e54f4744,Cluster: always use cluster(Add|Del)Slot to modify the cluster slots table.
antirez,2013-02-20 16:36:54,https://api.github.com/repos/antirez/redis/git/commits/786b8d6c87a5e4d17b709df8095f0e7c45638944,786b8d6c87a5e4d17b709df8095f0e7c45638944,Use RESTORE-ASKING for MIGRATE when in cluster mode.
antirez,2013-02-20 16:28:35,https://api.github.com/repos/antirez/redis/git/commits/ea7fc82a4a89d5d28217bcc751675d5f91e06db0,ea7fc82a4a89d5d28217bcc751675d5f91e06db0,"Cluster: new command flag forcing implicit ASKING.

Also using this new flag the RESTORE-ASKING command was implemented that
will be used by MIGRATE."
antirez,2013-02-20 16:07:52,https://api.github.com/repos/antirez/redis/git/commits/9ec1b709f51b05df6e4ca1637bd5143d585418ab,9ec1b709f51b05df6e4ca1637bd5143d585418ab,"Cluster: ASKING command fixed, state was not retained."
antirez,2013-02-20 14:29:44,https://api.github.com/repos/antirez/redis/git/commits/b8d8b9ec4130fcb275d3b63b733f1bb8050a579d,b8d8b9ec4130fcb275d3b63b733f1bb8050a579d,redis-trib: set the migrating slot in the correct way when resharding.
antirez,2013-02-20 12:18:51,https://api.github.com/repos/antirez/redis/git/commits/9a04e12cc08623c0fbf6c704ea3a60b3be0b96f5,9a04e12cc08623c0fbf6c704ea3a60b3be0b96f5,Cluster: I/O errors are now logged at DEBUG level.
antirez,2013-02-15 16:11:55,https://api.github.com/repos/antirez/redis/git/commits/917dd532161981fef8e7e180a95086c4180eda72,917dd532161981fef8e7e180a95086c4180eda72,redis-trib: make a few comments 80-cols friendly.
antirez,2013-02-15 15:53:24,https://api.github.com/repos/antirez/redis/git/commits/455da35c7f34a6f1e36d862ed6466a34948f3b4f,455da35c7f34a6f1e36d862ed6466a34948f3b4f,Cluster: specific error code for cluster down condition.
antirez,2013-02-15 15:45:04,https://api.github.com/repos/antirez/redis/git/commits/522c3255db7642d97ed823ec1b3bab66771f5167,522c3255db7642d97ed823ec1b3bab66771f5167,Merge branch 'unstable' of github.com:antirez/redis into unstable
antirez,2013-02-15 15:44:39,https://api.github.com/repos/antirez/redis/git/commits/02796ba7a78fbc9b98926dbbdc981266780dc297,02796ba7a78fbc9b98926dbbdc981266780dc297,Cluster: sanity checks on the cluster bus message length.
antirez,2013-02-15 12:12:55,https://api.github.com/repos/antirez/redis/git/commits/8853698a6fededba4db8b8c2dc1bc94f425db823,8853698a6fededba4db8b8c2dc1bc94f425db823,Removed useless newlines from hashTypeCurrentObject().
antirez,2013-02-15 11:58:35,https://api.github.com/repos/antirez/redis/git/commits/6b9c6618384ef9fe8ea8054ec82c094ba1f69369,6b9c6618384ef9fe8ea8054ec82c094ba1f69369,Cluster: make valgrind happy initializing all the bytes of the node IP.
antirez,2013-02-15 10:57:53,https://api.github.com/repos/antirez/redis/git/commits/7371d5e2489e355e2209db157cc774a8dc1be9f4,7371d5e2489e355e2209db157cc774a8dc1be9f4,"Remove wrong decrRefCount() from getNodeByQuery().

This fixes issue #607."
antirez,2013-02-15 10:50:54,https://api.github.com/repos/antirez/redis/git/commits/20f52b5b78499a1bc35cb7176434c510fe3ef1e3,20f52b5b78499a1bc35cb7176434c510fe3ef1e3,Top comment for getNodeByQuery() improved.
antirez,2013-02-14 17:49:08,https://api.github.com/repos/antirez/redis/git/commits/6b641f3aeb03b1608eb8b435f9e06c3f8b04773e,6b641f3aeb03b1608eb8b435f9e06c3f8b04773e,redis-cli: update prompt on cluster redirection.
antirez,2013-02-14 14:36:33,https://api.github.com/repos/antirez/redis/git/commits/e0e15bd06dc3ea129403ae54b9acc3969bc87024,e0e15bd06dc3ea129403ae54b9acc3969bc87024,Cluster: with 16384 slots we need bigger buffers.
antirez,2013-02-14 14:20:02,https://api.github.com/repos/antirez/redis/git/commits/1a32d99b28a8d8cd43e1550b2fbe75b4c53b9fc0,1a32d99b28a8d8cd43e1550b2fbe75b4c53b9fc0,"Cluster: move cluster config file out of config state.

This makes us able to avoid allocating the cluster state structure if
cluster is not enabled, but still we can handle the configuration
directive that sets the cluster config filename."
antirez,2013-02-14 12:20:56,https://api.github.com/repos/antirez/redis/git/commits/1649e509c303adc5e17ff31d61203db901488e58,1649e509c303adc5e17ff31d61203db901488e58,Cluster: the cluster state structure is now heap allocated.
antirez,2013-02-14 12:01:28,https://api.github.com/repos/antirez/redis/git/commits/9dfd11c3da4caf068f3cd08047a1094714d9c247,9dfd11c3da4caf068f3cd08047a1094714d9c247,Cluster: Initialize ip and port in createClusterNode().
antirez,2013-02-14 11:55:34,https://api.github.com/repos/antirez/redis/git/commits/a26690e8b574aa60153655fb555004c7d48a299e,a26690e8b574aa60153655fb555004c7d48a299e,Cluster: redis-trib updated to use 16384 hash slots.
antirez,2013-02-14 11:49:16,https://api.github.com/repos/antirez/redis/git/commits/ebd666db472982391ad8663ddc95e55ed730775b,ebd666db472982391ad8663ddc95e55ed730775b,Cluster: from 4096 to 16384 hash slots.
antirez,2013-02-13 17:43:40,https://api.github.com/repos/antirez/redis/git/commits/072c91fe133a9aec0439c2aa3d4045d86676224a,072c91fe133a9aec0439c2aa3d4045d86676224a,PSYNC: another change to unexpected reply from PSYNC.
antirez,2013-02-13 17:33:33,https://api.github.com/repos/antirez/redis/git/commits/0e1be5347bc30f10f6a7e2190e6c1cb13304f465,0e1be5347bc30f10f6a7e2190e6c1cb13304f465,PSYNC: More robust handling of unexpected reply to PSYNC.
antirez,2013-02-13 12:38:20,https://api.github.com/repos/antirez/redis/git/commits/7404b958339ebe2101965d8c890b38dcc0e4abfd,7404b958339ebe2101965d8c890b38dcc0e4abfd,Avoid compiler warning by casting to match printf() specifier.
antirez,2013-02-12 15:53:27,https://api.github.com/repos/antirez/redis/git/commits/3419c8ce70ea17783dd681b9c51e82b28ddb6aa9,3419c8ce70ea17783dd681b9c51e82b28ddb6aa9,Replication: more strict error checking for master PING reply.
antirez,2013-02-12 15:25:41,https://api.github.com/repos/antirez/redis/git/commits/dc24a6b132f268c83e42683340223ce6e970f340,dc24a6b132f268c83e42683340223ce6e970f340,Return a specific NOAUTH error if authentication is required.
antirez,2013-02-12 14:24:25,https://api.github.com/repos/antirez/redis/git/commits/24f258360b622ab361674f7bc2878a8fda0eb8e1,24f258360b622ab361674f7bc2878a8fda0eb8e1,Replication: added new stats counting full and partial resynchronizations.
antirez,2013-02-12 12:27:24,https://api.github.com/repos/antirez/redis/git/commits/ac8c89cb20203b9e0545f2306565efe6381546bb,ac8c89cb20203b9e0545f2306565efe6381546bb,Test: avoid false positives in CLIENT SETNAME closed connection test.
antirez,2013-02-12 11:59:15,https://api.github.com/repos/antirez/redis/git/commits/7f9bc42f1717ba2b6f8cabf2d196b0d906859dca,7f9bc42f1717ba2b6f8cabf2d196b0d906859dca,Merge remote-tracking branch 'origin/unstable' into unstable
antirez,2013-02-12 11:56:32,https://api.github.com/repos/antirez/redis/git/commits/04bdb3a2a4483ee58d17403bb5387c34c3d3cbf6,04bdb3a2a4483ee58d17403bb5387c34c3d3cbf6,Add missing bracket removed for error after rebase of PSYNC.
antirez,2013-02-09 15:33:57,https://api.github.com/repos/antirez/redis/git/commits/3af478e9ef7657297241b5203a1ecc318e223a14,3af478e9ef7657297241b5203a1ecc318e223a14,PSYNC: debugging printf() calls are now logs at DEBUG level.
antirez,2013-02-01 14:28:02,https://api.github.com/repos/antirez/redis/git/commits/89b48f0825eb042e08043b6e11847ff9d3b15e46,89b48f0825eb042e08043b6e11847ff9d3b15e46,Remove harmless warning in slaveTryPartialResynchronization().
antirez,2013-02-01 14:16:56,https://api.github.com/repos/antirez/redis/git/commits/0ed6daa48bf221de231b6ed953c0f230a3bfacb8,0ed6daa48bf221de231b6ed953c0f230a3bfacb8,"PSYNC: don't use the client buffer to send +CONTINUE and +FULLRESYNC.

When we are preparing an handshake with the slave we can't touch the
connection buffer as it'll be used to accumulate differences between
the sent RDB file and what arrives next from clients.

So in short we can't use addReply() family functions.

However we just use write(2) because we know that the socket buffer is
empty, since a prerequisite for SYNC to work is that the static buffer
and the output list are empty, and in general it is not expected that a
client SYNCs after doing some heavy I/O with the master.

However a short write connection is explicitly handled to avoid
fragility (we simply close the connection and the slave will retry)."
antirez,2013-02-01 14:05:43,https://api.github.com/repos/antirez/redis/git/commits/d2a0348a490ab2f3edc07f9ba4098f6e06bfefd1,d2a0348a490ab2f3edc07f9ba4098f6e06bfefd1,SYNC not allowed with pending data on the static output buffer.
antirez,2013-02-01 12:01:01,https://api.github.com/repos/antirez/redis/git/commits/da315d3325eae646b88f49cac3bd4b4f2bd582aa,da315d3325eae646b88f49cac3bd4b4f2bd582aa,Log the unexpected string received in place of the SYNC payload length.
antirez,2013-01-31 15:33:26,https://api.github.com/repos/antirez/redis/git/commits/41d64a75169a6ddfb9f27a720579f3615c13610f,41d64a75169a6ddfb9f27a720579f3615c13610f,After SLAVEOF <newslave> don't allow chained slaves to PSYNC.
antirez,2013-01-30 17:33:16,https://api.github.com/repos/antirez/redis/git/commits/078882025ea50e0ed888713fba8ce28299de626a,078882025ea50e0ed888713fba8ce28299de626a,"PSYNC: work in progress, preview #2, rebased to unstable."
antirez,2012-11-03 11:15:29,https://api.github.com/repos/antirez/redis/git/commits/e34a35a51194650ce7ef7df1047012c7eaad2957,e34a35a51194650ce7ef7df1047012c7eaad2957,"Use the new unified protocol to send SELECT to slaves.

SELECT was still transmitted to slaves using the inline protocol, that
is conceived mostly for humans to type into telnet sessions, and is
notably not understood by redis-cli --slave.

Now the new protocol is used instead."
antirez,2012-11-03 10:56:28,https://api.github.com/repos/antirez/redis/git/commits/4b83ad4e1f92ec9ccc4db7cf4c6c1ac949bf5bca,4b83ad4e1f92ec9ccc4db7cf4c6c1ac949bf5bca,"Use replicationFeedSlaves() to send PING to slaves.

A Redis master sends PING commands to slaves from time to time: doing
this ensures that even if absence of writes, the master->slave channel
remains active and the slave can feel the master presence, instead of
closing the connection for timeout.

This commit changes the way PINGs are sent to slaves in order to use the
standard interface used to replicate all the other commands, that is,
the function replicationFeedSlaves().

With this change the stream of commands sent to every slave is exactly
the same regardless of their exact state (Transferring RDB for first
synchronization or slave already online). With the previous
implementation the PING was only sent to online slaves, with the result
that the output stream from master to slaves was not identical for all
the slaves: this is a problem if we want to implement partial resyncs in
the future using a global replication stream offset.

TL;DR: this commit should not change the behaviour in practical terms,
but is just something in preparation for partial resynchronization
support."
antirez,2012-11-02 15:31:28,https://api.github.com/repos/antirez/redis/git/commits/7465ac7ab131c56ed3ed9f576e80758421eb03f5,7465ac7ab131c56ed3ed9f576e80758421eb03f5,"Emit SELECT to slaves in a centralized way.

Before this commit every Redis slave had its own selected database ID
state. This was not actually useful as the emitted stream of commands
is identical for all the slaves.

Now the the currently selected database is a global state that is set to
-1 when a new slave is attached, in order to force the SELECT command to
be re-emitted for all the slaves.

This change is useful in order to implement replication partial
resynchronization in the future, as makes sure that the stream of
commands received by slaves, including SELECT commands, are exactly the
same for every slave connected, at any time.

In this way we could have a global offset that can identify a specific
piece of the master -> slaves stream of commands."
antirez,2013-02-12 09:30:39,https://api.github.com/repos/antirez/redis/git/commits/3043f890a5581d0847cb03f12d3e85039a15cd95,3043f890a5581d0847cb03f12d3e85039a15cd95,"Merge pull request #941 from svnpenn/patch-1

Format to fit 80 columns"
antirez,2013-02-11 11:11:21,https://api.github.com/repos/antirez/redis/git/commits/1a27d411563767ba94a940c56cfc044debeb7539,1a27d411563767ba94a940c56cfc044debeb7539,Makefile: valgrind target added (forces -O0 and libc malloc).
antirez,2013-02-09 00:17:59,https://api.github.com/repos/antirez/redis/git/commits/93ae95de744d46953540ea960b9e89b2d177556e,93ae95de744d46953540ea960b9e89b2d177556e,TCP keep-alive. Better documentation in redis.conf.
cup,2013-02-08 18:11:06,https://api.github.com/repos/antirez/redis/git/commits/3244d8bc0cd37b0d68c191ed35dafa26596f9e7e,3244d8bc0cd37b0d68c191ed35dafa26596f9e7e,"Format to fit 80 columns

This makes it readable on GitHub and editors without auto wrapping."
antirez,2013-02-08 16:06:01,https://api.github.com/repos/antirez/redis/git/commits/76a5b21c3a319ae1ba4ef8f4f12207a813e43b51,76a5b21c3a319ae1ba4ef8f4f12207a813e43b51,"Tcp keep-alive: send three probes before detectin an error.

Otherwise we end with less reliable connections because it's too easy
that a single packet gets lost."
antirez,2013-02-08 16:03:11,https://api.github.com/repos/antirez/redis/git/commits/98b1a852b401a719e76343ec2ae260e257dfd9b6,98b1a852b401a719e76343ec2ae260e257dfd9b6,tcp-keepalive option documented in redis.conf.
antirez,2013-02-08 15:40:59,https://api.github.com/repos/antirez/redis/git/commits/124a635bc533f24fc4ff29c0e98c4657ab83cace,124a635bc533f24fc4ff29c0e98c4657ab83cace,Set SO_KEEPALIVE on client sockets if configured to do so.
antirez,2013-02-08 15:30:21,https://api.github.com/repos/antirez/redis/git/commits/ee21c18e5d2e897204a92eb75469307a9ca8ba1e,ee21c18e5d2e897204a92eb75469307a9ca8ba1e,Add SO_KEEPALIVE support to anet.c.
antirez,2013-02-08 09:26:19,https://api.github.com/repos/antirez/redis/git/commits/a6c2f9012fb3668a583a84db4fb6e0c5b42d757a,a6c2f9012fb3668a583a84db4fb6e0c5b42d757a,Make all WATCHers dirty when the slave reloads the DB.
antirez,2013-02-07 18:13:00,https://api.github.com/repos/antirez/redis/git/commits/46dd4c62b39d1c8a22647da3dda8bae2c4999036,46dd4c62b39d1c8a22647da3dda8bae2c4999036,"LASTSAVE is a ""random"" command."
antirez,2013-01-31 10:14:15,https://api.github.com/repos/antirez/redis/git/commits/b70b459b0eeea3158984ad89345a461cfe9f2818,b70b459b0eeea3158984ad89345a461cfe9f2818,TCP_NODELAY after SYNC: changes to the implementation.
charsyam,2013-01-31 03:09:16,https://api.github.com/repos/antirez/redis/git/commits/c85647f35428770518ccf7f95ae5913f20fe1898,c85647f35428770518ccf7f95ae5913f20fe1898,"Turn off TCP_NODELAY on the slave socket after SYNC.

Further details from @antirez:

It was reported by @StopForumSpam on Twitter that the Redis replication
link was strangely using multiple TCP packets for multiple commands.
This wastes a lot of bandwidth and is due to the TCP_NODELAY option we
enable on the socket after accepting a new connection.

However the master -> slave channel is a one-way channel since Redis
replication is asynchronous, so there is no point in trying to reduce
the latency, we should aim to reduce the bandwidth. For this reason this
commit introduces the ability to disable the nagle algorithm on the
socket after a successful SYNC.

This feature is off by default because the delay can be up to 40
milliseconds with normally configured Linux kernels."
antirez,2013-02-05 11:02:36,https://api.github.com/repos/antirez/redis/git/commits/fd7350b0846065ae1b92eb5f30db7d3b7a8c6847,fd7350b0846065ae1b92eb5f30db7d3b7a8c6847,Test: No clients timeout while testing.
antirez,2013-02-05 10:43:56,https://api.github.com/repos/antirez/redis/git/commits/bb7aa1772c69ed128f8f33a9dce457736a67031f,bb7aa1772c69ed128f8f33a9dce457736a67031f,"Merge pull request #906 from jbergstroem/tclsh-agnostic

Make redis test suite tcl version agnostic, v2"
antirez,2013-02-05 09:48:49,https://api.github.com/repos/antirez/redis/git/commits/58463e05051ef30afdb20eac28b3344b3132ba94,58463e05051ef30afdb20eac28b3344b3132ba94,"Merge pull request #933 from RockLi/unstable

retval doesn't initalized"
antirez,2013-02-04 09:32:31,https://api.github.com/repos/antirez/redis/git/commits/f95b393603acb9a19ceb1814bded19c417e07c9d,f95b393603acb9a19ceb1814bded19c417e07c9d,"Merge pull request #928 from davidcelis/unstable

Fix a few typos and improve grammar of redis.conf"
antirez,2013-02-04 09:21:18,https://api.github.com/repos/antirez/redis/git/commits/74f4f29880b4a41e01554c7d5119c5ad50aa3f5b,74f4f29880b4a41e01554c7d5119c5ad50aa3f5b,"Merge pull request #929 from ltnwgl/unstable

Fix a bug in srandmemberWithCountCommand()"
gengliangwang,2013-02-04 06:01:08,https://api.github.com/repos/antirez/redis/git/commits/002747336a37b72b84503848a3f7f4f8cbc414cf,002747336a37b72b84503848a3f7f4f8cbc414cf,"Fix a bug in srandmemberWithCountCommand()

In CASE 2, the call sunionDiffGenericCommand will involve the string ""srandmember"" 
> sadd foo one
(integer 1)
> sadd srandmember two
(integer 2)
> srandmember foo 3
1)""one""
2)""two"""
davidcelis,2013-02-03 19:40:07,https://api.github.com/repos/antirez/redis/git/commits/81144645b478bcc04cb79b6651df72c148ba3c53,81144645b478bcc04cb79b6651df72c148ba3c53,"Fix a few typos and improve grammar of redis.conf

Make several edits to the example redis.conf configuration file for
improved flow and grammar.

Signed-off-by: David Celis <me@davidcel.is>"
antirez,2013-01-31 16:19:21,https://api.github.com/repos/antirez/redis/git/commits/089cbe643f3922aec26d483548e14c8d10f74e0c,089cbe643f3922aec26d483548e14c8d10f74e0c,Sentinel: advertise the promoted slave address only after successful setup.
antirez,2013-01-31 11:37:48,https://api.github.com/repos/antirez/redis/git/commits/aca005c246bdf6ba294c743d115d1c5b8bfbcc98,aca005c246bdf6ba294c743d115d1c5b8bfbcc98,"Merge pull request #914 from catwell/unstable

fix comments forgotten in #285 (zipmap -> ziplist)"
antirez,2013-01-29 12:50:01,https://api.github.com/repos/antirez/redis/git/commits/ad297a1a6782905394cb56b00ed6dbd08707fb04,ad297a1a6782905394cb56b00ed6dbd08707fb04,Z*STORE event fixed: generate del only if resulting sorted set is empty.
antirez,2013-01-29 12:43:13,https://api.github.com/repos/antirez/redis/git/commits/e41d1d77e3f731cfe9133a94ea441de7ebc9f105,e41d1d77e3f731cfe9133a94ea441de7ebc9f105,Generate del events when S*STORE commands delete the destination key.
antirez,2013-01-28 12:04:23,https://api.github.com/repos/antirez/redis/git/commits/d2b27f1d96a60bcfad48c5ae659741241559662b,d2b27f1d96a60bcfad48c5ae659741241559662b,Tests for keyspace notifications.
antirez,2013-01-28 12:00:03,https://api.github.com/repos/antirez/redis/git/commits/4dfb5752e0714228ff6fb0a2728ee03638ac232f,4dfb5752e0714228ff6fb0a2728ee03638ac232f,Send 'expired' events when a key expires by lookup.
antirez,2013-01-25 16:34:52,https://api.github.com/repos/antirez/redis/git/commits/562b2bd6a7d6e8ee893d68059360b593ed43352f,562b2bd6a7d6e8ee893d68059360b593ed43352f,Keyspace notifications: fixed a leak and a bug introduced in the latest commit.
antirez,2013-01-25 12:19:08,https://api.github.com/repos/antirez/redis/git/commits/fce016d31bc11ff19de1f1ff216e4a0588fea3ac,fce016d31bc11ff19de1f1ff216e4a0588fea3ac,"Keyspace events: it is now possible to select subclasses of events.

When keyspace events are enabled, the overhead is not sever but
noticeable, so this commit introduces the ability to select subclasses
of events in order to avoid to generate events the user is not
interested in.

The events can be selected using redis.conf or CONFIG SET / GET."
antirez,2013-01-25 10:16:00,https://api.github.com/repos/antirez/redis/git/commits/1c0c551776bf2afae9314373012985db9b19bb03,1c0c551776bf2afae9314373012985db9b19bb03,decrRefCount -> decrRefCountVoid in list constructor.
antirez,2013-01-24 15:27:48,https://api.github.com/repos/antirez/redis/git/commits/40f822da739a061597139770f355ec8db45cade7,40f822da739a061597139770f355ec8db45cade7,Enable keyspace events notification when testing.
antirez,2013-01-24 15:20:53,https://api.github.com/repos/antirez/redis/git/commits/da04e6ed44bf80c5e2fe282522f924e8f55921cb,da04e6ed44bf80c5e2fe282522f924e8f55921cb,Keyspace events added for more commands.
antirez,2013-01-24 10:27:10,https://api.github.com/repos/antirez/redis/git/commits/8766e81079dd4e26b0f5e1b04b8fc319b8d13eb7,8766e81079dd4e26b0f5e1b04b8fc319b8d13eb7,"Fix decrRefCount() prototype from void to robj pointer.

decrRefCount used to get its argument as a void* pointer in order to be
used as destructor where a 'void free_object(void*)' prototype is
expected. However this made simpler to introduce bugs by freeing the
wrong pointer. This commit fixes the argument type and introduces a new
wrapper called decrRefCountVoid() that can be used when the void*
argument is needed."
antirez,2013-01-24 10:24:40,https://api.github.com/repos/antirez/redis/git/commits/2d20e68fe492b65fcf36af070b9701a9009e57f0,2d20e68fe492b65fcf36af070b9701a9009e57f0,notifyKeyspaceEvent(): release channel names using the right pointers.
antirez,2013-01-23 16:04:18,https://api.github.com/repos/antirez/redis/git/commits/5b9357a6b3b22bad794931bb71f56c612d6e7aac,5b9357a6b3b22bad794931bb71f56c612d6e7aac,Initial test events for the new keyspace notification API.
antirez,2013-01-23 15:44:45,https://api.github.com/repos/antirez/redis/git/commits/2ea9518a530bf64cfe3b6e124f67efc1d355240f,2ea9518a530bf64cfe3b6e124f67efc1d355240f,Fixed over-80-cols comment in db.c
antirez,2013-01-23 15:38:47,https://api.github.com/repos/antirez/redis/git/commits/08d8bb57df97f9ab206dbc229a64c4f9fe7ffc4d,08d8bb57df97f9ab206dbc229a64c4f9fe7ffc4d,Two fixes to initial keyspace notifications API.
antirez,2013-01-23 15:23:33,https://api.github.com/repos/antirez/redis/git/commits/4cdbce341ebff64d392a42011f4a9258f8aa834f,4cdbce341ebff64d392a42011f4a9258f8aa834f,Keyspace events notification API.
catwell,2013-01-28 10:07:17,https://api.github.com/repos/antirez/redis/git/commits/50d43a9823be553a393127bc45e507d3a60982d7,50d43a9823be553a393127bc45e507d3a60982d7,fix comments forgotten in #285 (zipmap -> ziplist)
jbergstroem,2013-01-23 22:37:18,https://api.github.com/repos/antirez/redis/git/commits/1154283577e94eb487df725196e17847ae684497,1154283577e94eb487df725196e17847ae684497,Use `info nameofexectuable`  to find current executable
jbergstroem,2013-01-23 22:36:59,https://api.github.com/repos/antirez/redis/git/commits/acb046773d5fe08f4c457c25e8a3eb71bb398d08,acb046773d5fe08f4c457c25e8a3eb71bb398d08,Enforce tcl 8.5 or newer
jbergstroem,2013-01-23 22:25:47,https://api.github.com/repos/antirez/redis/git/commits/a405979f5f6b4bbf36ab30543bd418461794918a,a405979f5f6b4bbf36ab30543bd418461794918a,Check available tcl versions
antirez,2013-01-23 09:48:59,https://api.github.com/repos/antirez/redis/git/commits/61853a9c758bc9d368d4610c0f89387c95b9301d,61853a9c758bc9d368d4610c0f89387c95b9301d,"Lua struct library updated to version 0.2.

There was a bug in the previous version of this library that caused a
crash under the circumstances described in issue #901.

The newer version of the library appears to be fixed (I tested it
manually with valgrind and everything seems fine now).

For more information about this library please visit this web site:

    http://www.inf.puc-rio.br/~roberto/struct/"
antirez,2013-01-21 18:15:51,https://api.github.com/repos/antirez/redis/git/commits/88015b89a0578a1d96fbd8890505c7f4469374fe,88015b89a0578a1d96fbd8890505c7f4469374fe,redis-cli --bigkeys output is now simpler to understand.
antirez,2013-01-21 17:50:16,https://api.github.com/repos/antirez/redis/git/commits/2039f1a38ac23311abc71fc7d862d9e5b22598c6,2039f1a38ac23311abc71fc7d862d9e5b22598c6,"UNSUBSCRIBE and PUNSUBSCRIBE: always provide a reply.

UNSUBSCRIBE and PUNSUBSCRIBE commands are designed to mass-unsubscribe
the client respectively all the channels and patters if called without
arguments.

However when these functions are called without arguments, but there are
no channels or patters we are subscribed to, the old behavior was to
don't reply at all.

This behavior is broken, as every command should always reply.
Also it is possible that we are no longer subscribed to a channels but we
are subscribed to patters or the other way around, and the client should
be notified with the correct number of subscriptions.

Also it is not pretty that sometimes we did not receive a reply at all
in a redis-cli session from these commands, blocking redis-cli trying
to read the reply.

This fixes issue #714."
antirez,2013-01-21 11:34:22,https://api.github.com/repos/antirez/redis/git/commits/93f61bb2a492cf008e353db951275ba0b12490dc,93f61bb2a492cf008e353db951275ba0b12490dc,"Fixed a bug in memtest progress bar, that had no actual effects.

This closes issue #859, thanks to @erbenmo."
antirez,2013-01-21 11:19:02,https://api.github.com/repos/antirez/redis/git/commits/442235fe40162632f3ac27b575b3fd11fc59a560,442235fe40162632f3ac27b575b3fd11fc59a560,"Merge pull request #869 from bilalhusain/patch-2

s/adiacent/adjacent/"
antirez,2013-01-21 11:12:03,https://api.github.com/repos/antirez/redis/git/commits/6db93e6740936f6ee6f8bf90d04a30f77dbf265d,6db93e6740936f6ee6f8bf90d04a30f77dbf265d,"Merge pull request #883 from deepsolo9/fix-typos-deepsolo9

fixed some typos in Redis.c"
antirez,2013-01-21 11:11:25,https://api.github.com/repos/antirez/redis/git/commits/4698f6756bc9cdb78dc2841ec33871ecf6b20372,4698f6756bc9cdb78dc2841ec33871ecf6b20372,"Merge pull request #884 from kaerast/patch-1

Typo in sentinel.conf"
antirez,2013-01-21 11:06:54,https://api.github.com/repos/antirez/redis/git/commits/cd892d015d3c870f0fb4e8449cfceeacc1191966,cd892d015d3c870f0fb4e8449cfceeacc1191966,"Not every __sun has backtrace().

I don't know how to test for Open Solaris that has support for
backtrace() so for now removing the #ifdef that breaks compilation under
other Solaris flavors."
antirez,2013-01-19 12:46:14,https://api.github.com/repos/antirez/redis/git/commits/e50cdbe461263db87f910ce963c3e6a222c91835,e50cdbe461263db87f910ce963c3e6a222c91835,Additionally two typos fixed thanks to @jodal
antirez,2013-01-14 09:29:14,https://api.github.com/repos/antirez/redis/git/commits/79a0ef62db890c007166a2c09d11691923236716,79a0ef62db890c007166a2c09d11691923236716,"Whitelist SIGUSR1 to avoid auto-triggering errors.

This commit fixes issue #875 that was caused by the following events:

1) There is an active child doing BGSAVE.
2) flushall is called (or any other condition that makes Redis killing
the saving child process).
3) An error is sensed by Redis as the child exited with an error (killed
by a singal), that stops accepting write commands until a BGSAVE happens
to be executed with success.

Whitelisting SIGUSR1 and making sure Redis always uses this signal in
order to kill its own children fixes the issue."
antirez,2013-01-19 12:19:41,https://api.github.com/repos/antirez/redis/git/commits/ab247fc1763be83781c14336ebd11a2a42e7ad20,ab247fc1763be83781c14336ebd11a2a42e7ad20,"Clear server.shutdown_asap on failed shutdown.

When a SIGTERM is received Redis schedules a shutdown. However if it
fails to perform the shutdown it must be clear the shutdown_asap flag
otehrwise it will try again and again possibly making the server
unusable."
antirez,2013-01-19 11:52:05,https://api.github.com/repos/antirez/redis/git/commits/08d200baeb816ecc7725a9252d0442fb8337b734,08d200baeb816ecc7725a9252d0442fb8337b734,"Slowlog: don't log EXEC but just the executed commands.

The Redis Slow Log always used to log the slow commands executed inside
a MULTI/EXEC block. However also EXEC was logged at the end, which is
perfectly useless.

Now EXEC is no longer logged and a test was added to test this behavior.

This fixes issue #759."
guiquanz,2013-01-16 17:00:20,https://api.github.com/repos/antirez/redis/git/commits/9d09ce3981deb58282ae47c87e1080936f04991f,9d09ce3981deb58282ae47c87e1080936f04991f,Fixed many typos.
antirez,2013-01-19 09:32:28,https://api.github.com/repos/antirez/redis/git/commits/61dfc2e5217361b21258ae0cc408e9b719c8565e,61dfc2e5217361b21258ae0cc408e9b719c8565e,"Merge pull request #887 from charsyam/redis-cli-prompt

redis-cli prompt bug fix"
antirez,2013-01-19 09:27:56,https://api.github.com/repos/antirez/redis/git/commits/74f137308e67684091fb099e10b3434a676d6f85,74f137308e67684091fb099e10b3434a676d6f85,"Merge pull request #895 from badboy/catch_con_error

redis-cli: always exit if connection fails."
antirez,2013-01-19 09:25:01,https://api.github.com/repos/antirez/redis/git/commits/947f1689d3071ff9e7a91f50347ec226fd20366e,947f1689d3071ff9e7a91f50347ec226fd20366e,"Merge pull request #896 from bitterb/fix-client-command-error-message

Fix an error reply for CLIENT command"
bitterb,2013-01-19 05:11:33,https://api.github.com/repos/antirez/redis/git/commits/c2dc172a9d9f76cacdad0a62f889a9bbd885ad58,c2dc172a9d9f76cacdad0a62f889a9bbd885ad58,Fix an error reply for CLIENT command
antirez,2013-01-18 10:41:29,https://api.github.com/repos/antirez/redis/git/commits/21b3ff9ba0f182f1f25e419b5c84f0833d746255,21b3ff9ba0f182f1f25e419b5c84f0833d746255,"Merge pull request #893 from nparry/fix-redis-cli-rdb

redis-cli --rdb fails if server sends a ping"
badboy,2013-01-18 09:13:10,https://api.github.com/repos/antirez/redis/git/commits/59046a7373215cd535cba7b7864ded34301c2357,59046a7373215cd535cba7b7864ded34301c2357,"Always exit if connection fails.

This avoids unnecessary core dumps. Fixes antirez/redis#894"
nparry,2013-01-18 04:55:43,https://api.github.com/repos/antirez/redis/git/commits/1920cab3bc6b003367634d5583cd2e389d52fe4a,1920cab3bc6b003367634d5583cd2e389d52fe4a,"redis-cli --rdb fails if server sends a ping

Redis pings slaves in ""pre-synchronization stage"" with newlines. (See
https://github.com/antirez/redis/blob/2.6.9/src/replication.c#L814)
However, redis-cli does not expect this - it sees the newline as the end
of the bulk length line, and ends up returning 0 as bulk the length.
This manifests as the following when running redis-cli:

    $ ./src/redis-cli --rdb some_file
    SYNC sent to master, writing 0 bytes to 'some_file'
    Transfer finished with success.

With this commit, we just ignore leading newlines while reading the bulk
length line.

To reproduce the problem, load enough data into Redis so that the
preparation of the RDB snapshot takes long enough for a ping to occur
while redis-cli is waiting for the data."
charsyam,2013-01-17 01:20:54,https://api.github.com/repos/antirez/redis/git/commits/e3962366519e171aff0c7ae1253edb554fc85c5d,e3962366519e171aff0c7ae1253edb554fc85c5d,redis-cli prompt bug fix
antirez,2013-01-16 18:42:40,https://api.github.com/repos/antirez/redis/git/commits/a0c24821e2e18fdc9bf1410018cc2da00e16c255,a0c24821e2e18fdc9bf1410018cc2da00e16c255,redis-cli: save an RDB dump from remote server to local file.
WheresAlice,2013-01-16 15:02:06,https://api.github.com/repos/antirez/redis/git/commits/8937f5e5004e3d5b120cf009efb11c82188d85c4,8937f5e5004e3d5b120cf009efb11c82188d85c4,"Typo in sentinel.conf

Fixes a minor typo in sentinel.conf"
deepsolo9,2013-01-16 10:04:43,https://api.github.com/repos/antirez/redis/git/commits/1dc2d6dc47b9cc70e9eee4501fea5b209b0a22a7,1dc2d6dc47b9cc70e9eee4501fea5b209b0a22a7,fixed some typos.
antirez,2013-01-14 09:19:20,https://api.github.com/repos/antirez/redis/git/commits/ea1f503cfe5c690027b4f4bdce465868d36bf6b1,ea1f503cfe5c690027b4f4bdce465868d36bf6b1,Tests for CLIENT GETNAME/SETNAME.
antirez,2013-01-11 17:50:40,https://api.github.com/repos/antirez/redis/git/commits/9b89ab06c46cbf72df3c0ac89118523faefe0c77,9b89ab06c46cbf72df3c0ac89118523faefe0c77,"Typo fixed, ASCI -> ASCII."
antirez,2013-01-11 17:43:28,https://api.github.com/repos/antirez/redis/git/commits/1971740f0c8c4bf9a484188f5966e8c2a9369490,1971740f0c8c4bf9a484188f5966e8c2a9369490,"CLIENT GETNAME and CLIENT SETNAME introduced.

Sometimes it is much simpler to debug complex Redis installations if it
is possible to assign clients a name that is displayed in the CLIENT
LIST output.

This is the case, for example, for ""leaked"" connections. The ability to
provide a name to the client makes it quite trivial to understand what
is the part of the code implementing the client not releasing the
resources appropriately.

Behavior:

    CLIENT SETNAME: set a name for the client, or remove the current
                    name if an empty name is set.
    CLIENT GETNAME: get the current name, or a nil.
    CLIENT LIST: now displays the client name if any.

Thanks to Mark Gravell for pushing this idea forward."
antirez,2013-01-14 10:39:54,https://api.github.com/repos/antirez/redis/git/commits/ef99e146a8038cfd3e35a77c11b3bb97085c9c4c,ef99e146a8038cfd3e35a77c11b3bb97085c9c4c,"Undo slave-master handshake when SLAVEOF sets a new slave.

Issue #828 shows how Redis was not correctly undoing a non-blocking
connection attempt with the previous master when the master was set to a
new address using the SLAVEOF command.

This was also a result of lack of refactoring, so now there is a
function to cancel the non blocking handshake with the master.
The new function is now used when SLAVEOF NO ONE is called or when
SLAVEOF is used to set the master to a different address."
antirez,2013-01-11 22:50:32,https://api.github.com/repos/antirez/redis/git/commits/a33869c330b55032b7f042aa72a289c131586f6f,a33869c330b55032b7f042aa72a289c131586f6f,Makefile.dep updated.
antirez,2013-01-10 10:19:40,https://api.github.com/repos/antirez/redis/git/commits/f5fa6824db4810023342a86ad5f9007cdee1bb67,f5fa6824db4810023342a86ad5f9007cdee1bb67,Comment in the call() function clarified a bit.
antirez,2013-01-10 10:10:31,https://api.github.com/repos/antirez/redis/git/commits/a5cc063c1714d8d996ce0b1ea6ffaa4a970859e6,a5cc063c1714d8d996ce0b1ea6ffaa4a970859e6,Test: added regression for issue #872.
antirez,2013-01-10 09:46:05,https://api.github.com/repos/antirez/redis/git/commits/baee5650295e72fbcfe1f69ca7fa60f64cb5f740,baee5650295e72fbcfe1f69ca7fa60f64cb5f740,"Multiple fixes for EVAL (issue #872).

1) The event handler was no restored after a timeout condition if the
   command was eventually executed with success.
2) The command was not converted to EVAL in case of errors in the middle
   of the execution.
3) Terrible duplication of code without any apparent reason."
bilalhusain,2013-01-09 16:16:58,https://api.github.com/repos/antirez/redis/git/commits/717e5ffb45acc4e976e44d19d816e320cd2d0662,717e5ffb45acc4e976e44d19d816e320cd2d0662,"s/adiacent/adjacent/

fixed typo in a comment (step 2 memcheck)"
antirez,2013-01-03 13:22:55,https://api.github.com/repos/antirez/redis/git/commits/d7740fc8f350f6332fee27299c1152ba6c5dc9d0,d7740fc8f350f6332fee27299c1152ba6c5dc9d0,Better error reporting when fd event creation fails.
antirez,2013-01-03 13:18:03,https://api.github.com/repos/antirez/redis/git/commits/e9261b1e2d5cf0e2838b69442d718784a6f7ab34,e9261b1e2d5cf0e2838b69442d718784a6f7ab34,"ae.c: set errno when error is not a failing syscall.

In this way the caller is able to perform better error checking or to
use strerror() without the risk of meaningless error messages being
displayed."
antirez,2012-12-20 14:20:55,https://api.github.com/repos/antirez/redis/git/commits/4dc1e0dd3049b6f2efa9b30b078e7dfec714c7ea,4dc1e0dd3049b6f2efa9b30b078e7dfec714c7ea,"Fix overflow in mstime() in redis-cli and benchmark.

The problem does not exist in the Redis server implementation of mstime()
but is only limited to redis-cli and redis-benchmark.

Thix fixes issue #839."
antirez,2012-12-17 10:13:54,https://api.github.com/repos/antirez/redis/git/commits/ebbc4ebb261f7bcd135000bb5e17e49b548d7b5c,ebbc4ebb261f7bcd135000bb5e17e49b548d7b5c,CONTRIBUTING updated with request to add BSD license.
antirez,2012-12-17 10:11:09,https://api.github.com/repos/antirez/redis/git/commits/d01aad329c259a7276c448cee6696b04dfa6f8c1,d01aad329c259a7276c448cee6696b04dfa6f8c1,Added missing license and copyright in deps/hiredis.
antirez,2012-12-14 16:10:40,https://api.github.com/repos/antirez/redis/git/commits/f1481d4a03e96c71a664bafadf0241e88794ca60,f1481d4a03e96c71a664bafadf0241e88794ca60,"serverCron() frequency is now a runtime parameter (was REDIS_HZ).

REDIS_HZ is the frequency our serverCron() function is called with.
A more frequent call to this function results into less latency when the
server is trying to handle very expansive background operations like
mass expires of a lot of keys at the same time.

Redis 2.4 used to have an HZ of 10. This was good enough with almost
every setup, but the incremental key expiration algorithm was working a
bit better under *extreme* pressure when HZ was set to 100 for Redis
2.6.

However for most users a latency spike of 30 milliseconds when million
of keys are expiring at the same time is acceptable, on the other hand a
default HZ of 100 in Redis 2.6 was causing idle instances to use some
CPU time compared to Redis 2.4. The CPU usage was in the order of 0.3%
for an idle instance, however this is a shame as more energy is consumed
by the server, if not important resources.

This commit introduces HZ as a runtime parameter, that can be queried by
INFO or CONFIG GET, and can be modified with CONFIG SET. At the same
time the default frequency is set back to 10.

In this way we default to a sane value of 10, but allows users to
easily switch to values up to 500 for near real-time applications if
needed and if they are willing to pay this small CPU usage penalty."
antirez,2012-12-12 17:34:41,https://api.github.com/repos/antirez/redis/git/commits/a4d68dc5419121660bd8f992d58e1e46075a371a,a4d68dc5419121660bd8f992d58e1e46075a371a,"Merge pull request #824 from ptjm/unstable

Define _XOPEN_SOURCE appropriately on NetBSD."
antirez,2012-12-11 16:01:00,https://api.github.com/repos/antirez/redis/git/commits/705874e31db0196d8e1b23a28e8265dbdd2dc136,705874e31db0196d8e1b23a28e8265dbdd2dc136,"Fix config.h endianess detection to work on Linux / PPC64.

Config.h performs endianess detection including OS-specific headers to
define the endianess macros, or when this is not possible, checking the
processor type via ifdefs.

Sometimes when the OS-specific macro is included, only __BYTE_ORDER is
defined, while BYTE_ORDER remains undefined. There is code at the end of
config.h endianess detection in order to define the macros without the
underscore, but it was not working correctly.

This commit fixes endianess detection fixing Redis on Linux / PPC64 and
possibly other systems."
antirez,2012-12-03 11:30:13,https://api.github.com/repos/antirez/redis/git/commits/bf0852e5ed56dfbe32e19d926f8d5cc76f750cc8,bf0852e5ed56dfbe32e19d926f8d5cc76f750cc8,"Merge pull request #807 from bmcmanus/issue-804

Resolution for Issue #804 Add Default-Start and Default-Stop LSB tags for RedHat startup..."
antirez,2012-12-03 11:12:53,https://api.github.com/repos/antirez/redis/git/commits/ab2924cff353d7abe293b8f10d032dc466dfd4a4,ab2924cff353d7abe293b8f10d032dc466dfd4a4,"Memory leak fixed: release client's bpop->keys dictionary.

Refactoring performed after issue #801 resolution (see commit
2f87cf8b0162bd9d78c3a89860c0971cd71d39db) introduced a memory leak that
is fixed by this commit.

I simply forgot to free the new allocated dictionary in the client
structure trusting the output of ""make test"" on OSX.

However due to changes in the ""leaks"" utility the test was no longer
testing memory leaks. This problem was also fixed.

Fortunately the CI test running at ci.redis.io spotted the bug in the
valgrind run.

The leak never ended into a stable release."
antirez,2012-12-03 11:06:38,https://api.github.com/repos/antirez/redis/git/commits/a18ca73681aeabbf5b44796b2c167f8a57e07f6e,a18ca73681aeabbf5b44796b2c167f8a57e07f6e,"Test: fixed osx ""leaks"" support in test.

Due to changes in recent releases of osx leaks utility, the osx leak
detection no longer worked. Now it is fixed in a way that should be
backward compatible."
bmcmanus,2012-12-03 04:46:37,https://api.github.com/repos/antirez/redis/git/commits/bb58e517a9d7941cf106fae85a35624141357912,bb58e517a9d7941cf106fae85a35624141357912,Issue 804 Add Default-Start and Default-Stop LSB tags for RedHat startup and update-rc.d compatability.
antirez,2012-12-02 19:36:18,https://api.github.com/repos/antirez/redis/git/commits/2f87cf8b0162bd9d78c3a89860c0971cd71d39db,2f87cf8b0162bd9d78c3a89860c0971cd71d39db,"Blocking POP: use a dictionary to store keys clinet side.

To store the keys we block for during a blocking pop operation, in the
case the client is blocked for more data to arrive, we used a simple
linear array of redis objects, in the blockingState structure:

    robj **keys;
    int count;

However in order to fix issue #801 we also use a dictionary in order to
avoid to end in the blocked clients queue for the same key multiple
times with the same client.

The dictionary was only temporary, just to avoid duplicates, but since
we create / destroy it there is no point in doing this duplicated work,
so this commit simply use a dictionary as the main structure to store
the keys we are blocked for. So instead of the previous fields we now
just have:

    dict *keys;

This simplifies the code and reduces the work done by the server during
a blocking POP operation."
antirez,2012-12-01 22:07:09,https://api.github.com/repos/antirez/redis/git/commits/c135b856c664f12b0fa3197df603db3039fe92c2,c135b856c664f12b0fa3197df603db3039fe92c2,Test: regression for issue #801.
antirez,2012-12-01 11:26:07,https://api.github.com/repos/antirez/redis/git/commits/4e6dd7bc86ccb0dcf47c9a6e712ff51a28162cf6,4e6dd7bc86ccb0dcf47c9a6e712ff51a28162cf6,"Client should not block multiple times on the same key.

Sending a command like:

BLPOP foo foo foo foo 0

Resulted into a crash before this commit since the client ended being
inserted in the waiting list for this key multiple times.
This resulted into the function handleClientsBlockedOnLists() to fail
because we have code like that:

    if (de) {
        list *clients = dictGetVal(de);
        int numclients = listLength(clients);

        while(numclients--) {
            listNode *clientnode = listFirst(clients);

            /* server clients here... */
        }
    }

The code to serve clients used to remove the served client from the
waiting list, so if a client is blocking multiple times, eventually the
call to listFirst() will return NULL or worse will access random memory
since the list may no longer exist as it is removed by the function
unblockClientWaitingData() if there are no more clients waiting for this
list.

To avoid making the rest of the implementation more complex, this commit
modifies blockForKeys() so that a client will be put just a single time
into the waiting list for a given key.

Since it is Saturday, I hope this fixes issue #801."
antirez,2012-11-30 14:41:26,https://api.github.com/repos/antirez/redis/git/commits/f50e658455f6455ac443e185e5fc738ef15093b3,f50e658455f6455ac443e185e5fc738ef15093b3,"SDIFF is now able to select between two algorithms for speed.

SDIFF used an algorithm that was O(N) where N is the total number
of elements of all the sets involved in the operation.

The algorithm worked like that:

ALGORITHM 1:

1) For the first set, add all the members to an auxiliary set.
2) For all the other sets, remove all the members of the set from the
auxiliary set.

So it is an O(N) algorithm where N is the total number of elements in
all the sets involved in the diff operation.

Cristobal Viedma suggested to modify the algorithm to the following:

ALGORITHM 2:

1) Iterate all the elements of the first set.
2) For every element, check if the element also exists in all the other
remaining sets.
3) Add the element to the auxiliary set only if it does not exist in any
of the other sets.

The complexity of this algorithm on the worst case is O(N*M) where N is
the size of the first set and M the total number of sets involved in the
operation.

However when there are elements in common, with this algorithm we stop
the computation for a given element as long as we find a duplicated
element into another set.

I (antirez) added an additional step to algorithm 2 to make it faster,
that is to sort the set to subtract from the biggest to the
smallest, so that it is more likely to find a duplicate in a larger sets
that are checked before the smaller ones.

WHAT IS BETTER?

None of course, for instance if the first set is much larger than the
other sets the second algorithm does a lot more work compared to the
first algorithm.

Similarly if the first set is much smaller than the other sets, the
original algorithm will less work.

So this commit makes Redis able to guess the number of operations
required by each algorithm, and select the best at runtime according
to the input received.

However, since the second algorithm has better constant times and can do
less work if there are duplicated elements, an advantage is given to the
second algorithm."
antirez,2012-11-30 14:41:09,https://api.github.com/repos/antirez/redis/git/commits/b4abbaf755d723d33b0e81880fb035ab88f3544f,b4abbaf755d723d33b0e81880fb035ab88f3544f,redis-benchmark: seed the PRNG with time() at startup.
antirez,2012-11-30 00:35:34,https://api.github.com/repos/antirez/redis/git/commits/395d663d29e6c3fe8fe7c9a3503b96c9bde211f3,395d663d29e6c3fe8fe7c9a3503b96c9bde211f3,SDIFF fuzz test added.
antirez,2012-11-29 15:12:14,https://api.github.com/repos/antirez/redis/git/commits/925090f47628d1916b91baefd4e85633eb31b91f,925090f47628d1916b91baefd4e85633eb31b91f,Make an EXEC test more latency proof.
antirez,2012-11-29 13:20:08,https://api.github.com/repos/antirez/redis/git/commits/2f62c9663ca48b647d71f21d0cdf499346457f0f,2f62c9663ca48b647d71f21d0cdf499346457f0f,"Introduced the Build ID in INFO and --version output.

The idea is to be able to identify a build in a unique way, so for
instance after a bug report we can recognize that the build is the one
of a popular Linux distribution and perform the debugging in the same
environment."
antirez,2012-11-25 15:21:21,https://api.github.com/repos/antirez/redis/git/commits/b1b602a92887f271db3101d67e0319ce31fa68b3,b1b602a92887f271db3101d67e0319ce31fa68b3,"On crash memory test rewrote so that it actaully works.

1) We no longer test location by location, otherwise the CPU write cache
completely makes our business useless.
2) We still need a memory test that operates in steps from the first to
the last location in order to never hit the cache, but that is still
able to retain the memory content.

This was tested using a Linux box containing a bad memory module with a
zingle bit error (always zero).

So the final solution does has an error propagation step that is:

1) Invert bits at every location.
2) Swap adiacent locations.
3) Swap adiacent locations again.
4) Invert bits at every location.
5) Swap adiacent locations.
6) Swap adiacent locations again.

Before and after these steps, and after step 4, a CRC64 checksum is computed.
If the three CRC64 checksums don't match, a memory error was detected."
antirez,2012-11-28 17:39:35,https://api.github.com/repos/antirez/redis/git/commits/7383c3b12920c6ae20f7c64c5db92f59e2b02aa5,7383c3b12920c6ae20f7c64c5db92f59e2b02aa5,Jemalloc updated to version 3.2.0.
charsyam,2012-11-25 23:36:39,https://api.github.com/repos/antirez/redis/git/commits/dee0b939fcd6650edfd8705f0685cd8430750085,dee0b939fcd6650edfd8705f0685cd8430750085,Remove unnecessary condition in _dictExpandIfNeeded (dict.c)
antirez,2012-11-28 10:41:27,https://api.github.com/repos/antirez/redis/git/commits/c87a40897c82c4936563dee24bac481d970dc510,c87a40897c82c4936563dee24bac481d970dc510,Merge remote-tracking branch 'origin/unstable' into unstable
arsenm,2012-11-27 19:41:33,https://api.github.com/repos/antirez/redis/git/commits/504e5072eb06ee2e1035bc03fa85f46f51ef6f4c,504e5072eb06ee2e1035bc03fa85f46f51ef6f4c,"It's a watchdog, not a watchdong."
antirez,2012-11-23 11:44:18,https://api.github.com/repos/antirez/redis/git/commits/23d517d2c4345abb896d58cb6ce6e5accd88d3d5,23d517d2c4345abb896d58cb6ce6e5accd88d3d5,"Merge pull request #787 from charsyam/remove-warning-bio

remove compile warning bioKillThreads"
charsyam,2012-11-22 21:52:39,https://api.github.com/repos/antirez/redis/git/commits/d7c7ac4a57dba2169934611c8473816996a5a507,d7c7ac4a57dba2169934611c8473816996a5a507,remove compile warning bioKillThreads
antirez,2012-11-22 14:50:00,https://api.github.com/repos/antirez/redis/git/commits/95f68f7b0fc4ffc700361484b6c792a8e03f3a13,95f68f7b0fc4ffc700361484b6c792a8e03f3a13,"EVALSHA is now case insensitive.

EVALSHA used to crash if the SHA1 was not lowercase (Issue #783).
Fixed using a case insensitive dictionary type for the sha -> script
map used for replication of scripts."
antirez,2012-11-22 14:28:28,https://api.github.com/repos/antirez/redis/git/commits/cceb0c5b4a24d9027abfc47924d5f93af87034b4,cceb0c5b4a24d9027abfc47924d5f93af87034b4,"Fix integer overflow in zunionInterGenericCommand().

This fixes issue #761."
antirez,2012-11-17 11:11:13,https://api.github.com/repos/antirez/redis/git/commits/65606b3bc6fb8698662811ba286be8b5cabacb55,65606b3bc6fb8698662811ba286be8b5cabacb55,Test: MULTI state is cleared after EXECABORT error.
antirez,2012-11-17 11:09:17,https://api.github.com/repos/antirez/redis/git/commits/4977ab79afdd5de1386a8498c35cde0c48963093,4977ab79afdd5de1386a8498c35cde0c48963093,Test: make sure EXEC fails after previous transaction errors.
antirez,2012-11-17 10:17:54,https://api.github.com/repos/antirez/redis/git/commits/9c00f078978e452d541ddc8a9a2b7704db2cb7f3,9c00f078978e452d541ddc8a9a2b7704db2cb7f3,Test: MULTI/EXEC tests moved into multi.tcl.
antirez,2012-11-15 19:11:05,https://api.github.com/repos/antirez/redis/git/commits/3d1391272aa46aa3a52a700f6b1ef0a47d4dcda9,3d1391272aa46aa3a52a700f6b1ef0a47d4dcda9,"Safer handling of MULTI/EXEC on errors.

After the transcation starts with a MULIT, the previous behavior was to
return an error on problems such as maxmemory limit reached. But still
to execute the transaction with the subset of queued commands on EXEC.

While it is true that the client was able to check for errors
distinguish QUEUED by an error reply, MULTI/EXEC in most client
implementations uses pipelining for speed, so all the commands and EXEC
are sent without caring about replies.

With this change:

1) EXEC fails if at least one command was not queued because of an
error. The EXECABORT error is used.
2) A generic error is always reported on EXEC.
3) The client DISCARDs the MULTI state after a failed EXEC, otherwise
pipelining multiple transactions would be basically impossible:
After a failed EXEC the next transaction would be simply queued as
the tail of the previous transaction."
antirez,2012-11-22 09:08:44,https://api.github.com/repos/antirez/redis/git/commits/753699172620ef6c36969385c9bd697c6fc2db98,753699172620ef6c36969385c9bd697c6fc2db98,"Make bio.c threads killable ASAP if needed.

We use this new bio.c feature in order to stop our I/O threads if there
is a memory test to do on crash. In this case we don't want anything
else than the main thread to run, otherwise the other threads may mess
with the heap and the memory test will report a false positive."
antirez,2012-11-21 12:19:38,https://api.github.com/repos/antirez/redis/git/commits/5a9e3f58428df7d6a7a4d7cc891c95b84517183d,5a9e3f58428df7d6a7a4d7cc891c95b84517183d,Fast memory test on Redis crash.
antirez,2012-11-21 12:17:38,https://api.github.com/repos/antirez/redis/git/commits/3cb432837ce799062c83337e5f590c385e48d4bd,3cb432837ce799062c83337e5f590c385e48d4bd,Use more fine grained HAVE macros instead of HAVE_PROCFS.
charsyam,2012-11-19 18:50:31,https://api.github.com/repos/antirez/redis/git/commits/52b52a350818f88c543a224375fbe308bb17cd12,52b52a350818f88c543a224375fbe308bb17cd12,fix randstring bug
antirez,2012-11-19 11:02:08,https://api.github.com/repos/antirez/redis/git/commits/49b645235100fc214468b608c1ba6cdbc320fa88,49b645235100fc214468b608c1ba6cdbc320fa88,"Children creating AOF or RDB files now report memory used by COW.

Finally Redis is able to report the amount of memory used by
copy-on-write while saving an RDB or writing an AOF file in background.

Note that this information is currently only logged (at NOTICE level)
and not shown in INFO because this is less trivial (but surely doable
with some minor form of interprocess communication).

The reason we can't capture this information on the parent before we
call wait3() is that the Linux kernel will release the child memory
ASAP, and only retain the minimal state for the process that is useful
to report the child termination to the parent.

The COW size is obtained by summing all the Private_Dirty fields found
in the ""smap"" file inside the proc filesystem for the process.

All this is Linux specific and is not available on other systems."
antirez,2012-11-19 10:24:56,https://api.github.com/repos/antirez/redis/git/commits/3bfeb9c1a7044cd96c1bd77677dfe8b575c73c5f,3bfeb9c1a7044cd96c1bd77677dfe8b575c73c5f,"zmalloc_get_private_dirty() function added (Linux only).

For non Linux systmes it just returns 0.

This function is useful to estimate copy-on-write because of childs
saving stuff on disk."
antirez,2012-11-14 11:52:38,https://api.github.com/repos/antirez/redis/git/commits/af0b220756571bc8faf57a0c7b7389dd86a60376,af0b220756571bc8faf57a0c7b7389dd86a60376,zmalloc: kill unused __size parameter in update_zmalloc_stat_alloc() macro.
antirez,2012-11-14 11:21:23,https://api.github.com/repos/antirez/redis/git/commits/a779b7e901e9f863dc195d3590b554a917a0b3e2,a779b7e901e9f863dc195d3590b554a917a0b3e2,Merge branch 'migrate-cache' into unstable
antirez,2012-11-14 11:12:52,https://api.github.com/repos/antirez/redis/git/commits/989a7820ca0cb1b88493797fdecd2e7168558859,989a7820ca0cb1b88493797fdecd2e7168558859,Test: more MIGRATE tests.
antirez,2012-11-14 10:30:24,https://api.github.com/repos/antirez/redis/git/commits/2feef47aa1642df8637522c3d0b8efa16ec4bbc0,2feef47aa1642df8637522c3d0b8efa16ec4bbc0,"MIGRATE: retry one time on I/O error.

Now that we cache connections, a retry attempt makes sure that the
operation don't fail just because there is an existing connection error
on the socket, like the other end closing the connection.

Unfortunately this condition is not detectable using
getsockopt(SO_ERROR), so the only option left is to retry.

We don't retry on timeouts."
antirez,2012-11-13 17:11:48,https://api.github.com/repos/antirez/redis/git/commits/17411f7afd30f76962652e28c408dcd07e213fd9,17411f7afd30f76962652e28c408dcd07e213fd9,Test: check if MIGRATE is caching connections.
antirez,2012-11-12 22:04:36,https://api.github.com/repos/antirez/redis/git/commits/aa2bf6ba8bec776c02d8055ac856d96926137895,aa2bf6ba8bec776c02d8055ac856d96926137895,"TTL API change: TTL returns -2 for non existing keys.

The previous behavior was to return -1 if:

1) Existing key but without an expire set.
2) Non existing key.

Now the second case is handled in a different, and TTL will return -2
if the key does not exist at all.

PTTL follows the same behavior as well."
antirez,2012-11-12 14:04:54,https://api.github.com/repos/antirez/redis/git/commits/05705bc8bb8685827609813fe48a928260c6a21b,05705bc8bb8685827609813fe48a928260c6a21b,"MIGRATE: fix default timeout to 1000 milliseconds.

When a timeout <= 0 is provided we set a default timeout of 1 second.
It was set to 1 millisecond for an error resulting from a recent change."
antirez,2012-11-12 13:01:56,https://api.github.com/repos/antirez/redis/git/commits/c8852ebf191387779275a70b5540f30976b9ef1f,c8852ebf191387779275a70b5540f30976b9ef1f,MIGRATE count of cached sockets in INFO output.
antirez,2012-11-12 13:00:59,https://api.github.com/repos/antirez/redis/git/commits/149b527a74a8336e8b0a287472c9ae25e3286fba,149b527a74a8336e8b0a287472c9ae25e3286fba,"MIGRATE timeout should be in milliseconds.

While it is documented that the MIGRATE timeout is in milliseconds, it
was in seconds instead. This commit fixes the problem."
antirez,2012-11-11 23:45:10,https://api.github.com/repos/antirez/redis/git/commits/e23d281e489c3cda134803b2e6302d1fc27e5948,e23d281e489c3cda134803b2e6302d1fc27e5948,"MIGRATE TCP connections caching.

By caching TCP connections used by MIGRATE to chat with other Redis
instances a 5x performance improvement was measured with
redis-benchmark against small keys.

This can dramatically speedup cluster resharding and other processes
where an high load of MIGRATE commands are used."
antirez,2012-11-08 18:14:29,https://api.github.com/repos/antirez/redis/git/commits/5513397de7526f0e5e01c1d29a37813008703d6d,5513397de7526f0e5e01c1d29a37813008703d6d,Copyright date fixed in COPYING file.
antirez,2012-11-08 17:43:20,https://api.github.com/repos/antirez/redis/git/commits/399669fc6fd928793df48757ad3bf7119ae3bb6e,399669fc6fd928793df48757ad3bf7119ae3bb6e,Make clear that contributing code to the Redis project means to release it under the terms of the BSD license.
antirez,2012-11-08 17:25:23,https://api.github.com/repos/antirez/redis/git/commits/4365e5b2d32798c168a8376fad891c0e5cccb4ec,4365e5b2d32798c168a8376fad891c0e5cccb4ec,BSD license added to every C source and header file.
antirez,2012-11-07 14:32:27,https://api.github.com/repos/antirez/redis/git/commits/1237d71c4e4a9c617d0c8ce8049e16326e647cfe,1237d71c4e4a9c617d0c8ce8049e16326e647cfe,"COPY and REPLACE options for MIGRATE.

With COPY now MIGRATE does not remove the key from the source instance.
With REPLACE it uses RESTORE REPLACE on the target host so that even if
the key already eixsts in the target instance it will be overwritten.

The options can be used together."
antirez,2012-11-07 09:57:23,https://api.github.com/repos/antirez/redis/git/commits/e5b5763f56d1379069c94ce7196c1a412bb44fba,e5b5763f56d1379069c94ce7196c1a412bb44fba,"REPLACE option for RESTORE.

The REPLACE option deletes an existing key with the same name (if any)
and materializes the new one. The default behavior without RESTORE is to
return an error if a key already exists."
antirez,2012-11-06 19:25:34,https://api.github.com/repos/antirez/redis/git/commits/c4b0b6854e543ea1ae75b94ffc59b1285ddce9d5,c4b0b6854e543ea1ae75b94ffc59b1285ddce9d5,"Type mismatch errors are now prefixed with WRONGTYPE.

So instead to reply with a generic error like:

-ERR ... wrong kind of value ...

now it replies with:

-WRONGTYPE ... wrong kind of value ...

This makes this particular error easy to check without resorting to
(fragile) pattern matching of the error string (however the error string
used to be consistent already).

Client libraries should return a specific exeption type for this error.

Most of the commit is about fixing unit tests."
antirez,2012-11-02 11:10:47,https://api.github.com/repos/antirez/redis/git/commits/06851a93de54c4d9bb0a6c52234ef5bb3db07d96,06851a93de54c4d9bb0a6c52234ef5bb3db07d96,"Merge pull request #741 from Run/typo

fix a typo in redis.h line 595 comment"
antirez,2012-11-01 21:39:39,https://api.github.com/repos/antirez/redis/git/commits/05d8e2c938e3b06efe3573deb97adb767550becc,05d8e2c938e3b06efe3573deb97adb767550becc,"More robust handling of AOF rewrite child.

After the wait3() syscall we used to do something like that:

    if (pid == server.rdb_child_pid) {
        backgroundSaveDoneHandler(exitcode,bysignal);
    } else {
        ....
    }

So the AOF rewrite was handled in the else branch without actually
checking if the pid really matches. This commit makes the check explicit
and logs at WARNING level if the pid returned by wait3() does not match
neither the RDB or AOF rewrite child."
cofyc,2012-11-01 10:14:55,https://api.github.com/repos/antirez/redis/git/commits/f0266532fc82b8ae9a87407adaf4555dddce690e,f0266532fc82b8ae9a87407adaf4555dddce690e,"fix typo in comments (redis.c, networking.c)"
antirez,2012-11-01 21:10:45,https://api.github.com/repos/antirez/redis/git/commits/2ea41242f669c1afe03af7c8befb140a7a80fc4e,2ea41242f669c1afe03af7c8befb140a7a80fc4e,"Unix socket clients properly displayed in MONITOR and CLIENT LIST.

This also fixes issue #745."
antirez,2012-11-01 14:36:37,https://api.github.com/repos/antirez/redis/git/commits/d36fb95a102047278f774955a873da43dec7c0d4,d36fb95a102047278f774955a873da43dec7c0d4,"32 bit build fixed on Linux.

It failed because of the way jemalloc was compiled (without passing the
right flags to make, but just to configure). Now the same set of flags
are also passed to the make command, fixing the issue.

This fixes issue #744"
antirez,2012-10-31 08:29:04,https://api.github.com/repos/antirez/redis/git/commits/021d16b6430b39f7709a70466007df1ca16867e5,021d16b6430b39f7709a70466007df1ca16867e5,"Merge pull request #726 from yamt/typo

fix a typo in a comment"
antirez,2012-10-31 08:23:05,https://api.github.com/repos/antirez/redis/git/commits/973cb21a0152642ec904cf8f8ab238a31e6ebaa9,973cb21a0152642ec904cf8f8ab238a31e6ebaa9,"Invert two sides of if expression in SET to avoid a lookup.

Because of the short circuit behavior of && inverting the two sides of
the if expression avoids an hash table lookup if the non-EX variant of
SET is called.

Thanks to Weibin Yao (@yaoweibin on github) for spotting this."
antirez,2012-10-30 18:10:46,https://api.github.com/repos/antirez/redis/git/commits/b16e423430465013c14af1550f29e7c25c3a433c,b16e423430465013c14af1550f29e7c25c3a433c,No longer used macro rdbIsOpcode() removed.
antirez,2012-10-30 17:57:20,https://api.github.com/repos/antirez/redis/git/commits/08a4f12e76c0edd4cdaadf4b4d1b39e1c57ff331,08a4f12e76c0edd4cdaadf4b4d1b39e1c57ff331,"help.h update (adds bitop, bitcount, evalsha...)"
antirez,2012-10-26 14:06:25,https://api.github.com/repos/antirez/redis/git/commits/c5cca554d927351d47160874824df864c9dfd0b8,c5cca554d927351d47160874824df864c9dfd0b8,Ctrl+w support in linenoise.
antirez,2012-10-26 13:38:21,https://api.github.com/repos/antirez/redis/git/commits/89423052cab4700291f290819d53f4fbb8dabf95,89423052cab4700291f290819d53f4fbb8dabf95,Marginally more robust glibc version test for sync_file_range detection.
charsyam,2012-10-25 20:27:58,https://api.github.com/repos/antirez/redis/git/commits/4800331bf859f5bb0313a7187963f1cc9b7e2a1c,4800331bf859f5bb0313a7187963f1cc9b7e2a1c,patch config.h for sync_file_range
antirez,2012-10-25 14:15:55,https://api.github.com/repos/antirez/redis/git/commits/d2f83d4a764fc155dbe07f5badecd9b65af699a5,d2f83d4a764fc155dbe07f5badecd9b65af699a5,"Fix compilation on Linux kernels or glibc versions lacking sync_file_range().

This fixes issue #667.

Many thanks to Didier Spezia for the fix."
antirez,2012-10-24 10:21:34,https://api.github.com/repos/antirez/redis/git/commits/68fc64afd46acef8109a388311730a4712a23e6d,68fc64afd46acef8109a388311730a4712a23e6d,Update memory peak stats while loading RDB / AOF.
yamt,2012-10-24 08:47:56,https://api.github.com/repos/antirez/redis/git/commits/164d57c60d254d02d816c27f4e80cf33c5061fef,164d57c60d254d02d816c27f4e80cf33c5061fef,fix a typo in a comment
antirez,2012-10-22 17:21:47,https://api.github.com/repos/antirez/redis/git/commits/89e74abfb6475bace3db518724ecee1fcae9c79e,89e74abfb6475bace3db518724ecee1fcae9c79e,"A filed called slave_read_only added in INFO output.

This was an important information missing from the INFO output in the
replication section.

It obviously reflects if the slave is read only or not."
antirez,2012-10-22 09:55:23,https://api.github.com/repos/antirez/redis/git/commits/ecd82f59fe5296de2733154bfcf1a4b95d4547aa,ecd82f59fe5296de2733154bfcf1a4b95d4547aa,"Merge pull request #693 from ghurrell/dict-h-typos

Fix (cosmetic) typos in dict.h"
antirez,2012-10-22 08:43:39,https://api.github.com/repos/antirez/redis/git/commits/c2661ed7612b9534afe9f1c9c6381b430f5dd0c3,c2661ed7612b9534afe9f1c9c6381b430f5dd0c3,"Default memory limit for 32bit instanced moved from 3.5 GB to 3 GB.

In some system, notably osx, the 3.5 GB limit was too far and not able
to prevent a crash for out of memory. The 3 GB limit works better and it
is still a lot of memory within a 4 GB theorical limit so it's not going
to bore anyone :-)

This fixes issue #711"
antirez,2012-10-22 08:28:54,https://api.github.com/repos/antirez/redis/git/commits/acfe3675e3c5ab8ee2ca07642334d9468cfc4d39,acfe3675e3c5ab8ee2ca07642334d9468cfc4d39,"Differentiate SCRIPT KILL error replies.

When calling SCRIPT KILL currently you can get two errors:

* No script in timeout (busy) state.
* The script already performed a write.

It is useful to be able to distinguish the two errors, but right now both
start with ""ERR"" prefix, so string matching (that is fragile) must be used.

This commit introduces two different prefixes.

-NOTBUSY and -UNKILLABLE respectively to reply with an error when no
script is busy at the moment, and when the script already executed a
write operation and can not be killed."
antirez,2012-10-16 15:35:50,https://api.github.com/repos/antirez/redis/git/commits/a1b1c1ea3adb864c8c2e3feb4eaed890a9b505cf,a1b1c1ea3adb864c8c2e3feb4eaed890a9b505cf,"Fix MULTI / EXEC rendering in MONITOR output.

Before of this commit it used to be like this:

MULTI
EXEC
... actual commands of the transaction ...

Because after all that is the natural order of things. Transaction
commands are queued and executed *only after* EXEC is called.

However this makes debugging with MONITOR a mess, so the code was
modified to provide a coherent output.

What happens is that MULTI is rendered in the MONITOR output as far as
possible, instead EXEC is propagated only after the transaction is
executed, or even in the case it fails because of WATCH, so in this case
you'll simply see:

MULTI
EXEC

An empty transaction."
antirez,2012-10-11 16:34:05,https://api.github.com/repos/antirez/redis/git/commits/be6cbd3a6e466c43300cba428f8f87a6d272c6f3,be6cbd3a6e466c43300cba428f8f87a6d272c6f3,"Allow AUTH when Redis is busy because of timedout Lua script.

If the server is password protected we need to accept AUTH when there is
a server busy (-BUSY) condition, otherwise it will be impossible to send
SHUTDOWN NOSAVE or SCRIPT KILL.

This fixes issue #708."
antirez,2012-10-10 09:18:14,https://api.github.com/repos/antirez/redis/git/commits/d10a01bb6d8645f66b66e1fb3d1c52a0dd7bd8fe,d10a01bb6d8645f66b66e1fb3d1c52a0dd7bd8fe,"Merge pull request #707 from NanXiao/patch-1

Update src/redis-benchmark.c"
NanXiao,2012-10-10 09:08:43,https://api.github.com/repos/antirez/redis/git/commits/9eb3a7bc6ba041ee8f14427a68087459fc8e66f9,9eb3a7bc6ba041ee8f14427a68087459fc8e66f9,"Update src/redis-benchmark.c

The code of current implementation:

if (c->pending == 0) clientDone(c);
In clientDone function, the c's memory has been freed, then the loop will continue: while(c->pending). The memory of c has been freed now, so c->pending is invalid (c is an invalid pointer now), and this will cause memory dump in some platforams(eg: Solaris).

So I think the code should be modified as:
if (c->pending == 0)
{
clientDone(c);
break;
}
and this will not lead to while(c->pending)."
antirez,2012-10-06 10:04:27,https://api.github.com/repos/antirez/redis/git/commits/278304cc4d2a52cd22aa82b89991854a6b9b148e,278304cc4d2a52cd22aa82b89991854a6b9b148e,CONTRIBUTING file updated.
antirez,2012-10-03 17:14:46,https://api.github.com/repos/antirez/redis/git/commits/da920e75d4836897b9a7109b6d4743e201cd8a4f,da920e75d4836897b9a7109b6d4743e201cd8a4f,"Hash function switched to murmurhash2.

The previously used hash function, djbhash, is not secure against
collision attacks even when the seed is randomized as there are simple
ways to find seed-independent collisions.

The new hash function appears to be safe (or much harder to exploit at
least) in this case, and has better distribution.

Better distribution does not always means that's better. For instance in
a fast benchmark with ""DEBUG POPULATE 1000000"" I obtained the following
results:

    1.6 seconds with djbhash
    2.0 seconds with murmurhash2

This is due to the fact that djbhash will hash objects that follow the
pattern `prefix:<id>` and where the id is numerically near, to near
buckets. This improves the locality.

However in other access patterns with keys that have no relation
murmurhash2 has some (apparently minimal) speed advantage.

On the other hand a better distribution should significantly
improve the quality of the distribution of elements returned with
dictGetRandomKey() that is used in SPOP, SRANDMEMBER, RANDOMKEY, and
other commands.

Everything considered, and under the suspect that this commit fixes a
security issue in Redis, we are switching to the new hash function.
If some serious speed regression will be found in the future we'll be able
to step back easiliy.

This commit fixes issue #663."
antirez,2012-10-05 08:48:49,https://api.github.com/repos/antirez/redis/git/commits/c43aea7e9fae10df1f8ad6589800ec14ce184cf7,c43aea7e9fae10df1f8ad6589800ec14ce184cf7,"Warn when configured maxmemory value seems odd.

This commit warns the user with a log at ""warning"" level if:

1) After the server startup the maxmemory limit was found to be < 1MB.
2) After a CONFIG SET command modifying the maxmemory setting the limit
is set to a value that is smaller than the currently used memory.

The behaviour of the Redis server is unmodified, and this wil not make
the CONFIG SET command or a wrong configuration in redis.conf less
likely to create problems, but at least this will make aware most users
about a possbile error they committed without resorting to external
help.

However no warning is issued if, as a result of loading the AOF or RDB
file, we are very near the maxmemory setting, or key eviction will be
needed in order to go under the specified maxmemory setting. The reason
is that in servers configured as a cache with an aggressive
maxmemory-policy most of the times restarting the server will cause this
condition to happen if persistence is not switched off.

This fixes issue #429."
antirez,2012-10-05 08:10:34,https://api.github.com/repos/antirez/redis/git/commits/2b73b3509ac9d04364a30af141d3092221aa59ce,2b73b3509ac9d04364a30af141d3092221aa59ce,Include time.h in ae.c as we now use time().
jokea,2012-08-30 07:08:19,https://api.github.com/repos/antirez/redis/git/commits/b7b2a1cc5eec13a714b02fc71dff3510a6b72155,b7b2a1cc5eec13a714b02fc71dff3510a6b72155,"Force expire all timer events when system clock skew is detected.

When system time changes back, the timer will not worker properly
hence some core functionality of redis will stop working(e.g. replication,
bgsave, etc). See issue #633 for details.

The patch saves the previous time and when a system clock skew is detected,
it will force expire all timers.

Modiifed by @antirez: the previous time was moved into the eventLoop
structure to make sure the library is still thread safe as long as you
use different event loops into different threads (otherwise you need
some synchronization). More comments added about the reasoning at the
base of the patch, that's worth reporting here:

/* If the system clock is moved to the future, and then set back to the
 * right value, time events may be delayed in a random way. Often this
 * means that scheduled operations will not be performed soon enough.
 *
 * Here we try to detect system clock skews, and force all the time
 * events to be processed ASAP when this happens: the idea is that
 * processing events earlier is less dangerous than delaying them
 * indefinitely, and practice suggests it is. */"
antirez,2012-10-04 09:49:17,https://api.github.com/repos/antirez/redis/git/commits/f0b9f803455feb5565ae4b799044890aa4de1479,f0b9f803455feb5565ae4b799044890aa4de1479,"""Timeout receiving bulk data"" error message modified.

The new message now contains an hint about modifying the repl-timeout
configuration directive if the problem persists.

This should normally not be needed, because while the master generates
the RDB file it makes sure to send newlines to the replication channel
to prevent timeouts. However there are times when masters running on
very slow systems can completely stop for seconds during the RDB saving
process. In such a case enlarging the timeout value can fix the problem.

See issue #695 for an example of this problem in an EC2 deployment."
antirez,2012-10-03 09:41:08,https://api.github.com/repos/antirez/redis/git/commits/9a914a632d38fff012d0fa7ee8469948e286c053,9a914a632d38fff012d0fa7ee8469948e286c053,"""SORT by nosort"" (skip sorting) respect sorted set ordering.

When SORT is called with the option BY set to a string constant not
inclduing the wildcard character ""*"", there is no way to sort the output
so any ordering is valid. This allows the SORT internals to optimize its
work and don't really sort the output at all.

However it was odd that this option was not able to retain the natural
order of a sorted set. This feature was requested by users multiple
times as sometimes to call SORT with GET against sorted sets as a way to
mass-fetch objects can be handy.

This commit introduces two things:

1) The ability of SORT to return sorted sets elements in their natural
ordering when `BY nosort` is specified, accordingly to `DESC / ASC` options.
2) The ability of SORT to optimize this case further if LIMIT is passed
as well, avoiding to really fetch the whole sorted set, but directly
obtaining the specified range.

Because in this case the sorting is always deterministic, no
post-sorting activity is performed when SORT is called from a Lua
script.

This commit fixes issue #98."
antirez,2012-10-01 08:10:03,https://api.github.com/repos/antirez/redis/git/commits/ece77037e9601f9f5d2321cc5a779aef10a4c563,ece77037e9601f9f5d2321cc5a779aef10a4c563,"Revert ""Scripting: redis.NIL to return nil bulk replies.""

This reverts commit e061d797d739f2beeb22b9e8ac519d1df070e3a8.

Conflicts:

	src/scripting.c"
antirez,2012-09-28 14:54:57,https://api.github.com/repos/antirez/redis/git/commits/9c21b72bb9b7844b22b60f63af37aa30dd78f898,9c21b72bb9b7844b22b60f63af37aa30dd78f898,"Scripting: add helper functions redis.error_reply() and redis.status_reply().

A previous commit introduced Redis.NIL. This commit adds similar helper
functions to return tables with a single field set to the specified
string so that instead of using 'return {err=""My Error""}' it is possible
to use a more idiomatic form:

    return redis.error_reply(""My Error"")
    return redis.status_reply(""OK"")"
antirez,2012-09-28 12:19:15,https://api.github.com/repos/antirez/redis/git/commits/6dd1693c0e4bfae0ca0983b2a0bf70ae234a6bcb,6dd1693c0e4bfae0ca0983b2a0bf70ae234a6bcb,"Scripting: redis.NIL to return nil bulk replies.

Lua arrays can't contain nil elements (see
http://www.lua.org/pil/19.1.html for more information), so Lua scripts
were not able to return a multi-bulk reply containing nil bulk
elements inside.

This commit introduces a special conversion: a table with just
a ""nilbulk"" field set to a boolean value is converted by Redis as a nil
bulk reply, but at the same time for Lua this type is not a ""nil"" so can
be used inside Lua arrays.

This type is also assigned to redis.NIL, so the following two forms
are equivalent and will be able to return a nil bulk reply as second
element of a three elements array:

    EVAL ""return {1,redis.NIL,3}"" 0
    EVAL ""return {1,{nilbulk=true},3}"" 0

The result in redis-cli will be:

    1) (integer) 1
    2) (nil)
    3) (integer) 3"
antirez,2012-09-26 16:59:54,https://api.github.com/repos/antirez/redis/git/commits/db100c4671c9576710c762f3fa36ab58757236a6,db100c4671c9576710c762f3fa36ab58757236a6,Sentinel: Support for AUTH.
antirez,2012-09-21 09:33:06,https://api.github.com/repos/antirez/redis/git/commits/0ee3f05518e081640c1c6f9ae52c3a414f0feace,0ee3f05518e081640c1c6f9ae52c3a414f0feace,Test for SRANDMEMBER with <count>.
antirez,2012-09-20 14:33:36,https://api.github.com/repos/antirez/redis/git/commits/578c94597fda163eb6050ce5e0f832a6587a14b9,578c94597fda163eb6050ce5e0f832a6587a14b9,"SRANDMEMBER <count> leak fixed.

For ""CASE 4"" (see code) we need to free the element if it's already in
the result dictionary and adding it failed."
antirez,2012-09-19 19:29:40,https://api.github.com/repos/antirez/redis/git/commits/be90c803e3bb041335ea0b8f40348965846f06b7,be90c803e3bb041335ea0b8f40348965846f06b7,"Added the SRANDMEMBER key <count> variant.

SRANDMEMBER called with just the key argument can just return a single
random element from a Redis Set. However many users need to return
multiple unique elements from a Set, this is not a trivial problem to
handle in the client side, and for truly good performance a C
implementation was required.

After many requests for this feature it was finally implemented.

The problem implementing this command is the strategy to follow when
the number of elements the user asks for is near to the number of
elements that are already inside the set. In this case asking random
elements to the dictionary API, and trying to add it to a temporary set,
may result into an extremely poor performance, as most add operations
will be wasted on duplicated elements.

For this reason this implementation uses a different strategy in this
case: the Set is copied, and random elements are returned to reach the
specified count.

The code actually uses 4 different algorithms optimized for the
different cases.

If the count is negative, the command changes behavior and allows for
duplicated elements in the returned subset."
antirez,2012-09-17 10:45:57,https://api.github.com/repos/antirez/redis/git/commits/d310fbedabd3101505b694f5c25a2e48480a3c2b,d310fbedabd3101505b694f5c25a2e48480a3c2b,Fix compilation on FreeBSD. Thanks to @koobs on twitter.
antirez,2012-09-17 08:45:56,https://api.github.com/repos/antirez/redis/git/commits/b5b2aceaf6889db8b25eac525af10ca7992a936f,b5b2aceaf6889db8b25eac525af10ca7992a936f,.gitignore modified to be more general with less entries.
antirez,2012-09-04 08:37:49,https://api.github.com/repos/antirez/redis/git/commits/7eb850ef0e437323e2d84157ddc2e6e82af57bbc,7eb850ef0e437323e2d84157ddc2e6e82af57bbc,"A reimplementation of blocking operation internals.

Redis provides support for blocking operations such as BLPOP or BRPOP.
This operations are identical to normal LPOP and RPOP operations as long
as there are elements in the target list, but if the list is empty they
block waiting for new data to arrive to the list.

All the clients blocked waiting for th same list are served in a FIFO
way, so the first that blocked is the first to be served when there is
more data pushed by another client into the list.

The previous implementation of blocking operations was conceived to
serve clients in the context of push operations. For for instance:

1) There is a client ""A"" blocked on list ""foo"".
2) The client ""B"" performs `LPUSH foo somevalue`.
3) The client ""A"" is served in the context of the ""B"" LPUSH,
synchronously.

Processing things in a synchronous way was useful as if ""A"" pushes a
value that is served by ""B"", from the point of view of the database is a
NOP (no operation) thing, that is, nothing is replicated, nothing is
written in the AOF file, and so forth.

However later we implemented two things:

1) Variadic LPUSH that could add multiple values to a list in the
context of a single call.
2) BRPOPLPUSH that was a version of BRPOP that also provided a ""PUSH""
side effect when receiving data.

This forced us to make the synchronous implementation more complex. If
client ""B"" is waiting for data, and ""A"" pushes three elemnents in a
single call, we needed to propagate an LPUSH with a missing argument
in the AOF and replication link. We also needed to make sure to
replicate the LPUSH side of BRPOPLPUSH, but only if in turn did not
happened to serve another blocking client into another list ;)

This were complex but with a few of mutually recursive functions
everything worked as expected... until one day we introduced scripting
in Redis.

Scripting + synchronous blocking operations = Issue #614.

Basically you can't ""rewrite"" a script to have just a partial effect on
the replicas and AOF file if the script happened to serve a few blocked
clients.

The solution to all this problems, implemented by this commit, is to
change the way we serve blocked clients. Instead of serving the blocked
clients synchronously, in the context of the command performing the PUSH
operation, it is now an asynchronous and iterative process:

1) If a key that has clients blocked waiting for data is the subject of
a list push operation, We simply mark keys as ""ready"" and put it into a
queue.
2) Every command pushing stuff on lists, as a variadic LPUSH, a script,
or whatever it is, is replicated verbatim without any rewriting.
3) Every time a Redis command, a MULTI/EXEC block, or a script,
completed its execution, we run the list of keys ready to serve blocked
clients (as more data arrived), and process this list serving the
blocked clients.
4) As a result of ""3"" maybe more keys are ready again for other clients
(as a result of BRPOPLPUSH we may have push operations), so we iterate
back to step ""3"" if it's needed.

The new code has a much simpler semantics, and a simpler to understand
implementation, with the disadvantage of not being able to ""optmize out""
a PUSH+BPOP as a No OP.

This commit will be tested with care before the final merge, more tests
will be added likely."
antirez,2012-09-11 08:32:04,https://api.github.com/repos/antirez/redis/git/commits/bfc197c3b604baf0dba739ea174d5054284133f0,bfc197c3b604baf0dba739ea174d5054284133f0,"Make sure that SELECT argument is an integer or return an error.

Unfortunately we had still the lame atoi() without any error checking in
place, so ""SELECT foo"" would work as ""SELECT 0"". This was not an huge
problem per se but some people expected that DB can be strings and not
just numbers, and without errors you get the feeling that they can be
numbers, but not the behavior.

Now getLongFromObjectOrReply() is used as almost everybody else across
the code, generating an error if the number is not an integer or
overflows the long type.

Thanks to @mipearson for reporting that on Twitter."
antirez,2012-09-10 10:42:55,https://api.github.com/repos/antirez/redis/git/commits/978e5177fdd33bfc638b6aa7e82bd61b3487afed,978e5177fdd33bfc638b6aa7e82bd61b3487afed,Match printf format with actual type in genRedisInfoString().
antirez,2012-09-05 15:46:06,https://api.github.com/repos/antirez/redis/git/commits/74e57d0ecefaff0f029469bea65edc2e20747ee3,74e57d0ecefaff0f029469bea65edc2e20747ee3,"BITCOUNT regression test for #582 fixed for 32 bit target.

Bug #582 was not present in 32 bit builds of Redis as
getObjectFromLong() will return an error for overflow.

This commit makes sure that the test does not fail because of the error
returned when running against 32 bit builds."
trapezoid,2012-07-15 09:38:30,https://api.github.com/repos/antirez/redis/git/commits/749aac72ad980bf08b04655634590b80e2fd014c,749aac72ad980bf08b04655634590b80e2fd014c,"BITCOUNT: fix segmentation fault.

remove unsafe and unnecessary cast.
until now, this cast may lead segmentation fault when end > UINT_MAX

setbit foo 0 1
bitcount  0 4294967295
=> ok
bitcount  0 4294967296
=> cause segmentation fault.

Note by @antirez: the commit was modified a bit to also change the
string length type to long, since it's guaranteed to be at max 512 MB in
size, so we can work with the same type across all the code path.

A regression test was also added."
antirez,2012-09-05 13:59:37,https://api.github.com/repos/antirez/redis/git/commits/24bc807b5c781ba0f8d0582d47bde237d6748a5d,24bc807b5c781ba0f8d0582d47bde237d6748a5d,"Merge pull request #576 from saj/fix-slave-ping-period

Bug fix: slaves being pinged every second"
antirez,2012-09-04 23:12:41,https://api.github.com/repos/antirez/redis/git/commits/36741b2c818a95e8ef167818271614ee6b1bc414,36741b2c818a95e8ef167818271614ee6b1bc414,"Scripting: Force SORT BY constant determinism inside SORT itself.

SORT is able to return (faster than when ordering) unordered output if
the ""BY"" clause is used with a constant value. However we try to play
well with scripting requirements of determinism providing always sorted
outputs when SORT (and other similar commands) are called by Lua
scripts.

However we used the general mechanism in place in scripting in order to
reorder SORT output, that is, if the command has the ""S"" flag set, the
Lua scripting engine will take an additional step when converting a
multi bulk reply to Lua value, calling a Lua sorting function.

This is suboptimal as we can do it faster inside SORT itself.
This is also broken as issue #545 shows us: basically when SORT is used
with a constant BY, and additionally also GET is used, the Lua scripting
engine was trying to order the output as a flat array, while it was
actually a list of key-value pairs.

What we do know is to recognized if the caller of SORT is the Lua client
(since we can check this using the REDIS_LUA_CLIENT flag). If so, and if
a ""don't sort"" condition is triggered by the BY option with a constant
string, we force the lexicographical sorting.

This commit fixes this bug and improves the performance, and at the same
time simplifies the implementation. This does not mean I'm smart today,
it means I was stupid when I committed the original implementation ;)"
antirez,2012-09-04 14:06:53,https://api.github.com/repos/antirez/redis/git/commits/9bd0e097aa19b697757cdb73dd447e2c6f4960c6,9bd0e097aa19b697757cdb73dd447e2c6f4960c6,"Sentinel: reply -IDONTKNOW to get-master-addr-by-name on lack of info.

If we don't have any clue about a master since it never replied to INFO
so far, reply with an -IDONTKNOW error to SENTINEL
get-master-addr-by-name requests."
antirez,2012-09-04 13:52:04,https://api.github.com/repos/antirez/redis/git/commits/8bdde086ac393a22ba80b74f317f882ab6f5e63e,8bdde086ac393a22ba80b74f317f882ab6f5e63e,"Sentinel: more easy master redirection if master is a slave.

Before this commit Sentienl used to redirect master ip/addr if the
current instance reported to be a slave only if this was the first INFO
output received, and the role was found to be slave.

Now instead also if we find that the runid is different, and the
reported role is slave, we also redirect to the reported master ip/addr.

This unifies the behavior of Sentinel in the case of a reboot (where it
will see the first INFO output with the wrong role and will perform the
redirection), with the behavior of Sentinel in the case of a change in
what it sees in the INFO output of the master."
antirez,2012-08-31 13:32:57,https://api.github.com/repos/antirez/redis/git/commits/bb66fc312036e444a950df27dd7cb2e3db6b4b05,bb66fc312036e444a950df27dd7cb2e3db6b4b05,"Send an async PING before starting replication with master.

During the first synchronization step of the replication process, a Redis
slave connects with the master in a non blocking way. However once the
connection is established the replication continues sending the REPLCONF
command, and sometimes the AUTH command if needed. Those commands are
send in a partially blocking way (blocking with timeout in the order of
seconds).

Because it is common for a blocked master to accept connections even if
it is actually not able to reply to the slave requests, it was easy for
a slave to block if the master had serious issues, but was still able to
accept connections in the listening socket.

For this reason we now send an asynchronous PING request just after the
non blocking connection ended in a successful way, and wait for the
reply before to continue with the replication process. It is very
unlikely that a master replying to PING can't reply to the other
commands.

This solution was proposed by Didier Spezia (Thanks!) so that we don't
need to turn all the replication process into a non blocking affair, but
still the probability of a slave blocked is minimal even in the event of
a failing master.

Also we now use getsockopt(SO_ERROR) in order to check errors ASAP
in the event handler, instead of waiting for actual I/O to return an
error.

This commit fixes issue #632."
antirez,2012-08-31 09:08:53,https://api.github.com/repos/antirez/redis/git/commits/e323635c2d9d9039442cd1014932e4dd314d2d06,e323635c2d9d9039442cd1014932e4dd314d2d06,"Scripting: Reset Lua fake client reply_bytes after command execution.

Lua scripting uses a fake client in order to run commands in the context
of a client, accumulate the reply, and convert it into a Lua object
to return to the caller. This client is reused again and again, and is
referenced by the server.lua_client globally accessible pointer.

However after every call to redis.call() or redis.pcall(), that is
handled by the luaRedisGenericCommand() function, the reply_bytes field
of the client was not set back to zero. This filed is used to estimate
the amount of memory currently used in the reply. Because of the lack of
reset, script after script executed, this value used to get bigger and
bigger, and in the end on 32 bit systems it triggered the following
assert:

    redisAssert(c->reply_bytes < ULONG_MAX-(1024*64));

On 64 bit systems this does not happen because it takes too much time to
reach values near to 2^64 for users to see the practical effect of the
bug.

Now in the cleanup stage of luaRedisGenericCommand() we reset the
reply_bytes counter to zero, avoiding the issue. It is not practical to
add a test for this bug, but the fix was manually tested using a
debugger.

This commit fixes issue #656."
antirez,2012-08-31 08:22:21,https://api.github.com/repos/antirez/redis/git/commits/46c31a150a0e6a67eaaf4b1e1146ec815cc1355e,46c31a150a0e6a67eaaf4b1e1146ec815cc1355e,"Scripting: require at least one argument for redis.call().

Redis used to crash with a call like the following:

    EVAL ""redis.call()"" 0

Now the explicit check for at least one argument prevents the problem.

This commit fixes issue #655."
antirez,2012-08-30 15:57:02,https://api.github.com/repos/antirez/redis/git/commits/6276434ad22ded9f5bf9997137c311e447154908,6276434ad22ded9f5bf9997137c311e447154908,"Sentinel: do not crash against slaves not publishing the runid.

Older versions of Redis (before 2.4.17) don't publish the runid field in
INFO. This commit makes Sentinel able to handle that without crashing."
antirez,2012-08-29 10:44:24,https://api.github.com/repos/antirez/redis/git/commits/58186b9dcf88cd2132ac0ff4bd3a12304819cc4e,58186b9dcf88cd2132ac0ff4bd3a12304819cc4e,Sentinel: INFO command implementation.
antirez,2012-08-29 09:44:01,https://api.github.com/repos/antirez/redis/git/commits/8246e58abebb7b4421a78d68e81bc8cd1ca536ac,8246e58abebb7b4421a78d68e81bc8cd1ca536ac,"Sentinel: add Redis execution mode to INFO output.

The new ""redis_mode"" field in the INFO output will show if Redis is
running in standalone mode, cluster, or sentinel mode."
antirez,2012-08-28 15:53:18,https://api.github.com/repos/antirez/redis/git/commits/712656e8481f768470af82503dd84695496cd0a3,712656e8481f768470af82503dd84695496cd0a3,Sentinel: added documentation about slave-priority in redis.conf
antirez,2012-08-28 15:45:01,https://api.github.com/repos/antirez/redis/git/commits/3ec701e0597cd59d63835fc1b8e1ebeec78e9788,3ec701e0597cd59d63835fc1b8e1ebeec78e9788,"Sentinel: Sentinel-side support for slave priority.

The slave priority that is now published by Redis in INFO output is
now used by Sentinel in order to select the slave with minimum priority
for promotion, and in order to consider slaves with priority set to 0 as
not able to play the role of master (they will never be promoted by
Sentinel).

The ""slave-priority"" field is now one of the fileds that Sentinel
publishes when describing an instance via the SENTINEL commands such as
""SENTINEL slaves mastername""."
antirez,2012-08-28 15:20:26,https://api.github.com/repos/antirez/redis/git/commits/169a44cbd6b6a143b282206d754b71cd3af0c963,169a44cbd6b6a143b282206d754b71cd3af0c963,"Sentinel: Redis-side support for slave priority.

A Redis slave can now be configured with a priority, that is an integer
number that is shown in INFO output and can be get and set using the
redis.conf file or the CONFIG GET/SET command.

This field is used by Sentinel during slave election. A slave with lower
priority is preferred. A slave with priority zero is never elected (and
is considered to be impossible to elect even if it is the only slave
available).

A next commit will add support in the Sentinel side as well."
antirez,2012-08-28 10:56:05,https://api.github.com/repos/antirez/redis/git/commits/c14e0ecafdaa6b72464d6bcb8953b22899230406,c14e0ecafdaa6b72464d6bcb8953b22899230406,"Sentinel: suppress harmless warning by initializing 'table' to NULL.

Note that the assertion guarantees that one of the if branches setting
table is always entered."
antirez,2012-08-24 17:28:44,https://api.github.com/repos/antirez/redis/git/commits/784b93087c622999e225735c0c76d50241941022,784b93087c622999e225735c0c76d50241941022,"Incrementally flush RDB on disk while loading it from a master.

This fixes issue #539.

Basically if there is enough free memory the OS may buffer the RDB file
that the slave transfers on disk from the master. The file may
actually be flused on disk at once by the operating system when it gets
closed by Redis, causing the close system call to block for a long time.

This patch is a modified version of one provided by yoav-steinberg of
@garantiadata (the original version was posted in the issue #539
comments), and tries to flush the OS buffers incrementally (every 8 MB
of loaded data)."
antirez,2012-08-24 13:40:22,https://api.github.com/repos/antirez/redis/git/commits/1caa627e4e53c479f1ee1f1f80b1b980d55eef7f,1caa627e4e53c479f1ee1f1f80b1b980d55eef7f,Fix a forget zmalloc_oom() -> zmalloc_oom_handler() replacement.
antirez,2012-08-24 10:55:37,https://api.github.com/repos/antirez/redis/git/commits/6fdc635447b1a5dd0a4f7b13c15fdd6c108dabee,6fdc635447b1a5dd0a4f7b13c15fdd6c108dabee,"Better Out of Memory handling.

The previous implementation of zmalloc.c was not able to handle out of
memory in an application-specific way. It just logged an error on
standard error, and aborted.

The result was that in the case of an actual out of memory in Redis
where malloc returned NULL (In Linux this actually happens under
specific overcommit policy settings and/or with no or little swap
configured) the error was not properly logged in the Redis log.

This commit fixes this problem, fixing issue #509.
Now the out of memory is properly reported in the Redis log and a stack
trace is generated.

The approach used is to provide a configurable out of memory handler
to zmalloc (otherwise the default one logging the event on the
standard output is used)."
antirez,2012-08-24 10:29:54,https://api.github.com/repos/antirez/redis/git/commits/850789ce73dbb236591692708437e1bd705dbce3,850789ce73dbb236591692708437e1bd705dbce3,"Sentinel: send SCRIPT KILL on -BUSY reply and SDOWN instance.

From the point of view of Redis an instance replying -BUSY is down,
since it is effectively not able to reply to user requests. However
a looping script is a recoverable condition in Redis if the script still
did not performed any write to the dataset. In that case performing a
fail over is not optimal, so Sentinel now tries to restore the normal server
condition killing the script with a SCRIPT KILL command.

If the script already performed some write before entering an infinite
(or long enough to timeout) loop, SCRIPT KILL will not work and the
fail over will be triggered anyway."
antirez,2012-08-24 10:10:24,https://api.github.com/repos/antirez/redis/git/commits/01477753e6dae515d31950d94e69e132ef4ed0b4,01477753e6dae515d31950d94e69e132ef4ed0b4,"Sentinel: fixed a crash on script execution.

The call to sentinelScheduleScriptExecution() lacked the final NULL
argument to signal the end of arguments. This resulted into a crash."
antirez,2012-08-22 09:32:27,https://api.github.com/repos/antirez/redis/git/commits/724371d748b86da4459e42c8d855d07aef20bdb3,724371d748b86da4459e42c8d855d07aef20bdb3,"Merge pull request #628 from pietern/unstable-zip

Fix ziplist edge case"
antirez,2012-08-21 15:31:44,https://api.github.com/repos/antirez/redis/git/commits/227b4293647d51244771d16f0ad14bc94a2b3ad9,227b4293647d51244771d16f0ad14bc94a2b3ad9,"redis-benchmark: disable big buffer cleanup in hiredis context.

This new hiredis features allows us to reuse a previous context reader
buffer even if already very big in order to maximize performances with
big payloads (Usually hiredis re-creates buffers when they are too big
and unused in order to save memory)."
antirez,2012-08-21 15:27:01,https://api.github.com/repos/antirez/redis/git/commits/d6704c9bd0f03f277ee23a4e3e1fc86a74e130b3,d6704c9bd0f03f277ee23a4e3e1fc86a74e130b3,"hiredis library updated.

This version of hiredis merges modifications of the Redis fork with
latest changes in the hiredis repository.

The same version was pushed on the hiredis repository and will probably
merged into the master branch in short time."
pietern,2012-08-13 19:39:49,https://api.github.com/repos/antirez/redis/git/commits/3cc2904e3e0d5a3bb3663737a5601f91226fe67c,3cc2904e3e0d5a3bb3663737a5601f91226fe67c,Set p to its new offset before modifying it
pietern,2012-08-13 21:09:40,https://api.github.com/repos/antirez/redis/git/commits/5117c20ab5558e5d68b1a3c7751610cd6c4279db,5117c20ab5558e5d68b1a3c7751610cd6c4279db,Add ziplist test for deleting next to last entries
antirez,2012-08-03 10:39:13,https://api.github.com/repos/antirez/redis/git/commits/cada7f9671da8af04400853bed3f3bc1790a522a,cada7f9671da8af04400853bed3f3bc1790a522a,"Sentinel: SENTINEL FAILOVER command implemented.

This command can be used in order to force a Sentinel instance to start
a failover for the specified master, as leader, forcing the failover
even if the master is up.

The commit also adds some minor refactoring and other improvements to
functions already implemented that make them able to work when the
master is not in SDOWN condition. For instance slave selection
assumed that we ask INFO every second to every slave, this is true
only when the master is in SDOWN condition, so slave selection did not
worked when the master was not in SDOWN condition."
antirez,2012-08-02 16:40:30,https://api.github.com/repos/antirez/redis/git/commits/6275004ca6c5a127c84158a290e9524c5ef5c410,6275004ca6c5a127c84158a290e9524c5ef5c410,"Sentinel: client reconfiguration script execution.

This commit adds support to optionally execute a script when one of the
following events happen:

* The failover starts (with a slave already promoted).
* The failover ends.
* The failover is aborted.

The script is called with enough parameters (documented in the example
sentinel.conf file) to provide information about the old and new ip:port
pair of the master, the role of the sentinel (leader or observer) and
the name of the master.

The goal of the script is to inform clients of the configuration change
in a way specific to the environment Sentinel is running, that can't be
implemented in a genereal way inside Sentinel itself."
antirez,2012-08-02 12:37:10,https://api.github.com/repos/antirez/redis/git/commits/2990c366e8286a057fb016b078b00af2476c6be1,2990c366e8286a057fb016b078b00af2476c6be1,"Merge pull request #613 from tobstarr/patch-1

Fix version numbers"
tobstarr,2012-08-02 12:10:51,https://api.github.com/repos/antirez/redis/git/commits/2dccf1e4ce100312805aea8984ca7a1a9d7a3703,2dccf1e4ce100312805aea8984ca7a1a9d7a3703,Fix version numbers
antirez,2012-07-31 15:11:26,https://api.github.com/repos/antirez/redis/git/commits/fd92b366b0ebe325a2c39e66fecdc2f1cbda6936,fd92b366b0ebe325a2c39e66fecdc2f1cbda6936,"Sentinel: when leader in wait-start, sense another leader as race.

When we are in wait start, if another leader (or any other external
entity) turns a slave into a master, abort the failover, and detect it
as an observer.

Note that the wait-start state is mainly there for this reason but the
abort was yet not implemented.

This adds a new sentinel event -failover-abort-race."
antirez,2012-07-31 14:18:15,https://api.github.com/repos/antirez/redis/git/commits/91c15ed1b51a0cd097e5c8b0d77edb07f460a866,91c15ed1b51a0cd097e5c8b0d77edb07f460a866,Sentinel: sentinelRefreshInstanceInfo() comments improved a bit.
mgp,2012-07-26 06:51:22,https://api.github.com/repos/antirez/redis/git/commits/f1d187bb3ece6b4b13a6b74e8e5ccab9fe9d40ff,f1d187bb3ece6b4b13a6b74e8e5ccab9fe9d40ff,"Use correct variable name for value to convert.

Note by @antirez: this code was never compiled because utils.c lacked the
float.h include, so we never noticed this variable was mispelled in the
past.

This should provide a noticeable speed boost when saving certain types
of databases with many sorted sets inside."
antirez,2012-07-31 09:05:21,https://api.github.com/repos/antirez/redis/git/commits/ed2a691aba0cea2e789290d8d388cc8091703577,ed2a691aba0cea2e789290d8d388cc8091703577,Sentinel: sentinel.conf self-documenation improved.
antirez,2012-07-31 08:14:23,https://api.github.com/repos/antirez/redis/git/commits/75084e057dcbd0cefbd1ee035c367320f2257de6,75084e057dcbd0cefbd1ee035c367320f2257de6,"Sentinel: abort failover when in wait-start if master is back.

When we are a Leader Sentinel in wait-start state, starting with this
commit the failover is aborted if the master returns online.

This improves the way we handle a notable case of net split, that is the
split between Sentinels and Redis servers, that will be a very common
case of split becase Sentinels will often be installed in the client's
network and servers can be in a differnt arm of the network.

When Sentinels and Redis servers are isolated the master is in ODOWN
condition since the Sentinels can agree about this state, however the
failover does not start since there are no good slaves to promote (in
this specific case all the slaves are unreachable).

However when the split is resolved, Sentinels may sense the slave back
a moment before they sense the master is back, so the failover may start
without a good reason (since the master is actually working too).

Now this condition is reversible, so the failover will be aborted
immediately after if the master is detected to be working again, that
is, not in SDOWN nor in ODOWN condition."
antirez,2012-07-28 18:55:17,https://api.github.com/repos/antirez/redis/git/commits/7f5bdba4343cf32c8ae7d38a3f6d0d163677c14c,7f5bdba4343cf32c8ae7d38a3f6d0d163677c14c,Merge remote-tracking branch 'origin/unstable' into unstable
antirez,2012-07-27 08:39:39,https://api.github.com/repos/antirez/redis/git/commits/3f194a9d2571df21717b635f037040407a51d50d,3f194a9d2571df21717b635f037040407a51d50d,"Sentinel: scripts execution engine improved.

We no longer use a vanilla fork+execve but take a queue of jobs of
scripts to execute, with retry on error, timeouts, and so forth.

Currently this is used only for notifications but soon the ability to
also call clients reconfiguration scripts will be added."
jzawodn,2012-07-25 15:29:11,https://api.github.com/repos/antirez/redis/git/commits/78b606acc2b70c5e97368fb4e72b73043c90c2dc,78b606acc2b70c5e97368fb4e72b73043c90c2dc,"comment fix

improve English a bit. :-)"
antirez,2012-07-28 09:51:56,https://api.github.com/repos/antirez/redis/git/commits/f3a61431999ce99b1823de8ba7d8566a22d7566e,f3a61431999ce99b1823de8ba7d8566a22d7566e,"Merge pull request #606 from badboy/patch-1

Include sys/wait.h to avoid compiler warning"
badboy,2012-07-28 09:33:01,https://api.github.com/repos/antirez/redis/git/commits/c6c19c8372fd9258a35b7d4bdcb454898e6c1413,c6c19c8372fd9258a35b7d4bdcb454898e6c1413,"Include sys/wait.h to avoid compiler warning

gcc warned about an implicit declaration of function 'wait3'. 
Including this header fixes this."
antirez,2012-07-27 10:56:48,https://api.github.com/repos/antirez/redis/git/commits/ed7b308c1c369d7a004b6f7a72e01ad1eddb5ac3,ed7b308c1c369d7a004b6f7a72e01ad1eddb5ac3,"Merge pull request #587 from saj/truncate-short-write-from-aof

Truncate short write from the AOF"
antirez,2012-07-27 10:55:20,https://api.github.com/repos/antirez/redis/git/commits/04950a9e4dfb74a132e523ccbb7932a2394b832a,04950a9e4dfb74a132e523ccbb7932a2394b832a,"Merge pull request #586 from saj/aof_last_bgrewrite_status

New in INFO: aof_last_bgrewrite_status"
antirez,2012-07-26 10:09:40,https://api.github.com/repos/antirez/redis/git/commits/ce7b838fb9a06aae7b0fcac8617577700fc89917,ce7b838fb9a06aae7b0fcac8617577700fc89917,Sentinel: don't start a failover as leader if there is no good slave.
antirez,2012-07-25 15:31:57,https://api.github.com/repos/antirez/redis/git/commits/a3593ee4d09b28142850694a2a0d977eac4819c1,a3593ee4d09b28142850694a2a0d977eac4819c1,"Merge pull request #604 from jzawodn/patch-1

comment fix"
jzawodn,2012-07-25 15:29:11,https://api.github.com/repos/antirez/redis/git/commits/7617a6f272474c433c1d2e8884c8a174e91ff9bd,7617a6f272474c433c1d2e8884c8a174e91ff9bd,"comment fix

improve English a bit. :-)"
antirez,2012-07-25 14:33:37,https://api.github.com/repos/antirez/redis/git/commits/baace5fc42dbe527a452d8864f37716d644f444a,baace5fc42dbe527a452d8864f37716d644f444a,Sentinel: ability to execute notification scripts.
antirez,2012-07-25 14:15:53,https://api.github.com/repos/antirez/redis/git/commits/42c571864e38016d5711e4cd55fb87dd411a064e,42c571864e38016d5711e4cd55fb87dd411a064e,"Merge pull request #603 from mrb/fix_sentinel_config_warning

Fix warning in redis.c for sentinel config load"
antirez,2012-07-25 14:15:02,https://api.github.com/repos/antirez/redis/git/commits/7c15dd15965e659f822d1620b006caba06d5e298,7c15dd15965e659f822d1620b006caba06d5e298,"Merge pull request #602 from mrb/sentinel_docs

Some cleanup in sentinel.conf"
mrb,2012-07-25 13:55:53,https://api.github.com/repos/antirez/redis/git/commits/f1c8661e74ab1b6c45669f4a998484dfe54ed2d3,f1c8661e74ab1b6c45669f4a998484dfe54ed2d3,Fix warning in redis.c for sentinel config load
mrb,2012-07-25 13:52:26,https://api.github.com/repos/antirez/redis/git/commits/23023fc626ef10a683f1afca0cd0ce7b00c4d8da,23023fc626ef10a683f1afca0cd0ce7b00c4d8da,Some cleanup in sentinel.conf
antirez,2012-07-25 09:32:19,https://api.github.com/repos/antirez/redis/git/commits/672102c2ceb4bfc24fcbec96f0cd79118a873d72,672102c2ceb4bfc24fcbec96f0cd79118a873d72,"Sentinel: abort failover if no good slave is available.

The previous behavior of the state machine was to wait some time and
retry the slave selection, but this is not robust enough against drastic
changes in the conditions of the monitored instances.

What we do now when the slave selection fails is to abort the failover
and return back monitoring the master. If the ODOWN condition is still
present a new failover will be triggered and so forth.

This commit also refactors the code we use to abort a failover."
antirez,2012-07-24 16:57:26,https://api.github.com/repos/antirez/redis/git/commits/9e5bef38e6cb43d8d5ee12ab1114e424ae69d693,9e5bef38e6cb43d8d5ee12ab1114e424ae69d693,Sentinel: reset pending_commands in a more generic way.
antirez,2012-07-24 16:46:04,https://api.github.com/repos/antirez/redis/git/commits/a23a5b6c7de0f4fdb22b0d06b06e038004d48546,a23a5b6c7de0f4fdb22b0d06b06e038004d48546,"Prevent a spurious +sdown event on switch.

When we reset the master we should start with clean timestamps for ping
replies otherwise we'll detect a spurious +sdown event, because on
+master-switch event the previous master instance was probably in +sdown
condition. Since we updated the address we should count time from
scratch again.

Also this commit makes sure to explicitly reset the count of pending
commands, now we can do this because of the new way the hiredis link
is closed."
antirez,2012-07-24 16:20:05,https://api.github.com/repos/antirez/redis/git/commits/d918e6f127f60efd7b9fd23ba3413eb441240e0f,d918e6f127f60efd7b9fd23ba3413eb441240e0f,Sentinel: debugging message removed.
antirez,2012-07-24 16:15:44,https://api.github.com/repos/antirez/redis/git/commits/75fb6e5b8a56cdbc43a6e207db306089fc55aba2,75fb6e5b8a56cdbc43a6e207db306089fc55aba2,"Sentinel: changes to connection handling and redirection.

We disconnect the Redis instances hiredis link in a more robust way now.
Also we change the way we perform the redirection for the +switch-master
event, that is not just an instance reset with an address change.

Using the same system we now implement the +redirect-to-master event
that is triggered by an instance that is configured to be master but
found to be a slave at the first INFO reply. In that case we monitor the
master instead, logging the incident as an event."
antirez,2012-07-24 14:35:23,https://api.github.com/repos/antirez/redis/git/commits/2179c269160e4de6b80e83133081cd47b472716e,2179c269160e4de6b80e83133081cd47b472716e,"Sentinel: check that instance still exists in reply callbacks.

We can't be sure the instance object still exists when the reply
callback is called."
antirez,2012-07-24 10:42:40,https://api.github.com/repos/antirez/redis/git/commits/d876d6feacf2ecf4917c558c2d6b4d0e900ae4d7,d876d6feacf2ecf4917c558c2d6b4d0e900ae4d7,"Sentinel: more robust failover detection as observer.

Sentinel observers detect failover checking if a slave attached to the
monitored master turns into its replication state from slave to master.
However while this change may in theory only happen after a SLAVEOF NO
ONE command, in practie it is very easy to reboot a slave instance with
a wrong configuration that turns it into a master, especially if it was
a past master before a successfull failover.

This commit changes the detection policy so that if an instance goes
from slave to master, but at the same time the runid has changed, we
sense a reboot, and in that case we don't detect a failover at all.

This commit also introduces the ""reboot"" sentinel event, that is logged
at ""warning"" level (so this will trigger an admin notification).

The commit also fixes a problem in the disconnect handler that assumed
that the instance object always existed, that is not the case. Now we
no longer assume that redisAsyncFree() will call the disconnection
handler before returning."
antirez,2012-07-23 13:08:36,https://api.github.com/repos/antirez/redis/git/commits/1bbdf1709ff6b9b3c8ee4b77cefe251be8969707,1bbdf1709ff6b9b3c8ee4b77cefe251be8969707,Fixed an error in the example sentinel.conf.
antirez,2012-07-23 13:06:55,https://api.github.com/repos/antirez/redis/git/commits/be2be3d903409fa48d43488541b4919f4645ac4c,be2be3d903409fa48d43488541b4919f4645ac4c,Typo.
antirez,2012-07-23 10:54:52,https://api.github.com/repos/antirez/redis/git/commits/6b5daa2df2a0711a25746cb025927dc3deb7717e,6b5daa2df2a0711a25746cb025927dc3deb7717e,"First implementation of Redis Sentinel.

This commit implements the first, beta quality implementation of Redis
Sentinel, a distributed monitoring system for Redis with notification
and automatic failover capabilities.

More info at http://redis.io/topics/sentinel"
antirez,2012-07-22 15:18:42,https://api.github.com/repos/antirez/redis/git/commits/03f412ddef44726ac32fa2f33a40037adb1b1b13,03f412ddef44726ac32fa2f33a40037adb1b1b13,Merge remote-tracking branch 'origin/unstable' into unstable
antirez,2012-07-22 15:13:49,https://api.github.com/repos/antirez/redis/git/commits/5d73073f6eaa391fe01ce202d1de95c27da5ec0b,5d73073f6eaa391fe01ce202d1de95c27da5ec0b,"Allow Pub/Sub in contexts where other commands are blocked.

Redis loading data from disk, and a Redis slave disconnected from its
master with serve-stale-data disabled, are two conditions where
commands are normally refused by Redis, returning an error.

However there is no reason to disable Pub/Sub commands as well, given
that this layer does not interact with the dataset. To allow Pub/Sub in
as many contexts as possible is especially interesting now that Redis
Sentinel uses Pub/Sub of a Redis master as a communication channel
between Sentinels.

This commit allows Pub/Sub to be used in the above two contexts where
it was previously denied."
antirez,2012-07-21 18:12:35,https://api.github.com/repos/antirez/redis/git/commits/cddf5946fcdf5f9860d0e2a1b90135d8c25b5841,cddf5946fcdf5f9860d0e2a1b90135d8c25b5841,"Merge pull request #593 from steevel/unstable

Check that we have connection before enabling pipe mode"
antirez,2012-07-18 10:01:43,https://api.github.com/repos/antirez/redis/git/commits/b62bdf1c643ee8ace697621464ee201300ee2f0e,b62bdf1c643ee8ace697621464ee201300ee2f0e,"Don't assume that ""char"" is signed.

For the C standard char can be either signed or unsigned, it's up to the
compiler, but Redis assumed that it was signed in a few places.

The practical effect of this patch is that now Redis 2.6 will run
correctly in every system where char is unsigned, notably the RaspBerry
PI and other ARM systems with GCC.

Thanks to Georgi Marinov (@eesn on twitter) that reported the problem
and allowed me to use his RaspBerry via SSH to trace and fix the issue!"
saj,2012-07-16 05:33:25,https://api.github.com/repos/antirez/redis/git/commits/55302e9e285d13ae5eda021420d1a3ea6ca21afc,55302e9e285d13ae5eda021420d1a3ea6ca21afc,"Truncate short write from the AOF

If Redis only manages to write out a partial buffer, the AOF file won't
load back into Redis the next time it starts up.  It is better to
discard the short write than waste time running redis-check-aof."
saj,2012-07-17 02:06:53,https://api.github.com/repos/antirez/redis/git/commits/48553a29e8c56fcc21f77b284a4d3a3448a75e1e,48553a29e8c56fcc21f77b284a4d3a3448a75e1e,"New in INFO: aof_last_bgrewrite_status

Behaves like rdb_last_bgsave_status -- even down to reporting 'ok' when
no rewrite has been done yet.  (You might want to check that
aof_last_rewrite_time_sec is not -1.)"
snorkypie,2012-07-15 12:35:02,https://api.github.com/repos/antirez/redis/git/commits/e9828cb6f7a13caf57ad6caf861812b687c8339c,e9828cb6f7a13caf57ad6caf861812b687c8339c,Check that we have connection before enabling pipe mode
antirez,2012-07-09 10:14:08,https://api.github.com/repos/antirez/redis/git/commits/a2db8e4801968c5a5a163390aec17027810bae38,a2db8e4801968c5a5a163390aec17027810bae38,"Merge pull request #569 from jokea/unstable

mark fd as writable when EPOLLERR or EPOLLHUP is returned by epoll_wait."
saj,2012-07-05 04:29:27,https://api.github.com/repos/antirez/redis/git/commits/9edfe63553314fc2258392db94bfce8a4144b303,9edfe63553314fc2258392db94bfce8a4144b303,"Bug fix: slaves being pinged every second

REDIS_REPL_PING_SLAVE_PERIOD controls how often the master should
transmit a heartbeat (PING) to its slaves.  This period, which defaults
to 10, is measured in seconds.

Redis 2.4 masters used to ping their slaves every ten seconds, just like
it says on the tin.

The Redis 2.6 masters I have been experimenting with, on the other hand,
ping their slaves *every second*.  (master_last_io_seconds_ago never
approaches 10.)  I think the ping period was inadvertently slashed to
one-tenth of its nominal value around the time REDIS_HZ was introduced.
This commit reintroduces correct ping schedule behaviour."
jokea,2012-06-29 04:06:38,https://api.github.com/repos/antirez/redis/git/commits/93b0075d33292bb74bccb60d205da2c2f2041f1d,93b0075d33292bb74bccb60d205da2c2f2041f1d,mark fd as writable when EPOLLERR or EPOLLHUP is returned by epoll_wait.
antirez,2012-06-27 09:26:37,https://api.github.com/repos/antirez/redis/git/commits/36def8fd9a4f562612e00ecbc7b5ff46b5809ba3,36def8fd9a4f562612e00ecbc7b5ff46b5809ba3,Typo in comment.
antirez,2012-06-26 07:47:47,https://api.github.com/repos/antirez/redis/git/commits/3a32897856ec77c77be5dd8e69623dd3624035fc,3a32897856ec77c77be5dd8e69623dd3624035fc,"REPLCONF internal command introduced.

The REPLCONF command is an internal command (not designed to be directly
used by normal clients) that allows a slave to set some replication
related state in the master before issuing SYNC to start the
replication.

The initial motivation for this command, and the only reason currently
it is used by the implementation, is to let the slave instance
communicate its listening port to the slave, so that the master can
show all the slaves with their listening ports in the ""replication""
section of the INFO output.

This allows clients to auto discover and query all the slaves attached
into a master.

Currently only a single option of the REPLCONF command is supported, and
it is called ""listening-port"", so the slave now starts the replication
process with something like the following chat:

    REPLCONF listening-prot 6380
    SYNC

Note that this works even if the master is an older version of Redis and
does not understand REPLCONF, because the slave ignores the REPLCONF
error.

In the future REPLCONF can be used for partial replication and other
replication related features where there is the need to exchange
information between master and slave.

NOTE: This commit also fixes a bug: the INFO outout already carried
information about slaves, but the port was broken, and was obtained
with getpeername(2), so it was actually just the ephemeral port used
by the slave to connect to the master as a client."
antirez,2012-06-21 12:25:53,https://api.github.com/repos/antirez/redis/git/commits/5410168c6ece740e0bd179d5a6fd45739f18ae32,5410168c6ece740e0bd179d5a6fd45739f18ae32,Fixed comment typo into time_independent_strcmp().
antirez,2012-06-21 09:50:01,https://api.github.com/repos/antirez/redis/git/commits/31a1439bfd6e24647f023281da65473047b69dfb,31a1439bfd6e24647f023281da65473047b69dfb,"Fixed a timing attack on AUTH (Issue #560).

The way we compared the authentication password using strcmp() allowed
an attacker to gain information about the password using a well known
class of attacks called ""timing attacks"".

The bug appears to be practically not exploitable in most modern systems
running Redis since even using multiple bytes of differences in the
input at a time instead of one the difference in running time in in the
order of 10 nanoseconds, making it hard to exploit even on LAN. However
attacks always get better so we are providing a fix ASAP.

The new implementation uses two fixed length buffers and a constant time
comparison function, with the goal of:

1) Completely avoid leaking information about the content of the
password, since the comparison is always performed between 512
characters and without conditionals.
2) Partially avoid leaking information about the length of the
password.

About ""2"" we still have a stage in the code where the real password and
the user provided password are copied in the static buffers, we also run
two strlen() operations against the two inputs, so the running time
of the comparison is a fixed amount plus a time proportional to
LENGTH(A)+LENGTH(B). This means that the absolute time of the operation
performed is still related to the length of the password in some way,
but there is no way to change the input in order to get a difference in
the execution time in the comparison that is not just proportional to
the string provided by the user (because the password length is fixed).

Thus in practical terms the user should try to discover LENGTH(PASSWORD)
looking at the whole execution time of the AUTH command and trying to
guess a proportionality between the whole execution time and the
password length: this appears to be mostly unfeasible in the real world.

Also protecting from this attack is not very useful in the case of Redis
as a brute force attack is anyway feasible if the password is too short,
while with a long password makes it not an issue that the attacker knows
the length."
antirez,2012-06-15 08:03:25,https://api.github.com/repos/antirez/redis/git/commits/5b63ccce6c5a3b2097c87cc1b6af314c209172ef,5b63ccce6c5a3b2097c87cc1b6af314c209172ef,"Fix c->reply_bytes computation in setDeferredMultiBulkLength()

In order to implement reply buffer limits introduced in 2.6 and useful
to close the connection under user-selected circumastances of big output
buffers (for instance slow consumers in pub/sub, a blocked slave, and so
forth) Redis takes a counter with the amount of used memory in objects
inside the output list stored into c->reply.

The computation was broken in the function setDeferredMultiBulkLength(),
in the case the object was glued with the next one. This caused the
c->reply_bytes field to go out of sync, be subtracted more than needed,
and wrap back near to ULONG_MAX values.

This commit fixes this bug and adds an assertion that is able to trap
this class of problems.

This problem was discovered looking at the INFO output of an unrelated
issue (issue #547)."
antirez,2012-06-14 13:59:25,https://api.github.com/repos/antirez/redis/git/commits/ba779119b8b08294cdb776302638ee5b7b9b5b84,ba779119b8b08294cdb776302638ee5b7b9b5b84,"ziplistFind(): don't assume that entries are comparable by encoding.

Because Redis 2.6 introduced new integer encodings it is no longer true
that if two entries have a different encoding they are not equal.

An old ziplist can be loaded from an RDB file generated with Redis 2.4,
in this case for instance a small unsigned integers is encoded with a
16 bit encoding, while in Redis 2.6 a more specific 8 bit encoding
format is used.

Because of this bug hashes ended with duplicated values or fields lookup
failed, causing many bad behaviors.
This in turn caused a crash while converting the ziplist encoded hash into
a real hash table because an assertion was raised on duplicated elements.

This commit fixes issue #547.

Many thanks to Pinterest's Marty Weiner and colleagues for discovering
the problem and helping us in the debugging process."
antirez,2012-06-13 08:25:52,https://api.github.com/repos/antirez/redis/git/commits/96b8ff3760b18d2962410322a56308d8410917c8,96b8ff3760b18d2962410322a56308d8410917c8,"Merge pull request #552 from tnm/unstable

Standardize punctuation in redis-cli help."
tnm,2012-06-13 05:35:00,https://api.github.com/repos/antirez/redis/git/commits/d665dd0865e3bfbd51b2bdaf1482edac861ecde1,d665dd0865e3bfbd51b2bdaf1482edac861ecde1,"Standardize punctuation in redis-cli help.

Right there is a mix of help entries ending with periods or
without periods. This standardizes the end of command as without
periods, which seems to be the general custom in most unix tools,
at least."
antirez,2012-06-12 13:20:16,https://api.github.com/repos/antirez/redis/git/commits/84d9ef4f3178a217eaf62c90b3fdbe240af975b4,84d9ef4f3178a217eaf62c90b3fdbe240af975b4,"Added a new hash fuzzy tester.

The new fuzzy tester also removes elements from the hash instead of just
adding random fields. This should increase the probability to find bugs
in the implementations of the hash type internal representations."
antirez,2012-06-11 21:44:34,https://api.github.com/repos/antirez/redis/git/commits/ee789e157c767be9cbf90af5232bfeacc533e308,ee789e157c767be9cbf90af5232bfeacc533e308,"Dump ziplist hex value on failed assertion.

The ziplist -> hashtable conversion code is triggered every time an hash
value must be promoted to a full hash table because the number or size of
elements reached the threshold.

If a problem in the ziplist causes the same field to be present
multiple times, the assertion of successful addition of the element
inside the hash table will fail, crashing server with a failed
assertion, but providing little information about the problem.

This code adds a new logging function to perform the hex dump of binary
data, and makes sure that the ziplist -> hashtable conversion code uses
this new logging facility to dump the content of the ziplist when the
assertion fails.

This change was originally made in order to investigate issue #547."
antirez,2012-06-11 13:19:46,https://api.github.com/repos/antirez/redis/git/commits/c0de45924c4033a8650b627e75b7fd6396c52187,c0de45924c4033a8650b627e75b7fd6396c52187,"New test: hash ziplist -> hashtable encoding conversion.

A new stress test was added to stress test the code converting a ziplist
into an hash table.

In this commit also randomValue helper function was modified to also
return negative values."
antirez,2012-06-02 21:29:57,https://api.github.com/repos/antirez/redis/git/commits/80e808b6d6ca40580899bda0397d7c0d9b19b1a8,80e808b6d6ca40580899bda0397d7c0d9b19b1a8,"EVAL replication test: less false positives.

wait_for_condition is now used instead of the usual ""after 1000"" (that
is the way to sleep in Tcl). This should avoid to find the replica in
a state where it is loading the RDB in memory, returning -LOADING error.

This test used to fail when running the test over valgrind, due to the
added latencies."
antirez,2012-06-02 08:21:57,https://api.github.com/repos/antirez/redis/git/commits/c7a25200e29f8ea3c1d42152ef22ef2020a1fd06,c7a25200e29f8ea3c1d42152ef22ef2020a1fd06,"RDB type loading functions clarified in comments.

Improved comments to make clear that rdbLoadType() just loads a
general TYPE in the context of RDB that can be an object type or an
expire type, end-of-file, and so forth.

While rdbLoadObjectType() enforces that the type is a valid Object Type
otherwise it returns -1."
antirez,2012-05-31 19:45:39,https://api.github.com/repos/antirez/redis/git/commits/1419406e8dd828f12b4810286d701b2b87ccd7ee,1419406e8dd828f12b4810286d701b2b87ccd7ee,"BITOP bug when called against non existing keys fixed.

In the issue #529 an user reported a bug that can be triggered with the
following code:

flushdb
set a
""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""
bitop or x a b

The bug was introduced with the speed optimization in commit 8bbc076
that specializes every BITOP operation loop up to the minimum length of
the input strings.

However the computation of the minimum length contained an error when a
non existing key was present in the input, after a key that was non zero
length.

This commit fixes the bug and adds a regression test for it."
antirez,2012-05-25 13:20:59,https://api.github.com/repos/antirez/redis/git/commits/bc70b8e5f4a161db0efbc95e3afda884b85b5229,bc70b8e5f4a161db0efbc95e3afda884b85b5229,"Tests modified to account for INFO fields renaming.

Commit 33e1db36fa3948c8b9baa3991fd40e7f6b31fb9e modified the name of a
few INFO fields. This commit changes the Redis test to account for this
changes."
antirez,2012-05-25 10:11:30,https://api.github.com/repos/antirez/redis/git/commits/33e1db36fa3948c8b9baa3991fd40e7f6b31fb9e,33e1db36fa3948c8b9baa3991fd40e7f6b31fb9e,"Four new persistence fields in INFO. A few renamed.

The 'persistence' section of INFO output now contains additional four
fields related to RDB and AOF persistence:

 rdb_last_bgsave_time_sec       Duration of latest BGSAVE in sec.
 rdb_current_bgsave_time_sec    Duration of current BGSAVE in sec.
 aof_last_rewrite_time_sec      Duration of latest AOF rewrite in sec.
 aof_current_rewrite_time_sec   Duration of current AOF rewrite in sec.

The 'current' fields are set to -1 if a BGSAVE / AOF rewrite is not in
progress. The 'last' fileds are set to -1 if no previous BGSAVE / AOF
rewrites were performed.

Additionally a few fields in the persistence section were renamed for
consistency:

 changes_since_last_save -> rdb_changes_since_last_save
 bgsave_in_progress -> rdb_bgsave_in_progress
 last_save_time -> rdb_last_save_time
 last_bgsave_status -> rdb_last_bgsave_status
 bgrewriteaof_in_progress -> aof_rewrite_in_progress
 bgrewriteaof_scheduled -> aof_rewrite_scheduled

After the renaming, fields in the persistence section start with rdb_ or
aof_ prefix depending on the persistence method they describe.
The field 'loading' and related fields are not prefixed because they are
unique for both the persistence methods."
antirez,2012-05-23 20:12:50,https://api.github.com/repos/antirez/redis/git/commits/d866803818fb47a851e5730ccff634f993ce6f68,d866803818fb47a851e5730ccff634f993ce6f68,"BITOP command 10x speed improvement.

This commit adds a fast-path to the BITOP that can be used for all the
bytes from 0 to the minimal length of the string, and if there are
at max 16 input keys.

Often the intersected bitmaps are roughly the same size, so this
optimization can provide a 10x speed boost to most real world usages
of the command.

Bytes are processed four full words at a time, in loops specialized
for the specific BITOP sub-command, without the need to check for
length issues with the inputs (since we run this algorithm only as far
as there is data from all the keys at the same time).

The remaining part of the string is intersected in the usual way using
the slow but generic algorith.

It is possible to do better than this with inputs that are not roughly
the same size, sorting the input keys by length, by initializing the
result string in a smarter way, and noticing that the final part of the
output string composed of only data from the longest string does not
need any proecessing since AND, OR and XOR against an empty string does
not alter the output (zero in the first case, and the original string in
the other two cases).

More implementations will be implemented later likely, but this should
be enough to release Redis 2.6-RC4 with bitops merged in.

Note: this commit also adds better testing for BITOP NOT command, that
is currently the faster and hard to optimize further since it just
flips the bits of a single input string."
antirez,2012-05-22 15:40:20,https://api.github.com/repos/antirez/redis/git/commits/fa4a5d59220b1c9e7833b563cb7e9e314747bdf7,fa4a5d59220b1c9e7833b563cb7e9e314747bdf7,"BITOP: handle integer encoded objects correctly.

A bug in the implementation caused BITOP to crash the server if at least
one one of the source objects was integer encoded.

The new implementation takes an additional array of Redis objects
pointers and calls getDecodedObject() to get a reference to a string
encoded object, and then uses decrRefCount() to release the object.

Tests modified to cover the regression and improve coverage."
antirez,2012-05-20 19:34:58,https://api.github.com/repos/antirez/redis/git/commits/7c34643f154f543e1eef7c9855fb8d657146c646,7c34643f154f543e1eef7c9855fb8d657146c646,"BITCOUNT performance improved.

At Redis's default optimization level the command is now much faster,
always using a constant-time bit manipualtion technique to count bits
instead of GCC builtin popcount, and unrolling the loop.

The current implementation performance is 1.5GB/s in a MBA 11"" (1.8 Ghz
i7) compiled with both GCC and clang.

The algorithm used is described here:

http://graphics.stanford.edu/~seander/bithacks.html"
antirez,2012-05-20 09:06:29,https://api.github.com/repos/antirez/redis/git/commits/80f8028e3c0d9948c3f1e1eb56cda1dbbf891d02,80f8028e3c0d9948c3f1e1eb56cda1dbbf891d02,"bitop.c renamed bitops.c

bitop.c contains the ""Bit related string operations"" so it seems more
logical to call it bitops instead of bitop.
This also makes it matching the name of the test (unit/bitops.tcl)."
antirez,2012-05-20 09:03:54,https://api.github.com/repos/antirez/redis/git/commits/01d3a7e7366d3d4c88755516334b182c5e5c2c51,01d3a7e7366d3d4c88755516334b182c5e5c2c51,"Bit operations tests improved.

Fuzzing tests of BITCOUNT / BITOP are iterated multiple times.
The new BITCOUNT fuzzing test uses random strings in a wider interval of
lengths including zero-len strings."
antirez,2012-05-19 22:49:35,https://api.github.com/repos/antirez/redis/git/commits/343d3bd287b701ff3900527b5c920092f66fb592,343d3bd287b701ff3900527b5c920092f66fb592,"popcount() optimization for speed.

We run the array by 32 bit words instead of processing it byte per byte.
If the code is compiled using GCC __builtin_popcount() builtin function
is used instead."
antirez,2012-05-19 14:16:25,https://api.github.com/repos/antirez/redis/git/commits/dbbbe49ef57c5c000469e206c81e5da58bf604ba,dbbbe49ef57c5c000469e206c81e5da58bf604ba,"BITCOUNT refactoring.

The low level popualtion counting function is now separated from the
BITCOUNT command implementation, so that the low level function can be
further optimized and eventually used in other contexts if needed."
antirez,2012-05-19 08:33:20,https://api.github.com/repos/antirez/redis/git/commits/760e7765263ff4b6d5176830c9e8e8d733744996,760e7765263ff4b6d5176830c9e8e8d733744996,"Bit-related string operations moved to bitop.c

All the general string operations are implemented in t_string.c, however
the bit operations, while targeting the string type, are better served
in a specific file where we have the implementations of the following
four commands and helper functions:

    GETBIT
    SETBIT
    BITOP
    BITCOUNT

In the future this file will probably contain more code related to
making the BITOP and BITCOUNT operations faster."
antirez,2012-05-17 13:50:44,https://api.github.com/repos/antirez/redis/git/commits/a3f2b4895b979bde1e99d6313d396b62c325ab72,a3f2b4895b979bde1e99d6313d396b62c325ab72,"BITOP and BITCOUNT tests.

The Redis implementation is tested against Tcl implementations of the
same operation. Both fuzzing and testing of specific aspects of the
commands behavior are performed."
antirez,2012-05-16 14:23:09,https://api.github.com/repos/antirez/redis/git/commits/0bd6d68e34bc41cd80cd7fc44aab9cf3884de8dc,0bd6d68e34bc41cd80cd7fc44aab9cf3884de8dc,"New commands: BITOP and BITCOUNT.

The motivation for this new commands is to be search in the usage of
Redis for real time statistics. See the article ""Fast real time metrics
using Redis"".

http://blog.getspool.com/2011/11/29/fast-easy-realtime-metrics-using-redis-bitmaps/

In general Redis strings when used as bitmaps using the SETBIT/GETBIT
command provide a very space-efficient and fast way to store statistics.
For instance in a web application with users, every user can be
associated with a key that shows every day in which the user visited the
web service. This information can be really valuable to extract user
behaviour information.

With Redis bitmaps doing this is very simple just saying that a given
day is 0 (the data the service was put online) and all the next days are
1, 2, 3, and so forth. So with SETBIT it is possible to set the bit
corresponding to the current day every time the user visits the site.

It is possible to take the count of the bit sets on the run, this is
extremely easy using a Lua script. However a fast bit count native
operation can be useful, especially if it can operate on ranges, or when
the string is small like in the case of days (even if you consider many
years it is still extremely little data).

For this reason BITOP was introduced. The command counts the number of
bits set to 1 in a string, with optional range:

BITCOUNT key [start end]

The start/end parameters are similar to GETRANGE. If omitted the whole
string is tested.

Population counting is more useful when bit-level operations like AND,
OR and XOR are avaialble. For instance I can test multiple users to see
the number of days three users visited the site at the same time. To do
this we can take the AND of all the bitmaps, and then count the set bits.

For this reason the BITOP command was introduced:

BITOP [AND|OR|XOR|NOT] dest_key src_key1 src_key2 src_key3 ... src_keyN

In the special case of NOT (that inverts the bits) only one source key
can be passed.

The judicious use of BITCOUNT and BITOP combined can lead to interesting
use cases with very space efficient representation of data.

The implementation provided is still not tested and optimized for speed,
next commits will introduce unit tests. Later the implementation will be
profiled to see if it is possible to gain an important amount of speed
without making the code much more complex."
antirez,2012-05-24 13:03:23,https://api.github.com/repos/antirez/redis/git/commits/6f05a653369fbbb9981449308c9e3f292011f9c5,6f05a653369fbbb9981449308c9e3f292011f9c5,"Add aof_rewrite_buffer_length INFO field.

The INFO output, persistence section, already contained the field
describing the size of the current AOF buffer to flush on disk. However
the other AOF buffer, used to accumulate changes during an AOF rewrite,
was not mentioned in the INFO output.

This commit introduces a new field called aof_rewrite_buffer_length with
the length of the rewrite buffer."
antirez,2012-05-22 11:03:41,https://api.github.com/repos/antirez/redis/git/commits/47ca4b6e28af49d1904f40fceacf58bb2907fbf2,47ca4b6e28af49d1904f40fceacf58bb2907fbf2,"Allow an AOF rewrite buffer > 2GB (Fix for issue #504).

During the AOF rewrite process, the parent process needs to accumulate
the new writes in an in-memory buffer: when the child will terminate the
AOF rewriting process this buffer (that ist the difference between the
dataset when the rewrite was started, and the current dataset) is
flushed to the new AOF file.

We used to implement this buffer using an sds.c string, but sds.c has a
2GB limit. Sometimes the dataset can be big enough, the amount of writes
so high, and the rewrite process slow enough that we overflow the 2GB
limit, causing a crash, documented on github by issue #504.

In order to prevent this from happening, this commit introduces a new
system to accumulate writes, implemented by a linked list of blocks of
10 MB each, so that we also avoid paying the reallocation cost.

Note that theoretically modern operating systems may implement realloc()
simply as a remaping of the old pages, thus with very good performances,
see for instance the mremap() syscall on Linux. However this is not
always true, and jemalloc by default avoids doing this because there are
issues with the current implementation of mremap().

For this reason we are using a linked list of blocks instead of a single
block that gets reallocated again and again.

The changes in this commit lacks testing, that will be performed before
merging into the unstable branch. This fix will not enter 2.4 because it
is too invasive. However 2.4 will log a warning when the AOF rewrite
buffer is near to the 2GB limit."
antirez,2012-05-24 09:35:21,https://api.github.com/repos/antirez/redis/git/commits/ef37997608dfa5ad457961e0f3e427315ba4be83,ef37997608dfa5ad457961e0f3e427315ba4be83,"Dead code removed from replication.c.

The user @jokea noticed that the following line of code into
replication.c made little sense:

    addReplySds(slave,sdsempty());

Investigating a bit I found that this was introduced by commit 6208b3a7
three years ago in the early stages of Redis. The code apparently is not
useful at all, so I'm removing it.

This change will not be backported into 2.4 so that in the rare case
this should introduce a bug, we'll have a chance to detect it into the
development branch. However following the code path it seems like the
code is not useful at all, so the risk is truly small."
jokea,2012-05-23 09:19:49,https://api.github.com/repos/antirez/redis/git/commits/e150ce3ce6375de2f11784935483e85cf3bbcf59,e150ce3ce6375de2f11784935483e85cf3bbcf59,Set fd to writable when poll(2) detects POLLERR or POLLHUP event.
antirez,2012-05-23 09:02:38,https://api.github.com/repos/antirez/redis/git/commits/348ee1a40a4d8105dfaf6fa2ab2dffc15a47d86d,348ee1a40a4d8105dfaf6fa2ab2dffc15a47d86d,"Fixed issue #516 (ZINTERSTORE mixing sets and zsets).

Weeks ago trying to fix an harmless GCC warning I introduced a bug in
the ziplist-encoded implementations of sorted sets.

The bug completely broke zuiNext() iterator, that is used in the
ZINTERSTORE and ZUNIONSTORE implementation, so those two commands are no
longer reliable starting from Redis version 2.4.12 and latest 2.6.0-RC
releases.

This commit fixes the problem and adds a regression test."
antirez,2012-05-22 11:13:24,https://api.github.com/repos/antirez/redis/git/commits/2bcd18a2e95ba1278e8ab4671a6987416800e36f,2bcd18a2e95ba1278e8ab4671a6987416800e36f,"Redis test: include bug report on crash.

Due to a change in the format of the bug report in case of crash of
failed assertion the test suite was no longer able to properly log it.
Instead just a protocol error was logged by the Redis TCL client that
provided no clue about the actual problem.

This commit resolves the issue by logging everything from the first line
of the log including the string REDIS BUG REPORT, till the end of the
file."
antirez,2012-05-21 14:50:05,https://api.github.com/repos/antirez/redis/git/commits/5a559993044fbfa54c9e666a54b757b847d49549,5a559993044fbfa54c9e666a54b757b847d49549,"Use comments to split aof.c into sections.

This makes the code more readable, it is still not the case to split the
file itself into three different files, but the logical separation
improves the readability especially since new commits are going to
introduce an additional section."
antirez,2012-05-20 21:47:45,https://api.github.com/repos/antirez/redis/git/commits/d44a36e0060ef4e5f39989b91071a279347eb045,d44a36e0060ef4e5f39989b91071a279347eb045,"TODO file removed.

The list of things to do is since long time in two places:

1) Github issues.
2) I've a private TOOD list of random ideas, what makes sense is later
moved to github issues. So github is anyway the true source of things to
do."
antirez,2012-05-16 10:22:29,https://api.github.com/repos/antirez/redis/git/commits/d165f7856183b66700a7d400ccc742c04d4ae865,d165f7856183b66700a7d400ccc742c04d4ae865,"Deleted jemalloc.orig from /deps.

In the commit upgrading jemalloc to version 3.0.0 I added the old
version of Jemalloc in the 'jemalloc.orig' directory for an error.
This commit removes the not useful version of jemalloc."
antirez,2012-05-15 13:27:12,https://api.github.com/repos/antirez/redis/git/commits/ad4c0b4117ec15c0061b702f230caf1bc5eb4e06,ad4c0b4117ec15c0061b702f230caf1bc5eb4e06,"Jemalloc updated to 3.0.0.

Full changelog here:

http://www.canonware.com/cgi-bin/gitweb.cgi?p=jemalloc.git;a=blob_plain;f=ChangeLog;hb=master

Notable improvements from the point of view of Redis:

1) Bugfixing.
2) Support for Valgrind.
3) Support for OSX Lion, FreeBSD."
pietern,2012-05-14 18:06:34,https://api.github.com/repos/antirez/redis/git/commits/3c72c94aaeb98b0c4c1a98992539f8839cea1d74,3c72c94aaeb98b0c4c1a98992539f8839cea1d74,Whitespace
davepacheco,2012-03-27 03:41:58,https://api.github.com/repos/antirez/redis/git/commits/6d3127704854ca9985a576ddd107b3f3c72448a2,6d3127704854ca9985a576ddd107b3f3c72448a2,use port_getn instead of port_get
davepacheco,2012-03-27 00:58:19,https://api.github.com/repos/antirez/redis/git/commits/05da63da0c391d4cca46cd32dbff7bc8a5266cb7,05da63da0c391d4cca46cd32dbff7bc8a5266cb7,first cut at event port support
pietern,2012-05-04 18:54:06,https://api.github.com/repos/antirez/redis/git/commits/f16d090c728dd23ce23b0d2b316c02d34bf9b0da,f16d090c728dd23ce23b0d2b316c02d34bf9b0da,Fix `install` target on OSX (see #495)
antirez,2012-05-14 15:35:51,https://api.github.com/repos/antirez/redis/git/commits/e9f0419c99f12711493e0b0c692acb4ed8f4bc03,e9f0419c99f12711493e0b0c692acb4ed8f4bc03,"Added time.h include in redis-cli.

redis-cli.c uses the time() function to seed the PRNG, but time.h was
not included. This was not noticed since sys/time.h is included and was
enough in most systems (but not correct). With Ubuntu 12.04 GCC
generates a warning that made us aware of the issue."
antirez,2012-05-14 14:04:41,https://api.github.com/repos/antirez/redis/git/commits/b3624f5a160c2a3372ef1a0ab1858a804b7cbfc0,b3624f5a160c2a3372ef1a0ab1858a804b7cbfc0,"activeExpireCycle(): better precision in max time used.

activeExpireCycle() can consume no more than a few milliseconds per
iteration. This commit improves the precision of the check for the time
elapsed in two ways:

1) We check every 16 iterations instead of the main loop instead of 256.
2) We reset iterations at the start of the function and not every time
   we switch to the next database, so the check is correctly performed
   every 16 iterations."
antirez,2012-05-13 19:52:35,https://api.github.com/repos/antirez/redis/git/commits/61daf8914d6c69c65fe37fa2d3914f266b71ea71,61daf8914d6c69c65fe37fa2d3914f266b71ea71,"Impovements for: Redis timer, hashes rehashing, keys collection.

A previous commit introduced REDIS_HZ define that changes the frequency
of calls to the serverCron() Redis function. This commit improves
different related things:

1) Software watchdog: now the minimal period can be set according to
REDIS_HZ. The minimal period is two times the timer period, that is:

    (1000/REDIS_HZ)*2 milliseconds

2) The incremental rehashing is now performed in the expires dictionary
as well.

3) The activeExpireCycle() function was improved in different ways:

- Now it checks if it already used too much time using microseconds
  instead of milliseconds for better precision.
- The time limit is now calculated correctly, in the previous version
  the division was performed before of the multiplication resulting in
  a timelimit of 0 if HZ was big enough.
- Databases with less than 1% of buckets fill in the hash table are
  skipped, because getting random keys is too expensive in this
  condition.

4) tryResizeHashTables() is now called at every timer call, we need to
   match the number of calls we do to the expired keys colleciton cycle.

5) REDIS_HZ was raised to 100."
antirez,2012-05-13 14:40:29,https://api.github.com/repos/antirez/redis/git/commits/94343492361a04301a48fc56490d6113ff97aba9,94343492361a04301a48fc56490d6113ff97aba9,"Redis timer interrupt frequency configurable as REDIS_HZ.

Redis uses a function called serverCron() that is very similar to the
timer interrupt of an operating system. This function is used to handle
a number of asynchronous things, like active expired keys collection,
clients timeouts, update of statistics, things related to the cluster
and replication, triggering of BGSAVE and AOF rewrite process, and so
forth.

In the past the timer was called 1 time per second. At some point it was
raised to 10 times per second, but it still was fixed and could not be
changed even at compile time, because different functions called from
serverCron() assumed a given fixed frequency.

This commmit makes the frequency configurable, so that it is simpler to
pick a good tradeoff between overhead of this function (that is usually
very small) and the responsiveness of Redis during a few critical
circumstances where a lot of work is done inside the timer.

An example of such a critical condition is mass-expire of a lot of keys
in the same second. Up to a given percentage of CPU time is used to
perform expired keys collection per expire cylce. Now changing the
REDIS_HZ macro it is possible to do less work but more times per second
in order to block the server for less time.

If this patch will work well in our tests it will enter Redis 2.6-final."
antirez,2012-05-11 20:33:28,https://api.github.com/repos/antirez/redis/git/commits/f333788fbcaf67fa97c509f0f61d557b6669b1fe,f333788fbcaf67fa97c509f0f61d557b6669b1fe,Comment improved so that the code goal is more clear. Thx to @agladysh.
antirez,2012-05-11 17:17:31,https://api.github.com/repos/antirez/redis/git/commits/1dcc95d08105167a3a69acc4fd8d3bb725a5ac8f,1dcc95d08105167a3a69acc4fd8d3bb725a5ac8f,"More incremental active expired keys collection process.

If a large amonut of keys are all expiring about at the same time, the
""active"" expired keys collection cycle used to block as far as the
percentage of already expired keys was >= 25% of the total population of
keys with an expire set.

This could block the server even for many seconds in order to reclaim
memory ASAP. The new algorithm uses at max a small amount of
milliseconds per cycle, even if this means reclaiming the memory less
promptly it also means a more responsive server."
antirez,2012-05-11 15:26:09,https://api.github.com/repos/antirez/redis/git/commits/27737964c40716d61321cb0101d5ddb641298fff,27737964c40716d61321cb0101d5ddb641298fff,"If the computer running the Redis test is slow, we revert to --clients 1 to avoid false positives."
antirez,2012-05-11 14:08:57,https://api.github.com/repos/antirez/redis/git/commits/ea66be60802fea82d88d48e0af87d1e6c20bfee5,ea66be60802fea82d88d48e0af87d1e6c20bfee5,redis-cli pipe mode: handle EINTR properly as well so that SIGSTOP/SIGCONT are handled correctly.
antirez,2012-05-11 08:45:12,https://api.github.com/repos/antirez/redis/git/commits/f6bd9122c0692bd76e7c1d90062c50551cd898a5,f6bd9122c0692bd76e7c1d90062c50551cd898a5,redis-cli pipe mode: handle EAGAIN while writing to socket.
antirez,2012-05-09 18:45:00,https://api.github.com/repos/antirez/redis/git/commits/8c6301462b506efa1828d71ecac8bac11ceb8986,8c6301462b506efa1828d71ecac8bac11ceb8986,Fix PREFIX typo in Makefile.
antirez,2012-05-09 08:34:52,https://api.github.com/repos/antirez/redis/git/commits/b26808a532acfc15983745874b4ad213efbf2825,b26808a532acfc15983745874b4ad213efbf2825,Allow PREFIX to be overrided in Makefile.
antirez,2012-05-06 08:05:31,https://api.github.com/repos/antirez/redis/git/commits/088c508abc89b66ce14870a2abe06879238a3b21,088c508abc89b66ce14870a2abe06879238a3b21,redis-cli --pipe for mass import.
pietern,2012-05-05 00:26:24,https://api.github.com/repos/antirez/redis/git/commits/bf219416868479b8324e7bc1552611dfd28a56b9,bf219416868479b8324e7bc1552611dfd28a56b9,"Compare integers in ziplist regardless of encoding

Because of the introduction of new integer encoding types for ziplists
in the 2.6 tree, the same integer value may have a different encoding in
different versions of the ziplist implementation. This means that the
encoding can NOT be used as a fast path in comparing integers."
antirez,2012-05-04 11:41:02,https://api.github.com/repos/antirez/redis/git/commits/abf54ee73c9dcfa26a1caefcb51cd0b0ee9b3afd,abf54ee73c9dcfa26a1caefcb51cd0b0ee9b3afd,"Merge pull request #494 from quiver/init-fixes

fix several bugs of init.d scripts"
antirez,2012-05-02 20:41:50,https://api.github.com/repos/antirez/redis/git/commits/af3853c3bf6cbb4f4b75afbc56dc2ba0c17c4d5e,af3853c3bf6cbb4f4b75afbc56dc2ba0c17c4d5e,"syncio.c read / write functions reworked for correctness and performance.

The new implementation start reading / writing before blocking with
aeWait(), likely the descriptor can accept writes or has buffered data
inside and we can go faster, otherwise we get an error and wait.

This change has effects on speed but also on correctness: on socket
errors when we perform non blocking connect(2) write is performed ASAP
and the error is returned ASAP before waiting.

So the practical effect is that now a Redis slave is more available if it
can not connect to the master, previously the slave continued to block on
syncWrite() trying to send SYNC, and serving commands very slowly."
antirez,2012-05-02 19:45:01,https://api.github.com/repos/antirez/redis/git/commits/299290d3a42e92d73a22169c87aa21d2fe6e3b34,299290d3a42e92d73a22169c87aa21d2fe6e3b34,Remove useless trailing space in SYNC command sent to master.
antirez,2012-05-02 15:14:45,https://api.github.com/repos/antirez/redis/git/commits/ae62d29d1db7a174db4e519fa975b7df6f369d4d,ae62d29d1db7a174db4e519fa975b7df6f369d4d,"Use specific error if master is down and slave-serve-stale-data is set to no.

We used to reply -ERR ... message ..., now the reply is
instead -MASTERDOWN ... message ... so that it can be distinguished
easily by the other error conditions."
antirez,2012-05-02 09:40:46,https://api.github.com/repos/antirez/redis/git/commits/92997d06ea3bd6b24414db0ca51987f48b1a87b8,92997d06ea3bd6b24414db0ca51987f48b1a87b8,"Test ""Turning off AOF kills the background writing child if any"" is now more reliable."
pietern,2012-04-30 17:16:20,https://api.github.com/repos/antirez/redis/git/commits/cc4f65fea4f72ba891b07769d685364f209f5355,cc4f65fea4f72ba891b07769d685364f209f5355,"Use safe dictionary iterator from KEYS

Every matched key in a KEYS call is checked for expiration. When the key
is set to expire, the call to `getExpire` will assert that the key also
exists in the main dictionary. This in turn causes a rehashing step to
be executed. Rehashing a dictionary when there is an iterator active may
result in the iterator emitting duplicate entries, or not emitting some
entries at all. By using a safe iterator, the rehash step is omitted."
alicebob,2012-04-30 15:57:12,https://api.github.com/repos/antirez/redis/git/commits/2ac546e00cd4000506558e23d11acafb4ce654b7,2ac546e00cd4000506558e23d11acafb4ce654b7,Show problem with 'keys' command with specific command sequence.
antirez,2012-04-30 08:55:03,https://api.github.com/repos/antirez/redis/git/commits/d9241b35e5f279682cb0b4bdebaed86be2405d36,d9241b35e5f279682cb0b4bdebaed86be2405d36,Properly wait the slave to sync with master in BRPOPLPUSH test.
antirez,2012-04-28 13:39:00,https://api.github.com/repos/antirez/redis/git/commits/2d4b55214f9d9f806ef8b63aa66fdc97dcb503c2,2d4b55214f9d9f806ef8b63aa66fdc97dcb503c2,A more lightweight implementation of issue 141 regression test.
antirez,2012-04-27 14:28:31,https://api.github.com/repos/antirez/redis/git/commits/ffe003dcbe9e719659f9a9d690f5bc5fd7b0615e,ffe003dcbe9e719659f9a9d690f5bc5fd7b0615e,memtest.c fixed to actually use v1 and v2 in memtest_fill_value().
antirez,2012-04-27 13:57:17,https://api.github.com/repos/antirez/redis/git/commits/841048f2c832b41d168b10cea6d80c1ab3c49dca,841048f2c832b41d168b10cea6d80c1ab3c49dca,redis-cli commands description in help.h updated.
antirez,2012-04-27 09:41:25,https://api.github.com/repos/antirez/redis/git/commits/0ad10db22098ef1555236719743e02da7cb85e00,0ad10db22098ef1555236719743e02da7cb85e00,"Set LUA_MASKCOUNT hook more selectively. Fixes issue #480.

An user reported a crash with Redis scripting (see issue #480 on
github), inspection of the kindly provided strack trace showed that
server.lua_caller was probably set to NULL. The stack trace also slowed
that the call to the hook was originating from a point where we just
used to set/get a few global variables in the Lua state.

What was happening is that we did not set the timeout hook selectively
only when the user script was called. Now we set it more selectively,
specifically only in the context of the lua_pcall() call, and make sure
to remove the hook when the call returns. Otherwise the hook can get
called in random contexts every time we do something with the Lua
state."
antirez,2012-04-26 14:53:11,https://api.github.com/repos/antirez/redis/git/commits/a3eb7ac87d00cbd74b0dd386dba83748cea2465c,a3eb7ac87d00cbd74b0dd386dba83748cea2465c,"Re-introduce -g -rdynamic -ggdb when linking, fixing strack traces.

A previous commit removed -g -rdynamic -ggdb as LDFLAGS, not allowing
Redis to produce a stack trace wth symbol names on crash.
This commit fixes the issue."
antirez,2012-04-26 14:04:53,https://api.github.com/repos/antirez/redis/git/commits/11bd247d2b333123402095421d0424f87e7e28c3,11bd247d2b333123402095421d0424f87e7e28c3,Produce the stack trace in an async safe way.
antirez,2012-04-26 14:21:19,https://api.github.com/repos/antirez/redis/git/commits/3ada43e732678e1f1ed0830c7407eef99ad63c46,3ada43e732678e1f1ed0830c7407eef99ad63c46,"Don't use an alternative stack for SIGSEGV & co.

This commit reverts most of c575766202773c858be0870c20cd495b722927c3, in
order to use back main stack for signal handling.

The main reason is that otherwise it is completely pointless that we do
a lot of efforts to print the stack trace on crash, and the content of
the stack and registers as well. Using an alternate stack broken this
feature completely."
antirez,2012-04-26 09:25:13,https://api.github.com/repos/antirez/redis/git/commits/28ccb53008eed402999d85aa0ac66714b9f5bd03,28ccb53008eed402999d85aa0ac66714b9f5bd03,"Redis test: More reliable BRPOPLPUSH replication test.

Now it uses the new wait_for_condition testing primitive.
Also wait_for_condition implementation was fixed in this commit to properly
escape the expr command and its argument."
antirez,2012-04-26 09:17:47,https://api.github.com/repos/antirez/redis/git/commits/57356b80cddd203086e932a09a8916a925cb8cf6,57356b80cddd203086e932a09a8916a925cb8cf6,Merge remote-tracking branch 'origin/unstable' into unstable
antirez,2012-04-26 09:16:52,https://api.github.com/repos/antirez/redis/git/commits/5080e625d31e5132f952c5132e69aa65c6c2b383,5080e625d31e5132f952c5132e69aa65c6c2b383,"Redis test: scripting EVALSHA replication test more reliable.

A new primitive wait_for_condition was introduced in the scripting
engine that makes waiting for events simpler, so that it is simpler to
write tests that are more resistant to timing issues."
antirez,2012-04-25 20:39:13,https://api.github.com/repos/antirez/redis/git/commits/d445988c68bd795b1f9b79057513d46b062f4596,d445988c68bd795b1f9b79057513d46b062f4596,"Merge pull request #481 from dtran320/unstable

Spelling: s/synchrnonization/synchronization"
dtran320,2012-04-25 19:21:56,https://api.github.com/repos/antirez/redis/git/commits/31788f50b7dfde5755c9964489277449092f9f4b,31788f50b7dfde5755c9964489277449092f9f4b,Spelling: s/synchrnonization/synchronization
antirez,2012-04-24 17:14:03,https://api.github.com/repos/antirez/redis/git/commits/d9237055baddbc41d6832ef5e6a516feb738eb95,d9237055baddbc41d6832ef5e6a516feb738eb95,Explicitly use bash for install_server.sh. Fixes issue #397
antirez,2012-04-24 17:05:27,https://api.github.com/repos/antirez/redis/git/commits/29c8cf011657e9f95551be20b20de06c7f7f947d,29c8cf011657e9f95551be20b20de06c7f7f947d,redis-check-dump now is RDB version 6 ready.
antirez,2012-04-24 15:15:21,https://api.github.com/repos/antirez/redis/git/commits/7dbc514de7ee0ccffde321469a16b0a5c64a635c,7dbc514de7ee0ccffde321469a16b0a5c64a635c,Spurious debugging printf removed.
antirez,2012-04-24 14:54:07,https://api.github.com/repos/antirez/redis/git/commits/a76b9063d0b858fd2c72a92794b4c852005cac30,a76b9063d0b858fd2c72a92794b4c852005cac30,"Added two new encodings to ziplist.c

1) One integer ""immediate"" encoding that can encode from 0 to 12 in the
encoding byte itself.
2) One 8 bit signed integer encoding that can encode 8 bit signed small
integers in a single byte.

The idea is to exploit all the not used bits we have around in a
backward compatible way."
antirez,2012-04-24 10:53:30,https://api.github.com/repos/antirez/redis/git/commits/053d56a1fabc6f0ed5895bd8b3f725a6ee4ffdba,053d56a1fabc6f0ed5895bd8b3f725a6ee4ffdba,rdbLoad() should check REDIS_RDB_VERSION instead of hardcoded number.
antirez,2012-04-24 10:51:59,https://api.github.com/repos/antirez/redis/git/commits/f22cff43a60010644907e750fb3be5e49b9f8698,f22cff43a60010644907e750fb3be5e49b9f8698,ziplist.c: added comments about the new 24 bit encoding.
grisha,2012-04-20 14:38:42,https://api.github.com/repos/antirez/redis/git/commits/5a86ab47995586f0a0ef18472eafd6e9131644c1,5a86ab47995586f0a0ef18472eafd6e9131644c1,"Add a 24bit integer to ziplists to save one byte for ints that can
fit in 24 bits (thanks to antirez for catching and solving the two's compliment
bug).

Increment REDIS_RDB_VERSION to 6"
antirez,2012-04-24 09:28:10,https://api.github.com/repos/antirez/redis/git/commits/21661d7acc9ed525c1150f6fa55646d19f5a31d9,21661d7acc9ed525c1150f6fa55646d19f5a31d9,"Fixed a bug in propagation of PUBLISH via the cluster bus.

This bug was spotted by clang on FreeBSD."
antirez,2012-04-24 09:11:55,https://api.github.com/repos/antirez/redis/git/commits/e54fe9a79f71e97a5beb76dee346c8c0606b02be,e54fe9a79f71e97a5beb76dee346c8c0606b02be,A few compiler warnings suppressed.
antirez,2012-04-24 09:07:15,https://api.github.com/repos/antirez/redis/git/commits/a66a4963498d08094fc16c2b0afe6faf8ad512b0,a66a4963498d08094fc16c2b0afe6faf8ad512b0,"Fix and refactoring of code used to get registers on crash.

This fixes compilation on FreeBSD (and possibly other systems) by
not using ucontext_t at all if HAVE_BACKTRACE is not defined.
Also the ifdefs to get the registers are modified to explicitly test for the
operating system in the first level, and the arch in the second level
of nesting."
antirez,2012-04-23 15:27:39,https://api.github.com/repos/antirez/redis/git/commits/c4a4755286f6d7df99ba40f83ffb3874807fe83e,c4a4755286f6d7df99ba40f83ffb3874807fe83e,Ziplist encoding now tested with negative integers as well.
antirez,2012-04-23 09:34:19,https://api.github.com/repos/antirez/redis/git/commits/d344228734dccb1dc67a1fe7e80825c5e49a8199,d344228734dccb1dc67a1fe7e80825c5e49a8199,"Merge pull request #421 from ErikDubbelboer/sds-const

Added consts keyword where possible"
antirez,2012-04-23 09:07:21,https://api.github.com/repos/antirez/redis/git/commits/c22e0eecd5624d498ec6ee10f6b449ec5ff28c8e,c22e0eecd5624d498ec6ee10f6b449ec5ff28c8e,"Merge pull request #461 from schlenk/unstable

Replace some unnecessary calls to echo and cat in tests"
antirez,2012-04-23 08:57:43,https://api.github.com/repos/antirez/redis/git/commits/4e7cc35f1a1537661b4fc70edf44f760ee3e8674,4e7cc35f1a1537661b4fc70edf44f760ee3e8674,New time limit for protocol desync test set to 30 seconds to reduce false positives.
antirez,2012-04-23 08:43:24,https://api.github.com/repos/antirez/redis/git/commits/a3f990818d649d16c0a26be4e18845d540875af8,a3f990818d649d16c0a26be4e18845d540875af8,Remove loadfile() access from the scripting engine.
antirez,2012-04-21 19:49:21,https://api.github.com/repos/antirez/redis/git/commits/eb6e7eb94df3f29b33dcdf40b1790dadc7f37f50,eb6e7eb94df3f29b33dcdf40b1790dadc7f37f50,Even inside #if 0 comments are comments.
antirez,2012-04-21 18:35:51,https://api.github.com/repos/antirez/redis/git/commits/92cc20ecfe195e3f08832200b1efc8911fe586f8,92cc20ecfe195e3f08832200b1efc8911fe586f8,Merge remote-tracking branch 'origin/unstable' into unstable
antirez,2012-04-21 17:20:03,https://api.github.com/repos/antirez/redis/git/commits/d3701d27141b8e400ccdf5fbf22c504d112fab63,d3701d27141b8e400ccdf5fbf22c504d112fab63,"Limit memory used by big SLOWLOG entries.

Two limits are added:

1) Up to SLOWLOG_ENTRY_MAX_ARGV arguments are logged.
2) Up to SLOWLOG_ENTRY_MAX_STRING bytes per argument are logged.
3) slowlog-max-len is set to 128 by default (was 1024).

The number of remaining arguments / bytes is logged in the entry
so that the user can understand better the nature of the logged command."
antirez,2012-04-21 10:31:06,https://api.github.com/repos/antirez/redis/git/commits/7d3ee4172f52bf94185960799c1d12c16ed96ff7,7d3ee4172f52bf94185960799c1d12c16ed96ff7,"Merge pull request #440 from ErikDubbelboer/spelling

Fixed some spelling errors in comments"
antirez,2012-04-21 10:27:15,https://api.github.com/repos/antirez/redis/git/commits/28d1ee2cda01bccdd2424f8fdbb4a924de37eaa3,28d1ee2cda01bccdd2424f8fdbb4a924de37eaa3,"Merge pull request #414 from chobits/unstable

fix typos in tests/assets/default.conf"
antirez,2012-04-21 10:08:26,https://api.github.com/repos/antirez/redis/git/commits/fd72fe261dc8ac1f6450dfb6197391bb530ac5a0,fd72fe261dc8ac1f6450dfb6197391bb530ac5a0,"README now makes clear that our support for solaris derived systems is ""best effort""."
antirez,2012-04-19 22:04:07,https://api.github.com/repos/antirez/redis/git/commits/60e2e5b50dcdb1b9e424b2c571261dad6dcff349,60e2e5b50dcdb1b9e424b2c571261dad6dcff349,redis.conf AOF section comments improved.
antirez,2012-04-19 21:49:33,https://api.github.com/repos/antirez/redis/git/commits/47db53c3c3086def9a00c23e67ebdef5899bd746,47db53c3c3086def9a00c23e67ebdef5899bd746,New tests related to scripts max execution time.
antirez,2012-04-19 21:35:15,https://api.github.com/repos/antirez/redis/git/commits/e3923a3508af010d80736c401cc8083277ea4e53,e3923a3508af010d80736c401cc8083277ea4e53,SHUTDOWN NOSAVE now can stop a non returning script. Issue #466.
antirez,2012-04-18 21:56:07,https://api.github.com/repos/antirez/redis/git/commits/1e35ae7486aaa5efb24b537607ad3f5b1f8fb33b,1e35ae7486aaa5efb24b537607ad3f5b1f8fb33b,Currenly not used code in dict.c commented out.
antirez,2012-04-18 21:50:16,https://api.github.com/repos/antirez/redis/git/commits/5498e7bc767d39ba368d18074afc5f488088dc20,5498e7bc767d39ba368d18074afc5f488088dc20,Tests for scripting PRNG.
antirez,2012-04-18 18:53:37,https://api.github.com/repos/antirez/redis/git/commits/5386f72d003c75a7cb25fd87f16d9aa715074a1b,5386f72d003c75a7cb25fd87f16d9aa715074a1b,redis-cli --bigkeys output modified to be simpler to read..
antirez,2012-04-18 18:33:02,https://api.github.com/repos/antirez/redis/git/commits/f26761aa1052d838be4c424929c41d012511b45c,f26761aa1052d838be4c424929c41d012511b45c,redis-cli --bigkeys
antirez,2012-04-18 16:13:31,https://api.github.com/repos/antirez/redis/git/commits/cddfd67ed43c70c600770ef7020fd131cc1eda50,cddfd67ed43c70c600770ef7020fd131cc1eda50,Test SDIFF with first set empty.
antirez,2012-04-18 16:10:48,https://api.github.com/repos/antirez/redis/git/commits/4264459141ee8d649dfb905a9d89adfca920728d,4264459141ee8d649dfb905a9d89adfca920728d,"Test SINTER against same integer elements, but different set encoding."
antirez,2012-04-18 16:05:02,https://api.github.com/repos/antirez/redis/git/commits/f800942f64ac10e4550d5f4e9f74e92e5724d339,f800942f64ac10e4550d5f4e9f74e92e5724d339,Test SINTER with non existing key.
antirez,2012-04-18 16:00:12,https://api.github.com/repos/antirez/redis/git/commits/88f77a2b7eb7b922a2cba57c0e01c9ecb53c0109,88f77a2b7eb7b922a2cba57c0e01c9ecb53c0109,Added an SMOVE test where src and dest key are the same.
antirez,2012-04-18 15:56:17,https://api.github.com/repos/antirez/redis/git/commits/e51a218aaacab92982def45dbc0c90ccb44f30e1,e51a218aaacab92982def45dbc0c90ccb44f30e1,New hash fuzzing test.
antirez,2012-04-18 15:38:02,https://api.github.com/repos/antirez/redis/git/commits/5ba79bda7f38b88afc1e93741413bec077c97417,5ba79bda7f38b88afc1e93741413bec077c97417,Document mostly dead code in RPOPLPUSH implementation.
antirez,2012-04-18 15:32:48,https://api.github.com/repos/antirez/redis/git/commits/79daddd5ba62dc6d1b5e5ca05c73a9f8fb9e80ec,79daddd5ba62dc6d1b5e5ca05c73a9f8fb9e80ec,Explicit RPOP/LPOP tests.
antirez,2012-04-18 15:22:14,https://api.github.com/repos/antirez/redis/git/commits/7aa0dfd014b76b368d7b96017c3b11f76401a341,7aa0dfd014b76b368d7b96017c3b11f76401a341,Test LINSERT syntax error.
antirez,2012-04-18 15:17:53,https://api.github.com/repos/antirez/redis/git/commits/94e5c1d7e5928b53df545a62f91d033754408b43,94e5c1d7e5928b53df545a62f91d033754408b43,Test LINDEX out of range index.
antirez,2012-04-18 14:25:59,https://api.github.com/repos/antirez/redis/git/commits/d162f9eb64f9f9dbb121929f5f88cdde4b76e816,d162f9eb64f9f9dbb121929f5f88cdde4b76e816,"Merge pull request #456 from pietern/unstable-mkopts

Persist Makefile flags (unstable)"
antirez,2012-04-18 09:37:14,https://api.github.com/repos/antirez/redis/git/commits/acf41c96cbeb9fcbaefc321b65a6a7c3053be75e,acf41c96cbeb9fcbaefc321b65a6a7c3053be75e,"Marginally cleaner lookupKeyByPattern() implementation.

just fieldobj itself as sentinel of the fact a field object is used or
not, instead of using the filed length, that may be confusing both for
people and for the compiler emitting a warning."
antirez,2012-04-18 09:34:18,https://api.github.com/repos/antirez/redis/git/commits/8ec9b03c6b6bf266c2d16afc0d968181c7baea85,8ec9b03c6b6bf266c2d16afc0d968181c7baea85,More robust maxclients test.
antirez,2012-04-18 09:31:24,https://api.github.com/repos/antirez/redis/git/commits/a5f8341245aeebd22a2474e92c4ed497eae01545,a5f8341245aeebd22a2474e92c4ed497eae01545,"Two small fixes to maxclients handling.

1) Don't accept maxclients set to < 0
2) Allow maxclients < 1024, it is useful for testing."
schlenk,2012-04-17 20:20:54,https://api.github.com/repos/antirez/redis/git/commits/875944a23f37916a419bcf4b69e3b255ef093cde,875944a23f37916a419bcf4b69e3b255ef093cde,"Replace unnecessary calls to echo and cat

Tcl's exec can send data to stdout itself, no need to call cat/echo for
that usually."
antirez,2012-04-17 14:28:50,https://api.github.com/repos/antirez/redis/git/commits/6a3f0ac68a0d649b85575dd61ef4bd26efb3ac81,6a3f0ac68a0d649b85575dd61ef4bd26efb3ac81,"Added test for SORT corner case: pattern ending with just ""->""."
antirez,2012-04-17 11:05:09,https://api.github.com/repos/antirez/redis/git/commits/3c25c4a691aec646cfdc3f840f356ef3bb5840c0,3c25c4a691aec646cfdc3f840f356ef3bb5840c0,"lookupKeyByPattern() used by SORT GET/BY rewritten. Fixes issue #460.

lookupKeyByPattern() was implemented with a trick to speedup the lookup
process allocating two fake Redis obejcts on the stack. However now that
we propagate expires to the slave as DEL operations the lookup of the
key may result into a call to expireIfNeeded() having the stack
allocated object as argument, that may in turn use it to create the
protocol to send to the slave. But since this fake obejcts are
inherently read-only this is a problem.

As a side effect of this fix there are no longer size limits in the
pattern to be used with GET/BY option of SORT.

See https://github.com/antirez/redis/issues/460 for bug details."
antirez,2012-04-17 08:04:42,https://api.github.com/repos/antirez/redis/git/commits/0705ff3f04379c4e9f95999f3eefe0282aeb87a5,0705ff3f04379c4e9f95999f3eefe0282aeb87a5,"Less false positives in maxclients test, hopefully."
pietern,2012-04-14 00:50:38,https://api.github.com/repos/antirez/redis/git/commits/7e7b69fee1c87b4802394a8637bb1dc0b474614c,7e7b69fee1c87b4802394a8637bb1dc0b474614c,Persist `make` settings and trigger rebuild if anything changes
pietern,2012-04-14 00:46:28,https://api.github.com/repos/antirez/redis/git/commits/34c943b39592fb0f811d20d2458b256f52547de2,34c943b39592fb0f811d20d2458b256f52547de2,Don't set flags recursively
pietern,2012-04-14 00:44:34,https://api.github.com/repos/antirez/redis/git/commits/620357fc8f36c704db0084ecad84f68cec9f170b,620357fc8f36c704db0084ecad84f68cec9f170b,Remove unused LIBS variable
pietern,2012-04-14 00:43:06,https://api.github.com/repos/antirez/redis/git/commits/caba58512127599d49153c1dc100dac7574cda46,caba58512127599d49153c1dc100dac7574cda46,"First set defaults, then do composition"
pietern,2012-04-14 00:41:40,https://api.github.com/repos/antirez/redis/git/commits/c04278ba3b3cccf1df4d9fc7346c190fc8d0b14a,c04278ba3b3cccf1df4d9fc7346c190fc8d0b14a,Question mark assignment is not needed
pietern,2012-04-14 00:38:29,https://api.github.com/repos/antirez/redis/git/commits/166cf8a3b84c76e0870261dc9b29848ce7fc63aa,166cf8a3b84c76e0870261dc9b29848ce7fc63aa,Ignore gcov/lcov artifacts
pietern,2012-04-14 00:38:12,https://api.github.com/repos/antirez/redis/git/commits/0342dd76476176bcbea1b49c20e49e40adbbe4a2,0342dd76476176bcbea1b49c20e49e40adbbe4a2,"The lcov target shouldn't clean

This is not needed because every change in compiler/linker flags
triggers a cleanup."
pietern,2012-04-14 00:34:31,https://api.github.com/repos/antirez/redis/git/commits/631539a5f2a304796a54d79cc38e71625f9f9ffa,631539a5f2a304796a54d79cc38e71625f9f9ffa,"Rename ADD_*FLAGS -> REDIS_*FLAGS, REDIS_*FLAGS -> FINAL_*FLAGS

This reflects that REDIS_*FLAGS will only be used for compilation of
Redis and not for its dependencies. Similarly, that FINAL_*FLAGS are
composed of other variables and holds the options that are finally
passed to the compiler and linker."
antirez,2012-04-13 14:16:13,https://api.github.com/repos/antirez/redis/git/commits/93a74949d7bb5d0c4115d1bf45f856c368badf31,93a74949d7bb5d0c4115d1bf45f856c368badf31,Merge branch 'strict.lua' into unstable
antirez,2012-04-13 14:13:56,https://api.github.com/repos/antirez/redis/git/commits/c18405c909024899935028ca97cc13dbf5ff5fbe,c18405c909024899935028ca97cc13dbf5ff5fbe,"A few var names fixed in Makefile.

I modified it for error in a previous commit doing search & replace."
antirez,2012-04-13 13:23:32,https://api.github.com/repos/antirez/redis/git/commits/13a21caae348060f93a04df3603b69d4ba125056,13a21caae348060f93a04df3603b69d4ba125056,New test for scripting engine: DECR_IF_GT.
antirez,2012-04-13 13:12:16,https://api.github.com/repos/antirez/redis/git/commits/6f659f34cf8aa22eb9977a2d38f7a6bd396c4b42,6f659f34cf8aa22eb9977a2d38f7a6bd396c4b42,EVAL errors are more clear now.
antirez,2012-04-13 12:54:49,https://api.github.com/repos/antirez/redis/git/commits/3a0214041542433895004f2fe97b08a3c4e9cb61,3a0214041542433895004f2fe97b08a3c4e9cb61,Use Lua tostring() before concatenation.
antirez,2012-04-13 11:40:57,https://api.github.com/repos/antirez/redis/git/commits/3cd4ad267c9aa2a94b9f901acd1e29b6653d981d,3cd4ad267c9aa2a94b9f901acd1e29b6653d981d,Tests modified to match the new global protection implementation.
antirez,2012-04-13 11:36:08,https://api.github.com/repos/antirez/redis/git/commits/d86c4a7bf0989f2466c3742a09a9c72633b5f0ba,d86c4a7bf0989f2466c3742a09a9c72633b5f0ba,"mt.declared is no longer needed.

Lua global protection can now be simpified becuase we no longer have the
global() function. It's useless to occupy memory with this table, it is
also not faster because the metamethods we use are only called when a
global object does not exist or we are trying to create it from a
script."
antirez,2012-04-13 11:26:59,https://api.github.com/repos/antirez/redis/git/commits/6663653f515285aebe772663a24c381929c3e512,6663653f515285aebe772663a24c381929c3e512,"Stop access to global vars. Not configurable.

After considering the interaction between ability to delcare globals in
scripts using the 'global' function, and the complexities related to
hanlding replication and AOF in a sane way with globals AND ability to
turn protection On and Off, we reconsidered the design. The new design
makes clear that there is only one good way to write Redis scripts, that
is not using globals. In the rare cases state must be retained across
calls a Redis key can be used."
antirez,2012-04-13 10:13:02,https://api.github.com/repos/antirez/redis/git/commits/c9edd1b28ae429e6c34462917fcb5c9d616e0ef8,c9edd1b28ae429e6c34462917fcb5c9d616e0ef8,Globals protection global() function modified for speed and correctness.
antirez,2012-04-13 09:48:45,https://api.github.com/repos/antirez/redis/git/commits/2fd7c9efdedd81cfa2909ebbcdb30eb9b58d7094,2fd7c9efdedd81cfa2909ebbcdb30eb9b58d7094,Tests for lua globals protection.
antirez,2012-04-13 09:16:50,https://api.github.com/repos/antirez/redis/git/commits/37b29ef2fa2ce3e6bafcf1d8979504532ed8cc31,37b29ef2fa2ce3e6bafcf1d8979504532ed8cc31,Scripting: globals protection can now be switched on/off.
antirez,2012-04-12 09:50:18,https://api.github.com/repos/antirez/redis/git/commits/6e05f333a29e379264a6a8949fc2f44d555d632e,6e05f333a29e379264a6a8949fc2f44d555d632e,Print arch bits with redis-server -v
antirez,2012-04-12 09:49:52,https://api.github.com/repos/antirez/redis/git/commits/4c442e9d88c493a16f4f1197413b063c7205d812,4c442e9d88c493a16f4f1197413b063c7205d812,memtest.c: integer overflow fixed.
antirez,2012-04-12 09:51:58,https://api.github.com/repos/antirez/redis/git/commits/91e56965a3c5658d54dd6f4bf87c8932d03e1f99,91e56965a3c5658d54dd6f4bf87c8932d03e1f99,Make gcov fixed.
antirez,2012-04-12 09:09:38,https://api.github.com/repos/antirez/redis/git/commits/9c83aec95567d36b32144b8a7234fbc9fa39238b,9c83aec95567d36b32144b8a7234fbc9fa39238b,Makefile now introduces Redis-specific CFLAGS / LDFLAGS. Gcov target fixed. Added comments to describe how it works.
antirez,2012-04-11 16:25:44,https://api.github.com/repos/antirez/redis/git/commits/0d83011a11b42fe1b0d1bebb7b9a3318fd44f0e5,0d83011a11b42fe1b0d1bebb7b9a3318fd44f0e5,"Merge pull request #449 from ErikDubbelboer/unstable

added explanation for the magic 511 backlog number"
erikdubbelboer,2012-04-11 15:04:31,https://api.github.com/repos/antirez/redis/git/commits/815c06f2f727e8a66372ad71e050165c429d4eac,815c06f2f727e8a66372ad71e050165c429d4eac,added explanation for the magic 511 backlog number
antirez,2012-04-11 10:12:30,https://api.github.com/repos/antirez/redis/git/commits/ced068955d96ff8e1d6caa6c70eaaec16aa0c301,ced068955d96ff8e1d6caa6c70eaaec16aa0c301,Makefile.dep updated.
antirez,2012-04-11 10:12:05,https://api.github.com/repos/antirez/redis/git/commits/a470689d2e07a696624e9668a360eab4d41fa392,a470689d2e07a696624e9668a360eab4d41fa392,make dep: redirect output to Makefile.dep.
antirez,2012-04-11 09:58:32,https://api.github.com/repos/antirez/redis/git/commits/c44ab51da1b784e126658250b0b345ed8a9e57b4,c44ab51da1b784e126658250b0b345ed8a9e57b4,Make inline functions rioRead/Write/Tell static. This fixes issue #447.
antirez,2012-04-11 09:32:22,https://api.github.com/repos/antirez/redis/git/commits/d98b03b791154e92238a91f72d83fe0b01495b08,d98b03b791154e92238a91f72d83fe0b01495b08,Macros ULONG_ONEZERO / ULONG_ZEROONE were inverted in #ifdef to test 32/64 bit arch.
pietern,2012-03-25 02:25:03,https://api.github.com/repos/antirez/redis/git/commits/0a08d2b0e5d2e8a0cbaf7bbf712799ae2778a57a,0a08d2b0e5d2e8a0cbaf7bbf712799ae2778a57a,"Clean up Makefiles

Remove unused variables. Instead of overriding non-standard variables
such as ARCH and PROF, use standard variables CFLAGS and LDFLAGS to
override Makefile settings. Move dependencies generated by `make dep` to
a separate file."
pietern,2012-03-25 02:33:08,https://api.github.com/repos/antirez/redis/git/commits/3f7438ef9b969aa4bb90445b51fd93652a377ea0,3f7438ef9b969aa4bb90445b51fd93652a377ea0,Everything x86 is little endian
antirez,2012-04-11 08:56:55,https://api.github.com/repos/antirez/redis/git/commits/f2f2ba1b3ab5147684143ebfb2981c14c9a0bd27,f2f2ba1b3ab5147684143ebfb2981c14c9a0bd27,Comment typo fixed. Clusetr -> Cluster.
antirez,2012-04-10 14:48:28,https://api.github.com/repos/antirez/redis/git/commits/0b913c650dae1c744a378a8e153ce2fcb8fe7c6a,0b913c650dae1c744a378a8e153ce2fcb8fe7c6a,"Check write(2) return value to avoid warnings, because in this context failing write is not critical."
antirez,2012-04-10 14:46:29,https://api.github.com/repos/antirez/redis/git/commits/a3fb7fd4f6004883e5a234c512a368c524ac24fc,a3fb7fd4f6004883e5a234c512a368c524ac24fc,Minor MIGRATE implementation simplification about ttl handling.
antirez,2012-04-10 14:34:33,https://api.github.com/repos/antirez/redis/git/commits/08827157109fd7e65554e18d3ffbe8cc4f1f52af,08827157109fd7e65554e18d3ffbe8cc4f1f52af,Version 2.9.7.
antirez,2012-04-10 13:47:10,https://api.github.com/repos/antirez/redis/git/commits/84bcd3aa24eabed2a5295dc3450e6f45aa79049c,84bcd3aa24eabed2a5295dc3450e6f45aa79049c,It is now possible to enable/disable RDB checksum computation from redis.conf or via CONFIG SET/GET. Also CONFIG SET support added for rdbcompression as well.
antirez,2012-04-09 20:40:41,https://api.github.com/repos/antirez/redis/git/commits/82e32055d8282181ce88146d151db367162b8f3d,82e32055d8282181ce88146d151db367162b8f3d,RDB files now embed a crc64 checksum. Version of RDB bumped to 5.
antirez,2012-04-09 10:36:44,https://api.github.com/repos/antirez/redis/git/commits/8491f1d9fdae0966a74bca4e28b653b42c3fcb4a,8491f1d9fdae0966a74bca4e28b653b42c3fcb4a,Fixed compilation of new rio.c changes (typos and so forth.)
antirez,2012-04-09 10:33:57,https://api.github.com/repos/antirez/redis/git/commits/46738646d4ef6b6ea97cf933d232177a05722100,46738646d4ef6b6ea97cf933d232177a05722100,dump/restore fixed to use the new crc64 API.
antirez,2012-04-09 10:33:09,https://api.github.com/repos/antirez/redis/git/commits/736b7c3f04ff34a2487559f01e06218ea8afb8be,736b7c3f04ff34a2487559f01e06218ea8afb8be,Add checksum computation to rio.c
antirez,2012-04-09 10:20:47,https://api.github.com/repos/antirez/redis/git/commits/88c1d9550d198fd7df426b19ea67e9c51c92a811,88c1d9550d198fd7df426b19ea67e9c51c92a811,crc64.c modified for incremental computation.
antirez,2012-04-09 09:11:00,https://api.github.com/repos/antirez/redis/git/commits/5a181d43cbf84f8d4b60bac26b62722e8886bbea,5a181d43cbf84f8d4b60bac26b62722e8886bbea,rio.c file somewhat documented so that the casual reader can understand what's going on without reading the code.
antirez,2012-04-08 09:16:40,https://api.github.com/repos/antirez/redis/git/commits/a3af8d8e49c9b65f67403ca53dd5b573fadc55b4,a3af8d8e49c9b65f67403ca53dd5b573fadc55b4,Test for maxclients.
erikdubbelboer,2012-04-07 12:48:30,https://api.github.com/repos/antirez/redis/git/commits/e1d9857b123d41a4c9d03cb8bc05ea62acc0b066,e1d9857b123d41a4c9d03cb8bc05ea62acc0b066,Update src/rdb.c
erikdubbelboer,2012-04-07 12:45:53,https://api.github.com/repos/antirez/redis/git/commits/8d16e7a3c635fe89d9eec207ab630a028150bb7c,8d16e7a3c635fe89d9eec207ab630a028150bb7c,Update src/dict.c
erikdubbelboer,2012-04-07 12:40:29,https://api.github.com/repos/antirez/redis/git/commits/65fd32ab0a7ff1d3d052e3b70dcceac6719de58c,65fd32ab0a7ff1d3d052e3b70dcceac6719de58c,Fixed some spelling errors in the comments
antirez,2012-04-07 11:22:04,https://api.github.com/repos/antirez/redis/git/commits/69e7958918a7e7644654cc00d2846251b3f7b4d5,69e7958918a7e7644654cc00d2846251b3f7b4d5,"Added new test to check that ""CONFIG appendonly no"" actually kills the background AOF operation in progress if any."
antirez,2012-04-07 10:11:23,https://api.github.com/repos/antirez/redis/git/commits/2cbdab903fc0a66f246647f4d79e92b3e1778b82,2cbdab903fc0a66f246647f4d79e92b3e1778b82,For coverage testing use exit() instead of _exit() when termiating saving children.
antirez,2012-04-07 09:26:24,https://api.github.com/repos/antirez/redis/git/commits/4ce22375f45e7e1a6f9c9548fe47613b61242e48,4ce22375f45e7e1a6f9c9548fe47613b61242e48,Tests for MONITOR.
antirez,2012-04-07 09:14:52,https://api.github.com/repos/antirez/redis/git/commits/09f66a0be88b3dc846b763785dd258f72bf66d43,09f66a0be88b3dc846b763785dd258f72bf66d43,"New client info field added to CLIENT LIST output: multi, containing the length of the current pipeline. Test modified accordingly."
antirez,2012-04-07 00:10:48,https://api.github.com/repos/antirez/redis/git/commits/4cb8bb29525a012ef0f1ea1b237dab09c5e9b6c3,4cb8bb29525a012ef0f1ea1b237dab09c5e9b6c3,Never used function stringObjectEqualsMs() removed.
antirez,2012-04-07 00:03:29,https://api.github.com/repos/antirez/redis/git/commits/f02aa7bb79ab571975d25e819dcb2a1c67b2c9c9,f02aa7bb79ab571975d25e819dcb2a1c67b2c9c9,Removed dead code: function rdbSaveTime() is no longer used since RDB now saves expires in milliseconds.
antirez,2012-04-06 21:52:53,https://api.github.com/repos/antirez/redis/git/commits/0daf7a2d16256a72397d2acd87b25e4e1c76d7ec,0daf7a2d16256a72397d2acd87b25e4e1c76d7ec,"Two new tests for BGREWRTIEAOF.

Check for scheduled rewrite if a BGSAVAE is in progress.
Check for error if a rewrite is already in progress."
antirez,2012-04-06 21:52:28,https://api.github.com/repos/antirez/redis/git/commits/ff79ab71dbb1443edd4273e3b1022b76ccbd3ab5,ff79ab71dbb1443edd4273e3b1022b76ccbd3ab5,redis.tcl: no longer leave unread replies if an error happens during a MULTI/EXEC block.
antirez,2012-04-06 19:12:50,https://api.github.com/repos/antirez/redis/git/commits/618a922957803cb9f5fc944dd0630d7d61008d06,618a922957803cb9f5fc944dd0630d7d61008d06,New INFO field in persistence section: bgrewriteaof_scheduled.
antirez,2012-04-06 10:27:17,https://api.github.com/repos/antirez/redis/git/commits/321a724da54480dec86d263eec3028723e3b0ab9,321a724da54480dec86d263eec3028723e3b0ab9,version bumped to 2.9.6
jokea,2012-01-06 10:56:07,https://api.github.com/repos/antirez/redis/git/commits/3e1e1ac27d650fce6cf69a50c1c2b811b03c7b33,3e1e1ac27d650fce6cf69a50c1c2b811b03c7b33,implement aeWait using poll(2). Fixes issue #267.
antirez,2012-04-05 13:52:08,https://api.github.com/repos/antirez/redis/git/commits/70381bbf8257f209422faea4f34d1ead7213df21,70381bbf8257f209422faea4f34d1ead7213df21,expireGenericCommand(): better variable names and a top-comment that describes the function's behavior.
anydot,2012-03-28 09:48:36,https://api.github.com/repos/antirez/redis/git/commits/c6bf4a003453a273c9d95a1dddd9e0dba274811b,c6bf4a003453a273c9d95a1dddd9e0dba274811b,"for (p)expireat use absolute time, without double recomputation"
anydot,2012-03-28 10:03:32,https://api.github.com/repos/antirez/redis/git/commits/d48d1309c6712fef8894d4c5eced9bf9164b926a,d48d1309c6712fef8894d4c5eced9bf9164b926a,fix mstime() ommited while comparing if key is already expired
anydot,2012-04-04 17:17:32,https://api.github.com/repos/antirez/redis/git/commits/c35b4e845b2d5d5e1a27ab3a374bb2a3d9ad3c35,c35b4e845b2d5d5e1a27ab3a374bb2a3d9ad3c35,add support for generation of lcov coverage reports
antirez,2012-04-05 08:56:12,https://api.github.com/repos/antirez/redis/git/commits/0934a4df93e6e62e65094142cd01294d9de3087e,0934a4df93e6e62e65094142cd01294d9de3087e,"Merge pull request #430 from anydot/f-testsuite

Two changes of testsuite (killing redis and new option)"
antirez,2012-04-05 08:54:09,https://api.github.com/repos/antirez/redis/git/commits/d84f776e873ea93f22dc230e2b10ee70a8a6cd2e,d84f776e873ea93f22dc230e2b10ee70a8a6cd2e,"Merge pull request #426 from anydot/fix-rm-vm-comments

remove mentions of VM in comments"
antirez,2012-04-05 08:52:40,https://api.github.com/repos/antirez/redis/git/commits/0d5f4ba7cde2efa859a5ea04d59079b5909d537a,0d5f4ba7cde2efa859a5ea04d59079b5909d537a,"Merge pull request #431 from anydot/f-signal

allocate alternate signal stack, change of sigaction flags for sigterm"
anydot,2012-04-05 06:25:22,https://api.github.com/repos/antirez/redis/git/commits/ebba7b3c923793bb63f78aeb867005ebd49acd04,ebba7b3c923793bb63f78aeb867005ebd49acd04,future-proof version comparison
antirez,2012-04-04 17:54:23,https://api.github.com/repos/antirez/redis/git/commits/459e2975f40b9d4e0ddc488d45d39e0cdd334f5c,459e2975f40b9d4e0ddc488d45d39e0cdd334f5c,"On slow computers, 10 seconds are not enough for this heavy replication test."
antirez,2012-04-04 16:31:37,https://api.github.com/repos/antirez/redis/git/commits/4b8c966140df6df57c47b9a81f7d9f20f8aef34e,4b8c966140df6df57c47b9a81f7d9f20f8aef34e,Structure field controlling the INFO field master_link_down_since_seconds initialized correctly to avoid strange INFO output at startup when a slave has yet to connect to its master.
antirez,2012-04-04 13:38:13,https://api.github.com/repos/antirez/redis/git/commits/5ad1faa09038b861ac703fecbf731f0637dac715,5ad1faa09038b861ac703fecbf731f0637dac715,"New ""os"" field in INFO output providing information about the operating system."
antirez,2012-04-04 13:11:30,https://api.github.com/repos/antirez/redis/git/commits/bb0fbc840d80d30a513cc85cf40848f1b006275c,bb0fbc840d80d30a513cc85cf40848f1b006275c,SLAVEOF is not a write command.
antirez,2012-04-04 13:11:17,https://api.github.com/repos/antirez/redis/git/commits/9a322ab73093f15726348d08065b6a90c9894860,9a322ab73093f15726348d08065b6a90c9894860,Print milliseconds of the current second in log lines timestamps. Sometimes precise timing is very important for debugging.
anydot,2012-04-03 15:40:31,https://api.github.com/repos/antirez/redis/git/commits/c575766202773c858be0870c20cd495b722927c3,c575766202773c858be0870c20cd495b722927c3,"allocate alternate signal stack, change of sigaction flags for sigterm"
antirez,2012-04-03 13:29:47,https://api.github.com/repos/antirez/redis/git/commits/1ad4d5080523b1cdd7ee86f416de6d4b9faa138c,1ad4d5080523b1cdd7ee86f416de6d4b9faa138c,redis-cli help.h updated. Script to generate it updated as well.
antirez,2012-04-03 13:10:51,https://api.github.com/repos/antirez/redis/git/commits/15113dcd3dfb75aa8c046a7c6e8ba1755698c68c,15113dcd3dfb75aa8c046a7c6e8ba1755698c68c,More MIGRATE tests.
antirez,2012-04-03 13:10:42,https://api.github.com/repos/antirez/redis/git/commits/12e91892a0ec06c55534753b5e52bf5036450107,12e91892a0ec06c55534753b5e52bf5036450107,Another fix for MIGRATE.
anydot,2012-04-03 12:18:35,https://api.github.com/repos/antirez/redis/git/commits/9184f8fd006ab608b5e6f9b0fa45490d08ff443a,9184f8fd006ab608b5e6f9b0fa45490d08ff443a,"in kill_server send the signal once, then wait for up to 5sec before sending lethal SIGKILL"
anydot,2012-04-03 11:32:49,https://api.github.com/repos/antirez/redis/git/commits/7cc17ed8ff71590d5aa5765d306c0814002b6476,7cc17ed8ff71590d5aa5765d306c0814002b6476,new option for choosing number of test clients to run
antirez,2012-04-03 10:17:40,https://api.github.com/repos/antirez/redis/git/commits/84e5684bca4c737fac6ccc00fd1fa5737ded2cb7,84e5684bca4c737fac6ccc00fd1fa5737ded2cb7,Two fixed for MIGRATE: fix TTL propagation and fix transferring of data bigger than 64k.
antirez,2012-04-03 09:53:45,https://api.github.com/repos/antirez/redis/git/commits/e7957ca6286b2d541fe6d47c5b95ec0f2c34e091,e7957ca6286b2d541fe6d47c5b95ec0f2c34e091,"When the user-provided 'maxclients' value is too big for the max number of files we can open, at least try to search the max the OS is allowing (in steps of 256 filedes)."
antirez,2012-04-02 14:38:59,https://api.github.com/repos/antirez/redis/git/commits/06e178708e46181c30a8ff99107d506ab76185f3,06e178708e46181c30a8ff99107d506ab76185f3,MIGRATE test modified because the implementation changed.
antirez,2012-04-02 14:38:24,https://api.github.com/repos/antirez/redis/git/commits/31f2ecf436eca8eaf12445c6ed73b1eb49eccf6d,31f2ecf436eca8eaf12445c6ed73b1eb49eccf6d,MIGRATE now let the client distinguish I/O errors and timeouts from other erros.
antirez,2012-04-02 11:10:39,https://api.github.com/repos/antirez/redis/git/commits/f8ea19e5392cf8582630fdfde5b6bc85c477d6ca,f8ea19e5392cf8582630fdfde5b6bc85c477d6ca,DUMP/RESTORE now use CRC64 instead of truncated SHA1.
antirez,2012-04-02 10:31:44,https://api.github.com/repos/antirez/redis/git/commits/9510d65dc8b0cff77402bd97078636680fe50da0,9510d65dc8b0cff77402bd97078636680fe50da0,CRC64 implementation added to Redis code base.
anydot,2012-04-02 09:56:03,https://api.github.com/repos/antirez/redis/git/commits/8918de9202669609442c40af7f7625b5685b8a7c,8918de9202669609442c40af7f7625b5685b8a7c,remove mentions of VM in comments
antirez,2012-04-02 09:44:25,https://api.github.com/repos/antirez/redis/git/commits/ab8232d0223a9983e5590998b6c44d9639dc8b56,ab8232d0223a9983e5590998b6c44d9639dc8b56,"DUMP, RESTORE, MIGRATE tests."
antirez,2012-04-02 09:14:47,https://api.github.com/repos/antirez/redis/git/commits/70d848e1faff36e778f8e32c5a86628574c22b00,70d848e1faff36e778f8e32c5a86628574c22b00,"RESTORE ability to set a TTL fixed, bug introduced with millisecond expires."
antirez,2012-04-02 08:52:39,https://api.github.com/repos/antirez/redis/git/commits/a149ce6875091f4a6c9e49d73aeb836bbf207773,a149ce6875091f4a6c9e49d73aeb836bbf207773,Prettify source code of create/verify DUMP payload.
antirez,2012-04-02 08:46:24,https://api.github.com/repos/antirez/redis/git/commits/bd0446593108865895474edd403783ec9eaf5a34,bd0446593108865895474edd403783ec9eaf5a34,DUMP / RESTORE: store RDB version in little endian.
antirez,2012-04-01 10:51:40,https://api.github.com/repos/antirez/redis/git/commits/4de6c9a055c3d7e7964795f56cee27964738642d,4de6c9a055c3d7e7964795f56cee27964738642d,New DUMP format includes RDB version and truncated SHA1 checksum.
antirez,2012-04-01 08:15:07,https://api.github.com/repos/antirez/redis/git/commits/2281f90c9b9d9274119493ca7b72daec8a509b95,2281f90c9b9d9274119493ca7b72daec8a509b95,Merge remote-tracking branch 'origin/unstable' into unstable
antirez,2012-04-01 08:14:52,https://api.github.com/repos/antirez/redis/git/commits/a7138a4cf8301c1eab82d5881aa831ed38d4028c,a7138a4cf8301c1eab82d5881aa831ed38d4028c,"Merge pull request #425 from ThePicard/unstable

chkconfig in install_server.sh doesn't work because of a typo"
ThePicard,2012-04-01 06:39:58,https://api.github.com/repos/antirez/redis/git/commits/b0c6ee1d1d1c7890b36cf008cef9f3ff808b9361,b0c6ee1d1d1c7890b36cf008cef9f3ff808b9361,Fixed a typo in install_server.sh
antirez,2012-03-31 15:08:40,https://api.github.com/repos/antirez/redis/git/commits/d0ace5a3149808d6d3f8fd5c626510756bba3cc7,d0ace5a3149808d6d3f8fd5c626510756bba3cc7,Write RDB magic using a REDIS_RDB_VERSION define that is defined inside rdb.h
antirez,2012-03-31 09:28:37,https://api.github.com/repos/antirez/redis/git/commits/609ea08445569e5d3e50d37c515d88e6a76c6974,609ea08445569e5d3e50d37c515d88e6a76c6974,redis-trib: fix the MIGRATE call that now has milliseconds timeout (were seconds before).
antirez,2012-03-31 09:23:30,https://api.github.com/repos/antirez/redis/git/commits/9157549fad46025548b6f500a0202d2720779524,9157549fad46025548b6f500a0202d2720779524,syncio.c calls in replication.c fixed for the new millisecond timeout API.
antirez,2012-03-31 09:21:45,https://api.github.com/repos/antirez/redis/git/commits/04d360fdcd40d5a669d8cac7144009ce43925a4e,04d360fdcd40d5a669d8cac7144009ce43925a4e,Better syncio.c with millisecond resolution.
erikdubbelboer,2012-03-30 19:19:51,https://api.github.com/repos/antirez/redis/git/commits/0a2ff52eaecb8040e105ee9fa87d82c0b0394e2e,0a2ff52eaecb8040e105ee9fa87d82c0b0394e2e,Added consts keyword where possible
antirez,2012-03-30 08:39:34,https://api.github.com/repos/antirez/redis/git/commits/c2672a06cdf411d882c6d2a58a6c84fcbc57b4c7,c2672a06cdf411d882c6d2a58a6c84fcbc57b4c7,Purely aesthetic code change.
josephjang,2012-03-29 17:06:53,https://api.github.com/repos/antirez/redis/git/commits/f892797e1b459ad568df32d891b368302c40b3c9,f892797e1b459ad568df32d891b368302c40b3c9,"Fixed a memory leak with replication

occurs when two or more dbs are replicated and at least one of them is >db10"
antirez,2012-03-30 08:26:07,https://api.github.com/repos/antirez/redis/git/commits/22c9c4076baec3d14b16421ab3b7fe830479fbac,22c9c4076baec3d14b16421ab3b7fe830479fbac,Regression test for issue 417 (memory leak when replicating to DB with id >= 10)
chobits,2012-03-29 10:23:04,https://api.github.com/repos/antirez/redis/git/commits/f2305046ef4695cfe60f35aa4a9e8df565fb1811,f2305046ef4695cfe60f35aa4a9e8df565fb1811,fix typos in tests/assets/default.conf
antirez,2012-03-29 10:02:28,https://api.github.com/repos/antirez/redis/git/commits/0cdecca1418b0329ede2c43151912d35ea790a51,0cdecca1418b0329ede2c43151912d35ea790a51,Protect globals access in Lua scripting.
antirez,2012-03-29 07:33:29,https://api.github.com/repos/antirez/redis/git/commits/4cba71e89886b5e7810686b6a6b2e18ab13f1fa1,4cba71e89886b5e7810686b6a6b2e18ab13f1fa1,"Fixed typo in comment: ""te"" -> ""the""."
antirez,2012-03-29 07:24:02,https://api.github.com/repos/antirez/redis/git/commits/179e54d2a9c6545d6f102bf9a3f9506175639743,179e54d2a9c6545d6f102bf9a3f9506175639743,Fix for slaves chains. Force resync of slaves (simply disconnecting them)  when SLAVEOF turns a master into a slave.
antirez,2012-03-28 18:47:50,https://api.github.com/repos/antirez/redis/git/commits/6aa2f98938955788c3f56e1ce8fef691233bca35,6aa2f98938955788c3f56e1ce8fef691233bca35,Test for redis.sha1hex().
fritzy,2012-03-28 18:10:24,https://api.github.com/repos/antirez/redis/git/commits/52ae8af807dd8c4f2c98db5198f9f45ebd946193,52ae8af807dd8c4f2c98db5198f9f45ebd946193,"added redis.sha1hex(string) as lua scripting function.

(The original implementation was modified by @antirez to conform Redis
coding standards.)"
antirez,2012-03-28 11:51:23,https://api.github.com/repos/antirez/redis/git/commits/5471b8babddbb99a50010593483f24187e51981a,5471b8babddbb99a50010593483f24187e51981a,Fixes for redisLogFromHandler().
antirez,2012-03-28 11:45:39,https://api.github.com/repos/antirez/redis/git/commits/a7d12cbaf1425bf86f18b7dfac99f7b1ee1500e2,a7d12cbaf1425bf86f18b7dfac99f7b1ee1500e2,Log from signal handlers is now safer.
antirez,2012-03-28 11:16:19,https://api.github.com/repos/antirez/redis/git/commits/1043c8064bce1ffaaa89c9358889bf0ea0b33f51,1043c8064bce1ffaaa89c9358889bf0ea0b33f51,Merge branch 'watchdog' into unstable
antirez,2012-03-28 08:55:17,https://api.github.com/repos/antirez/redis/git/commits/0fefb5bbeb523bcf146dda4ba86872a527059918,0fefb5bbeb523bcf146dda4ba86872a527059918,"Redis test: regexp to check if valgrind reported errors modified. Now we no longer look at the total count because this includes ""possibly lost"" bytes that are not interesting for Redis (tons of false positives because of how sds.c works)."
antirez,2012-03-27 21:00:08,https://api.github.com/repos/antirez/redis/git/commits/e4669c045d5bc0f7420814cb66f13f03ac29e29a,e4669c045d5bc0f7420814cb66f13f03ac29e29a,"Merge pull request #389 from huangz1990/patch-1

fix typo"
antirez,2012-03-27 20:58:24,https://api.github.com/repos/antirez/redis/git/commits/44f26aea0cf05635b3402b82e6d0b8ffd4fe1340,44f26aea0cf05635b3402b82e6d0b8ffd4fe1340,"Merge pull request #407 from anydot/fixes

Fixes around time usage"
anydot,2012-03-27 16:46:51,https://api.github.com/repos/antirez/redis/git/commits/b57dbdbba35474f2fffe969b634788c4408c4542,b57dbdbba35474f2fffe969b634788c4408c4542,remove disk-store related comments
anydot,2012-03-27 16:18:57,https://api.github.com/repos/antirez/redis/git/commits/8af9fe841cb05fb9589899c103fc66efbfbfcce5,8af9fe841cb05fb9589899c103fc66efbfbfcce5,declare hashDictType as external too
anydot,2012-03-27 15:39:58,https://api.github.com/repos/antirez/redis/git/commits/d194905449d7de0a104e773f57eaae78bd09a4c6,d194905449d7de0a104e773f57eaae78bd09a4c6,use server.unixtime instead of time(NULL) where possible (cluster.c not checked though)
anydot,2012-03-27 15:19:54,https://api.github.com/repos/antirez/redis/git/commits/024f213b12c62ac7421faad8f6dc855c3e0784c7,024f213b12c62ac7421faad8f6dc855c3e0784c7,fix time() instead of mstime() in expireIfNeeded
antirez,2012-03-27 14:54:53,https://api.github.com/repos/antirez/redis/git/commits/d174eed5d7496b6af767f9c814d93832e9be0c3a,d174eed5d7496b6af767f9c814d93832e9be0c3a,define zlibc_free() in a way that is not shadowed by jemalloc.
antirez,2012-03-27 13:24:33,https://api.github.com/repos/antirez/redis/git/commits/23c0cdd2ad8b15defab56eca89a42c67cadd9a34,23c0cdd2ad8b15defab56eca89a42c67cadd9a34,Produce the watchlog warning log in a way that is safer from a signal handler. Fix a memory leak in the backtrace generation function.
antirez,2012-03-27 11:48:53,https://api.github.com/repos/antirez/redis/git/commits/aa96122d968308f77c4d26ba24c6ec9727b4e88b,aa96122d968308f77c4d26ba24c6ec9727b4e88b,"Mask SIGALRM everything but in the main thread.

This is required to ensure that the signal will be delivered to the main
thread when the watchdog timer expires."
antirez,2012-03-27 10:11:37,https://api.github.com/repos/antirez/redis/git/commits/a354da9acd8afbe4e600360ef6502c10dfed3ccb,a354da9acd8afbe4e600360ef6502c10dfed3ccb,Correctly set the SIGARLM timer for the software watchdog.
antirez,2012-03-27 09:47:51,https://api.github.com/repos/antirez/redis/git/commits/39bd025c295974986331ca4cd89ce18cfa50204a,39bd025c295974986331ca4cd89ce18cfa50204a,Redis software watchdog.
antirez,2012-03-27 08:33:45,https://api.github.com/repos/antirez/redis/git/commits/a32387045058d16e346c48157d2b0bf5c3ce67f0,a32387045058d16e346c48157d2b0bf5c3ce67f0,SIGSEGV handler refactored so that we can reuse stack trace and current client logging functionalities in other contexts.
antirez,2012-03-25 09:43:19,https://api.github.com/repos/antirez/redis/git/commits/ca09ad4d64adc0296f3268e4217f004dd7ada732,ca09ad4d64adc0296f3268e4217f004dd7ada732,CONFIG RESETSTAT resets two more fields.
antirez,2012-03-25 09:27:35,https://api.github.com/repos/antirez/redis/git/commits/c1d01b3c5796ee7e3f466e0db9f55d37e843cbb9,c1d01b3c5796ee7e3f466e0db9f55d37e843cbb9,"New INFO field aof_delayed_fsync introduced.

This new field counts all the times Redis is configured with AOF enabled and
fsync policy 'everysec', but the previous fsync performed by the
background thread was not able to complete within two seconds, forcing
Redis to perform a write against the AOF file while the fsync is still
in progress (likely a blocking operation)."
antirez,2012-03-25 08:57:34,https://api.github.com/repos/antirez/redis/git/commits/512f682340eb74aaedc525e834a943427999508c,512f682340eb74aaedc525e834a943427999508c,"convert-zipmap-hash-on-load false positive fixed.

Apparently because the sample RDB file was not copied before every test
Redis had a chance to replace it with a newly written one, so that the
next test could fail."
antirez,2012-03-24 11:07:58,https://api.github.com/repos/antirez/redis/git/commits/0f9997845af236097c8802771cca3cff84c4e77b,0f9997845af236097c8802771cca3cff84c4e77b,Merge remote-tracking branch 'origin/unstable' into unstable
antirez,2012-03-24 11:06:56,https://api.github.com/repos/antirez/redis/git/commits/74f10793c8b53fac97b44c3bf8d04cdf2d157bd7,74f10793c8b53fac97b44c3bf8d04cdf2d157bd7,"When running the test in valgrind mode, pass the right flags to show memory leaks stack traces but only including the ""definitely lost"" items."
antirez,2012-03-24 10:52:56,https://api.github.com/repos/antirez/redis/git/commits/1b247d133351c747a3c6cce8cac64e6830ccab92,1b247d133351c747a3c6cce8cac64e6830ccab92,Add used allocator in redis-server -v output.
antirez,2012-03-24 10:42:20,https://api.github.com/repos/antirez/redis/git/commits/c79373482fad7f6a3c558a133e56e5d614ab79f8,c79373482fad7f6a3c558a133e56e5d614ab79f8,convert-zipmap-hash-on-load test enabled
antirez,2012-03-23 19:20:43,https://api.github.com/repos/antirez/redis/git/commits/6c658d555487b024f7b9e3d873f0b1541e7197ee,6c658d555487b024f7b9e3d873f0b1541e7197ee,Contextualize comment.
antirez,2012-03-23 19:21:19,https://api.github.com/repos/antirez/redis/git/commits/58e34e6cb1499a00b9dfa51307e4188f8107fbe3,58e34e6cb1499a00b9dfa51307e4188f8107fbe3,Fixed memory leak in hash loading.
antirez,2012-03-23 14:22:25,https://api.github.com/repos/antirez/redis/git/commits/03116904c399cf21db3fe4228af3a795ce20fc46,03116904c399cf21db3fe4228af3a795ce20fc46,RDB load of different encodings test added.
antirez,2012-03-23 11:42:20,https://api.github.com/repos/antirez/redis/git/commits/bd376d13f820b168954ac6683b5197a4ed72f03b,bd376d13f820b168954ac6683b5197a4ed72f03b,Big endian fix. The bug was introduced because of a typo.
antirez,2012-03-23 09:22:58,https://api.github.com/repos/antirez/redis/git/commits/6f0e77ca19278fd37d19c28156d8704754498680,6f0e77ca19278fd37d19c28156d8704754498680,Replicate HINCRBYFLOAT as HSET.
antirez,2012-03-22 17:16:41,https://api.github.com/repos/antirez/redis/git/commits/7b558b1d64a29fbb9fea321da75367c0fa38b61d,7b558b1d64a29fbb9fea321da75367c0fa38b61d,Code style hack.
antirez,2012-03-22 17:14:32,https://api.github.com/repos/antirez/redis/git/commits/1f6146df0ce28667b90432ebf725d4a2b4fb0af7,1f6146df0ce28667b90432ebf725d4a2b4fb0af7,"Result of INCRBYFLOAT and HINCRBYFLOAT should never be in exponential form, and also should never contain trailing zeroes. This is not possible with vanilla printf() format specifiers, so we alter the output."
antirez,2012-03-21 11:26:05,https://api.github.com/repos/antirez/redis/git/commits/ba864e09d4e24c405ab44ac273381bfdbafff3fd,ba864e09d4e24c405ab44ac273381bfdbafff3fd,Comments about security of slave-read-only in redis.coinf.
antirez,2012-03-21 11:11:07,https://api.github.com/repos/antirez/redis/git/commits/b22eab8faff94b36ff1474c7e9567778f54e79d5,b22eab8faff94b36ff1474c7e9567778f54e79d5,Correctly create shared.oomerr as an sds string.
antirez,2012-03-20 16:53:47,https://api.github.com/repos/antirez/redis/git/commits/7dcdd281f529dea2389509f90b101c0471f7f2bd,7dcdd281f529dea2389509f90b101c0471f7f2bd,DEBUG should not be flagged as w otherwise we can not call DEBUG DIGEST and other commands against read only slaves.
antirez,2012-03-20 16:32:48,https://api.github.com/repos/antirez/redis/git/commits/f3fd419fc95e78818f9eeef15eb2d2e5a60bfbbb,f3fd419fc95e78818f9eeef15eb2d2e5a60bfbbb,"Support for read-only slaves. Semantical fixes.

This commit introduces support for read only slaves via redis.conf and CONFIG GET/SET commands. Also various semantical fixes are implemented here:

1) MULTI/EXEC with only read commands now work where the server is into a state where writes (or commands increasing memory usage) are not allowed. Before this patch everything inside a transaction would fail in this conditions.

2) Scripts just calling read-only commands will work against read only
slaves, when the server is out of memory, or when persistence is into an
error condition. Before the patch EVAL always failed in this condition."
antirez,2012-03-20 12:06:50,https://api.github.com/repos/antirez/redis/git/commits/7a0c72f34550c3811324464661f1b463ccfd362b,7a0c72f34550c3811324464661f1b463ccfd362b,redis_init_script template updated.
antirez,2012-03-19 18:29:06,https://api.github.com/repos/antirez/redis/git/commits/0d44d507925a97e55ca2352544b1bf6a1b78fa81,0d44d507925a97e55ca2352544b1bf6a1b78fa81,Suppress warnings compiling redis-cli with certain gcc versions.
antirez,2012-03-19 18:16:41,https://api.github.com/repos/antirez/redis/git/commits/bb0aadbe215f878221693175492d1a0cae888abc,bb0aadbe215f878221693175492d1a0cae888abc,Read-only flag removed from PUBLISH command.
antirez,2012-03-19 13:02:34,https://api.github.com/repos/antirez/redis/git/commits/d4a515c56d911517c7f44330723db9cc7b6f4c0f,d4a515c56d911517c7f44330723db9cc7b6f4c0f,Memory addressing test implemented.
antirez,2012-03-18 17:03:27,https://api.github.com/repos/antirez/redis/git/commits/d033ccb0afa4d9b32c20bce2dd073650d3439479,d033ccb0afa4d9b32c20bce2dd073650d3439479,More memory tests implemented. Default number of iterations lowered to a more acceptable value of 50.
antirez,2012-03-18 16:27:56,https://api.github.com/repos/antirez/redis/git/commits/a5801142a410b8e61867413c132f772484740a7e,a5801142a410b8e61867413c132f772484740a7e,Fixed typo.
antirez,2012-03-18 16:24:48,https://api.github.com/repos/antirez/redis/git/commits/1a197a3c1ae8c1014ca3f5ce0b0e436c550b52bb,1a197a3c1ae8c1014ca3f5ce0b0e436c550b52bb,Number of iteration of --test-memory is now 300 (several minutes per gigabyte). Memtest86 and Memtester links are also displayed while running the test.
antirez,2012-03-18 10:35:35,https://api.github.com/repos/antirez/redis/git/commits/525be599a82fcdcb4231c9438106b31a0b01a2f5,525be599a82fcdcb4231c9438106b31a0b01a2f5,On crash suggest to give --test-memory a try.
antirez,2012-03-16 20:19:53,https://api.github.com/repos/antirez/redis/git/commits/fb068dc91de40e308d78859c03db69a73e881f0e,fb068dc91de40e308d78859c03db69a73e881f0e,Memory test function now less boring thanks to screen-wide progress bar.
antirez,2012-03-16 16:21:49,https://api.github.com/repos/antirez/redis/git/commits/54e0fa1c2703dda5147e80318adf6929af921eb7,54e0fa1c2703dda5147e80318adf6929af921eb7,Hem... actual memtest.c file added.
antirez,2012-03-16 16:17:39,https://api.github.com/repos/antirez/redis/git/commits/c5166e3fc5f906b501528d2ae9a986f854c0e497,c5166e3fc5f906b501528d2ae9a986f854c0e497,First implementation of --test-memory. Still a work in progress.
antirez,2012-03-15 19:51:35,https://api.github.com/repos/antirez/redis/git/commits/c9d3dda29c9db6fca34599d0cf2c1243e73abfbd,c9d3dda29c9db6fca34599d0cf2c1243e73abfbd,"Fix for issue #391.

Use a simple protocol between clientsCron() and helper functions to
understand if the client is still valind and clientsCron() should
continue processing or if the client was freed and we should continue
with the next one."
huangz1990,2012-03-15 06:27:14,https://api.github.com/repos/antirez/redis/git/commits/9448ddb0c63b8a00cd3cc9638a1bf5567e07bf78,9448ddb0c63b8a00cd3cc9638a1bf5567e07bf78,fix typo
antirez,2012-03-14 14:32:30,https://api.github.com/repos/antirez/redis/git/commits/ae22bf1ef6dbfa07a485f61c119eb2e275a7916f,ae22bf1ef6dbfa07a485f61c119eb2e275a7916f,Reclaim space from the client querybuf if needed.
antirez,2012-03-14 13:58:26,https://api.github.com/repos/antirez/redis/git/commits/739803c06403481f32534a4ab5f5735fa1b52e6f,739803c06403481f32534a4ab5f5735fa1b52e6f,sds.c: sdsAllocSize() function added.
antirez,2012-03-14 09:13:23,https://api.github.com/repos/antirez/redis/git/commits/9555f8f21b9f1780de307c19da268ef63f7c2ae9,9555f8f21b9f1780de307c19da268ef63f7c2ae9,"sds.c new function sdsRemoveFreeSpace().

The new function is used in order to resize the string allocation so
that only the minimal allocation possible is used, removing all the free
space at the end of the string normally used to improve efficiency of
concatenation operations."
antirez,2012-03-14 08:56:22,https://api.github.com/repos/antirez/redis/git/commits/529bde82ecf1e566f2db103e5c49402262d3638c,529bde82ecf1e566f2db103e5c49402262d3638c,Call all the helper functions needed by clientsCron() as clientsCronSomething() for clarity.
antirez,2012-03-13 17:06:29,https://api.github.com/repos/antirez/redis/git/commits/6df450b77c34729aa7a1138051bbaf0acd48563c,6df450b77c34729aa7a1138051bbaf0acd48563c,CLIENT LIST test modified to reflect the new output.
antirez,2012-03-13 17:05:11,https://api.github.com/repos/antirez/redis/git/commits/d19015be12c98f329cdaab039b843c3bf8931916,d19015be12c98f329cdaab039b843c3bf8931916,Process async client checks like client timeouts and BLPOP timeouts incrementally using a circular list.
antirez,2012-03-13 12:26:33,https://api.github.com/repos/antirez/redis/git/commits/bbaeda402cac1b66b52a869bfc419001d79ffcc0,bbaeda402cac1b66b52a869bfc419001d79ffcc0,Added a qbuf-free field to CLIENT LIST output.
antirez,2012-03-13 12:05:08,https://api.github.com/repos/antirez/redis/git/commits/e74dca73d9818b42e7ee34c0a686133813e8d3a3,e74dca73d9818b42e7ee34c0a686133813e8d3a3,Client creation time in redisClient structure. New age field in CLIENT LIST output.
antirez,2012-03-13 11:59:27,https://api.github.com/repos/antirez/redis/git/commits/573373802ef8699503a90d5559c54d9e03ff2244,573373802ef8699503a90d5559c54d9e03ff2244,c->bufpos initialization moved for aesthetics.
antirez,2012-03-13 09:59:29,https://api.github.com/repos/antirez/redis/git/commits/c3e7441dadf1d287c76c1c0a3cab68f15a875dbd,c3e7441dadf1d287c76c1c0a3cab68f15a875dbd,"RDB hashes loading, fixed another bug in the loading of HT-encoded hashes: when the hash entry is too big for ziplist, add the field, then convert. The code used to break before the new entry was inserted, resulting into missing fields in the loaded Hash object."
antirez,2012-03-13 08:49:11,https://api.github.com/repos/antirez/redis/git/commits/c3c856228da2f0d73c608f38395991eecf735606,c3c856228da2f0d73c608f38395991eecf735606,RDB hashes loading fixed removing the assertion that failed every time an HT-encoded hash was loaded.
antirez,2012-03-10 12:22:29,https://api.github.com/repos/antirez/redis/git/commits/79642420b0bc343f29738340d2da5444e5d2d241,79642420b0bc343f29738340d2da5444e5d2d241,"Merge pull request #378 from quiver/unstable

fix typo of redis.conf"
antirez,2012-03-10 11:40:03,https://api.github.com/repos/antirez/redis/git/commits/64b4c33c0b144a8a3d3600dd056f4c6bfd379098,64b4c33c0b144a8a3d3600dd056f4c6bfd379098,Build dependencies updated.
antirez,2012-03-10 11:38:42,https://api.github.com/repos/antirez/redis/git/commits/f12d0224f34e1aa680aeebf581dc4d90a4d7d47e,f12d0224f34e1aa680aeebf581dc4d90a4d7d47e,RDB4 support in redis-check-dump.
antirez,2012-03-10 11:35:15,https://api.github.com/repos/antirez/redis/git/commits/c7d7d0a80ff90f2daac71df648dbce09c34d4ef2,c7d7d0a80ff90f2daac71df648dbce09c34d4ef2,"RDB version is no 4, because small hashes are now encoded as ziplists, so older versions of Redis will not understand this format."
antirez,2012-03-10 11:14:17,https://api.github.com/repos/antirez/redis/git/commits/87faf90696d549e69a8864026dfe6fc435eeec0d,87faf90696d549e69a8864026dfe6fc435eeec0d,hash-max-zipmap-... renamed hash-max-ziplist-... in defalt conf for tests.
antirez,2012-03-10 10:11:28,https://api.github.com/repos/antirez/redis/git/commits/753bb3dcbda2fbb91539057e300b999bc750c9e0,753bb3dcbda2fbb91539057e300b999bc750c9e0,More vertical space saved.
antirez,2012-03-10 10:09:43,https://api.github.com/repos/antirez/redis/git/commits/c0caa1cf542d452fdc1eb74a7e5511c683ec5d5d,c0caa1cf542d452fdc1eb74a7e5511c683ec5d5d,Minor code aesthetic change to use Redis code base style rule of saving vertical space when possible.
antirez,2012-03-10 09:38:53,https://api.github.com/repos/antirez/redis/git/commits/d22248ae99543e74a93c88b9311f23a56231c83c,d22248ae99543e74a93c88b9311f23a56231c83c,Removed handling of deprecated hash-max-zipmap-entries nad hash-map-zipmap-value. Pieter is too good with users ;). Better to have them switch to a saner configuration ASAP after the 2.6 upgrade.
antirez,2012-03-10 09:36:51,https://api.github.com/repos/antirez/redis/git/commits/addc032756e338731c528d5868cf73b71ea2598e,addc032756e338731c528d5868cf73b71ea2598e,Added a top-function comment to rioWriteHashIteratorCursor() to better specify what the function does. Not immediately clear from the name.
antirez,2012-03-09 21:07:45,https://api.github.com/repos/antirez/redis/git/commits/8562798308391d489016b3995d438b6187b5980a,8562798308391d489016b3995d438b6187b5980a,Merge conflicts resolved.
antirez,2012-03-08 15:15:37,https://api.github.com/repos/antirez/redis/git/commits/250e7f690825f506306e3c091ba4465c206726bd,250e7f690825f506306e3c091ba4465c206726bd,Instantaneous ops/sec figure in INFO output.
antirez,2012-03-08 11:14:23,https://api.github.com/repos/antirez/redis/git/commits/0823e48fb9a7a43af3d108223a9c8952ac9dfc7a,0823e48fb9a7a43af3d108223a9c8952ac9dfc7a,Support for all the redis.conf fields in CONFIG GET. config.c refactored a bit.
antirez,2012-03-08 09:13:12,https://api.github.com/repos/antirez/redis/git/commits/91d664d6ce3d85a5b282a3945153d78e2474640f,91d664d6ce3d85a5b282a3945153d78e2474640f,"run_id added to INFO output.

The Run ID is a field that identifies a single execution of the Redis
server. It can be useful for many purposes as it makes easy to detect if
the instance we are talking about is the same, or if it is a different
one or was rebooted. An application of run_id will be in the partial
synchronization of replication, where a slave may request a partial sync
from a given offset only if it is talking with the same master. Another
application is in failover and monitoring scripts."
antirez,2012-03-08 09:08:44,https://api.github.com/repos/antirez/redis/git/commits/44f508f1a81941f298bdb0f2f87c4469094beeb6,44f508f1a81941f298bdb0f2f87c4469094beeb6,clusterGetRandomName() generalized into getRandomHexChars() so that we can use it for the run_id field as well.
antirez,2012-03-07 17:02:26,https://api.github.com/repos/antirez/redis/git/commits/4d3bbf3590af7b575dd90512aa12706cea7ed899,4d3bbf3590af7b575dd90512aa12706cea7ed899,"By default Redis refuses writes with an error if the latest BGSAVE failed (and at least one save point is configured). However people having good monitoring systems may prefer a server that continues to work, since they are notified that there are problems by their monitoring systems. This commit implements the ability to turn the feature on or off via redis.conf and CONFIG SET."
antirez,2012-03-07 12:05:46,https://api.github.com/repos/antirez/redis/git/commits/c25e7eafef350a985ae236987131c5d56b30cfef,c25e7eafef350a985ae236987131c5d56b30cfef,"Refuse writes if can't persist on disk.

Redis now refuses accepting write queries if RDB persistence is
configured, but RDB snapshots can't be generated for some reason.
The status of the latest background save operation is now exposed
in the INFO output as well. This fixes issue #90."
antirez,2012-03-07 11:12:15,https://api.github.com/repos/antirez/redis/git/commits/e31b615e6201fccda3f2e036c449646e3cfbac25,e31b615e6201fccda3f2e036c449646e3cfbac25,"Better MONITOR output, now includes client ip:port or the lua string if the command was executed by the scripting engine."
antirez,2012-03-07 10:30:30,https://api.github.com/repos/antirez/redis/git/commits/7b845b62285230d9015f80a6c2ea7ecb0b25df6e,7b845b62285230d9015f80a6c2ea7ecb0b25df6e,anetPeerToString() automatically populates ip/port with something that may be provided to the user as output in case of errors.
antirez,2012-03-07 09:38:01,https://api.github.com/repos/antirez/redis/git/commits/9494f1f15b128ef8407d118c240d3793aff0ed82,9494f1f15b128ef8407d118c240d3793aff0ed82,TIME command.
antirez,2012-02-29 16:43:03,https://api.github.com/repos/antirez/redis/git/commits/60893c6cc6b08504d06aaa2e4eee5df29a479da1,60893c6cc6b08504d06aaa2e4eee5df29a479da1,"redis-cli: CSV output added, used for the --slave mode."
antirez,2012-02-29 16:10:21,https://api.github.com/repos/antirez/redis/git/commits/b8283ab2189cf1fcaed8c435f779fa9914210297,b8283ab2189cf1fcaed8c435f779fa9914210297,Initial implementation of redis-cli --slave support.
antirez,2012-02-29 15:33:54,https://api.github.com/repos/antirez/redis/git/commits/a950a84303038d3365442a48cc2c06f4b5d3f65e,a950a84303038d3365442a48cc2c06f4b5d3f65e,Ping the slave using the standard protocol instead of the inline one.
antirez,2012-02-29 13:41:57,https://api.github.com/repos/antirez/redis/git/commits/c1db214eeb2b7385c32889e17748429fcbe5cbae,c1db214eeb2b7385c32889e17748429fcbe5cbae,Better implementation for BRPOP/BLPOP in the non blocking case.
antirez,2012-02-29 12:38:30,https://api.github.com/repos/antirez/redis/git/commits/cd8bdea31bdd682c811276a56515b65268f42958,cd8bdea31bdd682c811276a56515b65268f42958,lpush arguments vector rewrite modified for more speed and to memory leak removal.
antirez,2012-02-28 23:54:52,https://api.github.com/repos/antirez/redis/git/commits/b67feecacd94165a76da6af3a8c4e735f01729b0,b67feecacd94165a76da6af3a8c4e735f01729b0,Version bumped to 2.9.5
antirez,2012-02-28 23:46:50,https://api.github.com/repos/antirez/redis/git/commits/78d6a22dc3e570417a8b8774307059b8d5ad476b,78d6a22dc3e570417a8b8774307059b8d5ad476b,"Better system for additional commands replication.

The new code uses a more generic data structure to describe redis operations.
The new design allows for multiple alsoPropagate() calls within the scope of a
single command, that is useful in different contexts. For instance there
when there are multiple clients doing BRPOPLPUSH against the same list,
and a variadic LPUSH is performed against this list, the blocked clients
will both be served, and we should correctly replicate multiple LPUSH
commands after the replication of the current command."
antirez,2012-02-28 17:03:08,https://api.github.com/repos/antirez/redis/git/commits/eeb34eff52eb77ff387ea7b316b157aa4337bb7f,eeb34eff52eb77ff387ea7b316b157aa4337bb7f,"Added a new API to replicate an additional command after the replication of the currently executed command, in order to propagte the LPUSH originating from RPOPLPUSH and indirectly by BRPOPLPUSH."
antirez,2012-02-28 15:20:41,https://api.github.com/repos/antirez/redis/git/commits/d8b1228bf6cbe2969a93b5f48b8cffba2d9772ae,d8b1228bf6cbe2969a93b5f48b8cffba2d9772ae,propagate() prototype added to redis.h
antirez,2012-02-28 15:17:55,https://api.github.com/repos/antirez/redis/git/commits/edba65d09084dfaa6f44a6f182c6d519e249a0c4,edba65d09084dfaa6f44a6f182c6d519e249a0c4,Var renamed into pushGenericCommand() to better reflect what it means.
antirez,2012-02-28 15:17:00,https://api.github.com/repos/antirez/redis/git/commits/ad08d059d01ecae5e8c0eae3f31a202896bec4dc,ad08d059d01ecae5e8c0eae3f31a202896bec4dc,Added command propagation API.
antirez,2012-02-26 15:18:43,https://api.github.com/repos/antirez/redis/git/commits/64ef44d56835d068592e10eb588a8daad2168a08,64ef44d56835d068592e10eb588a8daad2168a08,"Merge pull request #362 from fawek/mac-build-fix

Fix the build on Mac OS X, where features.h is non-existent"
anydot,2012-02-26 08:59:32,https://api.github.com/repos/antirez/redis/git/commits/80ff1fc6d0e3da53ae7bea0354216a38f7303971,80ff1fc6d0e3da53ae7bea0354216a38f7303971,use gcc sync builtins for memory counter when possible
anydot,2012-02-26 09:01:27,https://api.github.com/repos/antirez/redis/git/commits/59132e42125c43299c428e86f9107493e173883e,59132e42125c43299c428e86f9107493e173883e,fix redis-benchmark memory leak
antirez,2012-02-24 14:46:25,https://api.github.com/repos/antirez/redis/git/commits/36e6637dfd766eaa6b73438e2363f40c23cdadaa,36e6637dfd766eaa6b73438e2363f40c23cdadaa,lua_cmsgpack.c added
antirez,2012-02-24 14:45:16,https://api.github.com/repos/antirez/redis/git/commits/63505e0b59f5584f87ebe2f0d711c6d405b85b4b,63505e0b59f5584f87ebe2f0d711c6d405b85b4b,Lua_cmsgpack added to Redis scripting.
antirez,2012-02-23 14:39:26,https://api.github.com/repos/antirez/redis/git/commits/f6da155bde4c187325deee8b40fe41d45f40468d,f6da155bde4c187325deee8b40fe41d45f40468d,redis-benchmark: a few fixes to pipelining implementation.
antirez,2012-02-23 14:02:43,https://api.github.com/repos/antirez/redis/git/commits/b9474282f82f84baee730271bd86109ed1c95fe6,b9474282f82f84baee730271bd86109ed1c95fe6,redis-benchmark: Initial support for pipelining.
antirez,2012-02-22 16:44:18,https://api.github.com/repos/antirez/redis/git/commits/62c394e2195187a271ce9be81e913b37ee281c47,62c394e2195187a271ce9be81e913b37ee281c47,unstable version called 2.9.4
antirez,2012-02-22 16:22:40,https://api.github.com/repos/antirez/redis/git/commits/92e984dbcdea9c60b0e615c882e9796ab0cd9390,92e984dbcdea9c60b0e615c882e9796ab0cd9390,"The universe is 80 columns wide, accept it."
antirez,2012-02-22 16:19:54,https://api.github.com/repos/antirez/redis/git/commits/dbb27a0a90ca3800f5be1d8170e404b9e7b9bc44,dbb27a0a90ca3800f5be1d8170e404b9e7b9bc44,"Merge pull request #304 from bradvoth/unstable

Simple install script changes"
antirez,2012-02-22 15:07:06,https://api.github.com/repos/antirez/redis/git/commits/a5bd08487ff22156cbaae9286ab8820172b35df7,a5bd08487ff22156cbaae9286ab8820172b35df7,"Fix for issue #306, thanks to tchajed (on github) for the pull request. The original patch was reworked a bit."
antirez,2012-02-22 14:16:11,https://api.github.com/repos/antirez/redis/git/commits/4eb3b3e970506152b0977c2c73c0aad5b97148f6,4eb3b3e970506152b0977c2c73c0aad5b97148f6,Redis-cli should accept help command even if there is no connection to the server.
antirez,2012-02-22 10:25:30,https://api.github.com/repos/antirez/redis/git/commits/fcdeb98568708b8d9ef1415aaeef75ee5fe488f2,fcdeb98568708b8d9ef1415aaeef75ee5fe488f2,even less false positive on obuf-limits test.
antirez,2012-02-22 08:52:29,https://api.github.com/repos/antirez/redis/git/commits/467d703eadd1578f93544bb5a7b6e40685a3b8ac,467d703eadd1578f93544bb5a7b6e40685a3b8ac,Merge remote-tracking branch 'origin/unstable' into unstable
antirez,2012-02-22 08:52:10,https://api.github.com/repos/antirez/redis/git/commits/feb282883b171c7bba13551f82c7049d36d81ead,feb282883b171c7bba13551f82c7049d36d81ead,zzlIsInRange() now is capable of handling empty sorted sets that may end inside the data set when loading very old RDB files produced by early-stage versions of Redis.
antirez,2012-02-21 18:29:55,https://api.github.com/repos/antirez/redis/git/commits/30c06ae6b43a5909d842011cc6dd1443d056c684,30c06ae6b43a5909d842011cc6dd1443d056c684,"Merge pull request #347 from pietern/unstable-segv

Force SIGSEGV without HAVE_BACKTRACE (unstable)"
pietern,2012-02-21 18:11:20,https://api.github.com/repos/antirez/redis/git/commits/ca2344f9916f048667304bfa1e476fc52d1bc15d,ca2344f9916f048667304bfa1e476fc52d1bc15d,Solaris has backtrace(3)
pietern,2012-02-21 18:05:46,https://api.github.com/repos/antirez/redis/git/commits/57be47758e3203fe5e01c15895c4351206415024,57be47758e3203fe5e01c15895c4351206415024,Also force SIGSEGV without HAVE_BACKTRACE
antirez,2012-02-21 17:25:49,https://api.github.com/repos/antirez/redis/git/commits/7c96b467c1f882874f80403101ec96ddaf624f1a,7c96b467c1f882874f80403101ec96ddaf624f1a,Fixed undefined behavior in *INCR style functions overflow detection. Sorry clang!
antirez,2012-02-21 09:06:04,https://api.github.com/repos/antirez/redis/git/commits/fe7be460257627848987d7bf6d80ce8540b01628,fe7be460257627848987d7bf6d80ce8540b01628,bzero -> memset
antirez,2012-02-19 19:49:20,https://api.github.com/repos/antirez/redis/git/commits/ad0df18fdc965183533515aae5e4e01009616c86,ad0df18fdc965183533515aae5e4e01009616c86,Fix 32bit build of hiredis
antirez,2012-02-19 19:33:59,https://api.github.com/repos/antirez/redis/git/commits/8e65b6a33d01f48f469735798806877e3168cb2c,8e65b6a33d01f48f469735798806877e3168cb2c,Applied a few modifications to hiredis to tune it for speed (redis-benchmark) and ability to read more deeply nested replies (redis-cli).
antirez,2012-02-19 19:26:36,https://api.github.com/repos/antirez/redis/git/commits/b66e5add82bf6785421111f505f41ed8bf09a6f7,b66e5add82bf6785421111f505f41ed8bf09a6f7,The hiredis lib shipped with Redis was updated to latest version.
pietern,2012-01-14 01:49:16,https://api.github.com/repos/antirez/redis/git/commits/cb598cdd59f48ffa1cb2f3d82d95b8b9eaee7195,cb598cdd59f48ffa1cb2f3d82d95b8b9eaee7195,"Don't expire keys when loading an RDB after a SYNC

The cron is responsible for expiring keys. When keys are expired at
load time, it is possible that the snapshot of a master node gets
modified. This can in turn lead to inconsistencies in the data set.

A more concrete example of this behavior follows. A user reported a
slave that would show an monotonically increase input buffer length,
shortly after completing a SYNC. Also, `INFO` output showed a single
blocked client, which could only be the master link. Investigation
showed that indeed the `BRPOP` command was fed by the master. This
command can only end up in the stream of write operations when it did
NOT block, and effectively executed `RPOP`. However, when the key
involved in the `BRPOP` is expired BEFORE the command is executed, the
client executing it will block. The client in this case, is the master
link."
antirez,2012-02-16 15:13:40,https://api.github.com/repos/antirez/redis/git/commits/d347348109c955ebf287aafea5d7b65cd4ec9014,d347348109c955ebf287aafea5d7b65cd4ec9014,Issue #330 regression test.
antirez,2012-02-16 15:09:08,https://api.github.com/repos/antirez/redis/git/commits/a400a9b2d753fcfc90aa234019ab7afd21966509,a400a9b2d753fcfc90aa234019ab7afd21966509,Now HINCRBY can detect overflows too. Fix for issue #330.
antirez,2012-02-16 11:20:56,https://api.github.com/repos/antirez/redis/git/commits/6e09ad1c156f10246ccd0f2de5b11a9635e28818,6e09ad1c156f10246ccd0f2de5b11a9635e28818,Return ASAP from checkClientOutputBufferLimits() if c->reply_bytes is zero.
antirez,2012-02-16 08:40:27,https://api.github.com/repos/antirez/redis/git/commits/48a32944e6b5e30754701109ff23d85a418d3d4d,48a32944e6b5e30754701109ff23d85a418d3d4d,Merge branch 'issue327' into unstable
antirez,2012-02-15 11:21:04,https://api.github.com/repos/antirez/redis/git/commits/3b0600c7771e97c8dd419b9c4b917aad415cc3ae,3b0600c7771e97c8dd419b9c4b917aad415cc3ae,Add stdint.h in endianconv.h to fix issue #336.
antirez,2012-02-14 18:57:31,https://api.github.com/repos/antirez/redis/git/commits/4a701b3801f0b5362c303b0d477b31d81516d139,4a701b3801f0b5362c303b0d477b31d81516d139,redis-check-aof is now large files safe also on 32 bit systems.
antirez,2012-02-14 15:15:20,https://api.github.com/repos/antirez/redis/git/commits/120a36f22b338e6205a703424cd517e289d5217f,120a36f22b338e6205a703424cd517e289d5217f,"add -f flag to cp when installing, otherwise stopping the server is
needed when installing a new Redis version. Thanks to Scott Kevill.
Fixes issue #335."
antirez,2012-02-14 15:11:46,https://api.github.com/repos/antirez/redis/git/commits/7a3e372025b2a54486ce52d706b1da95be4b7e7e,7a3e372025b2a54486ce52d706b1da95be4b7e7e,endian.c/h -> endianconv.c/h to avoid issues with broken libraries search paths.
antirez,2012-02-14 15:02:04,https://api.github.com/repos/antirez/redis/git/commits/18aa2b87b6db7fa79b0596590aa385adcbc64e53,18aa2b87b6db7fa79b0596590aa385adcbc64e53,Merge remote-tracking branch 'origin/unstable' into unstable
antirez,2012-02-14 14:35:50,https://api.github.com/repos/antirez/redis/git/commits/6136a16bd1fe4a88ada02e31e597b805d8a86b55,6136a16bd1fe4a88ada02e31e597b805d8a86b55,intset.c endianess fixes.
antirez,2012-02-13 23:05:59,https://api.github.com/repos/antirez/redis/git/commits/5e985e795dda8a77a87094bd9160c9c48fbf85fd,5e985e795dda8a77a87094bd9160c9c48fbf85fd,"Merge pull request #334 from lsbardel/quantredis

added lua struct c extension"
lsbardel,2012-02-13 21:05:21,https://api.github.com/repos/antirez/redis/git/commits/2f75bbab0242f5dea4c976d7b3da719616166c75,2f75bbab0242f5dea4c976d7b3da719616166c75,added lua struct c extension
antirez,2012-02-09 16:09:01,https://api.github.com/repos/antirez/redis/git/commits/66d1b021ec0063c988e837a78356e72d8ed180ca,66d1b021ec0063c988e837a78356e72d8ed180ca,"ziplist.c endianess fixes, chapter 5."
antirez,2012-02-09 15:36:25,https://api.github.com/repos/antirez/redis/git/commits/cab1105c6e4f9f5c3bc82c72a3433e663e9b05cc,cab1105c6e4f9f5c3bc82c72a3433e663e9b05cc,"ziplist.c endianess fixes, chapter 4."
antirez,2012-02-09 15:28:35,https://api.github.com/repos/antirez/redis/git/commits/3fa19b7dfc785aeaa8c1d32782b0b0018a965d13,3fa19b7dfc785aeaa8c1d32782b0b0018a965d13,"ziplist.c endianess fixes, chapter 3."
antirez,2012-02-08 22:20:39,https://api.github.com/repos/antirez/redis/git/commits/8e0ef249a2c1a67e11838ff48329b51c4aa7ccdc,8e0ef249a2c1a67e11838ff48329b51c4aa7ccdc,more ziplist.c endianess fixes
antirez,2012-02-08 21:59:35,https://api.github.com/repos/antirez/redis/git/commits/56538477143b144f2267ce98805a7b6edc763528,56538477143b144f2267ce98805a7b6edc763528,ziplist.c fixes for bigendian
antirez,2012-02-08 21:24:59,https://api.github.com/repos/antirez/redis/git/commits/ac834d237a1b094eecd6ac2f36aa47b52b49466f,ac834d237a1b094eecd6ac2f36aa47b52b49466f,A few small BSD related fixes.
antirez,2012-02-07 23:20:46,https://api.github.com/repos/antirez/redis/git/commits/f9ef912c661a8d0a0690e20dc46f29484e0e4a5e,f9ef912c661a8d0a0690e20dc46f29484e0e4a5e,more practical maxmemory+slaves hint in redis.conf
antirez,2012-02-07 23:17:27,https://api.github.com/repos/antirez/redis/git/commits/cebb7b92ce04c89826a0ebe74fd0c15097fe5230,cebb7b92ce04c89826a0ebe74fd0c15097fe5230,redis.conf updated with new maxmemory semantics
antirez,2012-02-07 23:10:20,https://api.github.com/repos/antirez/redis/git/commits/b129c6df454690e223ac8481a4510313db35e66b,b129c6df454690e223ac8481a4510313db35e66b,debugging messages removed from freeMemoryIfNeeded()
antirez,2012-02-07 16:41:31,https://api.github.com/repos/antirez/redis/git/commits/609baba8a2d115f05e8fbc0db742ca60848e3c80,609baba8a2d115f05e8fbc0db742ca60848e3c80,"Fixes to c->reply_bytes computation, and debug messages to closely study the behavior of memory pressure + slaves + maxmemory + blocked slaves."
antirez,2012-02-07 14:08:38,https://api.github.com/repos/antirez/redis/git/commits/01e95705f8d4b0d21cf892748eaf153f16fbf947,01e95705f8d4b0d21cf892748eaf153f16fbf947,Fixes to 2.6 release notes file
antirez,2012-02-07 12:05:36,https://api.github.com/repos/antirez/redis/git/commits/442246dde2d8842caf4c1f4d4694ef5a78a0bad8,442246dde2d8842caf4c1f4d4694ef5a78a0bad8,"Precision of getClientOutputBufferMemoryUsage() greatily improved, see issue #327 for more information."
antirez,2012-02-06 15:56:42,https://api.github.com/repos/antirez/redis/git/commits/8b7c3455b964d634453cfe7acdb833db10a2fed5,8b7c3455b964d634453cfe7acdb833db10a2fed5,freeMemoryIfNeeded() minor refactoring
antirez,2012-02-06 15:35:43,https://api.github.com/repos/antirez/redis/git/commits/c1ef6ffe8a53e573b6b9e8d1a02c35e2c62cdad8,c1ef6ffe8a53e573b6b9e8d1a02c35e2c62cdad8,Also remove size of AOF buffers from used memory when doing the math for freeMemoryIfNeeded()
antirez,2012-02-05 10:08:01,https://api.github.com/repos/antirez/redis/git/commits/c2513ecb9877d9976da31bc11f84e1dab68777b5,c2513ecb9877d9976da31bc11f84e1dab68777b5,A first (work in progress) release notes for 2.6
antirez,2012-02-05 08:38:41,https://api.github.com/repos/antirez/redis/git/commits/3508899944aa0797cf52563493b4bc295b0ec2fd,3508899944aa0797cf52563493b4bc295b0ec2fd,INSTALL now redirects the user to README
antirez,2012-02-05 08:37:08,https://api.github.com/repos/antirez/redis/git/commits/7441fcdd5639942e9698ab1e20907f0dfb1c9d00,7441fcdd5639942e9698ab1e20907f0dfb1c9d00,Redis Manifesto moved from src to root dir
antirez,2012-02-04 13:05:54,https://api.github.com/repos/antirez/redis/git/commits/f6b32c14f4c8680d2a6b7a4d71758e76ca2c3554,f6b32c14f4c8680d2a6b7a4d71758e76ca2c3554,"This fixes issue #327, is a very complex fix (unfortunately), details:

1) sendReplyToClient() now no longer stops transferring data to a single
client in the case we are out of memory (maxmemory-wise).

2) in processCommand() the idea of we being out of memory is no longer
the naive zmalloc_used_memory() > server.maxmemory. To say if we can
accept or not write queries is up to the return value of
freeMemoryIfNeeded(), that has full control about that.

3) freeMemoryIfNeeded() now does its math without considering output
buffers size. But at the same time it can't let the output buffers to
put us too much outside the max memory limit, so at the same time it
makes sure there is enough effort into delivering the output buffers to
the slaves, calling the write handler directly.

This three changes are the result of many tests, I found (partially
empirically) that is the best way to address the problem, but maybe
we'll find better solutions in the future."
antirez,2012-02-04 07:58:37,https://api.github.com/repos/antirez/redis/git/commits/355f859134e6220cb35d7b3fa9ea19ea8d05c02a,355f859134e6220cb35d7b3fa9ea19ea8d05c02a,"Use less memory when emitting the protocol, by using more shared objects for commonly emitted parts of the protocol."
antirez,2012-02-02 15:30:52,https://api.github.com/repos/antirez/redis/git/commits/ce8b772be7dcd0dec767c7bdfa3b8702806d69c4,ce8b772be7dcd0dec767c7bdfa3b8702806d69c4,Now Lua scripts dispatch Redis commands properly calling the call() function. In order to make this possible call() was improved with a new flags argument that controls how the Redis command is executed.
antirez,2012-02-02 09:17:16,https://api.github.com/repos/antirez/redis/git/commits/d876678b5eb0db0df66a658faeb8fb71e236a634,d876678b5eb0db0df66a658faeb8fb71e236a634,Set a 3.5 GB maxmemory limit with noeviction policy if a 32 bit instance without user-provided memory limits is detected.
antirez,2012-02-02 09:02:40,https://api.github.com/repos/antirez/redis/git/commits/75eaac5c7410553b089f11632c5755004a0a6665,75eaac5c7410553b089f11632c5755004a0a6665,Added a server.arch_bits field instead of computing it at runtime for INFO.
antirez,2012-02-01 20:47:41,https://api.github.com/repos/antirez/redis/git/commits/b80b1c5914435c3a013cfe9b19e39f9de35ab06e,b80b1c5914435c3a013cfe9b19e39f9de35ab06e,Only incremnet stats for key miss/hit when the key is semantically accessed in read-only.
antirez,2012-02-01 16:49:03,https://api.github.com/repos/antirez/redis/git/commits/c17947287afe5b081400679dbe9882cd4e95776b,c17947287afe5b081400679dbe9882cd4e95776b,Added tests checking ability of the scripting engine to reorder the output of commands with a random output regarding signle elements position in the multi bulk reply.
antirez,2012-02-01 16:37:48,https://api.github.com/repos/antirez/redis/git/commits/44d77bb217b51e287e1f885445440dc85a1aa641,44d77bb217b51e287e1f885445440dc85a1aa641,A few SORT tests made more resistant to false negatives resulitng from poor randomization of Redis hash function with one byte inputs.
antirez,2012-02-01 16:17:52,https://api.github.com/repos/antirez/redis/git/commits/01f75bf352b312cacbba2ae30464894c3c44c4c6,01f75bf352b312cacbba2ae30464894c3c44c4c6,New SORT tests checking the new more deterministic behavior of SORT sorting algorithm.
antirez,2012-02-01 16:05:45,https://api.github.com/repos/antirez/redis/git/commits/de79a2ee12ef0e301d05494d64831bc407ba3696,de79a2ee12ef0e301d05494d64831bc407ba3696,"Make SORT BY <constant> STORE ... to always produce the same output by force sorting, so that we have deterministic replication of this command."
antirez,2012-02-01 14:22:28,https://api.github.com/repos/antirez/redis/git/commits/2c861050c17237a61fdaff4da2777c5d18ce979a,2c861050c17237a61fdaff4da2777c5d18ce979a,"SORT is now more deterministic: does not accept to compare by score items that have scores not representing a valid double. Also items with the same score are compared lexycographically. At the same time the scripting side introduced the ability to sort the output of SORT when sort uses the BY <constant> optimization, resulting in no specific ordering. Since in this case the user may use GET, and the result of GET can be null, converted into false as Lua data type, this commit also introduces the ability to sort Lua tables containining false, only if the first (faster) attempt at using just table.sort with a single argument fails."
antirez,2012-01-31 15:09:21,https://api.github.com/repos/antirez/redis/git/commits/548efd91e5a33e1358213a902b8533d88f40f7cf,548efd91e5a33e1358213a902b8533d88f40f7cf,"Order output of commands returning random arrays using table.sort when called from Lua, partially fixing issue #165. The issue is yet not completely fixed since we can't add the REDIS_CMD_SORT_FOR_SCRIPT flag in SORT currently, both because it may contain NULLs and because it is not cool to re-sort everything at every call when instead this should be sorted only if BY <constant> is used."
antirez,2012-01-31 10:43:32,https://api.github.com/repos/antirez/redis/git/commits/8dd19d818f52d27284fd3e3b6e0fc237388e7678,8dd19d818f52d27284fd3e3b6e0fc237388e7678,Fixed redis-benchmark --help output typo
antirez,2012-01-31 09:35:52,https://api.github.com/repos/antirez/redis/git/commits/3c08fdae712e79cc7a678a2969c2ac15c5ff8865,3c08fdae712e79cc7a678a2969c2ac15c5ff8865,64 bit instances are no longer limited to have at max 2^32-1 elements in lists.
antirez,2012-01-30 20:08:10,https://api.github.com/repos/antirez/redis/git/commits/fc4ed4299bfad004a3230bf6af0de89281bb2d44,fc4ed4299bfad004a3230bf6af0de89281bb2d44,minimal change to obuf-limits.tcl test to make sure there are no false positives with 32bit instances as well.
antirez,2012-01-30 09:40:28,https://api.github.com/repos/antirez/redis/git/commits/d1c4c94ebf918b908691ab7f58f872b04d93f3f9,d1c4c94ebf918b908691ab7f58f872b04d93f3f9,Merge remote-tracking branch 'origin/unstable' into unstable
antirez,2012-01-30 09:40:17,https://api.github.com/repos/antirez/redis/git/commits/eb7d19ed69c438b102ef7cb35195281c13a850ee,eb7d19ed69c438b102ef7cb35195281c13a850ee,"Merge pull request #319 from fawek/lua-error-location

Lua reports line numbers off by one in error messages"
antirez,2012-01-30 09:27:50,https://api.github.com/repos/antirez/redis/git/commits/89f6f6abcf882a1eed882a0d97b1e50c034c9530,89f6f6abcf882a1eed882a0d97b1e50c034c9530,setKey(): call the higher level wrapper setModifiedKey() instead of touchWatchedKey() even if currently they are exactly the same.
antirez,2012-01-30 09:25:34,https://api.github.com/repos/antirez/redis/git/commits/824ea0177f19218d925feefbfe836718c46351d5,824ea0177f19218d925feefbfe836718c46351d5,"Merge pull request #321 from mkwiatkowski/ticket227

SORT with STORE removes key if result is empty. This fixes issue #227."
mkwiatkowski,2012-01-30 06:36:49,https://api.github.com/repos/antirez/redis/git/commits/a0bf8d0ad8a6f4414194bc8ec7d067664bd321c2,a0bf8d0ad8a6f4414194bc8ec7d067664bd321c2,SORT with STORE removes key if result is empty. This fixes issue #227.
antirez,2012-01-26 15:45:08,https://api.github.com/repos/antirez/redis/git/commits/6c29410117b100b13764280bb3c58604b769c4fc,6c29410117b100b13764280bb3c58604b769c4fc,"false positive in expire tests mitigated with a sleep, but other solutions exist if needed later."
antirez,2012-01-26 15:08:24,https://api.github.com/repos/antirez/redis/git/commits/7f7a13b27b4a09a0df1841c69af35306d4464327,7f7a13b27b4a09a0df1841c69af35306d4464327,Less false positives for obuf-limits.tcl tests
pietern,2012-01-25 21:37:43,https://api.github.com/repos/antirez/redis/git/commits/d3ea4c86a8c8efb2ab922db89af915833e437e7e,d3ea4c86a8c8efb2ab922db89af915833e437e7e,Update default configuration
pietern,2012-01-25 21:26:25,https://api.github.com/repos/antirez/redis/git/commits/80586cb894da69a26f6ab52d6bad0e9e8fa8a6bd,80586cb894da69a26f6ab52d6bad0e9e8fa8a6bd,Test that zipmap from RDB is correctly converted
antirez,2012-01-25 17:34:56,https://api.github.com/repos/antirez/redis/git/commits/da9c4cc1471f8575d1a4e62955c248e725efc750,da9c4cc1471f8575d1a4e62955c248e725efc750,Added test for client output buffer limit (soft limit).
antirez,2012-01-25 17:11:04,https://api.github.com/repos/antirez/redis/git/commits/efc8f6c1a2366fd374ffd0b39138bea02bda2e9c,efc8f6c1a2366fd374ffd0b39138bea02bda2e9c,Added test for client output buffer limit (hard limit).
antirez,2012-01-25 17:07:56,https://api.github.com/repos/antirez/redis/git/commits/c715c9b8bfbd83022502e29ae72be7f0eae1a3da,c715c9b8bfbd83022502e29ae72be7f0eae1a3da,Fixed typo in getClientLimitClassByName()
antirez,2012-01-25 15:59:58,https://api.github.com/repos/antirez/redis/git/commits/a30a8ae7ba55cd7912dbfb78eef1d3963215ff6c,a30a8ae7ba55cd7912dbfb78eef1d3963215ff6c,Merge branch 'unstable' into limits
antirez,2012-01-25 15:59:32,https://api.github.com/repos/antirez/redis/git/commits/4e97c2c71a3c511165c966769f51d2255d7a7b33,4e97c2c71a3c511165c966769f51d2255d7a7b33,Fixed another possible bug in cluster.c found by clang --analyze.
antirez,2012-01-25 15:59:32,https://api.github.com/repos/antirez/redis/git/commits/d329031fad1ac8c5d2d0c58a17d08a2de98b7b15,d329031fad1ac8c5d2d0c58a17d08a2de98b7b15,Fixed another possible bug in cluster.c found by clang --analyze.
antirez,2012-01-25 15:46:53,https://api.github.com/repos/antirez/redis/git/commits/9b810f1cde23485ca435bd90754d9a5c1ecfafe7,9b810f1cde23485ca435bd90754d9a5c1ecfafe7,Merge branch 'unstable' into limits
antirez,2012-01-25 15:46:19,https://api.github.com/repos/antirez/redis/git/commits/6710ff24d067d56b6b8d768532a6a7d3c4bc7a80,6710ff24d067d56b6b8d768532a6a7d3c4bc7a80,"Fixed a non critical bug signaled by clang static analyzer thanks to Mukund Sivaraman for reporting it: there was a not initialized field populating the cluster message header, but it is always fixed at later time before sending the packet."
antirez,2012-01-25 09:41:25,https://api.github.com/repos/antirez/redis/git/commits/c69ad1f24e379e9708c562cc8cda12691a000595,c69ad1f24e379e9708c562cc8cda12691a000595,Merge branch 'unstable' into limits
antirez,2012-01-25 09:35:47,https://api.github.com/repos/antirez/redis/git/commits/ecc57021451d1c625fd36c9ba88c60f201f5c098,ecc57021451d1c625fd36c9ba88c60f201f5c098,"aeCreateEventLoop() cleanup on error unified in a single block (original
patch by Mukund Sivaraman, modified by me to make it simpler and to use
my coding style)."
muks,2012-01-25 09:27:37,https://api.github.com/repos/antirez/redis/git/commits/caa63a382154bee2162237330e43eee2944b2c6a,caa63a382154bee2162237330e43eee2944b2c6a,"If aeApiCreate() fails, there's probably not much one can do, but in the name of consistency..."
antirez,2012-01-24 14:33:15,https://api.github.com/repos/antirez/redis/git/commits/2f0f0d95c05d5df6443a6ffbedb64c18faaeb6cc,2f0f0d95c05d5df6443a6ffbedb64c18faaeb6cc,lenght -> length
antirez,2012-01-24 13:46:23,https://api.github.com/repos/antirez/redis/git/commits/3cbce4f45e0d727e585253ecb5bdb670ad8458f6,3cbce4f45e0d727e585253ecb5bdb670ad8458f6,redis.conf typo fixed in the client-output-buffer-limit documentation
antirez,2012-01-24 11:03:48,https://api.github.com/repos/antirez/redis/git/commits/7957c676040df062c0ec235fcad9c3ae4437638c,7957c676040df062c0ec235fcad9c3ae4437638c,after all closing a client for output buffer limit overcoming is a WARNING level message.
antirez,2012-01-24 10:23:23,https://api.github.com/repos/antirez/redis/git/commits/c8a607f2b6a1253fa7f884dd009bb1f559d76d57,c8a607f2b6a1253fa7f884dd009bb1f559d76d57,client-output-buffer-limit documented in redis.conf
antirez,2012-01-24 09:43:30,https://api.github.com/repos/antirez/redis/git/commits/7fe8d49a70c8ae87dbcc080872d327d1485c18c5,7fe8d49a70c8ae87dbcc080872d327d1485c18c5,Client output buffer limits: configuration of parameters for the different classes of clients implemented.
antirez,2012-01-24 08:32:39,https://api.github.com/repos/antirez/redis/git/commits/06b3dced99371c68fa9d7bcb0523cc05f3324e06,06b3dced99371c68fa9d7bcb0523cc05f3324e06,asyncCloseClientOnOutputBufferLimitReached() now ignores clients with REDIS_CLOSE_ASAP flag already set. Return value of the function changed from int to void since it is not used. Fixed logging of the client scheduled to be closed.
antirez,2012-01-23 16:15:49,https://api.github.com/repos/antirez/redis/git/commits/51669c5ac11b250fcdc91382f52f515a11835a20,51669c5ac11b250fcdc91382f52f515a11835a20,client buffer handling refactoring and optimization
antirez,2012-01-23 15:19:49,https://api.github.com/repos/antirez/redis/git/commits/3c0602ff418ff1a1b18440a6994fd73226786251,3c0602ff418ff1a1b18440a6994fd73226786251,CLIENT LIST test fixed (there is a new omem field in the output)
antirez,2012-01-23 15:17:22,https://api.github.com/repos/antirez/redis/git/commits/8c43e66346bf917ce13b85e79700a2183fa01ab7,8c43e66346bf917ce13b85e79700a2183fa01ab7,actually call the function to async free clients in serverCron().
antirez,2012-01-23 15:12:37,https://api.github.com/repos/antirez/redis/git/commits/7eac2a75a43bace72947fb534db9016707af1a02,7eac2a75a43bace72947fb534db9016707af1a02,Implementation of the internals that make possible to terminate clients overcoming configured output buffer (soft and hard) limits.
antirez,2012-01-23 09:36:07,https://api.github.com/repos/antirez/redis/git/commits/890da62eea16bbf67be0c92cf16eba191f8e828e,890da62eea16bbf67be0c92cf16eba191f8e828e,Merge branch 'unstable' into limits
antirez,2012-01-22 00:40:23,https://api.github.com/repos/antirez/redis/git/commits/b362c111daa0939f86123cb6fb82fbb389cffc7b,b362c111daa0939f86123cb6fb82fbb389cffc7b,fixed typo in hahs function seed default value. It is no longer used but fixed to retain the old constant as default anyway.
antirez,2012-01-21 22:34:06,https://api.github.com/repos/antirez/redis/git/commits/06c5523a88ec0f76ff932de5240c8d3ad3b1cc19,06c5523a88ec0f76ff932de5240c8d3ad3b1cc19,typo in comment fixed
antirez,2012-01-21 22:05:32,https://api.github.com/repos/antirez/redis/git/commits/a48c8d873bc2a49f66ab398ebed51dc45764ca17,a48c8d873bc2a49f66ab398ebed51dc45764ca17,Fix for hash table collision attack. We simply randomize hash table initialization value at startup time.
antirez,2012-01-20 15:40:43,https://api.github.com/repos/antirez/redis/git/commits/447ebf3bc73016a6137a458bf0314109a0128157,447ebf3bc73016a6137a458bf0314109a0128157,Better looking registers/stack dump
antirez,2012-01-20 13:37:50,https://api.github.com/repos/antirez/redis/git/commits/632da605831a84fe3d6a17b5d3f4ce7114378f77,632da605831a84fe3d6a17b5d3f4ce7114378f77,added support to dump registers on crash on Linux x32
antirez,2012-01-20 11:54:15,https://api.github.com/repos/antirez/redis/git/commits/eea8c7a4f86785f5b5e325007653ee449d6140cd,eea8c7a4f86785f5b5e325007653ee449d6140cd,added support to dump registers on crash on Linux x64
antirez,2012-01-20 11:20:45,https://api.github.com/repos/antirez/redis/git/commits/d4d208595c78d78196c926c55799bc81ae06f230,d4d208595c78d78196c926c55799bc81ae06f230,"all the stack trace related functions are now in debug.c. Now Redis dumps registers and stack content on crash. Currently osx supported, adding Linux right now."
antirez,2012-01-17 11:43:01,https://api.github.com/repos/antirez/redis/git/commits/498dc5557c31fc9a65a36f2e8da9accfa72fbc5a,498dc5557c31fc9a65a36f2e8da9accfa72fbc5a,"Introduced three client limit classes: normal, slave, pubsub"
antirez,2011-12-25 15:32:54,https://api.github.com/repos/antirez/redis/git/commits/3853c168392e01f1790acaaee0a27aa893100e56,3853c168392e01f1790acaaee0a27aa893100e56,Track the length of the client pending output buffers (still to transfer) in a new field in the client structure.
antirez,2012-01-16 15:50:41,https://api.github.com/repos/antirez/redis/git/commits/f7ccc4830bfd9345452027020c12c100d01090ef,f7ccc4830bfd9345452027020c12c100d01090ef,Merge remote-tracking branch 'origin/unstable' into unstable
antirez,2012-01-16 15:50:24,https://api.github.com/repos/antirez/redis/git/commits/4aac3ff2473b4e70dd503ff5c65891146dac30fc,4aac3ff2473b4e70dd503ff5c65891146dac30fc,"It is now posible to flush all the previous saving points in redis.conf by using a save directive with a single empty string argument, like it happens for CONFIG SET save."
antirez,2012-01-16 11:44:00,https://api.github.com/repos/antirez/redis/git/commits/a11c87477754322863a51c22cb6a7614ba8ebaf0,a11c87477754322863a51c22cb6a7614ba8ebaf0,"Merge pull request #279 from kashif/patch-1

Fixed some typos in redis.conf."
antirez,2012-01-16 10:27:22,https://api.github.com/repos/antirez/redis/git/commits/ebdfad69dce1b3a1a48960328e5f6c3ed8fafa41,ebdfad69dce1b3a1a48960328e5f6c3ed8fafa41,Don't change the replication state if SLAVE OF is called with arguments specifying the same master we are already connected with. This fixes issues #290.
antirez,2012-01-16 09:08:33,https://api.github.com/repos/antirez/redis/git/commits/1596d6a61e4c92fcde30fb2628a242ab01cb5883,1596d6a61e4c92fcde30fb2628a242ab01cb5883,Obsolete SDS_ABORT_ON_OOM removed from sds.c
antirez,2012-01-16 09:03:38,https://api.github.com/repos/antirez/redis/git/commits/bd068b15c25c96200a8288beb5d8bc5331059e33,bd068b15c25c96200a8288beb5d8bc5331059e33,sds.c no longe pre-allocate more than 1MB of free space ahead. This fixes issue #252.
antirez,2012-01-16 08:39:04,https://api.github.com/repos/antirez/redis/git/commits/7faa1f075b14882696af22d0613255018416ac92,7faa1f075b14882696af22d0613255018416ac92,added a comment on top of the zslRandomLevel() function
antirez,2012-01-12 15:24:41,https://api.github.com/repos/antirez/redis/git/commits/06312eed86c72a4b259de2e78818827dba97b5c3,06312eed86c72a4b259de2e78818827dba97b5c3,Possible fix for false positives in issue 141 regression test
antirez,2012-01-12 15:02:57,https://api.github.com/repos/antirez/redis/git/commits/00010fa96f2b327ca865e6fdaf94d8924184271a,00010fa96f2b327ca865e6fdaf94d8924184271a,"On crash print information about the current client (if any), command vector, and object associated to first argument assuming it is a key."
antirez,2012-01-11 19:25:41,https://api.github.com/repos/antirez/redis/git/commits/d8bd12f984d3d5f78c0bcc9819fe002a3b379308,d8bd12f984d3d5f78c0bcc9819fe002a3b379308,error in comment fixed
antirez,2012-01-10 17:37:16,https://api.github.com/repos/antirez/redis/git/commits/5db904bdc575a75cf4ae6d9585767a6b771c0d9d,5db904bdc575a75cf4ae6d9585767a6b771c0d9d,show GCC version in INFO output.
antirez,2012-01-07 11:54:48,https://api.github.com/repos/antirez/redis/git/commits/68fe1b9b99e36b81298ee4d5181d3b7792146d97,68fe1b9b99e36b81298ee4d5181d3b7792146d97,version bumped to 2.9.3
antirez,2012-01-06 16:28:40,https://api.github.com/repos/antirez/redis/git/commits/414c3deac1573ae54325ca6ab629446205774d62,414c3deac1573ae54325ca6ab629446205774d62,Regression test for the main problem causing issue #141. Minor changes/fixes/additions to the test suite itself needed to write the test.
antirez,2012-01-06 11:54:29,https://api.github.com/repos/antirez/redis/git/commits/06f8a473fca79730e519c89571b1a7b227519d62,06f8a473fca79730e519c89571b1a7b227519d62,Regression tests for protocol desync bug related to Issue #141
pietern,2012-01-03 23:48:55,https://api.github.com/repos/antirez/redis/git/commits/fe458402014cdd98a10179c85899f1eca0307534,fe458402014cdd98a10179c85899f1eca0307534,"Implements ziplistFind

To improve the performance of the ziplist implementation, some
functions have been converted to macros to avoid unnecessary stack
movement and duplicate variable assignments."
pietern,2012-01-03 06:14:10,https://api.github.com/repos/antirez/redis/git/commits/ebd85e9a455df689c9be02a93354f580df4cafd8,ebd85e9a455df689c9be02a93354f580df4cafd8,Encode small hashes with a ziplist
pietern,2012-01-02 23:24:32,https://api.github.com/repos/antirez/redis/git/commits/9ea54feef0f2e62f7618da9b0ce3acce9f474db6,9ea54feef0f2e62f7618da9b0ce3acce9f474db6,string2* functions take a const pointer
antirez,2011-12-31 15:09:46,https://api.github.com/repos/antirez/redis/git/commits/11e0c4c55b8edd8d2226ba2e5fde989778695195,11e0c4c55b8edd8d2226ba2e5fde989778695195,"Protections against protocol desyncs, leading to infinite query buffer growing, due to nul-terms in specific bytes of the request or indefinitely long multi bulk or bulk count strings without newlines. This bug is related to Issue #141 as well."
antirez,2011-12-31 14:37:33,https://api.github.com/repos/antirez/redis/git/commits/f42e2f1bd791e4b3fdfa75c620dc9386b7cfea1e,f42e2f1bd791e4b3fdfa75c620dc9386b7cfea1e,Protocol and I/O related defines moved into a separated section of redis.h
antirez,2011-12-31 14:34:02,https://api.github.com/repos/antirez/redis/git/commits/35c6032cfab5b6e551672c5f0350d020b78aa70e,35c6032cfab5b6e551672c5f0350d020b78aa70e,A few no longer used defines removed from redis.h
antirez,2011-12-30 18:34:40,https://api.github.com/repos/antirez/redis/git/commits/1824e3a3a37eb9618aa487e6e071395758bdaca8,1824e3a3a37eb9618aa487e6e071395758bdaca8,Fixed replication when multiple slaves are attaching at the same time. The output buffer was not copied correctly between slaves. This fixes issue #141.
kashif,2011-12-28 21:14:23,https://api.github.com/repos/antirez/redis/git/commits/57c0cf8b8571128152ca785f664ee369c5a433a7,57c0cf8b8571128152ca785f664ee369c5a433a7,Fixed some typos in redis.conf.
antirez,2011-12-23 08:34:28,https://api.github.com/repos/antirez/redis/git/commits/2ebd2720b37dcca3b6e0c18377bd69e9eaf541fc,2ebd2720b37dcca3b6e0c18377bd69e9eaf541fc,Merge remote-tracking branch 'origin/unstable' into unstable
antirez,2011-12-23 08:34:06,https://api.github.com/repos/antirez/redis/git/commits/9678c37577facb441f3c636c0453eb7a651b2d7d,9678c37577facb441f3c636c0453eb7a651b2d7d,Added regression test for ZUNIONSTORE creating NaN (github issue #264)
antirez,2011-12-23 08:27:31,https://api.github.com/repos/antirez/redis/git/commits/256356ffd83b93abe49911a4b4bae020d5149348,256356ffd83b93abe49911a4b4bae020d5149348,Prevent NaN scores in sorted sets resulting from calls to ZUNIONSTORE and ZINTERSTORE.
antirez,2011-12-22 15:00:42,https://api.github.com/repos/antirez/redis/git/commits/d9b952211c4f4ae46bcd4afda83966fdd5b4c1cd,d9b952211c4f4ae46bcd4afda83966fdd5b4c1cd,"Merge pull request #268 from diegok/unstable

Fixed a config docs typo."
diegok,2011-12-22 11:22:23,https://api.github.com/repos/antirez/redis/git/commits/ce6628dae7f1daae774e23302ee755341195e777,ce6628dae7f1daae774e23302ee755341195e777,Fixed a config docs typo.
antirez,2011-12-21 16:13:31,https://api.github.com/repos/antirez/redis/git/commits/d334281c802bc94e99475557ed341d356af0ab54,d334281c802bc94e99475557ed341d356af0ab54,Merge remote-tracking branch 'origin/unstable' into unstable
antirez,2011-12-21 16:12:23,https://api.github.com/repos/antirez/redis/git/commits/e51b79f31554d1f5eceb38cad1a0a4d14bd70454,e51b79f31554d1f5eceb38cad1a0a4d14bd70454,sligthly better AOF related logs
antirez,2011-12-21 15:37:22,https://api.github.com/repos/antirez/redis/git/commits/b941417c1ba4d7720a16f6b56790e2af9fa978a3,b941417c1ba4d7720a16f6b56790e2af9fa978a3,Log when the child rewriting the AOF is killed by stopAppendOnly()
antirez,2011-12-21 11:23:18,https://api.github.com/repos/antirez/redis/git/commits/1844f9900f131a538d1cee988d76ef689c8426fe,1844f9900f131a538d1cee988d76ef689c8426fe,server.replstate -> server.repl_state
antirez,2011-12-21 11:22:13,https://api.github.com/repos/antirez/redis/git/commits/f48cd4b90cc298a74ded3f7adc45740a4dd1a9c1,f48cd4b90cc298a74ded3f7adc45740a4dd1a9c1,some RDB server struct fields renamed.
antirez,2011-12-21 11:17:02,https://api.github.com/repos/antirez/redis/git/commits/ff2145adac3108196bf6afcab61a5babc64ce4ed,ff2145adac3108196bf6afcab61a5babc64ce4ed,more AOF server struct fields renamed.
antirez,2011-12-21 10:58:42,https://api.github.com/repos/antirez/redis/git/commits/2c915bcf6d62e2e8d0868cddfda896fc989bc81f,2c915bcf6d62e2e8d0868cddfda896fc989bc81f,"AOF fileds in the global server state, and define names, renamed with more consistent names. More work to do."
antirez,2011-12-21 09:31:34,https://api.github.com/repos/antirez/redis/git/commits/e394114d95395fe9babb0a658de263a0811ec330,e394114d95395fe9babb0a658de263a0811ec330,"AOF refactoring, now with three states: ON, OFF, WAIT_REWRITE."
antirez,2011-12-21 09:05:32,https://api.github.com/repos/antirez/redis/git/commits/c6ac7d0302000c4dc77a746415edcdb6ff698569,c6ac7d0302000c4dc77a746415edcdb6ff698569,"server.appendonly -> server.aof_state, and many comments added in the server global state structure in the process."
antirez,2011-12-21 08:24:14,https://api.github.com/repos/antirez/redis/git/commits/b4fb720b1014a05fb1e3238d1b7b73883e20cb00,b4fb720b1014a05fb1e3238d1b7b73883e20cb00,A test modified to pass with the new AOF start/stop semantics.
antirez,2011-12-21 08:23:22,https://api.github.com/repos/antirez/redis/git/commits/202e3091d7554df42e520c3e6f7c6d54c1ad7728,202e3091d7554df42e520c3e6f7c6d54c1ad7728,Redis test: when assertion fails print not just the expression but also expanded values in the error message.
antirez,2011-12-20 16:52:57,https://api.github.com/repos/antirez/redis/git/commits/efb6022529469813cd946f6bb22d762dc20e606d,efb6022529469813cd946f6bb22d762dc20e606d,Do not propagate DEBUG LOADAOF
antirez,2011-12-20 16:00:27,https://api.github.com/repos/antirez/redis/git/commits/af77acc310204696a1af4e52345b2cf0be341cb1,af77acc310204696a1af4e52345b2cf0be341cb1,startAppendOnly() fixed to set server.appendonly to 0 if the start failed.
antirez,2011-12-20 09:29:33,https://api.github.com/repos/antirez/redis/git/commits/fc96409f9193a7fda1dd509d16769272453f36c0,fc96409f9193a7fda1dd509d16769272453f36c0,Merge remote-tracking branch 'origin/unstable' into aof-fixes
antirez,2011-12-19 13:38:31,https://api.github.com/repos/antirez/redis/git/commits/7d5209d7d36cf1f3978f3ca09a831f0c1a9f26e2,7d5209d7d36cf1f3978f3ca09a831f0c1a9f26e2,"Merge pull request #258 from miaout17/bugfix-247

Fix issue #247 and add a test case"
miaout17,2011-12-19 11:45:57,https://api.github.com/repos/antirez/redis/git/commits/f54c299091e94ba69d298c1d782589c1e9903b9c,f54c299091e94ba69d298c1d782589c1e9903b9c,"I found that no test will fail even if I broke the `SORT x LIMIT y z` code.
Added a naive unit test for SORT-LIMIT command."
miaout17,2011-12-19 11:29:46,https://api.github.com/repos/antirez/redis/git/commits/706b32e0e0a7dd20cc3f74501c1bfd74570b380c,706b32e0e0a7dd20cc3f74501c1bfd74570b380c,"Fix issue #247 : Accepting non-integer parameters when shouldn't
Using `getLongFromObjectOrReply` instead of `atoi` if possible.
The following functions are modified.

* lrangeCommand
* ltrimCommand
* lremCommand
* lindexCommand
* lsetCommand
* zunionInterGenericCommand
* genericZrangebyscoreCommand
* sortCommand"
antirez,2011-12-19 09:55:31,https://api.github.com/repos/antirez/redis/git/commits/0e59a947287a793719226c2c7505d9fc8e616e1a,0e59a947287a793719226c2c7505d9fc8e616e1a,version bumped to 2.9.2
antirez,2011-12-19 09:21:50,https://api.github.com/repos/antirez/redis/git/commits/3ae5a308db4613262ac82abae2ba80115d184ca4,3ae5a308db4613262ac82abae2ba80115d184ca4,unit/introspection.tcl added
antirez,2011-12-19 09:18:21,https://api.github.com/repos/antirez/redis/git/commits/f4bddefecd70e85cd95c72869a1bd8de3274e79e,f4bddefecd70e85cd95c72869a1bd8de3274e79e,unit/introspection added among tests executed by default
antirez,2011-12-19 09:16:37,https://api.github.com/repos/antirez/redis/git/commits/0a466a754226d5b13cd555a2893867084ee981d4,0a466a754226d5b13cd555a2893867084ee981d4,"Fixed memleak in CLIENT INFO, added simple test that will work as regression test on mac os x and in the CI when running over valgrind. This fixes issue #256"
antirez,2011-12-18 10:12:58,https://api.github.com/repos/antirez/redis/git/commits/a244a13b4c5d74031432aa337d6be21b4f033efd,a244a13b4c5d74031432aa337d6be21b4f033efd,added assertion in zslInsert() that ensures the inserted element score is not NaN
antirez,2011-12-16 08:56:12,https://api.github.com/repos/antirez/redis/git/commits/24accab2aa62f6ed1b87c6178f2003e37f0adbfd,24accab2aa62f6ed1b87c6178f2003e37f0adbfd,Merge remote-tracking branch 'origin/unstable' into unstable
antirez,2011-12-16 08:55:01,https://api.github.com/repos/antirez/redis/git/commits/18d0ef4bf010282832e9f4c697a86218fc70f393,18d0ef4bf010282832e9f4c697a86218fc70f393,"ae.c: solved a memory leak with no practical effects (since the event
loop is never destroyed in Redis). Thanks to @anydot for noticing it."
antirez,2011-12-15 19:03:28,https://api.github.com/repos/antirez/redis/git/commits/087f41409052da35270417c85010c6739fd28200,087f41409052da35270417c85010c6739fd28200,Fix: when aof_write_rewrite is true don't append on the AOF buffer but accumulate the differences for the rewrite.
antirez,2011-12-15 15:07:49,https://api.github.com/repos/antirez/redis/git/commits/e7a2e7c1f7b1e46704aaf0850f75d13d418c1db7,e7a2e7c1f7b1e46704aaf0850f75d13d418c1db7,AOF fixes in the context of replicaiton (when AOF is used by slave) and CONFIG SET appendonly yes/no.
antirez,2011-12-15 10:50:15,https://api.github.com/repos/antirez/redis/git/commits/36dda9554a826104653765ec8782e055384c39f1,36dda9554a826104653765ec8782e055384c39f1,ae_epoll.c typo introduced in the previous commit fixed.
antirez,2011-12-15 10:42:40,https://api.github.com/repos/antirez/redis/git/commits/e074416be49947c7bab5e237fab7210441bd99e5,e074416be49947c7bab5e237fab7210441bd99e5,"Max limit to 10k clients removed, this implements feature request on issue #194"
antirez,2011-12-14 14:11:11,https://api.github.com/repos/antirez/redis/git/commits/503d87a818ffd11c275bba6479bcd5b4a855e8ca,503d87a818ffd11c275bba6479bcd5b4a855e8ca,"List connected slaves with ip,port,state information in INFO, as requested by github issue #219"
antirez,2011-12-13 17:07:21,https://api.github.com/repos/antirez/redis/git/commits/19951d965aa78402fa3030af05a68b81fc4e9522,19951d965aa78402fa3030af05a68b81fc4e9522,version bumped to 2.9.1
antirez,2011-12-13 15:22:28,https://api.github.com/repos/antirez/redis/git/commits/e2f313899bf985fe691428af8466d10e3e67a6fd,e2f313899bf985fe691428af8466d10e3e67a6fd,redis-cli --eval implemented
antirez,2011-12-13 10:16:34,https://api.github.com/repos/antirez/redis/git/commits/da33edbc58282eed2d48ccb62babf39d0cb748e7,da33edbc58282eed2d48ccb62babf39d0cb748e7,Merge remote-tracking branch 'origin/unstable' into unstable
antirez,2011-12-12 16:39:23,https://api.github.com/repos/antirez/redis/git/commits/54ecc0e777cb13b5281619f41384a95d837737ee,54ecc0e777cb13b5281619f41384a95d837737ee,Hash type AOF rewrite using HMSET.
antirez,2011-12-12 16:27:39,https://api.github.com/repos/antirez/redis/git/commits/7df9b1412bb829eaff986f930ad35b814cb7b460,7df9b1412bb829eaff986f930ad35b814cb7b460,Sorted Set type AOF rewrite using variadic ZADD.
antirez,2011-12-12 14:57:51,https://api.github.com/repos/antirez/redis/git/commits/8d875ccb7a0159dd19bb24b1c35afd9b9a64f032,8d875ccb7a0159dd19bb24b1c35afd9b9a64f032,Set type AOF rewrite using variadic SADD.
antirez,2011-12-12 14:34:00,https://api.github.com/repos/antirez/redis/git/commits/570bbcf8e0be3847c561b75d1a115d6a7e550e5f,570bbcf8e0be3847c561b75d1a115d6a7e550e5f,Added tests for AOF rewrite.
antirez,2011-12-07 10:34:25,https://api.github.com/repos/antirez/redis/git/commits/38c06fa037dbb49b6e7c28df5b1fb566d504ba61,38c06fa037dbb49b6e7c28df5b1fb566d504ba61,List type AOF rewrite using variadic RPUSH for the linked list encoding.
antirez,2011-12-06 17:22:52,https://api.github.com/repos/antirez/redis/git/commits/5b2500965684fbcf75cb88152394f0e853661867,5b2500965684fbcf75cb88152394f0e853661867,Lists AOF rewrite using variadic RPUSH (work in progress)
antirez,2011-12-10 12:28:32,https://api.github.com/repos/antirez/redis/git/commits/954cc9d0f635ff85b23a6bbc03fdfb09bad13cf0,954cc9d0f635ff85b23a6bbc03fdfb09bad13cf0,Redis test: vaoid two false positives while running under valgrind.
antirez,2011-12-07 17:31:39,https://api.github.com/repos/antirez/redis/git/commits/43093dff2d23ab0c9b3429f224e49d18839b8ec6,43093dff2d23ab0c9b3429f224e49d18839b8ec6,Redis test: two redundant tests removed as they tend to create issues when running the test with valgrind.
antirez,2011-12-07 16:51:21,https://api.github.com/repos/antirez/redis/git/commits/b1d08d45401abd0a1c0321b26137d701b1c319e2,b1d08d45401abd0a1c0321b26137d701b1c319e2,Redis test: wait more time for the server to start if it is running using valgrind.
antirez,2011-12-07 16:15:17,https://api.github.com/repos/antirez/redis/git/commits/dfcf5a0ac8f80a15a4d1e3e581de80064663c89e,dfcf5a0ac8f80a15a4d1e3e581de80064663c89e,Redis test port allocation fixed.
antirez,2011-12-07 11:44:27,https://api.github.com/repos/antirez/redis/git/commits/85b69afedea1c31ded63495983eb168a7799bfcd,85b69afedea1c31ded63495983eb168a7799bfcd,EXPIRE tests more tolerant to random latency while the test is running.
antirez,2011-12-07 10:47:38,https://api.github.com/repos/antirez/redis/git/commits/846bcd9abe1d41fd6a7bb8c80267c221b145a7b7,846bcd9abe1d41fd6a7bb8c80267c221b145a7b7,Redis test: handle inability to start the server in a better way.
antirez,2011-12-07 07:58:29,https://api.github.com/repos/antirez/redis/git/commits/fb293ccbddb43f427ea1f791d8603fbd18e703e6,fb293ccbddb43f427ea1f791d8603fbd18e703e6,"Fixed a theoretical memory leak with no practical effects in ae_kqueue.c and ae_epoll.c, thanks to magicyang87 for reporting it."
antirez,2011-12-01 15:07:55,https://api.github.com/repos/antirez/redis/git/commits/237194b76064c95028b14e9ff7d7abfb10abd63d,237194b76064c95028b14e9ff7d7abfb10abd63d,Fixed SORT bugs (issue #224) with regression tests.
antirez,2011-12-01 14:40:49,https://api.github.com/repos/antirez/redis/git/commits/1576520cc0c2deda30288bea797fdacf322581ec,1576520cc0c2deda30288bea797fdacf322581ec,Document the redis-server cli options in the README
antirez,2011-12-01 12:50:36,https://api.github.com/repos/antirez/redis/git/commits/9268a5b5fd4f1824dad767c71188b90e44281551,9268a5b5fd4f1824dad767c71188b90e44281551,usage information updated to reflect the new way to pass options to Redis from the command line.
antirez,2011-12-01 12:45:19,https://api.github.com/repos/antirez/redis/git/commits/27ccb94a021c74acbdfead03f4bc7f6b9cb8a9ae,27ccb94a021c74acbdfead03f4bc7f6b9cb8a9ae,Even when loglevel is warning the server should log that it started.
antirez,2011-12-01 12:44:53,https://api.github.com/repos/antirez/redis/git/commits/67c6f0f630e1083f4fdad3efc12be691bf13dd55,67c6f0f630e1083f4fdad3efc12be691bf13dd55,Support for command line configuration options for redis-server.
antirez,2011-12-01 11:18:22,https://api.github.com/repos/antirez/redis/git/commits/4c8bd905a0751c19279c98d2dbd681a08297e38e,4c8bd905a0751c19279c98d2dbd681a08297e38e,-h is now alias for --help when running redis-server.
antirez,2011-12-01 11:15:44,https://api.github.com/repos/antirez/redis/git/commits/39ca1713d7400cf33e2cbc502478055a78cc03c1,39ca1713d7400cf33e2cbc502478055a78cc03c1,I like when main() is the last function in the file.
antirez,2011-11-30 14:35:16,https://api.github.com/repos/antirez/redis/git/commits/27acd7aa89c50a207f500fb0d0fb7194ae05812a,27acd7aa89c50a207f500fb0d0fb7194ae05812a,Replication bug fixed: now non blocking connect is also forced to follow the configured replication timeout.
antirez,2011-11-30 14:04:40,https://api.github.com/repos/antirez/redis/git/commits/c6f9ee88fa81468261d3cc771112e4ea9fd2e6da,c6f9ee88fa81468261d3cc771112e4ea9fd2e6da,default log level is now notice.
antirez,2011-11-29 15:29:12,https://api.github.com/repos/antirez/redis/git/commits/38b957d8ba22fa8760e88fd5500c9bdc2d6fd3da,38b957d8ba22fa8760e88fd5500c9bdc2d6fd3da,--quiet option implemented in the Redis test. Output improved a bit.
antirez,2011-11-25 16:08:25,https://api.github.com/repos/antirez/redis/git/commits/63fd13996d5ff19a642709aef78d655939cf8ced,63fd13996d5ff19a642709aef78d655939cf8ced,show initial querybuf bytes on querybuf overflow.
antirez,2011-11-28 10:04:03,https://api.github.com/repos/antirez/redis/git/commits/e7ef418ccd528f1546757392899272fd6176033e,e7ef418ccd528f1546757392899272fd6176033e,two new AOF related INFO fields that can be interesting information for debugging.
antirez,2011-11-28 09:35:30,https://api.github.com/repos/antirez/redis/git/commits/53a2af3941b0c6cd8057983ee92775916f1490ab,53a2af3941b0c6cd8057983ee92775916f1490ab,"still problems with the AOF race regression test, disabling it again for now"
antirez,2011-11-25 15:40:15,https://api.github.com/repos/antirez/redis/git/commits/86de66e32fa35541e7034841b78bafab77759c3c,86de66e32fa35541e7034841b78bafab77759c3c,jemalloc gitignore updated to jemalloc 2.2.5
antirez,2011-11-25 15:29:55,https://api.github.com/repos/antirez/redis/git/commits/2753acf1d642628d01de0d2a477c5d905fb761bc,2753acf1d642628d01de0d2a477c5d905fb761bc,"Merge pull request #208 from jbergstroem/jemalloc-2.2.5

Update to jemalloc 2.2.5"
antirez,2011-11-25 15:09:16,https://api.github.com/repos/antirez/redis/git/commits/3e0a975e07089609036daf70c319eea0599ce944,3e0a975e07089609036daf70c319eea0599ce944,log client protocol errors for log level >= verbose
antirez,2011-11-25 11:27:00,https://api.github.com/repos/antirez/redis/git/commits/674df1eef514169b5bea0a4d4e841aabee0209c9,674df1eef514169b5bea0a4d4e841aabee0209c9,Added regression tests for issue #209
antirez,2011-11-25 11:13:10,https://api.github.com/repos/antirez/redis/git/commits/07ac2daaaa6c844cc3171c8f01ad5ad7e786e2ea,07ac2daaaa6c844cc3171c8f01ad5ad7e786e2ea,"Merge pull request #209 from woowenjie/unstable

clean REDIS_DIRTY_CAS when discard Command runs. otherwise the next MULT..."
woowenjie,2011-11-25 02:34:05,https://api.github.com/repos/antirez/redis/git/commits/f371e721fae255137670208a62a69174734355ba,f371e721fae255137670208a62a69174734355ba,clean REDIS_DIRTY_CAS when discard Command runs. otherwise the next MULTI/EXEC may fail in the same RedisClient
antirez,2011-11-24 14:47:26,https://api.github.com/repos/antirez/redis/git/commits/fa5af017d95dfd56b92ebe14064f995b19e4907f,fa5af017d95dfd56b92ebe14064f995b19e4907f,better bug report info on crash
antirez,2011-11-24 14:04:42,https://api.github.com/repos/antirez/redis/git/commits/45e7a1ce00380ccf5f41080d69c655e120aacad6,45e7a1ce00380ccf5f41080d69c655e120aacad6,minor refactoring to networking.c adding a separated function to get a string representing the current state of all the connected clients.
antirez,2011-11-24 13:56:34,https://api.github.com/repos/antirez/redis/git/commits/2c74a9f9488774f1d7226afaf248493bf3aec4ed,2c74a9f9488774f1d7226afaf248493bf3aec4ed,last executed command in CLIENT LIST output.
jbergstroem,2011-11-23 20:36:25,https://api.github.com/repos/antirez/redis/git/commits/1d03c1c98a45ec569e017e4c0b8957c4ce00850b,1d03c1c98a45ec569e017e4c0b8957c4ce00850b,Update to jemalloc 2.2.5
antirez,2011-11-23 17:38:12,https://api.github.com/repos/antirez/redis/git/commits/3c95e7212ef5f0afb12fbd102c48bf4319af2f84,3c95e7212ef5f0afb12fbd102c48bf4319af2f84,new counter in INFO output: rejected_connections with number of dropped connections because of maxclients limit reached.
antirez,2011-11-22 13:27:53,https://api.github.com/repos/antirez/redis/git/commits/1b2962c61fd47730924489b689a39ffda6b88a80,1b2962c61fd47730924489b689a39ffda6b88a80,Merge remote-tracking branch 'origin/unstable' into unstable
antirez,2011-11-22 13:27:32,https://api.github.com/repos/antirez/redis/git/commits/1bcfa0f643d53e700d7398985ef236babf18d9bf,1bcfa0f643d53e700d7398985ef236babf18d9bf,"More fixes in the Redis command table, to make sure all the keys are detected by Redis Cluster."
antirez,2011-11-22 10:43:28,https://api.github.com/repos/antirez/redis/git/commits/4e5f63a60c36f58bdecedc43262e7f89e28656d7,4e5f63a60c36f58bdecedc43262e7f89e28656d7,"Merge pull request #199 from jerem/patch-1

Fixed a typo in comments."
antirez,2011-11-22 09:16:15,https://api.github.com/repos/antirez/redis/git/commits/39da5d1f2183eb6e7440bf742b558f974a5a4172,39da5d1f2183eb6e7440bf742b558f974a5a4172,Fixed command table for SETEX and PSETEX causing the expire time to be hashed by Redis cluster instead of the key.
antirez,2011-11-22 09:13:45,https://api.github.com/repos/antirez/redis/git/commits/7501c66f2e614fe997f5753f206b6034efed7029,7501c66f2e614fe997f5753f206b6034efed7029,comment describing the Redis command table enhanced
antirez,2011-11-21 15:19:30,https://api.github.com/repos/antirez/redis/git/commits/afd0f06b755ff53ce91d1dabeca959655590d3f0,afd0f06b755ff53ce91d1dabeca959655590d3f0,Fixed bug in getClientInfoString() that was not rendering the N (no flags) special flag correctly.
antirez,2011-11-21 15:17:51,https://api.github.com/repos/antirez/redis/git/commits/becf5fdb0c2df94db46c1f838638de892a347250,becf5fdb0c2df94db46c1f838638de892a347250,Close client connection and log the event when the client input buffer reaches 1GB.
antirez,2011-11-21 15:06:03,https://api.github.com/repos/antirez/redis/git/commits/6621b8ffa109b06a19822d865d4690a72cd9adbf,6621b8ffa109b06a19822d865d4690a72cd9adbf,show active events in client file descriptor in CLIENT LIST.
antirez,2011-11-21 15:05:29,https://api.github.com/repos/antirez/redis/git/commits/f14479c796fbf00c41ceefdcb4bec04df46f53ce,f14479c796fbf00c41ceefdcb4bec04df46f53ce,new ae.c API to get current events by file descriptor.
antirez,2011-11-21 14:54:49,https://api.github.com/repos/antirez/redis/git/commits/491c1c4e044ac18c25905d3aba5c1578d6da7502,491c1c4e044ac18c25905d3aba5c1578d6da7502,"added output list and buffer length, query buffer size, to CLIENT LIST output."
antirez,2011-11-21 14:35:54,https://api.github.com/repos/antirez/redis/git/commits/5e84f56ea6e6a8f92e6771d6cfafa03072d8cc2f,5e84f56ea6e6a8f92e6771d6cfafa03072d8cc2f,file .prerequisites added to gitignore
antirez,2011-11-21 14:34:32,https://api.github.com/repos/antirez/redis/git/commits/17d25a33e2c569df08a0accbef1f2bba23719823,17d25a33e2c569df08a0accbef1f2bba23719823,code generating the CLIENT LIST output refactored to have a function that is able to render a single client into a client info string.
antirez,2011-11-21 14:34:00,https://api.github.com/repos/antirez/redis/git/commits/08a879af6e5c32059ba4e0e091ef5a05dd2d62a4,08a879af6e5c32059ba4e0e091ef5a05dd2d62a4,Added sdscatsds() to sds.c/h
antirez,2011-11-21 09:55:52,https://api.github.com/repos/antirez/redis/git/commits/7e14a2080151f64a1540e26f00cecd8b9ae9cee3,7e14a2080151f64a1540e26f00cecd8b9ae9cee3,Fixed a comment typo in the command table.
jerem,2011-11-21 01:38:14,https://api.github.com/repos/antirez/redis/git/commits/92a157eae5553553b4259d984e47b99ab82a03d0,92a157eae5553553b4259d984e47b99ab82a03d0,Fixed a typo in comments.
antirez,2011-11-18 15:30:26,https://api.github.com/repos/antirez/redis/git/commits/40f3ff21b7366defa4ae84ba93f4833a468669a1,40f3ff21b7366defa4ae84ba93f4833a468669a1,Merge remote-tracking branch 'origin/unstable' into unstable
antirez,2011-11-18 15:29:22,https://api.github.com/repos/antirez/redis/git/commits/0b14e44118bf80e2e724081fcf2f3071788068d5,0b14e44118bf80e2e724081fcf2f3071788068d5,redis.conf updated to reflect the new scripting timeout semantics.
antirez,2011-11-18 14:53:47,https://api.github.com/repos/antirez/redis/git/commits/5c63922691ed8a821bd7f9f2837a8270f1154268,5c63922691ed8a821bd7f9f2837a8270f1154268,aof-race test reenabled now that port allocation of the test suite is smarter
antirez,2011-11-18 13:34:56,https://api.github.com/repos/antirez/redis/git/commits/794e6ce14ff85f00b0d3e86365e9cc45a90d3bcf,794e6ce14ff85f00b0d3e86365e9cc45a90d3bcf,"Merge pull request #173 from jasondavies/typo

Fix some minor typos."
antirez,2011-11-18 13:23:38,https://api.github.com/repos/antirez/redis/git/commits/e41677b4cf1452c276e5a02e791585a25e02f8f2,e41677b4cf1452c276e5a02e791585a25e02f8f2,prevent (more) commands from Lua scripts
antirez,2011-11-18 13:10:48,https://api.github.com/repos/antirez/redis/git/commits/4ab8695d537eff1dbc554bf3ab1896495311deda,4ab8695d537eff1dbc554bf3ab1896495311deda,New script timeout semantics and SCRIPT KILL implemented. SHUTDOWN NOSAVE and SHUTDOWN SAVE implemented.
antirez,2011-11-16 17:23:19,https://api.github.com/repos/antirez/redis/git/commits/5c85257b9615c050924f54b65b44ed54f49ac21d,5c85257b9615c050924f54b65b44ed54f49ac21d,"Merge pull request #193 from lamby/sparc-crash

Fix crash on SPARC due to improper alignment of allocated memory"
lamby,2011-11-16 17:21:16,https://api.github.com/repos/antirez/redis/git/commits/5ae979bf5798f5eaab56636034623d25bc70a941,5ae979bf5798f5eaab56636034623d25bc70a941,"Fix crash on SPARC due to improper alignment of allocated memory

I believe that you should be able to drop 'defined(__sun)' completely
from this clause, as Solaris on x86 hardware probably does not have
strict alignment requirements, but I don't have a way to test that.

Thanks to Jurij Smakov <jurij@wooyd.org>.

Signed-off-by: Chris Lamb <lamby@debian.org>"
pietern,2011-11-16 16:34:42,https://api.github.com/repos/antirez/redis/git/commits/42c6a5da3d4738597217494198f4d3ba9be1113d,42c6a5da3d4738597217494198f4d3ba9be1113d,Don't force rebuild when params didn't change
antirez,2011-11-16 13:40:50,https://api.github.com/repos/antirez/redis/git/commits/bf758397a1ea243aec67083b31dd3005092ad495,bf758397a1ea243aec67083b31dd3005092ad495,more valgrind (and other archs) friendly testing of floating number related features.
antirez,2011-11-16 12:30:43,https://api.github.com/repos/antirez/redis/git/commits/cd4aba36cdf5b9599e94029793dcfd13cd199577,cd4aba36cdf5b9599e94029793dcfd13cd199577,"valgrind handles floating point numbers differently for some reason, so using ""simpler"" numbers to make tests happy."
antirez,2011-11-16 09:29:42,https://api.github.com/repos/antirez/redis/git/commits/32adb531560004cfb3597cbe87234f80eacf0e25,32adb531560004cfb3597cbe87234f80eacf0e25,"Merge pull request #192 from pietern/makefile

Add separate clean/distclean targets to Makefile"
pietern,2011-11-15 21:28:57,https://api.github.com/repos/antirez/redis/git/commits/a63a3d4ddb992747020bd48f00c35158d7a447d6,a63a3d4ddb992747020bd48f00c35158d7a447d6,Update README on allocators
pietern,2011-11-15 21:09:31,https://api.github.com/repos/antirez/redis/git/commits/5bb2c88e9414df90f029b88a38a67f5fc1e36219,5bb2c88e9414df90f029b88a38a67f5fc1e36219,"Rebuild source when allocator changes

To do so, the Makefile stores the contents of the MALLOC environment
variable in a file named .make-malloc. When the contents of this file
and the MALLOC variable are not equal, it forces a rebuild of the Redis
source tree.

A side-effect of this change is that choosing an allocator can now be
done using the single MALLOC variable instead of USE_TCMALLOC,
USE_JEMALLOC and so forth. These variables continue to work for
backwards compatibility."
pietern,2011-11-15 20:40:49,https://api.github.com/repos/antirez/redis/git/commits/4b8a63941dc360a0d2dcba1ec182a006221e4a20,4b8a63941dc360a0d2dcba1ec182a006221e4a20,"Rebuild deps/ and src/ when ARCH changes

This change moves the build instructions for dependencies to a separate
Makefile in deps/. The ARCH environment variable is stored in a
.make-arch file in the same directory as the Makefile. The contents of
this file is read and compared to the current ARCH, and, on a mismatch
triggers rebuilding the entire source tree.

When file .make-arch exists and matches with ARCH from the environment,
the dependencies are assumed to already be built.

The new ""clean"" target only cleans the Redis source tree, not its
dependencies. To clear the dependencies as well, the ""distclean"" target
can be used."
pietern,2011-11-15 17:39:38,https://api.github.com/repos/antirez/redis/git/commits/321a0440c0dde3ea00a72da0751fd7beb8f9bb93,321a0440c0dde3ea00a72da0751fd7beb8f9bb93,Use CCLINK as last argument
pietern,2011-11-15 17:36:13,https://api.github.com/repos/antirez/redis/git/commits/61c0e893aad4ba476aa9e001a3df10844972b901,61c0e893aad4ba476aa9e001a3df10844972b901,CCLINK already includes ALLOC_LINK
antirez,2011-11-15 14:36:53,https://api.github.com/repos/antirez/redis/git/commits/7b81e5a16ca577b7aa10dd0398cce4ba9cdf0842,7b81e5a16ca577b7aa10dd0398cce4ba9cdf0842,"Merge pull request #181 from redsquirrel/unstable

Fixing inject: it was failing when there was 1 or >2 sources"
antirez,2011-11-15 14:26:10,https://api.github.com/repos/antirez/redis/git/commits/3c5680ed9d6ab8435d0641a4428334e434655d8d,3c5680ed9d6ab8435d0641a4428334e434655d8d,HINCRBYFLOAT tests
antirez,2011-11-15 14:09:39,https://api.github.com/repos/antirez/redis/git/commits/68bfe993c8aa0d43bb2a5cf02b5d325effb67b0c,68bfe993c8aa0d43bb2a5cf02b5d325effb67b0c,HINCRBYFLOAT implemented
antirez,2011-11-14 14:59:56,https://api.github.com/repos/antirez/redis/git/commits/d4a3cfed9c95e0ca5f8bcc771f8844ad17895c69,d4a3cfed9c95e0ca5f8bcc771f8844ad17895c69,Merge branch 'unstable' into incrbyfloat
antirez,2011-11-14 14:39:55,https://api.github.com/repos/antirez/redis/git/commits/70023978fd82d00740e7b38c7ad17f3679a27c84,70023978fd82d00740e7b38c7ad17f3679a27c84,test for the new more strict behavior about number parsing
antirez,2011-11-14 14:37:13,https://api.github.com/repos/antirez/redis/git/commits/c9df799b2ce424ed9d35674ac7a7fe57bd1e34e0,c9df799b2ce424ed9d35674ac7a7fe57bd1e34e0,INCRBYFLOAT tests
antirez,2011-11-14 14:34:44,https://api.github.com/repos/antirez/redis/git/commits/d93f9a8644821222fedbb32c522624bfa98b17df,d93f9a8644821222fedbb32c522624bfa98b17df,string to number API is now more strict not accepting spaces before or after the number. A few tests converted to match the new error messages using the word float instead of double.
antirez,2011-11-14 09:15:13,https://api.github.com/repos/antirez/redis/git/commits/5244d6e54ec08666f953124739a498d0537a2bf9,5244d6e54ec08666f953124739a498d0537a2bf9,rewrite INCRBYFLOAT as SETs for AOF/replication
antirez,2011-11-12 18:27:35,https://api.github.com/repos/antirez/redis/git/commits/5574b53eae1743cca9eed5a9dd25bf418c974701,5574b53eae1743cca9eed5a9dd25bf418c974701,INCRBYFLOAT implementation
antirez,2011-11-12 10:27:38,https://api.github.com/repos/antirez/redis/git/commits/762eea07cac57eecb89bf5a079139cd664f4b9d8,762eea07cac57eecb89bf5a079139cd664f4b9d8,Added test to make sure Redis evicts expired keys actively (and not just in a lazy fashion).
antirez,2011-11-12 00:04:27,https://api.github.com/repos/antirez/redis/git/commits/4be855e757b800a9f848823fcee8b7faf3e1eba0,4be855e757b800a9f848823fcee8b7faf3e1eba0,"Fixed issues with expire introduced with latest millisecond resolution feature. Many time_t were not converted to long long, and one time() call was not replaced with mstime()."
antirez,2011-11-11 16:16:03,https://api.github.com/repos/antirez/redis/git/commits/3570629f9006687177b86f279ea9a6b2e8690e67,3570629f9006687177b86f279ea9a6b2e8690e67,set default client timeout to zero inside redis.h as well
antirez,2011-11-11 14:11:50,https://api.github.com/repos/antirez/redis/git/commits/64c7499eb88040c26aba264ab52756fd764d8fa4,64c7499eb88040c26aba264ab52756fd764d8fa4,"new tests for EXPIRE family functions, new millisecond precision, and new millisecond argument variants."
antirez,2011-11-10 16:52:02,https://api.github.com/repos/antirez/redis/git/commits/12d293ca6edab6cc94cbd90840c629a535a12aef,12d293ca6edab6cc94cbd90840c629a535a12aef,high resolution expires API modified to use separated commands. AOF transation to PEXPIREAT of all the expire-style commands fixed.
redsquirrel,2011-11-10 01:06:12,https://api.github.com/repos/antirez/redis/git/commits/57f8021cb212eb8bed35ea13329acacf46520e99,57f8021cb212eb8bed35ea13329acacf46520e99,Fixing inject: it was failing when there was 1 or >2 sources
antirez,2011-11-09 20:59:27,https://api.github.com/repos/antirez/redis/git/commits/dab5332f95bd2f4fabf8e746b0998cd5bc37e448,dab5332f95bd2f4fabf8e746b0998cd5bc37e448,Fixed a few typos
antirez,2011-11-09 17:47:48,https://api.github.com/repos/antirez/redis/git/commits/bdbdb02edb5aff16c3cbfb0fba31152d69e30160,bdbdb02edb5aff16c3cbfb0fba31152d69e30160,Fixed bug breaking rdbSaveMillisecondTime() in 32 bit systems. Thanks to @anydot (Přemysl Hrubý)
antirez,2011-11-09 17:05:35,https://api.github.com/repos/antirez/redis/git/commits/52d46855d90bfddb3e03d957c48101d123e4dfe7,52d46855d90bfddb3e03d957c48101d123e4dfe7,"TTL, EXPIRE and EXPIREAT now support the milliseconds input/output form"
antirez,2011-11-09 16:20:14,https://api.github.com/repos/antirez/redis/git/commits/b0b74486e14bf93bb8800d0194220d74f5c615ce,b0b74486e14bf93bb8800d0194220d74f5c615ce,"use ""EXPIREAT ... ms"" form when rewriting the AOF"
antirez,2011-11-09 15:51:19,https://api.github.com/repos/antirez/redis/git/commits/7dcc10b65e0075fccc90d93bac5b078baefdbb07,7dcc10b65e0075fccc90d93bac5b078baefdbb07,"Initial support for key expire times with millisecond resolution. RDB version is now 3, new opcoded added for high resolution times. Redis is still able to correctly load RDB version 2. Tests passing but still a work in progress. API to specify milliseconds expires still missing, but the precision of normal expires is now already improved and working."
antirez,2011-11-09 12:39:59,https://api.github.com/repos/antirez/redis/git/commits/14ed10d9573b57c43011c2af2f5abb771abc7bfb,14ed10d9573b57c43011c2af2f5abb771abc7bfb,dict set/get macros for integers fixed.
antirez,2011-11-08 23:03:03,https://api.github.com/repos/antirez/redis/git/commits/2c2b20853724d86eaa6c51308f11645cc576dc1c,2c2b20853724d86eaa6c51308f11645cc576dc1c,added mstime() to get UNIX time in milliseconds.
antirez,2011-11-08 22:59:46,https://api.github.com/repos/antirez/redis/git/commits/6c578b764a65e5047851c1654131a5e45722f308,6c578b764a65e5047851c1654131a5e45722f308,"dict.c: added macros to get signed/unsigned integer values from hash
entry. Field name of hash entry union modified for clarity."
antirez,2011-11-08 20:00:52,https://api.github.com/repos/antirez/redis/git/commits/b28d0461b47a8c607aabe437bdca703ee7619014,b28d0461b47a8c607aabe437bdca703ee7619014,"32bit build fixed, broken by a previous commit fixing build on Solaris"
antirez,2011-11-08 18:41:29,https://api.github.com/repos/antirez/redis/git/commits/aa9a61ccd7cc1ffa1441ef74edd9d51954fc7896,aa9a61ccd7cc1ffa1441ef74edd9d51954fc7896,dict.c: added macros in dict.h to set signed and unsigned 64 bit values directly inside the hash entry without using additional memory.
antirez,2011-11-08 16:07:55,https://api.github.com/repos/antirez/redis/git/commits/c0ba9ebe13865189a3b21f7be8a910e349b59fda,c0ba9ebe13865189a3b21f7be8a910e349b59fda,dict.c API names modified to be more coincise and consistent.
antirez,2011-11-08 15:57:20,https://api.github.com/repos/antirez/redis/git/commits/71a50956b1ff6b45b8265afa8e7e0264c465cec8,71a50956b1ff6b45b8265afa8e7e0264c465cec8,"dict.c: added two lower level methods for directly manipulating hash entries. This is useful in order to set 64 bit integers as values directly inside the hash entry (in order to save memory), without casting, and even in 32 bit builds."
antirez,2011-11-08 15:15:08,https://api.github.com/repos/antirez/redis/git/commits/66d8818cb751ab23e70e82fc5ab1017399f49109,66d8818cb751ab23e70e82fc5ab1017399f49109,Merge branch 'unstable' into ttlres
antirez,2011-11-08 10:26:06,https://api.github.com/repos/antirez/redis/git/commits/b90314588fc4863f2fdb6bec0a46d48385c66994,b90314588fc4863f2fdb6bec0a46d48385c66994,useless double if removed.
antirez,2011-11-08 10:24:12,https://api.github.com/repos/antirez/redis/git/commits/b0a2e34059b4b442a25fc7e25afde39706ad9034,b0a2e34059b4b442a25fc7e25afde39706ad9034,yet another #if REDIS_MBULK_BIG_ARG removed.
antirez,2011-11-08 10:22:40,https://api.github.com/repos/antirez/redis/git/commits/53272781d0b7f664fc6e3fcd5c9032dd09103bbc,53272781d0b7f664fc6e3fcd5c9032dd09103bbc,"Multi bulk optimization for creating big objects without copying data is no longer optional, #ifdefs removed. Also debugging messages removed."
antirez,2011-11-08 09:59:35,https://api.github.com/repos/antirez/redis/git/commits/65330badb97206cd7cf0973d3f2267b0a523c05e,65330badb97206cd7cf0973d3f2267b0a523c05e,"hiredis/redis changes for speed with big payloads: read buffer size set
to 16k, request buffer size is no longer destroyed when emtpy and large
(better fix needed). Redis clients static output buffer set to 16k as
well."
antirez,2011-11-07 16:18:50,https://api.github.com/repos/antirez/redis/git/commits/d5a80182870140ff338c9ad9a35d3698f3911bc1,d5a80182870140ff338c9ad9a35d3698f3911bc1,"speed-regression.tcl: command line options to select tests, data size, and number of requests."
antirez,2011-11-07 15:52:55,https://api.github.com/repos/antirez/redis/git/commits/55758a5fab86390b37b584c3ee6b6d80bb98c320,55758a5fab86390b37b584c3ee6b6d80bb98c320,"speed-regression.tcl: move tests, data size, requests in global vars that will be changed via command line options."
antirez,2011-11-07 15:00:15,https://api.github.com/repos/antirez/redis/git/commits/85bc9b06b747939dcf4151a9a820957d2b37168b,85bc9b06b747939dcf4151a9a820957d2b37168b,speed-regression.tcl script: killing previously tested instance fixed. Don't run if there is already an instance running in the same port.
antirez,2011-11-07 14:35:01,https://api.github.com/repos/antirez/redis/git/commits/84c6bdfcd0cd12f741bbb117648d057c26c85b89,84c6bdfcd0cd12f741bbb117648d057c26c85b89,speed-regression.tcl script: obtain test names dynamically.
antirez,2011-11-07 10:29:37,https://api.github.com/repos/antirez/redis/git/commits/d9747b496e06e6647cd9d4dbc4e8b89eda5f2ccc,d9747b496e06e6647cd9d4dbc4e8b89eda5f2ccc,redis-benchmark: ability to run selected tests. Better help with examples.
antirez,2011-11-04 19:45:46,https://api.github.com/repos/antirez/redis/git/commits/9f080a01fac2353a1c3a855729cd337ef4384c5a,9f080a01fac2353a1c3a855729cd337ef4384c5a,first version of the speed regression test
antirez,2011-11-04 13:49:24,https://api.github.com/repos/antirez/redis/git/commits/7b86f5e6d5ecdafc3e47f640ac99614ee2295c06,7b86f5e6d5ecdafc3e47f640ac99614ee2295c06,csv output for redis-benchmark
antirez,2011-11-04 10:20:19,https://api.github.com/repos/antirez/redis/git/commits/410dfe90b2cc62cbbeddb7f7617e9946dc1eab98,410dfe90b2cc62cbbeddb7f7617e9946dc1eab98,PING / MSET benchmarks enabled again.
antirez,2011-11-04 10:18:15,https://api.github.com/repos/antirez/redis/git/commits/ca908473e8298e617d099a57ae1fb8db4bccdfa9,ca908473e8298e617d099a57ae1fb8db4bccdfa9,A comment moved a few lines for clarity.
antirez,2011-11-04 10:16:11,https://api.github.com/repos/antirez/redis/git/commits/94d490b9f68a1972a3c89cf0ffc801b64ec2083e,94d490b9f68a1972a3c89cf0ffc801b64ec2083e,Added a define to set the size threshold to enable the multi bulk parsing big objects optimization.
antirez,2011-11-03 14:53:40,https://api.github.com/repos/antirez/redis/git/commits/826b5beb9c04fef0d9942b8846989732b0d03ead,826b5beb9c04fef0d9942b8846989732b0d03ead,further optimizations for the multi bulk protocol parsing code when big objects are transmitted to Redis.
antirez,2011-11-02 16:30:19,https://api.github.com/repos/antirez/redis/git/commits/921709557253dae2db676c2feb933386e4066494,921709557253dae2db676c2feb933386e4066494,optimized object creation in multi-bulk protocol parsing
antirez,2011-11-02 15:52:45,https://api.github.com/repos/antirez/redis/git/commits/b8d743e1813abbf3d55e92e9945dc47da3ef7836,b8d743e1813abbf3d55e92e9945dc47da3ef7836,sdsIncrLen() / sdsMakeRoomFor() used to avoid copying to intermediate buffer while reading the client query.
antirez,2011-11-02 15:52:10,https://api.github.com/repos/antirez/redis/git/commits/a54806ac6af77940070a90a44b603bec46cfe599,a54806ac6af77940070a90a44b603bec46cfe599,testhelp.h now exits with retcode 1 on failed tests.
antirez,2011-11-02 15:51:33,https://api.github.com/repos/antirez/redis/git/commits/dd5fbedf7bb9ac02d14aa9ecaeafb47e48b9a587,dd5fbedf7bb9ac02d14aa9ecaeafb47e48b9a587,I/O buffer length enlarged
antirez,2011-11-02 15:50:59,https://api.github.com/repos/antirez/redis/git/commits/d0b2a9b2234afe82d6ed42a8c45f8221ede25d8f,d0b2a9b2234afe82d6ed42a8c45f8221ede25d8f,sdsMakeRoomFor() exposed as public API. sdsIncrLen() added. Both the changes make it possible to copy stuff from a system call to an sds buffer without the need of an additional buffer and copying overhead.
antirez,2011-11-02 15:09:14,https://api.github.com/repos/antirez/redis/git/commits/35267245948fef5561a921943c1eb118cfb704b0,35267245948fef5561a921943c1eb118cfb704b0,added a comment to sdsMakeRoomFor() to make it clear what the function actually does.
antirez,2011-11-02 14:28:45,https://api.github.com/repos/antirez/redis/git/commits/6a7841eb099e8f92bb2c321e87e2b1f4724ddaed,6a7841eb099e8f92bb2c321e87e2b1f4724ddaed,added an union in the dict.h structure to store 64 bit integers directly into hash table entries.
jasondavies,2011-11-01 19:57:51,https://api.github.com/repos/antirez/redis/git/commits/b91cbf66bb527fbc7eef8079e9153fa5357186e2,b91cbf66bb527fbc7eef8079e9153fa5357186e2,Fix minor typos.
antirez,2011-10-31 15:09:07,https://api.github.com/repos/antirez/redis/git/commits/ef23f3ac920c4cc1f403a2765455e455b03101bd,ef23f3ac920c4cc1f403a2765455e455b03101bd,Script max execution time test disabled for now since it is no longer enforced.
antirez,2011-10-31 14:47:12,https://api.github.com/repos/antirez/redis/git/commits/d569f39a77d68af007de0777d0aa7e4d66673ae7,d569f39a77d68af007de0777d0aa7e4d66673ae7,removed the vmpointer structure that is no longer user in Redis >= 2.5.x
antirez,2011-10-31 14:43:09,https://api.github.com/repos/antirez/redis/git/commits/aba4adb7dcf202246b2663e34b18c9968003509c,aba4adb7dcf202246b2663e34b18c9968003509c,"use timeout 0 by default, as this is a common source of problems."
antirez,2011-10-31 10:21:09,https://api.github.com/repos/antirez/redis/git/commits/404cd6450d8b7cd8fe905df831cd2755030f7aec,404cd6450d8b7cd8fe905df831cd2755030f7aec,"Merge pull request #170 from bnoordhuis/fix-sunos-build

build: fix sunos build, compile lua with __C99FEATURES__=1"
antirez,2011-10-31 10:17:21,https://api.github.com/repos/antirez/redis/git/commits/85ccd576328355462a030392951fa9256589b7f6,85ccd576328355462a030392951fa9256589b7f6,added more clarifications in redis.conf about ther right value to set as replication timeout.
antirez,2011-10-31 10:14:24,https://api.github.com/repos/antirez/redis/git/commits/aeecbdfae3e410959b396ab72d652673aea5c59a,aeecbdfae3e410959b396ab72d652673aea5c59a,1fe4cd5
antirez,2011-10-31 10:13:28,https://api.github.com/repos/antirez/redis/git/commits/8996bf77204b6084796608ebad3b1688212d8bfc,8996bf77204b6084796608ebad3b1688212d8bfc,7c6da73
antirez,2011-10-31 09:48:41,https://api.github.com/repos/antirez/redis/git/commits/58732c23d53d6fc652668a516556ea182b0ed0f8,58732c23d53d6fc652668a516556ea182b0ed0f8,"maxclients configuration is now implemented dealing with the actual process rlimits. Setting maxclients to 0 no longer makes sense and is now invalid, the new default is 10000.
See issue #162 for more information."
antirez,2011-10-31 08:57:06,https://api.github.com/repos/antirez/redis/git/commits/1eceb85ebc127480ffe3d80be00e09472fa684ec,1eceb85ebc127480ffe3d80be00e09472fa684ec,It is now possible to disable password authentication via CONFIG SET. Thanks to Jan Oberst. This closes issue #171.
bnoordhuis,2011-10-30 03:20:00,https://api.github.com/repos/antirez/redis/git/commits/b83e95830f45eb5e3b4e7c0a997d611f75f758b8,b83e95830f45eb5e3b4e7c0a997d611f75f758b8,"build: fix sunos build, compile lua with __C99FEATURES__=1"
antirez,2011-10-28 15:43:04,https://api.github.com/repos/antirez/redis/git/commits/db6a2e7f78f99503eaa2fcc0574a16eea570637a,db6a2e7f78f99503eaa2fcc0574a16eea570637a,Fixed a memory leak in redis-cli.c
antirez,2011-10-28 15:31:40,https://api.github.com/repos/antirez/redis/git/commits/e1cf460cf1b8b5ee0446bc305aa76325f8762cd3,e1cf460cf1b8b5ee0446bc305aa76325f8762cd3,sds.c single quotes support
antirez,2011-10-27 18:56:12,https://api.github.com/repos/antirez/redis/git/commits/d8ba159b6cac421e97535fc40cfc8846d073940d,d8ba159b6cac421e97535fc40cfc8846d073940d,use the more generic -BUSY error for idle scripts
antirez,2011-10-27 12:49:10,https://api.github.com/repos/antirez/redis/git/commits/115e3ff39e8cbf2f2e044fbd6c65c2e6602c537f,115e3ff39e8cbf2f2e044fbd6c65c2e6602c537f,"If a Lua script executes for more time than the max time specified in the configuration Redis will log a warning, and will start accepting queries (re-entering the event loop), returning -SLOWSCRIPT error for all the commands but SHUTDOWN that remains callable."
florean,2011-10-21 01:20:58,https://api.github.com/repos/antirez/redis/git/commits/bb48c5fa678b182deb59a59beb293f6c45060ca1,bb48c5fa678b182deb59a59beb293f6c45060ca1,Set errno to 0 before calling strtol.
antirez,2011-10-26 10:53:30,https://api.github.com/repos/antirez/redis/git/commits/b508aeb994ffebd93fa5c3238057dfa2101d0424,b508aeb994ffebd93fa5c3238057dfa2101d0424,"Clear the AOF rewrite scheduled flag once an AOF rewrite is triggered. Fix for issue #161, probably fixing 159 as well."
antirez,2011-10-25 17:54:10,https://api.github.com/repos/antirez/redis/git/commits/e089e61019a4d59eacb6340f0c58dc7bf3b61fd3,e089e61019a4d59eacb6340f0c58dc7bf3b61fd3,Don't timeout scripts if the instance is a slave.
antirez,2011-10-25 12:46:15,https://api.github.com/repos/antirez/redis/git/commits/e5abf6ef19ec0d4c583608c19aaaf97fc21b0298,e5abf6ef19ec0d4c583608c19aaaf97fc21b0298,SCRIPT LOAD now returns the SHA1 instead of +OK
antirez,2011-10-25 10:10:15,https://api.github.com/repos/antirez/redis/git/commits/8cb8d417b1bc8de33da70b1ae1d5d16b7ada3eba,8cb8d417b1bc8de33da70b1ae1d5d16b7ada3eba,Lau scripts default max execution time set to 5 seconds.
antirez,2011-10-25 09:19:15,https://api.github.com/repos/antirez/redis/git/commits/e8c993f0fb0cfc29d953b710fd807ea8eb392b89,e8c993f0fb0cfc29d953b710fd807ea8eb392b89,Fixes for the scripting refactoring and new commands. Tests for the new features.
antirez,2011-10-25 08:25:59,https://api.github.com/repos/antirez/redis/git/commits/a9b07ac459b435d0ea7ad37da933511f83e05507,a9b07ac459b435d0ea7ad37da933511f83e05507,"SCRIPT LOAD implemented, scripting eval command refactoring."
antirez,2011-10-24 20:47:00,https://api.github.com/repos/antirez/redis/git/commits/070e39454dbe8bcd164e04f7f83da047bd367e22,070e39454dbe8bcd164e04f7f83da047bd367e22,SCRIPT command for introspection and control of the scripting environment.
antirez,2011-10-23 10:28:31,https://api.github.com/repos/antirez/redis/git/commits/ca1f766a550bf204f4a618c374649bb3f182030c,ca1f766a550bf204f4a618c374649bb3f182030c,Better installation info inside README file.
antirez,2011-10-23 10:16:07,https://api.github.com/repos/antirez/redis/git/commits/a84e7e46ec2de8bd24fcef263dcb0fa2024eb415,a84e7e46ec2de8bd24fcef263dcb0fa2024eb415,removed a few entries for gitignore
antirez,2011-10-23 08:57:01,https://api.github.com/repos/antirez/redis/git/commits/f013f40003e5709203e31dcba4485f8342e2cccc,f013f40003e5709203e31dcba4485f8342e2cccc,Fixed a few warnings compiling on Linux.
antirez,2011-10-23 08:42:16,https://api.github.com/repos/antirez/redis/git/commits/9e6a9f30ea72445740a26599d50ed63a14a59f7f,9e6a9f30ea72445740a26599d50ed63a14a59f7f,"A past commit removed the inclusion of redis.h from rdb.c, completely breaking 32 bit builds under Linux."
antirez,2011-10-20 14:02:23,https://api.github.com/repos/antirez/redis/git/commits/9ed32ba0831b5cabdb0c1c26fdafe96e8b485459,9ed32ba0831b5cabdb0c1c26fdafe96e8b485459,Redis.call is now split into two variants of the same function. Redis.call will raise an error by default. Redis.pcall will return the error object instead.
antirez,2011-10-20 09:18:10,https://api.github.com/repos/antirez/redis/git/commits/2f5abbfeb7fa928399d86889c14ebf8064706869,2f5abbfeb7fa928399d86889c14ebf8064706869,Merge branch 'unstable' of github.com:/antirez/redis into unstable
antirez,2011-10-20 09:17:30,https://api.github.com/repos/antirez/redis/git/commits/73fac227a0dd3a7d25e29b4718f8588f55db07d6,73fac227a0dd3a7d25e29b4718f8588f55db07d6,use signalModifiedKey to set the key as dirty in the context of WATCH for both MIGRATE and RESTORE.
antirez,2011-10-20 07:53:22,https://api.github.com/repos/antirez/redis/git/commits/3a02bd96e757f2bb5659adfda1d57ea542ec49cf,3a02bd96e757f2bb5659adfda1d57ea542ec49cf,"Merge pull request #147 from janoberst/unstable

Cleaned up redis root directory a tiny bit and changed links to github issues"
antirez,2011-10-19 14:57:54,https://api.github.com/repos/antirez/redis/git/commits/34296ae890178926347f0b8b47f66d96a541f1c3,34296ae890178926347f0b8b47f66d96a541f1c3,Lua cjson include paths now use the local includes.
antirez,2011-10-19 14:42:35,https://api.github.com/repos/antirez/redis/git/commits/8f2af26c2c8ddcb78a801f04ac1a29a7411b5bb4,8f2af26c2c8ddcb78a801f04ac1a29a7411b5bb4,Merge remote-tracking branch 'origin/unstable' into unstable
antirez,2011-10-19 14:42:10,https://api.github.com/repos/antirez/redis/git/commits/15108778d5dde69edd61dfe11372b071339ad108,15108778d5dde69edd61dfe11372b071339ad108,"JSON support for Lua scripting, based on work from @lp, thanks!. We are using the good and fast cjson by Mark Pulford."
janoberst,2011-10-18 18:28:23,https://api.github.com/repos/antirez/redis/git/commits/61e02c4f6c1b5f4119bac41f9198240b035c26b1,61e02c4f6c1b5f4119bac41f9198240b035c26b1,Switched issues URL to Github in BUGS
janoberst,2011-10-18 18:28:07,https://api.github.com/repos/antirez/redis/git/commits/3fb1c8a0bc4206fabf78a0d8d349906c87446858,3fb1c8a0bc4206fabf78a0d8d349906c87446858,Actually let's just cpy over the README from stable. Missed the updated version there.
janoberst,2011-10-18 18:14:16,https://api.github.com/repos/antirez/redis/git/commits/e491a1a1a8aadb1a5715576f97a63396b687f8a8,e491a1a1a8aadb1a5715576f97a63396b687f8a8,Cleaned up redis root directory and changed links for redis.io and github issues and pull requests
antirez,2011-10-18 12:13:25,https://api.github.com/repos/antirez/redis/git/commits/d0dc3d82042402816f640576a1e203cb7da86206,d0dc3d82042402816f640576a1e203cb7da86206,"Merge pull request #146 from smly/fixed-redis-check-dump

Memory leak in redis-check-dump"
smly,2011-10-18 11:18:26,https://api.github.com/repos/antirez/redis/git/commits/046f70f758a263052a044f78e808a5ebf2bc24ca,046f70f758a263052a044f78e808a5ebf2bc24ca,Fixed a small memory leak I found with valgrind
antirez,2011-10-18 09:09:32,https://api.github.com/repos/antirez/redis/git/commits/76e772f39a971e14e9c8cd077b68ad8ed8cc7f97,76e772f39a971e14e9c8cd077b68ad8ed8cc7f97,Return from syncWithMaster() ASAP if the event fired but the instance is no longer a slave. This should fix Issue #145.
antirez,2011-10-17 15:35:23,https://api.github.com/repos/antirez/redis/git/commits/6856c7b4d64f6afc00249128fc952c575d8c84bf,6856c7b4d64f6afc00249128fc952c575d8c84bf,First implementation of the ASKING command. Semantics still to verify.
antirez,2011-10-17 14:44:08,https://api.github.com/repos/antirez/redis/git/commits/e0aab1fc79a89bf0c6ed639e7823b27e73acd1db,e0aab1fc79a89bf0c6ed639e7823b27e73acd1db,MIGRATE +NOKEY error was missing the final CRLF causing a protocol error.
antirez,2011-10-17 14:39:05,https://api.github.com/repos/antirez/redis/git/commits/bfbc16ae8321603ce527012f6c33fd7619ad9b09,bfbc16ae8321603ce527012f6c33fd7619ad9b09,Fixed a typo causing segfault on MIGRATE
antirez,2011-10-17 08:40:11,https://api.github.com/repos/antirez/redis/git/commits/c0875a77a14d417f76b4419127733929ace587ee,c0875a77a14d417f76b4419127733929ace587ee,Regression test for issue #142 added
antirez,2011-10-17 08:28:57,https://api.github.com/repos/antirez/redis/git/commits/13cd1515f9030ed4f8ebd0b54fa90243858e244b,13cd1515f9030ed4f8ebd0b54fa90243858e244b,"FLUSHALL now prevents rdbSave() from resetting the dirty counter, so that the command will get replicated and put inside the AOF. This fixes issue #142"
antirez,2011-10-17 08:25:35,https://api.github.com/repos/antirez/redis/git/commits/42a6fcd6c59f7a51d0bda011e55e50960a28cfb5,42a6fcd6c59f7a51d0bda011e55e50960a28cfb5,FLUSHALL will only perform a blocking SAVE if RDB persistence is configured.
antirez,2011-10-14 14:59:32,https://api.github.com/repos/antirez/redis/git/commits/6d61e5bf5b3bdbdfa3032b2009120c3cceb64607,6d61e5bf5b3bdbdfa3032b2009120c3cceb64607,"Exit with Fatal error at startup if the RDB file signature or version is wrong.
Ref: issue #103"
antirez,2011-10-14 14:52:11,https://api.github.com/repos/antirez/redis/git/commits/2e63cfe20d0a01c1afb6c6239c3ed447aec86fac,2e63cfe20d0a01c1afb6c6239c3ed447aec86fac,redis-check-dump: RDB version 2 now supported.
antirez,2011-10-14 12:30:41,https://api.github.com/repos/antirez/redis/git/commits/80ad7189e8de69ce5f7950dcdea4789be7db7014,80ad7189e8de69ce5f7950dcdea4789be7db7014,More informative error when DEBUG RELOAD fails.
antirez,2011-10-13 13:16:03,https://api.github.com/repos/antirez/redis/git/commits/dd9ad570622cc7a164173d4cb6103655482a9b9f,dd9ad570622cc7a164173d4cb6103655482a9b9f,redis-trib: fix for a slot allocation bug.
antirez,2011-10-13 12:51:29,https://api.github.com/repos/antirez/redis/git/commits/2b9ce0192ef93a6b01009d381202833e10dc7e4a,2b9ce0192ef93a6b01009d381202833e10dc7e4a,small comment added
antirez,2011-10-10 20:21:17,https://api.github.com/repos/antirez/redis/git/commits/ab52d1f4a8f3173622e0758d6f82f1aff0812b93,ab52d1f4a8f3173622e0758d6f82f1aff0812b93,Fix for issue #132. Now AUTH raises an error if no server password is configured.
antirez,2011-10-10 20:05:16,https://api.github.com/repos/antirez/redis/git/commits/70cb03e172a892e75542d895932b320ee7bf5167,70cb03e172a892e75542d895932b320ee7bf5167,"Merge pull request #126 from florean/unstable

Unlink Unix socket file on shutdown"
florean,2011-10-10 18:21:15,https://api.github.com/repos/antirez/redis/git/commits/85238765033e2fa89b1879383421d5a8aafff17f,85238765033e2fa89b1879383421d5a8aafff17f,"Added a config directive for a Unix socket mask

Added a configuration directive to allow a user to specify the
permissions to be granted to the Unix socket file.  I followed
the format Pieter and Salvatore discusses in issue #85 (
https://github.com/antirez/redis/issues/85)."
antirez,2011-10-10 13:29:36,https://api.github.com/repos/antirez/redis/git/commits/d83eda48e9566a438048c10add8448e0fe65b534,d83eda48e9566a438048c10add8448e0fe65b534,Issue #131. stime/utime reported in INFO was inverted. Fixed thanks to Didier Spezia.
antirez,2011-10-10 13:21:19,https://api.github.com/repos/antirez/redis/git/commits/4ab18a3331a870d9617ec5fc763f227cf4110283,4ab18a3331a870d9617ec5fc763f227cf4110283,Fix for bug #128 about the RENAME command.
antirez,2011-10-10 10:01:13,https://api.github.com/repos/antirez/redis/git/commits/02a3e582582c381f14bc23aa9bed4b4645a2f118,02a3e582582c381f14bc23aa9bed4b4645a2f118,"Added two new tests for RENAME, currently both will fail because of bug #128."
florean,2011-10-09 07:46:03,https://api.github.com/repos/antirez/redis/git/commits/56209f720ae602cf5de70a35573625cff9ef0e2c,56209f720ae602cf5de70a35573625cff9ef0e2c,Unlink Unix socket file on shutdown
antirez,2011-10-08 08:58:57,https://api.github.com/repos/antirez/redis/git/commits/ff15dba09390b8b0a864e57fb0fdd84b20d4193d,ff15dba09390b8b0a864e57fb0fdd84b20d4193d,"not used parameter for redisLog() removed. Error message grammar fixed.
Thanks to @ardsrk."
antirez,2011-10-07 14:34:16,https://api.github.com/repos/antirez/redis/git/commits/d38ef520852af3268dde9d254f04a000856f9b3c,d38ef520852af3268dde9d254f04a000856f9b3c,Redis Cluster: process node to node CLUSTERMSG_TYPE_PUBLISH messages and send it to the local clients.
antirez,2011-10-07 13:37:34,https://api.github.com/repos/antirez/redis/git/commits/c563ce463b169c768ced856167d3ee09652207b1,c563ce463b169c768ced856167d3ee09652207b1,propagate PUBLISH messages using the redis cluster nodes bus. Still need to process the incoming packets of that type. Work in progress.
antirez,2011-10-05 17:55:33,https://api.github.com/repos/antirez/redis/git/commits/623131d40895316970ccc36f35c0f56c1c23d55b,623131d40895316970ccc36f35c0f56c1c23d55b,"Totally hackish and dirty, but working, support for Redis Cluster in redis-cli"
antirez,2011-10-05 15:40:02,https://api.github.com/repos/antirez/redis/git/commits/9465d83efd8afa5f6c99486e0b9a232b6f25d31b,9465d83efd8afa5f6c99486e0b9a232b6f25d31b,"A node can populate a slot if a message from a trusted slot is received claiming ownership of this slot, that is currently empty or served by a node in FAIL state. However this feature was broken since calling clusterAddSlot() was not enough as the slot bit is already set in the node that pong us. We need to directly alter the table. This commit fixes the issue."
antirez,2011-10-05 14:08:54,https://api.github.com/repos/antirez/redis/git/commits/dbf6bca4315db7cf03ae0d33a25c515b0b0849c8,dbf6bca4315db7cf03ae0d33a25c515b0b0849c8,Merge remote-tracking branch 'origin/unstable' into unstable
antirez,2011-10-05 14:08:35,https://api.github.com/repos/antirez/redis/git/commits/2aa26d2a636efd68b58c1ca1f972da6b03ef0226,2aa26d2a636efd68b58c1ca1f972da6b03ef0226,CONFIG SET/GET support for loglevel
antirez,2011-10-05 14:02:45,https://api.github.com/repos/antirez/redis/git/commits/ad7a86fbe092a228d223045cd114b314302983d8,ad7a86fbe092a228d223045cd114b314302983d8,just minor aesthetic changes to cluster.c
antirez,2011-10-05 10:49:52,https://api.github.com/repos/antirez/redis/git/commits/093433c16ddf432e5005a6b45825febf448fc6a9,093433c16ddf432e5005a6b45825febf448fc6a9,"Merge pull request #118 from dvirsky/unstable

fixes to install scripts"
antirez,2011-10-04 16:43:03,https://api.github.com/repos/antirez/redis/git/commits/eab0e26e03fa3c27a4e1172659cea32e1b83699e,eab0e26e03fa3c27a4e1172659cea32e1b83699e,replaced redisAssert() with redisAssertWithInfo() in a shitload of places.
antirez,2011-10-04 16:05:26,https://api.github.com/repos/antirez/redis/git/commits/bab205f787afcb37e5b5a5d1eb16c8fafef6f95d,bab205f787afcb37e5b5a5d1eb16c8fafef6f95d,redisAssertWithClientInfo() is now redisAssertWithInfo() that is also able to report an optional object. The client is also optional. Specifying NULL will prevent dumping the not available information (either client or object).
antirez,2011-10-04 15:22:29,https://api.github.com/repos/antirez/redis/git/commits/e3e69935108585c448bfd2ff5ba34fd7d9a6e4b9,e3e69935108585c448bfd2ff5ba34fd7d9a6e4b9,Introduced a redisAssert() variant that is able to show information about the client in the context where the failed assertion was detected.
antirez,2011-10-04 13:53:07,https://api.github.com/repos/antirez/redis/git/commits/909aee2c6cc6c35394a3dc212126c7f6034b3d63,909aee2c6cc6c35394a3dc212126c7f6034b3d63,redis-trib: create subcommand fixed calling node info loading method. Was needed after recent refactoring.
antirez,2011-10-04 08:05:21,https://api.github.com/repos/antirez/redis/git/commits/24bfb570ee7f9f10eccdf034f5c772b84b876f5f,24bfb570ee7f9f10eccdf034f5c772b84b876f5f,Redis test ports selection made more robust. This prevents the test from hanging if an already bound port is selected but the TCP server listening to it does not cause a protocol error with a Redis client PING. Also base port moved away from the range near to the Redis Cluster gossip ports.
antirez,2011-10-03 14:04:44,https://api.github.com/repos/antirez/redis/git/commits/0bb5160cb08ad8f16ce241e55a1ed6c3042bf2aa,0bb5160cb08ad8f16ce241e55a1ed6c3042bf2aa,"Revert ""Use the new install script as make install target. Message about install script requiring root changed a bit to make it more evident.""
After talking with Pieter he changed my mind about this, it is better to
have a simpler install script that works everywhere, and the complex one
can be always executed if needed by hand. We'll make possibly a new
target for the full featured installation script, and even suggest it
after a Make install.

This reverts commit f1e60d75309990b25a1763e004d7044c77c53834."
antirez,2011-10-03 13:51:10,https://api.github.com/repos/antirez/redis/git/commits/37d650032a47bbc75356bdb09215eb6e59e363f4,37d650032a47bbc75356bdb09215eb6e59e363f4,Rewrite MIGRATE as DEL for AOF/replication. Also increment the dirty counter to both force replication and persistence.
antirez,2011-10-03 13:45:14,https://api.github.com/repos/antirez/redis/git/commits/2a95c944ff743df91ad7a20d9486a90fcc231cb3,2a95c944ff743df91ad7a20d9486a90fcc231cb3,increment server.dirty in restore command to make sure it is replicated and increments the dirty count for persistence concerns.
antirez,2011-10-03 13:20:23,https://api.github.com/repos/antirez/redis/git/commits/cd73df62af0efeceeede6b71f14ceb31199f461c,cd73df62af0efeceeede6b71f14ceb31199f461c,"Merge pull request #114 from pietern/unstable-zcount

Use rank information to compute ZCOUNT"
pietern,2011-10-03 12:23:31,https://api.github.com/repos/antirez/redis/git/commits/0cfc8940664dbd1b5a36dbc9e250ef4150d6495d,0cfc8940664dbd1b5a36dbc9e250ef4150d6495d,Remove ZCOUNT branches from generic RANGEBYSCORE code
pietern,2011-10-03 12:14:43,https://api.github.com/repos/antirez/redis/git/commits/62d774e5ba6056be39012ecedb88c3fec10304fb,62d774e5ba6056be39012ecedb88c3fec10304fb,Use element rank instead of iterating in ZCOUNT
antirez,2011-10-03 11:28:54,https://api.github.com/repos/antirez/redis/git/commits/f1e60d75309990b25a1763e004d7044c77c53834,f1e60d75309990b25a1763e004d7044c77c53834,Use the new install script as make install target. Message about install script requiring root changed a bit to make it more evident.
antirez,2011-10-02 12:05:29,https://api.github.com/repos/antirez/redis/git/commits/13c7e5ef299f4f6b38cd81c924bdf3eca691d691,13c7e5ef299f4f6b38cd81c924bdf3eca691d691,Exact variant of CRC16 specified into crc16.c
antirez,2011-10-01 13:11:07,https://api.github.com/repos/antirez/redis/git/commits/66c146592a0c0ff39570633811008cee8773233e,66c146592a0c0ff39570633811008cee8773233e,when processing gossip packets make sure to also update the node bitmap when associating slots to nodes. Fixed simply using the appropriate helper function to add a slot.
antirez,2011-09-30 23:31:46,https://api.github.com/repos/antirez/redis/git/commits/7112580cb3368d08f0672360b856e8a0d9892051,7112580cb3368d08f0672360b856e8a0d9892051,fixed a few problems with redis-trib resharding.
antirez,2011-09-30 20:18:07,https://api.github.com/repos/antirez/redis/git/commits/a0189bbe75ce56af6c906f828a5f2c2dc86d6d28,a0189bbe75ce56af6c906f828a5f2c2dc86d6d28,"redis-trib: initial working implementation of cluster rehashing, more work needed to make it more correct, more reliable."
antirez,2011-09-30 20:17:24,https://api.github.com/repos/antirez/redis/git/commits/d38d2fdfdcfc2390fd9b02f1016e5571faf1fc6e,d38d2fdfdcfc2390fd9b02f1016e5571faf1fc6e,Fixed two bugs in the CLUSTER SETSLOT ... NODE subcommand
antirez,2011-09-30 17:21:36,https://api.github.com/repos/antirez/redis/git/commits/9a38df8799615dba444922e5d7018e4edfecc73e,9a38df8799615dba444922e5d7018e4edfecc73e,"redis-trib: actual slot migration work in progress, more work needed."
antirez,2011-09-30 17:20:56,https://api.github.com/repos/antirez/redis/git/commits/c5954c196679cbc830fd835d6b72bbd94422fe5a,c5954c196679cbc830fd835d6b72bbd94422fe5a,Clear the importing status from the slot if a CLUSTER SETSLOT command permanently assigns the slot to the importing node.
antirez,2011-09-30 16:41:25,https://api.github.com/repos/antirez/redis/git/commits/6c0047c4304fc5cd84029996587d6ea1416d0578,6c0047c4304fc5cd84029996587d6ea1416d0578,redis-trib: better slots allocation strategy for resharding
antirez,2011-09-30 16:28:51,https://api.github.com/repos/antirez/redis/git/commits/841cd7684cd3f1287fba7c2ac9a5087230e47949,841cd7684cd3f1287fba7c2ac9a5087230e47949,"redis-trib: initial slots allocation strategy, still to improve for better balancing when there are just a few slots to move."
antirez,2011-09-29 14:06:49,https://api.github.com/repos/antirez/redis/git/commits/85b514d16574803ac5ed291aedcaf2d77cea8f48,85b514d16574803ac5ed291aedcaf2d77cea8f48,redis-trib: reshard command work in progress
antirez,2011-09-29 13:45:10,https://api.github.com/repos/antirez/redis/git/commits/9514aa325192d4d59497fab560ce781b3ed90bbb,9514aa325192d4d59497fab560ce781b3ed90bbb,redis-trib: minor refactoring creating a method to load the cluster information starting from a single node
antirez,2011-09-29 13:31:02,https://api.github.com/repos/antirez/redis/git/commits/5d8f25da3688a11daa1c2aa59322bb29eb78db16,5d8f25da3688a11daa1c2aa59322bb29eb78db16,redis-trib: don't crash loading node info for nodes without assigned slots
antirez,2011-09-29 13:26:01,https://api.github.com/repos/antirez/redis/git/commits/3b5289a04c474ce66df2ef410e053795b1f0f1d2,3b5289a04c474ce66df2ef410e053795b1f0f1d2,added comment about SETSLOT NODE form.
antirez,2011-09-29 13:14:06,https://api.github.com/repos/antirez/redis/git/commits/7afc3a9611a598686efb8d612f919d921b3487ec,7afc3a9611a598686efb8d612f919d921b3487ec,Fixed command table for RESTORE to make it accepting keys only for the right slots when cluster is enabled.
antirez,2011-09-29 13:04:23,https://api.github.com/repos/antirez/redis/git/commits/d7021b081b3d1c768bc27f0634515f0b8c850424,d7021b081b3d1c768bc27f0634515f0b8c850424,redis-trib: added cluster state to node info string
antirez,2011-09-29 12:44:15,https://api.github.com/repos/antirez/redis/git/commits/92dd76c8ee1cf6dd44644be018ad20f9f4533267,92dd76c8ee1cf6dd44644be018ad20f9f4533267,redis-trib: all node information into a single hash
antirez,2011-09-29 11:18:09,https://api.github.com/repos/antirez/redis/git/commits/b08c9dd28032a207a67773caf5d93616ff82a23f,b08c9dd28032a207a67773caf5d93616ff82a23f,redis-trib: when loading node info also fetch the output of CLUSTER INFO.
antirez,2011-09-29 10:50:46,https://api.github.com/repos/antirez/redis/git/commits/f639f99180c304e8eb4f4d063a7aff309b6b1056,f639f99180c304e8eb4f4d063a7aff309b6b1056,redis-trib cluster check command: check that all the 4096 slots are covered
antirez,2011-09-29 08:20:03,https://api.github.com/repos/antirez/redis/git/commits/0cae060a26745e1cb06700f7878ffe647db8ddd4,0cae060a26745e1cb06700f7878ffe647db8ddd4,Compilation fixed on OpenBSD making sure that _XOPEN_SOURCE is set to 700 in fmacros.h
antirez,2011-09-28 17:08:35,https://api.github.com/repos/antirez/redis/git/commits/d3f7fbfc092d9c681bd4fd74e38418f692d5eb38,d3f7fbfc092d9c681bd4fd74e38418f692d5eb38,initial node loading info code for redis-trib
antirez,2011-09-28 16:28:36,https://api.github.com/repos/antirez/redis/git/commits/1ef8b0a96d9b1a9f3a69914ece8e20b3c3d4c64c,1ef8b0a96d9b1a9f3a69914ece8e20b3c3d4c64c,show node with myself flag always as connected in CLUSTER NODES output.
antirez,2011-09-28 13:55:52,https://api.github.com/repos/antirez/redis/git/commits/07c152a7bd83ebee8c0f34ae9b2e457ea500d662,07c152a7bd83ebee8c0f34ae9b2e457ea500d662,cluster config file entries added to the example configuration file
antirez,2011-09-27 16:46:23,https://api.github.com/repos/antirez/redis/git/commits/002d5626e0e717a77c8cdb18ee22043defce1817,002d5626e0e717a77c8cdb18ee22043defce1817,"Scripting engine now only loads selected libraries, using code originally contributed by @loopole."
antirez,2011-09-27 14:07:38,https://api.github.com/repos/antirez/redis/git/commits/882b65ceafc3003e20c5a48bf1a253e09084f44f,882b65ceafc3003e20c5a48bf1a253e09084f44f,a few entries removed from the old TODO list (done)
antirez,2011-09-27 13:39:41,https://api.github.com/repos/antirez/redis/git/commits/7864ef855181016993a87d0d57f7814e7fc9980b,7864ef855181016993a87d0d57f7814e7fc9980b,new tests for the scripting engine: not allowed commands and write commands after random commands.
antirez,2011-09-27 13:30:31,https://api.github.com/repos/antirez/redis/git/commits/9f772cc23744804fc4b5da2aa7985c4c512abf55,9f772cc23744804fc4b5da2aa7985c4c512abf55,Return errors if a write command is called inside a Lua script after a random command was called. See https://github.com/antirez/redis/issues/95 for more information.
antirez,2011-09-27 11:57:10,https://api.github.com/repos/antirez/redis/git/commits/15ef6053404686995024adb373854a009a3d2d39,15ef6053404686995024adb373854a009a3d2d39,Deny commands flagged as REDIS_CMD_NOSCRIPT from Lua scripts
antirez,2011-09-27 11:45:46,https://api.github.com/repos/antirez/redis/git/commits/b60ed6e81233a8b3910e0a5d45031a7a6191b8bf,b60ed6e81233a8b3910e0a5d45031a7a6191b8bf,added the NOSCRIPT and RANDOM command flags
antirez,2011-09-26 13:40:39,https://api.github.com/repos/antirez/redis/git/commits/5d02b00f56fa959d3720c0590f32762a853c8928,5d02b00f56fa959d3720c0590f32762a853c8928,command table refactoring to make it simpler adding new flags
antirez,2011-09-23 13:40:58,https://api.github.com/repos/antirez/redis/git/commits/e108bab0437c709fcc8f339677bf6295fa793163,e108bab0437c709fcc8f339677bf6295fa793163,Lua math.random and math.randomseed replaced with our own version based on redisSrand48(). Seed initialized to the same value at every EVAL/EVALSHA call.
antirez,2011-09-23 13:06:07,https://api.github.com/repos/antirez/redis/git/commits/69786b262d2c899f61643f734e62ac5c8d3f7432,69786b262d2c899f61643f734e62ac5c8d3f7432,Defined macro with bigger number that redisLrand48() can output.
antirez,2011-09-23 12:51:48,https://api.github.com/repos/antirez/redis/git/commits/cbdac04a5ebadaef6c66a520b26ffc5fefff86a9,cbdac04a5ebadaef6c66a520b26ffc5fefff86a9,libc neutral random function derived from a drand48() implementation added. Will be used to replace Lua's math.random implementation.
antirez,2011-09-22 14:00:40,https://api.github.com/repos/antirez/redis/git/commits/f96a8a8054b3b699c2fba797bdcd203dda1168ce,f96a8a8054b3b699c2fba797bdcd203dda1168ce,rioInitWithFile nad rioInitWithBuffer functions now take a rio structure pointer to avoid copying a structure to return value to the caller.
antirez,2011-09-22 13:54:08,https://api.github.com/repos/antirez/redis/git/commits/69cecb511fef03795e94ba819308262ea44b2a18,69cecb511fef03795e94ba819308262ea44b2a18,"make sure to return just 1 for rio.c write when the target is a buffer, as we do when the target is a file."
antirez,2011-09-22 13:47:48,https://api.github.com/repos/antirez/redis/git/commits/4c0462972ecdef6fcd8155003028a41aafd70c27,4c0462972ecdef6fcd8155003028a41aafd70c27,"comment on top of the _rio structure modified for correctness as actually fwrite/fread semantics is different in general, but was 0/1 in our old usage before rio.c as we always used 1 as number items, and the actual number of bytes to read as item length."
antirez,2011-09-22 13:15:26,https://api.github.com/repos/antirez/redis/git/commits/f9c6f39b2b0039cf29df6597d41c124048c825cd,f9c6f39b2b0039cf29df6597d41c124048c825cd,merge conflicts resolved
antirez,2011-09-21 20:32:24,https://api.github.com/repos/antirez/redis/git/commits/7c748c061ecb630f52d0041c5d2497783aac5c06,7c748c061ecb630f52d0041c5d2497783aac5c06,"Merge pull request #97 from jvain/redis-cli

redis-cli segfaults with single numeric argument greater than zero"
jvain,2011-09-21 20:22:14,https://api.github.com/repos/antirez/redis/git/commits/aee7f99760ec3a8d7250789f60751245c0e349e0,aee7f99760ec3a8d7250789f60751245c0e349e0,fixed a small bug that caused redis-cli to segfault when given single numeric parameter greater that zero.
antirez,2011-09-21 17:13:43,https://api.github.com/repos/antirez/redis/git/commits/5833cf1676a4351e3fc7ea57c59d3ccad2a15632,5833cf1676a4351e3fc7ea57c59d3ccad2a15632,TODO updated
antirez,2011-09-20 13:34:49,https://api.github.com/repos/antirez/redis/git/commits/0e793fbe84f5796597ce1021a2ea840cdcba1924,0e793fbe84f5796597ce1021a2ea840cdcba1924,TODO updated after moving more things into the github issues system
antirez,2011-09-20 12:50:01,https://api.github.com/repos/antirez/redis/git/commits/29177b4d08eff23300b1e4c9a4ae358f05554dbb,29177b4d08eff23300b1e4c9a4ae358f05554dbb,TODO updated
antirez,2011-09-20 09:15:55,https://api.github.com/repos/antirez/redis/git/commits/2e5e29815f0113f0593af5d47eb28db6a3bcd557,2e5e29815f0113f0593af5d47eb28db6a3bcd557,no longer valid design documents removed
antirez,2011-09-20 09:12:14,https://api.github.com/repos/antirez/redis/git/commits/0ace6ce463695df1ff4c7ba848554f4c9b822f36,0ace6ce463695df1ff4c7ba848554f4c9b822f36,"Merge pull request #72 from datafueled/spelling

Spelling fixes."
antirez,2011-09-20 09:00:58,https://api.github.com/repos/antirez/redis/git/commits/ac1f6fd07a15ac7a14f27b8a5f4b5fb3dc6cf8ac,ac1f6fd07a15ac7a14f27b8a5f4b5fb3dc6cf8ac,"Merge pull request #78 from vambo/patch-1

Corrected typo in documentation for R_Zero, R_PosInf, R_NegInf, R_Nan;"
antirez,2011-09-20 08:58:55,https://api.github.com/repos/antirez/redis/git/commits/5bae401107b73b7cfa9cf5e4f1dc518f3687da7d,5bae401107b73b7cfa9cf5e4f1dc518f3687da7d,"Merge pull request #79 from annulen/mac_ppc

Fixed compilation on Mac/PPC"
antirez,2011-09-20 08:55:34,https://api.github.com/repos/antirez/redis/git/commits/18be93e0a48455587812d700d5bf16505a592516,18be93e0a48455587812d700d5bf16505a592516,"Merge pull request #74 from kmerenkov/issue_620

[issue 620] don't segfault if number of arguments is less than 1"
antirez,2011-09-20 08:48:21,https://api.github.com/repos/antirez/redis/git/commits/eef17490d434658b63e1e410d1504e33fa6d5013,eef17490d434658b63e1e410d1504e33fa6d5013,Include port number in error when can't bind lisetning port on startup.
antirez,2011-09-19 15:49:50,https://api.github.com/repos/antirez/redis/git/commits/e7aec180e87ecf2cb33644b4e0f57b9a34c7377a,e7aec180e87ecf2cb33644b4e0f57b9a34c7377a,Fixed comment typo
antirez,2011-09-19 15:06:27,https://api.github.com/repos/antirez/redis/git/commits/47e7f9acbd74856bc0324c590369b5d61dd5f058,47e7f9acbd74856bc0324c590369b5d61dd5f058,Comment out things in bio.c that are currently not useful but that may be useful in the future.
antirez,2011-09-19 14:52:13,https://api.github.com/repos/antirez/redis/git/commits/77ca5fcba639eeb8dec6525b4a43606a734175c7,77ca5fcba639eeb8dec6525b4a43606a734175c7,Emit a log message when AOF fsync is still in progress but we are forced to write from the main thread since two seconds already elapsed.
antirez,2011-09-16 13:53:01,https://api.github.com/repos/antirez/redis/git/commits/a60b397b6d2a25072c79fe0a5e29bea89a4d3786,a60b397b6d2a25072c79fe0a5e29bea89a4d3786,use aof_fsync wrapper instead of fsync(2) in bio.c
antirez,2011-09-16 13:44:14,https://api.github.com/repos/antirez/redis/git/commits/37183f14e4034c77283b5246d274cc54a6a90cda,37183f14e4034c77283b5246d274cc54a6a90cda,Merge remote-tracking branch 'origin/unstable' into bg-aof-2
antirez,2011-09-16 13:43:03,https://api.github.com/repos/antirez/redis/git/commits/dcdfd005a0133a347cc0aae54c690cd8c845fed7,dcdfd005a0133a347cc0aae54c690cd8c845fed7,"commenting out aof-race test for now, waiting for a fix to issue #80"
antirez,2011-09-16 10:36:33,https://api.github.com/repos/antirez/redis/git/commits/af4707a80c8ff5bbca34e271d3b33fd23135c203,af4707a80c8ff5bbca34e271d3b33fd23135c203,Merge remote-tracking branch 'origin/unstable' into bg-aof-2
antirez,2011-09-16 10:36:17,https://api.github.com/repos/antirez/redis/git/commits/a3fcd6bc21ec16f227bd98f7155372b2fd80de11,a3fcd6bc21ec16f227bd98f7155372b2fd80de11,"fixed flushAppendOnlyFile() function prototype to reflect the new implementation, fixing compilation."
antirez,2011-09-16 10:35:12,https://api.github.com/repos/antirez/redis/git/commits/db3c2a4fb4b2d4a9dd619151b7efc5e5253a8e3f,db3c2a4fb4b2d4a9dd619151b7efc5e5253a8e3f,postpone the AOF fsync if policy is everysec and there is a background fsync already going.
antirez,2011-09-16 10:11:48,https://api.github.com/repos/antirez/redis/git/commits/9a35eb22bfc9313d04598b8fc7ebb5ca9367d2de,9a35eb22bfc9313d04598b8fc7ebb5ca9367d2de,Fixed typo preventing compilation
pietern,2011-08-17 16:09:01,https://api.github.com/repos/antirez/redis/git/commits/3aa4b0097062b13031506b6b52fc8fc4bfec6dfc,3aa4b0097062b13031506b6b52fc8fc4bfec6dfc,Failing test related to AOF rewrite buffers
pietern,2011-08-17 15:06:19,https://api.github.com/repos/antirez/redis/git/commits/bdbf3acff5ffc5d114f18c1383b103fe6f45829e,bdbf3acff5ffc5d114f18c1383b103fe6f45829e,Enforce upper bound for number of requests in redis-benchmark
pietern,2011-08-17 16:15:06,https://api.github.com/repos/antirez/redis/git/commits/5f54a5e615efca2c15a8990c336986d9c9497453,5f54a5e615efca2c15a8990c336986d9c9497453,Fix AOF race that may duplicate commands
antirez,2011-09-16 09:08:39,https://api.github.com/repos/antirez/redis/git/commits/4b77700a334b5b9ac4dbc04252ef6c6e6e3598ea,4b77700a334b5b9ac4dbc04252ef6c6e6e3598ea,"Added aof_backgronud_fsync() function, and use it in the bacground rewrite done handler when the fsync policy is everysec."
antirez,2011-09-15 17:32:25,https://api.github.com/repos/antirez/redis/git/commits/96674b6d95c8990cc7dae885b27c76f377ddeb91,96674b6d95c8990cc7dae885b27c76f377ddeb91,Fixed a bug in the average latency metering of redis-cli --latency
antirez,2011-09-15 17:28:00,https://api.github.com/repos/antirez/redis/git/commits/43071993e19135c2f59fc6f013aa5522abcc2554,43071993e19135c2f59fc6f013aa5522abcc2554,Implemented --latency in redis-cli
antirez,2011-09-15 16:25:53,https://api.github.com/repos/antirez/redis/git/commits/9fc1e1b1d4613b9d95f80c64dc909a7f8defd78a,9fc1e1b1d4613b9d95f80c64dc909a7f8defd78a,REDIS_BIO_AOF_FSYNC implemented
antirez,2011-09-15 16:23:58,https://api.github.com/repos/antirez/redis/git/commits/b39a4d0b3941be82629d94dfd06f1ddc13fb260b,b39a4d0b3941be82629d94dfd06f1ddc13fb260b,fixed a problem in bioOlderJobType() when there are no jobs of the specified type. Now the function returns 0 when this happens.
antirez,2011-09-15 16:23:11,https://api.github.com/repos/antirez/redis/git/commits/fbb23ce496eaffa8313846601a73a68df0c0ba5d,fbb23ce496eaffa8313846601a73a68df0c0ba5d,some more comment about bio.c design
antirez,2011-09-15 13:52:14,https://api.github.com/repos/antirez/redis/git/commits/1317b7c2338777343841e8ea3a83c120bac1747e,1317b7c2338777343841e8ea3a83c120bac1747e,"Remove backgroud jobs from the queue only when the processing was completed, and not just started."
antirez,2011-09-15 13:46:29,https://api.github.com/repos/antirez/redis/git/commits/50be9b97bc975439cb34703acad5ac108952e672,50be9b97bc975439cb34703acad5ac108952e672,Use a different thread for every different type of background job
antirez,2011-09-14 17:05:21,https://api.github.com/repos/antirez/redis/git/commits/91de5421b250874cfff7554ae48cdb7dbc757789,91de5421b250874cfff7554ae48cdb7dbc757789,Better comments for bioWaitPendingJobsLE
antirez,2011-09-14 16:39:29,https://api.github.com/repos/antirez/redis/git/commits/fde4e4c428e58ec9a7c951f57cc523ed82dec1ca,fde4e4c428e58ec9a7c951f57cc523ed82dec1ca,Background I/O library enhanced so that the main thread can query for the number of pending jobs of the specified type.
antirez,2011-09-15 15:04:55,https://api.github.com/repos/antirez/redis/git/commits/f1907057221cc1601a914c7626d896483999fb39,f1907057221cc1601a914c7626d896483999fb39,TODO updated with 2.6 things
antirez,2011-09-14 17:09:48,https://api.github.com/repos/antirez/redis/git/commits/7feb90fa3709a612c272dc1fb0a239752c8c6bbd,7feb90fa3709a612c272dc1fb0a239752c8c6bbd,enable zmalloc thread safety support now that we have the bio.c background thread.
antirez,2011-09-14 13:27:47,https://api.github.com/repos/antirez/redis/git/commits/e0ba14557e2b24d21e92be01afd2307f1cc57aac,e0ba14557e2b24d21e92be01afd2307f1cc57aac,"Merge pull request #77 from Poincare/patch-1

Added note about Tcl"
antirez,2011-09-14 13:10:28,https://api.github.com/repos/antirez/redis/git/commits/7cfeb8cccf945e5de7210d8bd5a398acfd0959d8,7cfeb8cccf945e5de7210d8bd5a398acfd0959d8,Optimize LRANGE to scan the list starting from the head or the tail in order to traverse the minimal number of elements. Thanks to Didier Spezia for noticing the problem and providing a patch.
antirez,2011-09-14 11:08:19,https://api.github.com/repos/antirez/redis/git/commits/6468a6faad92e087d5054b60b86bf33d718e86ba,6468a6faad92e087d5054b60b86bf33d718e86ba,Don't replicate/AOF SAVE
antirez,2011-09-13 16:27:08,https://api.github.com/repos/antirez/redis/git/commits/986630afad7310f4ad548b355be3df076a50032c,986630afad7310f4ad548b355be3df076a50032c,use bio.c instead of libeio for closing the AOF file in background. Some comment added and other minor changes.
pietern,2011-08-18 13:49:06,https://api.github.com/repos/antirez/redis/git/commits/b454056d9480b91fd8935a7719ac3ffa40445ddf,b454056d9480b91fd8935a7719ac3ffa40445ddf,Asynchronously close old file after BGREWRITEAOF
antirez,2011-09-13 14:57:18,https://api.github.com/repos/antirez/redis/git/commits/b1c892f3f63dfdace7431c623ddf09eb6997682b,b1c892f3f63dfdace7431c623ddf09eb6997682b,test background close operation removed
antirez,2011-09-13 14:56:43,https://api.github.com/repos/antirez/redis/git/commits/d47ded66ce3c36eb41f38a20ebb5633dfa2e77b0,d47ded66ce3c36eb41f38a20ebb5633dfa2e77b0,make bio_list static as well
antirez,2011-09-13 14:53:33,https://api.github.com/repos/antirez/redis/git/commits/b147cb9e1ac77e021228f3343a59db1da7c88789,b147cb9e1ac77e021228f3343a59db1da7c88789,debug message removed
antirez,2011-09-13 14:21:12,https://api.github.com/repos/antirez/redis/git/commits/b7c739b0ddb95ef274d141a6fe714fb34291324d,b7c739b0ddb95ef274d141a6fe714fb34291324d,use pthread_cond_signal() to make sure the background thread will process the job.
antirez,2011-09-13 14:19:37,https://api.github.com/repos/antirez/redis/git/commits/8ea2dfd75c962865ee73cdb5d1893b9a64212b27,8ea2dfd75c962865ee73cdb5d1893b9a64212b27,typo fixed in bio.c
antirez,2011-09-13 14:17:45,https://api.github.com/repos/antirez/redis/git/commits/f67e338d5c696132aa645d7d554a1403af43fa3b,f67e338d5c696132aa645d7d554a1403af43fa3b,Removed no longer useful fields in the redis server structure
antirez,2011-09-13 14:10:26,https://api.github.com/repos/antirez/redis/git/commits/8f61a72fa8912968cb7fd21a5fae36de7ffab790,8f61a72fa8912968cb7fd21a5fae36de7ffab790,add background jobs initialization to Redis main init function
antirez,2011-09-13 14:09:06,https://api.github.com/repos/antirez/redis/git/commits/f81a5f54d8e8cac73ea198d5061d7b40d40ee942,f81a5f54d8e8cac73ea198d5061d7b40d40ee942,bio.c typos fixes to make it compile
antirez,2011-09-13 13:59:48,https://api.github.com/repos/antirez/redis/git/commits/02925dd96e3ad5e31a3cdd9abbc2415949de8700,02925dd96e3ad5e31a3cdd9abbc2415949de8700,bio.o added to redis-server objects
pietern,2011-08-18 11:03:04,https://api.github.com/repos/antirez/redis/git/commits/d1ec6c8b228e49dbaba943f328c124a5f5529768,d1ec6c8b228e49dbaba943f328c124a5f5529768,Speed up protocol synthesis for AOF
pietern,2011-08-18 10:44:30,https://api.github.com/repos/antirez/redis/git/commits/f990782f4ded01658f3091b5ebf956ca778f957e,f990782f4ded01658f3091b5ebf956ca778f957e,Re-use AOF buffer when it is small enough
pietern,2011-08-18 10:27:34,https://api.github.com/repos/antirez/redis/git/commits/a57225c2cff6547a70604c64de9e3a01a6c17eb2,a57225c2cff6547a70604c64de9e3a01a6c17eb2,Fix indent
antirez,2011-09-13 10:21:54,https://api.github.com/repos/antirez/redis/git/commits/4f06867afe756f7f2d7a9bbb93a19206455a9121,4f06867afe756f7f2d7a9bbb93a19206455a9121,added a newline for code readability
pietern,2011-08-18 10:25:59,https://api.github.com/repos/antirez/redis/git/commits/297322481d1635cecb6701a982c1d87fecb58538,297322481d1635cecb6701a982c1d87fecb58538,Avoid unnecessary calls to time(3)
antirez,2011-09-12 09:05:48,https://api.github.com/repos/antirez/redis/git/commits/3bc89500d22ea86a15d58f88e159bb92374a61e0,3bc89500d22ea86a15d58f88e159bb92374a61e0,Remove the write handler only if there are no longer objects in the output queue AND if the static buffer is empty. This bug was the cause of a possible server-stop-responding-to-client bug under some specific work load. Thanks to Pieter Noordhuis for spotting and fixing it.
antirez,2011-09-12 08:53:49,https://api.github.com/repos/antirez/redis/git/commits/7551e23716dbedb3561a5e5e4c590247f6b4e50d,7551e23716dbedb3561a5e5e4c590247f6b4e50d,regression test for bug 593 added
antirez,2011-09-12 08:04:23,https://api.github.com/repos/antirez/redis/git/commits/48082cc044202878364edce68a1323a96d2d40b4,48082cc044202878364edce68a1323a96d2d40b4,fixed typos in the comments of rpoplpushHandlePush()
hampus,2011-09-07 17:08:48,https://api.github.com/repos/antirez/redis/git/commits/c47d152c8d96415de1af994b1a4bb3e0347caef3,c47d152c8d96415de1af994b1a4bb3e0347caef3,Fix crash when chaining brpoplpush with other blocking commands.
annulen,2011-09-01 18:16:20,https://api.github.com/repos/antirez/redis/git/commits/ef9444e0d27d251672b12336ebc6568424406683,ef9444e0d27d251672b12336ebc6568424406683,"Fixed compilation on Mac/PPC

Applied patch from Issue 119 provided by 
pahowes@gmail.com"
vambo,2011-08-26 18:40:18,https://api.github.com/repos/antirez/redis/git/commits/c74b7c77306028acc7dc71d2ae14f880aea7e091,c74b7c77306028acc7dc71d2ae14f880aea7e091,"Corrected typo in documentation for R_Zero, R_PosInf, R_NegInf, R_Nan;"
Poincare,2011-08-25 10:35:33,https://api.github.com/repos/antirez/redis/git/commits/08c4b019b73323726da8215ed2d86b0adf844efd,08c4b019b73323726da8215ed2d86b0adf844efd,Added note about Tcl
antirez,2011-08-09 09:46:21,https://api.github.com/repos/antirez/redis/git/commits/b56567017dfc44b8e5071423423a48601cc4657e,b56567017dfc44b8e5071423423a48601cc4657e,Merge remote-tracking branch 'origin/unstable' into unstable
antirez,2011-08-09 09:45:57,https://api.github.com/repos/antirez/redis/git/commits/11aaf523131d4f3aa4507043f46984854505bc28,11aaf523131d4f3aa4507043f46984854505bc28,"Auto rewrite integer overflow fixed. Thanks to Gaurav for finding it (see issue 602 on google code), and Pieter Noordhuis for tracing it."
kmerenkov,2011-08-02 13:05:04,https://api.github.com/repos/antirez/redis/git/commits/be6f639564a472a54371ecf846a132218c7039ae,be6f639564a472a54371ecf846a132218c7039ae,[issue 620] don't segfault if number of arguments is less than 1
antirez,2011-07-28 12:40:47,https://api.github.com/repos/antirez/redis/git/commits/f65c8f654fafb6cc86804d8f4ca9cdd1b6d978db,f65c8f654fafb6cc86804d8f4ca9cdd1b6d978db,Merge remote-tracking branch 'origin/unstable' into unstable
antirez,2011-07-28 12:40:06,https://api.github.com/repos/antirez/redis/git/commits/4bb1ccc6ebaa5944f8283500d69cae505f9d04d8,4bb1ccc6ebaa5944f8283500d69cae505f9d04d8,Regression for a crash with blocking ops and pipelining
hampus,2011-07-28 09:20:42,https://api.github.com/repos/antirez/redis/git/commits/64f201c2aa3b2d6618b5aa11a19e2b96e0450e87,64f201c2aa3b2d6618b5aa11a19e2b96e0450e87,Fix crash when pipelining several blocking commands.
antirez,2011-07-28 10:33:17,https://api.github.com/repos/antirez/redis/git/commits/3d9704d33574a8f4598ef129dc2b42872b30d1eb,3d9704d33574a8f4598ef129dc2b42872b30d1eb,Merge remote branch 'origin/unstable' into unstable
antirez,2011-07-28 10:32:52,https://api.github.com/repos/antirez/redis/git/commits/243b783fdc4a77968f7a3dd4a246e43b226a4316,243b783fdc4a77968f7a3dd4a246e43b226a4316,Maxmemory test
antirez,2011-07-28 10:31:44,https://api.github.com/repos/antirez/redis/git/commits/e54484876a314c6e2a290b386cda0103f780acc5,e54484876a314c6e2a290b386cda0103f780acc5,fixed assert proc on Redis test
antirez,2011-07-27 14:39:03,https://api.github.com/repos/antirez/redis/git/commits/47cadab42b2489705263de54bf7ea980b5fe0df0,47cadab42b2489705263de54bf7ea980b5fe0df0,TODO updated
pietern,2011-07-27 13:03:48,https://api.github.com/repos/antirez/redis/git/commits/bb831c313c32a64446484e66c275aaba55d2d818,bb831c313c32a64446484e66c275aaba55d2d818,Fix adding bulk reply when getcwd fails
pietern,2011-07-27 12:46:17,https://api.github.com/repos/antirez/redis/git/commits/4d6bf65c42d213c716c5878343b9e1456ffcd327,4d6bf65c42d213c716c5878343b9e1456ffcd327,Wait for Lua to be built before linking redis-server
pietern,2011-07-27 10:29:36,https://api.github.com/repos/antirez/redis/git/commits/2d7162bb1db39bbdd80e3d2c99899f6d9ac4b2d6,2d7162bb1db39bbdd80e3d2c99899f6d9ac4b2d6,HDEL: Abort deleting fields when hash is removed
waywardmonkeys,2011-07-26 03:18:36,https://api.github.com/repos/antirez/redis/git/commits/5215ab1418479ba7820ddfcf0f342305be4b7e24,5215ab1418479ba7820ddfcf0f342305be4b7e24,Spelling fixes.
antirez,2011-07-22 10:11:40,https://api.github.com/repos/antirez/redis/git/commits/80e87a461a7d2ee54430127bdb6ac014778c54c5,80e87a461a7d2ee54430127bdb6ac014778c54c5,Close the listening sockets. Apparently this allows faster restarts.
antirez,2011-07-22 09:52:21,https://api.github.com/repos/antirez/redis/git/commits/adae85cdaed4db207537400c312fdc9e5f525883,adae85cdaed4db207537400c312fdc9e5f525883,prepareForShutdown() fixed for correctness regarding what to do with AOF and RDB persistence on exit.
antirez,2011-07-15 16:28:24,https://api.github.com/repos/antirez/redis/git/commits/d50292d2cc255a85cd5a8f7f34d2411206a1d449,d50292d2cc255a85cd5a8f7f34d2411206a1d449,make a scripting test more valgrind friendly
antirez,2011-07-15 15:41:40,https://api.github.com/repos/antirez/redis/git/commits/61fee31999554aa2d223cff6a841be7730394131,61fee31999554aa2d223cff6a841be7730394131,test that EVALSHA is replicated as EVAL
antirez,2011-07-15 15:20:57,https://api.github.com/repos/antirez/redis/git/commits/f790bd028cceca6f19b0690124e913baf897cb0e,f790bd028cceca6f19b0690124e913baf897cb0e,Added a 'runtest' script that is responsible to check if Tcl is available and run the test. This is invoked from Makefile as well.
antirez,2011-07-13 17:15:22,https://api.github.com/repos/antirez/redis/git/commits/319bb48c01b4c5be95b425e325d4b9ae46d4bced,319bb48c01b4c5be95b425e325d4b9ae46d4bced,"top level Makefile now just a proxy. Doing make clean inside src now does a full clean including deps, not just Redis source. Thanks to Pieter for the top level Makefile proxy trick."
antirez,2011-07-13 13:38:33,https://api.github.com/repos/antirez/redis/git/commits/5cb4850708d7ad9c035e7ee9534b05bb1b0e9d94,5cb4850708d7ad9c035e7ee9534b05bb1b0e9d94,Merge branch 'unstable' of github.com:antirez/redis into unstable
antirez,2011-07-13 13:38:03,https://api.github.com/repos/antirez/redis/git/commits/4dd444bb4aabc3d6be68f90b67ad8a3a185fd40b,4dd444bb4aabc3d6be68f90b67ad8a3a185fd40b,Replicate EVALSHA as EVAL taking a dictionary of sha1 -> script source code.
antirez,2011-07-13 10:04:02,https://api.github.com/repos/antirez/redis/git/commits/70ecddc9f42750d77b1c6c003488b380dba1dca1,70ecddc9f42750d77b1c6c003488b380dba1dca1,"scripting.txt file removed, content merged into the TODO file"
antirez,2011-07-13 10:00:28,https://api.github.com/repos/antirez/redis/git/commits/706b6e58bab051bfa62e95216cb74b2892f23bc3,706b6e58bab051bfa62e95216cb74b2892f23bc3,"Merge pull request #69 from AquaGeek/patch-1

Minor spelling fixes"
AquaGeek,2011-07-13 01:50:18,https://api.github.com/repos/antirez/redis/git/commits/c984d42fb14c72aa8a97e971f0f3d3df189f82d0,c984d42fb14c72aa8a97e971f0f3d3df189f82d0,Minor spelling fixes
antirez,2011-07-12 10:58:32,https://api.github.com/repos/antirez/redis/git/commits/331bf3292f249fac99226c591b40fd64a8d7106a,331bf3292f249fac99226c591b40fd64a8d7106a,when building redis-server use LINK and not CC as prefix in the output
antirez,2011-07-12 10:41:29,https://api.github.com/repos/antirez/redis/git/commits/5f5461949427103c605859e381202fcf1d4ef0e4,5f5461949427103c605859e381202fcf1d4ef0e4,Fix for a typo left after merging.
antirez,2011-07-12 10:39:16,https://api.github.com/repos/antirez/redis/git/commits/0681c5ad844cefefbe62f30df6587c0cbec3272e,0681c5ad844cefefbe62f30df6587c0cbec3272e,master branch merged into scripting.
antirez,2011-07-11 14:04:18,https://api.github.com/repos/antirez/redis/git/commits/34a8b51768a2579010e128b05e001bf1d8f99995,34a8b51768a2579010e128b05e001bf1d8f99995,solved a slow positive in the slow log test when the test is executed slowly
antirez,2011-07-11 13:58:31,https://api.github.com/repos/antirez/redis/git/commits/bf1379c8dfb02ef2b897043ee7c3fced6f2d5929,bf1379c8dfb02ef2b897043ee7c3fced6f2d5929,fixed another timing issue when running the test over valgrind or with very slow PCs
antirez,2011-07-11 13:45:06,https://api.github.com/repos/antirez/redis/git/commits/4bab6312239f4d77b7cc25ab7eec80fc3ba19506,4bab6312239f4d77b7cc25ab7eec80fc3ba19506,Merge branch 'unstable' of github.com:antirez/redis into unstable
antirez,2011-07-11 13:44:38,https://api.github.com/repos/antirez/redis/git/commits/0717e3aa16fc81ff0e5a9dfacc93655edbdaec6f,0717e3aa16fc81ff0e5a9dfacc93655edbdaec6f,fix a test timing issue when running the test over valgrind
antirez,2011-07-11 12:48:45,https://api.github.com/repos/antirez/redis/git/commits/e6fcb5b30db56e29c393cf7375085ab6fe12fb4d,e6fcb5b30db56e29c393cf7375085ab6fe12fb4d,make test depends on redis-check-aof as well.
antirez,2011-07-11 11:46:09,https://api.github.com/repos/antirez/redis/git/commits/6b91a11e3e224fdc506bd8f47a9e90bee2b9b05d,6b91a11e3e224fdc506bd8f47a9e90bee2b9b05d,removed --file argument from test invocation inside Makefile
antirez,2011-07-11 11:41:06,https://api.github.com/repos/antirez/redis/git/commits/4c378d7f6caae6783c64ed177f86c9098ea3da78,4c378d7f6caae6783c64ed177f86c9098ea3da78,new test engine valgrind support
antirez,2011-07-11 11:19:42,https://api.github.com/repos/antirez/redis/git/commits/c7c16a32a755ca704295046c1d0c22856cbc96ff,c7c16a32a755ca704295046c1d0c22856cbc96ff,cleanup after test
antirez,2011-07-11 11:03:22,https://api.github.com/repos/antirez/redis/git/commits/e4715f0011049b60ba96441e66d6fc87ff5a43d3,e4715f0011049b60ba96441e66d6fc87ff5a43d3,--help implemented
antirez,2011-07-11 10:56:00,https://api.github.com/repos/antirez/redis/git/commits/121ffc85f4ab8cb4a961551163ed53541834c2b1,121ffc85f4ab8cb4a961551163ed53541834c2b1,better recap of failed tests.
antirez,2011-07-11 10:44:55,https://api.github.com/repos/antirez/redis/git/commits/04e2410d2dcfc14c938ac56877929e96baa99d28,04e2410d2dcfc14c938ac56877929e96baa99d28,initial support for failed tests summary at end of the test.
antirez,2011-07-11 10:15:35,https://api.github.com/repos/antirez/redis/git/commits/30cf7be60c48c0f4931cd58bbd13201c17638b48,30cf7be60c48c0f4931cd58bbd13201c17638b48,the test runs less iterations of slow tests if no --accurate is given.
antirez,2011-07-11 09:59:55,https://api.github.com/repos/antirez/redis/git/commits/524d515f0c02e62c67f6293a6b59448479f5f5e9,524d515f0c02e62c67f6293a6b59448479f5f5e9,"implemented --single, --list-tests. --accurante and --help are now recognized but not actually implemented."
antirez,2011-07-11 09:41:23,https://api.github.com/repos/antirez/redis/git/commits/6209797d376a21ea73e3352c4948c36b53eaf2da,6209797d376a21ea73e3352c4948c36b53eaf2da,list test further split into smaller units
antirez,2011-07-11 09:32:19,https://api.github.com/repos/antirez/redis/git/commits/be9250c8cd34fd168af37960e2ac1dada91fee69,be9250c8cd34fd168af37960e2ac1dada91fee69,list-2 added to the list of tests
antirez,2011-07-11 09:30:46,https://api.github.com/repos/antirez/redis/git/commits/e46f78bd26d37550d54c922ee9b894c569d4ae37,e46f78bd26d37550d54c922ee9b894c569d4ae37,list test split into smaller parts
antirez,2011-07-11 09:18:46,https://api.github.com/repos/antirez/redis/git/commits/52c863ddac711b08390216c5360bf703ecf29dc7,52c863ddac711b08390216c5360bf703ecf29dc7,use tclsh8.5 not only in which but also in the actual test execution.
antirez,2011-07-11 09:17:05,https://api.github.com/repos/antirez/redis/git/commits/d4edba6f43ac8f5d42aa89ed29c0e5b8b3f85f1e,d4edba6f43ac8f5d42aa89ed29c0e5b8b3f85f1e,explicitly use tclsh8.5 to run the test
antirez,2011-07-10 22:53:30,https://api.github.com/repos/antirez/redis/git/commits/daab15993273bcced8b438f07c081f2325d6708b,daab15993273bcced8b438f07c081f2325d6708b,no longer prints testing... but just shows the test when we get the final result from the testing client.
antirez,2011-07-10 22:46:25,https://api.github.com/repos/antirez/redis/git/commits/569f84aa7cda1d47a27738906b1707741151521d,569f84aa7cda1d47a27738906b1707741151521d,replication test split into three parts in order to improve test execution time. Random fixes and improvements.
antirez,2011-07-10 22:14:12,https://api.github.com/repos/antirez/redis/git/commits/82e5dd35ea99692cc10077be95485242a9b352a3,82e5dd35ea99692cc10077be95485242a9b352a3,display less useless information in parallel test
antirez,2011-07-10 22:09:56,https://api.github.com/repos/antirez/redis/git/commits/3744824c3ef559c6c69cbc264f93b3e9891c263b,3744824c3ef559c6c69cbc264f93b3e9891c263b,some test colorization and some fix
antirez,2011-07-10 21:57:35,https://api.github.com/repos/antirez/redis/git/commits/36e790a04063e93c9a36bfcfaccd5e5fb473afc9,36e790a04063e93c9a36bfcfaccd5e5fb473afc9,print execution time of different units at end
antirez,2011-07-10 21:25:48,https://api.github.com/repos/antirez/redis/git/commits/13566085cf67f7417e60c10cc272c68ec8608b81,13566085cf67f7417e60c10cc272c68ec8608b81,Initial implementation of a client-server parallel testing system for Redis in order to speedup execution of the test suite.
antirez,2011-07-09 17:23:46,https://api.github.com/repos/antirez/redis/git/commits/5ab1461f9839fb0458b256045d38612062668863,5ab1461f9839fb0458b256045d38612062668863,"The test now gives some more time for Redis to start before of exiting with an error, since starting with valgrind can take a significant amount of time."
antirez,2011-07-08 10:59:30,https://api.github.com/repos/antirez/redis/git/commits/09e2d9eeba3ff65fd60f905a5bcb0f684f7a883e,09e2d9eeba3ff65fd60f905a5bcb0f684f7a883e,"Take a pointer to the relevant entry of the command table in the client structure. This is generally a more sounding design, simplifies a few functions prototype, and as a side effect fixes a bug related to the conversion of EXPIRE -1 to DEL: before of this fix Redis tried to convert it into an EXPIREAT in the AOF code, regardless of our rewrite of the command."
antirez,2011-07-08 10:20:30,https://api.github.com/repos/antirez/redis/git/commits/5521fa6a9f1f22bf2034d26b68e885c1dd5baa3a,5521fa6a9f1f22bf2034d26b68e885c1dd5baa3a,Test for regression about: Redis should not try to convert DEL into EXPIREAT for EXPIRE -1
antirez,2011-07-07 14:24:37,https://api.github.com/repos/antirez/redis/git/commits/812ecc8b1094b44400aade78ae14c00e477fa835,812ecc8b1094b44400aade78ae14c00e477fa835,don't process EXPIRE with negative TTL or EXPIREAT with time in the past if we are a slave too (see http://groups.google.com/group/redis-db/browse_thread/thread/5a931fefb88b16d5). Also propagate it as DEL.
hampus,2011-07-03 10:18:44,https://api.github.com/repos/antirez/redis/git/commits/040b0ade7dd9d30210ec89182bbe4d416416ed53,040b0ade7dd9d30210ec89182bbe4d416416ed53,"Don't expire keys while loading AOF.

They will be expired (and a DEL will be logged) after the loading is done
instead."
hampus,2011-07-03 09:04:55,https://api.github.com/repos/antirez/redis/git/commits/72bae0cc75828f10d2d69923bb2d27ddc494107b,72bae0cc75828f10d2d69923bb2d27ddc494107b,Add test for incorrect expiration when loading AOF.
antirez,2011-07-06 13:22:00,https://api.github.com/repos/antirez/redis/git/commits/cabe03eb758a898e5c0e6906890fd7ede0cc2be1,cabe03eb758a898e5c0e6906890fd7ede0cc2be1,more valgrind friendly test
antirez,2011-07-05 11:27:21,https://api.github.com/repos/antirez/redis/git/commits/10ba492fa3674117a9af0c3c80bed90fc415847d,10ba492fa3674117a9af0c3c80bed90fc415847d,"Ingore jemalloc make distclean error in Makefile, caused by make clean against a tree that never compiled jemalloc."
antirez,2011-07-03 13:49:49,https://api.github.com/repos/antirez/redis/git/commits/208092ad703855ebd42873defdcb74fd6d6706d7,208092ad703855ebd42873defdcb74fd6d6706d7,Fixed typo in redis.conf related to slow log parameters
antirez,2011-07-02 08:51:35,https://api.github.com/repos/antirez/redis/git/commits/5a9dd97c7c57efcb8d6f0bd007825a8b28cbc179,5a9dd97c7c57efcb8d6f0bd007825a8b28cbc179,"childrens -> children in INFO output field names. This is a backward incompatible change, but really a minimal one."
antirez,2011-07-02 08:25:35,https://api.github.com/repos/antirez/redis/git/commits/650463401999f675ae4254790db13aac5ddc5c5b,650463401999f675ae4254790db13aac5ddc5c5b,"no more allocation stats info in INFO, useless now that we have jemalloc."
antirez,2011-07-01 13:49:17,https://api.github.com/repos/antirez/redis/git/commits/bbbf79ddb510fd93f4c65ad67bb6887854273545,bbbf79ddb510fd93f4c65ad67bb6887854273545,Added slowlog.tcl
antirez,2011-06-30 16:44:58,https://api.github.com/repos/antirez/redis/git/commits/17daf16f855cc32a17bd5849cd089ad2476f4667,17daf16f855cc32a17bd5849cd089ad2476f4667,SLOWLOG tests
antirez,2011-06-30 15:36:15,https://api.github.com/repos/antirez/redis/git/commits/2cb6828480300533e690d33cf824de8aa4f1ccd7,2cb6828480300533e690d33cf824de8aa4f1ccd7,Added an unique ID field to every slow log entry.
antirez,2011-06-30 13:54:05,https://api.github.com/repos/antirez/redis/git/commits/de32c37c06ee447d5d7d3505725c100da2c03c75,de32c37c06ee447d5d7d3505725c100da2c03c75,"More redis.conf self-documentation. Now even queries that took exactly server.slow_log_slower_than are logged, as this is not exact but is more intuitive for people, and a value of 0 will force every query to be logged."
antirez,2011-06-30 13:47:15,https://api.github.com/repos/antirez/redis/git/commits/35a6044140deb1c70dc92c5d454745142faeeb37,35a6044140deb1c70dc92c5d454745142faeeb37,slow log configuration implemented
antirez,2011-06-30 11:34:38,https://api.github.com/repos/antirez/redis/git/commits/63d62eb786aacf25e0533cf328d95dc45806dcba,63d62eb786aacf25e0533cf328d95dc45806dcba,hiredis max multi bulk nesting level raised to 7
antirez,2011-06-30 11:31:44,https://api.github.com/repos/antirez/redis/git/commits/404345d8e53ed5646e3a0128beecaa2052dd4a81,404345d8e53ed5646e3a0128beecaa2052dd4a81,DEUBG SLEEP implemented
antirez,2011-06-30 11:27:32,https://api.github.com/repos/antirez/redis/git/commits/daa70b179888121b92554103817443ad0ef32cd8,daa70b179888121b92554103817443ad0ef32cd8,First implementation of the slow log feature
antirez,2011-06-29 14:10:28,https://api.github.com/repos/antirez/redis/git/commits/ef67a2fc3c24d346efb1fa73b822e6a160229166,ef67a2fc3c24d346efb1fa73b822e6a160229166,"Partial fix for a problem with AOF and BRPOP. We have at least a single evidence of an AOF that ended with a BRPOP call against an empty list, causing later issues at run time. Now the problem is detected while loading the AOF at startup, even if it is still to understand how the corrupted AOF was generated."
antirez,2011-06-25 10:42:55,https://api.github.com/repos/antirez/redis/git/commits/15bc1cc1bcd4174e7116b5429f1f31f792d13d2e,15bc1cc1bcd4174e7116b5429f1f31f792d13d2e,colorized test output shows scripting tests with X
antirez,2011-06-25 10:29:24,https://api.github.com/repos/antirez/redis/git/commits/994ed2bc552f4114b1f0c8dd3fd8aefaec6beeae,994ed2bc552f4114b1f0c8dd3fd8aefaec6beeae,unstable merge conflicts resolved
antirez,2011-06-25 10:22:59,https://api.github.com/repos/antirez/redis/git/commits/d5b36c5114659e979fc2e102954ded1e30aacacf,d5b36c5114659e979fc2e102954ded1e30aacacf,Merge remote branch 'origin/unstable' into unstable
antirez,2011-06-25 10:22:03,https://api.github.com/repos/antirez/redis/git/commits/c9d0c3623a7714bd41a35237f4ba927206a7adb6,c9d0c3623a7714bd41a35237f4ba927206a7adb6,diskstore removed
antirez,2011-06-24 16:59:37,https://api.github.com/repos/antirez/redis/git/commits/a004de0f1509c0ff499e6fc28da2f7e308e14e40,a004de0f1509c0ff499e6fc28da2f7e308e14e40,"Merge pull request #63 from djanowski/tcl

Add warning when `tcl` is not available to run tests"
djanowski,2011-06-24 16:56:06,https://api.github.com/repos/antirez/redis/git/commits/b3bc4452d26304c620fbca5a20db4b695eb8229c,b3bc4452d26304c620fbca5a20db4b695eb8229c,Avoid bug reports when Tcl is not installed.
antirez,2011-06-20 15:07:18,https://api.github.com/repos/antirez/redis/git/commits/c1c9d551da6dd534c8dae051a3a7e64bf7db6bfb,c1c9d551da6dd534c8dae051a3a7e64bf7db6bfb,Fix for bug 561 and other related problems
antirez,2011-06-14 14:22:54,https://api.github.com/repos/antirez/redis/git/commits/634bae94fbc0427032be4d1fd68b29b7d03aecb7,634bae94fbc0427032be4d1fd68b29b7d03aecb7,"useless call removed, thanks to Pieter for spotting this"
pietern,2011-06-13 19:06:44,https://api.github.com/repos/antirez/redis/git/commits/b0d1d2684d15aeb201da6f8e1e23ba496d6907ad,b0d1d2684d15aeb201da6f8e1e23ba496d6907ad,SETNX regression tests.
antirez,2011-06-14 13:34:27,https://api.github.com/repos/antirez/redis/git/commits/f85cd526c155a1b1302b2d080502d40227af00ec,f85cd526c155a1b1302b2d080502d40227af00ec,DB API refactoring. The changes were designed together with Pieter Noordhuis.
antirez,2011-06-20 09:58:54,https://api.github.com/repos/antirez/redis/git/commits/3e2a0bf44a1fe3494fa655a54c9a0b24bf7689ef,3e2a0bf44a1fe3494fa655a54c9a0b24bf7689ef,Makefile deps updated
antirez,2011-06-01 15:08:12,https://api.github.com/repos/antirez/redis/git/commits/e93d36a6388b4416cae4812a224dbf151aa4b5d7,e93d36a6388b4416cae4812a224dbf151aa4b5d7,It is now possible to build with: make 32bit USE_JEMALLOC=yes
antirez,2011-06-01 15:56:50,https://api.github.com/repos/antirez/redis/git/commits/7d9ba156690b0eef1167f8ed9c5d1d3e09e1948e,7d9ba156690b0eef1167f8ed9c5d1d3e09e1948e,"Added -ldl when linking against jemalloc, needed on Linux"
antirez,2011-06-20 09:54:08,https://api.github.com/repos/antirez/redis/git/commits/fec5a664f8ce7a1e0f687d07079aa09230fa5846,fec5a664f8ce7a1e0f687d07079aa09230fa5846,Fixed INFO implementation to use the new allocator name define
antirez,2011-06-20 09:52:15,https://api.github.com/repos/antirez/redis/git/commits/9e62dc17dadc02e988f93dfa3856e46c2ff2bac7,9e62dc17dadc02e988f93dfa3856e46c2ff2bac7,Makefile modified to build with jemalloc
pietern,2011-05-17 10:25:33,https://api.github.com/repos/antirez/redis/git/commits/b4a79b9ffcbf01ff2162020f856b7fb8e6094bbf,b4a79b9ffcbf01ff2162020f856b7fb8e6094bbf,Ignore jemalloc build artifacts
antirez,2011-06-20 09:35:29,https://api.github.com/repos/antirez/redis/git/commits/16cd4acdeed9f38802606bfad206b632d4cb5039,16cd4acdeed9f38802606bfad206b632d4cb5039,ZMALLOC related stuff removed from config.h. They are now defined in zmalloc.h
antirez,2011-06-20 09:34:04,https://api.github.com/repos/antirez/redis/git/commits/29d04257b0cb09028978f02c6404a0c002f0314c,29d04257b0cb09028978f02c6404a0c002f0314c,forward-ported changes in zmalloc.c/h to support jemalloc build
antirez,2011-05-09 08:52:55,https://api.github.com/repos/antirez/redis/git/commits/a78e148b7d12a8c46b0a4686a9b0a3e8e054261c,a78e148b7d12a8c46b0a4686a9b0a3e8e054261c,jemalloc source added
antirez,2011-06-17 14:13:22,https://api.github.com/repos/antirez/redis/git/commits/07486df6fecae97b02171bba86f51d5df0a94cb5,07486df6fecae97b02171bba86f51d5df0a94cb5,new INFO filed master_link_down_since_seconds
antirez,2011-06-17 13:40:55,https://api.github.com/repos/antirez/redis/git/commits/591f29e0f5493f1e375c06ae225dc5aafe5b37fb,591f29e0f5493f1e375c06ae225dc5aafe5b37fb,"Use a safe iterator while saving the DB, since the getExpire() function will access the iterating dictionary."
catwell,2011-05-27 14:01:29,https://api.github.com/repos/antirez/redis/git/commits/45ec3243f8205ff8d356a5175026052070211d91,45ec3243f8205ff8d356a5175026052070211d91,Untrack and ignore Lua binary files (2)
catwell,2011-05-27 13:27:07,https://api.github.com/repos/antirez/redis/git/commits/6d0014cf588a4bf01ce663f3f951eb8b299795d0,6d0014cf588a4bf01ce663f3f951eb8b299795d0,Untrack and ignore Lua binary files
antirez,2011-06-14 16:06:39,https://api.github.com/repos/antirez/redis/git/commits/0d1650f8a9ee2df13a11685ff0eb739305b4fe1b,0d1650f8a9ee2df13a11685ff0eb739305b4fe1b,Updated to unstable
antirez,2011-06-14 15:11:44,https://api.github.com/repos/antirez/redis/git/commits/55937b7972cb990a6f0a69927f7a28d7baf915d9,55937b7972cb990a6f0a69927f7a28d7baf915d9,"Fixed init script bug, thanks to Henrik Westphal"
antirez,2011-06-14 11:48:49,https://api.github.com/repos/antirez/redis/git/commits/b0d68504e9986ffa9f1f80f550a04c4f1898957f,b0d68504e9986ffa9f1f80f550a04c4f1898957f,Better init script
antirez,2011-06-14 08:26:42,https://api.github.com/repos/antirez/redis/git/commits/4abd096f5188448a2c0e75511a049b3a3fd8e9b1,4abd096f5188448a2c0e75511a049b3a3fd8e9b1,"Merge pull request #58 from hampus/fix-autorewrite

Fix automatic rewrite starting too early"
hampus,2011-06-12 05:27:01,https://api.github.com/repos/antirez/redis/git/commits/0b17517c7c9f1f6b1c299346b7b4fa374e343fbc,0b17517c7c9f1f6b1c299346b7b4fa374e343fbc,"Fix automatic rewrite starting too early.

Slight adjustment in growth calculation."
antirez,2011-06-10 16:35:16,https://api.github.com/repos/antirez/redis/git/commits/9e40bce3fa178c5a79188f63ab6f1acf81500a53,9e40bce3fa178c5a79188f63ab6f1acf81500a53,different message on BGREWRITEAOF when it is just scheduled and not started.
antirez,2011-06-10 16:13:57,https://api.github.com/repos/antirez/redis/git/commits/2c6cc5e502824f1b4e222ebfa1a3fc89f078ae32,2c6cc5e502824f1b4e222ebfa1a3fc89f078ae32,minor code aesthetic change
antirez,2011-06-10 13:15:29,https://api.github.com/repos/antirez/redis/git/commits/19b46c9a0938ccda1bfd61afb06c63bb2f468398,19b46c9a0938ccda1bfd61afb06c63bb2f468398,Make sure an automatic rewrite only gets triggered when no other child is in execution.
antirez,2011-06-10 13:14:10,https://api.github.com/repos/antirez/redis/git/commits/0ec932208e6a3162955de1fe75efd0346439f005,0ec932208e6a3162955de1fe75efd0346439f005,CONFIG SET/GET support for new automatic AOF rewrite parameters
antirez,2011-06-10 12:56:45,https://api.github.com/repos/antirez/redis/git/commits/c66bf1fa32655ccf3f39b4cd72953459576463f5,c66bf1fa32655ccf3f39b4cd72953459576463f5,correctly set AOF base size field in server structure
antirez,2011-06-10 12:52:47,https://api.github.com/repos/antirez/redis/git/commits/d630abcdaf869345fed8fe508774d0318d1d82ff,d630abcdaf869345fed8fe508774d0318d1d82ff,Added new INFO fields related to the new AOF auto rewrite feature
antirez,2011-06-10 12:47:12,https://api.github.com/repos/antirez/redis/git/commits/4f948300bc26abb0aaa99343bc9f089ea98a9abe,4f948300bc26abb0aaa99343bc9f089ea98a9abe,Fixed bug in AOF rewrite not working because of integer overflow
antirez,2011-06-10 12:44:06,https://api.github.com/repos/antirez/redis/git/commits/73b9e8aedfc42d4b4b9f2902969e8bc219736f3d,73b9e8aedfc42d4b4b9f2902969e8bc219736f3d,debugging printf removed
antirez,2011-06-10 12:43:11,https://api.github.com/repos/antirez/redis/git/commits/4ff34b6adb9f5f9daad1f27e3aac8e016554b86c,4ff34b6adb9f5f9daad1f27e3aac8e016554b86c,AOF auto rewrite percentage option parsing fixed
antirez,2011-06-10 12:28:14,https://api.github.com/repos/antirez/redis/git/commits/50528f0eea113508962b66e80d7cec7e9c5d92e9,50528f0eea113508962b66e80d7cec7e9c5d92e9,Merge remote branch 'pietern/unstable-bench' into unstable
antirez,2011-06-10 12:25:27,https://api.github.com/repos/antirez/redis/git/commits/e3d27a726162e9faefe2d6223caf3b459b7f94f7,e3d27a726162e9faefe2d6223caf3b459b7f94f7,Avoid division by zero issues in the automatically triggered AOF rewrite feature.
antirez,2011-06-10 10:39:40,https://api.github.com/repos/antirez/redis/git/commits/e087b6d7a145a6aabbb215405dddcf178e71aaa5,e087b6d7a145a6aabbb215405dddcf178e71aaa5,Merge remote branch 'origin/unstable' into unstable
antirez,2011-06-10 10:39:23,https://api.github.com/repos/antirez/redis/git/commits/b333e2399778e624174e00d123c2cb3785333e3d,b333e2399778e624174e00d123c2cb3785333e3d,automatic AOF rewrite first implementation. Still to be tested.
antirez,2011-06-09 16:50:55,https://api.github.com/repos/antirez/redis/git/commits/00ba9b641c06725505079723e7e8e62b16514466,00ba9b641c06725505079723e7e8e62b16514466,"Merge pull request #57 from melo/patch-1

Small fix in the installation instructions"
melo,2011-06-09 16:14:18,https://api.github.com/repos/antirez/redis/git/commits/b6c46d17a7cc5a59ae6f36fa3316fb495dae71b4,b6c46d17a7cc5a59ae6f36fa3316fb495dae71b4,Small fix in the installation instructions
hampus,2011-06-09 09:17:32,https://api.github.com/repos/antirez/redis/git/commits/db6cea11c4164423c318ec2a4ad1c42a273feaaf,db6cea11c4164423c318ec2a4ad1c42a273feaaf,"Fix Makefile colors.

echo with escape sequences isn't portable. Use printf instead."
antirez,2011-06-09 13:35:07,https://api.github.com/repos/antirez/redis/git/commits/45029d37cb7fe589bdfd9a08dd5a3afd611ad57e,45029d37cb7fe589bdfd9a08dd5a3afd611ad57e,Two fixes for replication: Slave performs the AOF rewrite at the right point. Non blocking connect also uses readable handler as with old Linux kernels like 2.6.18 on connection refused the writable even is not fired (kernel bug).
antirez,2011-06-08 15:09:18,https://api.github.com/repos/antirez/redis/git/commits/73e718675b68f141054adf18eb3a70619d67406b,73e718675b68f141054adf18eb3a70619d67406b,"Better colorized Makefile implementation, inspired by git makefile"
antirez,2011-06-07 15:01:45,https://api.github.com/repos/antirez/redis/git/commits/fc879abe4adb6c59ba6c280fa4e08ae291dd11eb,fc879abe4adb6c59ba6c280fa4e08ae291dd11eb,Merge branch 'unstable'
antirez,2011-06-05 18:51:49,https://api.github.com/repos/antirez/redis/git/commits/cf1eefa4206b23327e38a144d8d20543307fdbe4,cf1eefa4206b23327e38a144d8d20543307fdbe4,Merge remote branch 'origin/unstable' into unstable
antirez,2011-06-05 18:51:07,https://api.github.com/repos/antirez/redis/git/commits/5daa1f060a048a9f57e8e5441438d3ba03510bdb,5daa1f060a048a9f57e8e5441438d3ba03510bdb,no more client-libraries directory
antirez,2011-06-05 18:50:22,https://api.github.com/repos/antirez/redis/git/commits/06e09c9b586d0e2c5d91dc596f871be56c6e0971,06e09c9b586d0e2c5d91dc596f871be56c6e0971,no more html documentation
pietern,2011-06-01 00:38:39,https://api.github.com/repos/antirez/redis/git/commits/294cd536e0aeedd3d6f63f947a67bd2c08d04805,294cd536e0aeedd3d6f63f947a67bd2c08d04805,There is no debug mode in benchmark tool
pietern,2011-06-01 00:19:11,https://api.github.com/repos/antirez/redis/git/commits/39bf440243d18afbc764f6a637d7138eeeb37372,39bf440243d18afbc764f6a637d7138eeeb37372,Provide custom command to benchmark against via args
pietern,2011-06-01 00:15:42,https://api.github.com/repos/antirez/redis/git/commits/fc05e8c850824d511ddbeee6eacd5ba187176447,fc05e8c850824d511ddbeee6eacd5ba187176447,More const's in redis-benchmark.c
antirez,2011-05-31 18:30:54,https://api.github.com/repos/antirez/redis/git/commits/b002546bb4f543dd4d82e06037ada1bd7c036aec,b002546bb4f543dd4d82e06037ada1bd7c036aec,ZREM tests
antirez,2011-05-31 18:15:18,https://api.github.com/repos/antirez/redis/git/commits/3f7b2b1f300e6d0441f420fcb51c253b10631cfa,3f7b2b1f300e6d0441f420fcb51c253b10631cfa,Variadic ZREM
antirez,2011-05-31 18:14:29,https://api.github.com/repos/antirez/redis/git/commits/3738ff5f32aaadd3074a691544caf2f2daa77928,3738ff5f32aaadd3074a691544caf2f2daa77928,Fix for the variadic version of SREM. Regression test added.
antirez,2011-05-31 16:49:12,https://api.github.com/repos/antirez/redis/git/commits/faa2a80f89b5a3cd35812e71893d812e2877ed2e,faa2a80f89b5a3cd35812e71893d812e2877ed2e,"disabled development test entry, tests moved in the right place"
antirez,2011-05-31 16:35:09,https://api.github.com/repos/antirez/redis/git/commits/3fe40d6e3ce724de842bf690b3f5eebaf69fafa2,3fe40d6e3ce724de842bf690b3f5eebaf69fafa2,Variadic ZADD tests
antirez,2011-05-31 15:47:34,https://api.github.com/repos/antirez/redis/git/commits/ef231a7c56cafc42ff486b91d88ae7ec642a2117,ef231a7c56cafc42ff486b91d88ae7ec642a2117,Variadic ZADD
pietern,2011-05-30 00:55:13,https://api.github.com/repos/antirez/redis/git/commits/632e4c09acad87b999dd944413ac5b75207de571,632e4c09acad87b999dd944413ac5b75207de571,Make replication faster (biggest gain for small number of slaves)
antirez,2011-05-29 13:17:29,https://api.github.com/repos/antirez/redis/git/commits/615e414c5d9add3c0445d28b6d7ca62905dc8cd8,615e414c5d9add3c0445d28b6d7ca62905dc8cd8,INFO now contains the time (in usecs) needed to fork() in order to persist. The info is available in the stats section of INFO.
antirez,2011-05-29 12:26:01,https://api.github.com/repos/antirez/redis/git/commits/43222f253a60b8949d761bd3ef36cb061a3a4a3e,43222f253a60b8949d761bd3ef36cb061a3a4a3e,Merge remote branch 'pietern/unstable-replnonblock' into unstable
antirez,2011-05-28 13:41:08,https://api.github.com/repos/antirez/redis/git/commits/18f63d8d5197677a4049a372bf657e9fdaf0e890,18f63d8d5197677a4049a372bf657e9fdaf0e890,"redis-cli: -i (interval) implemented, to wait the specified number of seconds (decimal digits are allowed) between commands."
antirez,2011-05-28 13:25:48,https://api.github.com/repos/antirez/redis/git/commits/442c748d841bb3603ba1194527ca9da6a1b3cd21,442c748d841bb3603ba1194527ca9da6a1b3cd21,redis-cli: Use the repetiton prefix after a reconnection.
antirez,2011-05-28 13:13:55,https://api.github.com/repos/antirez/redis/git/commits/4d19e3443cc3a36bd51684099152d89e18c45afa,4d19e3443cc3a36bd51684099152d89e18c45afa,"redis-cli in REPL mode is now able to send the same command multiple times, prefixing the command with a number as in ""10 ping"""
antirez,2011-05-28 13:04:12,https://api.github.com/repos/antirez/redis/git/commits/a45f9a1a1d4c3bc419beeba09d9aae9b2d5b1433,a45f9a1a1d4c3bc419beeba09d9aae9b2d5b1433,"redis-cli no longer aborts in repl-mode on error, and retries to reconncet with the server at every command issued if the state is not connected. Also the prompt shows the server we are connected to."
antirez,2011-05-25 10:33:25,https://api.github.com/repos/antirez/redis/git/commits/e4f6b8c327eb8e1444b51ced96e59dc5e7294cf8,e4f6b8c327eb8e1444b51ced96e59dc5e7294cf8,Merge branch 'unstable'
antirez,2011-05-24 17:43:11,https://api.github.com/repos/antirez/redis/git/commits/3bb818df405e667087fe3336cd91159790f63981,3bb818df405e667087fe3336cd91159790f63981,"Make sure error and status replies emitted by Lua scripts can never have more than a newline, otherwise it is a protocol violation and clients will desync."
antirez,2011-05-24 16:40:37,https://api.github.com/repos/antirez/redis/git/commits/449286a588c820ca1a120c2e9e8c57c1a31345a2,449286a588c820ca1a120c2e9e8c57c1a31345a2,Scripting tests added
antirez,2011-05-16 16:36:07,https://api.github.com/repos/antirez/redis/git/commits/e927a246108e78dfaf6e02d604a674234e5116d3,e927a246108e78dfaf6e02d604a674234e5116d3,Fix for wrong error level detection in redis.log()
antirez,2011-05-16 16:32:03,https://api.github.com/repos/antirez/redis/git/commits/288f811feacdd6b26c2263e7b9fcfabaa051a1ec,288f811feacdd6b26c2263e7b9fcfabaa051a1ec,All commands exported by Redis to Lua scripts are now inside the redis table. Implemented redis.log() function.
antirez,2011-05-13 20:02:38,https://api.github.com/repos/antirez/redis/git/commits/7229d60d0356e94f553623e0492f636687ac39e6,7229d60d0356e94f553623e0492f636687ac39e6,EVALSHA implemented
antirez,2011-05-13 14:42:43,https://api.github.com/repos/antirez/redis/git/commits/82c6b8257a5f465aa257160930572c0ef257e5a8,82c6b8257a5f465aa257160930572c0ef257e5a8,"Now it is possible to return multi bulks of multi bulks from Lua, just returning tables of tables. The new conversion of the Null bulk and multi bulk type is the Lua false type."
antirez,2011-05-06 15:37:03,https://api.github.com/repos/antirez/redis/git/commits/da386cdf337a79b6734b58d3c5e426741e49c043,da386cdf337a79b6734b58d3c5e426741e49c043,for performance reasons only set the debug hook if the time limit is enabled.
antirez,2011-05-06 15:30:54,https://api.github.com/repos/antirez/redis/git/commits/87c219243c42b826da98cb8ad832785a5f569dca,87c219243c42b826da98cb8ad832785a5f569dca,Lua max exec time fixes: redisLog() to log the event moved before the lua_error() call that does a long jump so never returns. Aesthetic fixes in error message.
antirez,2011-05-06 15:25:19,https://api.github.com/repos/antirez/redis/git/commits/bcc72bc38101e60a6e6a08d70038d7bc8307233f,bcc72bc38101e60a6e6a08d70038d7bc8307233f,call the Lua hook with minor frequency. It is already enough to call it every 100000 istructions for near millisecond precision.
antirez,2011-05-06 15:21:27,https://api.github.com/repos/antirez/redis/git/commits/eeffcf380fcd3e3a0b2f650e24df8338a529642d,eeffcf380fcd3e3a0b2f650e24df8338a529642d,Lua scripts max execution time
antirez,2011-05-07 09:40:29,https://api.github.com/repos/antirez/redis/git/commits/8c3402dffaa52f54da5f560ca6dde036052828b1,8c3402dffaa52f54da5f560ca6dde036052828b1,Lua memory usage in INFO
antirez,2011-05-07 09:32:37,https://api.github.com/repos/antirez/redis/git/commits/40531be0e338556df5510f49f4472ea50713962f,40531be0e338556df5510f49f4472ea50713962f,call lua_gc() for incremental garbage collection. Likely there is to tune this at some point.
antirez,2011-05-02 22:07:41,https://api.github.com/repos/antirez/redis/git/commits/c2a7dd85ae007f157da3a5bedf1392a23fc38bc4,c2a7dd85ae007f157da3a5bedf1392a23fc38bc4,Lua scripting: Honor SELECT command in both ways
antirez,2011-05-02 21:04:08,https://api.github.com/repos/antirez/redis/git/commits/09ab5591fab7e347406252fe71eb3f4da6fe04bf,09ab5591fab7e347406252fe71eb3f4da6fe04bf,Fixed a problem in the script engine that crashed the server if the reply was not stored just int the static buffer of the client structure.
antirez,2011-05-02 08:08:26,https://api.github.com/repos/antirez/redis/git/commits/0d916763afa44c2c6d5e28a4fe0f167197b00fc7,0d916763afa44c2c6d5e28a4fe0f167197b00fc7,Status replies converted in a special way like errors in the Lua <-> Redis conversion code.
antirez,2011-05-01 22:44:02,https://api.github.com/repos/antirez/redis/git/commits/e8092bf6014a34b04d1903b05f27915f38b09189,e8092bf6014a34b04d1903b05f27915f38b09189,Scripting doc updated
antirez,2011-05-01 22:36:25,https://api.github.com/repos/antirez/redis/git/commits/497fc8775fd4b85289a6998bb4eaddbe657e6be7,497fc8775fd4b85289a6998bb4eaddbe657e6be7,Eval command table fixed to return the keys arguments of the command. We use zunionInterGetKeys() as it ZUNION/ZINTER have exactly the same semantic with a prefixed number of keys followed by key names.
antirez,2011-05-01 22:12:37,https://api.github.com/repos/antirez/redis/git/commits/171ef6813d54882e4eebd018183f382f74db9102,171ef6813d54882e4eebd018183f382f74db9102,TODO updated
antirez,2011-05-01 21:43:10,https://api.github.com/repos/antirez/redis/git/commits/379789cc523df4de1a3263c879114610949fade1,379789cc523df4de1a3263c879114610949fade1,Fixed nul bulk parsing in Redis protocol to Lua type convertion. Check for bad Lua types as arguements of the redis() Lua command.
antirez,2011-05-01 13:50:33,https://api.github.com/repos/antirez/redis/git/commits/67e829dce561a5b99766fb873367e248cde388ae,67e829dce561a5b99766fb873367e248cde388ae,Scripting todo list updated
antirez,2011-05-01 13:48:26,https://api.github.com/repos/antirez/redis/git/commits/10a6da7af4bebad2b47a59d79609419aa98fae51,10a6da7af4bebad2b47a59d79609419aa98fae51,Multi bulk to Lua table now working
antirez,2011-05-01 13:26:47,https://api.github.com/repos/antirez/redis/git/commits/3791000f15ad793854fac48aa4840914970048db,3791000f15ad793854fac48aa4840914970048db,Fixed arity detection of Redis command executed from Lua script. Error reporting from Lua fixed. More work on the Redis reply to lua conversion code.
antirez,2011-05-01 12:47:52,https://api.github.com/repos/antirez/redis/git/commits/532e0f5ded866881d46f0aeac3756ebd3a3da98e,532e0f5ded866881d46f0aeac3756ebd3a3da98e,full conversion from Lua return value to redis reply. Partial conversion from Redis reply to Lua type.
antirez,2011-05-01 11:07:44,https://api.github.com/repos/antirez/redis/git/commits/4ae5b5e1633caffeb513c98dfd5f12364491182b,4ae5b5e1633caffeb513c98dfd5f12364491182b,pupulate the Lua global tables KEYS and ARGV before executing the script
antirez,2011-05-01 10:49:02,https://api.github.com/repos/antirez/redis/git/commits/00b7541b21f5d659a6fe650679c1f790fe6ea4b1,00b7541b21f5d659a6fe650679c1f790fe6ea4b1,function to access to Redis command from Lua renamed from r() to redis()
antirez,2011-05-01 01:27:40,https://api.github.com/repos/antirez/redis/git/commits/7b72272790268942b5f4f751c78ea6ed227b2bba,7b72272790268942b5f4f751c78ea6ed227b2bba,"when creating not connected clients do not add them into the clients list, otherwise they will be subject to timeouts and other stuff"
antirez,2011-05-01 01:12:53,https://api.github.com/repos/antirez/redis/git/commits/7156f43c040414494829a8dcd4a7be4c26d241d8,7156f43c040414494829a8dcd4a7be4c26d241d8,"Correctly glue the reply buffer. For now returned as it is to Lua, but will be converted into Lua native type later."
antirez,2011-04-30 20:29:21,https://api.github.com/repos/antirez/redis/git/commits/0f1d64ca577c8594e26b9e1663e49c8e1bc13757,0f1d64ca577c8594e26b9e1663e49c8e1bc13757,Lua call of Redis command work in progress: sorry I have to go to the cinema to watch the Source Code movie
antirez,2011-04-30 15:46:52,https://api.github.com/repos/antirez/redis/git/commits/7585836e6eb1c0199e8d9ea2c3f7a0f67b03c00b,7585836e6eb1c0199e8d9ea2c3f7a0f67b03c00b,"Lua function creation on EVAL, basic Lua return type to Redis protocol convertion done."
antirez,2011-04-30 14:15:30,https://api.github.com/repos/antirez/redis/git/commits/21d3294c7013a4385aebd84436394bb58e273093,21d3294c7013a4385aebd84436394bb58e273093,makefile adapted to link against lua lib and to pass the 32bit flag to Lua building system
antirez,2011-05-25 10:29:14,https://api.github.com/repos/antirez/redis/git/commits/efc3408748061a08ec5ff18e392c30f31f5094a2,efc3408748061a08ec5ff18e392c30f31f5094a2,"Fix for Pub/Sub system, introduced in Redis 2.2.6 with the new copy-on-write safe iterator semantics. In the hope this is the last bug I introduced this way."
antirez,2011-05-24 08:43:19,https://api.github.com/repos/antirez/redis/git/commits/27fee630f509fcca03e97e4d9632e967c81e60b8,27fee630f509fcca03e97e4d9632e967c81e60b8,Comment typo fixed
antirez,2011-05-24 08:35:48,https://api.github.com/repos/antirez/redis/git/commits/d200342ac2730c27cd456a79cc9e8725eaf0c5c2,d200342ac2730c27cd456a79cc9e8725eaf0c5c2,Fixed typo in comment
pietern,2011-05-22 10:57:30,https://api.github.com/repos/antirez/redis/git/commits/890a2ed989274cb09b5cde1def3935e110ec3cb9,890a2ed989274cb09b5cde1def3935e110ec3cb9,Configurable synchronous I/O timeout
pietern,2011-05-22 10:41:24,https://api.github.com/repos/antirez/redis/git/commits/b075621fb7d8b44b10d849e8db6db9b2498056ad,b075621fb7d8b44b10d849e8db6db9b2498056ad,Minor changes in non-blocking repl. connect
antirez,2011-05-20 09:45:05,https://api.github.com/repos/antirez/redis/git/commits/6326c3ce73e1d35cb585c0551bba9ac07cfbc7c1,6326c3ce73e1d35cb585c0551bba9ac07cfbc7c1,Merge branch 'unstable' of github.com:antirez/redis into unstable
antirez,2011-05-20 09:44:09,https://api.github.com/repos/antirez/redis/git/commits/206d62710c2cf35ae036f55d59c8a523ad22abd8,206d62710c2cf35ae036f55d59c8a523ad22abd8,Print version info before running the test
pietern,2011-05-19 16:53:06,https://api.github.com/repos/antirez/redis/git/commits/a3309139992de03f3e68ec648db188c1c43057a0,a3309139992de03f3e68ec648db188c1c43057a0,Non-blocking connect with master
antirez,2011-05-19 15:58:29,https://api.github.com/repos/antirez/redis/git/commits/521ddcce1483d1b8760a108fd5d7df0ae663799a,521ddcce1483d1b8760a108fd5d7df0ae663799a,Fix for ZUNIONSTORE bug when there is an empty set among input sets. Regression test added.
antirez,2011-05-19 15:58:29,https://api.github.com/repos/antirez/redis/git/commits/38a154a9a6244826a8cb536347a60749cef2ee4a,38a154a9a6244826a8cb536347a60749cef2ee4a,Fix for ZUNIONSTORE bug when there is an empty set among input sets. Regression test added.
antirez,2011-05-16 08:04:09,https://api.github.com/repos/antirez/redis/git/commits/19e84589304256f0581b056133c9cae6ea1e011b,19e84589304256f0581b056133c9cae6ea1e011b,Merge branch 'unstable'
antirez,2011-05-15 15:28:06,https://api.github.com/repos/antirez/redis/git/commits/cb16b6c3899d0696a7e633c29f764e06b222b2fe,cb16b6c3899d0696a7e633c29f764e06b222b2fe,Fixed misuse of the new iterator semantics in ZUNIONSTORE
antirez,2011-05-15 13:33:01,https://api.github.com/repos/antirez/redis/git/commits/d070abe44cdc63ece3533d06986629b5b5c21ca8,d070abe44cdc63ece3533d06986629b5b5c21ca8,Fix for a possible bug related to ZINTER/UNIONSTORE called with the same source set more than one time.
antirez,2011-05-15 10:15:54,https://api.github.com/repos/antirez/redis/git/commits/dd1eefa4f3c89177cbe4f2e98dbd8f409ff87bc6,dd1eefa4f3c89177cbe4f2e98dbd8f409ff87bc6,Fixed SINTER[STORE] problem related to the new copy on write safe iterator
pietern,2011-05-14 10:47:42,https://api.github.com/repos/antirez/redis/git/commits/041d8e2a5c3b36ff4661fb0444ebc48d24a33541,041d8e2a5c3b36ff4661fb0444ebc48d24a33541,Fix up rdbWriteRaw to return number of bytes written
pietern,2011-05-14 10:36:22,https://api.github.com/repos/antirez/redis/git/commits/7271198cf0eb4714fba706605ab8170363012cfa,7271198cf0eb4714fba706605ab8170363012cfa,Use rio.h functions in aof.c
pietern,2011-05-14 10:15:08,https://api.github.com/repos/antirez/redis/git/commits/fd535c58623852e480906311c48b136d3d2646bb,fd535c58623852e480906311c48b136d3d2646bb,More rioRead()
pietern,2011-05-13 21:24:19,https://api.github.com/repos/antirez/redis/git/commits/221782ccc69b4c56608942f3fe9e47773a32866e,221782ccc69b4c56608942f3fe9e47773a32866e,Move rdbLoad* to top; update comments
pietern,2011-05-13 20:14:39,https://api.github.com/repos/antirez/redis/git/commits/f1d8e4968ec50d04eea81b95ebb755d3b3080cdf,f1d8e4968ec50d04eea81b95ebb755d3b3080cdf,Make RDB types/opcodes explicit; load/save object type
pietern,2011-05-13 15:31:00,https://api.github.com/repos/antirez/redis/git/commits/2e4b0e7727743cf03d25da0f535ecc02aad82d1f,2e4b0e7727743cf03d25da0f535ecc02aad82d1f,Abstract file/buffer I/O to support in-memory serialization
antirez,2011-05-12 18:15:13,https://api.github.com/repos/antirez/redis/git/commits/70bc5f7724364e93c63865c02d517bc0164274d9,70bc5f7724364e93c63865c02d517bc0164274d9,replication with expire test modified to produce no or less false failures
antirez,2011-05-12 18:21:00,https://api.github.com/repos/antirez/redis/git/commits/06d22a8a8ac309be1c553e307afbf46d22020410,06d22a8a8ac309be1c553e307afbf46d22020410,Merge branch 'unstable' of github.com:antirez/redis into unstable
antirez,2011-05-12 18:20:25,https://api.github.com/repos/antirez/redis/git/commits/af9aed25e44cf6e0c38cee2d289c7c31f03fc01f,af9aed25e44cf6e0c38cee2d289c7c31f03fc01f,"ZINTERSTORE regressiont test with two sets, intset+hashtable"
antirez,2011-05-11 07:49:23,https://api.github.com/repos/antirez/redis/git/commits/defb5f66a090c614aa70aee9e1923ec571e0e911,defb5f66a090c614aa70aee9e1923ec571e0e911,removed assert causing an illegal memory access. This was responsible of crashes during BLPOP and other list blocking operations.
antirez,2011-05-10 12:05:59,https://api.github.com/repos/antirez/redis/git/commits/bfe85f7ca97259256e8089349e1a462b6c7dbd00,bfe85f7ca97259256e8089349e1a462b6c7dbd00,Merge branch 'unstable'
antirez,2011-05-10 09:31:37,https://api.github.com/repos/antirez/redis/git/commits/6b52ad87c05ca2162a2d21f1f5b5329bf52a7678,6b52ad87c05ca2162a2d21f1f5b5329bf52a7678,"RDB version signature bumped to 2, now that direct saving of specially encoded types is implemented 2.2 instances are no longer able to read rdb files produced by 2.4 or unstable."
antirez,2011-05-10 08:15:50,https://api.github.com/repos/antirez/redis/git/commits/4b53e7365c647235bbb3909596a7defe50709b67,4b53e7365c647235bbb3909596a7defe50709b67,Introduced a safe iterator interface that can be used to iterate while accessing the dictionary at the same time. Now the default interface is consireded unsafe and should be used only with dictNext()
antirez,2011-05-10 08:08:01,https://api.github.com/repos/antirez/redis/git/commits/f13cb0d9de088898cd879b3912ea3e3300fc9fdf,f13cb0d9de088898cd879b3912ea3e3300fc9fdf,DEBUG DIGEST additional lookup needed for VM removed from unstable branch that does not have VM at all
antirez,2011-05-10 08:07:04,https://api.github.com/repos/antirez/redis/git/commits/6901fe7729d31c07e8053d9fd29bde964050679c,6901fe7729d31c07e8053d9fd29bde964050679c,Useless statement removed
antirez,2011-05-07 09:47:34,https://api.github.com/repos/antirez/redis/git/commits/df541beae372f40e9ce82a0780171e7d7a8e67de,df541beae372f40e9ce82a0780171e7d7a8e67de,when Redis fails accepting a new connection reports the error at WARNING and not VERBOSE error level. Thanks to offby1 for proposing this in the Redis mailing list. #backport-candidate
antirez,2011-05-06 14:23:14,https://api.github.com/repos/antirez/redis/git/commits/8905378c569ba16e8636bc47404c97b952240096,8905378c569ba16e8636bc47404c97b952240096,Cluster TODO updated
antirez,2011-05-06 14:08:10,https://api.github.com/repos/antirez/redis/git/commits/0caa75074875ca5c13274accdd032c90db93b3c1,0caa75074875ca5c13274accdd032c90db93b3c1,clear importing/exporing state when appropriate on SETSLOT or ADDSLOTS cluster commands
antirez,2011-05-06 13:44:09,https://api.github.com/repos/antirez/redis/git/commits/f9cbdcb1a67e8903c976e588bbf24f0fe6bf2fac,f9cbdcb1a67e8903c976e588bbf24f0fe6bf2fac,CLUSTER SETSLOT command and some refactoring of the cluster command
antirez,2011-05-06 11:38:27,https://api.github.com/repos/antirez/redis/git/commits/f384df8302ccc6601f5833ae42e6b4664abd0ddc,f384df8302ccc6601f5833ae42e6b4664abd0ddc,CLUSTER DELSLOTS
antirez,2011-05-05 16:10:02,https://api.github.com/repos/antirez/redis/git/commits/a7b058dae612ad3ab31a2b2d6f07e5ff7fe06618,a7b058dae612ad3ab31a2b2d6f07e5ff7fe06618,"Fixed semantics of CLUSTER SETSLOT, SELECT now only denied in cluster mode if selected DB is not 0 so that MIGRATE still works well."
antirez,2011-05-05 15:56:12,https://api.github.com/repos/antirez/redis/git/commits/46834808fe31e7cbf08d6c9f7638a54c5c8bff8a,46834808fe31e7cbf08d6c9f7638a54c5c8bff8a,CLUSTER SETSLOT STABLE fixed
antirez,2011-05-05 15:52:19,https://api.github.com/repos/antirez/redis/git/commits/4763ecc9add311467c9c3852a81664a0b3005919,4763ecc9add311467c9c3852a81664a0b3005919,missing return caused protocol desync in CLUSTER SETSLOT
antirez,2011-05-05 15:50:14,https://api.github.com/repos/antirez/redis/git/commits/0276e5545c78490613871939d48989090a54c2c9,0276e5545c78490613871939d48989090a54c2c9,Fixed problem in cluster redirection due to a stupid typo
pietern,2011-04-27 12:38:58,https://api.github.com/repos/antirez/redis/git/commits/3edbcab95a2d5cec861ac28cbdb638ea25d22bb9,3edbcab95a2d5cec861ac28cbdb638ea25d22bb9,Extra tests for string2ll
pietern,2011-04-27 12:32:56,https://api.github.com/repos/antirez/redis/git/commits/c040cbd6252b493456ca910d7b1d1cf4122959d4,c040cbd6252b493456ca910d7b1d1cf4122959d4,"Check seplen and len before malloc'ing ""tokens"""
pietern,2011-04-27 12:29:27,https://api.github.com/repos/antirez/redis/git/commits/bf9fd5ffa248ac8a9c577eb2fc7fb6cd8a445113,bf9fd5ffa248ac8a9c577eb2fc7fb6cd8a445113,Check for \n after finding \r
pietern,2011-04-27 11:35:49,https://api.github.com/repos/antirez/redis/git/commits/32f99c5128fc46d5f4d40acbb65d204620432d0a,32f99c5128fc46d5f4d40acbb65d204620432d0a,Show memory allocator in INFO output
pietern,2011-04-27 11:30:32,https://api.github.com/repos/antirez/redis/git/commits/edf23aff0e316908b5d4ed1f2b21800865c6f7bf,edf23aff0e316908b5d4ed1f2b21800865c6f7bf,Use string2ll in ziplist code (faster)
pietern,2011-04-27 11:24:52,https://api.github.com/repos/antirez/redis/git/commits/5d08193126df54405dae3073c62b7c19ae03d1a4,5d08193126df54405dae3073c62b7c19ae03d1a4,Tests for string2ll; move isObject* to object.c
pietern,2011-04-27 11:16:23,https://api.github.com/repos/antirez/redis/git/commits/af0e51f2e15bc9c63d11229e64ce7884e1a1402a,af0e51f2e15bc9c63d11229e64ce7884e1a1402a,Move code
pietern,2011-04-19 21:54:43,https://api.github.com/repos/antirez/redis/git/commits/5282562117565c54ecf3153901a80a244a0577ba,5282562117565c54ecf3153901a80a244a0577ba,More allocators
pietern,2011-04-19 21:10:45,https://api.github.com/repos/antirez/redis/git/commits/ded614f803f56ad979da76485e74732ecdcc57fd,ded614f803f56ad979da76485e74732ecdcc57fd,Inline sdslen and sdsavail (thanks to @bitbckt)
pietern,2011-04-19 21:07:36,https://api.github.com/repos/antirez/redis/git/commits/9703b1b3dc59aa76a314373fff748e26bdd0466f,9703b1b3dc59aa76a314373fff748e26bdd0466f,Update hiredis
pietern,2011-04-18 19:09:12,https://api.github.com/repos/antirez/redis/git/commits/5af302011c80076447403b454c781cf210d1d715,5af302011c80076447403b454c781cf210d1d715,Use custom string2ll and strchr
pietern,2011-05-05 12:55:51,https://api.github.com/repos/antirez/redis/git/commits/b7d3bf51575525c0475a13941d8eb44f4800b9cd,b7d3bf51575525c0475a13941d8eb44f4800b9cd,Fix ziplist regression and update stresser
antirez,2011-05-05 09:13:21,https://api.github.com/repos/antirez/redis/git/commits/eda827f8b71b81a1170f5524c52bea7db249eb58,eda827f8b71b81a1170f5524c52bea7db249eb58,cluster import/export of hash slots implemented in the query redirection engine
antirez,2011-05-04 08:17:05,https://api.github.com/repos/antirez/redis/git/commits/35845afba07982407c7ce35dc5df5a70e21cb4f0,35845afba07982407c7ce35dc5df5a70e21cb4f0,Better pretty printed makefile output
antirez,2011-05-03 21:32:37,https://api.github.com/repos/antirez/redis/git/commits/0d8f1ac359e2c4d87a1417a9b8bc6bc7a093d1ac,0d8f1ac359e2c4d87a1417a9b8bc6bc7a093d1ac,initial pretty printing in makefile
antirez,2011-05-04 07:31:37,https://api.github.com/repos/antirez/redis/git/commits/0ba2932298e3e432f32441ebc5d95a86158d706c,0ba2932298e3e432f32441ebc5d95a86158d706c,CLUSTER SETSLOT implemented
antirez,2011-05-02 17:04:33,https://api.github.com/repos/antirez/redis/git/commits/66f2517feb78574cf0decb5669beb03245a1d72d,66f2517feb78574cf0decb5669beb03245a1d72d,render migrating and importing slots in cluster nodes info
antirez,2011-05-01 13:38:59,https://api.github.com/repos/antirez/redis/git/commits/74a640492fe2547ff6737d598b32896840c2bd1d,74a640492fe2547ff6737d598b32896840c2bd1d,Merge branch 'unstable' of github.com:antirez/redis into unstable
antirez,2011-05-01 13:36:47,https://api.github.com/repos/antirez/redis/git/commits/5cbe90dbfd5d9f46f5fa42e4e96a40a46d29b234,5cbe90dbfd5d9f46f5fa42e4e96a40a46d29b234,Fixed a problem with string2ll()
antirez,2011-04-29 15:34:03,https://api.github.com/repos/antirez/redis/git/commits/2f52dac9effe41f79e502c2c8fb78181c874a704,2f52dac9effe41f79e502c2c8fb78181c874a704,CLUSTER subcommands to set slots in migrating or importing state. Still a work in progress...
antirez,2011-04-29 14:17:58,https://api.github.com/repos/antirez/redis/git/commits/484354ff95e6e1b93552ef9576422709a1c739c2,484354ff95e6e1b93552ef9576422709a1c739c2,CLUSTER GETKEYSINSLOT implemented
antirez,2011-04-29 12:31:18,https://api.github.com/repos/antirez/redis/git/commits/1eb713a4c1e601bfc86963f7eab3fe36a0a65b17,1eb713a4c1e601bfc86963f7eab3fe36a0a65b17,CLUSTER KEYSLOT command
antirez,2011-04-29 12:18:16,https://api.github.com/repos/antirez/redis/git/commits/d37299e3b737addf5a2f6cd1ea47afabdf98730c,d37299e3b737addf5a2f6cd1ea47afabdf98730c,Fixed a bug with replication where SLAVEOF NO ONE caused a slave to close the connection with its slaves
antirez,2011-04-28 17:00:33,https://api.github.com/repos/antirez/redis/git/commits/c772d9c6e7a4b65075c6efd15a53e84bb3c7ba3f,c772d9c6e7a4b65075c6efd15a53e84bb3c7ba3f,"take a hashslot -> keys index, will be used for cluster rehasing"
pietern,2011-04-22 07:44:06,https://api.github.com/repos/antirez/redis/git/commits/45b0f6fb14f2a0d5bca0b4e32cb44a31e29aa921,45b0f6fb14f2a0d5bca0b4e32cb44a31e29aa921,Use correct argc/argv for cleanup when loading AOF
pietern,2011-04-22 07:37:28,https://api.github.com/repos/antirez/redis/git/commits/d8b6ae3cd6ac9cfab51696b9b35d3c70fa2d55ba,d8b6ae3cd6ac9cfab51696b9b35d3c70fa2d55ba,Reformat AOF tests
antirez,2011-04-21 14:56:31,https://api.github.com/repos/antirez/redis/git/commits/7e79dd3f4cf7a4236319f9ee1a408155eda4b881,7e79dd3f4cf7a4236319f9ee1a408155eda4b881,peak fragmentation ratio removed as it is a confusing field for users and trivial to compute at hand now that there is peak memory information in INFO output
antirez,2011-04-21 13:47:47,https://api.github.com/repos/antirez/redis/git/commits/b93fdb7bbb5b224efee06b36a12d454db975fed8,b93fdb7bbb5b224efee06b36a12d454db975fed8,CLIENT KILL implemented
antirez,2011-04-21 13:38:02,https://api.github.com/repos/antirez/redis/git/commits/3cd12b568776fcee3284ca692ad25e4ddce93c95,3cd12b568776fcee3284ca692ad25e4ddce93c95,CLIENT LIST implemented
antirez,2011-04-21 08:49:52,https://api.github.com/repos/antirez/redis/git/commits/17b24ff30d5c84c489a9793e35b7497519a878b9,17b24ff30d5c84c489a9793e35b7497519a878b9,save peak memory usage as statistic and show it in INFO. Also a new INFO field was added showing the fragmentation ratio using the peak memory info.
antirez,2011-04-20 10:51:03,https://api.github.com/repos/antirez/redis/git/commits/c7ba7b8bbb97e8b9e388ec0e9a2ea161c23a3fd0,c7ba7b8bbb97e8b9e388ec0e9a2ea161c23a3fd0,"removed check for zmalloc return NULL in createClient(). The check was misplaced, and zmalloc never returns NULL."
antirez,2011-04-19 15:37:03,https://api.github.com/repos/antirez/redis/git/commits/b3a96d454e9a4a7f8d88bb0e6f301427b5cfaa3e,b3a96d454e9a4a7f8d88bb0e6f301427b5cfaa3e,Variadic SREM
antirez,2011-04-19 15:07:55,https://api.github.com/repos/antirez/redis/git/commits/64a13a36e685c318319a70b775f91f2c34bcc34f,64a13a36e685c318319a70b775f91f2c34bcc34f,variadic HDEL with tests
antirez,2011-04-15 16:28:25,https://api.github.com/repos/antirez/redis/git/commits/271f08784264e25c3dbcd751f8c9ee1b1ad8306e,271f08784264e25c3dbcd751f8c9ee1b1ad8306e,Variadic SADD tests
antirez,2011-04-15 16:08:32,https://api.github.com/repos/antirez/redis/git/commits/22f294d24a1d56a655bdca69184e048e3ef49934,22f294d24a1d56a655bdca69184e048e3ef49934,variadic SADD
antirez,2011-04-15 16:08:24,https://api.github.com/repos/antirez/redis/git/commits/009db6764504746d64fef7e6ccf661f7882bd72e,009db6764504746d64fef7e6ccf661f7882bd72e,addReplyLongLong optimized to return shared objects when the value to reply is 0 or 1
antirez,2011-04-15 15:44:08,https://api.github.com/repos/antirez/redis/git/commits/2e667806ed0cb9db4ba55743efb4984447e19b4d,2e667806ed0cb9db4ba55743efb4984447e19b4d,"version bumped to 2.9, that is, 3.0 unstable"
antirez,2011-04-15 14:52:07,https://api.github.com/repos/antirez/redis/git/commits/9d0a8656c166f14b6a2f41d134518ffbc4bf8f25,9d0a8656c166f14b6a2f41d134518ffbc4bf8f25,tests for variadic list push
antirez,2011-04-15 14:35:54,https://api.github.com/repos/antirez/redis/git/commits/72dff2c084ce67464bded6bc9f5674d5e01b2cf7,72dff2c084ce67464bded6bc9f5674d5e01b2cf7,test fixed after ascii art banner modified the output of a running server
antirez,2011-04-15 14:35:27,https://api.github.com/repos/antirez/redis/git/commits/fb2feae599e2a190cfc6906ca9a03abc54528b61,fb2feae599e2a190cfc6906ca9a03abc54528b61,variadic LPUSH/RPUSH
antirez,2011-04-14 11:31:14,https://api.github.com/repos/antirez/redis/git/commits/7c0e1b53c4c4f646c788fcd09666e1c321c1d134,7c0e1b53c4c4f646c788fcd09666e1c321c1d134,Merge remote branch 'pietern/unstable-zset' into unstable
antirez,2011-04-14 07:41:22,https://api.github.com/repos/antirez/redis/git/commits/d0cfb2be643e5102cb24c3d22a1cf9cfc9df20d1,d0cfb2be643e5102cb24c3d22a1cf9cfc9df20d1,redis-trib: functions implementing commands moved at bottom
antirez,2011-04-13 19:26:12,https://api.github.com/repos/antirez/redis/git/commits/8bad0ddd9daff59137d1fc2c932bb39e77cabf4c,8bad0ddd9daff59137d1fc2c932bb39e77cabf4c,fixed bug due to typo in code
antirez,2011-04-13 18:17:11,https://api.github.com/repos/antirez/redis/git/commits/180ba187d3357b02d7efb1474466c98719fdb5cf,180ba187d3357b02d7efb1474466c98719fdb5cf,fixed typo in comment
antirez,2011-04-13 16:50:50,https://api.github.com/repos/antirez/redis/git/commits/9a440ad418ac8b753f08ba98c00c2b5e52f1ca78,9a440ad418ac8b753f08ba98c00c2b5e52f1ca78,fixed a typo in redis-trib
antirez,2011-04-13 16:46:29,https://api.github.com/repos/antirez/redis/git/commits/3883a381b6ea8354a7f830c3ac508ecba7ae9de2,3883a381b6ea8354a7f830c3ac508ecba7ae9de2,use map! instead of reassigning
antirez,2011-04-13 16:40:51,https://api.github.com/repos/antirez/redis/git/commits/583fc5dd6047b89f68690d38837eface3b015789,583fc5dd6047b89f68690d38837eface3b015789,hopefully more readable info_string method in redis-trib
antirez,2011-04-13 13:58:05,https://api.github.com/repos/antirez/redis/git/commits/57d83d5673947bcd2406fb04d4c37cc8428648c2,57d83d5673947bcd2406fb04d4c37cc8428648c2,"redis-trib create, first version is know working"
antirez,2011-04-13 13:39:43,https://api.github.com/repos/antirez/redis/git/commits/8231b1ef60e5b4068137c47765ca3907002fc530,8231b1ef60e5b4068137c47765ca3907002fc530,TODO updated
antirez,2011-04-13 09:42:05,https://api.github.com/repos/antirez/redis/git/commits/9d89e99c9946ab199d295db6faa1953252d7b80c,9d89e99c9946ab199d295db6faa1953252d7b80c,no longer useful debugging printf removed
antirez,2011-04-13 08:58:21,https://api.github.com/repos/antirez/redis/git/commits/996d503d1aab68bf0220951ab71a1ef9b8678b4a,996d503d1aab68bf0220951ab71a1ef9b8678b4a,ASCII ART FTW
antirez,2011-04-13 08:39:06,https://api.github.com/repos/antirez/redis/git/commits/a54d9805ee1c46d574aab8e349fd778d3a4bc67b,a54d9805ee1c46d574aab8e349fd778d3a4bc67b,Merge branch 'unstable' of github.com:antirez/redis into unstable
antirez,2011-04-13 08:38:56,https://api.github.com/repos/antirez/redis/git/commits/1087227d4140a3bf5f0248e411fa084ba3fe2bf4,1087227d4140a3bf5f0248e411fa084ba3fe2bf4,redis-trib: show list of commands
antirez,2011-04-12 17:21:03,https://api.github.com/repos/antirez/redis/git/commits/4e17be0ef542cea7c13291126cb35bc25d3af83d,4e17be0ef542cea7c13291126cb35bc25d3af83d,TODO update
antirez,2011-04-12 15:06:33,https://api.github.com/repos/antirez/redis/git/commits/744f34d834df8424fd201305fb469e540bb29020,744f34d834df8424fd201305fb469e540bb29020,redis-trib can now assign hash slots to initialize a cluster. Next step is to join the cluster.
antirez,2011-04-12 13:36:10,https://api.github.com/repos/antirez/redis/git/commits/d415f9ff41ed5b87de9baa7a9521431ed7d78d3c,d415f9ff41ed5b87de9baa7a9521431ed7d78d3c,Merge branch 'unstable' of github.com:antirez/redis into unstable
antirez,2011-04-11 19:47:45,https://api.github.com/repos/antirez/redis/git/commits/e9ee513b6a940ecd3e30a152d6ad2e8fb25147a5,e9ee513b6a940ecd3e30a152d6ad2e8fb25147a5,TODO modified
antirez,2011-04-11 16:26:00,https://api.github.com/repos/antirez/redis/git/commits/f29d1fb0b20d31c39ea4d092ecd4eb1e4d2f5e1b,f29d1fb0b20d31c39ea4d092ecd4eb1e4d2f5e1b,assert_empty in redis-trib
antirez,2011-04-11 15:40:35,https://api.github.com/repos/antirez/redis/git/commits/8c4c50906cc91d8dffbb22cb4a520d11a1c6344b,8c4c50906cc91d8dffbb22cb4a520d11a1c6344b,added known nodes info in CLUSTER INFO
antirez,2011-04-11 14:58:47,https://api.github.com/repos/antirez/redis/git/commits/b800a3ab20440fdd55947f52f3efcc689ef858d3,b800a3ab20440fdd55947f52f3efcc689ef858d3,a first refactoring of redis-trib.rb
antirez,2011-04-11 14:41:06,https://api.github.com/repos/antirez/redis/git/commits/407798c1e1552e1f5e583ead63ed6b7c8ea20299,407798c1e1552e1f5e583ead63ed6b7c8ea20299,Redis-trib initial implementation (currently can not do any actual work)
antirez,2011-04-11 14:39:39,https://api.github.com/repos/antirez/redis/git/commits/1c708b25ee663985bcfb91082f8acdd6c3cb7489,1c708b25ee663985bcfb91082f8acdd6c3cb7489,"added minimal cluster section in INFO output. This is only useful to check if the instance is or not configured as a cluster node, all the other informations are accessible using the CLUSTER command."
antirez,2011-04-08 12:19:52,https://api.github.com/repos/antirez/redis/git/commits/8d727af8c4d309463cd463689b50ffb299b61964,8d727af8c4d309463cd463689b50ffb299b61964,update state when FAIL is cleared from a node
antirez,2011-04-08 08:17:41,https://api.github.com/repos/antirez/redis/git/commits/fd7a584f7ab9a796338e3bd6cacf01ce5476bb91,fd7a584f7ab9a796338e3bd6cacf01ce5476bb91,do not process node failure messages about yourself
antirez,2011-04-07 21:33:18,https://api.github.com/repos/antirez/redis/git/commits/a55c7868c1d66c491399895c1274cb300c983a95,a55c7868c1d66c491399895c1274cb300c983a95,fixed lame error in slot assignment
antirez,2011-04-07 21:23:27,https://api.github.com/repos/antirez/redis/git/commits/5a547b27f7e4a12ac6ecd4e0b7f7c25841018deb,5a547b27f7e4a12ac6ecd4e0b7f7c25841018deb,evaluate cluster state after config load. Still bugs in the slot allocation after nodes config load to fix.
antirez,2011-04-07 21:10:32,https://api.github.com/repos/antirez/redis/git/commits/93666e583cf344ff97e87503c77d9b3020ab357b,93666e583cf344ff97e87503c77d9b3020ab357b,master node without slaves rejoin fixed
antirez,2011-04-07 21:06:01,https://api.github.com/repos/antirez/redis/git/commits/152d937b8ca02ab8d6ccd038d6f49d3b0ab51a42,152d937b8ca02ab8d6ccd038d6f49d3b0ab51a42,when loading config set the ping/pong timestaps to the current value. Even a node in FAIL state can be accepted again if there are no slaves for this node so election was not possible
antirez,2011-04-07 19:34:41,https://api.github.com/repos/antirez/redis/git/commits/1793752d97d72c82ce237b461165d5a06c44587e,1793752d97d72c82ce237b461165d5a06c44587e,node cluster configuration file configurable via redis.conf
antirez,2011-04-07 17:22:24,https://api.github.com/repos/antirez/redis/git/commits/2bc52b2c028c8b1b1d22052ecd689439a488fbf7,2bc52b2c028c8b1b1d22052ecd689439a488fbf7,useless newline removed from log message
antirez,2011-04-07 17:04:16,https://api.github.com/repos/antirez/redis/git/commits/d01a6bb3f92d96747dad229c3d28244cb42bf7e9,d01a6bb3f92d96747dad229c3d28244cb42bf7e9,fixes to configuration loading and saving. However there is to still fix the logic for reconnection/behavior of nodes after a restart.
antirez,2011-04-07 15:46:28,https://api.github.com/repos/antirez/redis/git/commits/92690d29fee4822a0e6280c0fe8afb8a6ff04671,92690d29fee4822a0e6280c0fe8afb8a6ff04671,first version of cluster config loading code
antirez,2011-04-07 10:55:02,https://api.github.com/repos/antirez/redis/git/commits/726a39c15ff5d89f0d44a32cca8869cf0589f929,726a39c15ff5d89f0d44a32cca8869cf0589f929,initial cluster config load code
pietern,2011-04-06 14:39:18,https://api.github.com/repos/antirez/redis/git/commits/02e600653216cebc0746bfbb86b353667a843591,02e600653216cebc0746bfbb86b353667a843591,Explicitly zero zval since it is stored on the stack
pietern,2011-04-06 14:38:29,https://api.github.com/repos/antirez/redis/git/commits/d4d3a70da2c9be4c5aa67a0be735568dbe436568,d4d3a70da2c9be4c5aa67a0be735568dbe436568,Update target encoding for sorted set from rdb
pietern,2011-04-06 14:17:07,https://api.github.com/repos/antirez/redis/git/commits/100ed062c0e3fa7d1a369de083aee619e27c8b2b,100ed062c0e3fa7d1a369de083aee619e27c8b2b,Test for ENCODING_SKIPLIST instead of ENCODING_RAW
pietern,2011-04-06 14:15:15,https://api.github.com/repos/antirez/redis/git/commits/4cc4d1648b3b4c01bf7568694a88e2ef3f70b2bf,4cc4d1648b3b4c01bf7568694a88e2ef3f70b2bf,Typo
pietern,2011-04-06 14:15:01,https://api.github.com/repos/antirez/redis/git/commits/7d8c555e92954b02d40c15702476fd48e55c4f94,7d8c555e92954b02d40c15702476fd48e55c4f94,"Merge branch 'unstable' into unstable-zset

Conflicts:
	src/object.c"
antirez,2011-04-06 13:36:10,https://api.github.com/repos/antirez/redis/git/commits/0b7f6d0913f96f2fe8280afc681c6e0a65ca81c9,0b7f6d0913f96f2fe8280afc681c6e0a65ca81c9,"make sure that OBJECT ENCODING returns skiplist for sorted sets, and not raw, so that once we will merge specially encoded sorted sets everything will make sense."
antirez,2011-04-06 10:19:45,https://api.github.com/repos/antirez/redis/git/commits/ece74202bbb2ff6b97b407755d5b9206db82cb17,ece74202bbb2ff6b97b407755d5b9206db82cb17,OBJECT command implemented
antirez,2011-04-05 11:57:28,https://api.github.com/repos/antirez/redis/git/commits/f797c7dc176c833e6aa412c557d7fedd59dc1124,f797c7dc176c833e6aa412c557d7fedd59dc1124,bad data on RESTORE can no longer crash the server but create a memory leak with some input string
antirez,2011-04-01 17:00:21,https://api.github.com/repos/antirez/redis/git/commits/f304f22b22b2d3a09b9ab533f4cdcf4632858861,f304f22b22b2d3a09b9ab533f4cdcf4632858861,Merge branch 'unstable' of github.com:antirez/redis into unstable
antirez,2011-04-01 16:59:28,https://api.github.com/repos/antirez/redis/git/commits/626f6b2d644b2458184edf9318f24ce95ba83532,626f6b2d644b2458184edf9318f24ce95ba83532,"DUMP implemented, RESTORE and MIGRATE fixed. Use zcalloc() instead of zmalloc()+memset() in sds.c when a new string is created with NULL initialization pointer."
antirez,2011-03-31 17:52:15,https://api.github.com/repos/antirez/redis/git/commits/5b94b8ac5d10dded6bb79909c660fe8d3f3ba677,5b94b8ac5d10dded6bb79909c660fe8d3f3ba677,fixed memory leak introduced with the previous commit. Many thanks to Pieter Noordhuis for spotting it in no time
antirez,2011-03-31 14:44:43,https://api.github.com/repos/antirez/redis/git/commits/25ef31920adad5c52a1f5dbe7fd307d4abec5862,25ef31920adad5c52a1f5dbe7fd307d4abec5862,"Fixed issue #503. MONITOR + QUIT could crash the server, there are actually other interactions that could have the same effect (for instance Pub/Sub)."
antirez,2011-03-30 16:12:51,https://api.github.com/repos/antirez/redis/git/commits/6c390c0b2303247c16f42160fec3fd609cb99cb7,6c390c0b2303247c16f42160fec3fd609cb99cb7,minor change with no actual effects til the loading node config code is in place
antirez,2011-03-30 15:41:13,https://api.github.com/repos/antirez/redis/git/commits/ef21ab960e061e84ee0e8ba81900750e32179215,ef21ab960e061e84ee0e8ba81900750e32179215,centralized cluster config file name. Assigned slots in CLUSTER NODES output and in cluster config file.
antirez,2011-03-30 14:51:28,https://api.github.com/repos/antirez/redis/git/commits/4b72c5617f1b9a53daad5bb58bfc7faf05c8169a,4b72c5617f1b9a53daad5bb58bfc7faf05c8169a,fix to configuration saving on first start
antirez,2011-03-30 12:58:19,https://api.github.com/repos/antirez/redis/git/commits/c7c7cfbddca1325e600e5c0fd4cfcfde38cc0758,c7c7cfbddca1325e600e5c0fd4cfcfde38cc0758,cluster configuration saving
antirez,2011-03-29 16:02:34,https://api.github.com/repos/antirez/redis/git/commits/e6f0a7b237b19881d73b145960ed68202f4bde49,e6f0a7b237b19881d73b145960ed68202f4bde49,todo list for a first cluster howto guide for early testers
antirez,2011-03-29 15:52:02,https://api.github.com/repos/antirez/redis/git/commits/143d0077ba07fba8d662092c309d51b99270e648,143d0077ba07fba8d662092c309d51b99270e648,CLUSTER file updated with warning
antirez,2011-03-29 15:51:15,https://api.github.com/repos/antirez/redis/git/commits/ecc9109434002d4667cd01a3b7c067a508c876eb,ecc9109434002d4667cd01a3b7c067a508c876eb,Cluster branch merged to unstable.
antirez,2011-03-29 09:04:55,https://api.github.com/repos/antirez/redis/git/commits/b46251d92970468f5e55e06db1f580acf1fab1c4,b46251d92970468f5e55e06db1f580acf1fab1c4,TODO modified
antirez,2011-03-29 08:54:38,https://api.github.com/repos/antirez/redis/git/commits/cc1cb7e5408291919922ded1aa3921f6b55c6307,cc1cb7e5408291919922ded1aa3921f6b55c6307,Merge remote branch 'origin/getkeys' into unstable
antirez,2011-03-28 17:03:57,https://api.github.com/repos/antirez/redis/git/commits/a07bc9269234bba1f51211bff304ce9caa15a9fb,a07bc9269234bba1f51211bff304ce9caa15a9fb,Preloading messages log level changed from WARNING to DEBUG
antirez,2011-03-28 16:46:22,https://api.github.com/repos/antirez/redis/git/commits/4b61ca460c5d043b9d199a4e4991bfac5dde66c5,4b61ca460c5d043b9d199a4e4991bfac5dde66c5,fixed a bug in RENAME getKeys() function
antirez,2011-03-28 16:21:06,https://api.github.com/repos/antirez/redis/git/commits/6e1b9b58ec6ae895da686015d82d4f121f1bfb85,6e1b9b58ec6ae895da686015d82d4f121f1bfb85,bug fixed in zunionstore specific getKeys() implementation
antirez,2011-03-28 15:54:42,https://api.github.com/repos/antirez/redis/git/commits/b4b5144694a4134544221a5587b81a98aec608be,b4b5144694a4134544221a5587b81a98aec608be,Fixes to the new preloading / key discovery APIs
antirez,2011-03-28 15:29:26,https://api.github.com/repos/antirez/redis/git/commits/42b2621cdc4dfc47f90cf1085761ad89171a6a60,42b2621cdc4dfc47f90cf1085761ad89171a6a60,implemented preload of EXEC using the new getKeys() system
antirez,2011-03-23 22:13:34,https://api.github.com/repos/antirez/redis/git/commits/b8513c9398c3ab169ca77999cd8212134f29dc9b,b8513c9398c3ab169ca77999cd8212134f29dc9b,Merge branch 'unstable'
antirez,2011-03-23 22:13:15,https://api.github.com/repos/antirez/redis/git/commits/a3cf9041218518f235a297b2f2d0d08ef9a5c4e5,a3cf9041218518f235a297b2f2d0d08ef9a5c4e5,minor style change
antirez,2011-03-23 17:09:17,https://api.github.com/repos/antirez/redis/git/commits/9791f0f8ceb18e2e3c297a8c479307b7af0f9830,9791f0f8ceb18e2e3c297a8c479307b7af0f9830,"new preloading implemented, still EXEC not handled correctly, everything to test"
antirez,2011-03-22 21:49:12,https://api.github.com/repos/antirez/redis/git/commits/e360e3bb7e58fd493c71911caab948e05e7fbe85,e360e3bb7e58fd493c71911caab948e05e7fbe85,Fixed sdssplitargs() handling of hex-style escapes.
antirez,2011-03-22 18:35:42,https://api.github.com/repos/antirez/redis/git/commits/03af999cb0befed9d2556c2df1eb0511de2d96d2,03af999cb0befed9d2556c2df1eb0511de2d96d2,command table altered for the new API to get position of keys arguments in commands
pietern,2011-03-22 08:28:40,https://api.github.com/repos/antirez/redis/git/commits/04a10b1a6d372bd7a1105150194881eccbfd5620,04a10b1a6d372bd7a1105150194881eccbfd5620,Test that sorted sets are removed when empty
pietern,2011-03-21 22:54:35,https://api.github.com/repos/antirez/redis/git/commits/48991620f71485a5fa056736796b620eab1387a9,48991620f71485a5fa056736796b620eab1387a9,Remove sorted set when empty after ZREMRANGEBY*
antirez,2011-03-20 17:24:49,https://api.github.com/repos/antirez/redis/git/commits/612810af6e4456d14a7d68f01ce35905b2ff89d9,612810af6e4456d14a7d68f01ce35905b2ff89d9,sdscatrepr() fixed. Now newlines and other special chars are escaped correctly
antirez,2011-03-15 09:47:04,https://api.github.com/repos/antirez/redis/git/commits/4eddb121563a9e50cf2ee66e2a0ff7c186dd696a,4eddb121563a9e50cf2ee66e2a0ff7c186dd696a,gitignore updated
pietern,2011-03-14 12:30:06,https://api.github.com/repos/antirez/redis/git/commits/dddf5335f47d62d5e74308faff8dcb5d0575286c,dddf5335f47d62d5e74308faff8dcb5d0575286c,"Fix DEBUG DIGEST, SORT and AOF rewrite"
pietern,2011-03-14 09:50:35,https://api.github.com/repos/antirez/redis/git/commits/9ec4ea20a71f075a7fc9a2e1d613c339353ee553,9ec4ea20a71f075a7fc9a2e1d613c339353ee553,Test both sorted set encodings for every test
pietern,2011-03-13 17:15:57,https://api.github.com/repos/antirez/redis/git/commits/69298a05eb23cbbf60f9008faa2e11866ab4352a,69298a05eb23cbbf60f9008faa2e11866ab4352a,Offset should be size_t
pietern,2011-03-12 13:48:29,https://api.github.com/repos/antirez/redis/git/commits/72690afdd26b118589ddec3915cdb4790b9d4812,72690afdd26b118589ddec3915cdb4790b9d4812,Remove unused function
pietern,2011-03-11 17:17:53,https://api.github.com/repos/antirez/redis/git/commits/e53ca04b50b86ef158a75c54ae9ee8b17e31719c,e53ca04b50b86ef158a75c54ae9ee8b17e31719c,Test for empty inner range when looking for elements in range
pietern,2011-03-11 16:06:07,https://api.github.com/repos/antirez/redis/git/commits/8588bfa370749b24922c0c8f477c562736626421,8588bfa370749b24922c0c8f477c562736626421,Make zzl API unaware of the robj where the ziplist is stored
pietern,2011-03-10 16:50:13,https://api.github.com/repos/antirez/redis/git/commits/df26a0ae0b419124efad82df148b84c6c6164615,df26a0ae0b419124efad82df148b84c6c6164615,Encode sorted set after loading from dump
pietern,2011-03-10 16:02:05,https://api.github.com/repos/antirez/redis/git/commits/255eebe22167e00f74e359bc71718225d6bd70c8,255eebe22167e00f74e359bc71718225d6bd70c8,Convert encoding of result when in limits
pietern,2011-03-10 15:53:20,https://api.github.com/repos/antirez/redis/git/commits/dba3a153a7ac9a1ec81e8f3034714d4900235a00,dba3a153a7ac9a1ec81e8f3034714d4900235a00,Remove comment
antirez,2011-03-10 15:47:09,https://api.github.com/repos/antirez/redis/git/commits/7226cbd1d978b15d4379e7f643595de35b5b3779,7226cbd1d978b15d4379e7f643595de35b5b3779,Merge branch 'unstable'
antirez,2011-03-10 15:39:19,https://api.github.com/repos/antirez/redis/git/commits/0aed6a952a0acf5a02ec4b588031ec3dc231a68c,0aed6a952a0acf5a02ec4b588031ec3dc231a68c,fixed diskstore race condition
antirez,2011-03-10 15:39:19,https://api.github.com/repos/antirez/redis/git/commits/7493d2a0325fe33dc75317bfedf9b1c1e5b0d0b5,7493d2a0325fe33dc75317bfedf9b1c1e5b0d0b5,fixed diskstore race condition
pietern,2011-03-10 15:34:52,https://api.github.com/repos/antirez/redis/git/commits/56ce42faf168cafeb9dee681ab269b1fb98b197d,56ce42faf168cafeb9dee681ab269b1fb98b197d,Generic iterator code for usage in ZUNIONSTORE/ZINTERSTORE
pietern,2011-03-10 15:17:14,https://api.github.com/repos/antirez/redis/git/commits/bbfe232f607f10655b6f9bf1d8f91830bb3ba413,bbfe232f607f10655b6f9bf1d8f91830bb3ba413,Make zzlLength take a ziplist argument
pietern,2011-03-10 15:16:27,https://api.github.com/repos/antirez/redis/git/commits/d4e07f171472a99a63c47b1fb6ab8a0a071ae945,d4e07f171472a99a63c47b1fb6ab8a0a071ae945,Add new string to long long function
antirez,2011-03-09 18:14:04,https://api.github.com/repos/antirez/redis/git/commits/dc75b1edfb2d5935246d2b3f97a04474c1296008,dc75b1edfb2d5935246d2b3f97a04474c1296008,encoding agnostic intsets
antirez,2011-03-09 17:49:59,https://api.github.com/repos/antirez/redis/git/commits/f22043745015281f76f3d3bc7f16afe3de731af9,f22043745015281f76f3d3bc7f16afe3de731af9,ziplist are now endianess agnostic
antirez,2011-03-09 16:31:02,https://api.github.com/repos/antirez/redis/git/commits/336c82d58379205b789f3ca9cefc7c2090808fb8,336c82d58379205b789f3ca9cefc7c2090808fb8,"zipmaps are now endianess agnostic, needed for on disk serialization of zipmaps without convertions layers"
antirez,2011-03-09 16:28:16,https://api.github.com/repos/antirez/redis/git/commits/b5325132f1c8bc90e6c87392c54724ca33388ee8,b5325132f1c8bc90e6c87392c54724ca33388ee8,memrev variants only doing the work if the target host is big endian
antirez,2011-03-09 15:36:02,https://api.github.com/repos/antirez/redis/git/commits/bcde63785d6c6e54ae71216df8bec276f2c85155,bcde63785d6c6e54ae71216df8bec276f2c85155,TODO updated
antirez,2011-03-09 15:33:09,https://api.github.com/repos/antirez/redis/git/commits/48e46215909d5161db838a596bb3ec334c86c6d7,48e46215909d5161db838a596bb3ec334c86c6d7,Ehm... sorry if we don't support PDP endianess
antirez,2011-03-09 15:24:18,https://api.github.com/repos/antirez/redis/git/commits/e12cb14308ab2719b506762e662ab179f31aceb9,e12cb14308ab2719b506762e662ab179f31aceb9,"endianess conversion API, to be applied to specially encoded data types for arch agnostic encoding."
pietern,2011-03-09 15:13:39,https://api.github.com/repos/antirez/redis/git/commits/cc4c964b33ac108c9541e31eb2e2420addf9a82e,cc4c964b33ac108c9541e31eb2e2420addf9a82e,Fix used function in ZCARD
pietern,2011-03-09 15:13:06,https://api.github.com/repos/antirez/redis/git/commits/a669d5e99945b873279eadfcf289181956cb62c3,a669d5e99945b873279eadfcf289181956cb62c3,Convert encoding when thresholds overflow
antirez,2011-03-09 14:44:21,https://api.github.com/repos/antirez/redis/git/commits/b1a8e3e89e7824e0375b149e487f9ff1012a2100,b1a8e3e89e7824e0375b149e487f9ff1012a2100,byte ordering detection in config.h
pietern,2011-03-09 13:01:57,https://api.github.com/repos/antirez/redis/git/commits/3ea204e1031a94dafca7f7e4eed2f79ec3bd7fd0,3ea204e1031a94dafca7f7e4eed2f79ec3bd7fd0,Configurable thresholds for encoded sorted sets
pietern,2011-03-09 12:16:38,https://api.github.com/repos/antirez/redis/git/commits/e12b27acf72ee7e40a6a39ffc7c109914c584cd9,e12b27acf72ee7e40a6a39ffc7c109914c584cd9,Persistence code for encoded sorted sets
pietern,2011-03-09 11:37:59,https://api.github.com/repos/antirez/redis/git/commits/d1c920c53869907debf8a0f81ea320218fe95214,d1c920c53869907debf8a0f81ea320218fe95214,Support dual encoding for more commands
pietern,2011-03-09 10:29:21,https://api.github.com/repos/antirez/redis/git/commits/aff255c81df8bd27ff53a21dd7ece5595f2ed8a9,aff255c81df8bd27ff53a21dd7ece5595f2ed8a9,Support dual encoding for ZRANGEBYSCORE et al
pietern,2011-03-09 10:06:25,https://api.github.com/repos/antirez/redis/git/commits/4c5f0966b2e582981d9fdaf3b511c6cf4ac4d4d5,4c5f0966b2e582981d9fdaf3b511c6cf4ac4d4d5,Helpers to move around in encoded sorted set
pietern,2011-03-09 09:30:55,https://api.github.com/repos/antirez/redis/git/commits/63b7b7fb34984b47971a4ced65ae49b6c7a350fa,63b7b7fb34984b47971a4ced65ae49b6c7a350fa,Support dual encoding for ZREMRANGEBYRANK
pietern,2011-03-08 23:00:19,https://api.github.com/repos/antirez/redis/git/commits/5d1b4fb6983f5acd9cfb6ee5f5715547688448d2,5d1b4fb6983f5acd9cfb6ee5f5715547688448d2,Support dual encoding for ZRANGE
pietern,2011-03-08 22:56:59,https://api.github.com/repos/antirez/redis/git/commits/0f23eb3b10402bd7166c09583333c29aa3c3f55f,0f23eb3b10402bd7166c09583333c29aa3c3f55f,Properly free encoded sorted set
pietern,2011-03-08 21:23:56,https://api.github.com/repos/antirez/redis/git/commits/4a14dbbac2eb6148c50212222beb2639ecbc8760,4a14dbbac2eb6148c50212222beb2639ecbc8760,Look up and remove elements by range
pietern,2011-03-08 21:14:46,https://api.github.com/repos/antirez/redis/git/commits/9f9b60f974cb57923c88a585a75db4b82711288b,9f9b60f974cb57923c88a585a75db4b82711288b,Typo
pietern,2011-03-08 20:36:43,https://api.github.com/repos/antirez/redis/git/commits/8218db3dae220409f239a5a0adb47d106b178bf9,8218db3dae220409f239a5a0adb47d106b178bf9,Little less obfuscation
pietern,2011-03-08 16:11:15,https://api.github.com/repos/antirez/redis/git/commits/0b10e1044496699585b401196dd86e19a9f87cc4,0b10e1044496699585b401196dd86e19a9f87cc4,Support dual encoding in ZREM
antirez,2011-03-08 15:52:39,https://api.github.com/repos/antirez/redis/git/commits/e270a7fa58d242d3cef9ebfe4724719b92afe7d6,e270a7fa58d242d3cef9ebfe4724719b92afe7d6,removed useless call
pietern,2011-03-08 15:51:41,https://api.github.com/repos/antirez/redis/git/commits/3ca7532a2d20ea88109cd4f0c3c527c37e3fe52f,3ca7532a2d20ea88109cd4f0c3c527c37e3fe52f,Don't encode element argument when dealing with ziplist
pietern,2011-03-08 15:44:22,https://api.github.com/repos/antirez/redis/git/commits/21c5b508a48270257567ea223fb0766553501303,21c5b508a48270257567ea223fb0766553501303,Initial work for ziplist backed sorted sets
pietern,2011-03-08 15:08:52,https://api.github.com/repos/antirez/redis/git/commits/9e7cee0ed01246e898eac500330c6a16e9dbfddb,9e7cee0ed01246e898eac500330c6a16e9dbfddb,Add function to create ziplist-backed sorted set
pietern,2011-03-08 11:30:01,https://api.github.com/repos/antirez/redis/git/commits/672b0a1b25023fd6df826af6c7570e23d3ac3443,672b0a1b25023fd6df826af6c7570e23d3ac3443,Fast conversion of double when representable as long long
antirez,2011-03-08 14:55:34,https://api.github.com/repos/antirez/redis/git/commits/3a21cb99e51403eb0469803abc6f894f468948f1,3a21cb99e51403eb0469803abc6f894f468948f1,same final call of two if branches moved outside
antirez,2011-03-08 14:10:20,https://api.github.com/repos/antirez/redis/git/commits/e09b51869b355644e4f481634729ed2903acad97,e09b51869b355644e4f481634729ed2903acad97,useless function removed
antirez,2011-03-08 14:03:51,https://api.github.com/repos/antirez/redis/git/commits/c5b6f461321e9b3075eed9f55989ca1d0d18394e,c5b6f461321e9b3075eed9f55989ca1d0d18394e,comment typo fixed
pietern,2011-02-10 10:49:59,https://api.github.com/repos/antirez/redis/git/commits/45290ad9bb9c535d6447852327ceb458573afff6,45290ad9bb9c535d6447852327ceb458573afff6,Rename zset range functions
pietern,2011-01-17 10:10:30,https://api.github.com/repos/antirez/redis/git/commits/8e1b327706ca39f9efb8967653b365ca81a52425,8e1b327706ca39f9efb8967653b365ca81a52425,Test for ranges where min > max
pietern,2011-01-13 15:06:03,https://api.github.com/repos/antirez/redis/git/commits/df278b8b0b4bd54b83840d4a151e538c60dc92e9,df278b8b0b4bd54b83840d4a151e538c60dc92e9,Compiler should decide on inlining
pietern,2010-12-07 22:21:05,https://api.github.com/repos/antirez/redis/git/commits/22b9bf15949933b351525ae658dc32e40e5784ab,22b9bf15949933b351525ae658dc32e40e5784ab,"Move logic concerned with zset ranges

This also optimizes ZREVRANGEBYSCORE for pathological cases where a
sorted set contains many elements with the same score. Previously,
it would traverse the list from back to front in such a case."
pietern,2010-12-09 09:37:35,https://api.github.com/repos/antirez/redis/git/commits/a30047736806e54af0459a2c41767bf0ebc6a572,a30047736806e54af0459a2c41767bf0ebc6a572,Undo rename of function names where something went wrong
antirez,2011-03-07 11:22:00,https://api.github.com/repos/antirez/redis/git/commits/c2f816b4233355b6b8426572bd6e2c024fa24193,c2f816b4233355b6b8426572bd6e2c024fa24193,Merge remote branch 'pietern/unstable-sigs' into unstable
pietern,2011-03-06 20:14:40,https://api.github.com/repos/antirez/redis/git/commits/3f4eef215b321a4e7c4f968cfc614ff51a5a576e,3f4eef215b321a4e7c4f968cfc614ff51a5a576e,Show database number in cli prompt when non-zero
pietern,2011-03-06 19:46:40,https://api.github.com/repos/antirez/redis/git/commits/96e34b3ce11e4cda35b9127b6a75756fb42f12ba,96e34b3ce11e4cda35b9127b6a75756fb42f12ba,Store SELECTed database for reconnect (issue #468)
pietern,2011-03-06 19:13:01,https://api.github.com/repos/antirez/redis/git/commits/33753a732a492cfb2cabb0875b33728d62dd1bbe,33753a732a492cfb2cabb0875b33728d62dd1bbe,Minor memory leak in redis-cli (issue #464)
pietern,2011-03-06 19:00:08,https://api.github.com/repos/antirez/redis/git/commits/ca36b4ab31be1a1fea24f422028c07c6eeb21120,ca36b4ab31be1a1fea24f422028c07c6eeb21120,Only save history when stdin is a tty (issue #465)
pietern,2011-03-06 16:49:22,https://api.github.com/repos/antirez/redis/git/commits/633a941028ad60bfad1bdeee95edaeba6109304f,633a941028ad60bfad1bdeee95edaeba6109304f,Save RDB on SIGTERM (see issue #471)
antirez,2011-03-04 17:10:43,https://api.github.com/repos/antirez/redis/git/commits/d9fac6c07a08c577d70f529a612ae87e101ebbdb,d9fac6c07a08c577d70f529a612ae87e101ebbdb,possible fix for a failed assertion introduced with the latest diskstore speedup fix
antirez,2011-03-04 15:22:50,https://api.github.com/repos/antirez/redis/git/commits/0b537972f48a432cd5799d9b516d4526ea1ffef7,0b537972f48a432cd5799d9b516d4526ea1ffef7,Fixed return value of GETRANGE / SUBSTR
antirez,2011-03-04 15:13:54,https://api.github.com/repos/antirez/redis/git/commits/4aec2ec8c4226f3894418c33f865e14866f2b283,4aec2ec8c4226f3894418c33f865e14866f2b283,AOF file descriptor leak fixed
antirez,2011-03-04 14:49:01,https://api.github.com/repos/antirez/redis/git/commits/15db4aa00636e8ec60767fedec364a7d66ccb26c,15db4aa00636e8ec60767fedec364a7d66ccb26c,TTL command fixed to work reliably with diskstore
antirez,2011-03-04 14:45:38,https://api.github.com/repos/antirez/redis/git/commits/8b108ed3075f56d5d261e41e03c8e1fcfd764451,8b108ed3075f56d5d261e41e03c8e1fcfd764451,debugging message moved from REDIS_WARING to REDIS_DEBUG
antirez,2011-03-01 14:20:35,https://api.github.com/repos/antirez/redis/git/commits/be14f38de642ee1082aa991b6b1e94ea6ae9dcdc,be14f38de642ee1082aa991b6b1e94ea6ae9dcdc,Redis manifesto added
antirez,2011-02-28 16:55:05,https://api.github.com/repos/antirez/redis/git/commits/1213abe477e7eefcb1d1694f7ba99b8eb3016e99,1213abe477e7eefcb1d1694f7ba99b8eb3016e99,fix type in rdbSaveKeyValuePair() when saving an intset. Don't merge this commit into 2.2 as will not apply cleanly.
antirez,2011-02-28 16:53:47,https://api.github.com/repos/antirez/redis/git/commits/26117e84f01022b261452d6cae54616d08a31074,26117e84f01022b261452d6cae54616d08a31074,direct saving of specially encoded types implemented for lists and sets too
antirez,2011-02-28 16:36:12,https://api.github.com/repos/antirez/redis/git/commits/0a04b5f5a0caf3c59afc46aea7b1f6a9beea35df,0a04b5f5a0caf3c59afc46aea7b1f6a9beea35df,define name typo fixed
antirez,2011-02-28 16:06:31,https://api.github.com/repos/antirez/redis/git/commits/9ad853ccde374ed371efee3b1654c6ebb39e06fa,9ad853ccde374ed371efee3b1654c6ebb39e06fa,added new RDB codes for ziplist encoded lists and intset encodeed sets
antirez,2011-02-28 16:06:09,https://api.github.com/repos/antirez/redis/git/commits/9fa7beb515902ec0dd08b90f443a3d9c0734ea04,9fa7beb515902ec0dd08b90f443a3d9c0734ea04,save ziplist encoded type as a different type id. Done as separated commit since this is the part that will not merge cleanly in 2.2
antirez,2011-02-28 15:55:34,https://api.github.com/repos/antirez/redis/git/commits/f8956ed6d88fde242de8676dd615019b2c7e734e,f8956ed6d88fde242de8676dd615019b2c7e734e,convert the zipmap into hash in rdb loading if the zipmap has too many elements
antirez,2011-02-28 14:31:54,https://api.github.com/repos/antirez/redis/git/commits/4d60dea85394c29d47e28709e02b974b448b0af2,4d60dea85394c29d47e28709e02b974b448b0af2,RDB/AOF loading times logged with millisecond precision
antirez,2011-02-28 14:13:49,https://api.github.com/repos/antirez/redis/git/commits/1187b0a56e4458d49250c1121d53275b8f837694,1187b0a56e4458d49250c1121d53275b8f837694,fix for zipmap raw saving in unstable branch
antirez,2011-02-28 13:48:49,https://api.github.com/repos/antirez/redis/git/commits/d4fb9f4144e72a7918e477c22a6c2a75d9c3c30d,d4fb9f4144e72a7918e477c22a6c2a75d9c3c30d,encoded types API to get blob length
antirez,2011-02-28 08:56:48,https://api.github.com/repos/antirez/redis/git/commits/2cc993655f2c7da5f893e6f628f6c34f6204c3d3,2cc993655f2c7da5f893e6f628f6c34f6204c3d3,save zipmap encoded hashes as blobs. Work in progress.
antirez,2011-02-25 18:11:25,https://api.github.com/repos/antirez/redis/git/commits/419e1cca74102440d5ce174fbbf36d81a9b8956a,419e1cca74102440d5ce174fbbf36d81a9b8956a,less delays in diskstore when there are many writes. more work to do.
antirez,2011-02-25 09:59:57,https://api.github.com/repos/antirez/redis/git/commits/900ab8fc7a38a1e2b94689f319df2c8e2a47f1e9,900ab8fc7a38a1e2b94689f319df2c8e2a47f1e9,more disk store fields in INFO
pietern,2011-02-23 08:39:29,https://api.github.com/repos/antirez/redis/git/commits/6c682e559cd250049ce483d60af19a42d0177d72,6c682e559cd250049ce483d60af19a42d0177d72,Restore argc/argv in EXEC after command is executed
antirez,2011-02-22 17:22:00,https://api.github.com/repos/antirez/redis/git/commits/bf45f266b382860f849d2cf7d53c564a77aea98c,bf45f266b382860f849d2cf7d53c564a77aea98c,fixed client-libraries/README to reflect the new site path instead of google code
antirez,2011-02-22 16:40:33,https://api.github.com/repos/antirez/redis/git/commits/802fd01b7c441b0cc0db36b02cde9edf7836e6a0,802fd01b7c441b0cc0db36b02cde9edf7836e6a0,linenoise updated
antirez,2011-02-22 15:40:24,https://api.github.com/repos/antirez/redis/git/commits/4a67d194e9437e48e076d15c746414d3d14faa35,4a67d194e9437e48e076d15c746414d3d14faa35,fixed color support for test suite. Now colors are shown as long as there is xterm somewhere inside the TERM env var
giddie,2011-02-22 10:49:17,https://api.github.com/repos/antirez/redis/git/commits/df50d707f3a361327e55dce83fb342dc08390c69,df50d707f3a361327e55dce83fb342dc08390c69,"Allow port to be 0 in configuration, in order to allow disabling of TCP."
antirez,2011-02-21 23:03:03,https://api.github.com/repos/antirez/redis/git/commits/29920dceb8e2b9806b2dcaf1dd134081e596633d,29920dceb8e2b9806b2dcaf1dd134081e596633d,conflict resolved in cherry pick
antirez,2011-02-21 16:50:54,https://api.github.com/repos/antirez/redis/git/commits/f96a9f82d813c9172d61fdabdc02368a42fb283b,f96a9f82d813c9172d61fdabdc02368a42fb283b,"suppress a Linux warning, for 2.2 sake"
antirez,2011-02-21 16:41:25,https://api.github.com/repos/antirez/redis/git/commits/09d2abdca2a4300fabe1c432cab43c4f3869fb1d,09d2abdca2a4300fabe1c432cab43c4f3869fb1d,check return value of getcwd()
antirez,2011-02-17 11:20:59,https://api.github.com/repos/antirez/redis/git/commits/465b4189e6094170b3e7a025f665ce62e572e7b0,465b4189e6094170b3e7a025f665ce62e572e7b0,"CONFIG SET/GET for all the special encoding parameters of sets, lists, hashes"
antirez,2011-02-16 11:41:40,https://api.github.com/repos/antirez/redis/git/commits/30318c1ddd2e6509562800bf8863af38e951dec8,30318c1ddd2e6509562800bf8863af38e951dec8,SPOP replication/AOF patch ported to unstable branch
antirez,2011-02-14 01:51:27,https://api.github.com/repos/antirez/redis/git/commits/21cda08b3bfa4a38a30e47e60139049b87bfb360,21cda08b3bfa4a38a30e47e60139049b87bfb360,CONFIG GET/SET dir implemented
antirez,2011-02-11 10:16:15,https://api.github.com/repos/antirez/redis/git/commits/05600eb8a7cb981f1a132bfba7d30f0b81f0a472,05600eb8a7cb981f1a132bfba7d30f0b81f0a472,"fixed two diskstore issues, a quasi-deadlock creating problems with I/O speed and a race condition among threads"
antirez,2011-02-09 09:10:35,https://api.github.com/repos/antirez/redis/git/commits/9c104c6886c7a781b9c092775bfb20fbea1bc903,9c104c6886c7a781b9c092775bfb20fbea1bc903,introduced a new logging function for big messages
antirez,2011-02-07 14:28:01,https://api.github.com/repos/antirez/redis/git/commits/a8cc969cd45dade10526349d8ea64b4852269e36,a8cc969cd45dade10526349d8ea64b4852269e36,Merge remote branch 'pietern/unstable-brpoplpush' into unstable
antirez,2011-02-07 12:43:29,https://api.github.com/repos/antirez/redis/git/commits/a53b4c2409d4c2bff50060e893932b28f2f50f24,a53b4c2409d4c2bff50060e893932b28f2f50f24,"Fix for the previous port 0 patch, thanks to Pieter for noticing the error"
antirez,2011-02-07 11:52:01,https://api.github.com/repos/antirez/redis/git/commits/68d6345ddf6b0088e25d5f3b5ee93ad51833d5d1,68d6345ddf6b0088e25d5f3b5ee93ad51833d5d1,"If port zero is specified, Redis will not listen for TCP connections"
pietern,2011-01-31 15:50:17,https://api.github.com/repos/antirez/redis/git/commits/554a5dd2fc708d0985fecf69b87e167707691c32,554a5dd2fc708d0985fecf69b87e167707691c32,Clarify comment
pietern,2011-01-31 15:49:56,https://api.github.com/repos/antirez/redis/git/commits/d5870d7ac3c4618bca373137559cb7c03c66e17d,d5870d7ac3c4618bca373137559cb7c03c66e17d,Reply with single null bulk for unsuccesful BRPOPLPUSH
antirez,2011-01-27 15:52:37,https://api.github.com/repos/antirez/redis/git/commits/452229b6fb0251f82d9caa5388db1160f10bc2d5,452229b6fb0251f82d9caa5388db1160f10bc2d5,"propagate key eviction to slaves and AOF, like for expires, so that replicas and AOFs are always consistent even in maxmemory mode."
antirez,2011-01-27 09:27:25,https://api.github.com/repos/antirez/redis/git/commits/be86082be4c79922906a1261228a8e7df4279a86,be86082be4c79922906a1261228a8e7df4279a86,"Fixed a theoretical non exploitable security bug reported by @chrisrohlf. In theory if we undefine SDS_ABORT_ON_OOM from sds.c AND modify zmalloc.c in order to don't quit on out of memory (but this would break every other part of Redis), on out of memory there is a possible heap overflow."
antirez,2011-01-26 09:42:32,https://api.github.com/repos/antirez/redis/git/commits/cc9f0eee712e520ddfd1eb5540a12ef1f8ef4bec,cc9f0eee712e520ddfd1eb5540a12ef1f8ef4bec,TODO list updated
antirez,2011-01-24 09:56:06,https://api.github.com/repos/antirez/redis/git/commits/d7ed7fd2fcd29fbba605fdd06b9498ffd85c092f,d7ed7fd2fcd29fbba605fdd06b9498ffd85c092f,"INFO commandstats section reset with config resetstat, a new microseconds per call field, and a few other minor things"
antirez,2011-01-24 09:05:42,https://api.github.com/repos/antirez/redis/git/commits/9b45592c699d6ca9445259e18839ea535495e23b,9b45592c699d6ca9445259e18839ea535495e23b,"portability fix in redis benchmark, using zu format specified with size_t instead of lu"
antirez,2011-01-23 21:14:15,https://api.github.com/repos/antirez/redis/git/commits/0d808ef27532204d4176c16956eb4cef7f452ae2,0d808ef27532204d4176c16956eb4cef7f452ae2,"Now INFO outputs the ""INFO default"" output if no argument is passed. Also added counts of calls for every command, thanks to an idea by Mike Shaver"
antirez,2011-01-23 15:41:07,https://api.github.com/repos/antirez/redis/git/commits/1b085c9f4820693a4c15e6689a9788308da516a7,1b085c9f4820693a4c15e6689a9788308da516a7,"INFO output refactoring. Now ""INFO section"" will report only the specified section"
antirez,2011-01-23 10:46:34,https://api.github.com/repos/antirez/redis/git/commits/d9cb288c9ededc83c59e1f46f0ae738a0fd3edd2,d9cb288c9ededc83c59e1f46f0ae738a0fd3edd2,profiling information in INFO
antirez,2011-01-20 12:18:23,https://api.github.com/repos/antirez/redis/git/commits/89a1433e69db5f7c996484672437616a16a6fe0a,89a1433e69db5f7c996484672437616a16a6fe0a,Fixed issue #435 and at the same time introduced explicit ping in the master-slave channel that will detect a blocked master or a broken even if apparently connected TCP link.
antirez,2011-01-20 10:00:25,https://api.github.com/repos/antirez/redis/git/commits/f25d5b5c9c536bb4bb9febe6fa4fd57d7c7de581,f25d5b5c9c536bb4bb9febe6fa4fd57d7c7de581,Merge branch 'unstable' of github.com:antirez/redis into unstable
antirez,2011-01-20 09:59:25,https://api.github.com/repos/antirez/redis/git/commits/c4df22afb6756446d35bb7ed3fc4a0bc42086056,c4df22afb6756446d35bb7ed3fc4a0bc42086056,Fixed compilation on FreeBSD
antirez,2011-01-17 11:36:37,https://api.github.com/repos/antirez/redis/git/commits/a4fdc3c021108438cb651c517aa5efc7358e7eec,a4fdc3c021108438cb651c517aa5efc7358e7eec,a better release note for Redis unstable provided
pietern,2011-01-17 09:03:21,https://api.github.com/repos/antirez/redis/git/commits/3bcffcbe5bc0acde311d0fb311f893400cd52e0e,3bcffcbe5bc0acde311d0fb311f893400cd52e0e,Remove client from list of unblocked clients when it is free'd
antirez,2011-01-15 21:31:07,https://api.github.com/repos/antirez/redis/git/commits/b8cfcea4243ef22537bdfefe73fd6c54fc41ee70,b8cfcea4243ef22537bdfefe73fd6c54fc41ee70,default hash encoding settings also fixed in redis.conf
antirez,2011-01-15 21:24:22,https://api.github.com/repos/antirez/redis/git/commits/52dc87bb18e81396e5260d970e9dc7ed25c7e0ba,52dc87bb18e81396e5260d970e9dc7ed25c7e0ba,lame typo causing bad hashes memory characteristic
antirez,2011-01-14 09:20:02,https://api.github.com/repos/antirez/redis/git/commits/7a1fd61e3d3d7572ff7825f337206c19c992a83b,7a1fd61e3d3d7572ff7825f337206c19c992a83b,implemented two new INFO fields showing the size of clients max input and output buffers.
antirez,2011-01-14 08:53:57,https://api.github.com/repos/antirez/redis/git/commits/3a73be752476f44dfb099863ac9424c2f27f2be0,3a73be752476f44dfb099863ac9424c2f27f2be0,"master-slave replication fixed, it was not listing any key using KEYS command in the slave."
antirez,2011-01-13 23:19:19,https://api.github.com/repos/antirez/redis/git/commits/5b831607e70aebb338d60ba01aacdb02cd66272d,5b831607e70aebb338d60ba01aacdb02cd66272d,redisServer structure fields reordered for clarity
antirez,2011-01-10 20:45:08,https://api.github.com/repos/antirez/redis/git/commits/2d9fdb9d84a4113298099c077e5172bded6d3a27,2d9fdb9d84a4113298099c077e5172bded6d3a27,TODO modified
antirez,2011-01-09 21:17:08,https://api.github.com/repos/antirez/redis/git/commits/69cb5462234ae2c263d8a11e96a74a6a7ce3f62a,69cb5462234ae2c263d8a11e96a74a6a7ce3f62a,minor aesthetic change in test suite messages
antirez,2011-01-09 18:42:56,https://api.github.com/repos/antirez/redis/git/commits/322ea972fe945a8cf439e9e3577de624f3e3e10b,322ea972fe945a8cf439e9e3577de624f3e3e10b,run both inmemory and diskstore tests.
antirez,2011-01-09 18:25:34,https://api.github.com/repos/antirez/redis/git/commits/a5062bbab0a1619523a9562cec2256de16149c29,a5062bbab0a1619523a9562cec2256de16149c29,"fixed bgsave_in_progress in INFO when BGSAVEing with diskstore enabled, don't DEBUG FLUSHCACHE when bgsave is in progress."
antirez,2011-01-09 18:01:44,https://api.github.com/repos/antirez/redis/git/commits/0a0f83ab2c02ebf1a9029a473e23ef72d037cac0,0a0f83ab2c02ebf1a9029a473e23ef72d037cac0,DEBUG FLUSHCACHE needs to wait that everything was synched on disk
antirez,2011-01-09 17:25:34,https://api.github.com/repos/antirez/redis/git/commits/69bfffb4a7aec38e5079ec10b0acc8629c1ee82b,69bfffb4a7aec38e5079ec10b0acc8629c1ee82b,"test adapted to run with diskstore, and a few bugs fixed"
antirez,2011-01-09 15:49:52,https://api.github.com/repos/antirez/redis/git/commits/5e1d2d30f7b96c0aa808f8c6f9b267880c6097ca,5e1d2d30f7b96c0aa808f8c6f9b267880c6097ca,initial fix of the test suite to run both in in-memory and diskstore mode
antirez,2011-01-09 14:56:50,https://api.github.com/repos/antirez/redis/git/commits/67a1810b324c9f140891d4aa5b80133b66cf9a70,67a1810b324c9f140891d4aa5b80133b66cf9a70,allocation stats in INFO
antirez,2011-01-08 01:07:48,https://api.github.com/repos/antirez/redis/git/commits/7cca366bdf39c071003afca0611c2dfae2916aef,7cca366bdf39c071003afca0611c2dfae2916aef,TODO updated
antirez,2011-01-08 01:06:01,https://api.github.com/repos/antirez/redis/git/commits/b39619d8e73273cd679f560854e34a9a974d9eb4,b39619d8e73273cd679f560854e34a9a974d9eb4,"DEBUG OBJECT fixed with diskstore, force loading"
antirez,2011-01-08 00:42:08,https://api.github.com/repos/antirez/redis/git/commits/f1df1739e3f724e787e9a4da0a0f9abb352f65ce,f1df1739e3f724e787e9a4da0a0f9abb352f65ce,resolved a problem with delayed loading of keys
antirez,2011-01-07 23:09:57,https://api.github.com/repos/antirez/redis/git/commits/cc2750670f1cb2fafde3e7d1a340f6674dab1749,cc2750670f1cb2fafde3e7d1a340f6674dab1749,blocking SAVE implemented
antirez,2011-01-07 22:51:31,https://api.github.com/repos/antirez/redis/git/commits/43574a72c373d787b2e1d22c45f242a04165996f,43574a72c373d787b2e1d22c45f242a04165996f,avoid bgsaving temp files
antirez,2011-01-07 22:41:00,https://api.github.com/repos/antirez/redis/git/commits/f03fe802b79d1d41377016fd9755523dfae102e9,f03fe802b79d1d41377016fd9755523dfae102e9,diskstore BGSAVE should work now
antirez,2011-01-07 18:31:42,https://api.github.com/repos/antirez/redis/git/commits/5b8ce85378f3b0887db254a20d1ae2cb7ad0ad55,5b8ce85378f3b0887db254a20d1ae2cb7ad0ad55,more work towards diskstore bgsave
antirez,2011-01-07 17:15:14,https://api.github.com/repos/antirez/redis/git/commits/36c17a53b6aece050b79b667fd32064f6eb116c2,36c17a53b6aece050b79b667fd32064f6eb116c2,"source reshaped a bit to play well with a bgsaving thread, still work to do, does not compile."
antirez,2011-01-07 15:43:51,https://api.github.com/repos/antirez/redis/git/commits/cb9b35c8cafc703ea5f2754b2961c9a3268c35d5,cb9b35c8cafc703ea5f2754b2961c9a3268c35d5,Merge branch 'unstable' of github.com:antirez/redis-private into unstable
antirez,2011-01-07 15:43:36,https://api.github.com/repos/antirez/redis/git/commits/44898603aa949bb32c522fb62ea676db78cf5a59,44898603aa949bb32c522fb62ea676db78cf5a59,TODO updated
antirez,2011-01-05 17:38:31,https://api.github.com/repos/antirez/redis/git/commits/249ad25f4f495057d11672f5fbdcb763860b72e1,249ad25f4f495057d11672f5fbdcb763860b72e1,BGSAVE work in progress
antirez,2011-01-05 12:51:37,https://api.github.com/repos/antirez/redis/git/commits/51335102acb364be4c0652ff4e91c9a080b1e7e0,51335102acb364be4c0652ff4e91c9a080b1e7e0,Merge remote branch 'pietern/writev-unstable' into unstable
antirez,2011-01-05 11:34:14,https://api.github.com/repos/antirez/redis/git/commits/f771dc23a0bce29d7665f001b4c2dfba3e0dc8a5,f771dc23a0bce29d7665f001b4c2dfba3e0dc8a5,IO performances greatly improved under high writes load
pietern,2011-01-05 09:50:47,https://api.github.com/repos/antirez/redis/git/commits/9b1d738f9609b5a1865b74bdb2e2a1d49c67c9b5,9b1d738f9609b5a1865b74bdb2e2a1d49c67c9b5,Remove newlines for networking errors
pietern,2011-01-05 09:42:37,https://api.github.com/repos/antirez/redis/git/commits/a2b33f2f93dda5e812d558f13104ec4cf72ed9fe,a2b33f2f93dda5e812d558f13104ec4cf72ed9fe,Remove glueoutputbuf from redis.conf
pietern,2011-01-05 09:37:23,https://api.github.com/repos/antirez/redis/git/commits/a510cb0c03eac3e3222641860f6dd84bb495c431,a510cb0c03eac3e3222641860f6dd84bb495c431,Remove glueoutputbuf option and broken code
antirez,2011-01-04 18:07:15,https://api.github.com/repos/antirez/redis/git/commits/6eaad66373982aa9c1c0ff6b584c542670548d0e,6eaad66373982aa9c1c0ff6b584c542670548d0e,Merge branch 'master' into unstable
antirez,2011-01-04 18:03:23,https://api.github.com/repos/antirez/redis/git/commits/1190c6cbf7f240691fee0d8fb21a7c19938116be,1190c6cbf7f240691fee0d8fb21a7c19938116be,handle end of space on device in a better way
antirez,2011-01-04 17:53:09,https://api.github.com/repos/antirez/redis/git/commits/418d5eaf500935e77e29fdd9335aaca845e6c5cd,418d5eaf500935e77e29fdd9335aaca845e6c5cd,strictly honour memory limit
antirez,2011-01-04 17:28:04,https://api.github.com/repos/antirez/redis/git/commits/779fa2af7a4b7eff153bbb2f350a49bab3b82a55,779fa2af7a4b7eff153bbb2f350a49bab3b82a55,rename(2) used in diskstore.c for atomic updates of keys
antirez,2011-01-04 12:20:04,https://api.github.com/repos/antirez/redis/git/commits/fad97fbeea6abd1bd6cbc3d74909b129fa1a9156,fad97fbeea6abd1bd6cbc3d74909b129fa1a9156,TODO list updated
antirez,2011-01-03 16:40:10,https://api.github.com/repos/antirez/redis/git/commits/5ab7bbfc270c7ee9bf1f7ccafcc5c6a148259425,5ab7bbfc270c7ee9bf1f7ccafcc5c6a148259425,fixed logging level for debugging message
antirez,2011-01-03 16:37:20,https://api.github.com/repos/antirez/redis/git/commits/bafa88c8b700b1648b561e86dce6ceca4c139d46,bafa88c8b700b1648b561e86dce6ceca4c139d46,stupid bug fixed
antirez,2011-01-03 16:27:47,https://api.github.com/repos/antirez/redis/git/commits/9b24d8adbeb2fb4ff663f3b205b73d55425f0d4f,9b24d8adbeb2fb4ff663f3b205b73d55425f0d4f,serious performance enhancement of diskstore
antirez,2011-01-03 16:18:37,https://api.github.com/repos/antirez/redis/git/commits/5d46e370b7da346801e01066e3ed077069d73d3d,5d46e370b7da346801e01066e3ed077069d73d3d,diskstore more fixes
antirez,2011-01-03 09:58:59,https://api.github.com/repos/antirez/redis/git/commits/d158dc28f6617fd517172e04d3f46ce53d88013e,d158dc28f6617fd517172e04d3f46ce53d88013e,comments on top of dscache.c updated
antirez,2011-01-03 09:51:45,https://api.github.com/repos/antirez/redis/git/commits/0b305fcfd9fd9131f6a393a19ffec38514f6756c,0b305fcfd9fd9131f6a393a19ffec38514f6756c,diskstore FLUSH* fixed
antirez,2011-01-03 09:47:39,https://api.github.com/repos/antirez/redis/git/commits/c15a3887e08d468b96d4313cc19862b5e4b09977,c15a3887e08d468b96d4313cc19862b5e4b09977,diskstore bug fixing and negative cache proper implementation
antirez,2011-01-03 09:17:39,https://api.github.com/repos/antirez/redis/git/commits/120b9ba8f82699f1987be17ccde597bcfa9fae46,120b9ba8f82699f1987be17ccde597bcfa9fae46,FLUSHALL / FLUSHDB for diskstore implemented
antirez,2011-01-02 21:27:26,https://api.github.com/repos/antirez/redis/git/commits/d2033feb5cd94872fc02fe9506d21ccb5ebf286e,d2033feb5cd94872fc02fe9506d21ccb5ebf286e,fixed cache-flush-delay configuration parsing
antirez,2011-01-02 20:39:17,https://api.github.com/repos/antirez/redis/git/commits/4942145d722559698416483c6f31ead9909884be,4942145d722559698416483c6f31ead9909884be,fixed a bug in diskstore
antirez,2011-01-02 16:42:04,https://api.github.com/repos/antirez/redis/git/commits/e37efb0d8bb12172990f6c688230bc7515aa6524,e37efb0d8bb12172990f6c688230bc7515aa6524,diskstore race condition fixed
antirez,2011-01-01 20:44:14,https://api.github.com/repos/antirez/redis/git/commits/133cf28ee8ac01f6a830fd55d9af281b7f62e3f3,133cf28ee8ac01f6a830fd55d9af281b7f62e3f3,minor comment change of dscache.c
antirez,2011-01-01 20:39:48,https://api.github.com/repos/antirez/redis/git/commits/9a3730289f6dba0878d83ddb3e8e5ec323ad6682,9a3730289f6dba0878d83ddb3e8e5ec323ad6682,blocking load fixed with the new design
antirez,2011-01-01 20:35:56,https://api.github.com/repos/antirez/redis/git/commits/3be00d7ed619c12795da54553230aee15c555532,3be00d7ed619c12795da54553230aee15c555532,"implemented a different approach to IO scheduling, so object->storage is no longer used, instead there is a queue and hash table of IO tasks to process, and it is always possible to know what are the scheduled and acrtive IO operations against every single key."
antirez,2010-12-31 17:23:31,https://api.github.com/repos/antirez/redis/git/commits/aa81e4d5f4b4d942b9340fd2d401e7795fa9fd1e,aa81e4d5f4b4d942b9340fd2d401e7795fa9fd1e,minor changes to doc and comments
antirez,2010-12-31 16:32:59,https://api.github.com/repos/antirez/redis/git/commits/d934e1e85b1ec1c6d2cd07292cced53770f4a626,d934e1e85b1ec1c6d2cd07292cced53770f4a626,negative caching implemented
antirez,2010-12-31 15:10:09,https://api.github.com/repos/antirez/redis/git/commits/c4b64a13954124742575d04251da8766fbd121d4,c4b64a13954124742575d04251da8766fbd121d4,don't overload the IO job queue if there are alrady too much entries
antirez,2010-12-31 13:30:24,https://api.github.com/repos/antirez/redis/git/commits/a440ecf0d36d22305f994a4482e60099720c47f3,a440ecf0d36d22305f994a4482e60099720c47f3,major bug and a dead lock fixed
antirez,2010-12-31 01:39:00,https://api.github.com/repos/antirez/redis/git/commits/8e6bb67108f1d21ea418b6167d094752296800a7,8e6bb67108f1d21ea418b6167d094752296800a7,brainstorming with myself in dscache.c comments
antirez,2010-12-30 23:18:17,https://api.github.com/repos/antirez/redis/git/commits/ad01a25553ed32b33efe036bb10450852f91478f,ad01a25553ed32b33efe036bb10450852f91478f,"blocking load of keys on lookup -- nor tested, nor finished"
antirez,2010-12-30 18:20:23,https://api.github.com/repos/antirez/redis/git/commits/4e941ecacb976ec88c04561e2251f01db87146b3,4e941ecacb976ec88c04561e2251f01db87146b3,short but important comment added
antirez,2010-12-30 18:16:59,https://api.github.com/repos/antirez/redis/git/commits/31222292284aa518f1a1961b3b7df8e47134bac9,31222292284aa518f1a1961b3b7df8e47134bac9,handled DEL command as a special optimized case for disk store
antirez,2010-12-30 17:37:46,https://api.github.com/repos/antirez/redis/git/commits/8d51fb6a80fb40abd0bb487d71435d3a30c2942e,8d51fb6a80fb40abd0bb487d71435d3a30c2942e,diskstore cache bug fixing
antirez,2010-12-30 17:17:01,https://api.github.com/repos/antirez/redis/git/commits/98a9abb66d2471e9ea4e657566fbd61a7f28b02b,98a9abb66d2471e9ea4e657566fbd61a7f28b02b,don't use small shared integer objects when disk store is enabled
antirez,2010-12-30 16:53:28,https://api.github.com/repos/antirez/redis/git/commits/82ef6ebf73cfa2470f61ce14f02eee945873828d,82ef6ebf73cfa2470f61ce14f02eee945873828d,added cache-flush-delay configuration directive. Don't BGSAVE when using diskstore
antirez,2010-12-30 16:21:54,https://api.github.com/repos/antirez/redis/git/commits/eea15afe5f38fee227bb6500f51c6208f6c8c70d,eea15afe5f38fee227bb6500f51c6208f6c8c70d,fixed bugs on diskstore cache
antirez,2010-12-30 16:07:06,https://api.github.com/repos/antirez/redis/git/commits/1fce3201145f256401bef7fde96a8c1509bcb4a7,1fce3201145f256401bef7fde96a8c1509bcb4a7,filesystem based KV store mostly implemented in diskstore.c
antirez,2010-12-30 15:42:11,https://api.github.com/repos/antirez/redis/git/commits/0b470ebdaa7f55b85270405fc68b4720c4c7998d,0b470ebdaa7f55b85270405fc68b4720c4c7998d,new gitingore
antirez,2010-12-30 15:41:36,https://api.github.com/repos/antirez/redis/git/commits/4ab988238f7418d018bf4412c6c956845ffbeab9,4ab988238f7418d018bf4412c6c956845ffbeab9,"more work done for diskstore without trying to compile, more work needed to build again."
antirez,2010-12-30 14:55:24,https://api.github.com/repos/antirez/redis/git/commits/1609a1c42d8f49bada5375a8756a2ca56609ece8,1609a1c42d8f49bada5375a8756a2ca56609ece8,"fixed a few bugs in DS store, now it's somewhat about able to reply to 'GET foo' with a bogus value."
antirez,2010-12-29 22:08:18,https://api.github.com/repos/antirez/redis/git/commits/67b0b41c879d01a35b1fcdab88b7e70f95a3232c,67b0b41c879d01a35b1fcdab88b7e70f95a3232c,disk store logged messages improved
antirez,2010-12-29 22:00:00,https://api.github.com/repos/antirez/redis/git/commits/ddbc81af33d6b3cda29cedf39e5587edf33b7ec1,ddbc81af33d6b3cda29cedf39e5587edf33b7ec1,diskstore directory structure creation
antirez,2010-12-29 21:18:20,https://api.github.com/repos/antirez/redis/git/commits/f63f0928c3e08f60f6b8557dc7c5d635834f990b,f63f0928c3e08f60f6b8557dc7c5d635834f990b,"cron part of disk store object cache implemented. Objects are pushed as IO jobs if needed, so that the IO thread will process them."
antirez,2010-12-29 18:39:42,https://api.github.com/repos/antirez/redis/git/commits/cea8c5cd75b88cd5a13d9b253d792cc045d28b62,cea8c5cd75b88cd5a13d9b253d792cc045d28b62,touched key for WATCH refactored into a more general thing that can be used also for the cache system. Some more changes towards diskstore working.
antirez,2010-12-29 16:02:43,https://api.github.com/repos/antirez/redis/git/commits/d021221086c9a6c5af404f3017791605b70c592d,d021221086c9a6c5af404f3017791605b70c592d,version set to 2.3.0
antirez,2010-12-29 15:58:57,https://api.github.com/repos/antirez/redis/git/commits/5ef640986bc507079506bf77fd22ab31ea3f4fc4,5ef640986bc507079506bf77fd22ab31ea3f4fc4,more step forwards for disk store to be able to run
antirez,2010-12-29 14:57:27,https://api.github.com/repos/antirez/redis/git/commits/5f6e1183e7b309b3fd51698523ae424d36fe29d5,5f6e1183e7b309b3fd51698523ae424d36fe29d5,implemented complete job handling
antirez,2010-12-29 02:57:35,https://api.github.com/repos/antirez/redis/git/commits/f34a6cd85e3327bf4fbe94ba46d6e7fefd7d61c7,f34a6cd85e3327bf4fbe94ba46d6e7fefd7d61c7,still more work for diskstore
antirez,2010-12-28 19:03:21,https://api.github.com/repos/antirez/redis/git/commits/f2da3a620ce7d9462613a93c07022bb805eb5c90,f2da3a620ce7d9462613a93c07022bb805eb5c90,more work converting vm into object cache
antirez,2010-12-28 17:46:34,https://api.github.com/repos/antirez/redis/git/commits/f081eaf1c094535458d93473aabed005f99317ce,f081eaf1c094535458d93473aabed005f99317ce,removed parts of VM that probably will be of no use with object cache
antirez,2010-12-28 17:06:40,https://api.github.com/repos/antirez/redis/git/commits/16d778780eb865deefb2bfa024aef50926917eac,16d778780eb865deefb2bfa024aef50926917eac,a lot of code reworked/removed to implement object caching
antirez,2010-12-28 14:20:20,https://api.github.com/repos/antirez/redis/git/commits/697af434fbeb2e3ba2ba9687cd283ed1a2734fa5,697af434fbeb2e3ba2ba9687cd283ed1a2734fa5,initial changes needed to turn the current VM code into a cache system. Tons of work to do still.
antirez,2010-12-28 13:42:09,https://api.github.com/repos/antirez/redis/git/commits/33388d43042273bcf96b3e364fb1432f50c2db08,33388d43042273bcf96b3e364fb1432f50c2db08,added diskstore.c in Makefile and prototypes in redis.h
antirez,2010-12-26 17:46:25,https://api.github.com/repos/antirez/redis/git/commits/52970711cf974e7905a7fe1252be3bcffcd28d62,52970711cf974e7905a7fe1252be3bcffcd28d62,"added diskstore.c, currently just a stub"
antirez,2010-12-23 12:18:07,https://api.github.com/repos/antirez/redis/git/commits/04a2ade90dd15db2a1e685e2e045b8c0181b9eea,04a2ade90dd15db2a1e685e2e045b8c0181b9eea,Merge remote branch 'pietern/bench-fix'
pietern,2010-12-23 11:25:56,https://api.github.com/repos/antirez/redis/git/commits/8ce39260a4acfedea5ee8f9143d2d2a9ce82b498,8ce39260a4acfedea5ee8f9143d2d2a9ce82b498,Fix compiler warnings on Solaris
pietern,2010-12-23 11:14:05,https://api.github.com/repos/antirez/redis/git/commits/89191613f118bcb286d4d7309564f542e957769d,89191613f118bcb286d4d7309564f542e957769d,limits.h is already included from redis.h
pietern,2010-12-23 11:09:07,https://api.github.com/repos/antirez/redis/git/commits/65b472acceaf1c359ae22a410fc608c5fb311ffa,65b472acceaf1c359ae22a410fc608c5fb311ffa,Solaris 10 doesn't know AF_LOCAL
pietern,2010-12-23 11:08:50,https://api.github.com/repos/antirez/redis/git/commits/ba55932674cb83c7854344096e778e36394fcaba,ba55932674cb83c7854344096e778e36394fcaba,Solaris doesn't support -rdynamic
pietern,2010-12-16 22:32:02,https://api.github.com/repos/antirez/redis/git/commits/a1e97d692e3b9ed3cd6c8751a70665d832199fff,a1e97d692e3b9ed3cd6c8751a70665d832199fff,Update hiredis to 0.9.2
pietern,2010-12-23 10:22:40,https://api.github.com/repos/antirez/redis/git/commits/2380388974bd0256e1b123d608940355144e9fd4,2380388974bd0256e1b123d608940355144e9fd4,Randomize keys and set start time when first write event fires
pietern,2010-12-23 10:04:44,https://api.github.com/repos/antirez/redis/git/commits/3c49070b35e0bfaa69359c73b4a7942bc0e3214d,3c49070b35e0bfaa69359c73b4a7942bc0e3214d,Find substrings to randomize when the client is created
pietern,2010-12-22 17:39:52,https://api.github.com/repos/antirez/redis/git/commits/d69a483556e7bcd8642723482bd1de1cc5a10ff4,d69a483556e7bcd8642723482bd1de1cc5a10ff4,Make the MSET benchmark *really* work with 10 keys
pietern,2010-12-22 17:31:33,https://api.github.com/repos/antirez/redis/git/commits/f2f2424e006856aacef00e8ce8dd7be76e038dce,f2f2424e006856aacef00e8ce8dd7be76e038dce,Remove code duplication
antirez,2010-12-20 14:47:33,https://api.github.com/repos/antirez/redis/git/commits/d3e5e28804bd3cfd038d95a1ffd85a92941bc788,d3e5e28804bd3cfd038d95a1ffd85a92941bc788,added mkrelease.sh script into utils. gitignore modified accordingly since this script was originally ignored
antirez,2010-12-20 12:14:12,https://api.github.com/repos/antirez/redis/git/commits/d841dedb5fc4b33eff47ee05f517bca9cabd7533,d841dedb5fc4b33eff47ee05f517bca9cabd7533,Merge branch 'master' of github.com:antirez/redis
antirez,2010-12-20 12:13:46,https://api.github.com/repos/antirez/redis/git/commits/4c22fd3409d7d84e682fbc45f3014bbdd4a1c397,4c22fd3409d7d84e682fbc45f3014bbdd4a1c397,TODO udpated
antirez,2010-12-15 16:39:40,https://api.github.com/repos/antirez/redis/git/commits/180596766bb48698fda28069ae5028554caac74c,180596766bb48698fda28069ae5028554caac74c,help.h updated
antirez,2010-12-19 14:15:08,https://api.github.com/repos/antirez/redis/git/commits/f21779ff36947fe22e6fc3f00d4bd73185557190,f21779ff36947fe22e6fc3f00d4bd73185557190,"removed some dead code, added evicted keys counter separated from expired keys."
antirez,2010-12-19 11:22:12,https://api.github.com/repos/antirez/redis/git/commits/9d7165e885b3de44577dea2917bb4f3afa2ed335,9d7165e885b3de44577dea2917bb4f3afa2ed335,overflow detection in INCR family functions
dspezia,2010-12-18 09:58:50,https://api.github.com/repos/antirez/redis/git/commits/f474a5bd4e80157235dac13326edaa99181fb120,f474a5bd4e80157235dac13326edaa99181fb120,Add wait states to deal with many connections.
pietern,2010-12-16 23:19:32,https://api.github.com/repos/antirez/redis/git/commits/1cd3c1e08c96dfe4bddd4ef73229dc7b89c4ce2a,1cd3c1e08c96dfe4bddd4ef73229dc7b89c4ce2a,Use multi-bulk protocol by default in redis-benchmark
pietern,2010-12-16 22:41:58,https://api.github.com/repos/antirez/redis/git/commits/174df6fe497898a9645fdafdf56807f6438b9978,174df6fe497898a9645fdafdf56807f6438b9978,Re-use variable data in redis-benchmark
pietern,2010-12-16 22:35:02,https://api.github.com/repos/antirez/redis/git/commits/53f1d81712ff66d0343647af2f15308ea7e89d30,53f1d81712ff66d0343647af2f15308ea7e89d30,Fix NULL-termination of variable data in redis-benchmark
pietern,2010-12-16 22:32:02,https://api.github.com/repos/antirez/redis/git/commits/021321e0efc0fcc54645ee9016a229257e1d4ba7,021321e0efc0fcc54645ee9016a229257e1d4ba7,Update hiredis to 0.9.2
antirez,2010-12-15 16:39:40,https://api.github.com/repos/antirez/redis/git/commits/6418b4c790adc1373cea9e4e3342982e9a209505,6418b4c790adc1373cea9e4e3342982e9a209505,help.h updated
antirez,2010-12-15 16:19:01,https://api.github.com/repos/antirez/redis/git/commits/59aee5513d27fdf2d24499f35611093fa0fab3fb,59aee5513d27fdf2d24499f35611093fa0fab3fb,added the mandatory Cheers in the release notes
antirez,2010-12-15 16:18:15,https://api.github.com/repos/antirez/redis/git/commits/9fecc4057ac1f43d41a21d90e407863f22396e38,9fecc4057ac1f43d41a21d90e407863f22396e38,"release notes, info on 2.0 compatibility"
antirez,2010-12-15 16:00:54,https://api.github.com/repos/antirez/redis/git/commits/51716cbdb8cdf8b0518d2b0ffcc96042686ccd97,51716cbdb8cdf8b0518d2b0ffcc96042686ccd97,added more info in the release notes
antirez,2010-12-15 15:54:08,https://api.github.com/repos/antirez/redis/git/commits/9a7a07a466f13b9fd821564af10413760eaed7fb,9a7a07a466f13b9fd821564af10413760eaed7fb,removed a line from release notes that was not true (feature already backported into 2.0)
antirez,2010-12-15 15:51:01,https://api.github.com/repos/antirez/redis/git/commits/0898aa462e1eab878ae6e6abc5f9d273db8299de,0898aa462e1eab878ae6e6abc5f9d273db8299de,typo fixed
antirez,2010-12-15 15:44:29,https://api.github.com/repos/antirez/redis/git/commits/4c4dec7202091c1e7a2d1fe8f6013bf389426727,4c4dec7202091c1e7a2d1fe8f6013bf389426727,release notes added
antirez,2010-12-15 15:07:49,https://api.github.com/repos/antirez/redis/git/commits/401c3e213c89d98bbeda399b4e17fbd636b80ac0,401c3e213c89d98bbeda399b4e17fbd636b80ac0,bulk transfers limited to 512 MB as this is the new limit of all the redis strings
antirez,2010-12-15 15:03:43,https://api.github.com/repos/antirez/redis/git/commits/beb1aab3fddc2bd2ed241d13e8597562b2cddea9,beb1aab3fddc2bd2ed241d13e8597562b2cddea9,Merge remote branch 'pietern/cli'
pietern,2010-12-15 15:02:07,https://api.github.com/repos/antirez/redis/git/commits/28c07c7bf80709e7e0be5cac1bbb280cea439272,28c07c7bf80709e7e0be5cac1bbb280cea439272,Specify multi-bulk delimiter via options
antirez,2010-12-15 14:59:45,https://api.github.com/repos/antirez/redis/git/commits/6674e3b91035fc9e0c19956119fe918ba115608d,6674e3b91035fc9e0c19956119fe918ba115608d,added new HTML doc pages
pietern,2010-12-15 14:59:04,https://api.github.com/repos/antirez/redis/git/commits/65add0a31189e6257c521df3889f6d9a6d1183f2,65add0a31189e6257c521df3889f6d9a6d1183f2,"Improved raw output mode

Raw output mode is selected by default when STDOUT is not a tty. For
ttys, raw output can be forced using the option ""--raw""."
antirez,2010-12-15 14:49:29,https://api.github.com/repos/antirez/redis/git/commits/b9f7e9e63c053f3d23464171d65fb8995676ee76,b9f7e9e63c053f3d23464171d65fb8995676ee76,HTML doc updated
antirez,2010-12-15 14:22:04,https://api.github.com/repos/antirez/redis/git/commits/2136a880a7edb1cc5b7d9b1a6e0f665f1ba5fed8,2136a880a7edb1cc5b7d9b1a6e0f665f1ba5fed8,version bumped to 2.1.8
pietern,2010-12-15 13:58:18,https://api.github.com/repos/antirez/redis/git/commits/f18e059e8270a3b1889aa621fa6565dcf6be5f1c,f18e059e8270a3b1889aa621fa6565dcf6be5f1c,Make redis-cli help a little better
pietern,2010-12-15 13:34:01,https://api.github.com/repos/antirez/redis/git/commits/c392edf5315b9828414c96f14255c38c52252a4a,c392edf5315b9828414c96f14255c38c52252a4a,Show redis-cli version with repository information if present
pietern,2010-12-15 11:40:23,https://api.github.com/repos/antirez/redis/git/commits/c8061392e19e2887c0afd5cca06db8321df5fbee,c8061392e19e2887c0afd5cca06db8321df5fbee,Minor changes to Makefile
antirez,2010-12-15 10:52:55,https://api.github.com/repos/antirez/redis/git/commits/53f0efe28c4fe2f8d15286c02ccd2d83a5195fc9,53f0efe28c4fe2f8d15286c02ccd2d83a5195fc9,Merge remote branch 'pietern/string-patches'
pietern,2010-12-15 10:49:39,https://api.github.com/repos/antirez/redis/git/commits/7d5f5712d948b19d0778e4ef53a27d213aff7bdc,7d5f5712d948b19d0778e4ef53a27d213aff7bdc,Update tests for STRLEN
pietern,2010-12-15 10:49:04,https://api.github.com/repos/antirez/redis/git/commits/ad1b4f4f59e653ac310ee0afb847daeb4f19fbfd,ad1b4f4f59e653ac310ee0afb847daeb4f19fbfd,Use helper function for string object length
pietern,2010-12-15 10:40:36,https://api.github.com/repos/antirez/redis/git/commits/1333f98dd2ff2aae4e4c2a9a43d7b83a0b1af8aa,1333f98dd2ff2aae4e4c2a9a43d7b83a0b1af8aa,Use helper functions in APPEND
pietern,2010-12-15 10:30:50,https://api.github.com/repos/antirez/redis/git/commits/8f8eeffec1fe1c0d40b6d078121661d7cfb02c08,8f8eeffec1fe1c0d40b6d078121661d7cfb02c08,Disable negative offsets for SETRANGE
pietern,2010-12-15 10:20:54,https://api.github.com/repos/antirez/redis/git/commits/e983cf34be97ac01448f331b9c106f8b9ce55889,e983cf34be97ac01448f331b9c106f8b9ce55889,Add fuzzy test for SETBIT
antirez,2010-12-15 10:04:04,https://api.github.com/repos/antirez/redis/git/commits/180e07b8c0fb63b437d5c5af72843e34f1cd5e4c,180e07b8c0fb63b437d5c5af72843e34f1cd5e4c,fixed test rendering when test failed in non verbose mode
antirez,2010-12-15 09:44:36,https://api.github.com/repos/antirez/redis/git/commits/7982173fef8bd6de9805e782edb9aa827184b010,7982173fef8bd6de9805e782edb9aa827184b010,print test names inline in the non verbose output mode
antirez,2010-12-15 09:14:34,https://api.github.com/repos/antirez/redis/git/commits/eae9cce166dbb896eabda3c7bd37bd0bca0b2311,eae9cce166dbb896eabda3c7bd37bd0bca0b2311,colorized make test output when the verbose output is disabled (default)
pietern,2010-12-14 23:42:32,https://api.github.com/repos/antirez/redis/git/commits/30407e1f4fc290468f3d8ec31cb933402767568d,30407e1f4fc290468f3d8ec31cb933402767568d,Make SETBIT return original bit value
antirez,2010-12-14 17:23:52,https://api.github.com/repos/antirez/redis/git/commits/6a246b1e7e9df7d7c104545d6d99819c6842511a,6a246b1e7e9df7d7c104545d6d99819c6842511a,"special encoding limits redefined, and all the config options for special encodings added in the example redis.conf file"
antirez,2010-12-14 16:53:28,https://api.github.com/repos/antirez/redis/git/commits/cc7c4158bc9c584b91560e9bf3dff51a9316c9b3,cc7c4158bc9c584b91560e9bf3dff51a9316c9b3,Merge remote branch 'jonahharris/syslog'
antirez,2010-12-14 16:48:52,https://api.github.com/repos/antirez/redis/git/commits/8e33831b2b93d6d0a324ca01c6934197887276d8,8e33831b2b93d6d0a324ca01c6934197887276d8,Merge remote branch 'pietern/cli-monitor'
antirez,2010-12-14 16:42:46,https://api.github.com/repos/antirez/redis/git/commits/603e616bf4e09cdbbfeaf77a5e2a02876c229c35,603e616bf4e09cdbbfeaf77a5e2a02876c229c35,Merge branch 'master' of github.com:antirez/redis
antirez,2010-12-14 16:42:01,https://api.github.com/repos/antirez/redis/git/commits/57997664eaba82ad263c61b9cdbe7dd26ec8d08d,57997664eaba82ad263c61b9cdbe7dd26ec8d08d,Merge remote branch 'pietern/strrange'
pietern,2010-12-14 16:39:34,https://api.github.com/repos/antirez/redis/git/commits/2b2eca1f5643260ae7ca6bec70c263ff0db5a8e3,2b2eca1f5643260ae7ca6bec70c263ff0db5a8e3,"Zero-pad timestamps in MONITOR output

Original report and fix:
http://code.google.com/p/redis/issues/detail?id=404"
antirez,2010-12-14 15:26:37,https://api.github.com/repos/antirez/redis/git/commits/f858c11d7d9ca79010dd46a9c8c625e63a9a3ec0,f858c11d7d9ca79010dd46a9c8c625e63a9a3ec0,Merge remote branch 'pietern/brpoplpush'
pietern,2010-12-14 14:35:35,https://api.github.com/repos/antirez/redis/git/commits/d8f160a848b2d10615918668eddbbb1fe415bd85,d8f160a848b2d10615918668eddbbb1fe415bd85,Add test cases for GETRANGE against integer-encoded strings
pietern,2010-12-14 14:10:58,https://api.github.com/repos/antirez/redis/git/commits/ef11bccccac22a001e2d0a6f440dddf69c401954,ef11bccccac22a001e2d0a6f440dddf69c401954,"Refactor and rename SUBSTR to GETRANGE

SUBSTR is renamed to GETRANGE to have better consistency between command
names (with SETRANGE as its dual). GETRANGE is still aliased as SUBSTR."
pietern,2010-12-14 13:20:51,https://api.github.com/repos/antirez/redis/git/commits/9f9e1ceaa0d4451a21aa56739e63cca012399317,9f9e1ceaa0d4451a21aa56739e63cca012399317,Add SETRANGE command implementation and tests
antirez,2010-12-14 11:10:51,https://api.github.com/repos/antirez/redis/git/commits/8c304be359f15151ed8fe3e5ff61b0238881358d,8c304be359f15151ed8fe3e5ff61b0238881358d,cow friendly HGETALL and variants
pietern,2010-12-14 09:31:11,https://api.github.com/repos/antirez/redis/git/commits/7ecd4644e7fe48309d4b8445ec62c7fe8c0443ff,7ecd4644e7fe48309d4b8445ec62c7fe8c0443ff,Don't decode object on STRLEN when not necessary
antirez,2010-12-10 16:24:03,https://api.github.com/repos/antirez/redis/git/commits/d6107fd6f194f568bd0fec3230cae83973de929d,d6107fd6f194f568bd0fec3230cae83973de929d,Merge remote branch 'pietern/testverbosity'
antirez,2010-12-10 16:23:38,https://api.github.com/repos/antirez/redis/git/commits/a15742a41b30b742d58f4ed260a4a36f02bdd9ac,a15742a41b30b742d58f4ed260a4a36f02bdd9ac,dont take the fast path for INCR if the resulting integer will fit into a shared integer range
antirez,2010-12-10 16:03:38,https://api.github.com/repos/antirez/redis/git/commits/b215a496a4fcab6b198ce4344b4c1b94c5b1eb12,b215a496a4fcab6b198ce4344b4c1b94c5b1eb12,faster INCR doing far less allocation in common cases
pietern,2010-12-10 15:13:21,https://api.github.com/repos/antirez/redis/git/commits/6f8a32d5c71350afa1b64f2b77667e94b8e9773a,6f8a32d5c71350afa1b64f2b77667e94b8e9773a,Be less verbose in testing; improve error handling
antirez,2010-12-10 14:47:01,https://api.github.com/repos/antirez/redis/git/commits/dd48de748ce6f86727f509096c76e51faadd2019,dd48de748ce6f86727f509096c76e51faadd2019,fixed compilation on Linux
antirez,2010-12-10 14:40:48,https://api.github.com/repos/antirez/redis/git/commits/4b918769a1d89e08c88d570913a5911f7d891efe,4b918769a1d89e08c88d570913a5911f7d891efe,command line option in test suite to activate valgrind mode
antirez,2010-12-10 14:36:04,https://api.github.com/repos/antirez/redis/git/commits/e9bc56dbed149a29e031debc27bf25f2db991cc7,e9bc56dbed149a29e031debc27bf25f2db991cc7,valgrind suppression file added
antirez,2010-12-10 14:17:55,https://api.github.com/repos/antirez/redis/git/commits/3d24304ff930fd3392a63b79ed6037ebab94b742,3d24304ff930fd3392a63b79ed6037ebab94b742,"HGET HMGET are now COW friendly, plus API refactoring and changes needed for the new implementation."
pietern,2010-12-10 11:16:16,https://api.github.com/repos/antirez/redis/git/commits/cc209063904ed5d86a34b2297ceac00854ff6c01,cc209063904ed5d86a34b2297ceac00854ff6c01,Change function name to match what it does
pietern,2010-12-10 11:06:24,https://api.github.com/repos/antirez/redis/git/commits/586500c0ef32f480dba9bc10aedb3f72bd525118,586500c0ef32f480dba9bc10aedb3f72bd525118,Typo
pietern,2010-12-10 10:58:14,https://api.github.com/repos/antirez/redis/git/commits/eae33c1c813953e27dc37dfe7c3dcc246fda294f,eae33c1c813953e27dc37dfe7c3dcc246fda294f,"Add generic function to grow an sds value

Move logic concerned with setting a bit in an sds to the SETBIT command
instead of keeping it in sds.c. The function to grow an sds can and will
be reused for a command to set a range within a string value."
antirez,2010-12-09 20:11:56,https://api.github.com/repos/antirez/redis/git/commits/1b508da7ca7cb8e999a557bd0bf18875e0a40972,1b508da7ca7cb8e999a557bd0bf18875e0a40972,"SINTER/MEMBERS are now COW friendly, also some refactoring around was needed to get this result."
jonahharris,2010-12-09 16:26:33,https://api.github.com/repos/antirez/redis/git/commits/8b5db0a8dcf24f8693a99b795c1968338f41be8a,8b5db0a8dcf24f8693a99b795c1968338f41be8a,removed dup syslog-ident conditional
pietern,2010-12-09 16:16:10,https://api.github.com/repos/antirez/redis/git/commits/076f88d65769788113c8d4db582a7b3ec8d0fefa,076f88d65769788113c8d4db582a7b3ec8d0fefa,Enforce maximum string value length of 512MB
jonahharris,2010-12-09 16:10:21,https://api.github.com/repos/antirez/redis/git/commits/e1a586ee69a15dd15afbba8e25f8eb62bbb22da9,e1a586ee69a15dd15afbba8e25f8eb62bbb22da9,syslog support
pietern,2010-12-09 15:39:33,https://api.github.com/repos/antirez/redis/git/commits/3c1bf4957e4c8aacd962a859e16cbcf2596f4edb,3c1bf4957e4c8aacd962a859e16cbcf2596f4edb,Add commands SETBIT/GETBIT
antirez,2010-12-09 09:21:02,https://api.github.com/repos/antirez/redis/git/commits/a5be65f71c927601260f4518236cbc7bc3d87965,a5be65f71c927601260f4518236cbc7bc3d87965,"COW friendly versions of SPOP and SRANDMEMBER commands, with some change to the set encoding-agnostic API."
antirez,2010-12-07 15:33:13,https://api.github.com/repos/antirez/redis/git/commits/d51ebef5090624a3ba0824fa697410deaff1d1fa,d51ebef5090624a3ba0824fa697410deaff1d1fa,"LRANGE converted into a COW friendly command. Some refactoring, comment, and new addReply*() family function added in the process."
pietern,2010-12-06 15:39:39,https://api.github.com/repos/antirez/redis/git/commits/a4ce7581553b1f4e29a7ed2141add788e56142c5,a4ce7581553b1f4e29a7ed2141add788e56142c5,Don't execute commands for clients when they are unblocked
pietern,2010-12-06 15:04:42,https://api.github.com/repos/antirez/redis/git/commits/ecf940141501e47dcc8dfecbc84a4e3f6ee7b0d3,ecf940141501e47dcc8dfecbc84a4e3f6ee7b0d3,Fix case and indent
pietern,2010-12-06 15:04:10,https://api.github.com/repos/antirez/redis/git/commits/8a88c368edbc12540eee3d129b8a017bd6a84cac,8a88c368edbc12540eee3d129b8a017bd6a84cac,Check other blocked clients when value could not be pushed
pietern,2010-12-06 13:48:58,https://api.github.com/repos/antirez/redis/git/commits/ac06fc011df598372232a5dc1805683004240c0d,ac06fc011df598372232a5dc1805683004240c0d,Move code for pushing on a (blocking) RPOPLPUSH
pietern,2010-12-06 13:05:01,https://api.github.com/repos/antirez/redis/git/commits/5fa95ad7639ae3f43e175d95a7d6384e4723b80e,5fa95ad7639ae3f43e175d95a7d6384e4723b80e,Rename blpop_blocked_clients to bpop_blocked_clients
pietern,2010-12-06 12:45:48,https://api.github.com/repos/antirez/redis/git/commits/c8a0070a611011c706e67da52a7f17ebfc0c0c1a,c8a0070a611011c706e67da52a7f17ebfc0c0c1a,Move timeout logic
pietern,2010-12-06 11:31:56,https://api.github.com/repos/antirez/redis/git/commits/bc8ffafeb9bb5b272e118400df55157db41ad897,bc8ffafeb9bb5b272e118400df55157db41ad897,Merge branch 'master' into brpoplpush
antirez,2010-12-01 10:18:59,https://api.github.com/repos/antirez/redis/git/commits/bbac56c2f823a6ab2170e1b00b93a620188b76da,bbac56c2f823a6ab2170e1b00b93a620188b76da,added support for ctrl-l and clear command into redis-cli. To clear the screen is a good idea from time to time :). Also linenoise updated to the current version to support this new feature.
antirez,2010-11-30 10:39:55,https://api.github.com/repos/antirez/redis/git/commits/ce260f736e483d40967d3e551f04534154c12aba,ce260f736e483d40967d3e551f04534154c12aba,minor merge conflicts merging cli-help branch fixed
pietern,2010-11-29 19:53:57,https://api.github.com/repos/antirez/redis/git/commits/c54afb6d0d9808e38248e55a3220868735aaab44,c54afb6d0d9808e38248e55a3220868735aaab44,Minor update to linenoise
pietern,2010-11-29 19:26:03,https://api.github.com/repos/antirez/redis/git/commits/b2cc45bfbc5e8e264ce6c26c7803d2d24d47d340,b2cc45bfbc5e8e264ce6c26c7803d2d24d47d340,Refactor and support help for command names with spaces
pietern,2010-11-29 18:27:36,https://api.github.com/repos/antirez/redis/git/commits/41945ba6ae4e365b39730f56ec0489551f8b42df,41945ba6ae4e365b39730f56ec0489551f8b42df,Use linenoise completion API from redis-cli
pietern,2010-11-29 18:27:06,https://api.github.com/repos/antirez/redis/git/commits/ff4058183bc6dfdc130a7172105bb0a02f76b4ec,ff4058183bc6dfdc130a7172105bb0a02f76b4ec,Update linenoise
antirez,2010-11-29 11:20:17,https://api.github.com/repos/antirez/redis/git/commits/d8d528e9926d712cf02617dcdb6e9bde90e4e49c,d8d528e9926d712cf02617dcdb6e9bde90e4e49c,quick and dirty fix for hiredis bug creating problem with the new redis-cli connect commmand. Also change prompt when redis-cli is not connected
antirez,2010-11-29 11:17:55,https://api.github.com/repos/antirez/redis/git/commits/efcf948c1aff6cc71690cf3dbed493ccb957bd48,efcf948c1aff6cc71690cf3dbed493ccb957bd48,new redis-cli command connect
antirez,2010-11-29 10:14:57,https://api.github.com/repos/antirez/redis/git/commits/5b761a33876938b3fb5d10efaa6e761619818b42,5b761a33876938b3fb5d10efaa6e761619818b42,gitignore now includes a few more files
pietern,2010-11-28 20:37:19,https://api.github.com/repos/antirez/redis/git/commits/a2a69d5803d05ce9ccd2d911389b8aa28239dfba,a2a69d5803d05ce9ccd2d911389b8aa28239dfba,Refactor help-related code into redis-cli.c
pietern,2010-11-28 16:45:58,https://api.github.com/repos/antirez/redis/git/commits/50d0e82d54d9fcc7f42443a9cde51d812934b3c1,50d0e82d54d9fcc7f42443a9cde51d812934b3c1,Update help.h generator script to output man-style argument list
pietern,2010-11-26 19:46:42,https://api.github.com/repos/antirez/redis/git/commits/2612e0521fde55db2c720092d4ad02a8f015f46e,2612e0521fde55db2c720092d4ad02a8f015f46e,Merge remote branch 'visionmedia/cli-help' into cli-help
pietern,2010-11-21 15:44:17,https://api.github.com/repos/antirez/redis/git/commits/a4e48b417da1c14e5757296742069121882ddfcf,a4e48b417da1c14e5757296742069121882ddfcf,"Don't hardcode make to ""make"""
pietern,2010-11-21 15:27:47,https://api.github.com/repos/antirez/redis/git/commits/bd70a5f5884ec46983ac32a1ae0b48f4d356a9d5,bd70a5f5884ec46983ac32a1ae0b48f4d356a9d5,"Stop using /dev/null to find out the serialized object length

Now the rdbSave* functions return the number of bytes written (or
required to write) in serializing a Redis object, writing to /dev/null
and using ftell (which doesn't work on FreeBSD) isn't needed anymore."
pietern,2010-11-21 15:12:25,https://api.github.com/repos/antirez/redis/git/commits/9a68cf91f01a920c7e84773d3b3ae41565b4849e,9a68cf91f01a920c7e84773d3b3ae41565b4849e,Wrapper around fwrite to make API consistent
pietern,2010-11-21 14:39:34,https://api.github.com/repos/antirez/redis/git/commits/8a623a98c31bda69c05f2c7c94bad2d131060b02,8a623a98c31bda69c05f2c7c94bad2d131060b02,Return number of bytes written from rdbSave* functions
tj,2010-11-16 13:50:26,https://api.github.com/repos/antirez/redis/git/commits/5397f2b596b5189edbed3e45a42d18f3c99341d6,5397f2b596b5189edbed3e45a42d18f3c99341d6,"Added redis-cli interactive help support

updated via commands.json in redis-doc repo. Currently
use `make src/help.h` to re-generate. The following
are valid from the REPL:

  help
  help [command]
  help [group]
  help groups

ex:

  help sort
  help hash"
antirez,2010-11-15 14:50:41,https://api.github.com/repos/antirez/redis/git/commits/c086b85afb1f0f2d9aa76faa5a4c8536380670a2,c086b85afb1f0f2d9aa76faa5a4c8536380670a2,added a few more files to gitignore
antirez,2010-11-12 19:02:20,https://api.github.com/repos/antirez/redis/git/commits/9fd01051bf8400babcca73a76a67dfc1847633ff,9fd01051bf8400babcca73a76a67dfc1847633ff,"Fix for bug 374, thanks to Jeremy Zawodny for reporting and tracing why it was crashing."
antirez,2010-11-11 12:19:17,https://api.github.com/repos/antirez/redis/git/commits/0c2f75c6d809a1658a244e74ef209dabb19fb4c7,0c2f75c6d809a1658a244e74ef209dabb19fb4c7,"volatile-lru maxmemory policy segfault fixed, thanks to Anthony Lauzon for reporting the problem with the patch. Original patch modified a bit in order to avoid the double lookup if the policy is allkeys-lru"
antirez,2010-11-08 15:26:02,https://api.github.com/repos/antirez/redis/git/commits/11fd0c422b627d73d563916c6f559d3c0a021f26,11fd0c422b627d73d563916c6f559d3c0a021f26,now redis-cli is able to show the Git SHA1 in the version output
antirez,2010-11-08 15:14:15,https://api.github.com/repos/antirez/redis/git/commits/d9d8ccab93ac18ab38ac19811bc05582c7f9f550,d9d8ccab93ac18ab38ac19811bc05582c7f9f550,"make sure to flush stdout every line read in monitor mode, to play well with redirection to file"
antirez,2010-11-08 15:12:16,https://api.github.com/repos/antirez/redis/git/commits/5402c4262e6bd6d2e8082dd2a948f28ea453b060,5402c4262e6bd6d2e8082dd2a948f28ea453b060,"added noeviction policy to redis maxmemory. ZSCORE removed from the list of commands that can't be called when we are low on memory, this command was added in the past for a stupid error."
antirez,2010-11-08 12:19:58,https://api.github.com/repos/antirez/redis/git/commits/240f8dbf3f592ba257aba7fcf6ad44325fd7712f,240f8dbf3f592ba257aba7fcf6ad44325fd7712f,build redis-server at the end so have a more pleasing to see Make output and the advice to run the test suite at the end.
antirez,2010-11-08 11:53:36,https://api.github.com/repos/antirez/redis/git/commits/be98a33b511cec5cd3fce281360cea1dfc73d15a,be98a33b511cec5cd3fce281360cea1dfc73d15a,fixed compilation with 32bit target
antirez,2010-11-08 10:52:03,https://api.github.com/repos/antirez/redis/git/commits/97e7f8aec3f464967bbe1b38ccfb357141134d09,97e7f8aec3f464967bbe1b38ccfb357141134d09,non blocking loading of the DB / AOF with informations and ETA in INFO output
pietern,2010-11-05 16:24:48,https://api.github.com/repos/antirez/redis/git/commits/57c9babd819339544a8c7447a7cbae7e70f64678,57c9babd819339544a8c7447a7cbae7e70f64678,Update hiredis
pietern,2010-11-05 16:22:16,https://api.github.com/repos/antirez/redis/git/commits/abc3ff4d90b2191f25a1dfb5ab1555c2cde208c2,abc3ff4d90b2191f25a1dfb5ab1555c2cde208c2,Only cascade clean target to deps
antirez,2010-11-05 10:00:20,https://api.github.com/repos/antirez/redis/git/commits/645e9962cbf5894cdf2b80a6672fdd4c3af17657,645e9962cbf5894cdf2b80a6672fdd4c3af17657,version bumped to 2.1.7 after merging with aaslave branch for non blocking slaves
antirez,2010-11-05 09:59:49,https://api.github.com/repos/antirez/redis/git/commits/3b5e72d402345507856b00bb67a91942f4f1a49d,3b5e72d402345507856b00bb67a91942f4f1a49d,Merge branch 'aaslave'
antirez,2010-11-05 09:57:53,https://api.github.com/repos/antirez/redis/git/commits/ecc72ca17f6a1a65e01fbd439894fdd2dccacc14,ecc72ca17f6a1a65e01fbd439894fdd2dccacc14,version bumped to 2.1.6
antirez,2010-11-05 09:29:59,https://api.github.com/repos/antirez/redis/git/commits/56fce7ce7d598def0ea15313635eb8a74d781bdd,56fce7ce7d598def0ea15313635eb8a74d781bdd,Merge remote branch 'pietern/benchmark'
pietern,2010-11-05 09:22:52,https://api.github.com/repos/antirez/redis/git/commits/feecb608ed0ec8f9932960d5fa8f02e551ffbe59,feecb608ed0ec8f9932960d5fa8f02e551ffbe59,Use multi-bulk protocol in SET benchmark
antirez,2010-11-04 18:59:21,https://api.github.com/repos/antirez/redis/git/commits/4ebfc45528dea7a3b0e4bc2a8efd4238ea48347b,4ebfc45528dea7a3b0e4bc2a8efd4238ea48347b,config option to select if when replication link with master a slave should or not serve stale data
antirez,2010-11-04 17:50:23,https://api.github.com/repos/antirez/redis/git/commits/12ebe2ac17a26ecf263f90b2acdf03db29b00223,12ebe2ac17a26ecf263f90b2acdf03db29b00223,replication asynchronous SYNC information in INFO output
antirez,2010-11-04 17:14:20,https://api.github.com/repos/antirez/redis/git/commits/f6433915fea3ed68a26f7af42becc14f9483acac,f6433915fea3ed68a26f7af42becc14f9483acac,more replication info in logs
antirez,2010-11-04 17:09:35,https://api.github.com/repos/antirez/redis/git/commits/26b3366993f566b438049765d65c51db056fcffa,26b3366993f566b438049765d65c51db056fcffa,non blocking slave replication is now more non blocking than the first implementation...
antirez,2010-11-04 16:35:03,https://api.github.com/repos/antirez/redis/git/commits/62ec599c363f36a8f2b0b7d39c1533895f491631,62ec599c363f36a8f2b0b7d39c1533895f491631,typos and minor stuff fixed in the new non blocking replication code
antirez,2010-11-04 16:29:53,https://api.github.com/repos/antirez/redis/git/commits/f4aa600b996c605b4e2109d0f80cb14a0c14513b,f4aa600b996c605b4e2109d0f80cb14a0c14513b,first attempt to non blocking implementation of slave replication and SYNC bulk data download. Never compiled so far...
pietern,2010-11-04 13:47:15,https://api.github.com/repos/antirez/redis/git/commits/8146e31677f29440854edd310adfc521a6e65bad,8146e31677f29440854edd310adfc521a6e65bad,Microsecond latency resolution in redis-benchmark
pietern,2010-11-04 12:37:05,https://api.github.com/repos/antirez/redis/git/commits/ec8f06675a24277bda9e819786c13f41c567a2f4,ec8f06675a24277bda9e819786c13f41c567a2f4,Use hiredis from redis-benchmark
pietern,2010-11-04 12:35:47,https://api.github.com/repos/antirez/redis/git/commits/afc156c2d8a2e2433528c0559bd2d38345e96a36,afc156c2d8a2e2433528c0559bd2d38345e96a36,Update hiredis
antirez,2010-11-04 09:48:49,https://api.github.com/repos/antirez/redis/git/commits/4d7e1255193702937daabf0dbaabbb6876bf5547,4d7e1255193702937daabf0dbaabbb6876bf5547,minor test suite bug fixed
pietern,2010-11-04 09:09:30,https://api.github.com/repos/antirez/redis/git/commits/a9b18e54d4e348dd678a396cc8691dd693687de7,a9b18e54d4e348dd678a396cc8691dd693687de7,Stop using the freelist robj* cache
antirez,2010-11-03 17:14:09,https://api.github.com/repos/antirez/redis/git/commits/8df3dcada5e34c6a99666931ee6dcccd57685353,8df3dcada5e34c6a99666931ee6dcccd57685353,top level make clean also clean hiredis and linoise (deps)
pietern,2010-11-03 16:10:12,https://api.github.com/repos/antirez/redis/git/commits/e902b579b4eb5f695680427cb34725159a4fa64f,e902b579b4eb5f695680427cb34725159a4fa64f,Import linenoise as dependency for redis-cli
pietern,2010-11-03 16:07:10,https://api.github.com/repos/antirez/redis/git/commits/339b9dc2d2e7d319e29581b367a1027365186cc3,339b9dc2d2e7d319e29581b367a1027365186cc3,Put duration in parenthesis
pietern,2010-11-03 16:03:54,https://api.github.com/repos/antirez/redis/git/commits/cfcd5d6d433b13319cdc1bf8c91d2e61c43aef2c,cfcd5d6d433b13319cdc1bf8c91d2e61c43aef2c,Add proper numbering for multi bulk replies in redis-cli
pietern,2010-11-03 15:09:38,https://api.github.com/repos/antirez/redis/git/commits/7fc4ce13ed7ece2a24d110d9e97725eb719b30af,7fc4ce13ed7ece2a24d110d9e97725eb719b30af,Use hiredis from redis-cli
pietern,2010-11-03 15:03:04,https://api.github.com/repos/antirez/redis/git/commits/24f753a8b996a364273019ea791fe89f87cff678,24f753a8b996a364273019ea791fe89f87cff678,"Add hiredis dependency for redis-cli, redis-benchmark, etc"
antirez,2010-11-03 11:14:36,https://api.github.com/repos/antirez/redis/git/commits/8d3e063a0ac13ad10ad47df15cbb6bbc8116bf2f,8d3e063a0ac13ad10ad47df15cbb6bbc8116bf2f,added support for command renaming/suppression in redis.conf
antirez,2010-11-03 10:23:59,https://api.github.com/repos/antirez/redis/git/commits/1b1f47c915c69eae40d99727267b147f7c5a44ac,1b1f47c915c69eae40d99727267b147f7c5a44ac,command lookup process turned into a much more flexible and probably faster hash table
antirez,2010-11-03 09:31:19,https://api.github.com/repos/antirez/redis/git/commits/297e77c6ab9f65fed7f7ee5baa26310071f6ce9e,297e77c6ab9f65fed7f7ee5baa26310071f6ce9e,Now it is possible to use quoted strings in the redis.conf file accordingly to the sdssplitargs() function capabilities.
antirez,2010-11-02 22:47:52,https://api.github.com/repos/antirez/redis/git/commits/0a546fc01758f9a9f8b2113764c2cf963df6ef20,0a546fc01758f9a9f8b2113764c2cf963df6ef20,Merge remote branch 'pietern/unixsocket'
antirez,2010-11-02 21:47:10,https://api.github.com/repos/antirez/redis/git/commits/539fb43820592992c26dcb60d3901b503c6d9b77,539fb43820592992c26dcb60d3901b503c6d9b77,RSS information in INFO output
antirez,2010-11-02 17:59:48,https://api.github.com/repos/antirez/redis/git/commits/7d0966a6b712078bf7d52c13669539ba619cf1fc,7d0966a6b712078bf7d52c13669539ba619cf1fc,Do not update the LRU info on key lookup when we have a saving child. With this trivial change the additional memory used while saving with a background child in presence of many read operations is zero.
antirez,2010-11-02 17:08:30,https://api.github.com/repos/antirez/redis/git/commits/3ce014c766c47f3966d438032a6fa318c4f6ec61,3ce014c766c47f3966d438032a6fa318c4f6ec61,redis-cli in interactive mode now prints the time elapsed of the operation performed took more than half a second.
antirez,2010-11-02 11:10:41,https://api.github.com/repos/antirez/redis/git/commits/b5b22da8e68fef52cd9b535871584dd7afe95aef,b5b22da8e68fef52cd9b535871584dd7afe95aef,"Revert ""Function to compute RSS memory usage in a fast way, suitable to be called inside keys eviction loops""

This reverts commit 7d47ecd543ed41db70396bc3866eac872a31774d."
antirez,2010-11-02 11:09:59,https://api.github.com/repos/antirez/redis/git/commits/ca734d17ad9b7ea97a87bd048ad1c1e253ef67a6,ca734d17ad9b7ea97a87bd048ad1c1e253ef67a6,"Revert ""Now maxmemory, VM, and everything else uses the fast RSS memory used estimation instead of raw memory reported by zmalloc(). This means that setting maxmemory to 2GB will really have the effect of using up to 2GB of memory.""

This reverts commit a3e60027e7d4419971406c6da7d6e8accbcaf9b0."
antirez,2010-11-02 10:50:55,https://api.github.com/repos/antirez/redis/git/commits/a3e60027e7d4419971406c6da7d6e8accbcaf9b0,a3e60027e7d4419971406c6da7d6e8accbcaf9b0,"Now maxmemory, VM, and everything else uses the fast RSS memory used estimation instead of raw memory reported by zmalloc(). This means that setting maxmemory to 2GB will really have the effect of using up to 2GB of memory."
antirez,2010-11-02 10:40:35,https://api.github.com/repos/antirez/redis/git/commits/7d47ecd543ed41db70396bc3866eac872a31774d,7d47ecd543ed41db70396bc3866eac872a31774d,"Function to compute RSS memory usage in a fast way, suitable to be called inside keys eviction loops"
antirez,2010-11-02 10:15:09,https://api.github.com/repos/antirez/redis/git/commits/10c12171cc2f94087c85651b14831c1e52daa087,10c12171cc2f94087c85651b14831c1e52daa087,removed a number of stupid compilation warnings on Linux
antirez,2010-11-02 09:51:09,https://api.github.com/repos/antirez/redis/git/commits/92e282288f8f7bf51bccd0f6ef6964f32fa37f24,92e282288f8f7bf51bccd0f6ef6964f32fa37f24,zmalloc functions to get RSS and fragmentation refactored into two separated functions
antirez,2010-10-28 20:59:47,https://api.github.com/repos/antirez/redis/git/commits/21dbc6499a538af07f52a41742cf1683f3fc9c23,21dbc6499a538af07f52a41742cf1683f3fc9c23,merge conflict resolved
pietern,2010-10-28 15:59:05,https://api.github.com/repos/antirez/redis/git/commits/4794d88f15ee4e4175e712b411bb7cebee7aff09,4794d88f15ee4e4175e712b411bb7cebee7aff09,Rewrite comment that was no longer valid
pietern,2010-10-28 15:52:16,https://api.github.com/repos/antirez/redis/git/commits/a3a323e0e56c3d4be148fcf039cbd1887cbd1e87,a3a323e0e56c3d4be148fcf039cbd1887cbd1e87,"When REDIS_CLOSE_AFTER_REPLY is set, there may never be new replies"
pietern,2010-10-28 14:07:45,https://api.github.com/repos/antirez/redis/git/commits/5e78edb350c8060fa478182efc4e4aa729bbe154,5e78edb350c8060fa478182efc4e4aa729bbe154,Unify two client flags that mean the same
antirez,2010-10-28 12:12:25,https://api.github.com/repos/antirez/redis/git/commits/73abd0a9d2a956af34351c59e15eba603ab29c6e,73abd0a9d2a956af34351c59e15eba603ab29c6e,Merge remote branch 'remotes/pietern/zrevrangebyscore'
antirez,2010-10-27 15:11:17,https://api.github.com/repos/antirez/redis/git/commits/1de98301f66bb32af01ea76fc485a88b5d0a9b50,1de98301f66bb32af01ea76fc485a88b5d0a9b50,removed useless spaces from DEBUG OBJECT output
pietern,2010-10-26 10:26:27,https://api.github.com/repos/antirez/redis/git/commits/e584d82fecd13afa8de5e9c129789da6a70117d9,e584d82fecd13afa8de5e9c129789da6a70117d9,Return error to client on wrong type for HMGET
antirez,2010-10-25 08:54:37,https://api.github.com/repos/antirez/redis/git/commits/244201f6ba9e69da64bb73243d972dee658f74b9,244201f6ba9e69da64bb73243d972dee658f74b9,added a missing prototype from syncio.c in redis.h
antirez,2010-10-25 08:49:15,https://api.github.com/repos/antirez/redis/git/commits/d08fac3eb9af712a4835773d7d6e58bdac465991,d08fac3eb9af712a4835773d7d6e58bdac465991,more generally usable i/o functions moved to syncio.c
antirez,2010-10-24 14:22:52,https://api.github.com/repos/antirez/redis/git/commits/19e61097c58079d6e317983f50006dc917d65cf7,19e61097c58079d6e317983f50006dc917d65cf7,"synchronous I/O networking functions originally used just for replication refactored in a file as generally useful, they are used in the cluster branch for MIGRATE."
pietern,2010-10-23 08:18:48,https://api.github.com/repos/antirez/redis/git/commits/d94ac406ba8061f3ac3cdda2bb372367d736a3fc,d94ac406ba8061f3ac3cdda2bb372367d736a3fc,Exclusively use either tcmalloc or OSX's native malloc_size()
pietern,2010-10-23 07:59:28,https://api.github.com/repos/antirez/redis/git/commits/7cdc98b6305bb65aee5f5973e8123246755dac7d,7cdc98b6305bb65aee5f5973e8123246755dac7d,"Don't use prefix when malloc_size() can be called

Also, use tcmalloc functions explicitly via macros to prevent symbol
lookups to resolve to native malloc/free on OSX."
antirez,2010-10-22 21:30:48,https://api.github.com/repos/antirez/redis/git/commits/da47440d444cfe023f339e0f7d6056101a332a48,da47440d444cfe023f339e0f7d6056101a332a48,Make sure to reset the signal handler and deliver again the original crashing signal when dumping the stack trace. This will allow to dump the core if core dumping is enabled.
antirez,2010-10-21 22:18:26,https://api.github.com/repos/antirez/redis/git/commits/fc41345116be2b066f4e46a36596d9e71fac6cd1,fc41345116be2b066f4e46a36596d9e71fac6cd1,README more specific about tcmalloc space benefits
antirez,2010-10-21 22:16:32,https://api.github.com/repos/antirez/redis/git/commits/1a587ff843e668f1abe060ff614f5f3e9d3623bf,1a587ff843e668f1abe060ff614f5f3e9d3623bf,Makefile typo fixed for tcmalloc option
antirez,2010-10-21 22:10:17,https://api.github.com/repos/antirez/redis/git/commits/13b37159259a36168e43f902d6a9c4ed7d4f28c8,13b37159259a36168e43f902d6a9c4ed7d4f28c8,reports if tcmalloc is in used in INFO output
antirez,2010-10-21 22:06:44,https://api.github.com/repos/antirez/redis/git/commits/0a802bd7a0aff807145470ed43cf84a435e2a615,0a802bd7a0aff807145470ed43cf84a435e2a615,support for compiling with tcmalloc
antirez,2010-10-21 15:55:44,https://api.github.com/repos/antirez/redis/git/commits/75fcab8c23dbbb2dadddf176c22a294adda5359c,75fcab8c23dbbb2dadddf176c22a294adda5359c,version bumped to 2.1.5
pietern,2010-10-17 16:09:23,https://api.github.com/repos/antirez/redis/git/commits/a375b077cc1da6afee6497749e4e3512caa757c7,a375b077cc1da6afee6497749e4e3512caa757c7,Skip object encoding where it doesn't make sense
pietern,2010-10-17 15:46:55,https://api.github.com/repos/antirez/redis/git/commits/19408d83a41bd3a1161bd6e5240eb1c60091d40b,19408d83a41bd3a1161bd6e5240eb1c60091d40b,Object encoding in hash function is done by a more specific function
pietern,2010-10-17 15:31:40,https://api.github.com/repos/antirez/redis/git/commits/33aba595b0ad3baae1c110bfd4090dfe337b486f,33aba595b0ad3baae1c110bfd4090dfe337b486f,Removed unused command flags
pietern,2010-10-17 15:21:41,https://api.github.com/repos/antirez/redis/git/commits/75b41de8ca975d01c6371a98f9e552c934af5937,75b41de8ca975d01c6371a98f9e552c934af5937,Convert objects in the command procs instead of the protocol code
pietern,2010-10-15 17:15:38,https://api.github.com/repos/antirez/redis/git/commits/b19c33d48a3b5456b87f84c85fdd85592e0c0562,b19c33d48a3b5456b87f84c85fdd85592e0c0562,Prevent clients from making too large multibulk requests
pietern,2010-10-15 16:17:06,https://api.github.com/repos/antirez/redis/git/commits/ea5b70924d444c5ebf32afdd577ddc7c1328a674,ea5b70924d444c5ebf32afdd577ddc7c1328a674,Add benchmark for MSET
antirez,2010-10-15 16:04:05,https://api.github.com/repos/antirez/redis/git/commits/13a49af44b11dc275654a461f7d7ba5c20e27c1a,13a49af44b11dc275654a461f7d7ba5c20e27c1a,prevent small integer sharing when maxmemory is active. So every object will use a private LRU field and the LRU algorithm can work well
pietern,2010-10-15 15:34:20,https://api.github.com/repos/antirez/redis/git/commits/1aa608fc68877bcf7c7f287cf7a373fd6ef8a92c,1aa608fc68877bcf7c7f287cf7a373fd6ef8a92c,Change protocol from bulk to inline in redis-benchmark
pietern,2010-10-15 15:27:05,https://api.github.com/repos/antirez/redis/git/commits/9da6caac4e86aa608a3186fa8a209eed19b7b9c6,9da6caac4e86aa608a3186fa8a209eed19b7b9c6,Don't reset the client when processCommand returns REDIS_ERR
pietern,2010-10-15 15:25:20,https://api.github.com/repos/antirez/redis/git/commits/dc11daf3b5d1c2e93f534ee3a47f8a83bcd3796d,dc11daf3b5d1c2e93f534ee3a47f8a83bcd3796d,Change tests to use either the inline or the multibulk protocol
pietern,2010-10-15 13:56:16,https://api.github.com/repos/antirez/redis/git/commits/5b12b47df9bfdb92bc6878ee9f9307a2bb413f15,5b12b47df9bfdb92bc6878ee9f9307a2bb413f15,Show output of leaks command on a leak
pietern,2010-10-15 13:50:29,https://api.github.com/repos/antirez/redis/git/commits/00cf82c0bd9e0272a06f086b00a70d5d5d0f5e31,00cf82c0bd9e0272a06f086b00a70d5d5d0f5e31,Change tcl client to only use the multibulk protocol
pietern,2010-10-15 13:40:25,https://api.github.com/repos/antirez/redis/git/commits/cd8788f26d06d8643828024537b8abe2b702759f,cd8788f26d06d8643828024537b8abe2b702759f,Refactor request parsing code for efficiency
pietern,2010-10-15 10:54:53,https://api.github.com/repos/antirez/redis/git/commits/5a4f9f27e7982d2784c17dc053c8629e13c9d7e8,5a4f9f27e7982d2784c17dc053c8629e13c9d7e8,Add tests for OK on QUIT
antirez,2010-10-15 10:29:05,https://api.github.com/repos/antirez/redis/git/commits/9f8ded8ced44fb4c764a8c7dde113ea870ce9c3e,9f8ded8ced44fb4c764a8c7dde113ea870ce9c3e,CONFIG RESETSTAT no longer resets the server uptime. Now keyspace hits/misses are reset as well.
antirez,2010-10-15 10:22:48,https://api.github.com/repos/antirez/redis/git/commits/95506e4611458160d21ea8ae6e6e89161e7e44ca,95506e4611458160d21ea8ae6e6e89161e7e44ca,minor aesthetic change
antirez,2010-10-15 10:19:21,https://api.github.com/repos/antirez/redis/git/commits/53eeeaff08eb2268342d3e6a42819207fc618290,53eeeaff08eb2268342d3e6a42819207fc618290,added keyspace_hits and keyspace_misses fields in INFO output
antirez,2010-10-15 09:57:38,https://api.github.com/repos/antirez/redis/git/commits/a36879293d7aa2d9fb57d43a0520f8032ed68d5f,a36879293d7aa2d9fb57d43a0520f8032ed68d5f,maxmemory-samples implemented in CONFIG command and configuration file
antirez,2010-10-15 09:29:03,https://api.github.com/repos/antirez/redis/git/commits/670bf2fd36e0627af5de966c7d0c19b632712e4f,670bf2fd36e0627af5de966c7d0c19b632712e4f,"Don't increment dirty on expireIfNeeded() as natural expires are not considered database changes. This will avoid useless read-only commands in the AOF file as a result of, for instance, a GET operation triggering an expirIfNeeded() call resulting in an expired key removed."
antirez,2010-10-14 19:23:01,https://api.github.com/repos/antirez/redis/git/commits/b33ef40105391502d9e44443fd4e337c06396468,b33ef40105391502d9e44443fd4e337c06396468,Merge remote branch 'pietern/ziplist-regression'
antirez,2010-10-14 19:22:21,https://api.github.com/repos/antirez/redis/git/commits/165346ca29972817b1245e689315edeba1fe369b,165346ca29972817b1245e689315edeba1fe369b,implemented different algorithms for maxmemory
pietern,2010-10-14 19:11:42,https://api.github.com/repos/antirez/redis/git/commits/306c6a02e333583bedd7b9ff15a27008c1008c51,306c6a02e333583bedd7b9ff15a27008c1008c51,Replace ziplist stresser and fix regression
antirez,2010-10-14 11:52:58,https://api.github.com/repos/antirez/redis/git/commits/ef59a8bc9ef426f9d24e701e9b73a6a03ddd3d0f,ef59a8bc9ef426f9d24e701e9b73a6a03ddd3d0f,Object approximated LRU algorithm enhanced / fixed / refactored. This is used for the VM currently but will soon be used for maxmemory expiring.
pietern,2010-10-13 19:58:21,https://api.github.com/repos/antirez/redis/git/commits/7236fdb22f7fdb60833c32121b0828f11a13883c,7236fdb22f7fdb60833c32121b0828f11a13883c,Return error when min and/or max in the sorted set range spec is not a double
pietern,2010-10-13 19:43:58,https://api.github.com/repos/antirez/redis/git/commits/91504b6cbec2f555a3aa81113372c173adadad66,91504b6cbec2f555a3aa81113372c173adadad66,"Make ZREMRANGEBYSCORE accept the same range spec as ZRANGEBYSCORE

This allows to use inclusive/exclusive bounds for min and max when
deleting a range of scores from a sorted set."
pietern,2010-10-13 18:29:50,https://api.github.com/repos/antirez/redis/git/commits/26f3388d27d1be9312d0244890db564c1b22ba0c,26f3388d27d1be9312d0244890db564c1b22ba0c,Merge branch 'master' into zrevrangebyscore
pietern,2010-10-13 16:55:46,https://api.github.com/repos/antirez/redis/git/commits/b04ce2a35ce084a043ef8749ca4fa0e62b92bd03,b04ce2a35ce084a043ef8749ca4fa0e62b92bd03,Merge master with resolved conflict in src/redis-cli.c
pietern,2010-10-13 16:50:07,https://api.github.com/repos/antirez/redis/git/commits/4fe83b554ac1b16ddad559df788b80d4864310e1,4fe83b554ac1b16ddad559df788b80d4864310e1,sockaddr_un.sun_path appears to never hold anything after accept()
pietern,2010-10-13 16:34:24,https://api.github.com/repos/antirez/redis/git/commits/ab17b909fe46603f78c8305a3cf2f02a0c6de0a4,ab17b909fe46603f78c8305a3cf2f02a0c6de0a4,Use different accept handlers for TCP and unix socket connections
pietern,2010-10-13 15:18:58,https://api.github.com/repos/antirez/redis/git/commits/893819801d4952e208e83dde364bfc5021465e45,893819801d4952e208e83dde364bfc5021465e45,Remove disabling TCP with port -1
pietern,2010-10-13 15:17:56,https://api.github.com/repos/antirez/redis/git/commits/5d10923f7bc3333b5efaa151ea3b9a4e6ddfe72d,5d10923f7bc3333b5efaa151ea3b9a4e6ddfe72d,Rename variable sockpath to unixsocket
pietern,2010-10-13 14:33:27,https://api.github.com/repos/antirez/redis/git/commits/704bd093be7aac0c68613a57420b75615801d04b,704bd093be7aac0c68613a57420b75615801d04b,"Move creating socket/bind+listen on socket to separate functions

Thanks to tav (http://github.com/tav) for original code."
pietern,2010-10-13 09:25:40,https://api.github.com/repos/antirez/redis/git/commits/941c9fa2859cc4ce68911a1b5a8f88b53d802f77,941c9fa2859cc4ce68911a1b5a8f88b53d802f77,Return OK on QUIT
pietern,2010-10-13 07:26:44,https://api.github.com/repos/antirez/redis/git/commits/9f1ae9abee1da4e53b7e535e172213d81eb75ed7,9f1ae9abee1da4e53b7e535e172213d81eb75ed7,Allow to specify which specific test files to run
antirez,2010-10-11 14:46:21,https://api.github.com/repos/antirez/redis/git/commits/b4f2e412d087bae0a523fe6ea40fcad30fe74b5b,b4f2e412d087bae0a523fe6ea40fcad30fe74b5b,free memory if the maxmemory parameter is reduced via CONFIG SET
antirez,2010-10-11 11:05:09,https://api.github.com/repos/antirez/redis/git/commits/1dd10ca233a533928ec2ff83f675499e4e7c1ff1,1dd10ca233a533928ec2ff83f675499e4e7c1ff1,"maxmemory fixed, we now try to release memory just before we check for the memory limit. Before fixing there was code between the attempt to free memory and the check for memory limits, and this code could result into allocations going again after the memory limit."
antirez,2010-10-07 14:21:35,https://api.github.com/repos/antirez/redis/git/commits/144a5e72f2adc9d151438569f680533e41778504,144a5e72f2adc9d151438569f680533e41778504,"fixed an alignment problem with time_t is 32 bit, long is 64 bit, and arch is sparc or any other where unaligned accesses will result to sigbus"
antirez,2010-10-07 10:49:14,https://api.github.com/repos/antirez/redis/git/commits/fdc0bde9359d12dd53b686a6db9c66cf0001670f,fdc0bde9359d12dd53b686a6db9c66cf0001670f,"minor typo fixed, reported by Thomas Bassetto"
antirez,2010-09-24 09:15:06,https://api.github.com/repos/antirez/redis/git/commits/4610b0332c199563e58de005eb1b10ed54e1ec9c,4610b0332c199563e58de005eb1b10ed54e1ec9c,"intset stress testing added, ziplist stress testing relocated in a more appropriate place"
antirez,2010-09-24 08:37:00,https://api.github.com/repos/antirez/redis/git/commits/ef27ba988b10a632057b04ee3abb287cbe87322d,ef27ba988b10a632057b04ee3abb287cbe87322d,explicit regression test for a ziplist bug added
antirez,2010-09-24 08:30:15,https://api.github.com/repos/antirez/redis/git/commits/1a06bf93c4de5016c746eab0d9d0255a458693b7,1a06bf93c4de5016c746eab0d9d0255a458693b7,ziplist implementation fuzzy tests
antirez,2010-09-23 23:15:16,https://api.github.com/repos/antirez/redis/git/commits/e43505d6e9434bdc03f4521fa8b3b3d2b41be8c7,e43505d6e9434bdc03f4521fa8b3b3d2b41be8c7,Merge remote branch 'pietern/ziplist-fix'
pietern,2010-09-23 20:04:19,https://api.github.com/repos/antirez/redis/git/commits/b0d605c1d6bbf5746cc957946138108b928c88a1,b0d605c1d6bbf5746cc957946138108b928c88a1,Add regression test and fix for >255 byte string entries
antirez,2010-09-23 16:24:47,https://api.github.com/repos/antirez/redis/git/commits/30d31cc8bb416f67183a218f1511ef517eb9ae3b,30d31cc8bb416f67183a218f1511ef517eb9ae3b,Contributing file added
antirez,2010-09-23 14:39:02,https://api.github.com/repos/antirez/redis/git/commits/963238f713f02e538cf0f5851f3337173116ea39,963238f713f02e538cf0f5851f3337173116ea39,more tests for sds.c
antirez,2010-09-23 14:05:17,https://api.github.com/repos/antirez/redis/git/commits/136cf53f22539b33396247d356e7e9d077068ccf,136cf53f22539b33396247d356e7e9d077068ccf,minimal C test framework + a first example sds.c tests
pietern,2010-09-22 16:07:52,https://api.github.com/repos/antirez/redis/git/commits/56e52b69feebb11931cbe8162ce1749909b7ff30,56e52b69feebb11931cbe8162ce1749909b7ff30,Update rdb.c to properly work with new memory strategy for sorted sets
antirez,2010-09-22 15:49:04,https://api.github.com/repos/antirez/redis/git/commits/50a9fad5d50488592447dc599a9ef6a184088ee3,50a9fad5d50488592447dc599a9ef6a184088ee3,two leaks fixed
antirez,2010-09-22 14:10:13,https://api.github.com/repos/antirez/redis/git/commits/beb7756dcbb44099352abcb3368fcd3d23b55782,beb7756dcbb44099352abcb3368fcd3d23b55782,error generation format reverted to the new style after merge
antirez,2010-09-22 14:09:33,https://api.github.com/repos/antirez/redis/git/commits/b882056c93f3e3afe5fde9d62fb569ce30a76a76,b882056c93f3e3afe5fde9d62fb569ce30a76a76,Merge remote branch 'pietern/zset-mem'
antirez,2010-09-22 14:09:30,https://api.github.com/repos/antirez/redis/git/commits/5ca2f0c49894878be47161f667ae0daf70bb6fd3,5ca2f0c49894878be47161f667ae0daf70bb6fd3,preventive conflict resolution to merge pietern/zset-mem
antirez,2010-09-22 10:59:25,https://api.github.com/repos/antirez/redis/git/commits/5171777bf112a6a930c4750949037ce741f3bf28,5171777bf112a6a930c4750949037ce741f3bf28,Merge remote branch 'pietern/ziplist-eff'
antirez,2010-09-17 14:05:01,https://api.github.com/repos/antirez/redis/git/commits/a4f3f93b90c7cc688ffff665914bdadc224847fc,a4f3f93b90c7cc688ffff665914bdadc224847fc,new parsing code bugfixing
antirez,2010-09-17 13:25:32,https://api.github.com/repos/antirez/redis/git/commits/34a719d25034d6f1140a10eb0429bdee0efa5cd9,34a719d25034d6f1140a10eb0429bdee0efa5cd9,try to parse the request in a smarter way to gain speed... work in progress
pietern,2010-09-16 13:36:36,https://api.github.com/repos/antirez/redis/git/commits/d433ebc6810b15c21120e502dea3a27fc2a5b348,d433ebc6810b15c21120e502dea3a27fc2a5b348,Finished code for sorted set memory efficiency
pietern,2010-09-16 12:35:25,https://api.github.com/repos/antirez/redis/git/commits/25bb8a4452d9c74ee522c89f682115ab45fe51a4,25bb8a4452d9c74ee522c89f682115ab45fe51a4,Add ZREVRANGEBYSCORE and refactor Z*RANGEBYSCORE
pietern,2010-09-16 12:32:30,https://api.github.com/repos/antirez/redis/git/commits/192fc3376a0712e69e638b087c82c7e34f698f4d,192fc3376a0712e69e638b087c82c7e34f698f4d,Merge branch 'zset-mem' into zrevrangebyscore
antirez,2010-09-16 11:28:58,https://api.github.com/repos/antirez/redis/git/commits/2b00385d51cb75c30b47073a74f8edd0c53b942b,2b00385d51cb75c30b47073a74f8edd0c53b942b,"Added used CPU statistics in INFO output, obtained via getrusage()"
antirez,2010-09-16 11:08:40,https://api.github.com/repos/antirez/redis/git/commits/4c2e506a393615477a85ee51d69c801d84c5bad2,4c2e506a393615477a85ee51d69c801d84c5bad2,modified a bit addReply() to play better with copy on write now that we have a static buffer. Changed the name of a function from _ensureFileEvent() to _installWriteEvent().
antirez,2010-09-16 10:02:18,https://api.github.com/repos/antirez/redis/git/commits/83f39c7ab26e7f7cfa5fb59ca51b768e9ac0facb,83f39c7ab26e7f7cfa5fb59ca51b768e9ac0facb,Merge remote branch 'pietern/networking-perf'
pietern,2010-09-16 09:59:53,https://api.github.com/repos/antirez/redis/git/commits/f3357792408fd28002847586a27f9043e08a4e2c,f3357792408fd28002847586a27f9043e08a4e2c,Static buffer in client struct has a constant size
antirez,2010-09-16 09:38:40,https://api.github.com/repos/antirez/redis/git/commits/89f9f83769a2ad0b4aeb8907b82b453ace6ebe9d,89f9f83769a2ad0b4aeb8907b82b453ace6ebe9d,Merge remote branch 'pietern/networking-perf'
antirez,2010-09-15 12:09:41,https://api.github.com/repos/antirez/redis/git/commits/3856f1475936e58d3caebbb3df317421b263f2e6,3856f1475936e58d3caebbb3df317421b263f2e6,"This should fix Issue 332: when there is a background process saving we still allow the hash tables to grow, but only when a critical treshold is reached. Formerly we prevented the resize at all triggering pathological O(N) behavior. Also there is a fix for the statistics in INFO about the number of keys expired"
antirez,2010-09-14 13:18:18,https://api.github.com/repos/antirez/redis/git/commits/412e457c278395a20dbc985f85a2d3d5316a2919,412e457c278395a20dbc985f85a2d3d5316a2919,fixed typo in the latest commit
antirez,2010-09-14 13:09:37,https://api.github.com/repos/antirez/redis/git/commits/1d18f50458d2d31122cd0309f554b2443d076f7c,1d18f50458d2d31122cd0309f554b2443d076f7c,Advertise the existence of redis-check dump --fix when logging an error about corrupted AOF file
melo,2010-09-13 15:50:57,https://api.github.com/repos/antirez/redis/git/commits/0997b4119d79da25b6ca43bc5aec0e3e03f0e64d,0997b4119d79da25b6ca43bc5aec0e3e03f0e64d,"Fixed missed use of INSTALL_TOP

Thanks to sylr@github

Signed-off-by: Pedro Melo <melo@simplicidade.org>"
melo,2010-09-13 15:11:55,https://api.github.com/repos/antirez/redis/git/commits/e984050fb97939964daf6fb5e28cd7fc081c2c70,e984050fb97939964daf6fb5e28cd7fc081c2c70,"Make sure INSTALL_TOP exists before we install to it

Signed-off-by: Pedro Melo <melo@simplicidade.org>"
melo,2010-09-13 15:09:11,https://api.github.com/repos/antirez/redis/git/commits/e13865033d06ea8d499cc01ab457abedd3ba6d05,e13865033d06ea8d499cc01ab457abedd3ba6d05,"Rename INSTALL_TOP to PREFIX; update documentation

Signed-off-by: Pedro Melo <melo@simplicidade.org>"
pietern,2010-09-13 14:59:46,https://api.github.com/repos/antirez/redis/git/commits/3c23ee1ba265b6e420579dcbf94bd25ece23e9fe,3c23ee1ba265b6e420579dcbf94bd25ece23e9fe,Fix another test that sometimes returned the swapped object instead of encoding
antirez,2010-09-09 14:38:10,https://api.github.com/repos/antirez/redis/git/commits/bc63407be6c65d779ba218ad79a4889f86e37fd5,bc63407be6c65d779ba218ad79a4889f86e37fd5,redis-cli does no longer try to auto detect if it is used inside a pipe. To read last argument from stdandard input there is to use the -x option. This will make it playing better inside cron scripts and in general when stdin is hacked.
antirez,2010-09-09 08:24:56,https://api.github.com/repos/antirez/redis/git/commits/7f9a4db3c013b744e11dc7f58026009392b051de,7f9a4db3c013b744e11dc7f58026009392b051de,"Fix for the init script provided with Redis, thanks to Rowan. This fixes issue 316"
antirez,2010-09-08 11:47:28,https://api.github.com/repos/antirez/redis/git/commits/da14590bd9ecef2efca89a82677d390cc36afafd,da14590bd9ecef2efca89a82677d390cc36afafd,"Fix re-enabled again, I forgot to check if VM was enabled before calling handleClientsBlockedOnSwappedKey()"
antirez,2010-09-08 11:45:51,https://api.github.com/repos/antirez/redis/git/commits/155fb4b45e9da66802aed6226189941459fa014f,155fb4b45e9da66802aed6226189941459fa014f,"latest fix reverted, there is some problem reported by the CI test"
antirez,2010-09-08 11:26:16,https://api.github.com/repos/antirez/redis/git/commits/7f00cd226438d3cd91238974346cee624d8920e1,7f00cd226438d3cd91238974346cee624d8920e1,Fixed a race condition in VM happening when a key was deleted while there was a client waiting for this key to be resumed from swap to memory. The client would hang forever.
pietern,2010-09-07 09:49:33,https://api.github.com/repos/antirez/redis/git/commits/efc5d4cc0dd285b45061d61d7a717777aa8bc7a0,efc5d4cc0dd285b45061d61d7a717777aa8bc7a0,Fix test that sometimes returned the swapped object instead of encoding
pietern,2010-09-06 09:27:22,https://api.github.com/repos/antirez/redis/git/commits/106bd87a3ca7b90e1e6fb764398bbefccee3e4fa,106bd87a3ca7b90e1e6fb764398bbefccee3e4fa,"Fix bug where the client is not present in server.clients when free'ing it

When creating the readable event results in an error (this happens when
the server hits OS limits), the client was not added to the list of
clients when freeClient was called. This results in an assertion error.
It is better to check this condition first and free the client
immediately when this condition occurs. Port of 00a90feb."
pietern,2010-09-06 22:08:42,https://api.github.com/repos/antirez/redis/git/commits/84403fe7c1ab582c1fff4ddb5d933ba1a5f61759,84403fe7c1ab582c1fff4ddb5d933ba1a5f61759,Allow a random seed argument for the ziplist test binary
pietern,2010-09-06 21:12:41,https://api.github.com/repos/antirez/redis/git/commits/169d2ef1e0259945e667a33db7944947a6b047a0,169d2ef1e0259945e667a33db7944947a6b047a0,"Fix updating the prevlen field of consecutive entries

In the condition where the prevlen field of the next entry on insert
and delete operations needs more bytes to be properly encoded, the next
entry also needs to be updated with a new prevlen. This patch makes sure
that this effect cascades throughout the ziplist."
antirez,2010-09-06 08:12:44,https://api.github.com/repos/antirez/redis/git/commits/abe18d0e00f8ef15aac18ce59c17f90627b72e9e,abe18d0e00f8ef15aac18ce59c17f90627b72e9e,Fix for solaris compilation bug Issue 325
pietern,2010-09-03 14:44:31,https://api.github.com/repos/antirez/redis/git/commits/9e83ac06ef1c978c65fefc1fbf5af1e95f31fe15,9e83ac06ef1c978c65fefc1fbf5af1e95f31fe15,"Merge branch 'master' into networking-perf

Resolved conflict in src/db.c and changed adding an error to the reply
in blockingPopGenericCommand to use the new API."
antirez,2010-09-03 08:24:18,https://api.github.com/repos/antirez/redis/git/commits/556bdfbab9062d472e19d882ae045fece36a25ab,556bdfbab9062d472e19d882ae045fece36a25ab,added some comment and changed coding style for fix for 237
ankopainting,2010-09-03 04:13:27,https://api.github.com/repos/antirez/redis/git/commits/b435f64510a032528c42fc1cfc4eca15a4474a1b,b435f64510a032528c42fc1cfc4eca15a4474a1b,fix for issue 237
pietern,2010-09-02 21:34:32,https://api.github.com/repos/antirez/redis/git/commits/49128f0b9da725de992e427fa341a837bcc2991b,49128f0b9da725de992e427fa341a837bcc2991b,Fix bug in gluing a deferred multi bulk length to the next reply chunk
pietern,2010-09-02 17:52:24,https://api.github.com/repos/antirez/redis/git/commits/3ab203762f28ffec4036dc4f5a188d637cf78ff1,3ab203762f28ffec4036dc4f5a188d637cf78ff1,Use specialized function to add status and error replies
pietern,2010-09-02 17:35:07,https://api.github.com/repos/antirez/redis/git/commits/60361e5aac5b06ab06f4a63439ce84cd58c87f3d,60361e5aac5b06ab06f4a63439ce84cd58c87f3d,Add sds function that can be called with va_list
pietern,2010-09-02 17:18:55,https://api.github.com/repos/antirez/redis/git/commits/36c19d03e08b94ea1bc246918cbd71ea810d38aa,36c19d03e08b94ea1bc246918cbd71ea810d38aa,Changed reply buildup internals
pietern,2010-09-02 12:31:25,https://api.github.com/repos/antirez/redis/git/commits/4a7893ca9ce334f2a144faa96ef02113bef4b2b2,4a7893ca9ce334f2a144faa96ef02113bef4b2b2,Removed unneeded function
pietern,2010-09-02 12:30:56,https://api.github.com/repos/antirez/redis/git/commits/b70d355521fd02737c4de2a1583025699f1554f8,b70d355521fd02737c4de2a1583025699f1554f8,Use existing reply functions where possible
pietern,2010-09-02 12:19:15,https://api.github.com/repos/antirez/redis/git/commits/cd76bb651ddc9168451e6729fdf7793eb628f57c,cd76bb651ddc9168451e6729fdf7793eb628f57c,Free the sds in addReplySds when it cannot be added to the reply
pietern,2010-09-02 12:17:53,https://api.github.com/repos/antirez/redis/git/commits/2403fc9fdec6113f10aa54770714e550eaab1b69,2403fc9fdec6113f10aa54770714e550eaab1b69,Intialize bufpos in the fake client
pietern,2010-09-02 10:38:34,https://api.github.com/repos/antirez/redis/git/commits/0537e7bf8042cf9954d3b0abab567edf3b5c0516,0537e7bf8042cf9954d3b0abab567edf3b5c0516,Use specialized function to add multi bulk reply length
antirez,2010-09-02 08:57:58,https://api.github.com/repos/antirez/redis/git/commits/73db2acc374c99ca8224e44a7383f69e7ca24a4f,73db2acc374c99ca8224e44a7383f69e7ca24a4f,memory fragmentation reporting in INFO also added for Mac OS X
antirez,2010-08-31 16:34:34,https://api.github.com/repos/antirez/redis/git/commits/dbebd395ebc897275ec84edb143b1067aef8d882,dbebd395ebc897275ec84edb143b1067aef8d882,Version is now 2.1.4 -- AKA 2.2-alpha1
antirez,2010-08-31 15:39:06,https://api.github.com/repos/antirez/redis/git/commits/ec96ef47a630f608ae6a3103dd9a44e7eea598d9,ec96ef47a630f608ae6a3103dd9a44e7eea598d9,Merge remote branch 'pietern/issue-300'
pietern,2010-08-31 11:06:26,https://api.github.com/repos/antirez/redis/git/commits/f85202c3dc6213bffdc3ccf998e4ea85a36ad9a8,f85202c3dc6213bffdc3ccf998e4ea85a36ad9a8,Fix compilation errors and add warning for 32-bit platforms
antirez,2010-08-31 09:42:52,https://api.github.com/repos/antirez/redis/git/commits/d320764706cce1b4339043eb2ee9240d5fe3f2d2,d320764706cce1b4339043eb2ee9240d5fe3f2d2,We finally have an half decent README! (Issue 277)
antirez,2010-08-31 09:23:12,https://api.github.com/repos/antirez/redis/git/commits/f7f12a606c39fcb09a203faaaa12c49882409d8f,f7f12a606c39fcb09a203faaaa12c49882409d8f,resolved conflict merging pietern/bpop-timeout
antirez,2010-08-31 09:19:11,https://api.github.com/repos/antirez/redis/git/commits/fc09b9f44918bec49f5bbded81f5dc9172a6e396,fc09b9f44918bec49f5bbded81f5dc9172a6e396,Merge remote branch 'pietern/issue-300'
antirez,2010-08-31 09:17:06,https://api.github.com/repos/antirez/redis/git/commits/08f55b786b58b3e0f8310e02683a0e1761c5b6bf,08f55b786b58b3e0f8310e02683a0e1761c5b6bf,faster server starting in Redis tests
pietern,2010-08-31 08:21:35,https://api.github.com/repos/antirez/redis/git/commits/7b30cc3a7bed6ea1d5b4131f977d554d78791bf7,7b30cc3a7bed6ea1d5b4131f977d554d78791bf7,Fix issue 300 by upgrading variable types to 64-bit
pietern,2010-08-31 07:37:25,https://api.github.com/repos/antirez/redis/git/commits/1eb13e4913622927b17b9c2922754f864d520710,1eb13e4913622927b17b9c2922754f864d520710,Fix set tests to make sets have a deterministic encoding
pietern,2010-08-30 14:51:39,https://api.github.com/repos/antirez/redis/git/commits/57b0738011007e47ebe25d5c81acfe333c561e02,57b0738011007e47ebe25d5c81acfe333c561e02,Don't build a reply when replaying the AOF
pietern,2010-08-30 14:02:06,https://api.github.com/repos/antirez/redis/git/commits/b301c1fc2bbf977a7d9fd4718cd9914113541c75,b301c1fc2bbf977a7d9fd4718cd9914113541c75,Wrapper for adding unknown multi bulk length to reply list
pietern,2010-08-30 12:44:34,https://api.github.com/repos/antirez/redis/git/commits/834ef78e27a8690a91d727259aaece611664a368,834ef78e27a8690a91d727259aaece611664a368,Refactor reply buildup for speed on large multi bulk replies
antirez,2010-08-30 14:31:03,https://api.github.com/repos/antirez/redis/git/commits/fb92ecece75ec48efb927fa6c2f2f86a58f73609,fb92ecece75ec48efb927fa6c2f2f86a58f73609,"BLPOP inside MULTI/EXEC block no longer crashes, instead if the list is empty the behavior is like if the timeout is reached. This fixes Issue 285"
antirez,2010-08-30 13:57:03,https://api.github.com/repos/antirez/redis/git/commits/8079656a8ea7c379815366c6f89f9954e86a57be,8079656a8ea7c379815366c6f89f9954e86a57be,Now redis-cli replies to help showing some basic usage information (Issue 291)
antirez,2010-08-30 13:36:13,https://api.github.com/repos/antirez/redis/git/commits/93b2a7718eefd73cdd1b3b221cfc38be83fca0b5,93b2a7718eefd73cdd1b3b221cfc38be83fca0b5,It is now possible to use authentication and DB selection options at the same time in redis-cli (Issue 298)
antirez,2010-08-30 09:51:45,https://api.github.com/repos/antirez/redis/git/commits/e0e1c195202dd74ab22554dd4293672cc95368ee,e0e1c195202dd74ab22554dd4293672cc95368ee,Fixed MONITOR mode and Issue 296
antirez,2010-08-30 09:37:17,https://api.github.com/repos/antirez/redis/git/commits/8fedd04dccd08e9a25652a22c2034d3f38f72d0f,8fedd04dccd08e9a25652a22c2034d3f38f72d0f,Makefile deps updated
pietern,2010-08-30 09:25:02,https://api.github.com/repos/antirez/redis/git/commits/ed0dd55402710d5bb21ef66d81a7dff694737c22,ed0dd55402710d5bb21ef66d81a7dff694737c22,Show the current throughput while benchmarking
pietern,2010-08-30 09:14:54,https://api.github.com/repos/antirez/redis/git/commits/36babc1e31f434e95fc49a6a1f611a75b3827ade,36babc1e31f434e95fc49a6a1f611a75b3827ade,Refactor reply parsing code in redis-benchmark for efficiency
antirez,2010-08-30 08:32:32,https://api.github.com/repos/antirez/redis/git/commits/2f6b31c3bb95443991513e496d8d19656c4a80b5,2f6b31c3bb95443991513e496d8d19656c4a80b5,"Fix for a race in BGSAVE that may result in some data not being saved as soon as possible (when the configured saving triggers should fire). Also known as Issue 313, more details there in the google code issue."
antirez,2010-08-27 15:06:36,https://api.github.com/repos/antirez/redis/git/commits/e5f257c2b2f7be0d58ebc0cf791d549c647cab6b,e5f257c2b2f7be0d58ebc0cf791d549c647cab6b,fix for the prev fix
antirez,2010-08-27 15:04:26,https://api.github.com/repos/antirez/redis/git/commits/c1ae36aea814e1bcb0f046a00b51ed46d7432c3b,c1ae36aea814e1bcb0f046a00b51ed46d7432c3b,"Fix for bug 312, yet to verify in a couple of minutes..."
antirez,2010-08-27 10:46:10,https://api.github.com/repos/antirez/redis/git/commits/09252fc4f36e9a5b89c9a9ff8b3c9750a3144b45,09252fc4f36e9a5b89c9a9ff8b3c9750a3144b45,Fixed another instace of the Issue 173
antirez,2010-08-27 09:01:03,https://api.github.com/repos/antirez/redis/git/commits/357d36733dc37d87160ca2f65013656693290e9d,357d36733dc37d87160ca2f65013656693290e9d,"Fixed segfault in freeMemoryIfNeeded due to the fact that keys are now sds strings and not objects in the main hash table, thanks to Anthony Lauzon for spotting the bug and providing a patch."
antirez,2010-08-26 17:10:40,https://api.github.com/repos/antirez/redis/git/commits/2df84b726983ae1f4fc9c16da61d5a0ce5114cc4,2df84b726983ae1f4fc9c16da61d5a0ce5114cc4,intset loading bug fixed
antirez,2010-08-26 16:47:03,https://api.github.com/repos/antirez/redis/git/commits/ec7e138926b7b587adc247e8c64da6d3b1706434,ec7e138926b7b587adc247e8c64da6d3b1706434,test for intset integer encodability test and some small refactoring
antirez,2010-08-26 15:52:02,https://api.github.com/repos/antirez/redis/git/commits/588cd980e93a1a9f6afae85ed52ec74ff3d811e1,588cd980e93a1a9f6afae85ed52ec74ff3d811e1,"redis-cli tests commented out since there is a problem with the CI server and this tests, will be activated again once the problem is fixed"
antirez,2010-08-26 15:29:13,https://api.github.com/repos/antirez/redis/git/commits/452ccf7a415fd748cb0b3d00bef8062455c3c675,452ccf7a415fd748cb0b3d00bef8062455c3c675,SORT stress testing against bigger aggregate values
antirez,2010-08-26 14:58:02,https://api.github.com/repos/antirez/redis/git/commits/e4ecc931192bee19d0365d2efe0e12b1be27dc9a,e4ecc931192bee19d0365d2efe0e12b1be27dc9a,Version is now 2.1.3
antirez,2010-08-26 14:19:06,https://api.github.com/repos/antirez/redis/git/commits/4e0d34089ac874db92430820b9fe5ce8426c2ae5,4e0d34089ac874db92430820b9fe5ce8426c2ae5,Merge remote branch 'pietern/redis-cli-fix'
pietern,2010-08-26 12:05:14,https://api.github.com/repos/antirez/redis/git/commits/94364d53b4746e8cd9e3da633162cb1e34f0bdb6,94364d53b4746e8cd9e3da633162cb1e34f0bdb6,Verify that the blocking pop timeout value is a non-negative integer
antirez,2010-08-26 11:18:56,https://api.github.com/repos/antirez/redis/git/commits/e59a64b8d37c4d051234934ad74f70c4ac625e95,e59a64b8d37c4d051234934ad74f70c4ac625e95,"forgot the traceleaks var in tests set to 1, reverted to the default, 0"
pietern,2010-08-26 11:18:19,https://api.github.com/repos/antirez/redis/git/commits/2929ca9786e0dd64c656bbd212c35c137ab54fda,2929ca9786e0dd64c656bbd212c35c137ab54fda,Fix parenthesis error on decrementing *argc
antirez,2010-08-26 11:18:24,https://api.github.com/repos/antirez/redis/git/commits/bad7d097e95ec0735c41f85b50ace65bec6134ae,bad7d097e95ec0735c41f85b50ace65bec6134ae,fixed a memory leak in the new Set code
antirez,2010-08-26 10:28:53,https://api.github.com/repos/antirez/redis/git/commits/5f19e8a4a5183255a38c31ea88ee6b72e96eca66,5f19e8a4a5183255a38c31ea88ee6b72e96eca66,computeObjectSwappability is now able to compute swappability for intset encoded sets
pietern,2010-08-26 10:13:51,https://api.github.com/repos/antirez/redis/git/commits/740eee1cc6fb65a094e5f17e85aa37fdaa24f2e9,740eee1cc6fb65a094e5f17e85aa37fdaa24f2e9,Fix type that was not renamed and compiler warning
antirez,2010-08-26 10:10:16,https://api.github.com/repos/antirez/redis/git/commits/674492bcebbfd59612ad65d7429b3db5735bd447,674492bcebbfd59612ad65d7429b3db5735bd447,removed a duplicated ERRNO checking that is useless at all
antirez,2010-08-26 10:04:24,https://api.github.com/repos/antirez/redis/git/commits/acc75bfd4f1607625876d74d6447efaaf505db59,acc75bfd4f1607625876d74d6447efaaf505db59,Merge remote branch 'pietern/intset-split'
pietern,2010-08-26 09:22:58,https://api.github.com/repos/antirez/redis/git/commits/f9d5c4e33c8b03d20bd9e4ec145792c000a7210f,f9d5c4e33c8b03d20bd9e4ec145792c000a7210f,Make the function intsetUpgrade self-contained
pietern,2010-08-26 09:06:30,https://api.github.com/repos/antirez/redis/git/commits/76864d5626e6dc7d436df5c11901844a4c05740e,76864d5626e6dc7d436df5c11901844a4c05740e,Expand macro's to functions for readability
pietern,2010-08-25 12:48:50,https://api.github.com/repos/antirez/redis/git/commits/b4b62c34dbc97b8bcb6c84e0d0cef1d27117175e,b4b62c34dbc97b8bcb6c84e0d0cef1d27117175e,Use fstat to detect if stdin was redirected
pietern,2010-08-25 12:15:41,https://api.github.com/repos/antirez/redis/git/commits/f791d66e205b7449ee1829e60c2422caa5988192,f791d66e205b7449ee1829e60c2422caa5988192,Make helper functions simpler
pietern,2010-08-25 12:08:32,https://api.github.com/repos/antirez/redis/git/commits/f9b252613bcdaf81183a1ed2fb12d1a9feabc183,f9b252613bcdaf81183a1ed2fb12d1a9feabc183,Comments in redis-cli tests
pietern,2010-08-25 11:39:11,https://api.github.com/repos/antirez/redis/git/commits/ae77016e572bc5ed48574c3a173c4cda27c5e0d9,ae77016e572bc5ed48574c3a173c4cda27c5e0d9,Add a newline to tty output after every reply
pietern,2010-08-25 08:05:50,https://api.github.com/repos/antirez/redis/git/commits/5d15b5207d3fb83b4815df596251f553b7a811d5,5d15b5207d3fb83b4815df596251f553b7a811d5,Re-introduce the interactive field so we can reconnect in interactive mode
pietern,2010-08-25 07:54:02,https://api.github.com/repos/antirez/redis/git/commits/4b93e5e2676e1dc45de1c118c03042de1ce9f024,4b93e5e2676e1dc45de1c118c03042de1ce9f024,Merge master and move argument splitting patch to sds.c
antirez,2010-08-24 16:39:34,https://api.github.com/repos/antirez/redis/git/commits/c0b3d42372dbe67c6ef096372869e2b60d4a1cdc,c0b3d42372dbe67c6ef096372869e2b60d4a1cdc,redis-cli now supports automatically reconnection in interactive mode
antirez,2010-08-24 16:08:09,https://api.github.com/repos/antirez/redis/git/commits/b37ca6edb10faa0ebcf54a7d23cee31d895fe5b1,b37ca6edb10faa0ebcf54a7d23cee31d895fe5b1,"Issue 179 fixed, now redis-cli is able to parse correctly multi bulk replies with elements that are errors"
antirez,2010-08-24 15:09:25,https://api.github.com/repos/antirez/redis/git/commits/695fe87456ac4e5ed14e4a853b9cce61fb3e5975,695fe87456ac4e5ed14e4a853b9cce61fb3e5975,The pid file is now created only after the server is correctly initialied. It is also removed on sigterm and when the stack trace is produced after a sigbus or a sigsegv. This two changes should fix the Issue 175
antirez,2010-08-24 14:25:00,https://api.github.com/repos/antirez/redis/git/commits/b91d605a35c294573f0213c89c421d09b538c2b6,b91d605a35c294573f0213c89c421d09b538c2b6,"slave now detect lost connection during SYNC, fixing Issue 173"
antirez,2010-08-24 14:04:13,https://api.github.com/repos/antirez/redis/git/commits/778b2210a939083070abaea4b7fc62ebf2ad9bfb,778b2210a939083070abaea4b7fc62ebf2ad9bfb,slave with attached slaves now close the conection to all the slaves when the connection to the master is lost. Now a slave without a connected link to the master will refuse SYNC from other slaves. Enhanced the replication error reporting. All this will fix Issue 156
antirez,2010-08-24 10:10:59,https://api.github.com/repos/antirez/redis/git/commits/e452436a07224022df17c59d6dbfbd47dcfc7fd6,e452436a07224022df17c59d6dbfbd47dcfc7fd6,"BLPOPping clients are no longer subject to connection timeouts, fixing issues 155"
antirez,2010-08-24 09:49:05,https://api.github.com/repos/antirez/redis/git/commits/01daeecee7a93b92e10347fc2613b8ee22de751e,01daeecee7a93b92e10347fc2613b8ee22de751e,added tests for invalid bulk argument
antirez,2010-08-24 09:45:05,https://api.github.com/repos/antirez/redis/git/commits/a679185aa515e2f52d8a0f66c3972eb8f43d7fae,a679185aa515e2f52d8a0f66c3972eb8f43d7fae,"sanity check for the bulk argument in protocol parsing code, fixing issue 146"
antirez,2010-08-24 08:10:01,https://api.github.com/repos/antirez/redis/git/commits/e19387302522a81d987bedef98d8961dd7ff06a9,e19387302522a81d987bedef98d8961dd7ff06a9,changed the comments on top of redis-copy.rb to reflect what the program really does
antirez,2010-08-23 15:06:38,https://api.github.com/repos/antirez/redis/git/commits/c91abdcd077f868a59290bc9d68fba3130a3121d,c91abdcd077f868a59290bc9d68fba3130a3121d,"Fixed overflow detection in argument to long convertion function in general, and in expire/ttl pairs specifically, addressing issue 54"
pietern,2010-08-21 09:25:13,https://api.github.com/repos/antirez/redis/git/commits/cb72d0f155cb8faf6aa02f68318ba9b7477447c3,cb72d0f155cb8faf6aa02f68318ba9b7477447c3,Rename iterator to setTypeIterator for consistency
pietern,2010-08-21 09:15:31,https://api.github.com/repos/antirez/redis/git/commits/029e5577ff01c13d8ddfdf9c6749ac33c9bd9e9f,029e5577ff01c13d8ddfdf9c6749ac33c9bd9e9f,Make SORT use the hybrid set accessors to allow sorting intsets
pietern,2010-08-21 09:03:56,https://api.github.com/repos/antirez/redis/git/commits/2b9a59471fe550e7c006ff9efb1367560be76742,2b9a59471fe550e7c006ff9efb1367560be76742,SORT tests with hash table encoded set as input
pietern,2010-08-21 09:02:22,https://api.github.com/repos/antirez/redis/git/commits/ced6709cb9f4db367c58035f1ccb4a3ddd9c21cf,ced6709cb9f4db367c58035f1ccb4a3ddd9c21cf,Make SORT tests use both ziplists and linked lists as input
pietern,2010-08-21 08:55:53,https://api.github.com/repos/antirez/redis/git/commits/5d4f3a8c85e528b47d125a588f6255eeb1836e0f,5d4f3a8c85e528b47d125a588f6255eeb1836e0f,Move SORT tests around
pietern,2010-08-21 08:54:31,https://api.github.com/repos/antirez/redis/git/commits/a53ebb4c8e7d209ff327b1ae9270b39e72424b2c,a53ebb4c8e7d209ff327b1ae9270b39e72424b2c,Don't abort test suite when the server block has a return value
pietern,2010-08-20 11:42:42,https://api.github.com/repos/antirez/redis/git/commits/87c74dfaa81d204d47ca9ae9e3f76ea521ca8460,87c74dfaa81d204d47ca9ae9e3f76ea521ca8460,Check if stroll return value was clamped
pietern,2010-08-20 10:40:29,https://api.github.com/repos/antirez/redis/git/commits/aaada3f962a9f87fb239e55e3d26c1e794d411d5,aaada3f962a9f87fb239e55e3d26c1e794d411d5,"Merge branch 'master' into intset-split

Conflicts:
	src/Makefile
	src/t_set.c"
pietern,2010-08-13 17:28:49,https://api.github.com/repos/antirez/redis/git/commits/c4705381422ead4ad99f4b7a3bc11f059c460401,c4705381422ead4ad99f4b7a3bc11f059c460401,Make ziplist schema more efficient for strings with length > 15
antirez,2010-08-05 09:36:39,https://api.github.com/repos/antirez/redis/git/commits/cbce5171451eb53f1370aacc30decd74512347ac,cbce5171451eb53f1370aacc30decd74512347ac,redis cli argument splitting is general and is now moved into the sds.c lib
pietern,2010-08-04 16:36:03,https://api.github.com/repos/antirez/redis/git/commits/abb731e5b8b2c305c2f4d204d1cca12bdd6fda8c,abb731e5b8b2c305c2f4d204d1cca12bdd6fda8c,Deprecate starting interactive mode using the -i flag
pietern,2010-08-04 16:16:39,https://api.github.com/repos/antirez/redis/git/commits/cf0c6b78f132847a576ccd275cb0fffbf0a061ff,cf0c6b78f132847a576ccd275cb0fffbf0a061ff,"Set tty before going into interactive mode to get non-pretty output when
the commands are read from stdin."
pietern,2010-08-04 15:46:56,https://api.github.com/repos/antirez/redis/git/commits/3a51bff0358c38162bc925ab25661e6090cf1161,3a51bff0358c38162bc925ab25661e6090cf1161,Change output format for non-tty redis-cli execution
pietern,2010-08-04 15:16:05,https://api.github.com/repos/antirez/redis/git/commits/123a10f7a5612c7174adeb05d238d88b98fb906d,123a10f7a5612c7174adeb05d238d88b98fb906d,Let the output mode depend on having a tty or not
pietern,2010-08-04 15:02:13,https://api.github.com/repos/antirez/redis/git/commits/07242c0ccf1fd6a4d8199fa09981e6f7a3a1cce9,07242c0ccf1fd6a4d8199fa09981e6f7a3a1cce9,"Tests for redis-cli in non-interactive mode

Minor change in redis-cli output for the (multi-)bulk response but this
will be fixed in the next commit."
pietern,2010-08-04 13:29:28,https://api.github.com/repos/antirez/redis/git/commits/0439d792c46efa328d67e098d688435bca1e2700,0439d792c46efa328d67e098d688435bca1e2700,"Add tests for quotation in an interactive redis-cli session

Patched redis-cli to abort on unexpected quotation. This caused
redis-cli to get into an infinite, memory-consuming loop."
pietern,2010-08-04 12:15:52,https://api.github.com/repos/antirez/redis/git/commits/f2dd4769dd1dad4e85fffe4e560b9b355d59e703,f2dd4769dd1dad4e85fffe4e560b9b355d59e703,"Tests for the interactive mode of redis-cli

Changed redis-cli to output the raw response for a bulk reply when it is
run in interactive mode instead of checking isatty."
pietern,2010-08-03 18:49:53,https://api.github.com/repos/antirez/redis/git/commits/69ef89f2cf5a699d97475ff8e7c3ce714c6947cf,69ef89f2cf5a699d97475ff8e7c3ce714c6947cf,"Reference zset score in zskiplistNode from dict entries

This avoids the extra allocation of sizeof(double) for storing the score
of a zset entry in the hash table. Saves sizeof(double) + malloc
overhead = approx. 16 bytes per zset entry."
pietern,2010-08-03 17:21:16,https://api.github.com/repos/antirez/redis/git/commits/2159782b513da6eaba9be210c6b8b237baab6cfe,2159782b513da6eaba9be210c6b8b237baab6cfe,Use flexible array in zskiplistNode to reduce memory usage
antirez,2010-08-03 12:25:22,https://api.github.com/repos/antirez/redis/git/commits/1fb4e8def723ac836ba96e5369f22a0bf463578d,1fb4e8def723ac836ba96e5369f22a0bf463578d,PERSIST: a fix and some basic test
antirez,2010-08-03 12:19:20,https://api.github.com/repos/antirez/redis/git/commits/a539d29ac559ffb80bfe6b3f045eddbd772fa1ba,a539d29ac559ffb80bfe6b3f045eddbd772fa1ba,PERSIST command implemented
antirez,2010-08-03 11:38:39,https://api.github.com/repos/antirez/redis/git/commits/6146329f1f3381e8daef47463a6588b161f10596,6146329f1f3381e8daef47463a6588b161f10596,replication test with expires
pietern,2010-08-03 11:33:12,https://api.github.com/repos/antirez/redis/git/commits/a5639e7dd9a1664c2bee87a51e775a5f73c64ffa,a5639e7dd9a1664c2bee87a51e775a5f73c64ffa,Change initialization to allow listening on both a port and socket
antirez,2010-08-03 11:09:27,https://api.github.com/repos/antirez/redis/git/commits/23d7298b1594cf673f04f2f8561d4f85b8457c6f,23d7298b1594cf673f04f2f8561d4f85b8457c6f,Merge remote branch 'pietern/test-encoding-fix' into writeonexpire
antirez,2010-08-03 11:08:32,https://api.github.com/repos/antirez/redis/git/commits/2c572622fb99f32328de58f815953f17d4ad0e4d,2c572622fb99f32328de58f815953f17d4ad0e4d,no longer passing tests due to the new write-on-volatile semantics modified/removed
antirez,2010-08-03 10:26:30,https://api.github.com/repos/antirez/redis/git/commits/0cf5b7b57cde8b699198a866b04feca9f5394d03,0cf5b7b57cde8b699198a866b04feca9f5394d03,allow to set a new EXPIRE of an existing volatile key
antirez,2010-08-02 19:37:39,https://api.github.com/repos/antirez/redis/git/commits/c25a5d3b1062f3398a96a76ecd27c6f3a77a446e,c25a5d3b1062f3398a96a76ecd27c6f3a77a446e,memory leak removed from expire propagation code
antirez,2010-08-02 16:13:39,https://api.github.com/repos/antirez/redis/git/commits/bcf2995c987acea7f5485ec0e3717a29a7e98457,bcf2995c987acea7f5485ec0e3717a29a7e98457,"support for write operations against expiring keys, by master-controlled expiring in replication and AOF synthesizing DEL operations"
pietern,2010-08-01 21:06:00,https://api.github.com/repos/antirez/redis/git/commits/7e91f971f7ab63dc5bb60dc0ec5e1ea76efce939,7e91f971f7ab63dc5bb60dc0ec5e1ea76efce939,Add support for domain sockets to redis-cli
pietern,2010-08-01 20:55:24,https://api.github.com/repos/antirez/redis/git/commits/c61e69257af07a3e79b4c623ded540062daa156e,c61e69257af07a3e79b4c623ded540062daa156e,Support for Redis to listen on a Unix socket
pietern,2010-08-01 09:20:26,https://api.github.com/repos/antirez/redis/git/commits/68254919284ec958225e1bc5fb2951ef096c92d1,68254919284ec958225e1bc5fb2951ef096c92d1,Fix assertion function on value encoding
antirez,2010-07-31 11:55:06,https://api.github.com/repos/antirez/redis/git/commits/0c7a9dec651aa15857da30b95cca7079490725ab,0c7a9dec651aa15857da30b95cca7079490725ab,Merge remote branch 'pietern/list-test'
pietern,2010-07-29 20:13:31,https://api.github.com/repos/antirez/redis/git/commits/673e1fb7e4c171f5ead560f6886e877f43730cf0,673e1fb7e4c171f5ead560f6886e877f43730cf0,"Change getDoubleFromObject to fail on NaN.

Return an error when the resulting value is not a number (NaN). Fix
ZUNIONSTORE/ZINTERSTORE to clean up when a weight argument is not a
double value."
pietern,2010-07-29 19:31:58,https://api.github.com/repos/antirez/redis/git/commits/d9e28bcf00a1e52c5e0c8cbc5f2c8c8cb7d7027f,d9e28bcf00a1e52c5e0c8cbc5f2c8c8cb7d7027f,"Fix ZUNIONSTORE/ZINTERSTORE to never store a NaN score.

When +inf and -inf are added, the result is NaN. We don't want NaN
scores in a sorted set, so agreed on the result of this operation being
zero."
pietern,2010-07-29 11:53:52,https://api.github.com/repos/antirez/redis/git/commits/715c801a07f9157963dc629386eaaf2406ad7572,715c801a07f9157963dc629386eaaf2406ad7572,"Use a large value to consistently trigger a list encoding,
even when the list is swapped out and in again."
pietern,2010-07-29 11:31:24,https://api.github.com/repos/antirez/redis/git/commits/86d392498ba41501f9508e03f6c830d7a5601631,86d392498ba41501f9508e03f6c830d7a5601631,ensure the value is swapped in before testing its encoding
antirez,2010-07-28 16:56:52,https://api.github.com/repos/antirez/redis/git/commits/cbf7e1070a5f3bcd8024dff481a2f729a2b5cf2f,cbf7e1070a5f3bcd8024dff481a2f729a2b5cf2f,fix of the fix for the replication bug
antirez,2010-07-28 16:42:02,https://api.github.com/repos/antirez/redis/git/commits/8c1420ff2a2a9e68ab3faa98bb82d682301fa66b,8c1420ff2a2a9e68ab3faa98bb82d682301fa66b,"Fixed a replication bug in ZINTERSTORE.

In order to trigger the bug what's needed is to call ZINTERSTORE
resulting into an empty set created, bug against a key that already
existed. The command was not propagated, so the replica ended with the
key that the master removed. Sequence of command to reproduce:

redis-cli hset 446 34 905
redis-cli hset 446 393 911
redis-cli zadd 966 0.085412045980529885 652
redis-cli zadd 645 0.25081839284432045 280
redis-cli zinterstore 446 2 966 645"
antirez,2010-07-28 12:08:46,https://api.github.com/repos/antirez/redis/git/commits/a0573260b0928170d66268eb22be1a5699615275,a0573260b0928170d66268eb22be1a5699615275,better random dataset creation function in test. master-slave replication test now is able to save the two datasets in CSV when an inconsistency is detected.
antirez,2010-07-27 13:26:08,https://api.github.com/repos/antirez/redis/git/commits/6171250871e408928a172c09d5fdf41961720fbc,6171250871e408928a172c09d5fdf41961720fbc,fixed a ziplist bug about encoding of integer values overflowing 64 bit
antirez,2010-07-27 12:46:39,https://api.github.com/repos/antirez/redis/git/commits/db0c43a70c5da44642609414c12c0efbd2ef9746,db0c43a70c5da44642609414c12c0efbd2ef9746,removed test code having bad effects...
antirez,2010-07-27 12:42:11,https://api.github.com/repos/antirez/redis/git/commits/dd3f505ff527be62f422bf164d5ef62932d0f06a,dd3f505ff527be62f422bf164d5ef62932d0f06a,Consistency test improved
antirez,2010-07-27 12:30:02,https://api.github.com/repos/antirez/redis/git/commits/f99e660b44281cd6bd6c24c60f1ebfb5e0e994e1,f99e660b44281cd6bd6c24c60f1ebfb5e0e994e1,"malloc definition with deprecated attribute was duplicated, one removed"
antirez,2010-07-27 08:09:26,https://api.github.com/repos/antirez/redis/git/commits/80091bbaacf83d82635f3202c1db3f61f56dc0d0,80091bbaacf83d82635f3202c1db3f61f56dc0d0,STRLEN command implemented
antirez,2010-07-27 08:00:38,https://api.github.com/repos/antirez/redis/git/commits/e0be2289e9582423495c5b36a413c02765cde3ea,e0be2289e9582423495c5b36a413c02765cde3ea,hash table example commented out in dict.c
antirez,2010-07-27 07:36:42,https://api.github.com/repos/antirez/redis/git/commits/b3aa6d712e1345a57696e4d260ce49ccac253ba7,b3aa6d712e1345a57696e4d260ce49ccac253ba7,use the function deprecated attribute if compiling with GCC to get warnings for malloc/free usages. We always want to use our zmalloc/zfree versions for memory usage tracking
d0k,2010-07-24 21:20:00,https://api.github.com/repos/antirez/redis/git/commits/399f2f401c6fc3d489e2e40ffc78638425e3a09e,399f2f401c6fc3d489e2e40ffc78638425e3a09e,"Add zcalloc and use it where appropriate

calloc is more effecient than malloc+memset when the system uses mmap to
allocate memory. mmap always returns zeroed memory so the memset can be
avoided.  The threshold to use mmap is 16k in osx libc and 128k in bsd
libc and glibc. The kernel can lazily allocate the pages, this reduces
memory usage when we have a page table or hash table that is mostly
empty.

This change is most visible when you start a new redis instance with vm
enabled.  You'll see no increased memory usage no matter how big your
page table is."
d0k,2010-07-24 21:10:42,https://api.github.com/repos/antirez/redis/git/commits/d9dd352b3693e1ad8ab2e0993b4f0a275d7fd512,d9dd352b3693e1ad8ab2e0993b4f0a275d7fd512,"Remove _dictAlloc and friends

zmalloc calls abort() so _dictPanic will never be called."
d0k,2010-07-24 20:37:01,https://api.github.com/repos/antirez/redis/git/commits/b1e0bd4b9b5a9c203a4400bd52a06e377876f423,b1e0bd4b9b5a9c203a4400bd52a06e377876f423,Reduce code duplication
pietern,2010-07-23 11:08:35,https://api.github.com/repos/antirez/redis/git/commits/e39c8b5047c63336f67a7749e8f8cdd539c5eb22,e39c8b5047c63336f67a7749e8f8cdd539c5eb22,exit with non-zero status when there are failed tests
antirez,2010-07-22 21:31:40,https://api.github.com/repos/antirez/redis/git/commits/230729617dc6714858902da5520b4e2c1ecc711e,230729617dc6714858902da5520b4e2c1ecc711e,don't open/close log file if log level is not matched
pietern,2010-07-22 14:06:27,https://api.github.com/repos/antirez/redis/git/commits/c8a10631d14dfad768b0b924e8dfb240af858dcb,c8a10631d14dfad768b0b924e8dfb240af858dcb,fix rare condition where 'key' would already be destroyed while is was needed later on
antirez,2010-07-22 13:48:57,https://api.github.com/repos/antirez/redis/git/commits/2f996f02174343ce766710fc6871e2e6df8e73c6,2f996f02174343ce766710fc6871e2e6df8e73c6,defensive programming: set o->ptr to NULL before freeing objects
antirez,2010-07-22 12:48:45,https://api.github.com/repos/antirez/redis/git/commits/e002ec6801f41d29e1038f687b52dfe6c7fc9c8a,e002ec6801f41d29e1038f687b52dfe6c7fc9c8a,other shared objects where created in the I/O thread in createStringObjectFromLongLong. Fixed as well.
antirez,2010-07-22 11:12:24,https://api.github.com/repos/antirez/redis/git/commits/cdbea20afb232a3603f988a1dc235f75d8eff981,cdbea20afb232a3603f988a1dc235f75d8eff981,minor typo fixed in a comment
antirez,2010-07-22 11:08:02,https://api.github.com/repos/antirez/redis/git/commits/0e5441d8161042493fcfdacaeed2a770f1f7285c,0e5441d8161042493fcfdacaeed2a770f1f7285c,"don't use object sharing inside I/O threads, as a fix for a well known instability of VM introduced with the new object sharing code"
antirez,2010-07-21 11:16:26,https://api.github.com/repos/antirez/redis/git/commits/1a71fb96697fc2af064fc221b21421ad6a8196fa,1a71fb96697fc2af064fc221b21421ad6a8196fa,"vm_blocked_clients count fixed in INFO, thanks to Pietern Noordhuis"
antirez,2010-07-16 21:56:18,https://api.github.com/repos/antirez/redis/git/commits/2cffe2993b01600ab16e7e424b71db4f6327941c,2cffe2993b01600ab16e7e424b71db4f6327941c,"TODO list modified, trivial change to source code"
antirez,2010-07-12 10:01:15,https://api.github.com/repos/antirez/redis/git/commits/5b4bff9c175a0189672d95eb953df5704c891d0c,5b4bff9c175a0189672d95eb953df5704c891d0c,WATCH is now affected only when write commands actually modify the key content
antirez,2010-07-09 08:51:41,https://api.github.com/repos/antirez/redis/git/commits/e51a74aa40136387615eec055975c63c803f5b30,e51a74aa40136387615eec055975c63c803f5b30,fmacro included in linenoise.c
antirez,2010-07-07 16:44:53,https://api.github.com/repos/antirez/redis/git/commits/99628c1af8ab2a2af4f2baf7039c08acdf0974ce,99628c1af8ab2a2af4f2baf7039c08acdf0974ce,redis-cli history saved across sessions
antirez,2010-07-06 17:17:09,https://api.github.com/repos/antirez/redis/git/commits/185cabda4524efc03c767243fb90083708a4aeeb,185cabda4524efc03c767243fb90083708a4aeeb,redis-cli is now able to report version information using -v
antirez,2010-07-06 17:10:20,https://api.github.com/repos/antirez/redis/git/commits/443d1e9efedfcab7d67c10085b69a9b4cb1db6f5,443d1e9efedfcab7d67c10085b69a9b4cb1db6f5,Make install fixed using a dummy taget
antirez,2010-07-06 17:07:16,https://api.github.com/repos/antirez/redis/git/commits/acc018549379dc2ac02a0b0484cfdb4d56122488,acc018549379dc2ac02a0b0484cfdb4d56122488,"make install target, finally ;)"
antirez,2010-07-06 16:54:54,https://api.github.com/repos/antirez/redis/git/commits/f26dde8ca93e50068084cc2f5423b9244296148d,f26dde8ca93e50068084cc2f5423b9244296148d,"top level Makefile added, so you do not need to cd src"
antirez,2010-07-06 16:30:38,https://api.github.com/repos/antirez/redis/git/commits/b056ca39f2d37957164c5bfc04c466b64aa6087e,b056ca39f2d37957164c5bfc04c466b64aa6087e,"improved random dataset creation in test: del, sunionstore, zunionstore"
antirez,2010-07-06 15:24:00,https://api.github.com/repos/antirez/redis/git/commits/8b654e54c490161983e42a328675e484e404e2d2,8b654e54c490161983e42a328675e484e404e2d2,First implementation of a replication consistency test
pietern,2010-07-05 19:16:33,https://api.github.com/repos/antirez/redis/git/commits/d0a4e24e321ced2324b0ad4b6be34f13f90e9b90,d0a4e24e321ced2324b0ad4b6be34f13f90e9b90,"merged code from 184d74ab, 4774a53b, f483ce5f to new file structure"
antirez,2010-07-05 18:37:20,https://api.github.com/repos/antirez/redis/git/commits/70a214c46d00f37b83a4cb944e09a754072a28c9,70a214c46d00f37b83a4cb944e09a754072a28c9,INSTALL file added BETATESTING.txt removed
antirez,2010-07-05 18:14:48,https://api.github.com/repos/antirez/redis/git/commits/d06a5b23c85d615310ce199c04bc2d122d16526a,d06a5b23c85d615310ce199c04bc2d122d16526a,Fixed compilation on *BSD systems
antirez,2010-07-05 18:06:54,https://api.github.com/repos/antirez/redis/git/commits/b67d234563e03ceb9325b39a78cca11bec28569d,b67d234563e03ceb9325b39a78cca11bec28569d,"Fixed a crash loading the AOF file containing MULTI/EXEC, a result of WATCH implementation. Test needed..."
antirez,2010-07-05 17:38:12,https://api.github.com/repos/antirez/redis/git/commits/b7a8daef6070816e08438fd64b2b9a41571eb333,b7a8daef6070816e08438fd64b2b9a41571eb333,"WATCH will now consider touched keys target of EXPIRE command after the WATCH is performed, but not before"
pietern,2010-07-02 18:42:20,https://api.github.com/repos/antirez/redis/git/commits/2767f1c0c6983c75689dc67638546196c5dddb26,2767f1c0c6983c75689dc67638546196c5dddb26,fix aof and digest code to work with dual set encoding
pietern,2010-07-02 17:57:12,https://api.github.com/repos/antirez/redis/git/commits/96ffb2fe97c3e77879e7a4f6f7457397a18bf233,96ffb2fe97c3e77879e7a4f6f7457397a18bf233,merged intset code into the split files
antirez,2010-07-01 18:22:46,https://api.github.com/repos/antirez/redis/git/commits/d3b958c3fc32be66dac929ede482ef5fe8f5b462,d3b958c3fc32be66dac929ede482ef5fe8f5b462,"Fixed MONITOR output for consistency: now integer encoded values are also formatted like this: ""3932"""
antirez,2010-07-01 18:18:48,https://api.github.com/repos/antirez/redis/git/commits/5bd09cd4c5b680040a8bb6ac1ae1395499cc25b7,5bd09cd4c5b680040a8bb6ac1ae1395499cc25b7,Fix the AOF fix of the latest commit ;)
antirez,2010-07-01 18:13:33,https://api.github.com/repos/antirez/redis/git/commits/daf2049d0d62aa2b77bd6f9a38d03bb4bbfed59c,daf2049d0d62aa2b77bd6f9a38d03bb4bbfed59c,fixed error code checking for *write operations and return value in AOF rewriting function
antirez,2010-07-01 14:55:12,https://api.github.com/repos/antirez/redis/git/commits/af4e866dbb1455a50d51b3d5f46832f1a36e2080,af4e866dbb1455a50d51b3d5f46832f1a36e2080,Merged with split
antirez,2010-07-01 13:14:25,https://api.github.com/repos/antirez/redis/git/commits/0f49d6b0496b2e881e2dc320b7e16539541fb77a,0f49d6b0496b2e881e2dc320b7e16539541fb77a,minor aesthetic change
antirez,2010-07-01 12:52:01,https://api.github.com/repos/antirez/redis/git/commits/bb8716b6dc6980415da8b40b46ffb6e637f33a6c,bb8716b6dc6980415da8b40b46ffb6e637f33a6c,TODO updated
antirez,2010-07-01 12:47:26,https://api.github.com/repos/antirez/redis/git/commits/2c24c22039026baf50768dc2101ed6f3daf87f6c,2c24c22039026baf50768dc2101ed6f3daf87f6c,Version is now 2.1.2
antirez,2010-07-01 12:45:37,https://api.github.com/repos/antirez/redis/git/commits/24110a4d7daa2324e3c2cd165c5741897563ca19,24110a4d7daa2324e3c2cd165c5741897563ca19,Make log target fixed
antirez,2010-07-01 12:41:03,https://api.github.com/repos/antirez/redis/git/commits/fb829ec6a2574265e04de424de9a4b8cdab70fdf,fb829ec6a2574265e04de424de9a4b8cdab70fdf,gitignore modified
antirez,2010-06-21 22:07:48,https://api.github.com/repos/antirez/redis/git/commits/e2641e09cc0daf44f63f654230f72d22acf3a9af,e2641e09cc0daf44f63f654230f72d22acf3a9af,"redis.c split into many different C files.

networking related stuff moved into networking.c

moved more code

more work on layout of source code

SDS instantaneuos memory saving. By Pieter and Salvatore at VMware ;)

cleanly compiling again after the first split, now splitting it in more C files

moving more things around... work in progress

split replication code

splitting more

Sets split

Hash split

replication split

even more splitting

more splitting

minor change"
antirez,2010-06-24 22:23:38,https://api.github.com/repos/antirez/redis/git/commits/b8b8501d70770465adc67d4effb4dbae2899f3a8,b8b8501d70770465adc67d4effb4dbae2899f3a8,Merge remote branch 'pietern/zfixes'
pietern,2010-06-24 22:12:42,https://api.github.com/repos/antirez/redis/git/commits/f483ce5ffef0beb6e5ab50987691d00166e8216b,f483ce5ffef0beb6e5ab50987691d00166e8216b,fix unexpected behavior on an out of range end index for LRANGE and LTRIM
pietern,2010-06-16 09:03:23,https://api.github.com/repos/antirez/redis/git/commits/c2ff0e90b8ce84d7b966622ffe0178303bb0a625,c2ff0e90b8ce84d7b966622ffe0178303bb0a625,more pub/sub tests
pietern,2010-06-15 20:40:21,https://api.github.com/repos/antirez/redis/git/commits/4589a823fd3da534ee3e80870ad2de86a23c3361,4589a823fd3da534ee3e80870ad2de86a23c3361,initial basic pub/sub tests
pietern,2010-06-15 19:16:56,https://api.github.com/repos/antirez/redis/git/commits/676740a960dda1cf1adfad908628708057bf4e22,676740a960dda1cf1adfad908628708057bf4e22,fix BLPOP/BRPOP to use the wrapped function for list length
pietern,2010-06-15 19:16:27,https://api.github.com/repos/antirez/redis/git/commits/5eedc9c65e9d525f0e78c67f750e4d86d98aa097,5eedc9c65e9d525f0e78c67f750e4d86d98aa097,tests for BLPOP/BRPOP via an option in the tcl client that defers reading the reply
pietern,2010-06-15 14:21:42,https://api.github.com/repos/antirez/redis/git/commits/4774a53b247bb1f75fb175039c6af70a61462a94,4774a53b247bb1f75fb175039c6af70a61462a94,fix behavior for out-of-range negative end index on ZREMRANGEBYRANK
pietern,2010-06-15 13:40:28,https://api.github.com/repos/antirez/redis/git/commits/184d74abc628a1fccf66d34505a8c5505f82d21b,184d74abc628a1fccf66d34505a8c5505f82d21b,more tests for zrange and zrevrange; fix behavior for out-of-range negative end index
antirez,2010-06-14 15:59:03,https://api.github.com/repos/antirez/redis/git/commits/d5096a28d79bc8e0c015816d1b359a4d197cb3bb,d5096a28d79bc8e0c015816d1b359a4d197cb3bb,TODO updated
antirez,2010-06-14 08:22:38,https://api.github.com/repos/antirez/redis/git/commits/d52e5888694cb65918f2b0d00691c198deb5643f,d52e5888694cb65918f2b0d00691c198deb5643f,Merge branch 'ltrim-tests' of git://github.com/pietern/redis
pietern,2010-06-14 08:21:23,https://api.github.com/repos/antirez/redis/git/commits/7e79de541ad9f0d4ce9d582102dc03acf48d532d,7e79de541ad9f0d4ce9d582102dc03acf48d532d,"rename ""list"" to ""linkedlist"" to be more verbose"
antirez,2010-06-14 08:19:45,https://api.github.com/repos/antirez/redis/git/commits/7d04fc75630387b2c02e8f9907cf8deda37d648a,7d04fc75630387b2c02e8f9907cf8deda37d648a,"allow running the test suite against an external Redis instance, without auto spawning"
pietern,2010-06-14 07:45:34,https://api.github.com/repos/antirez/redis/git/commits/08b59207509ffe2c6938f7051ea786c66e7fa09d,08b59207509ffe2c6938f7051ea786c66e7fa09d,change ltrim tests to cover all min/max cases and add stronger stresser
antirez,2010-06-13 21:51:43,https://api.github.com/repos/antirez/redis/git/commits/3042fb0537c3ada4dd2882d4f800cc6080169596,3042fb0537c3ada4dd2882d4f800cc6080169596,Fixed deps in makefile and mkreleasehdr.sh script to really take advantage of the new trick to avoid recompilation of redis.c on git sha1 or dirty status change
antirez,2010-06-13 21:45:14,https://api.github.com/repos/antirez/redis/git/commits/7c4fc71c156f1abdc64dba078030af98f3452b67,7c4fc71c156f1abdc64dba078030af98f3452b67,hopefully faster recompiling with a trick
pietern,2010-06-13 19:52:07,https://api.github.com/repos/antirez/redis/git/commits/400aea2b1343232e45a0b7a9435a69d0fe8a0956,400aea2b1343232e45a0b7a9435a69d0fe8a0956,expand the dictionary of the target set to the right size when converting from intset
pietern,2010-06-13 19:42:04,https://api.github.com/repos/antirez/redis/git/commits/273f6169301eba5461d90f07ec683ae06572e931,273f6169301eba5461d90f07ec683ae06572e931,make sure sets have the right encoding when loaded from rdb
pietern,2010-06-13 19:23:43,https://api.github.com/repos/antirez/redis/git/commits/ab37269c38a1e60ec03f3d537b1c7ed33f761225,ab37269c38a1e60ec03f3d537b1c7ed33f761225,use max number of intset entries in tests and make SUNION/SINTER/SDIFF tests use less entries
antirez,2010-06-13 19:09:51,https://api.github.com/repos/antirez/redis/git/commits/bb039e853df6c2754885c5cfb82dc3f7ea7d25b5,bb039e853df6c2754885c5cfb82dc3f7ea7d25b5,fixed a bug in rdbLoadObject abount specially encoded objects
pietern,2010-06-13 13:21:25,https://api.github.com/repos/antirez/redis/git/commits/70ff3511bc427fe05df22e1aba4071910f33e289,70ff3511bc427fe05df22e1aba4071910f33e289,configure maximum number of entries in an intset
pietern,2010-06-13 13:07:53,https://api.github.com/repos/antirez/redis/git/commits/a8dca69bb31ae1ab4503e31e71e46b8d85b36dd5,a8dca69bb31ae1ab4503e31e71e46b8d85b36dd5,use raw strings when loading a hash from the rdb into a zipmap
pietern,2010-06-13 09:16:18,https://api.github.com/repos/antirez/redis/git/commits/b978abbf022b1810031b5aaa171ef0899f7fe77d,b978abbf022b1810031b5aaa171ef0899f7fe77d,small refactor of SMOVE and tests for SMOVE on sets with different encoding
pietern,2010-06-12 20:25:22,https://api.github.com/repos/antirez/redis/git/commits/d0b58d530027185a7fccd08bcda31efe06ef366b,d0b58d530027185a7fccd08bcda31efe06ef366b,"intset encoding for sets, refactored set tests to test both encodings"
antirez,2010-06-12 14:26:04,https://api.github.com/repos/antirez/redis/git/commits/f6475c725032038fc4d72fd89da3e539d127bc7e,f6475c725032038fc4d72fd89da3e539d127bc7e,Merge branch 'expire' of git://github.com/pietern/redis
antirez,2010-06-11 18:27:56,https://api.github.com/repos/antirez/redis/git/commits/ac9b8cfe577d1a27dd0f377e3b9578a7505cf00f,ac9b8cfe577d1a27dd0f377e3b9578a7505cf00f,Merge branch 'lists' of git://github.com/pietern/redis
pietern,2010-06-11 17:22:27,https://api.github.com/repos/antirez/redis/git/commits/e24d93762f8945de0ee03f23b15d686cfa08bb58,e24d93762f8945de0ee03f23b15d686cfa08bb58,intset housekeeping
pietern,2010-06-11 16:35:57,https://api.github.com/repos/antirez/redis/git/commits/35cabcb50557eae1433a68c7730ad8aff478b68a,35cabcb50557eae1433a68c7730ad8aff478b68a,wrapper functions for the set type to support multiple encodings
pietern,2010-06-11 15:35:48,https://api.github.com/repos/antirez/redis/git/commits/7d288d654793e867020b73d101c17d25bfbc256c,7d288d654793e867020b73d101c17d25bfbc256c,"LPUSHX, RPUSHX, LINSERT only work on non-empty lists, so there are no clients waiting for a push"
pietern,2010-06-11 15:34:23,https://api.github.com/repos/antirez/redis/git/commits/23d3a5feef0572762cac979f70accbae7ff1eda0,23d3a5feef0572762cac979f70accbae7ff1eda0,make LINSERT return -1 when the value could not be inserted
pietern,2010-06-03 20:21:39,https://api.github.com/repos/antirez/redis/git/commits/3ab98cef4e9aaefbb1febbe51309f657c701b1df,3ab98cef4e9aaefbb1febbe51309f657c701b1df,move logic for obvious corner cases to intsetSearch
pietern,2010-06-03 14:06:18,https://api.github.com/repos/antirez/redis/git/commits/144b0094c31b0a3604e5bd2686a7df15c0fd324d,144b0094c31b0a3604e5bd2686a7df15c0fd324d,initial implementation for the intset
pietern,2010-06-11 12:51:59,https://api.github.com/repos/antirez/redis/git/commits/70b4b320ae1d04dd087ae9336bdd962a9615fbfe,70b4b320ae1d04dd087ae9336bdd962a9615fbfe,"check if the list encoding needs to be changed on LPUSHX, RPUSHX, LINSERT"
pietern,2010-06-11 11:27:21,https://api.github.com/repos/antirez/redis/git/commits/244b873b0c753f126db88ef9fe15aefe4a44f558,244b873b0c753f126db88ef9fe15aefe4a44f558,make sure the value to insert is string encoded
pietern,2010-06-11 11:06:03,https://api.github.com/repos/antirez/redis/git/commits/bcfb387694534aa5f2f8ffb3cc12ea6a5f55b092,bcfb387694534aa5f2f8ffb3cc12ea6a5f55b092,"rename vars, move arguments, add comments"
pietern,2010-06-11 10:03:15,https://api.github.com/repos/antirez/redis/git/commits/1240552da92c7a1aa490cea6f6a66d1265c587e2,1240552da92c7a1aa490cea6f6a66d1265c587e2,always iterate from head to tail on LINSERT
pietern,2010-06-11 09:53:16,https://api.github.com/repos/antirez/redis/git/commits/279d7e67cf7c4ac0db401291c01588a26c1da9ea,279d7e67cf7c4ac0db401291c01588a26c1da9ea,use REDIS_TAIL to insert AFTER an entry and REDIS_HEAD to insert BEFORE an entry
pietern,2010-06-11 08:52:09,https://api.github.com/repos/antirez/redis/git/commits/0e1684bcd0c6b3378fb3f957407b08fac3f24bb1,0e1684bcd0c6b3378fb3f957407b08fac3f24bb1,move listTypeInsert to be grouped with other wrapper functions
pietern,2010-06-09 09:36:58,https://api.github.com/repos/antirez/redis/git/commits/306974f5d77c9b0245c6dbb8c44cd4f358eac521,306974f5d77c9b0245c6dbb8c44cd4f358eac521,remove pop function and the sds dependency; can be implemented using get+delete
pietern,2010-06-07 19:53:21,https://api.github.com/repos/antirez/redis/git/commits/4e16d8b312d913085d70617dd75cc7550610ce72,4e16d8b312d913085d70617dd75cc7550610ce72,compute swappability for ziplist encoded lists
pietern,2010-06-07 18:44:12,https://api.github.com/repos/antirez/redis/git/commits/829137b9a0e70088b65d7cd71ee10ff75c9a6fac,829137b9a0e70088b65d7cd71ee10ff75c9a6fac,reuse the sds from the main dictionary in the expiration dictionary
antirez,2010-06-07 16:30:18,https://api.github.com/repos/antirez/redis/git/commits/056c19c6f21e3729212924f76956e4bbb2d3a04c,056c19c6f21e3729212924f76956e4bbb2d3a04c,TODO updated
antirez,2010-06-07 16:07:46,https://api.github.com/repos/antirez/redis/git/commits/b785b2bf668b955f6b4a87813ae230e288b2cc78,b785b2bf668b955f6b4a87813ae230e288b2cc78,encode integers while loading an hash
antirez,2010-06-05 09:18:58,https://api.github.com/repos/antirez/redis/git/commits/65cc7665817dc3b8c66ade331e50f5966da598a4,65cc7665817dc3b8c66ade331e50f5966da598a4,Merge branch 'lists' of git://github.com/pietern/redis
pietern,2010-06-05 09:16:50,https://api.github.com/repos/antirez/redis/git/commits/cd627d4e7892701cb480001986184913a3ece7f5,cd627d4e7892701cb480001986184913a3ece7f5,fixed two leaks for the dual encoded lists
antirez,2010-06-04 19:19:28,https://api.github.com/repos/antirez/redis/git/commits/6b0253fabd960e633275a62b23ffda987e47172d,6b0253fabd960e633275a62b23ffda987e47172d,TODO updated
antirez,2010-06-04 19:19:06,https://api.github.com/repos/antirez/redis/git/commits/a26452263f4e130018e712f3799f0eddcf2ebe91,a26452263f4e130018e712f3799f0eddcf2ebe91,"DISCSARD now unwatches all keys, as it should"
pietern,2010-06-04 15:05:54,https://api.github.com/repos/antirez/redis/git/commits/ab193fe452de9aa7cb96a937ce15df2c675a47c1,ab193fe452de9aa7cb96a937ce15df2c675a47c1,generated tests for different encodings to avoid test code duplication
pietern,2010-06-04 14:30:54,https://api.github.com/repos/antirez/redis/git/commits/d4507ec615439794e113daf51d7d5fccae77408a,d4507ec615439794e113daf51d7d5fccae77408a,refactor list tests to test both encodings; implemented assert functions
pietern,2010-06-04 09:39:23,https://api.github.com/repos/antirez/redis/git/commits/d1578a33eefec1e834cf551fda0eac328c50bf74,d1578a33eefec1e834cf551fda0eac328c50bf74,"renamed hash wrapper functions to match wrapper function naming convention: ""<type>Type<func>"""
antirez,2010-06-04 09:36:37,https://api.github.com/repos/antirez/redis/git/commits/422cf21f15a13f52a6e87d83076857d5483c6f49,422cf21f15a13f52a6e87d83076857d5483c6f49,Merge branch 'lists' of git://github.com/pietern/redis
antirez,2010-06-04 09:35:43,https://api.github.com/repos/antirez/redis/git/commits/4dc1218c585e5c81674382c8091cb2b9e9807891,4dc1218c585e5c81674382c8091cb2b9e9807891,Merge branch 'smallkeys'
pietern,2010-06-04 09:32:33,https://api.github.com/repos/antirez/redis/git/commits/dda20542abcccac04a7f630695e6a30304f7dcf8,dda20542abcccac04a7f630695e6a30304f7dcf8,safety assert in listTypeNext
pietern,2010-06-04 09:04:02,https://api.github.com/repos/antirez/redis/git/commits/003f0840ffa7f69fb40836bf9510c9d77be0e830,003f0840ffa7f69fb40836bf9510c9d77be0e830,renamed list wrapper functions to be more verbose
pietern,2010-06-04 08:57:31,https://api.github.com/repos/antirez/redis/git/commits/d0686e070d683d0577c6f6c2f088a55101b74980,d0686e070d683d0577c6f6c2f088a55101b74980,add thresholds for converting a ziplist to a real list
pietern,2010-06-04 07:54:06,https://api.github.com/repos/antirez/redis/git/commits/846d8b3ea558fadd8aa4eb5ad5f8d3bf4717b731,846d8b3ea558fadd8aa4eb5ad5f8d3bf4717b731,merge antirez/smallkeys
antirez,2010-06-03 16:32:52,https://api.github.com/repos/antirez/redis/git/commits/22194a7ffe6ada09b326ba9db1fadc549b065a4d,22194a7ffe6ada09b326ba9db1fadc549b065a4d,test restored
antirez,2010-06-03 16:22:15,https://api.github.com/repos/antirez/redis/git/commits/4c8f23700b2943ff724d4ea5c7830d939dbd08d2,4c8f23700b2943ff724d4ea5c7830d939dbd08d2,memory leak introduced in the latest big changes fixed
antirez,2010-06-03 16:15:56,https://api.github.com/repos/antirez/redis/git/commits/44262c58a417bfcb4a23d767a742a9a2f360fcb4,44262c58a417bfcb4a23d767a742a9a2f360fcb4,Fixed VM bugs introduced with the top level keys as sds strings changes
antirez,2010-06-03 16:02:54,https://api.github.com/repos/antirez/redis/git/commits/092418136490fc94f2520ede706846dac8e43b5e,092418136490fc94f2520ede706846dac8e43b5e,top level keys are no longer redis objects but sds strings. There are still a few bugs to fix when VM is enabled
pietern,2010-06-02 22:50:33,https://api.github.com/repos/antirez/redis/git/commits/178d6903722e80bd68d1b8dacbe3d4fc406d2cb5,178d6903722e80bd68d1b8dacbe3d4fc406d2cb5,update Makefile to include ziplist.o
pietern,2010-06-02 22:48:52,https://api.github.com/repos/antirez/redis/git/commits/74e0f445a8851d0cbf6898aa9fbea1814bb8cd1d,74e0f445a8851d0cbf6898aa9fbea1814bb8cd1d,use ziplists in SORT STORE until the thresholds are determined
antirez,2010-06-02 22:31:41,https://api.github.com/repos/antirez/redis/git/commits/9fcfd6b6512dd975ba3eadf476b7d5670c9dbb79,9fcfd6b6512dd975ba3eadf476b7d5670c9dbb79,Merge branch 'testsuite' of git://github.com/pietern/redis
antirez,2010-06-02 22:31:15,https://api.github.com/repos/antirez/redis/git/commits/a7159fe817b163d17ff64fae0d459bbe786280ef,a7159fe817b163d17ff64fae0d459bbe786280ef,Merge branch 'testsuite' of git://github.com/pietern/redis into smallkeys
pietern,2010-06-02 22:27:09,https://api.github.com/repos/antirez/redis/git/commits/5a9fcb87cac31b70a9721cc88df4a929c14846fe,5a9fcb87cac31b70a9721cc88df4a929c14846fe,"tag memory leak check on kill server as ""leaks"""
pietern,2010-06-02 22:26:39,https://api.github.com/repos/antirez/redis/git/commits/afbf59145aa50d50631c860b73374a0438708b1f,afbf59145aa50d50631c860b73374a0438708b1f,tag test with sleep() as slow
pietern,2010-06-02 22:25:32,https://api.github.com/repos/antirez/redis/git/commits/f6fa411d6cffd59155f8afbacad8c17db74d100d,f6fa411d6cffd59155f8afbacad8c17db74d100d,make sure the config it returned when called without code
pietern,2010-06-02 22:16:10,https://api.github.com/repos/antirez/redis/git/commits/6b6f101c2761c5a9762723ae99a75dd0d2e009df,6b6f101c2761c5a9762723ae99a75dd0d2e009df,tag more slow tests
pietern,2010-06-02 22:16:02,https://api.github.com/repos/antirez/redis/git/commits/5713f06b339bd5f6d2d62092bb6adffd90367286,5713f06b339bd5f6d2d62092bb6adffd90367286,change how arguments are passed from the AOF tests
pietern,2010-06-02 22:06:58,https://api.github.com/repos/antirez/redis/git/commits/7a6ae0a2b29f83523a6e65a61c7ec49cc9437781,7a6ae0a2b29f83523a6e65a61c7ec49cc9437781,scope res variable outside test
pietern,2010-06-02 21:14:55,https://api.github.com/repos/antirez/redis/git/commits/7f7499eeace8f69aeb32a4e92554eb0b144e8226,7f7499eeace8f69aeb32a4e92554eb0b144e8226,tags for existing tests
pietern,2010-06-02 21:04:22,https://api.github.com/repos/antirez/redis/git/commits/73bd6c583b9a3e29dbbbf4f1ba8259cfe5e131b8,73bd6c583b9a3e29dbbbf4f1ba8259cfe5e131b8,pass tags to filter and match via arguments
pietern,2010-06-02 20:53:22,https://api.github.com/repos/antirez/redis/git/commits/6e0e5bedd9c3a4bf0f53f43c427c88e2866bda0a,6e0e5bedd9c3a4bf0f53f43c427c88e2866bda0a,basic support to tag tests
pietern,2010-06-02 20:23:52,https://api.github.com/repos/antirez/redis/git/commits/9e5d2e8bd664743d309f1647e29cdaf43f463051,9e5d2e8bd664743d309f1647e29cdaf43f463051,changed how server.tcl accepts options to support more directives without requiring more arguments to the proc
pietern,2010-06-02 19:29:47,https://api.github.com/repos/antirez/redis/git/commits/38273a9ed6a92f5a9c0c6250484fff677b972019,38273a9ed6a92f5a9c0c6250484fff677b972019,removed obsolete code
pietern,2010-06-02 19:20:29,https://api.github.com/repos/antirez/redis/git/commits/436f18b618d3820ee3c99b2ae78cf29bf36b2994,436f18b618d3820ee3c99b2ae78cf29bf36b2994,"catch exceptions in the server proc, to be able to kill the entire chain of running servers"
antirez,2010-06-02 13:19:50,https://api.github.com/repos/antirez/redis/git/commits/1edbae86782835359dc0ce7250df627b41d147eb,1edbae86782835359dc0ce7250df627b41d147eb,Merge branch 'master' into smallkeys
antirez,2010-06-02 13:18:22,https://api.github.com/repos/antirez/redis/git/commits/a89b7013ff5aa27fae4d1f7d45615349c3ab7300,a89b7013ff5aa27fae4d1f7d45615349c3ab7300,smarter swapout policy on AOF too
antirez,2010-06-02 13:13:53,https://api.github.com/repos/antirez/redis/git/commits/7e02fe32d3b95a9c56490b381784e47e2d97dedf,7e02fe32d3b95a9c56490b381784e47e2d97dedf,better swapout policy while loading RDB file
antirez,2010-06-02 13:00:02,https://api.github.com/repos/antirez/redis/git/commits/169dd6b7d3f113282d0320e24f2d4f590a3f6314,169dd6b7d3f113282d0320e24f2d4f590a3f6314,minor code comment change
pietern,2010-06-01 16:55:37,https://api.github.com/repos/antirez/redis/git/commits/e1f93d4b2cc94fec29ede9b3cedea891ee9bd050,e1f93d4b2cc94fec29ede9b3cedea891ee9bd050,use integer types from stdint.h to be more verbose on the size in bytes of encoded elements. update list length to use 2 bytes instead of 1.
pietern,2010-06-01 15:57:51,https://api.github.com/repos/antirez/redis/git/commits/ffc15852676131003d1f5e468467f15f57a8e0bf,ffc15852676131003d1f5e468467f15f57a8e0bf,added stress test for heavy i/o in ziplists
pietern,2010-06-01 15:57:09,https://api.github.com/repos/antirez/redis/git/commits/b84186ff2dadea9fa67f512a743ab97196390f56,b84186ff2dadea9fa67f512a743ab97196390f56,fix signedness errors in ziplist testing code
antirez,2010-06-01 15:08:43,https://api.github.com/repos/antirez/redis/git/commits/612e4de8cef739252ff1e19424fb39a793b1a22f,612e4de8cef739252ff1e19424fb39a793b1a22f,minor code movements and free object pull restored to 1 million
antirez,2010-06-01 13:01:16,https://api.github.com/repos/antirez/redis/git/commits/356f9239138ebe4a27cefe9c7d3998a50c75526c,356f9239138ebe4a27cefe9c7d3998a50c75526c,TODO updated with syslog plans for 2.2
antirez,2010-06-01 12:22:21,https://api.github.com/repos/antirez/redis/git/commits/dbc289aed1cdefb51d8764000d95d5259f50b132,dbc289aed1cdefb51d8764000d95d5259f50b132,Debug message was printing stuff that are sometimes not initialized/valid
antirez,2010-06-01 12:18:38,https://api.github.com/repos/antirez/redis/git/commits/4e538759c4125a2379fd625e5a92c72347017b7f,4e538759c4125a2379fd625e5a92c72347017b7f,Merge branch 'smallkeys' of github.com:antirez/redis into smallkeys
antirez,2010-06-01 12:18:30,https://api.github.com/repos/antirez/redis/git/commits/a4798f733dc2cb973552e0ea84cc5f553951e162,a4798f733dc2cb973552e0ea84cc5f553951e162,fixed a few comments
pietern,2010-05-31 21:49:16,https://api.github.com/repos/antirez/redis/git/commits/6ddc908ab611b1d6f1c94c71497e181734ac53df,6ddc908ab611b1d6f1c94c71497e181734ac53df,support rewriting the AOF with dual list encoding
pietern,2010-05-31 21:41:04,https://api.github.com/repos/antirez/redis/git/commits/9eaef89fbc56f3690d9e4294ca96892cdacfea88,9eaef89fbc56f3690d9e4294ca96892cdacfea88,small refactor of fwrite* commands for AOF rewrite to allow writing a bulk long long
pietern,2010-05-31 21:35:51,https://api.github.com/repos/antirez/redis/git/commits/dc845730a9afaadf20a6a892a458c219c7350dff,dc845730a9afaadf20a6a892a458c219c7350dff,use list wrapper functions in computing the dataset digest
pietern,2010-05-31 21:35:21,https://api.github.com/repos/antirez/redis/git/commits/d71b98650f64b09cdc4d028144617cad4af00e1b,d71b98650f64b09cdc4d028144617cad4af00e1b,ziplistNext should work as expected when called with a pointer to ZIP_END
pietern,2010-05-31 21:11:28,https://api.github.com/repos/antirez/redis/git/commits/a03611e1337a207bb771c2c72256047cbb2a4092,a03611e1337a207bb771c2c72256047cbb2a4092,update SORT to work with the dual list encoding
pietern,2010-05-31 21:10:05,https://api.github.com/repos/antirez/redis/git/commits/1cd92e7f040702e07e4930e8faa3f0f692658cdc,1cd92e7f040702e07e4930e8faa3f0f692658cdc,function to create a new ziplist encoded list
pietern,2010-05-31 20:25:22,https://api.github.com/repos/antirez/redis/git/commits/23f964946b815c8d6317071b4a5597151e4cefd2,23f964946b815c8d6317071b4a5597151e4cefd2,support rdb saving/loading with dual list encoding
pietern,2010-05-31 19:44:12,https://api.github.com/repos/antirez/redis/git/commits/b6eb9703949b49d2e5bd71316b4cd545677c5651,b6eb9703949b49d2e5bd71316b4cd545677c5651,fixed signedness and disambiguate variable names
pietern,2010-05-31 19:08:07,https://api.github.com/repos/antirez/redis/git/commits/2796f6da7b7208382edb618b3ab0667f7e2c4f27,2796f6da7b7208382edb618b3ab0667f7e2c4f27,added rdb save function to directly save long long values
pietern,2010-05-31 18:47:39,https://api.github.com/repos/antirez/redis/git/commits/0f62e1775d37d34a4a465abfc81becaf02ecae64,0f62e1775d37d34a4a465abfc81becaf02ecae64,update RPOPLPUSH to support dual encoding
pietern,2010-05-31 18:25:31,https://api.github.com/repos/antirez/redis/git/commits/be02a7c0d653021336ae23092046d442ac017f11,be02a7c0d653021336ae23092046d442ac017f11,"update list iteration semantic to work as expected (i.e. ""while(lNext(..))"")"
pietern,2010-05-31 18:18:23,https://api.github.com/repos/antirez/redis/git/commits/6a8e35ad9252f1ea1ff0a449af52aef1f71815f8,6a8e35ad9252f1ea1ff0a449af52aef1f71815f8,ziplistDelete no longer needs a direction now ziplistPrev is fixed
pietern,2010-05-31 18:17:21,https://api.github.com/repos/antirez/redis/git/commits/8632fb30401ccc6824b84499602fba7052cc3346,8632fb30401ccc6824b84499602fba7052cc3346,ziplistPrev should return the tail when the argument is ZIP_END
antirez,2010-05-31 18:10:18,https://api.github.com/repos/antirez/redis/git/commits/560db612e175427bcc8beae2a38c6f9a7853687f,560db612e175427bcc8beae2a38c6f9a7853687f,"first step of VM rewrite. blocking VM tests passing, more work needed in the async side"
antirez,2010-05-31 08:08:14,https://api.github.com/repos/antirez/redis/git/commits/752203d86d9667c07a69a11043df411703c32640,752203d86d9667c07a69a11043df411703c32640,Merge branch 'no-appendfsync-on-rewrite'
pietern,2010-05-30 01:14:38,https://api.github.com/repos/antirez/redis/git/commits/3fbf9001ce88f2b3d154b099bcf2fd3783f24940,3fbf9001ce88f2b3d154b099bcf2fd3783f24940,fix LREM to remove *all* occurances when a zero argument is given
pietern,2010-05-30 01:08:24,https://api.github.com/repos/antirez/redis/git/commits/bd8db0ada840e2c52ab37470256676a05c6fe855,bd8db0ada840e2c52ab37470256676a05c6fe855,fixed LINDEX to always return bulk response
pietern,2010-05-30 01:06:12,https://api.github.com/repos/antirez/redis/git/commits/dbaa41c618346be2ab58dfbab0a35e3ff1948ed1,dbaa41c618346be2ab58dfbab0a35e3ff1948ed1,the tail offset must be an integer pointer to hold a 32-bit offset
pietern,2010-05-30 00:17:36,https://api.github.com/repos/antirez/redis/git/commits/d2ee16abec401c7c6575cdbd666dd8a139b4926c,d2ee16abec401c7c6575cdbd666dd8a139b4926c,update LREM to support dual encoding via extra iteration primitives
pietern,2010-05-30 00:16:12,https://api.github.com/repos/antirez/redis/git/commits/9ae6b0be4ac05c919b943ed29ffa20e5560855a2,9ae6b0be4ac05c919b943ed29ffa20e5560855a2,support dual encoding in LTRIM
pietern,2010-05-30 00:15:34,https://api.github.com/repos/antirez/redis/git/commits/a6dd455b09cb67e18799c0b2ed720d213608e13d,a6dd455b09cb67e18799c0b2ed720d213608e13d,update LRANGE to use basic iteration code to support dual encoding
pietern,2010-05-30 00:11:59,https://api.github.com/repos/antirez/redis/git/commits/697bd5673fe1591eeabcd9ac8581d1e5019cf0ec,697bd5673fe1591eeabcd9ac8581d1e5019cf0ec,inline support for dual encoding in the LINDEX and LSET commands
pietern,2010-05-29 23:50:32,https://api.github.com/repos/antirez/redis/git/commits/d72562f7baee43d41a5a6b3019e45f14c59b49d7,d72562f7baee43d41a5a6b3019e45f14c59b49d7,generic pop and length function for ziplist encoding
pietern,2010-05-29 23:46:59,https://api.github.com/repos/antirez/redis/git/commits/c7d9d662a4c8ba1c17676055fd30a25ffa79304e,c7d9d662a4c8ba1c17676055fd30a25ffa79304e,generic push function that supports the dual encoding
pietern,2010-05-29 23:39:41,https://api.github.com/repos/antirez/redis/git/commits/0f3dfa87bc8870c1da6867b7e2d9d70f7e21fc93,0f3dfa87bc8870c1da6867b7e2d9d70f7e21fc93,"change delete function to accept a direction argument, so ""p"" can be properly updated"
pietern,2010-05-29 23:38:56,https://api.github.com/repos/antirez/redis/git/commits/033fb554bec6523beb638965dc8f4adb96887332,033fb554bec6523beb638965dc8f4adb96887332,expose extra functionality from ziplist.c
pietern,2010-05-29 23:37:03,https://api.github.com/repos/antirez/redis/git/commits/177a0a0b0d66ca5d25cf3d06907292e8c02f1825,177a0a0b0d66ca5d25cf3d06907292e8c02f1825,code style consistency fixes
pietern,2010-05-29 20:17:16,https://api.github.com/repos/antirez/redis/git/commits/c03206fdf1dc0241d97204aba813c13b82f40d6e,c03206fdf1dc0241d97204aba813c13b82f40d6e,ziplistIndex now accepts negative indices
pietern,2010-05-29 17:34:14,https://api.github.com/repos/antirez/redis/git/commits/a24ba809d1709e4cebf032994c03842611575e2c,a24ba809d1709e4cebf032994c03842611575e2c,fix compile warnings
pietern,2010-05-29 17:26:35,https://api.github.com/repos/antirez/redis/git/commits/7b1f85c0a24aecb2ed9a9d3cf9a4b61bd03f642b,7b1f85c0a24aecb2ed9a9d3cf9a4b61bd03f642b,use simpler encoding for the length of the previous entry
pietern,2010-05-29 17:09:37,https://api.github.com/repos/antirez/redis/git/commits/1ce81fa59b9f49cdd764ca35b312816396c93239,1ce81fa59b9f49cdd764ca35b312816396c93239,replace functions to get pointers to head and tail by macros
pietern,2010-05-29 16:52:49,https://api.github.com/repos/antirez/redis/git/commits/6435c76772bfc846c4f336d07f56668aef33a38b,6435c76772bfc846c4f336d07f56668aef33a38b,function to insert an element at an arbitrary position in the list
pietern,2010-05-29 15:38:23,https://api.github.com/repos/antirez/redis/git/commits/0c0d0564121eb758fa25e2edf43cb1cf42aadbbc,0c0d0564121eb758fa25e2edf43cb1cf42aadbbc,extract a generic delete function that can be used in pop and delete(range)
pietern,2010-05-29 14:37:47,https://api.github.com/repos/antirez/redis/git/commits/bb57b965c4252a48472d99a1b2e7a30d66d65796,bb57b965c4252a48472d99a1b2e7a30d66d65796,use the entry struct in zipRawEntryLength
pietern,2010-05-29 14:26:55,https://api.github.com/repos/antirez/redis/git/commits/03e52931dd4e7d3c9a87eaa0195fdb8b08ff74b2,03e52931dd4e7d3c9a87eaa0195fdb8b08ff74b2,rename argument names to s* to disambiguate from e*
pietern,2010-05-29 14:25:05,https://api.github.com/repos/antirez/redis/git/commits/c8d9e7f4c0c237ca75e0e53c0c643ef0f09f81bb,c8d9e7f4c0c237ca75e0e53c0c643ef0f09f81bb,change ziplistRepr to use the entry struct
pietern,2010-05-29 14:22:24,https://api.github.com/repos/antirez/redis/git/commits/d593c48869e1c815fd4b270a1820e71165dafba5,d593c48869e1c815fd4b270a1820e71165dafba5,modify compare function to check if the encoding is equal before comparing
pietern,2010-05-29 14:20:01,https://api.github.com/repos/antirez/redis/git/commits/a5456b2cb69c5bde1ea5403c6459885b074a8575,a5456b2cb69c5bde1ea5403c6459885b074a8575,use a struct to retrieve all details for an entry
pietern,2010-05-29 13:40:40,https://api.github.com/repos/antirez/redis/git/commits/dcb9cf4e8213744e431f38722d04b841f78b316c,dcb9cf4e8213744e431f38722d04b841f78b316c,initial implementation for making the ziplist doubly linked
pietern,2010-05-29 09:35:48,https://api.github.com/repos/antirez/redis/git/commits/fc2c0f7a6c9d515bff525c89b81df428277a17a0,fc2c0f7a6c9d515bff525c89b81df428277a17a0,fix some warnings
pietern,2010-05-29 09:33:38,https://api.github.com/repos/antirez/redis/git/commits/4812cf287347b035c113f8afdc964a007e7744a4,4812cf287347b035c113f8afdc964a007e7744a4,add function to retrieve ziplist size in bytes
pietern,2010-05-22 19:49:36,https://api.github.com/repos/antirez/redis/git/commits/c4aace9003e29fc9becce292683dd09bdce7785c,c4aace9003e29fc9becce292683dd09bdce7785c,fix compare function of ziplist to only load integer from ziplist when it is encoded as integer
pietern,2010-05-22 17:35:40,https://api.github.com/repos/antirez/redis/git/commits/6205b46387ef47e0fcb9bd6c9f371c9eb5cdd7e5,6205b46387ef47e0fcb9bd6c9f371c9eb5cdd7e5,add function to retrieve length of ziplist
pietern,2010-05-22 17:35:26,https://api.github.com/repos/antirez/redis/git/commits/aa549962a4227f8732e3c9448ba8910160ec3ec4,aa549962a4227f8732e3c9448ba8910160ec3ec4,re-introduce ZIP_BIGLEN for clarity
pietern,2010-05-22 14:25:18,https://api.github.com/repos/antirez/redis/git/commits/c7019f7019a7ded425e700f391263227e259bbcb,c7019f7019a7ded425e700f391263227e259bbcb,added header ziplist.h
pietern,2010-05-22 14:25:06,https://api.github.com/repos/antirez/redis/git/commits/c09c2c3b04f0df0e37c24ee10d29bdf49ae070ff,c09c2c3b04f0df0e37c24ee10d29bdf49ae070ff,"code to compare strings with entries in ziplist, regardless of their encoding"
pietern,2010-05-22 13:48:27,https://api.github.com/repos/antirez/redis/git/commits/75d8978e7a0acc5772aa5c6844a2d045d563a615,75d8978e7a0acc5772aa5c6844a2d045d563a615,updated iteration code to work well with different encodings
pietern,2010-05-22 13:18:30,https://api.github.com/repos/antirez/redis/git/commits/37fff074a2f79a63c3fefbcf95fe72d83549b084,37fff074a2f79a63c3fefbcf95fe72d83549b084,move code from zip.c to ziplist.c
pietern,2010-05-22 13:13:09,https://api.github.com/repos/antirez/redis/git/commits/af5f66fb98d2cb3c62a6aa66bf468559f5e0e04f,af5f66fb98d2cb3c62a6aa66bf468559f5e0e04f,partial revert of c80df5 because ziplist functions are starting to divert too much from zipmap functions
pietern,2010-05-22 13:07:12,https://api.github.com/repos/antirez/redis/git/commits/29b14d5face8a434810794f524c8449581166adf,29b14d5face8a434810794f524c8449581166adf,initial work for integer encoding in ziplists
pietern,2010-05-22 12:58:58,https://api.github.com/repos/antirez/redis/git/commits/f6eb17477aa6394adc699b5ec45705df9c584363,f6eb17477aa6394adc699b5ec45705df9c584363,move length housekeeping to a macro
pietern,2010-05-21 13:46:00,https://api.github.com/repos/antirez/redis/git/commits/0f10458c4f1b9a7397bf72e4f787041069cc9e8a,0f10458c4f1b9a7397bf72e4f787041069cc9e8a,allow entries to be deleted in place when iterating over a ziplist
pietern,2010-05-21 13:45:30,https://api.github.com/repos/antirez/redis/git/commits/924727d905ec6943857f7a0832196f595884d461,924727d905ec6943857f7a0832196f595884d461,allow pointer to be stored to current element when iterating over ziplist
pietern,2010-05-21 13:44:47,https://api.github.com/repos/antirez/redis/git/commits/ba5b4bde21de6fb0fbc73dc970eaff71050a26a6,ba5b4bde21de6fb0fbc73dc970eaff71050a26a6,rename ziplistDelete to ziplistDeleteRange
pietern,2010-05-21 12:11:29,https://api.github.com/repos/antirez/redis/git/commits/779deb60f92ab2980c41f8cb408315fbac2fa54b,779deb60f92ab2980c41f8cb408315fbac2fa54b,code to delete an inner range from the ziplist
pietern,2010-05-21 12:11:09,https://api.github.com/repos/antirez/redis/git/commits/33c1269efc86a603c54c1045edc9402488a7224f,33c1269efc86a603c54c1045edc9402488a7224f,check if *value is non-NULL before setting it
pietern,2010-05-21 11:29:14,https://api.github.com/repos/antirez/redis/git/commits/335d16bc0f8f18f0da929bf3be725b42287c1042,335d16bc0f8f18f0da929bf3be725b42287c1042,change iteration code to avoid allocating a new sds for each traversed entry
pietern,2010-05-21 11:16:08,https://api.github.com/repos/antirez/redis/git/commits/08253bf42b7f1fdc000dedfb2580bc9cb375449d,08253bf42b7f1fdc000dedfb2580bc9cb375449d,code to iterate over a ziplist
pietern,2010-05-21 10:54:01,https://api.github.com/repos/antirez/redis/git/commits/11ac6ff613387b4bafa9b405974653112228e96f,11ac6ff613387b4bafa9b405974653112228e96f,implementation for a ziplist with push and pop support
pietern,2010-05-21 10:53:34,https://api.github.com/repos/antirez/redis/git/commits/3d04d29e7fd49902f494754ec8911792fedf1be8,3d04d29e7fd49902f494754ec8911792fedf1be8,extracted general methods to zip.c for reuse in other zip* structures
antirez,2010-05-28 21:44:32,https://api.github.com/repos/antirez/redis/git/commits/d55d5c5dd3d09d8a9c9d9b0e17adbb764dfaff06,d55d5c5dd3d09d8a9c9d9b0e17adbb764dfaff06,command table size calculated with sizeof
pietern,2010-05-28 20:14:10,https://api.github.com/repos/antirez/redis/git/commits/1a132bbc9c3a44de902d1bf8337118d21063e7ab,1a132bbc9c3a44de902d1bf8337118d21063e7ab,use qsort and bsearch to lookup commands in O(log(N)) instead of O(N)
antirez,2010-05-28 18:26:01,https://api.github.com/repos/antirez/redis/git/commits/3caf15e6da15b6b3f9af57803eb57a37c6f753cf,3caf15e6da15b6b3f9af57803eb57a37c6f753cf,Merge branch 'cli-stdin' of git://github.com/pietern/redis
antirez,2010-05-28 10:24:47,https://api.github.com/repos/antirez/redis/git/commits/5fc9229c3467ed22e68242fecf3a339309de8ab5,5fc9229c3467ed22e68242fecf3a339309de8ab5,Fixed ZINCR Nan bugs leading to server crash and added tests
antirez,2010-05-28 08:48:04,https://api.github.com/repos/antirez/redis/git/commits/d5d23dabd7a72c63ceda017d560c362b4065d85b,d5d23dabd7a72c63ceda017d560c362b4065d85b,"redis.conf new features the new option, a minor typo preventing the compilation fixed"
antirez,2010-05-28 08:40:53,https://api.github.com/repos/antirez/redis/git/commits/b0bd87f60cdeba2ae215b22978331987e5a96d38,b0bd87f60cdeba2ae215b22978331987e5a96d38,don't fsync after a rewrite if appendfsync is set to no. use aof_fsycn instead of fsync where appropriate
antirez,2010-05-28 08:35:23,https://api.github.com/repos/antirez/redis/git/commits/38db91713c81b58e97496abbe35a9d14d1e423e0,38db91713c81b58e97496abbe35a9d14d1e423e0,added new option no-appendfsync-on-rewrite to avoid blocking on fsync() in the main thread while a background process is doing big I/O
antirez,2010-05-27 22:23:27,https://api.github.com/repos/antirez/redis/git/commits/8a3b0d2d9a2eb34f1277e22c3f0185b0bfe21959,8a3b0d2d9a2eb34f1277e22c3f0185b0bfe21959,Added Git sha1 and dirty status in redis-server -v output
antirez,2010-05-27 22:20:12,https://api.github.com/repos/antirez/redis/git/commits/ea2c08e92200dd4c746f2b4b04da611a34e49dcf,ea2c08e92200dd4c746f2b4b04da611a34e49dcf,changed the message in the Makefile with the new command like to run the test suite
shift,2010-05-27 15:15:09,https://api.github.com/repos/antirez/redis/git/commits/ca3f830b32a0a8303a5a761d6212925d9b5ac365,ca3f830b32a0a8303a5a761d6212925d9b5ac365,Fixed typo.
antirez,2010-05-27 14:08:44,https://api.github.com/repos/antirez/redis/git/commits/4ea93ad3accd39bf950acb318d65f6eef755c176,4ea93ad3accd39bf950acb318d65f6eef755c176,new multi/exec tests
pietern,2010-05-26 16:22:05,https://api.github.com/repos/antirez/redis/git/commits/a2f4f8711a7ded05d950fe0b784a5e4c7abeb298,a2f4f8711a7ded05d950fe0b784a5e4c7abeb298,build command outside while loop
pietern,2010-05-26 16:18:37,https://api.github.com/repos/antirez/redis/git/commits/37dc9e5abbb9335ee3217e8295bd37d051dc16a4,37dc9e5abbb9335ee3217e8295bd37d051dc16a4,"require the flag ""-c"" to be used for redis-cli to read the last argument from stdin"
antirez,2010-05-26 15:55:28,https://api.github.com/repos/antirez/redis/git/commits/90fdc82697823a4e8228ae7e5c5ada0f56d160d7,90fdc82697823a4e8228ae7e5c5ada0f56d160d7,Merge branch 'master' into nested-multi
antirez,2010-05-26 15:50:29,https://api.github.com/repos/antirez/redis/git/commits/1ad4d31631315d0c1e140b0a831e30fa90163fec,1ad4d31631315d0c1e140b0a831e30fa90163fec,Fix EXEC bug that was leaving the client in dirty status when used with WATCH
antirez,2010-05-26 14:47:37,https://api.github.com/repos/antirez/redis/git/commits/6531c94d28c8314c934847d421a79ddb31298aeb,6531c94d28c8314c934847d421a79ddb31298aeb,raise error on nested MULTI and WATCH inside multi
antirez,2010-05-25 20:42:47,https://api.github.com/repos/antirez/redis/git/commits/9005896c0a5bfc7164b7a439cb7c56b5dab8923a,9005896c0a5bfc7164b7a439cb7c56b5dab8923a,Version is now 2.1.1
antirez,2010-05-25 19:26:10,https://api.github.com/repos/antirez/redis/git/commits/b167f87705c807dec100bda9b164e2e580bd2c5d,b167f87705c807dec100bda9b164e2e580bd2c5d,RENAME is now WATCH-aware
antirez,2010-05-25 18:28:22,https://api.github.com/repos/antirez/redis/git/commits/cef34df02af2e10a4374fd01efe31ea6f50fce34,cef34df02af2e10a4374fd01efe31ea6f50fce34,TODO updated
antirez,2010-05-25 17:30:24,https://api.github.com/repos/antirez/redis/git/commits/9b30e1a207c3ce25e942c58e2e42021b452cfa3f,9b30e1a207c3ce25e942c58e2e42021b452cfa3f,WATCH is now able to detect keys removed by FLUSHALL and FLUSHDB
antirez,2010-05-25 12:04:46,https://api.github.com/repos/antirez/redis/git/commits/c20c189db50f331786846c821c863b44aea5e006,c20c189db50f331786846c821c863b44aea5e006,WATCH tests
antirez,2010-05-25 11:21:23,https://api.github.com/repos/antirez/redis/git/commits/87c68815c3c932e209a88aa3cc8280c6c0587c27,87c68815c3c932e209a88aa3cc8280c6c0587c27,minor bug fixed in WATCH
antirez,2010-05-25 11:15:11,https://api.github.com/repos/antirez/redis/git/commits/37ab76c99d9e86076c223d9b20756afd2aa2a99b,37ab76c99d9e86076c223d9b20756afd2aa2a99b,WATCH for MULTI/EXEC (CAS alike concurrency)
antirez,2010-05-25 08:06:37,https://api.github.com/repos/antirez/redis/git/commits/75a190ca72f4819841a45a7a8c2f6fe3653a5ac0,75a190ca72f4819841a45a7a8c2f6fe3653a5ac0,gitignore updated
antirez,2010-05-21 13:48:39,https://api.github.com/repos/antirez/redis/git/commits/fda32cb6013c65f765fa9b203bed23e07d35ba59,fda32cb6013c65f765fa9b203bed23e07d35ba59,"Master is now already unfreezed, unstable, and ready to hacking sessions!"
antirez,2010-05-21 12:42:19,https://api.github.com/repos/antirez/redis/git/commits/329cdba00afd2f97ca828134cb5c24316d516fce,329cdba00afd2f97ca828134cb5c24316d516fce,Merge branch 'solaris' of git://github.com/pietern/redis
antirez,2010-05-21 12:03:17,https://api.github.com/repos/antirez/redis/git/commits/7fc98533392f455974d546c88bd4d41c85e6fe6d,7fc98533392f455974d546c88bd4d41c85e6fe6d,Changelog updated
antirez,2010-05-21 12:00:21,https://api.github.com/repos/antirez/redis/git/commits/be00fa244d9b8e107b080c756bf73d3137c3ccd1,be00fa244d9b8e107b080c756bf73d3137c3ccd1,redis version is now 1.3.14 (aka 2.0.0 RC1)
antirez,2010-05-21 11:59:16,https://api.github.com/repos/antirez/redis/git/commits/89328c92445726df3b513da6dd410fd4403bd233,89328c92445726df3b513da6dd410fd4403bd233,html doc updated
antirez,2010-05-21 11:58:04,https://api.github.com/repos/antirez/redis/git/commits/c22b2ec863386476c52e7442aa497151a8986af1,c22b2ec863386476c52e7442aa497151a8986af1,by default test with valgrind does not show full leak info
pietern,2010-05-21 07:33:47,https://api.github.com/repos/antirez/redis/git/commits/4993adbaaf4d5303549adef619883d87d16db46b,4993adbaaf4d5303549adef619883d87d16db46b,include solaris fixes in sha1.c
antirez,2010-05-20 19:20:10,https://api.github.com/repos/antirez/redis/git/commits/fd80abda0888564f26437834739ae456276771ff,fd80abda0888564f26437834739ae456276771ff,Don't exit with error in tests temp file cleanup if there are no files to clean
pietern,2010-05-20 17:43:28,https://api.github.com/repos/antirez/redis/git/commits/10dea8dc1b6515bb8af6723fed4c28594572cefb,10dea8dc1b6515bb8af6723fed4c28594572cefb,fix memory leak on 32-bit builds
antirez,2010-05-20 15:09:00,https://api.github.com/repos/antirez/redis/git/commits/834c72fa57cb980d0858eb5cf81438ebb8a259f6,834c72fa57cb980d0858eb5cf81438ebb8a259f6,Merge branch 'master' of github.com:antirez/redis
antirez,2010-05-20 11:59:59,https://api.github.com/repos/antirez/redis/git/commits/6185fd3532704ef28012194d18ceda40096e332b,6185fd3532704ef28012194d18ceda40096e332b,Merge branch 'test_vm' of git://github.com/pietern/redis
pietern,2010-05-20 11:58:58,https://api.github.com/repos/antirez/redis/git/commits/f166bb1d500dcecb14bff13312a4e7d2a76356c7,f166bb1d500dcecb14bff13312a4e7d2a76356c7,code to enable running tests with the vm enabled
antirez,2010-05-20 10:53:26,https://api.github.com/repos/antirez/redis/git/commits/8513a757abb1edf9e85f368df9072b22218defe3,8513a757abb1edf9e85f368df9072b22218defe3,minor change to shutdown
antirez,2010-05-20 10:50:57,https://api.github.com/repos/antirez/redis/git/commits/fab43727b43de73add99dfc3f25a69ac0777fd67,fab43727b43de73add99dfc3f25a69ac0777fd67,shutdown on SIGTERM
antirez,2010-05-20 10:38:43,https://api.github.com/repos/antirez/redis/git/commits/c14753cea16cc963363b0d3002dc94b33c1f2075,c14753cea16cc963363b0d3002dc94b33c1f2075,Merge http://github.com/ngmoco/redis
pietern,2010-05-20 10:33:33,https://api.github.com/repos/antirez/redis/git/commits/9b8834158bb173bc7e28413f0d6883b089230b58,9b8834158bb173bc7e28413f0d6883b089230b58,fix compile error on solaris
antirez,2010-05-20 10:03:02,https://api.github.com/repos/antirez/redis/git/commits/d6d3f92fb0b9886e500731111af7d7bd795f7d32,d6d3f92fb0b9886e500731111af7d7bd795f7d32,added regression for zipmap bug
pietern,2010-05-20 09:02:08,https://api.github.com/repos/antirez/redis/git/commits/b36d1c309136051587db90391876125fc95ea348,b36d1c309136051587db90391876125fc95ea348,fix lookup of keys with length larger than ZIPMAP_BIGLEN
antirez,2010-05-19 21:02:30,https://api.github.com/repos/antirez/redis/git/commits/469c4e45c3d64a6331249c17b953d928a672b692,469c4e45c3d64a6331249c17b953d928a672b692,TODO updated
pietern,2010-05-19 12:33:39,https://api.github.com/repos/antirez/redis/git/commits/53cbf66caf40c44f081336061a8082b08c8f3a28,53cbf66caf40c44f081336061a8082b08c8f3a28,initial tests for AOF (and small changes to server.tcl to support these)
pietern,2010-05-19 12:53:57,https://api.github.com/repos/antirez/redis/git/commits/46b614edf7522e2bf8d3512fab347a9c9d4a1d70,46b614edf7522e2bf8d3512fab347a9c9d4a1d70,Merge branch 'master' into integration
antirez,2010-05-19 11:36:32,https://api.github.com/repos/antirez/redis/git/commits/30dd89b6b72643beafa098344752812029ce7bd9,30dd89b6b72643beafa098344752812029ce7bd9,Fix for 'CONFIG SET appendonly no'
antirez,2010-05-19 09:06:43,https://api.github.com/repos/antirez/redis/git/commits/2e5eb04e5014ddfddb18448e9aa4911731874caa,2e5eb04e5014ddfddb18448e9aa4911731874caa,It's now possible to turn off and on the AOF via CONFIG
antirez,2010-05-18 14:39:57,https://api.github.com/repos/antirez/redis/git/commits/c7dadd15131c2d9cd8f3db468c060c37a4bf1714,c7dadd15131c2d9cd8f3db468c060c37a4bf1714,git hash 00000000 in reelase.h when git is not found enabled again after some shell scripting fix that is now compatible with most shells
antirez,2010-05-18 10:17:51,https://api.github.com/repos/antirez/redis/git/commits/274e45e365a484ba0b3a957ead8c420484d6fca9,274e45e365a484ba0b3a957ead8c420484d6fca9,build fixed when simpler shells are used to create release.h
antirez,2010-05-18 08:08:51,https://api.github.com/repos/antirez/redis/git/commits/a42453a5931165b87335fd2fb744ec1c3b89fe8f,a42453a5931165b87335fd2fb744ec1c3b89fe8f,use git diff when generating release.h to check for dirty status
antirez,2010-05-18 08:05:00,https://api.github.com/repos/antirez/redis/git/commits/9caf1a20436bca57f011175c43003cf4b255420c,9caf1a20436bca57f011175c43003cf4b255420c,Solaris fixes
antirez,2010-05-17 22:39:49,https://api.github.com/repos/antirez/redis/git/commits/aed57a31af3a2fdaf0b8175568442ade979c7530,aed57a31af3a2fdaf0b8175568442ade979c7530,html doc rebuild
antirez,2010-05-17 22:36:48,https://api.github.com/repos/antirez/redis/git/commits/73287b2b576fa6a1ff1b61467286cbd5458881d2,73287b2b576fa6a1ff1b61467286cbd5458881d2,buliding of release.h moved into an external script. Avoided recompialtion of redis.c if git sha1 is the same as the previous one
pietern,2010-05-17 20:21:01,https://api.github.com/repos/antirez/redis/git/commits/5436146c8dcd95c5ef3809f2830fb9c08edc4177,5436146c8dcd95c5ef3809f2830fb9c08edc4177,create release.h in make process and add this information to INFO listing
antirez,2010-05-16 17:17:43,https://api.github.com/repos/antirez/redis/git/commits/26ef09a83526e5099bcea5f035401532a61b24ab,26ef09a83526e5099bcea5f035401532a61b24ab,Redis version is now 1.3.12
antirez,2010-05-16 17:15:12,https://api.github.com/repos/antirez/redis/git/commits/9e08e1b9edc480f6162c310ec44a3ec873ec2658,9e08e1b9edc480f6162c310ec44a3ec873ec2658,redis version is now 1.3.11
antirez,2010-05-16 00:02:46,https://api.github.com/repos/antirez/redis/git/commits/482b672df144cb575b69b6f2182a784f63d3d35c,482b672df144cb575b69b6f2182a784f63d3d35c,random refactoring and speedups
antirez,2010-05-15 22:59:08,https://api.github.com/repos/antirez/redis/git/commits/d6f4c262a1854dffa2d6987cdae0de01837139f8,d6f4c262a1854dffa2d6987cdae0de01837139f8,faster INCR with very little efforts...
pietern,2010-05-15 21:48:08,https://api.github.com/repos/antirez/redis/git/commits/fdfb02e7ff6e25f94dda2e649c18fa4addac4cc4,fdfb02e7ff6e25f94dda2e649c18fa4addac4cc4,print warnings in redis log when a test raises an exception (very likely to be caused by something like a failed assertion)
antirez,2010-05-15 08:40:58,https://api.github.com/repos/antirez/redis/git/commits/0f3010ab0d076d01b31019d902bfc94ca1e310d3,0f3010ab0d076d01b31019d902bfc94ca1e310d3,Merge branch 'redis-cli-fix' of http://github.com/tizoc/redis
antirez,2010-05-14 22:43:43,https://api.github.com/repos/antirez/redis/git/commits/76a224700d2745b7b292177f6b8eb0c2f122b73b,76a224700d2745b7b292177f6b8eb0c2f122b73b,"added pid info to the check memory leaks test, so that those tests don't appear to be duplicated"
antirez,2010-05-14 22:38:16,https://api.github.com/repos/antirez/redis/git/commits/b78fd80f1e6c445b8b7d0a3058e4fe4a8cc25062,b78fd80f1e6c445b8b7d0a3058e4fe4a8cc25062,Merge branch 'integration' of git://github.com/pietern/redis
antirez,2010-05-14 20:57:39,https://api.github.com/repos/antirez/redis/git/commits/3863d8ea81373689ff9e53b1243d254e360c568a,3863d8ea81373689ff9e53b1243d254e360c568a,more endianess detection fix for SHA1
antirez,2010-05-14 20:56:06,https://api.github.com/repos/antirez/redis/git/commits/3be2c9d732618512336f66f3de918941fc8f32d6,3be2c9d732618512336f66f3de918941fc8f32d6,fixed a warning seen with some GCC version under Linux
pietern,2010-05-14 18:50:58,https://api.github.com/repos/antirez/redis/git/commits/85ecc65edcdb08519a8cf1cd05b9eb910c26eb5c,85ecc65edcdb08519a8cf1cd05b9eb910c26eb5c,initial rough integration test for replication
pietern,2010-05-14 18:50:32,https://api.github.com/repos/antirez/redis/git/commits/1c4114be4012250382e082f7821f163dca408ffd,1c4114be4012250382e082f7821f163dca408ffd,store entire server object on the stack instead of just the client
pietern,2010-05-14 18:48:57,https://api.github.com/repos/antirez/redis/git/commits/9cf9e6f197a0270a86b26ddfca65a6faa72da893,9cf9e6f197a0270a86b26ddfca65a6faa72da893,proc to retrieve values from INFO properties
antirez,2010-05-14 17:24:01,https://api.github.com/repos/antirez/redis/git/commits/4d16bb253c8807e45abcd776fcf6521c525a3f2b,4d16bb253c8807e45abcd776fcf6521c525a3f2b,one more fix for endianess detection
antirez,2010-05-14 16:58:37,https://api.github.com/repos/antirez/redis/git/commits/5d373da96a7c2b38912cd925c456d719ea1a8933,5d373da96a7c2b38912cd925c456d719ea1a8933,"ZUNION,ZINTER -> ZUNIONSTORE,ZINTERSTORE"
antirez,2010-05-14 16:48:33,https://api.github.com/repos/antirez/redis/git/commits/ab72b4833d2054231437acccec36f32f07290075,ab72b4833d2054231437acccec36f32f07290075,"minor fixes to the new test suite, html doc updated"
pietern,2010-05-14 16:08:53,https://api.github.com/repos/antirez/redis/git/commits/47868511523c855799c315977b5d480f6f15a4be,47868511523c855799c315977b5d480f6f15a4be,wait for redis-server to be settled and ready for connections
pietern,2010-05-14 16:01:39,https://api.github.com/repos/antirez/redis/git/commits/1488645e15f5a2cf829ecd5eae1b4873e60645fc,1488645e15f5a2cf829ecd5eae1b4873e60645fc,fix cleaning up tmp folder
pietern,2010-05-14 15:54:27,https://api.github.com/repos/antirez/redis/git/commits/628e1c6910c00205da36e3ea1ddc4a4c74cfc857,628e1c6910c00205da36e3ea1ddc4a4c74cfc857,update makefile to use the new test suite
pietern,2010-05-14 15:49:39,https://api.github.com/repos/antirez/redis/git/commits/239515bccea55b34ba5d706741894b605cb6b3d1,239515bccea55b34ba5d706741894b605cb6b3d1,check for memory leaks before killing a server
pietern,2010-05-14 15:45:27,https://api.github.com/repos/antirez/redis/git/commits/4fb6d00c979984f7c462d5db1cadfdb0fa087dab,4fb6d00c979984f7c462d5db1cadfdb0fa087dab,extract code to kill a server to a separate proc
pietern,2010-05-14 15:42:07,https://api.github.com/repos/antirez/redis/git/commits/47bebf15fa2b88e992253fabd879a43f4fb12c8f,47bebf15fa2b88e992253fabd879a43f4fb12c8f,start servers on different ports to prevent conflicts
pietern,2010-05-14 15:38:12,https://api.github.com/repos/antirez/redis/git/commits/35453d992fff6848690a5c802664ed64cd55ec94,35453d992fff6848690a5c802664ed64cd55ec94,use DEBUG DIGEST in new test suite
pietern,2010-05-14 15:31:11,https://api.github.com/repos/antirez/redis/git/commits/98578b5704a8d147c31340b66d952b00efac9d59,98578b5704a8d147c31340b66d952b00efac9d59,split test suite into multiple files; runs redis-server in isolation
antirez,2010-05-14 14:41:24,https://api.github.com/repos/antirez/redis/git/commits/758b6d4c272c8132fd9090022b8b84a394062b91,758b6d4c272c8132fd9090022b8b84a394062b91,"use DEBUG DIGEST in the test instead of a function that was doing a similar work, but in a much slower and buggy way"
tizoc,2010-05-14 14:38:09,https://api.github.com/repos/antirez/redis/git/commits/36e5db6d24f361b96eb6e1f51ac117c0c9fdaaab,36e5db6d24f361b96eb6e1f51ac117c0c9fdaaab,Don't rely on cliReadReply being able to return on shutdown
tizoc,2010-05-14 14:04:01,https://api.github.com/repos/antirez/redis/git/commits/a57d9cc437ced3d3fd7fce64d1f698052651824d,a57d9cc437ced3d3fd7fce64d1f698052651824d,"If command is a shutdown, ignore errors on reply"
antirez,2010-05-14 11:41:57,https://api.github.com/repos/antirez/redis/git/commits/ba798261ce70a866d347978e942e35292da1f6a2,ba798261ce70a866d347978e942e35292da1f6a2,"DEBUG DIGEST implemented, in order to improve the ability to test persistence and replication consistency"
ashleym1972,2010-05-13 23:11:47,https://api.github.com/repos/antirez/redis/git/commits/b58ba10526f5894fa74821bd37d6e0324de69aba,b58ba10526f5894fa74821bd37d6e0324de69aba,Add SIGTERM shutdown handling.
antirez,2010-05-13 12:30:36,https://api.github.com/repos/antirez/redis/git/commits/7a121e60f2c079a9d6556971d05c06da2383b66a,7a121e60f2c079a9d6556971d05c06da2383b66a,makefile deps updated
antirez,2010-05-13 12:24:41,https://api.github.com/repos/antirez/redis/git/commits/9682a58fca1c53cecbf1b7a65bcf343f1f53c098,9682a58fca1c53cecbf1b7a65bcf343f1f53c098,conflicts resolved
pietern,2010-05-13 12:15:06,https://api.github.com/repos/antirez/redis/git/commits/9376e434f08003678e8042855bc5c35d406b8db2,9376e434f08003678e8042855bc5c35d406b8db2,feed SETEX as SET and EXPIREAT to AOF
antirez,2010-05-13 11:36:42,https://api.github.com/repos/antirez/redis/git/commits/32a6651355cc75f19f40b7d7a4cbd419ea19f39f,32a6651355cc75f19f40b7d7a4cbd419ea19f39f,very strong speedup in saving time performance when there are many integers in the dataset. Instead of decoding the object before to pass them to the rdbSaveObject layer we check asap if the object is integer encoded and can be written on disk as an integer.
antirez,2010-05-13 09:53:56,https://api.github.com/repos/antirez/redis/git/commits/fb82e75cd118d84e46acc1d73c48aa8c23c3118a,fb82e75cd118d84e46acc1d73c48aa8c23c3118a,include limits.h otherwise no double precison macros
antirez,2010-05-13 08:47:06,https://api.github.com/repos/antirez/redis/git/commits/88e8d89f1e2a3b032f1b5446b3328f4f256f858a,88e8d89f1e2a3b032f1b5446b3328f4f256f858a,explicitly checks with ifdefs if our floating point and long long assumptions are verified
antirez,2010-05-13 08:28:00,https://api.github.com/repos/antirez/redis/git/commits/fe24458996667f1ee8eac6ab899cdd63f3c5dc22,fe24458996667f1ee8eac6ab899cdd63f3c5dc22,"Yet another version of the double saving code, with comments explaining what's happening there"
antirez,2010-05-12 19:51:48,https://api.github.com/repos/antirez/redis/git/commits/5107436cdf7c4ec25b7ea5ff4de87dfc10eeb2db,5107436cdf7c4ec25b7ea5ff4de87dfc10eeb2db,"added overflow check in the double -> long long conversion trick to avoid integer overflows. I think this was not needed in practical terms, but it is safer"
antirez,2010-05-12 15:22:39,https://api.github.com/repos/antirez/redis/git/commits/128e89dde29a15d39c5e266650c419e64d5b17ee,128e89dde29a15d39c5e266650c419e64d5b17ee,use withscores when performing the dataset digest
antirez,2010-05-12 13:07:39,https://api.github.com/repos/antirez/redis/git/commits/8c096b16a1ab942413020c91138398d8a23bd64e,8c096b16a1ab942413020c91138398d8a23bd64e,"If a float can be casted to a long long without rounding loss, we can use the integer conversion function to write the score on disk. This is a seriuous speedup"
antirez,2010-05-12 09:51:01,https://api.github.com/repos/antirez/redis/git/commits/abce5627d7ce3bc1f5d2a15f65af11874bec169a,abce5627d7ce3bc1f5d2a15f65af11874bec169a,Merge branch 'vm-speedup'
pietern,2010-05-11 20:46:24,https://api.github.com/repos/antirez/redis/git/commits/6485f293827bed97a791ff6c88a8f3d92b00b1c5,6485f293827bed97a791ff6c88a8f3d92b00b1c5,fix to return error when calling INCR on a non-string type
antirez,2010-05-11 14:12:22,https://api.github.com/repos/antirez/redis/git/commits/ad30aa606911d11119670083a6a96e8d446f4341,ad30aa606911d11119670083a6a96e8d446f4341,load objects encoded from disk directly without useless conversion
antirez,2010-05-11 12:30:56,https://api.github.com/repos/antirez/redis/git/commits/bd59ecfb9293e5d19d0bc3b7654ba78aa544a59f,bd59ecfb9293e5d19d0bc3b7654ba78aa544a59f,"fixed a problem leading to crashes, as keys can't be currently specially encoded, so we can't encode integers at object loading time... For now this can be fixed passing a few flags, or later can be fixed allowing encoded keys as well"
antirez,2010-05-11 12:13:53,https://api.github.com/repos/antirez/redis/git/commits/ee14da56e6f725509a4dbfc4fe46ef8d8fe7621c,ee14da56e6f725509a4dbfc4fe46ef8d8fe7621c,"long long to string conversion speedup applied in other places as well. Still the code has bugs, fixing right now..."
antirez,2010-05-11 10:13:37,https://api.github.com/repos/antirez/redis/git/commits/e5b7a215e8c111cb759a69448f9c63f8c844aad0,e5b7a215e8c111cb759a69448f9c63f8c844aad0,hand written code to turn a long long into a string -> very big speed win
antirez,2010-05-11 09:15:36,https://api.github.com/repos/antirez/redis/git/commits/bf02809825a02936af82ebb784fe375b791787b8,bf02809825a02936af82ebb784fe375b791787b8,added specialized function to compare string objects for perfect match that is optimized for this task
antirez,2010-05-11 09:02:24,https://api.github.com/repos/antirez/redis/git/commits/dc05abde89dc5e06748abad7e6b720b5f3506e58,dc05abde89dc5e06748abad7e6b720b5f3506e58,better use of encoding inforamtion in dictEncObjKeyCompare
antirez,2010-05-10 18:56:54,https://api.github.com/repos/antirez/redis/git/commits/1b67773229da874edd04c317a47470739d2b68e4,1b67773229da874edd04c317a47470739d2b68e4,CONFIG now can change appendfsync policy at run time
antirez,2010-05-10 16:50:55,https://api.github.com/repos/antirez/redis/git/commits/a34e0a2574ee4482ca4ce6282ce6570f2d23d0c2,a34e0a2574ee4482ca4ce6282ce6570f2d23d0c2,CONFIG command now supports hot modification of RDB saving parameters.
antirez,2010-05-10 13:26:01,https://api.github.com/repos/antirez/redis/git/commits/89e689c592837b7af30259d0d1432ed7faef92ee,89e689c592837b7af30259d0d1432ed7faef92ee,"while loading the rdb file don't add the key to the dictionary at all if it's already expired, instead of removing it just after the insertion."
antirez,2010-05-10 13:09:25,https://api.github.com/repos/antirez/redis/git/commits/45ae650129bf7b665ade56e0dc6bd880f1e4ad07,45ae650129bf7b665ade56e0dc6bd880f1e4ad07,Merge branch 'check-aof' of git://github.com/pietern/redis
antirez,2010-05-08 01:04:00,https://api.github.com/repos/antirez/redis/git/commits/585af7e21c864652a15248b85c34808e16604c9e,585af7e21c864652a15248b85c34808e16604c9e,minor changes to improve code readability
antirez,2010-05-08 00:38:59,https://api.github.com/repos/antirez/redis/git/commits/242a64f3d613524ca3b938b0b6fa17e1d288419c,242a64f3d613524ca3b938b0b6fa17e1d288419c,swap objects out directly while loading an RDB file if we detect we can't stay in the vm max memory limits anyway
pietern,2010-05-07 14:48:43,https://api.github.com/repos/antirez/redis/git/commits/3350558346a07600bb7529781638696e04c425cc,3350558346a07600bb7529781638696e04c425cc,change command names no longer used to zunion/zinter
antirez,2010-05-07 14:33:47,https://api.github.com/repos/antirez/redis/git/commits/59305dc7a91a0572c5cc0d5f7e3d0e624311542a,59305dc7a91a0572c5cc0d5f7e3d0e624311542a,DEBUG POPULATE command for fast creation of test databases
pietern,2010-05-07 12:36:59,https://api.github.com/repos/antirez/redis/git/commits/3317c679711e2ae82c452e783d912e5276b5f6d7,3317c679711e2ae82c452e783d912e5276b5f6d7,update TODO
pietern,2010-05-07 12:33:34,https://api.github.com/repos/antirez/redis/git/commits/0a6f3f0f8a42731b36a78d58c5c11728faf97a43,0a6f3f0f8a42731b36a78d58c5c11728faf97a43,swap arguments in blockClientOnSwappedKeys to be consistent
pietern,2010-05-07 12:17:10,https://api.github.com/repos/antirez/redis/git/commits/3805e04f788a27938095b3d79d987210140283a9,3805e04f788a27938095b3d79d987210140283a9,added function that preloads all keys needed to execute a MULTI/EXEC block
pietern,2010-05-07 10:59:34,https://api.github.com/repos/antirez/redis/git/commits/739ba0d21119778438c36ea60fdb263271783468,739ba0d21119778438c36ea60fdb263271783468,"add sanity check to zunionInterBlockClientOnSwappedKeys, as the number of keys used is provided as argument to the function"
pietern,2010-05-07 10:58:44,https://api.github.com/repos/antirez/redis/git/commits/ca1788b560a0e70047f1bcef354a3b6317b4360d,ca1788b560a0e70047f1bcef354a3b6317b4360d,make prototype of custom function to preload keys from the vm match the prototype of waitForMultipleSwappedKeys
pietern,2010-05-07 10:45:27,https://api.github.com/repos/antirez/redis/git/commits/6f07874621392f7f0eb5f092f79f1afe8939b9c3,6f07874621392f7f0eb5f092f79f1afe8939b9c3,extract preloading of multiple keys according to the command prototype to a separate function
pietern,2010-05-07 09:55:12,https://api.github.com/repos/antirez/redis/git/commits/f3b52411db839f4716bdbd7ac9f90331c94f0ccd,f3b52411db839f4716bdbd7ac9f90331c94f0ccd,make append only filename configurable
pietern,2010-05-07 09:40:26,https://api.github.com/repos/antirez/redis/git/commits/f4f06efccc4064fa0f7f7f16098de746fa0e5b69,f4f06efccc4064fa0f7f7f16098de746fa0e5b69,don't load value from VM for EXISTS
antirez,2010-05-07 07:36:37,https://api.github.com/repos/antirez/redis/git/commits/a0e7e5f516fa0317007b6267bf55d8fa535ad2f2,a0e7e5f516fa0317007b6267bf55d8fa535ad2f2,swap file name pid expansion removed. Not suited for mission critical software...
antirez,2010-05-07 07:32:26,https://api.github.com/repos/antirez/redis/git/commits/8b5bb414f111eeabb0514e686abbc7e0db031221,8b5bb414f111eeabb0514e686abbc7e0db031221,Swap file is now locked
antirez,2010-05-06 21:19:46,https://api.github.com/repos/antirez/redis/git/commits/f424d5f398dde0679ae2afd5063c80d845641a00,f424d5f398dde0679ae2afd5063c80d845641a00,Merge branch 'master' into aof-speedup
pietern,2010-05-06 20:00:04,https://api.github.com/repos/antirez/redis/git/commits/4132ad8d49e9a26425497048404f32b151362fe1,4132ad8d49e9a26425497048404f32b151362fe1,log error and quit when the AOF contains an unfinished MULTI
pietern,2010-05-06 20:00:04,https://api.github.com/repos/antirez/redis/git/commits/8063b99da677afc470342a3f75552950b6a487db,8063b99da677afc470342a3f75552950b6a487db,log error and quit when the AOF contains an unfinished MULTI
pietern,2010-05-06 19:06:09,https://api.github.com/repos/antirez/redis/git/commits/98d2e23be23f9af02653672081896747baf985f7,98d2e23be23f9af02653672081896747baf985f7,Merge branch 'master' into check-aof
pietern,2010-05-06 18:35:00,https://api.github.com/repos/antirez/redis/git/commits/946342c19019c5cf81b965cac3dbea5007d74049,946342c19019c5cf81b965cac3dbea5007d74049,hincrby should report an error when called against a hash key that doesn't contain an integer
antirez,2010-05-06 18:16:14,https://api.github.com/repos/antirez/redis/git/commits/28ed1f33eedad20fc441b2552b3d7149b2832295,28ed1f33eedad20fc441b2552b3d7149b2832295,"AOF writes are now accumulated into a buffer and flushed into disk just before re-entering the event loop. A lot less writes but still this guarantees that AOF is written before the client gets a positive reply about a write operation, as no reply is trasnmitted before re-entering into the event loop."
antirez,2010-05-06 16:04:51,https://api.github.com/repos/antirez/redis/git/commits/029245feac6b481545de6810c554a2d5d50c39c6,029245feac6b481545de6810c554a2d5d50c39c6,clarified a few messages in redis.conf
pietern,2010-05-05 14:38:50,https://api.github.com/repos/antirez/redis/git/commits/81330149f84f26c3e0492a296acfce7bd55d783f,81330149f84f26c3e0492a296acfce7bd55d783f,ask for confirmation before AOF is truncated
pietern,2010-05-05 12:06:55,https://api.github.com/repos/antirez/redis/git/commits/e51fa063db5fbb53c754738d87146551aebfd8e2,e51fa063db5fbb53c754738d87146551aebfd8e2,str can be free'd outside readString
pietern,2010-05-05 12:02:04,https://api.github.com/repos/antirez/redis/git/commits/57ca68acc16cedb39409ce5e513f9c2dd6f29182,57ca68acc16cedb39409ce5e513f9c2dd6f29182,moved argument parsing around
pietern,2010-05-05 11:47:17,https://api.github.com/repos/antirez/redis/git/commits/e795c7588875c47908c06a5fac0f869e23854218,e795c7588875c47908c06a5fac0f869e23854218,ignore redis-check-aof binary
pietern,2010-05-05 11:46:37,https://api.github.com/repos/antirez/redis/git/commits/cb8ae3c88908a8a4b9c88d56713ae2aea472cbd8,cb8ae3c88908a8a4b9c88d56713ae2aea472cbd8,allow AOF to be fixed by truncating to the portion of the file that is valid
pietern,2010-05-05 11:36:29,https://api.github.com/repos/antirez/redis/git/commits/b4bd05241da2772f457d0552d807e7cfd4dc8f33,b4bd05241da2772f457d0552d807e7cfd4dc8f33,tool to check if AOF is valid
antirez,2010-05-02 13:08:06,https://api.github.com/repos/antirez/redis/git/commits/af090ffa5279a9faca4ea974d908d58d0fc77844,af090ffa5279a9faca4ea974d908d58d0fc77844,compilation fix for mac os x
antirez,2010-04-30 09:52:36,https://api.github.com/repos/antirez/redis/git/commits/3c5caedc69b9873a500a572020be2097db1920de,3c5caedc69b9873a500a572020be2097db1920de,More tests for APPEND and tests for SUBSTR
antirez,2010-04-30 07:21:48,https://api.github.com/repos/antirez/redis/git/commits/a737ada1e58e6cd75e2fc643e2e55778de17b2ef,a737ada1e58e6cd75e2fc643e2e55778de17b2ef,"linenoise.c updated, now redis-cli can be used in a pipe"
antirez,2010-04-29 16:43:51,https://api.github.com/repos/antirez/redis/git/commits/dd142b9cd7488d849be078e0984d6547592599ac,dd142b9cd7488d849be078e0984d6547592599ac,"New MONITOR output format with timestamp, every command in a single line, string representations"
antirez,2010-04-29 16:07:35,https://api.github.com/repos/antirez/redis/git/commits/f40b035d7b5771742ddc9d0304eda3b9ba434454,f40b035d7b5771742ddc9d0304eda3b9ba434454,redis-cli INFO output format is now raw again
antirez,2010-04-29 13:39:11,https://api.github.com/repos/antirez/redis/git/commits/0ce7679849b9d7edd9244a1461f4f126539003dc,0ce7679849b9d7edd9244a1461f4f126539003dc,Added more information about slave election in Redis Cluster alternative doc
antirez,2010-04-29 09:00:19,https://api.github.com/repos/antirez/redis/git/commits/5bdb384ff0d532d137cea9ef6e3f9b4c6c193e49,5bdb384ff0d532d137cea9ef6e3f9b4c6c193e49,Redis cluster version 2
antirez,2010-04-27 14:58:08,https://api.github.com/repos/antirez/redis/git/commits/8f63ddca00cd23978fc5a26388681753c7e5318c,8f63ddca00cd23978fc5a26388681753c7e5318c,AOF is now rewritten on slave after SYNC with master. Thanks to @_km for finding this bug and any others'
antirez,2010-04-27 14:21:15,https://api.github.com/repos/antirez/redis/git/commits/cbb87f7f8a954c9c0b34899206ce76f1094047a4,cbb87f7f8a954c9c0b34899206ce76f1094047a4,redis-cli is now using only the new protocol
antirez,2010-04-27 14:07:31,https://api.github.com/repos/antirez/redis/git/commits/249c3a7dd1473d32d8b02830e7beb0625a51ff9b,249c3a7dd1473d32d8b02830e7beb0625a51ff9b,Minimal support for subscribe/psubscribe in redis-cli
antirez,2010-04-26 17:56:16,https://api.github.com/repos/antirez/redis/git/commits/095e805e891798435944aa9082d45b3c69ed2dcf,095e805e891798435944aa9082d45b3c69ed2dcf,don't output the newline when stdout is not a tty
antirez,2010-04-26 16:54:55,https://api.github.com/repos/antirez/redis/git/commits/21cdc9f0649ffa905fccf6a15c19adeff4aaf2c8,21cdc9f0649ffa905fccf6a15c19adeff4aaf2c8,redis-cli now is able to also output the string representation instead of the raw string. Much better for debugging
antirez,2010-04-26 16:39:39,https://api.github.com/repos/antirez/redis/git/commits/a88a2af6c5a5248227dd5436a93a637000e88d8c,a88a2af6c5a5248227dd5436a93a637000e88d8c,Initial support for quoted strings in redis-cli
antirez,2010-04-23 17:07:33,https://api.github.com/repos/antirez/redis/git/commits/526d00a572a3562bfab0cefd732aa13b7fcc0bff,526d00a572a3562bfab0cefd732aa13b7fcc0bff,SETEX implemented
antirez,2010-04-23 13:36:00,https://api.github.com/repos/antirez/redis/git/commits/c8d0ea0ef1df7b64a23f992f370db5f70f343891,c8d0ea0ef1df7b64a23f992f370db5f70f343891,Pub/Sub API change: now messages received via pattern matching have a different message type and an additional field representing the original pattern the message matched
antirez,2010-04-22 18:24:00,https://api.github.com/repos/antirez/redis/git/commits/7accafbbe22cbc46d5838c0288aacfce7ad2e0dc,7accafbbe22cbc46d5838c0288aacfce7ad2e0dc,"typo fixed, reloaded"
antirez,2010-04-22 18:20:41,https://api.github.com/repos/antirez/redis/git/commits/ffcc5608aa194e5c86b44fb9a770429f3d9db8ae,ffcc5608aa194e5c86b44fb9a770429f3d9db8ae,typo fixed
antirez,2010-04-22 17:46:39,https://api.github.com/repos/antirez/redis/git/commits/34b8a559a8c4363b3540252c897bf99142477cf2,34b8a559a8c4363b3540252c897bf99142477cf2,REDIS-CLUSTER doc updated
antirez,2010-04-22 16:04:50,https://api.github.com/repos/antirez/redis/git/commits/4e5240af642a44654e8cece67a89f06bd359d614,4e5240af642a44654e8cece67a89f06bd359d614,"Virtual memory design document removed, no longer needed as we have a full specification and implementation"
antirez,2010-04-22 13:09:07,https://api.github.com/repos/antirez/redis/git/commits/723240057a996a64516b10779f754ae26a91d0cd,723240057a996a64516b10779f754ae26a91d0cd,new units for bytes specification
antirez,2010-04-21 09:31:29,https://api.github.com/repos/antirez/redis/git/commits/dc4be23ec895c6ec49afc75cd037cac230a21771,dc4be23ec895c6ec49afc75cd037cac230a21771,binary safe keys ready implementation of RANDOMKEYS
antirez,2010-04-21 08:31:48,https://api.github.com/repos/antirez/redis/git/commits/24df76987e85f7ba5314495e50dc5cc9ff623823,24df76987e85f7ba5314495e50dc5cc9ff623823,Now that's the right 1.3.10
antirez,2010-04-21 08:31:16,https://api.github.com/repos/antirez/redis/git/commits/3bb225d66be633c88ba01c6e7a0cebf91837cd13,3bb225d66be633c88ba01c6e7a0cebf91837cd13,"Revert ""fsync always now uses O_DIRECT on Linux""

This reverts commit 566c3c7a22c0ec217c40f7a95db2bb83c8cc16c7."
antirez,2010-04-21 08:31:08,https://api.github.com/repos/antirez/redis/git/commits/d6fb4d5396a8822435e50843b4ddc4522cfec070,d6fb4d5396a8822435e50843b4ddc4522cfec070,"Revert ""define __USE_GNU to get O_DIRECT""

This reverts commit 122c04983400a076423811740f2b87163ea95c00."
antirez,2010-04-21 08:30:36,https://api.github.com/repos/antirez/redis/git/commits/0040fa253fdfeca20d540609aa17a796856744eb,0040fa253fdfeca20d540609aa17a796856744eb,Merge branch 'master' of github.com:antirez/redis
antirez,2010-04-21 08:29:24,https://api.github.com/repos/antirez/redis/git/commits/a08bb01d6740f0d4baf970ad9499859383219c22,a08bb01d6740f0d4baf970ad9499859383219c22,"Revert ""version 1.3.10""

This reverts commit 188714211af246b96f46a2e598c66fee95c52375."
antirez,2010-04-21 07:54:21,https://api.github.com/repos/antirez/redis/git/commits/188714211af246b96f46a2e598c66fee95c52375,188714211af246b96f46a2e598c66fee95c52375,version 1.3.10
antirez,2010-04-20 16:29:06,https://api.github.com/repos/antirez/redis/git/commits/122c04983400a076423811740f2b87163ea95c00,122c04983400a076423811740f2b87163ea95c00,define __USE_GNU to get O_DIRECT
antirez,2010-04-20 16:25:30,https://api.github.com/repos/antirez/redis/git/commits/566c3c7a22c0ec217c40f7a95db2bb83c8cc16c7,566c3c7a22c0ec217c40f7a95db2bb83c8cc16c7,fsync always now uses O_DIRECT on Linux
antirez,2010-04-20 09:01:36,https://api.github.com/repos/antirez/redis/git/commits/d3277ecd92352db11e9f4ce4c45a63c3a225fc29,d3277ecd92352db11e9f4ce4c45a63c3a225fc29,More precise memory used guesswork in zmalloc.c
antirez,2010-04-19 16:30:11,https://api.github.com/repos/antirez/redis/git/commits/66c8853f9c1222eace3ab12b5cb58ca6871c942b,66c8853f9c1222eace3ab12b5cb58ca6871c942b,Fix for MULTI/EXEC and Replication/AOF: now the block is correctly sent as MULTI/..writing operations../EXEC. Ok for slaves but more work needed for the AOF as it should be a write-all-or-nothing business
antirez,2010-04-19 14:11:13,https://api.github.com/repos/antirez/redis/git/commits/7ccd2d0a5fe75293990ee249f7539eb7c9279104,7ccd2d0a5fe75293990ee249f7539eb7c9279104,running the test using tcl8.5 directly instead of tclsh that too often it's a symlink to 8.4
antirez,2010-04-19 09:05:08,https://api.github.com/repos/antirez/redis/git/commits/f1a930bbb785637a21f82a0fde08aa71ad19c8c3,f1a930bbb785637a21f82a0fde08aa71ad19c8c3,Added package require Tcl 8.5 in redis.tcl so it will show a clear error when the test suit is attempted to run under 8.4
antirez,2010-04-18 15:51:15,https://api.github.com/repos/antirez/redis/git/commits/08ee9b570f4a9a181c3ed2242c5b2f6a88eddc41,08ee9b570f4a9a181c3ed2242c5b2f6a88eddc41,"Fix for a SORT bug introduced with commit 16fa22f1, regression test added"
antirez,2010-04-17 22:03:49,https://api.github.com/repos/antirez/redis/git/commits/177727542c871330445700299aed803a1384b0ed,177727542c871330445700299aed803a1384b0ed,Guru mediation -> meditation
pietern,2010-04-16 12:42:14,https://api.github.com/repos/antirez/redis/git/commits/682c73e87e6edfdfe76b9bb4b3d66ce39465b359,682c73e87e6edfdfe76b9bb4b3d66ce39465b359,check eptr inline
pietern,2010-04-16 12:35:52,https://api.github.com/repos/antirez/redis/git/commits/bd79a6bda04366bb45f071526d4e48ab25318532,bd79a6bda04366bb45f071526d4e48ab25318532,refactor code that retrieves value from object or replies to client
antirez,2010-04-17 10:54:49,https://api.github.com/repos/antirez/redis/git/commits/4e8dbaf463cefe1710283bfefbccc3db37af5c5a,4e8dbaf463cefe1710283bfefbccc3db37af5c5a,Merge branch 'hash' of git://github.com/pietern/redis
antirez,2010-04-17 10:54:40,https://api.github.com/repos/antirez/redis/git/commits/f83c6cb5eb02d618ef6944e095c897358fa9cd5f,f83c6cb5eb02d618ef6944e095c897358fa9cd5f,"redisAssert(0) => redisPanic(""something meaningful"")"
pietern,2010-04-17 10:46:23,https://api.github.com/repos/antirez/redis/git/commits/3f973463a7a5d70785dd0c7d33e0e5624a474c94,3f973463a7a5d70785dd0c7d33e0e5624a474c94,make sure that the resulting value in hincrby is encoded when possible
pietern,2010-04-17 10:35:22,https://api.github.com/repos/antirez/redis/git/commits/edc2f63ad9c961e54a10f27a44a4b64868160eaa,edc2f63ad9c961e54a10f27a44a4b64868160eaa,increment dirty counter after hmset
pietern,2010-04-17 10:33:43,https://api.github.com/repos/antirez/redis/git/commits/97224de7f962f8c39cb357969f83378d12d25f96,97224de7f962f8c39cb357969f83378d12d25f96,"strip tryObjectEncoding from hashSet, to enable the arguments being encoded in-place"
antirez,2010-04-17 09:35:05,https://api.github.com/repos/antirez/redis/git/commits/c651fd9ee3ce3d1dca7cc8dbf7648cd588255bd9,c651fd9ee3ce3d1dca7cc8dbf7648cd588255bd9,"Added support for Guru Mediation, and raising a guru mediation if refCount <= 0 but decrRefCount is called against such an object"
pietern,2010-04-16 15:55:57,https://api.github.com/repos/antirez/redis/git/commits/55017f9da0c8ee8709029c4dbdbf4f1d4db4a181,55017f9da0c8ee8709029c4dbdbf4f1d4db4a181,fix small error and memory leaks in SORT
antirez,2010-04-16 15:00:27,https://api.github.com/repos/antirez/redis/git/commits/4bfcbab8b27faf58c8e66681b8db907454404442,4bfcbab8b27faf58c8e66681b8db907454404442,SORT/GET test added
antirez,2010-04-16 14:23:10,https://api.github.com/repos/antirez/redis/git/commits/c4e83132313c3eaad0f0d6488566a746fddb76c4,c4e83132313c3eaad0f0d6488566a746fddb76c4,Added tests for GET/BY against hashes fields
antirez,2010-04-16 13:53:44,https://api.github.com/repos/antirez/redis/git/commits/b4eb9ccdcbc126e9b828f7fc8d0bcd40bd1891a0,b4eb9ccdcbc126e9b828f7fc8d0bcd40bd1891a0,Merge branch 'hash-refactor' of git://github.com/pietern/redis
pietern,2010-04-16 11:37:40,https://api.github.com/repos/antirez/redis/git/commits/b6f07345c9e4383ac444c895e08e7998ae404915,b6f07345c9e4383ac444c895e08e7998ae404915,check object type in lookupKeyByPattern
pietern,2010-04-16 11:31:17,https://api.github.com/repos/antirez/redis/git/commits/705dad386d2f9c303701dcd9e417433d6d287ee0,705dad386d2f9c303701dcd9e417433d6d287ee0,make sortCommand aware that lookupKeyByPattern always increased the refcount of the returned value
pietern,2010-04-16 11:20:12,https://api.github.com/repos/antirez/redis/git/commits/a3f3af860bd16cd138a9babdd8550f5aa9df16fc,a3f3af860bd16cd138a9babdd8550f5aa9df16fc,revert 0c390a to stop using tricks with o->refcount
pietern,2010-04-16 10:48:48,https://api.github.com/repos/antirez/redis/git/commits/c44d3b56df4ce4cae1c2e6db6397eaab9651ff7a,c44d3b56df4ce4cae1c2e6db6397eaab9651ff7a,store the hash iterator on the heap instead of the stack
pietern,2010-04-16 10:13:41,https://api.github.com/repos/antirez/redis/git/commits/c811bb381d06155ffc2b050196761be177ba620b,c811bb381d06155ffc2b050196761be177ba620b,drop inline directive
pietern,2010-04-16 10:12:50,https://api.github.com/repos/antirez/redis/git/commits/feb8d7e6a6a579695513e8c65b97d10cd9a42f53,feb8d7e6a6a579695513e8c65b97d10cd9a42f53,rename hashReplace to hashSet
antirez,2010-04-16 08:04:51,https://api.github.com/repos/antirez/redis/git/commits/58e1c9c143e9c5f108ca1863bdd61fc5e02dc968,58e1c9c143e9c5f108ca1863bdd61fc5e02dc968,added dictFetchValue() to dict.c to make hash table API a bit less verbose in the common cases
kmerenkov,2010-04-02 20:12:10,https://api.github.com/repos/antirez/redis/git/commits/d4dd6556c3925ae26b1fce142158b3243eda39a7,d4dd6556c3925ae26b1fce142158b3243eda39a7,"Don't set expire to keys with ttl=0, remove them immediately."
pietern,2010-04-15 18:55:34,https://api.github.com/repos/antirez/redis/git/commits/16fa22f12b61d7da44145cb8cf48ea7f7c454200,16fa22f12b61d7da44145cb8cf48ea7f7c454200,make sure that cmpobj is in decoded form when sorting by ALPHA (this solves edge case from previous commit where (!sortby && alpha) == 1)
pietern,2010-04-15 15:31:13,https://api.github.com/repos/antirez/redis/git/commits/6d7d1370c3ea7b338b9c5ab1ade32adbbcc661b8,6d7d1370c3ea7b338b9c5ab1ade32adbbcc661b8,enable hash dereference in SORT on BY and GET
pietern,2010-04-15 13:38:48,https://api.github.com/repos/antirez/redis/git/commits/6e9e463f8014cbde1eaabe4c59045471e1871b74,6e9e463f8014cbde1eaabe4c59045471e1871b74,use shared replies for hset
pietern,2010-04-15 13:06:57,https://api.github.com/repos/antirez/redis/git/commits/0c390abc69a0a5f4a6f3178b277de0745211934a,0c390abc69a0a5f4a6f3178b277de0745211934a,"set refcount of string objects retrieved from zipmaps to 0, so we don't have to touch the refcount of the objects inside dicts"
pietern,2010-04-15 10:48:13,https://api.github.com/repos/antirez/redis/git/commits/1f1c76951824ffa4864c3aeeb9f39c2df201c184,1f1c76951824ffa4864c3aeeb9f39c2df201c184,added HSETNX
pietern,2010-04-13 22:22:44,https://api.github.com/repos/antirez/redis/git/commits/7fb16bacaea00e8c098e9129abd6eff7506d5504,7fb16bacaea00e8c098e9129abd6eff7506d5504,refactor of hash commands to use specialized api that abstracts zipmap and dict apis
pietern,2010-04-13 19:25:11,https://api.github.com/repos/antirez/redis/git/commits/a71f072f7352e8879ac8e39dbfcf19369395ce93,a71f072f7352e8879ac8e39dbfcf19369395ce93,move retrieval of long up to prevent an empty hash from being created
antirez,2010-04-15 17:13:14,https://api.github.com/repos/antirez/redis/git/commits/bc55456975ca955c9babd5634495f939a56c3199,bc55456975ca955c9babd5634495f939a56c3199,more advanced leaks detection in test redis
antirez,2010-04-15 16:32:44,https://api.github.com/repos/antirez/redis/git/commits/fb765a0ae39e07e58aa822dd755549de2be89d2d,fb765a0ae39e07e58aa822dd755549de2be89d2d,ability to select port/host from make test
antirez,2010-04-15 16:07:57,https://api.github.com/repos/antirez/redis/git/commits/8ca3e9d10b013263a5356c81882b00e619a88720,8ca3e9d10b013263a5356c81882b00e619a88720,Active rehashing
antirez,2010-04-15 09:59:13,https://api.github.com/repos/antirez/redis/git/commits/5413c40da79d06b53b276b5358e04706a2738e9b,5413c40da79d06b53b276b5358e04706a2738e9b,Incrementally rehahsing hash table! Thanks to Derek Collison and Pieter Noordhuis for feedbacks/help
antirez,2010-04-14 10:12:25,https://api.github.com/repos/antirez/redis/git/commits/e6cca5dba6ad046625c195c9c4f39c7ce06ad080,e6cca5dba6ad046625c195c9c4f39c7ce06ad080,Does not allow commands other than Pub/Sub commands when there is at least one pattern
alexmchale,2010-04-13 16:48:33,https://api.github.com/repos/antirez/redis/git/commits/9a22de8270fbb594cbdd23fe06a9e193ee01f17a,9a22de8270fbb594cbdd23fe06a9e193ee01f17a,Fixed a tiny memory leak when loading the configuration file.
antirez,2010-04-13 16:30:55,https://api.github.com/repos/antirez/redis/git/commits/b60bace9f945d30029596a6bd91412d2e1053c69,b60bace9f945d30029596a6bd91412d2e1053c69,Merge branch 'hmget' of git://github.com/pietern/redis
alexmchale,2010-03-29 20:24:39,https://api.github.com/repos/antirez/redis/git/commits/bbe025e04bca8c1631152aada1ed7db5a6aa625c,bbe025e04bca8c1631152aada1ed7db5a6aa625c,Validate numeric inputs.
alexmchale,2010-03-24 14:15:24,https://api.github.com/repos/antirez/redis/git/commits/e0a62c7fdb6fd0670cbc8c2250680948e737b0aa,e0a62c7fdb6fd0670cbc8c2250680948e737b0aa,Remove trailing whitespace.
antirez,2010-04-12 14:03:41,https://api.github.com/repos/antirez/redis/git/commits/4e27f26863a237f0ddba4ee328d72f2d7e2408cc,4e27f26863a237f0ddba4ee328d72f2d7e2408cc,"Now all the commands returning a multi bulk reply against non existing keys will return an empty multi bulk, not a nil one"
pietern,2010-04-12 12:53:25,https://api.github.com/repos/antirez/redis/git/commits/09aeb5790fa09e1a5fb7545f669780efe1eb4632,09aeb5790fa09e1a5fb7545f669780efe1eb4632,implemented HMGET
pietern,2010-04-12 10:29:37,https://api.github.com/repos/antirez/redis/git/commits/d33278d1601bda80987a6f4ad4b2319fb2f7e972,d33278d1601bda80987a6f4ad4b2319fb2f7e972,implemented HMSET
antirez,2010-04-12 09:38:08,https://api.github.com/repos/antirez/redis/git/commits/05df7621750eb4bde669141afd0809f747d8f263,05df7621750eb4bde669141afd0809f747d8f263,Sharing of small integer objects: may save a lot of memory with datasets having many of this
antirez,2010-04-10 09:14:11,https://api.github.com/repos/antirez/redis/git/commits/dae121d9aa38626db9962ff02879b55eb7ca36bf,dae121d9aa38626db9962ff02879b55eb7ca36bf,dict.c fixed to play well with enabling/disabling of the hash table
antirez,2010-04-09 16:35:24,https://api.github.com/repos/antirez/redis/git/commits/10d91d7fb373e9e70ce22d4f796d59d5510d6ee5,10d91d7fb373e9e70ce22d4f796d59d5510d6ee5,removed a no longer true assert in the VM code
antirez,2010-04-09 15:13:39,https://api.github.com/repos/antirez/redis/git/commits/bdcb92f273c6b89e8a17cea6cee8bac81568baf9,bdcb92f273c6b89e8a17cea6cee8bac81568baf9,"shareobjects feautres killed - no gains most of the time, but VM complexities"
antirez,2010-04-09 15:02:56,https://api.github.com/repos/antirez/redis/git/commits/78ebe4c88f5ca2e7bfc0d1a0b0481940daac83b4,78ebe4c88f5ca2e7bfc0d1a0b0481940daac83b4,"use directly the real key object in VM I/O jobs to match by pointer, and to handle different keys with the same name living in different DBs, but being at the same moment in the IO job queues"
antirez,2010-04-08 18:18:42,https://api.github.com/repos/antirez/redis/git/commits/d9eaa43a028c8fb81f56b46a22687f51e668c490,d9eaa43a028c8fb81f56b46a22687f51e668c490,last change reverted as it was unstable... more testing needed
antirez,2010-04-08 18:08:51,https://api.github.com/repos/antirez/redis/git/commits/884d4b39d475bc15d89ba4415772463f337c7f19,884d4b39d475bc15d89ba4415772463f337c7f19,Prevent hash table resize while there are active child processes in order to play well with copy on write
antirez,2010-04-08 14:07:26,https://api.github.com/repos/antirez/redis/git/commits/5727b9aa940cd3ae4884ca3fbede57d96b183b1f,5727b9aa940cd3ae4884ca3fbede57d96b183b1f,Merge branch 'issue_218' of git://github.com/pietern/redis
antirez,2010-04-08 14:07:18,https://api.github.com/repos/antirez/redis/git/commits/10c2baa50a21eae161edd76c211b6728d06173b9,10c2baa50a21eae161edd76c211b6728d06173b9,-1 not needed...
antirez,2010-04-08 13:56:21,https://api.github.com/repos/antirez/redis/git/commits/6fcb18003940f8c7f464293677bd7286cad4dce2,6fcb18003940f8c7f464293677bd7286cad4dce2,Skiplist theoretical fix
antirez,2010-04-07 15:36:44,https://api.github.com/repos/antirez/redis/git/commits/454eea7c44b5dc54690aea71d6411d241148f12d,454eea7c44b5dc54690aea71d6411d241148f12d,"Now when a child is terminated by a signal, the signal number is logged as well"
antirez,2010-04-07 11:55:06,https://api.github.com/repos/antirez/redis/git/commits/686bc0ac5c05a43c35908c335e17818c7a01afbe,686bc0ac5c05a43c35908c335e17818c7a01afbe,"First version of evented Redis Tcl client, that will be used for BLPOP and Pub/Sub tests"
pietern,2010-04-05 14:51:48,https://api.github.com/repos/antirez/redis/git/commits/aa7c29340f87889467f343a8783bc9908df5483d,aa7c29340f87889467f343a8783bc9908df5483d,use long long reply type for HINCRBY
pietern,2010-04-05 14:51:34,https://api.github.com/repos/antirez/redis/git/commits/5e26ae88b8082090263281737f918b2a3ad71706,5e26ae88b8082090263281737f918b2a3ad71706,last argument is never encoded for HINCRBY
antirez,2010-04-02 14:42:15,https://api.github.com/repos/antirez/redis/git/commits/4005fef12415087aed9bdfa4c1baadbb7a558bfb,4005fef12415087aed9bdfa4c1baadbb7a558bfb,Now PUBLISH commands are replicated to slaves
pietern,2010-04-01 20:07:50,https://api.github.com/repos/antirez/redis/git/commits/8bca8773b4e2542f9537b8403764867aa76273a5,8bca8773b4e2542f9537b8403764867aa76273a5,use the right object when cleaning up after zunion/zinter (fixes issue 216)
antirez,2010-04-01 16:48:14,https://api.github.com/repos/antirez/redis/git/commits/14ae26d89d32a25f66e96ca62b49dff1ef1b95ad,14ae26d89d32a25f66e96ca62b49dff1ef1b95ad,Merge branch 'zipmap' of git://github.com/pietern/redis
pietern,2010-04-01 12:31:13,https://api.github.com/repos/antirez/redis/git/commits/e9484a8502ce478585f884466efd061db782899f,e9484a8502ce478585f884466efd061db782899f,reduce code complexity because zipmapLen now is O(1)
pietern,2010-04-01 12:02:22,https://api.github.com/repos/antirez/redis/git/commits/da2cfe8a3baeaad619c11290acf377f4ea7356c1,da2cfe8a3baeaad619c11290acf377f4ea7356c1,update the zipmap entry in-place instead of appending it
pietern,2010-04-01 11:24:18,https://api.github.com/repos/antirez/redis/git/commits/bfded2aa511f70bb07941698f883b38de68c7773,bfded2aa511f70bb07941698f883b38de68c7773,updated zipmap documentation to match the implementation
pietern,2010-04-01 11:15:32,https://api.github.com/repos/antirez/redis/git/commits/8c6700720d7794bf9d526b6e2adbf73cc12207f0,8c6700720d7794bf9d526b6e2adbf73cc12207f0,allow 4 free trailing bytes for each value
antirez,2010-04-01 11:13:29,https://api.github.com/repos/antirez/redis/git/commits/ffc6b7f864dcaa58b6c5d81d7e595050fe954dec,ffc6b7f864dcaa58b6c5d81d7e595050fe954dec,Pub/Sub pattern matching capabilities
pietern,2010-04-01 10:58:08,https://api.github.com/repos/antirez/redis/git/commits/06278a675853bc518a2613625d1b430af0523254,06278a675853bc518a2613625d1b430af0523254,use function to determine length of a single entry
antirez,2010-03-31 17:49:12,https://api.github.com/repos/antirez/redis/git/commits/958cd5f394a55c90d2bbbe77cfc328a1a2cce803,958cd5f394a55c90d2bbbe77cfc328a1a2cce803,Deny EXEC under out of memory
antirez,2010-03-29 15:48:13,https://api.github.com/repos/antirez/redis/git/commits/d6cc8867b7e9d5372ff4f926a89ae9b17803df80,d6cc8867b7e9d5372ff4f926a89ae9b17803df80,No timeouts nor other commands for clients in a Pub/Sub context
antirez,2010-03-29 10:33:41,https://api.github.com/repos/antirez/redis/git/commits/ff767a758086cac8797e611d3c5e9210a563a83b,ff767a758086cac8797e611d3c5e9210a563a83b,"free hash table entries about no longer active classes, so that PUBSUB can be abused with millions of different classes"
antirez,2010-03-29 10:23:02,https://api.github.com/repos/antirez/redis/git/commits/201037f56215626ed2c96bdc589f486411b146d6,201037f56215626ed2c96bdc589f486411b146d6,Fixed a refcount stuff leading to PUBSUB crashes
antirez,2010-03-29 10:14:34,https://api.github.com/repos/antirez/redis/git/commits/de450ee9e5383a78bc0bea8e5c7c120b9160eb10,de450ee9e5383a78bc0bea8e5c7c120b9160eb10,"fmacros added to linenoise, avoiding all the nice warnings..."
antirez,2010-03-29 10:13:35,https://api.github.com/repos/antirez/redis/git/commits/fc46bb71aeeeafa24793dae49f3b63ae84a96e83,fc46bb71aeeeafa24793dae49f3b63ae84a96e83,First pubsub fix
antirez,2010-03-29 09:47:58,https://api.github.com/repos/antirez/redis/git/commits/befec3cd91bcc9b5ab470a5e3e06b78bdf1fbc36,befec3cd91bcc9b5ab470a5e3e06b78bdf1fbc36,PUBSUB implemented
antirez,2010-03-29 06:38:23,https://api.github.com/repos/antirez/redis/git/commits/cac154c58036e59be816aed3d2e54492131c4a85,cac154c58036e59be816aed3d2e54492131c4a85,Redis version is now 1.3.8
pietern,2010-03-28 21:10:01,https://api.github.com/repos/antirez/redis/git/commits/381920793346413bc34dc87a31bc4ddf501fcdf8,381920793346413bc34dc87a31bc4ddf501fcdf8,removed references in code to ZIPMAP_EMPTY
pietern,2010-03-28 21:07:32,https://api.github.com/repos/antirez/redis/git/commits/9e071b4bf489d02a4b6e307516f0376ddcf02d4d,9e071b4bf489d02a4b6e307516f0376ddcf02d4d,use first byte of zipmap to store length
pietern,2010-03-28 20:59:15,https://api.github.com/repos/antirez/redis/git/commits/43078ff844b14bb864e118d35795ddc3b3d18f00,43078ff844b14bb864e118d35795ddc3b3d18f00,implemented strategy that doesn't use free blocks in zipmaps
antirez,2010-03-26 16:08:47,https://api.github.com/repos/antirez/redis/git/commits/570e43c8285a4e5e3f31edd8198b8e03ce63f46c,570e43c8285a4e5e3f31edd8198b8e03ce63f46c,Merge branch 'hincrby' of git://github.com/pietern/redis
pietern,2010-03-26 15:45:41,https://api.github.com/repos/antirez/redis/git/commits/53476b82a1db594b9f7195726e8e32cd03d134ba,53476b82a1db594b9f7195726e8e32cd03d134ba,removed unnecessary refcount increase that caused the HINCRBY memleak
pietern,2010-03-26 15:03:19,https://api.github.com/repos/antirez/redis/git/commits/01426b054c615b58de73cd1bb418c1bd9fd1be8c,01426b054c615b58de73cd1bb418c1bd9fd1be8c,implements HINCRBY and tests (todo: find and fix small memleak)
antirez,2010-03-26 10:21:11,https://api.github.com/repos/antirez/redis/git/commits/168ac5c6e3c9bf137fcebfd55948363564cbe434,168ac5c6e3c9bf137fcebfd55948363564cbe434,Removed a useless if spotted by Pieter Noordhuis
antirez,2010-03-26 09:56:27,https://api.github.com/repos/antirez/redis/git/commits/248ea3100391e57725185a87ae77567646f76723,248ea3100391e57725185a87ae77567646f76723,Fixed a critical replication bug: binary values issued with the multi bulk protocol caused a protocol desync with slaves.
antirez,2010-03-24 20:58:34,https://api.github.com/repos/antirez/redis/git/commits/b61a28fe35232ca34632e2ad1c755e21a6eb5426,b61a28fe35232ca34632e2ad1c755e21a6eb5426,Fixed the reply about denied  write commands under maxmemory reached condition: now the error will no longer lead to a client-server protocol desync
antirez,2010-03-24 20:46:51,https://api.github.com/repos/antirez/redis/git/commits/500ece7c1721fa2d5f7cddfda23be9da70e103ee,500ece7c1721fa2d5f7cddfda23be9da70e103ee,CONFIG command implemened -- just a start but already useful
antirez,2010-03-24 10:58:38,https://api.github.com/repos/antirez/redis/git/commits/bc86d88e058d46bc65eeb1505f12f652792fe5d0,bc86d88e058d46bc65eeb1505f12f652792fe5d0,redis-cli prompt is now redis>
antirez,2010-03-23 19:04:55,https://api.github.com/repos/antirez/redis/git/commits/e940927314582b6e6260ed87e73841d69dd88f29,e940927314582b6e6260ed87e73841d69dd88f29,with --help states that you can use - as config file name to feed config via stdin
antirez,2010-03-23 18:40:13,https://api.github.com/repos/antirez/redis/git/commits/2a6a2ed102a7dc668bcddf5d0dbd58fea2af7980,2a6a2ed102a7dc668bcddf5d0dbd58fea2af7980,New INFO field: expired_keys
antirez,2010-03-23 18:15:02,https://api.github.com/repos/antirez/redis/git/commits/1763929f2379b8f4a5cb380987ff1cdb1f762f51,1763929f2379b8f4a5cb380987ff1cdb1f762f51,the Cron timer function is now called 10 times per second instead of 1 time per second to make Redis more responsibe to BGSAVE and to delete expired keys more incrementally
soveran,2010-03-23 14:25:32,https://api.github.com/repos/antirez/redis/git/commits/cf87ebf22d0a75aada2486dea17117c1e8b7072b,cf87ebf22d0a75aada2486dea17117c1e8b7072b,Use linenoise for line editing on redis-cli.
antirez,2010-03-23 11:29:35,https://api.github.com/repos/antirez/redis/git/commits/d36c4e97e5018d98b4b346db7841090d9b6f4cfc,d36c4e97e5018d98b4b346db7841090d9b6f4cfc,key deletion on empty value fix + some refactoring
antirez,2010-03-23 11:15:44,https://api.github.com/repos/antirez/redis/git/commits/3ea27d37d1e6884a9fd0640f25b937fb9fe06aed,3ea27d37d1e6884a9fd0640f25b937fb9fe06aed,Empty value trigger key removal in all the operations
antirez,2010-03-22 16:31:46,https://api.github.com/repos/antirez/redis/git/commits/44efe66ef2ff2d6ae7df7363fb1e62df3b16f4ab,44efe66ef2ff2d6ae7df7363fb1e62df3b16f4ab,"Merged gnrfan patches fixing issues 191, 193, 194"
antirez,2010-03-22 16:29:20,https://api.github.com/repos/antirez/redis/git/commits/7bf90179a32eeb7754c1a3244f6612ce780e7de4,7bf90179a32eeb7754c1a3244f6612ce780e7de4,Merge branch 'issue_193' of git://github.com/gnrfan/redis
antirez,2010-03-22 16:29:09,https://api.github.com/repos/antirez/redis/git/commits/5e2022bb484791b1b3099b7ce304f02b1f4a3212,5e2022bb484791b1b3099b7ce304f02b1f4a3212,Merge branch 'issue_191' of git://github.com/gnrfan/redis
antirez,2010-03-22 16:08:29,https://api.github.com/repos/antirez/redis/git/commits/a9c723ea1e2213f98eb46a4322d4e31af3d051c2,a9c723ea1e2213f98eb46a4322d4e31af3d051c2,Redis master version is now 1.3.7
jzawodn,2010-03-20 05:24:17,https://api.github.com/repos/antirez/redis/git/commits/b3f83f127273da21506f697e256ae010587b10f1,b3f83f127273da21506f697e256ae010587b10f1,support for include directive in config parser
antirez,2010-03-19 18:02:24,https://api.github.com/repos/antirez/redis/git/commits/aa42c9a7916e29964a565b66a2446a42f8bf483b,aa42c9a7916e29964a565b66a2446a42f8bf483b,Removed a stupid overriding of config values due to a wrong cut&paste
antirez,2010-03-19 17:02:37,https://api.github.com/repos/antirez/redis/git/commits/a97b9060923da11136798b6c0c71b2da07c0efa7,a97b9060923da11136798b6c0c71b2da07c0efa7,VM hash type swappability implemented. Handling of failed pthread_create() call.
antirez,2010-03-18 17:56:07,https://api.github.com/repos/antirez/redis/git/commits/c77169b7e992697d364e886555b613ba8ca27f83,c77169b7e992697d364e886555b613ba8ca27f83,increment server.dirty on HDEL
antirez,2010-03-18 15:55:49,https://api.github.com/repos/antirez/redis/git/commits/7b7f987e9184645f64f766b7f8f7eb02a9a69552,7b7f987e9184645f64f766b7f8f7eb02a9a69552,Redis 1.3.6
antirez,2010-03-18 02:27:08,https://api.github.com/repos/antirez/redis/git/commits/12f72a714c6266269b7c9066b7e1349c7682a8e7,12f72a714c6266269b7c9066b7e1349c7682a8e7,test-redis.tcl dataset digest function Hash support
antirez,2010-03-18 02:23:44,https://api.github.com/repos/antirez/redis/git/commits/ad6de43c800b6511ca96a2ca17848fc6582d85d0,ad6de43c800b6511ca96a2ca17848fc6582d85d0,zipmap fix for large values
antirez,2010-03-18 02:06:08,https://api.github.com/repos/antirez/redis/git/commits/db5946fc27be8721eac4c306639f94797c653074,db5946fc27be8721eac4c306639f94797c653074,Optimization fixed and re-activated
antirez,2010-03-18 01:59:28,https://api.github.com/repos/antirez/redis/git/commits/bf0da6174c71ac6032c5a97aba059c902f799297,bf0da6174c71ac6032c5a97aba059c902f799297,reverted an optimization that makes Redis not stable
antirez,2010-03-18 01:51:09,https://api.github.com/repos/antirez/redis/git/commits/288799e04addb974b85cd6c266918adc8a33964b,288799e04addb974b85cd6c266918adc8a33964b,Fixed redis-cli auth code
antirez,2010-03-17 18:26:53,https://api.github.com/repos/antirez/redis/git/commits/2a1198b4c4fd07b5e560425432fa1b2bcdaca1a1,2a1198b4c4fd07b5e560425432fa1b2bcdaca1a1,"HDEL fix, an optimization for comparison of objects in hash table lookups when they are integer encoding"
antirez,2010-03-17 17:30:15,https://api.github.com/repos/antirez/redis/git/commits/a4c507866cb091074458a0a48120a95339b350c4,a4c507866cb091074458a0a48120a95339b350c4,Version is now 1.3.5
antirez,2010-03-17 16:14:07,https://api.github.com/repos/antirez/redis/git/commits/4583c4f0ea0ef3cdb3cd1b0ede77e5b95be18327,4583c4f0ea0ef3cdb3cd1b0ede77e5b95be18327,Merged Pietern patch for VM key args helper function. Fixed an obvious bug in the redis-cli passwd auth stuff
antirez,2010-03-17 15:59:29,https://api.github.com/repos/antirez/redis/git/commits/17d68f9c99cd629591527d4c385ed0b1244726c5,17d68f9c99cd629591527d4c385ed0b1244726c5,Merge branch 'aggregates' of git://github.com/pietern/redis
antirez,2010-03-17 12:34:27,https://api.github.com/repos/antirez/redis/git/commits/a86f14b1907e72f97332c8f5f88bb97b937e64a9,a86f14b1907e72f97332c8f5f88bb97b937e64a9,HEXISTS and tests implemented
antirez,2010-03-17 11:36:27,https://api.github.com/repos/antirez/redis/git/commits/11d9d1e3b1c605f57a53e6c4ebebe68b72b93c76,11d9d1e3b1c605f57a53e6c4ebebe68b72b93c76,More hash tests
antirez,2010-03-17 01:06:56,https://api.github.com/repos/antirez/redis/git/commits/516977de15d8fba091a1d1594be47fd2d5bf6c83,516977de15d8fba091a1d1594be47fd2d5bf6c83,better HSET test
antirez,2010-03-17 01:00:03,https://api.github.com/repos/antirez/redis/git/commits/2069d06a0bb88acf17153e2ece1ffb857d11645d,2069d06a0bb88acf17153e2ece1ffb857d11645d,"Fixed a bug in HSET, a memory leak, and a theoretical bug in dict.c"
antirez,2010-03-17 00:40:05,https://api.github.com/repos/antirez/redis/git/commits/b1d9c91ca889dd2ffb72fe9829e176a8eb89d37c,b1d9c91ca889dd2ffb72fe9829e176a8eb89d37c,More Hash tests
pietern,2010-03-13 17:03:31,https://api.github.com/repos/antirez/redis/git/commits/76583ea4555ea199422f56bcafc6be76d9caac7f,76583ea4555ea199422f56bcafc6be76d9caac7f,added preloading keys from VM when using ZINTER or ZUNION
pietern,2010-03-13 22:27:22,https://api.github.com/repos/antirez/redis/git/commits/d2764cd6926fb4368ccf55f381aad7386afd5154,d2764cd6926fb4368ccf55f381aad7386afd5154,added explicit AGGREGATE [SUM|MIN|MAX] option to ZUNION/ZINTER
antirez,2010-03-16 17:44:37,https://api.github.com/repos/antirez/redis/git/commits/164ee595644b711b2fbd2248898667d8ce287c58,164ee595644b711b2fbd2248898667d8ce287c58,HGET fix for integer encoded field against zipmap encoded hash
antirez,2010-03-16 15:20:35,https://api.github.com/repos/antirez/redis/git/commits/23d8214891b28fad20fb7aba0b5d0492a8ca1e2e,23d8214891b28fad20fb7aba0b5d0492a8ca1e2e,zrevrank support in redis-cli
antirez,2010-03-16 15:09:58,https://api.github.com/repos/antirez/redis/git/commits/78409a0f84f63630ad49ba4dba4467b523bc6c55,78409a0f84f63630ad49ba4dba4467b523bc6c55,HKEYS / HVALS / HGETALL
antirez,2010-03-16 00:11:23,https://api.github.com/repos/antirez/redis/git/commits/6d4fb107b24cb4ce5c25be5c1cb3fa223a70940a,6d4fb107b24cb4ce5c25be5c1cb3fa223a70940a,Solved a memory leak with Hashes
antirez,2010-03-15 22:59:40,https://api.github.com/repos/antirez/redis/git/commits/dd88747b786a4e5f9f4135e355d0d483e991d54e,dd88747b786a4e5f9f4135e355d0d483e991d54e,pretty big refactoring
antirez,2010-03-15 21:46:20,https://api.github.com/repos/antirez/redis/git/commits/92b27fe946004935f0f29277d2a762c63af55ce3,92b27fe946004935f0f29277d2a762c63af55ce3,An interesting refactoring + more expressive internal API
antirez,2010-03-15 18:33:26,https://api.github.com/repos/antirez/redis/git/commits/653c9240b7dcb823e7bc72e6d88ffa07af481841,653c9240b7dcb823e7bc72e6d88ffa07af481841,Fixed the same problem in ZREVRANK
antirez,2010-03-15 18:33:01,https://api.github.com/repos/antirez/redis/git/commits/cc3b01c30a2acb426d93799f2f3287f27b3d7a56,cc3b01c30a2acb426d93799f2f3287f27b3d7a56,Fixed a ZRANK bug
antirez,2010-03-15 17:28:12,https://api.github.com/repos/antirez/redis/git/commits/bae2c7ec6b2a65218b6c5b3d6f434325ef58edc6,bae2c7ec6b2a65218b6c5b3d6f434325ef58edc6,zipmap to hash conversion in HSET
antirez,2010-03-14 12:58:28,https://api.github.com/repos/antirez/redis/git/commits/55a8298fcf59f235a1398bfb2207f510119de5e6,55a8298fcf59f235a1398bfb2207f510119de5e6,max zipmap entries and max zipmap value parameters added into INFO output
antirez,2010-03-14 12:54:31,https://api.github.com/repos/antirez/redis/git/commits/07efaf746766a7e4425f866062bb1a2e3d2a04b2,07efaf746766a7e4425f866062bb1a2e3d2a04b2,HDEL and some improvement in DEBUG OBJECT command
antirez,2010-03-14 12:40:41,https://api.github.com/repos/antirez/redis/git/commits/9c8e3cee262fc5b5b700027dd7b73bee00ca17d7,9c8e3cee262fc5b5b700027dd7b73bee00ca17d7,Append only file support for hashes
pietern,2010-03-13 14:55:42,https://api.github.com/repos/antirez/redis/git/commits/08af4d5c960bef772992350f64212e3942ce2d57,08af4d5c960bef772992350f64212e3942ce2d57,utility to check rdb files for unprocessable opcodes
antirez,2010-03-12 22:46:27,https://api.github.com/repos/antirez/redis/git/commits/5de9ad7c85fb114be03fe158bd5e102515dc5d5b,5de9ad7c85fb114be03fe158bd5e102515dc5d5b,A minor fix and a few debug messages removed
antirez,2010-03-12 10:38:53,https://api.github.com/repos/antirez/redis/git/commits/8c5abee892f28d9c19921971b86991b5091e8530,8c5abee892f28d9c19921971b86991b5091e8530,"Applied the replication bug patch provided by Jeremy Zawodny, removing temp file collision after the slave got the dump.rdb file in the SYNC stage"
antirez,2010-03-11 15:10:36,https://api.github.com/repos/antirez/redis/git/commits/bcd1190644d09b313544aa1b21e46357031ea95e,bcd1190644d09b313544aa1b21e46357031ea95e,"Fix for HGET against non Hash type, debug messages used to understand a bit better a corrupted rdb file"
pietern,2010-03-09 16:32:24,https://api.github.com/repos/antirez/redis/git/commits/b9eed483aecbf19643e7c8ebb5eb204305bf0828,b9eed483aecbf19643e7c8ebb5eb204305bf0828,fix: use zmalloc instead of malloc
antirez,2010-03-09 15:25:55,https://api.github.com/repos/antirez/redis/git/commits/c1d57a106345a811c91a0bf1b6fff42ccbae61a3,c1d57a106345a811c91a0bf1b6fff42ccbae61a3,Merged zsetops branch from Pietern
antirez,2010-03-09 15:22:50,https://api.github.com/repos/antirez/redis/git/commits/ee5cfe385305071ed0ab293be3ad18b13f2f9c86,ee5cfe385305071ed0ab293be3ad18b13f2f9c86,Merged ZREMBYRANK from Pietern
antirez,2010-03-09 15:19:33,https://api.github.com/repos/antirez/redis/git/commits/e3f46030fcfd0ffd916d473b16d0ed07e138fefb,e3f46030fcfd0ffd916d473b16d0ed07e138fefb,Merged ZREVRANK from Pietern
pietern,2010-03-09 15:12:34,https://api.github.com/repos/antirez/redis/git/commits/8f92e768311758bb5db1f6592a209d5eefbc40bb,8f92e768311758bb5db1f6592a209d5eefbc40bb,"use a struct to store both a dict and its weight for ZUNION and ZINTER, so qsort can be applied"
antirez,2010-03-09 12:18:49,https://api.github.com/repos/antirez/redis/git/commits/ada386b2189aabee1cf862546d14cc35a827b4e1,ada386b2189aabee1cf862546d14cc35a827b4e1,"Hash auto conversion from zipmap to hash table, type fixed for hashes, hash loading from disk"
pietern,2010-03-09 11:38:50,https://api.github.com/repos/antirez/redis/git/commits/2830ca539bf30b64ef646d08d0856f0a1cfc5cb4,2830ca539bf30b64ef646d08d0856f0a1cfc5cb4,replaced ZMERGE by ZUNION and ZINTER. note: key preloading by the VM does not yet work
antirez,2010-03-08 20:33:07,https://api.github.com/repos/antirez/redis/git/commits/b1befe6a8e4fbec81e721d1a5a0871f88411a1c9,b1befe6a8e4fbec81e721d1a5a0871f88411a1c9,Hashes saving / fixes
pietern,2010-03-08 20:27:26,https://api.github.com/repos/antirez/redis/git/commits/b287c9bb2b8e7dd0c62c2a8b9081fb41b0c035bc,b287c9bb2b8e7dd0c62c2a8b9081fb41b0c035bc,use ZMERGE as starting point
antirez,2010-03-07 22:41:48,https://api.github.com/repos/antirez/redis/git/commits/cbba7dd7c90f7b5b845d1dea86390572e5b4fa2c,cbba7dd7c90f7b5b845d1dea86390572e5b4fa2c,"HSET fixes, now the new pointer is stored back in the object pointer field"
pietern,2010-03-07 19:35:53,https://api.github.com/repos/antirez/redis/git/commits/798d9e55317d67fa694e5408dc30a61e021e8b49,798d9e55317d67fa694e5408dc30a61e021e8b49,added ZREVRANK
antirez,2010-03-06 11:08:22,https://api.github.com/repos/antirez/redis/git/commits/18e61fa2ff09418025834c58618e598030f7832c,18e61fa2ff09418025834c58618e598030f7832c,Fix for replicaiton with over 2GB dump file initial SYNC stage
antirez,2010-03-06 00:56:16,https://api.github.com/repos/antirez/redis/git/commits/978c2c944cb540827ba53ceb2301e4bd460d9591,978c2c944cb540827ba53ceb2301e4bd460d9591,first implementation of HSET/HSET. More work needed
antirez,2010-03-05 13:04:17,https://api.github.com/repos/antirez/redis/git/commits/5234952bee02ac704b6998303d45912e1bebf460,5234952bee02ac704b6998303d45912e1bebf460,"zipmaps functions to get, iterate, test for existence. Initial works for Hash data type"
antirez,2010-03-04 22:05:12,https://api.github.com/repos/antirez/redis/git/commits/b1ad58ed2fada4d7563e91a6834adcee8bffcd82,b1ad58ed2fada4d7563e91a6834adcee8bffcd82,redis-benchmark now implements Set commands benchmarks
antirez,2010-03-04 18:45:15,https://api.github.com/repos/antirez/redis/git/commits/66ef8da009f715a74f66d4759d8362161a49b919,66ef8da009f715a74f66d4759d8362161a49b919,zipmap iteration code
pietern,2010-03-04 16:55:16,https://api.github.com/repos/antirez/redis/git/commits/841053366f12c27dcd225f83c8ae7312326be32e,841053366f12c27dcd225f83c8ae7312326be32e,moved code to delete a single node from a zset to a separate function
pietern,2010-03-04 16:50:25,https://api.github.com/repos/antirez/redis/git/commits/f84d393374c03d6c80712ee5a4dbff8901756ca1,f84d393374c03d6c80712ee5a4dbff8901756ca1,rename zslDeleteRange to zslDeleteRangeByScore (to differentiate between deleting using score or rank)
pietern,2010-03-04 16:48:31,https://api.github.com/repos/antirez/redis/git/commits/2424490f9b6c139164cdcdf0f82ced3f8bd73810,2424490f9b6c139164cdcdf0f82ced3f8bd73810,use 1-based rank across zsl*Rank functions consistently
pietern,2010-03-04 11:01:45,https://api.github.com/repos/antirez/redis/git/commits/9212eafd5df14d59d7bfa1bd0f90a9f8f7c75689,9212eafd5df14d59d7bfa1bd0f90a9f8f7c75689,implemented ZREMBYRANK
antirez,2010-03-04 16:00:06,https://api.github.com/repos/antirez/redis/git/commits/94e543b5c201fb0a4582af27bf50c21ef629232b,94e543b5c201fb0a4582af27bf50c21ef629232b,A fix for initialization of augmented skip lists
antirez,2010-03-04 15:48:26,https://api.github.com/repos/antirez/redis/git/commits/ddfaca9d81cdebf4ced1cd65c42983edc052ab57,ddfaca9d81cdebf4ced1cd65c42983edc052ab57,A fix for an invalid access when VM is disabled
antirez,2010-03-04 15:43:50,https://api.github.com/repos/antirez/redis/git/commits/947efa8d6e37f38bdd8485b64f7c139d1e310e70,947efa8d6e37f38bdd8485b64f7c139d1e310e70,Merge branch 'zsl-get-rank' of git://github.com/pietern/redis
antirez,2010-03-04 15:36:30,https://api.github.com/repos/antirez/redis/git/commits/d239ec5960350367a990ff04452924d06e8ee94b,d239ec5960350367a990ff04452924d06e8ee94b,redis-cli now runs in interactive mode if no command is provided
pietern,2010-03-04 15:35:57,https://api.github.com/repos/antirez/redis/git/commits/a50ea45c841e980f7692a9cd97130f0f37e5917b,a50ea45c841e980f7692a9cd97130f0f37e5917b,merged memory reduction patch
antirez,2010-03-04 15:16:01,https://api.github.com/repos/antirez/redis/git/commits/520b5a33ae69405e0a2ea2e0bbffc5c0d781ede1,520b5a33ae69405e0a2ea2e0bbffc5c0d781ede1,"Now list push commands return the length of the new list, thanks to Gustavo Picon"
pietern,2010-03-04 13:23:59,https://api.github.com/repos/antirez/redis/git/commits/edb519581a9627ed18f309667c5d53b610a666fb,edb519581a9627ed18f309667c5d53b610a666fb,first check if starting point is trivial (head or tail) before applying log(N) search
pietern,2010-03-04 13:16:07,https://api.github.com/repos/antirez/redis/git/commits/e74825c24f134cf75e2285ecaf8d379bc8e7d28e,e74825c24f134cf75e2285ecaf8d379bc8e7d28e,use rank to find starting point for ZRANGE and ZREVRANGE
pietern,2010-03-04 12:34:50,https://api.github.com/repos/antirez/redis/git/commits/27b0ccca71251edf3bc18dec41cedb43b487fe9f,27b0ccca71251edf3bc18dec41cedb43b487fe9f,lookup rank of a zset entry in a different function
antirez,2010-03-04 12:10:50,https://api.github.com/repos/antirez/redis/git/commits/8fe7fad77180189a2a9064f98250a5b9c5818487,8fe7fad77180189a2a9064f98250a5b9c5818487,SUBSTR fix for integer encoded vals
pietern,2010-03-04 00:33:37,https://api.github.com/repos/antirez/redis/git/commits/67cac14343260a225ba8a68f2d3c503c95a2f4ae,67cac14343260a225ba8a68f2d3c503c95a2f4ae,fix ZRANK (realize that rank is 1-based due to the skip list header)
antirez,2010-03-03 22:15:52,https://api.github.com/repos/antirez/redis/git/commits/39191553755d5309e200789cedff50e031909d18,39191553755d5309e200789cedff50e031909d18,initial implementation of SUBSTR
antirez,2010-03-03 19:13:42,https://api.github.com/repos/antirez/redis/git/commits/9693e4f0f0e1b49b28e90bedc6b8ea7c8c6bb559,9693e4f0f0e1b49b28e90bedc6b8ea7c8c6bb559,TODO updated
antirez,2010-03-03 19:08:16,https://api.github.com/repos/antirez/redis/git/commits/386b43c6b31ba8c91cd5c46e23fb411542b7d71f,386b43c6b31ba8c91cd5c46e23fb411542b7d71f,fpurge call removed from redis-cli
antirez,2010-03-03 18:44:03,https://api.github.com/repos/antirez/redis/git/commits/3589e1a7e5e0de5c5f14017f3ce9907584fbbb6d,3589e1a7e5e0de5c5f14017f3ce9907584fbbb6d,ZRANK stress tester
pietern,2010-03-03 18:04:38,https://api.github.com/repos/antirez/redis/git/commits/2b37892e9b57d6d4c9d3f9a604e50cd8c15636de,2b37892e9b57d6d4c9d3f9a604e50cd8c15636de,use less memory as element->span[0] will always be 1; any level 0 skip list is essentially a linked list
pietern,2010-03-03 17:40:42,https://api.github.com/repos/antirez/redis/git/commits/912b9165a95bdf382052d409737e4ab5bc3f07fb,912b9165a95bdf382052d409737e4ab5bc3f07fb,rank is very unlikely to overflow integer range
pietern,2010-03-03 17:35:56,https://api.github.com/repos/antirez/redis/git/commits/709d0a1bbc9a10968b21b694019a78e39ef5f49f,709d0a1bbc9a10968b21b694019a78e39ef5f49f,x->backward never equals zsl->header
pietern,2010-03-03 17:20:19,https://api.github.com/repos/antirez/redis/git/commits/69d95c3e1cb1e6e306261957fba361cc45290a6d,69d95c3e1cb1e6e306261957fba361cc45290a6d,initial implementation for augmented zsets and the zrank command
antirez,2010-03-03 15:59:44,https://api.github.com/repos/antirez/redis/git/commits/cd5a96eedac0e3029966c038f845ae8bb791d681,cd5a96eedac0e3029966c038f845ae8bb791d681,zipampDel() implemented
antirez,2010-03-03 13:41:47,https://api.github.com/repos/antirez/redis/git/commits/2f4d2242ea886666e33482069d69afe6df4ed701,2f4d2242ea886666e33482069d69afe6df4ed701,added quit and exit commands to redis-cli in order to quit the interactive mode
antirez,2010-03-03 13:39:03,https://api.github.com/repos/antirez/redis/git/commits/52d23ddbea757a8a544b2e9042e008025e54c93b,52d23ddbea757a8a544b2e9042e008025e54c93b,Merge remote branch 'djanowski/interactive'
antirez,2010-03-02 16:42:22,https://api.github.com/repos/antirez/redis/git/commits/54bac49d92bcf02e9896e658ff5e72cc0adbd35d,54bac49d92bcf02e9896e658ff5e72cc0adbd35d,minor fix for a Linux warning
antirez,2010-03-01 23:57:09,https://api.github.com/repos/antirez/redis/git/commits/ed7451548a0e874ac3b2e029268655afab96b506,ed7451548a0e874ac3b2e029268655afab96b506,Better to increment the version minor number when a VM bug is fixed... it will be simpler to understand what's going on when users will report problems with the INFO trace.
antirez,2010-03-01 23:52:50,https://api.github.com/repos/antirez/redis/git/commits/ba76a8f901258bc13812072dc4065b88f2e2d4d0,ba76a8f901258bc13812072dc4065b88f2e2d4d0,Fixed a subtle VM bug... was not flushing the buffer so the child process read truncated data
antirez,2010-03-01 22:46:24,https://api.github.com/repos/antirez/redis/git/commits/a3f9eec291993853095941348e80818d91e07c5f,a3f9eec291993853095941348e80818d91e07c5f,KEYS now returns a multi bulk reply
djanowski,2010-02-28 02:36:19,https://api.github.com/repos/antirez/redis/git/commits/18b6cb7643f23c3c3d8e44dc4584167fb2b32b58,18b6cb7643f23c3c3d8e44dc4584167fb2b32b58,Add DISCARD command to discard queued MULTI commands.
antirez,2010-03-01 21:15:49,https://api.github.com/repos/antirez/redis/git/commits/c8c72447f6c9e999a17d37338e9d3460f45722f4,c8c72447f6c9e999a17d37338e9d3460f45722f4,Swappability bug due to a typo fixed thanks to code review by Felix Geisendörfer @felixge
antirez,2010-02-28 17:05:25,https://api.github.com/repos/antirez/redis/git/commits/be0af2f0ec5508eb08eac71783f61235ad065df5,be0af2f0ec5508eb08eac71783f61235ad065df5,minor fixes for zipmap.c
antirez,2010-02-27 17:13:55,https://api.github.com/repos/antirez/redis/git/commits/8ec0832157587a1d19ee0b6514c6b33d258fd51b,8ec0832157587a1d19ee0b6514c6b33d258fd51b,first zipmap fix of a long sequence in the days to come ;)
antirez,2010-02-27 17:07:46,https://api.github.com/repos/antirez/redis/git/commits/eb46f4bd7bf086089b0a48f1e2bed2aadb46d185,eb46f4bd7bf086089b0a48f1e2bed2aadb46d185,initial zipmap.c implementation
antirez,2010-02-27 11:26:08,https://api.github.com/repos/antirez/redis/git/commits/5921aa36ede343d728cb53cc7dda87defc966c2f,5921aa36ede343d728cb53cc7dda87defc966c2f,Bug #169 fixed (BLOP/BRPOP interrupted connections are not cleared from the queue)
antirez,2010-02-22 16:36:54,https://api.github.com/repos/antirez/redis/git/commits/9ebed7cf066267c0fe91f100f50c028fc4cec23f,9ebed7cf066267c0fe91f100f50c028fc4cec23f,Fixed 32bit make target to work on Linux out of the box
antirez,2010-02-19 10:23:57,https://api.github.com/repos/antirez/redis/git/commits/12d090d2d0a9ff8d2c082b97cf405a30c7126752,12d090d2d0a9ff8d2c082b97cf405a30c7126752,"A problem with replication with multiple slaves connectiong to a single master fixed. It was due to a typo, and reported on github by the user micmac. Also the copyright year fixed from many files."
antirez,2010-02-10 14:59:09,https://api.github.com/repos/antirez/redis/git/commits/ce8330208aacd63743ce706be020b5a7838f0a29,ce8330208aacd63743ce706be020b5a7838f0a29,Saner VM defaults for redis.conf
antirez,2010-02-09 13:01:49,https://api.github.com/repos/antirez/redis/git/commits/7c775e09433249e9d64c24ff92d2e5b716f5eb2d,7c775e09433249e9d64c24ff92d2e5b716f5eb2d,VM now is able to block clients on swapped keys for all the commands
antirez,2010-02-07 22:54:22,https://api.github.com/repos/antirez/redis/git/commits/223a0591927744d320460bb9269eb41f1f6f2e36,223a0591927744d320460bb9269eb41f1f6f2e36,ZCOUNT and ZRANGEBYSCORE new tests
antirez,2010-02-07 20:52:35,https://api.github.com/repos/antirez/redis/git/commits/f44dd428729064d75804c86223811badcf73716d,f44dd428729064d75804c86223811badcf73716d,"ZRANGEBYSCORE now supports open intervals, prefixing double values with a open paren. Added ZCOUNT that can count the elements inside an interval of scores, this supports open intervals too"
antirez,2010-02-07 09:32:28,https://api.github.com/repos/antirez/redis/git/commits/3a3978b10bd05d16691a0c95fa3a89741a5a68d8,3a3978b10bd05d16691a0c95fa3a89741a5a68d8,WITHSCORES in ZRANGEBYSCORE thanks to Sam Hendley
samhendley,2010-02-06 23:41:25,https://api.github.com/repos/antirez/redis/git/commits/0500ef2736d06edd9e1a2b1cfa480dcd463aa386,0500ef2736d06edd9e1a2b1cfa480dcd463aa386,"Added ""withscores"" option to zrangebyscore command. Based on withscores support in zrange function, ugliest part was the argument parsing to handle
using it with the limit option."
antirez,2010-02-06 17:53:39,https://api.github.com/repos/antirez/redis/git/commits/59146ef3c107d59b6522b8a2f5539a55703adee1,59146ef3c107d59b6522b8a2f5539a55703adee1,DEBUG OBJECT provide info about serialized object length even when VM is disabled
antirez,2010-02-06 12:39:07,https://api.github.com/repos/antirez/redis/git/commits/6766f45ef27af7f028dd71b5b1482365995bf314,6766f45ef27af7f028dd71b5b1482365995bf314,"multi bulk requests in redis-benchmark, default fsync policy changed to everysec, added a prefix character for DEBUG logs"
antirez,2010-02-04 15:38:33,https://api.github.com/repos/antirez/redis/git/commits/3c290b9b52c0db299c630cc508d2620ab3497759,3c290b9b52c0db299c630cc508d2620ab3497759,APPEND tests
antirez,2010-02-04 14:55:52,https://api.github.com/repos/antirez/redis/git/commits/4b00bebd3db6642ce0662888ff856de1fa593734,4b00bebd3db6642ce0662888ff856de1fa593734,APPEND command
antirez,2010-02-02 11:19:24,https://api.github.com/repos/antirez/redis/git/commits/ed9e4966344df0f24b0fceb0778a67789ea60ffd,ed9e4966344df0f24b0fceb0778a67789ea60ffd,"Faster version of the function hashing possibly encoded objects, leading to a general speed gain when working with Sets of integers"
antirez,2010-02-02 11:05:15,https://api.github.com/repos/antirez/redis/git/commits/3c68de9b0107a0a15eef09edf86464d1434048e7,3c68de9b0107a0a15eef09edf86464d1434048e7,faster Set loading time from .rdb file resizing the hash table to the right size before loading elements
antirez,2010-02-02 11:01:53,https://api.github.com/repos/antirez/redis/git/commits/9651a78787b922916bd390c70e9a71702939fe34,9651a78787b922916bd390c70e9a71702939fe34,"Log time taken to load the DB at startup, in seconds"
antirez,2010-01-31 15:03:44,https://api.github.com/repos/antirez/redis/git/commits/478c2c6f5bffa318d24e23519d2e4d7ea68f15fd,478c2c6f5bffa318d24e23519d2e4d7ea68f15fd,"Fixed VM corruption due to child fclosing the VM file directly or indirectly calling exit(), now replaced with _exit() in all the sensible places. Masked a few signals from IO threads."
antirez,2010-01-28 15:12:04,https://api.github.com/repos/antirez/redis/git/commits/d5d55fc3195f1c0749440c3b698c00f288513a8d,d5d55fc3195f1c0749440c3b698c00f288513a8d,loading side of the threaded VM
antirez,2010-01-26 10:02:27,https://api.github.com/repos/antirez/redis/git/commits/a544018d04a29fa9e4bb0c8bb0dc792eb50e3932,a544018d04a29fa9e4bb0c8bb0dc792eb50e3932,TODO cahnges
antirez,2010-01-23 16:55:04,https://api.github.com/repos/antirez/redis/git/commits/b72f6a4b70ef642a085f700243ebf885ca7b09f4,b72f6a4b70ef642a085f700243ebf885ca7b09f4,"Fixed memory human style memory reporting, removed server.usedmemory, now zmalloc_used_memory() is used always."
antirez,2010-01-22 17:58:11,https://api.github.com/repos/antirez/redis/git/commits/b0d8747dae8fa2dfa93b33ca036dace078edef21,b0d8747dae8fa2dfa93b33ca036dace078edef21,VM tuning thanks to redis-stat vmstat. Now it performs much better under high load
antirez,2010-01-21 15:36:32,https://api.github.com/repos/antirez/redis/git/commits/eb6845621cff10d890769fc785fd1c50ab7bd164,eb6845621cff10d890769fc785fd1c50ab7bd164,Changelog updated
antirez,2010-01-21 12:27:32,https://api.github.com/repos/antirez/redis/git/commits/f6c0bba8bc1b11fd789b0139dd86c852194ebc4c,f6c0bba8bc1b11fd789b0139dd86c852194ebc4c,"REDIS_MAX_COMPLETED_JOBS_PROCESSED is now in percentage, not number of jobs. Moved a debugging message a few lines forward as it was called where a few logged parameters where invalid, leading to a crash"
antirez,2010-01-20 21:57:00,https://api.github.com/repos/antirez/redis/git/commits/76b7233adb5c59b072209434d9a5ee795c5affa5,76b7233adb5c59b072209434d9a5ee795c5affa5,"fixed a deadlock caused by too much finished processes in queue so that I/O clients writing to the wirte side of the pipe used to awake the main thread where blocking. Then a BGSAVE started waiting for the last active thread to finish, condition impossible because all the I/O threads where blocking on threads. Takes this as a note to myself..."
antirez,2010-01-20 18:38:59,https://api.github.com/repos/antirez/redis/git/commits/621d5c1985a211662409976d7b49645cad55ea4e,621d5c1985a211662409976d7b49645cad55ea4e,"ae.c event loop does no longer support exception notifications, as they are fully pointless. Also a theoretical bug that never happens in practice fixed."
antirez,2010-01-19 18:32:36,https://api.github.com/repos/antirez/redis/git/commits/8e688711a7bcb1b13ef26002d35d555890d3cccf,8e688711a7bcb1b13ef26002d35d555890d3cccf,commercial tools stuff removed from the Redis makefile. cotools are now migrated into a different repos
antirez,2010-01-19 18:02:02,https://api.github.com/repos/antirez/redis/git/commits/970e10bb34690746ba378b0408ec37e7f7b57040,970e10bb34690746ba378b0408ec37e7f7b57040,removed a bug in the function to cancel an I/O job
antirez,2010-01-17 16:24:37,https://api.github.com/repos/antirez/redis/git/commits/33843a90aaff50805cb3c74f587d1ef204c036c4,33843a90aaff50805cb3c74f587d1ef204c036c4,static symbols update
antirez,2010-01-16 12:57:32,https://api.github.com/repos/antirez/redis/git/commits/76a41fb163b6e38845323e2b6a1269a31552c260,76a41fb163b6e38845323e2b6a1269a31552c260,removed support for REDIS_HELGRIND_FRIENDLY since Helgrind 3.5.0 is friendly enough even with many threads created and destroyed
antirez,2010-01-15 21:42:29,https://api.github.com/repos/antirez/redis/git/commits/a9158272c69ff283fbedf68dd3cb4855e69159fc,a9158272c69ff283fbedf68dd3cb4855e69159fc,now redis-cli understands -h
antirez,2010-01-15 19:02:18,https://api.github.com/repos/antirez/redis/git/commits/6fa987e390f12388e1597ab5c46f58618c859912,6fa987e390f12388e1597ab5c46f58618c859912,Create swap file only if not exists
antirez,2010-01-15 18:55:52,https://api.github.com/repos/antirez/redis/git/commits/459f52a8aadefc39bd2fe0fb75b9b29b09e1936e,459f52a8aadefc39bd2fe0fb75b9b29b09e1936e,I hate warnings
antirez,2010-01-15 18:35:13,https://api.github.com/repos/antirez/redis/git/commits/fefed5979816be8371ce106f9d98bdefc5f806da,fefed5979816be8371ce106f9d98bdefc5f806da,fixed a minor memory leak in configuration file parsing
antirez,2010-01-15 18:17:43,https://api.github.com/repos/antirez/redis/git/commits/2316bb3b428d583b88a03ad45b955d618bd320cd,2316bb3b428d583b88a03ad45b955d618bd320cd,minor fix
antirez,2010-01-15 18:14:23,https://api.github.com/repos/antirez/redis/git/commits/054e426dbd7f5d4788c68fca653e1d4819adeec0,054e426dbd7f5d4788c68fca653e1d4819adeec0,support for named VM swap file. Fixed a few important interaction issues between the background saving processes and IO threads
antirez,2010-01-15 15:37:37,https://api.github.com/repos/antirez/redis/git/commits/5f8e5d7c9e49b8633edd74dfca246a1310e9c003,5f8e5d7c9e49b8633edd74dfca246a1310e9c003,fix for the just added new test
antirez,2010-01-15 14:39:44,https://api.github.com/repos/antirez/redis/git/commits/02fcfc1e39d4d8fbe102c181152ea8699d86565b,02fcfc1e39d4d8fbe102c181152ea8699d86565b,useless debugging messages removed
antirez,2010-01-15 14:37:26,https://api.github.com/repos/antirez/redis/git/commits/7276646263e4ef39bf20ee0ee04fec5f1295eaf5,7276646263e4ef39bf20ee0ee04fec5f1295eaf5,new test added
antirez,2010-01-15 13:52:20,https://api.github.com/repos/antirez/redis/git/commits/4ad37480f3e9afb42d5957170b57f555171fb01c,4ad37480f3e9afb42d5957170b57f555171fb01c,thread safe zmalloc used memory counter
antirez,2010-01-15 10:16:12,https://api.github.com/repos/antirez/redis/git/commits/b04a5df979ef9237a5114899e9a454c4e52fb5ac,b04a5df979ef9237a5114899e9a454c4e52fb5ac,A define to make Redis more helgrind friendly
antirez,2010-01-15 10:09:18,https://api.github.com/repos/antirez/redis/git/commits/1064ef8764eaa95b21c6abeaa7f626b389327999,1064ef8764eaa95b21c6abeaa7f626b389327999,removed a few races from threaded VM
antirez,2010-01-14 22:18:27,https://api.github.com/repos/antirez/redis/git/commits/2e111efe5a8d5092a4a6d391096ff6712cf6f162,2e111efe5a8d5092a4a6d391096ff6712cf6f162,"Fixed a never experienced, theoretical bug that can actually happen in practice. Basically when a thread is working on a I/O Job we need to wait it to finish before to cancel the Job in vmCancelThreadedIOJob(), otherwise the thread may mess with an object that is being manipulated by the main thread as well."
antirez,2010-01-14 13:58:41,https://api.github.com/repos/antirez/redis/git/commits/bcaa7a4ffab113115740ec47a6d1a923a7779bdf,bcaa7a4ffab113115740ec47a6d1a923a7779bdf,Set the new threads stack size to a LZF friendly amount
antirez,2010-01-13 21:26:41,https://api.github.com/repos/antirez/redis/git/commits/427a2153d3f8509e34a8caf58612f7ed03a6d9ec,427a2153d3f8509e34a8caf58612f7ed03a6d9ec,access to already freed job structure fixed by statements reoredering
antirez,2010-01-13 18:41:38,https://api.github.com/repos/antirez/redis/git/commits/85a2775298a85b80ccaaf31082c479b7968158b1,85a2775298a85b80ccaaf31082c479b7968158b1,removed a useless debugging message
antirez,2010-01-13 18:38:30,https://api.github.com/repos/antirez/redis/git/commits/4ee9488d7ebdbb0c4e3fff6e93ce5523f4534076,4ee9488d7ebdbb0c4e3fff6e93ce5523f4534076,Wait zero active threads condition before to fork() for BGSAVE or BGREWRITEAOF
antirez,2010-01-13 18:18:07,https://api.github.com/repos/antirez/redis/git/commits/c7df85a484f6526a00f9748490600a227587b3c3,c7df85a484f6526a00f9748490600a227587b3c3,list API is now thread safe
antirez,2010-01-13 14:40:50,https://api.github.com/repos/antirez/redis/git/commits/b74880b4ed84693e484efbbb5eef0eb98c37835b,b74880b4ed84693e484efbbb5eef0eb98c37835b,minor TODO and debugging info changes
antirez,2010-01-12 20:23:52,https://api.github.com/repos/antirez/redis/git/commits/72e9fd40b63924355dd158ab552e5f339ad1f19b,72e9fd40b63924355dd158ab552e5f339ad1f19b,support for blocking VM in config file
antirez,2010-01-12 20:09:11,https://api.github.com/repos/antirez/redis/git/commits/f2d9f50f6c1ed82663e71bacef7f2c9d2cd2e7e6,f2d9f50f6c1ed82663e71bacef7f2c9d2cd2e7e6,more non blocking VM changes
antirez,2010-01-12 15:01:59,https://api.github.com/repos/antirez/redis/git/commits/d663729a127bb0985984d5c34d804862b2bdd3b1,d663729a127bb0985984d5c34d804862b2bdd3b1,fix for test #11
antirez,2010-01-12 14:57:00,https://api.github.com/repos/antirez/redis/git/commits/25fd2cb284ac12447059aa0e8ec87db9fb75f79d,25fd2cb284ac12447059aa0e8ec87db9fb75f79d,a few more stuff in INFO about VM. Test #11 changed a bit in order to be less lame
antirez,2010-01-12 12:27:54,https://api.github.com/repos/antirez/redis/git/commits/c953f24bceae51272ea9b2ef7d8f7781ea912439,c953f24bceae51272ea9b2ef7d8f7781ea912439,Added a define to configure how many completed IO jobs the handler should process at every call.
antirez,2010-01-12 00:47:18,https://api.github.com/repos/antirez/redis/git/commits/6c96ba7dfe139187988b751fa4ae24dbfbe8be4e,6c96ba7dfe139187988b751fa4ae24dbfbe8be4e,Fixed a bug in the IO Job canceling funtion
antirez,2010-01-11 22:26:58,https://api.github.com/repos/antirez/redis/git/commits/a5819310b0b92cdcd07a7f57f62f7d03d8cc58e0,a5819310b0b92cdcd07a7f57f62f7d03d8cc58e0,more steps towards a working non blocking VM
antirez,2010-01-11 18:10:43,https://api.github.com/repos/antirez/redis/git/commits/20f5b3886761a0ba963fee435bba90dd09bd5bd5,20f5b3886761a0ba963fee435bba90dd09bd5bd5,converted random printfs in debug logs
antirez,2010-01-11 17:54:29,https://api.github.com/repos/antirez/redis/git/commits/b3e3d0d78e3b74328f89697ad4f63a07e8acf373,b3e3d0d78e3b74328f89697ad4f63a07e8acf373,removed a bug introduced with non blocking VM
antirez,2010-01-11 17:45:15,https://api.github.com/repos/antirez/redis/git/commits/f11b86471486d15cc7e37b5cc4021433e0592c91,f11b86471486d15cc7e37b5cc4021433e0592c91,a few non blocking VM bugs fixed
antirez,2010-01-11 16:42:15,https://api.github.com/repos/antirez/redis/git/commits/b9bc0eefc4b56b23120a9597775bcef41277d8f7,b9bc0eefc4b56b23120a9597775bcef41277d8f7,More work on non-blocking VM. Should work in a few days
antirez,2010-01-11 10:15:54,https://api.github.com/repos/antirez/redis/git/commits/a69a0c9c3bc199a627a794e07f3449290ddb0dc8,a69a0c9c3bc199a627a794e07f3449290ddb0dc8,More threaded I/O VM work + Redis init script
antirez,2010-01-10 16:23:01,https://api.github.com/repos/antirez/redis/git/commits/996cb5f704b2b37e764d63d0889463fd8ef2b70e,996cb5f704b2b37e764d63d0889463fd8ef2b70e,more work on VM threaded I/O. Still nothing of usable
antirez,2010-01-09 17:46:52,https://api.github.com/repos/antirez/redis/git/commits/92f8e882046e8e129236ac751d9a4fdf254b022f,92f8e882046e8e129236ac751d9a4fdf254b022f,"non-blocking VM data structures, just a start"
antirez,2010-01-08 15:38:48,https://api.github.com/repos/antirez/redis/git/commits/ec6c7a1d78d4f42f78d5e006d7b1e804388088a1,ec6c7a1d78d4f42f78d5e006d7b1e804388088a1,used_memory_human added to INFO output. Human readable amount of memory used.
antirez,2010-01-07 21:51:58,https://api.github.com/repos/antirez/redis/git/commits/ace065423e275013f334ac8c40a96cb173c6897e,ace065423e275013f334ac8c40a96cb173c6897e,Now DEBUG OBJECT plays well with swapped out objects
antirez,2010-01-07 20:53:12,https://api.github.com/repos/antirez/redis/git/commits/0841cc928d4a915f7e2340023663fe30b4ea31b3,0841cc928d4a915f7e2340023663fe30b4ea31b3,fflush VM swap file after object swapping
antirez,2010-01-07 20:49:00,https://api.github.com/repos/antirez/redis/git/commits/87eaf97f1452a31e847e1be0923479f41cdcd81d,87eaf97f1452a31e847e1be0923479f41cdcd81d,added the fmacros to enable support for fseeko() lseeko() with 64bit off_t
antirez,2010-01-07 15:41:08,https://api.github.com/repos/antirez/redis/git/commits/b492cf00d8d408d1335bdef3c3f3a10ce3f45c48,b492cf00d8d408d1335bdef3c3f3a10ce3f45c48,VM now swaps objects out while loading datasets not fitting into vm-max-memory bytes of RAM
antirez,2010-01-07 13:56:57,https://api.github.com/repos/antirez/redis/git/commits/0d7170a4545d8771f64441f591f95015ba65212a,0d7170a4545d8771f64441f591f95015ba65212a,added process id information in INFO
antirez,2010-01-07 02:05:03,https://api.github.com/repos/antirez/redis/git/commits/c9e5c23d5b6eda047f4dcf6f6327628302d89a57,c9e5c23d5b6eda047f4dcf6f6327628302d89a57,vm-enabled set to no by default in redis.conf
antirez,2010-01-07 02:03:16,https://api.github.com/repos/antirez/redis/git/commits/38aba9a12124bc57567a452b1a371bf0bedd5b6e,38aba9a12124bc57567a452b1a371bf0bedd5b6e,a new default redis.conf
antirez,2010-01-07 01:14:27,https://api.github.com/repos/antirez/redis/git/commits/7d98e08c0a829acdf682c3063c975efe8297be6a,7d98e08c0a829acdf682c3063c975efe8297be6a,VM stats in INFO command
antirez,2010-01-06 14:15:17,https://api.github.com/repos/antirez/redis/git/commits/f870935d3e26fe79766f15bbaa5358c5379e390e,f870935d3e26fe79766f15bbaa5358c5379e390e,"Introduced a new log verbosity level, so now DEBUG is really for debugging. Refactored a bit maxmemory. When virtual memory is short in RAM free the objects freelist as well as swapping things out."
antirez,2010-01-06 00:51:30,https://api.github.com/repos/antirez/redis/git/commits/38823f081799b5bcdbb07fd56478f07cb865640d,38823f081799b5bcdbb07fd56478f07cb865640d,fixed a bug in bgsave when VM is off but still it was testing for obj->storage field
antirez,2010-01-06 00:44:22,https://api.github.com/repos/antirez/redis/git/commits/f2b8ab346abd82d76a749a582396b053928e57af,f2b8ab346abd82d76a749a582396b053928e57af,converted a few calls to assert() => redisAssert() to print stack trace
antirez,2010-01-06 00:15:15,https://api.github.com/repos/antirez/redis/git/commits/e7546c639301968a011265b96ea6e7f22407960e,e7546c639301968a011265b96ea6e7f22407960e,BGREWRITEAOF now works with swapping on
antirez,2010-01-05 19:25:56,https://api.github.com/repos/antirez/redis/git/commits/1b03836c0efec87eada6787f78e7a6c80cb6f70a,1b03836c0efec87eada6787f78e7a6c80cb6f70a,A first fix for SET key overwrite
antirez,2010-01-05 18:51:46,https://api.github.com/repos/antirez/redis/git/commits/7e69548dacc42f546d800e7bd50910ed951f103b,7e69548dacc42f546d800e7bd50910ed951f103b,SAVE now works with VM
antirez,2010-01-05 18:16:41,https://api.github.com/repos/antirez/redis/git/commits/e3cadb8abe3a80e141d28bca1796f4a5b661eada,e3cadb8abe3a80e141d28bca1796f4a5b661eada,swapping algorithm a bit more aggressive under low memory
antirez,2010-01-05 17:46:59,https://api.github.com/repos/antirez/redis/git/commits/4ef8de8ad74a890a31950aaf4d6b281d3beb6736,4ef8de8ad74a890a31950aaf4d6b281d3beb6736,basic VM mostly working!
antirez,2010-01-05 15:38:58,https://api.github.com/repos/antirez/redis/git/commits/d894161b850458f76284941a207ffc42fe14c7ba,d894161b850458f76284941a207ffc42fe14c7ba,New object field (one of the unused bytes) to hold the type of the swapped out value object in key objects
antirez,2010-01-05 15:34:05,https://api.github.com/repos/antirez/redis/git/commits/7d30035d477f5d97e2b491477f4b95c9bb140d6f,7d30035d477f5d97e2b491477f4b95c9bb140d6f,"VM internals bugfixes, set 1"
antirez,2010-01-05 12:28:06,https://api.github.com/repos/antirez/redis/git/commits/55cf8433e32f0e6e99cd136b289c404134143746,55cf8433e32f0e6e99cd136b289c404134143746,load key from swap on key lookup
antirez,2010-01-05 12:19:09,https://api.github.com/repos/antirez/redis/git/commits/a35ddf129c477ecced24220d0e3eb3f5c84163dd,a35ddf129c477ecced24220d0e3eb3f5c84163dd,more object-level VM primitives
antirez,2010-01-05 10:37:19,https://api.github.com/repos/antirez/redis/git/commits/3a66edc7a43c3b32de1e9f609ddcc9d2c0fd4c2b,3a66edc7a43c3b32de1e9f609ddcc9d2c0fd4c2b,Redis objects swapping / loading
antirez,2010-01-05 09:49:02,https://api.github.com/repos/antirez/redis/git/commits/c78a8ccce75319bb2f1787d8dc7e275edcc55066,c78a8ccce75319bb2f1787d8dc7e275edcc55066,"rdbLoadObject() as a separated function to load objects from disk. Dropped support for RDB version 0, I guess no longer has this legacy DBs around"
antirez,2010-01-05 00:52:08,https://api.github.com/repos/antirez/redis/git/commits/06224fec7aeda8edb617a114a94c38b2c0214026,06224fec7aeda8edb617a114a94c38b2c0214026,VM low level pages handling
antirez,2010-01-04 21:01:40,https://api.github.com/repos/antirez/redis/git/commits/75680a3c3700d40bd7d3c48b0a36cffb9922da01,75680a3c3700d40bd7d3c48b0a36cffb9922da01,"vm swap file creation, and some basic configuration"
antirez,2010-01-04 20:01:55,https://api.github.com/repos/antirez/redis/git/commits/5dc70bff2eaf59c09bdab7b81f09ff26c15df4ef,5dc70bff2eaf59c09bdab7b81f09ff26c15df4ef,version marked 1.3.2
antirez,2010-01-04 20:00:43,https://api.github.com/repos/antirez/redis/git/commits/06233c458590307d717c23b7570a102a5a08d8f7,06233c458590307d717c23b7570a102a5a08d8f7,"saving code refactored a bit, added a function returning the number of bytes an object will use on disk"
antirez,2010-01-02 15:02:24,https://api.github.com/repos/antirez/redis/git/commits/e20fb74f69e452e6e0cb4c92414d4d5a29376c6f,e20fb74f69e452e6e0cb4c92414d4d5a29376c6f,Now the PUSH side of RPOPLPUSH is able to unblock clients blocked on BLPOP
antirez,2010-01-02 14:37:01,https://api.github.com/repos/antirez/redis/git/commits/08ff05b012fbc988ae3d800262f1e5a21a9148e6,08ff05b012fbc988ae3d800262f1e5a21a9148e6,Version is now 1.3.1
antirez,2010-01-02 14:06:44,https://api.github.com/repos/antirez/redis/git/commits/b177fd30ac0409b885a6559b55e9c8d4764ac07d,b177fd30ac0409b885a6559b55e9c8d4764ac07d,New vararg BLPOP able to block against multiple keys
antirez,2009-12-30 00:11:05,https://api.github.com/repos/antirez/redis/git/commits/58d976b8e855b4ff83c7bfd910acf9c53e3e7b96,58d976b8e855b4ff83c7bfd910acf9c53e3e7b96,"fixed a problem with BLPOP timeout of zero, now it blocks forever"
antirez,2009-12-29 21:26:05,https://api.github.com/repos/antirez/redis/git/commits/f86a74e94459ab071333431a34b73e8557083426,f86a74e94459ab071333431a34b73e8557083426,BLPOP timeouts implemented
antirez,2009-12-29 21:05:56,https://api.github.com/repos/antirez/redis/git/commits/95242ab507bb55fce9ade6e07b2058d7e3b71c4b,95242ab507bb55fce9ade6e07b2058d7e3b71c4b,"first working implementation of BLPOP and BRPOP, still everything is to test well"
antirez,2009-12-29 20:50:08,https://api.github.com/repos/antirez/redis/git/commits/9fe33a0e1245a0c74628894a3a174786bf23a323,9fe33a0e1245a0c74628894a3a174786bf23a323,"a few more fixes, still broken"
antirez,2009-12-29 20:32:37,https://api.github.com/repos/antirez/redis/git/commits/2affc3ed20de01efcf9d2aecb86fbabd97666eca,2affc3ed20de01efcf9d2aecb86fbabd97666eca,"First fix, still broken"
antirez,2009-12-29 20:03:44,https://api.github.com/repos/antirez/redis/git/commits/c04c9ac94fdabe1ec2c958e2c6f9aa5d462acd80,c04c9ac94fdabe1ec2c958e2c6f9aa5d462acd80,minor fix for Linux 64 bit
antirez,2009-12-29 19:59:40,https://api.github.com/repos/antirez/redis/git/commits/4409877e19dd9b32818e75823f5264e24607eee5,4409877e19dd9b32818e75823f5264e24607eee5,not yet working BLPOP implementation
antirez,2009-12-28 01:40:11,https://api.github.com/repos/antirez/redis/git/commits/436b423e18efd213d835f83efd909de87e9fb8c6,436b423e18efd213d835f83efd909de87e9fb8c6,"AOFSYNC removed, got a better idea..."
antirez,2009-12-28 01:31:16,https://api.github.com/repos/antirez/redis/git/commits/279e33bee7ababb69e614b3d862ddd0a3e44d0cf,279e33bee7ababb69e614b3d862ddd0a3e44d0cf,AOFSYNC command implemented
antirez,2009-12-27 21:26:51,https://api.github.com/repos/antirez/redis/git/commits/7c8163b85bce72a789e2c80becd6f1596d371863,7c8163b85bce72a789e2c80becd6f1596d371863,"Version changed to 1.3.0, welcome to the new unstable"
antirez,2009-12-27 20:58:03,https://api.github.com/repos/antirez/redis/git/commits/36c548f01d25fb63536514cc8307c2b0f28ca932,36c548f01d25fb63536514cc8307c2b0f28ca932,Now MULTI returns +OK as well
antirez,2009-12-27 20:47:28,https://api.github.com/repos/antirez/redis/git/commits/6e4698826f2673a83792d02f9554812cfdac6a5f,6e4698826f2673a83792d02f9554812cfdac6a5f,MULTI/EXEC first implementation
antirez,2009-12-24 14:40:11,https://api.github.com/repos/antirez/redis/git/commits/322fc7d855d3c19f8ca95cf5d66f8111f7981a30,322fc7d855d3c19f8ca95cf5d66f8111f7981a30,"Fixed a minor bug in GETSET, now the SET part is not performed if the GET fails because the key does not contain a string value"
antirez,2009-12-23 16:15:07,https://api.github.com/repos/antirez/redis/git/commits/8fb13ce816b85ac414921ecca420671bf74a3eea,8fb13ce816b85ac414921ecca420671bf74a3eea,html doc readded
antirez,2009-12-23 16:12:01,https://api.github.com/repos/antirez/redis/git/commits/81d456450ac42b7cf78367ae3a89af1a543c9ff1,81d456450ac42b7cf78367ae3a89af1a543c9ff1,ZRANGE WITHSCORES test added
antirez,2009-12-23 16:01:31,https://api.github.com/repos/antirez/redis/git/commits/56c2735d89dd41ed2f552c4adccba63c817ed602,56c2735d89dd41ed2f552c4adccba63c817ed602,version is now 1.1.94
antirez,2009-12-23 11:23:32,https://api.github.com/repos/antirez/redis/git/commits/2c14807b2dd5c15f1471bec32a7c6dbb077720ee,2c14807b2dd5c15f1471bec32a7c6dbb077720ee,Add the command name in the unknown command error message.
antirez,2009-12-22 21:09:27,https://api.github.com/repos/antirez/redis/git/commits/752da584f016a2d27496dea655f4e20bd2ff9578,752da584f016a2d27496dea655f4e20bd2ff9578,"ZRANGE, ZREVRANGE now support WITHSCORES options"
antirez,2009-12-22 20:08:50,https://api.github.com/repos/antirez/redis/git/commits/f6bea06f74d4f065b5f8e4680792266eb97d7582,f6bea06f74d4f065b5f8e4680792266eb97d7582,html docs update (ZINCRBY added)
antirez,2009-12-18 20:49:22,https://api.github.com/repos/antirez/redis/git/commits/f0c138f61a80b7118bf78c89b5e0879a448a2d7c,f0c138f61a80b7118bf78c89b5e0879a448a2d7c,TODO list update
antirez,2009-12-18 20:39:19,https://api.github.com/repos/antirez/redis/git/commits/0447be2efe6a9fe13b69b2961b2a94cf11006c48,0447be2efe6a9fe13b69b2961b2a94cf11006c48,"the pipelining test was ran against DB 1 for error, now it runs on DB 9 like all the other tests"
antirez,2009-12-18 14:19:36,https://api.github.com/repos/antirez/redis/git/commits/98e1bb8136c263ac5982af98a2c99db3993b6d0e,98e1bb8136c263ac5982af98a2c99db3993b6d0e,still more tests
antirez,2009-12-18 14:09:18,https://api.github.com/repos/antirez/redis/git/commits/5384a2d82e71717f0d47ce0c90caedaa27b16ad3,5384a2d82e71717f0d47ce0c90caedaa27b16ad3,SORT STORE test added
antirez,2009-12-18 14:06:53,https://api.github.com/repos/antirez/redis/git/commits/d922ae6592228851d3a5b93ce9b3e22be31caddc,d922ae6592228851d3a5b93ce9b3e22be31caddc,Now SORT returns an empty bulk reply if the key does not exist
antirez,2009-12-18 12:51:23,https://api.github.com/repos/antirez/redis/git/commits/04c71068a82dfe888e3e63098227f2edb1206a5e,04c71068a82dfe888e3e63098227f2edb1206a5e,modified a bit the ZREVRANGE test to cover a few lines of code more
antirez,2009-12-18 12:31:44,https://api.github.com/repos/antirez/redis/git/commits/ac945e2dcf8cf2890c5676cc26cbd6e6d2254b14,ac945e2dcf8cf2890c5676cc26cbd6e6d2254b14,"SHUTDOWN now does the right thing when append only is on, that is, fsync instead to save the snapshot."
antirez,2009-12-18 12:13:13,https://api.github.com/repos/antirez/redis/git/commits/fdcaae84d32e284a86cabddb4298c52a8e41a9f6,fdcaae84d32e284a86cabddb4298c52a8e41a9f6,"Added a missing server.dirty increment in a non critical place, added more tests"
antirez,2009-12-18 11:56:51,https://api.github.com/repos/antirez/redis/git/commits/c632369b52992a2e1abe9cfe85e7c79e79edbf7f,c632369b52992a2e1abe9cfe85e7c79e79edbf7f,LTRIM stress testing test added
antirez,2009-12-18 11:45:26,https://api.github.com/repos/antirez/redis/git/commits/ab9d4cb1e3de4379afb175e092ff4aa44d4f72cc,ab9d4cb1e3de4379afb175e092ff4aa44d4f72cc,LTRIM now returns +OK against non existing keys. More tests in test-redis.tcl
antirez,2009-12-18 10:30:54,https://api.github.com/repos/antirez/redis/git/commits/c3a7dc32c98a7a9145b6c52399ca478ce64b727f,c3a7dc32c98a7a9145b6c52399ca478ce64b727f,added sdstoupper() declaration in sds.h
antirez,2009-12-18 10:26:11,https://api.github.com/repos/antirez/redis/git/commits/b2b5ae80065ff52a77a3b8c08a89c895d151a52f,b2b5ae80065ff52a77a3b8c08a89c895d151a52f,Fixed sds.c bug #124
antirez,2009-12-16 20:48:57,https://api.github.com/repos/antirez/redis/git/commits/b0553789719a3f47531655dab13f5def5ce35403,b0553789719a3f47531655dab13f5def5ce35403,"LZF compression re-enabled by default, but with INIT_HTAB set to 0 to avoid the very costly memset initialization. Note that with this option set valgrind will output some false positive about lzf_c.c"
antirez,2009-12-16 16:28:41,https://api.github.com/repos/antirez/redis/git/commits/121f70cfae583582f88b9623e640a59c7a7630a4,121f70cfae583582f88b9623e640a59c7a7630a4,"lzf compression switched off by default now, with config file option to enable it in redis.conf"
antirez,2009-12-16 13:40:32,https://api.github.com/repos/antirez/redis/git/commits/483049a73786894bb7e5f902b7cabb8b6cabb195,483049a73786894bb7e5f902b7cabb8b6cabb195,"Regression for epoll bug in redis-test.tcl, version is now 1.1.93"
antirez,2009-12-16 12:30:40,https://api.github.com/repos/antirez/redis/git/commits/67669f0032b27d9c434bc91b1cf5b199e9077fd2,67669f0032b27d9c434bc91b1cf5b199e9077fd2,Fixed a lame epoll issue
antirez,2009-12-15 21:31:38,https://api.github.com/repos/antirez/redis/git/commits/163f4b8cb25ca46c1482bb6b4ca9c4c9d0f15dd4,163f4b8cb25ca46c1482bb6b4ca9c4c9d0f15dd4,html doc updated
antirez,2009-12-15 21:27:13,https://api.github.com/repos/antirez/redis/git/commits/8879cbfe600cd6849f95c4bc7234f72f6e7331d4,8879cbfe600cd6849f95c4bc7234f72f6e7331d4,version is now 1.1.92
antirez,2009-12-15 18:06:41,https://api.github.com/repos/antirez/redis/git/commits/e96e4fbf159269075633f30063d254515aeb3a5f,e96e4fbf159269075633f30063d254515aeb3a5f,Two important fixes to append only file: zero length values and expires. A pretty neat new test to check consistency of randomly build datasets against snapshotting and AOF.
antirez,2009-12-15 16:15:47,https://api.github.com/repos/antirez/redis/git/commits/71c2b467b01c93726fccc0a3521343c11c92167c,71c2b467b01c93726fccc0a3521343c11c92167c,debug loadaof implemented in order to add more consistency tests in test-redis.tcl
antirez,2009-12-15 15:55:13,https://api.github.com/repos/antirez/redis/git/commits/e054afda908d6043acce66824e51a86bb9e0ba36,e054afda908d6043acce66824e51a86bb9e0ba36,Added a new test able to stress a lot the snapshotting engine
antirez,2009-12-15 14:33:29,https://api.github.com/repos/antirez/redis/git/commits/ed10f40b1520cef2fa633c94289ff9f3241bb3f6,ed10f40b1520cef2fa633c94289ff9f3241bb3f6,Unified handling of empty queries with normal queries.
antirez,2009-12-15 14:14:40,https://api.github.com/repos/antirez/redis/git/commits/7c49733ce3f550a96f60a9213911fdc9265cedc8,7c49733ce3f550a96f60a9213911fdc9265cedc8,"Fixed some subtle bug in the command processing code almost impossible to spot in the real world, thanks to gcov"
antirez,2009-12-15 09:26:51,https://api.github.com/repos/antirez/redis/git/commits/f4d9b3c62afe87f3b51f6c9279ad721a26241583,f4d9b3c62afe87f3b51f6c9279ad721a26241583,Regression test for SINTERSTORE added
antirez,2009-12-15 09:06:10,https://api.github.com/repos/antirez/redis/git/commits/0d36ded040eba3b7b6e6ed1437f4f9c0bd44fbbe,0d36ded040eba3b7b6e6ed1437f4f9c0bd44fbbe,Fixed issue #121
antirez,2009-12-14 18:48:24,https://api.github.com/repos/antirez/redis/git/commits/fc77604c47c6b8d57153349260a7a7e5b0d833b6,fc77604c47c6b8d57153349260a7a7e5b0d833b6,a few more tests and ability to run a specific test in test-redis.tcl
antirez,2009-12-13 15:52:43,https://api.github.com/repos/antirez/redis/git/commits/49b99ab43e8160feb8478ebb09db0e0db942afcf,49b99ab43e8160feb8478ebb09db0e0db942afcf,Changed the reply of BGSAVE and BGREWRITEAOF from +OK to a more meaningful message that makes the user aware of an operation that just started and is not yet finished.
antirez,2009-12-13 14:09:46,https://api.github.com/repos/antirez/redis/git/commits/179b395244456e33324e1c69c1f1e370fe31994e,179b395244456e33324e1c69c1f1e370fe31994e,"Set the master->slave logical client as authenticated on creation, so that if the slave requires a password replication works anyway"
antirez,2009-12-13 00:16:51,https://api.github.com/repos/antirez/redis/git/commits/25e52257e675f8bbba51cf4a779a4b327d7757d2,25e52257e675f8bbba51cf4a779a4b327d7757d2,TODO update
antirez,2009-12-12 21:41:10,https://api.github.com/repos/antirez/redis/git/commits/b3fad521cc3752b48fdf43c10237527ea2a99d5b,b3fad521cc3752b48fdf43c10237527ea2a99d5b,bgrewriteaof_in_progress added to INFO
antirez,2009-12-12 18:42:42,https://api.github.com/repos/antirez/redis/git/commits/3f477979b3500781481db15a03ee1fca91cc68be,3f477979b3500781481db15a03ee1fca91cc68be,TODO list modified. What's planned for 1.4 is now written in the stone ;)
antirez,2009-12-11 23:04:20,https://api.github.com/repos/antirez/redis/git/commits/61c47ecd2551a729032ff277620d3eea7c7ed080,61c47ecd2551a729032ff277620d3eea7c7ed080,better handling of non blocking connect on redis-benchmark: EPIPE on read does not print an error message now
antirez,2009-12-11 17:45:25,https://api.github.com/repos/antirez/redis/git/commits/b32627cdc10c2f3f6d08ea75b705b85d1de6b46d,b32627cdc10c2f3f6d08ea75b705b85d1de6b46d,some change to redis-sha1.rb utility to make it more robust against non-meaningful changes in the dataset
antirez,2009-12-10 18:47:12,https://api.github.com/repos/antirez/redis/git/commits/5ad3c8c852de981482afb28a8c2659456b2a8b3b,5ad3c8c852de981482afb28a8c2659456b2a8b3b,redis-sha1.rb utility updated
antirez,2009-12-10 18:35:09,https://api.github.com/repos/antirez/redis/git/commits/454d4e43b5ba15b8e79dcc1f67d5754d4faf80cb,454d4e43b5ba15b8e79dcc1f67d5754d4faf80cb,"a bit more verbose -ERR wrong number o arguments error, now gives info about the command name causing the error"
antirez,2009-12-10 15:38:24,https://api.github.com/repos/antirez/redis/git/commits/333fd216159120be0b0ce66d707fceb5e47a5aca,333fd216159120be0b0ce66d707fceb5e47a5aca,TODO change and minor SETNX optimization
antirez,2009-12-06 00:42:41,https://api.github.com/repos/antirez/redis/git/commits/231d758eecf6e492c8b40cddf4bc9e3a4dbf39cb,231d758eecf6e492c8b40cddf4bc9e3a4dbf39cb,in rdbLoadDoubleValue now the buffer is nul terminated correctly. Thanks valgrind.
antirez,2009-12-06 00:25:37,https://api.github.com/repos/antirez/redis/git/commits/83c6a61889f167d7c29c88069ada887f038985fd,83c6a61889f167d7c29c88069ada887f038985fd,printf format warnings fixed by casting
antirez,2009-12-06 00:16:12,https://api.github.com/repos/antirez/redis/git/commits/5acdc75d66b855cd621f324b1a15c48c8491366c,5acdc75d66b855cd621f324b1a15c48c8491366c,Regression tests for SETNX and MSETNX bugs added
antirez,2009-12-06 00:09:15,https://api.github.com/repos/antirez/redis/git/commits/906573e78df502bbc42084846511be77722ccf47,906573e78df502bbc42084846511be77722ccf47,SETNX and MSETNX now respect the delete-on-write operation of EXPIREing keys
antirez,2009-12-05 23:59:35,https://api.github.com/repos/antirez/redis/git/commits/71c54b21e261536579d350771d13157afeeb84c6,71c54b21e261536579d350771d13157afeeb84c6,Fixed daemonization when using kqueue/kevent. Now the server initialization is performed *after* the daemonization
antirez,2009-12-05 18:35:15,https://api.github.com/repos/antirez/redis/git/commits/76d31044d44c7adb4af71dd273b52ec9a4768e17,76d31044d44c7adb4af71dd273b52ec9a4768e17,more HTML doc changes
antirez,2009-12-05 15:58:10,https://api.github.com/repos/antirez/redis/git/commits/43f30ac0f9bcc4a7afb06136a8dfe5b703be7935,43f30ac0f9bcc4a7afb06136a8dfe5b703be7935,HTML doc update
antirez,2009-12-05 13:26:05,https://api.github.com/repos/antirez/redis/git/commits/570333015147ce01646ff61e50afc210a12408db,570333015147ce01646ff61e50afc210a12408db,a few redis-cli format specified fixed
antirez,2009-12-05 12:50:36,https://api.github.com/repos/antirez/redis/git/commits/682ac7248a11ae7bf0e8d935c3ec13177500484e,682ac7248a11ae7bf0e8d935c3ec13177500484e,use __attribute__ format in sdscatprintf() when the compiler is GCC. Fixed format bugs resulting from the new warnings.
antirez,2009-12-01 18:37:43,https://api.github.com/repos/antirez/redis/git/commits/09f6f7020952cd93e178da11e66e36f8a98398d1,09f6f7020952cd93e178da11e66e36f8a98398d1,TODO update
antirez,2009-12-01 10:53:00,https://api.github.com/repos/antirez/redis/git/commits/da0a1620771c54bb67cdef46dae40f005133b8d1,da0a1620771c54bb67cdef46dae40f005133b8d1,compilation problem on 64bit mac os x 10.5 possibly fixed
antirez,2009-12-01 00:52:32,https://api.github.com/repos/antirez/redis/git/commits/380bf0802a7d30381588993f0b3cb153d5d923c5,380bf0802a7d30381588993f0b3cb153d5d923c5,virtual memory design doc typos
antirez,2009-12-01 00:47:58,https://api.github.com/repos/antirez/redis/git/commits/9c21a518c3cd29bbaa27a66821105665dae82562,9c21a518c3cd29bbaa27a66821105665dae82562,design documents added to the project
antirez,2009-11-30 19:25:06,https://api.github.com/repos/antirez/redis/git/commits/dfc5e96ce55aacc4ed798fcc70b52a7509f76541,dfc5e96ce55aacc4ed798fcc70b52a7509f76541,"Fixed issued #85 (getDecodedObject: Assertion 1 != 1 failed. While sorting a set), added a smarter assert() function to dump the stacktrace, provided a macro to initalize Redis objects on the stack to avoid this kind of bugs."
antirez,2009-11-30 18:26:52,https://api.github.com/repos/antirez/redis/git/commits/e17e0b0529eda98156f988c907789f08299c2f7e,e17e0b0529eda98156f988c907789f08299c2f7e,fixed a subtle bug in redis-cli not having visible effects
antirez,2009-11-29 11:09:31,https://api.github.com/repos/antirez/redis/git/commits/0188805dd61eb9791be0c77b5010d4c38b296ce1,0188805dd61eb9791be0c77b5010d4c38b296ce1,TODO updated
antirez,2009-11-29 09:44:25,https://api.github.com/repos/antirez/redis/git/commits/d07ffa178d913a6c5a82f822a4c5b55535bcfda3,d07ffa178d913a6c5a82f822a4c5b55535bcfda3,"Version chagned to 1.100, also known as the first first 2.0 beta version"
antirez,2009-11-29 09:29:08,https://api.github.com/repos/antirez/redis/git/commits/0b13687c25eda63a06296215f2da950f567801be,0b13687c25eda63a06296215f2da950f567801be,"more tests in test-redis.tcl, some minor fix"
antirez,2009-11-29 09:10:35,https://api.github.com/repos/antirez/redis/git/commits/a5eb649bfad4b66168feddb6729b75e266b04f44,a5eb649bfad4b66168feddb6729b75e266b04f44,SORT support for sorted sets
antirez,2009-11-28 21:01:13,https://api.github.com/repos/antirez/redis/git/commits/80181f7848a26f6763d1d106e2b91dff9b53bfc8,80181f7848a26f6763d1d106e2b91dff9b53bfc8,Implemented LIMIT option in ZRANGEBYSCORE. We now enter feature-freeze
antirez,2009-11-28 20:00:16,https://api.github.com/repos/antirez/redis/git/commits/d799af3119abb90ebf4b918ccc2da373751870ab,d799af3119abb90ebf4b918ccc2da373751870ab,Changelog updated
antirez,2009-11-28 19:59:06,https://api.github.com/repos/antirez/redis/git/commits/924aa408b99837036b679bd3895f836af6bc763f,924aa408b99837036b679bd3895f836af6bc763f,html doc updated
antirez,2009-11-28 19:48:53,https://api.github.com/repos/antirez/redis/git/commits/37be27653817f0c4c18d695ceea082e0bb7bf462,37be27653817f0c4c18d695ceea082e0bb7bf462,enable kqueue/kevent only for Mac OS X 10.6.x as it seems that 10.5.x has a broken implementation of this syscalls.
antirez,2009-11-28 17:19:48,https://api.github.com/repos/antirez/redis/git/commits/03a37888f6581ec46d5eaee8c77b18b7926d2ca3,03a37888f6581ec46d5eaee8c77b18b7926d2ca3,TODO updated
antirez,2009-11-28 17:19:11,https://api.github.com/repos/antirez/redis/git/commits/5b1207c63f235df510547901982a9883ca394f24,5b1207c63f235df510547901982a9883ca394f24,ZRANGEBYSCORE fuzzy test
antirez,2009-11-28 17:03:09,https://api.github.com/repos/antirez/redis/git/commits/c74e7c775789392f65e4b3cc6b5a7d52ab94053f,c74e7c775789392f65e4b3cc6b5a7d52ab94053f,"ZRANGEBYSCORE memory leak fixed, ZRANGEBYSCORE initial test added"
antirez,2009-11-28 16:13:32,https://api.github.com/repos/antirez/redis/git/commits/1c85b79fefe9e2e1f1eff2b419ba43c0a215689b,1c85b79fefe9e2e1f1eff2b419ba43c0a215689b,INFO refactored. Stack trace on memory corruption now dumps the same information as the INFO command
antirez,2009-11-28 16:06:28,https://api.github.com/repos/antirez/redis/git/commits/7a932b74cc22097655d6792f64cab66bb0fe1694,7a932b74cc22097655d6792f64cab66bb0fe1694,ifdefs added to use kevent on Free Open and Net BSD as well. INFO and ae.c modified in order to report the multiplexing API in use
antirez,2009-11-28 15:55:05,https://api.github.com/repos/antirez/redis/git/commits/1751139117cc37f17051fdc55c0fe00c5da2043d,1751139117cc37f17051fdc55c0fe00c5da2043d,Enabled object encoding for multiple keys in MSET. Added a test for memory leaks in test-redis.tcl when running on Mac OS X
antirez,2009-11-28 14:44:02,https://api.github.com/repos/antirez/redis/git/commits/791445b7459183d839e20672e20d246dea895213,791445b7459183d839e20672e20d246dea895213,Merge branch 'kqueue' of git://github.com/mallipeddi/redis
antirez,2009-11-28 14:31:40,https://api.github.com/repos/antirez/redis/git/commits/1fd9bc8adc3ae42e7e33564d6f76d76f89dfb78b,1fd9bc8adc3ae42e7e33564d6f76d76f89dfb78b,"Changes to TODO list, commented a function in redis.c"
mallipeddi,2009-11-28 13:46:21,https://api.github.com/repos/antirez/redis/git/commits/f3053eb0eb704dea7ff39f389f344a37e3985aab,f3053eb0eb704dea7ff39f389f344a37e3985aab,Added support for kqueue.
antirez,2009-11-27 21:49:38,https://api.github.com/repos/antirez/redis/git/commits/2014c4377d73b0f3b93537558e5211e9f745831d,2014c4377d73b0f3b93537558e5211e9f745831d,TODO updated
antirez,2009-11-26 18:18:52,https://api.github.com/repos/antirez/redis/git/commits/0f151ef1a032e7065e156e4e2481efa9d4230717,0f151ef1a032e7065e156e4e2481efa9d4230717,zero length bulk data reading fixed in loadAppendOnlyFile()
antirez,2009-11-26 18:03:32,https://api.github.com/repos/antirez/redis/git/commits/85a831729fc5d38370b304dffee0fa381e27de42,85a831729fc5d38370b304dffee0fa381e27de42,append only file fixes
antirez,2009-11-26 17:10:02,https://api.github.com/repos/antirez/redis/git/commits/9d65a1bbae9e59269472e8067cb2fff1e1cce24c,9d65a1bbae9e59269472e8067cb2fff1e1cce24c,"log rebuilding, random refactoring, work in progress please wait for an OK commit before to use this version"
antirez,2009-11-24 20:44:20,https://api.github.com/repos/antirez/redis/git/commits/210e29f7d276be1bbbaf1b711b654dd6834f8e93,210e29f7d276be1bbbaf1b711b654dd6834f8e93,"DEBUG RELOAD implemented, and test-redis.tcl modified to use it to check for persistence consistency."
antirez,2009-11-24 20:29:08,https://api.github.com/repos/antirez/redis/git/commits/1c0abf3c5d4aab9236f8e6bd53f3255bf0fc7b3b,1c0abf3c5d4aab9236f8e6bd53f3255bf0fc7b3b,Redis version set to 1.07
antirez,2009-11-24 16:52:46,https://api.github.com/repos/antirez/redis/git/commits/6c446631dac7a7fe9e34b18392d4a8498c8c9bc3,6c446631dac7a7fe9e34b18392d4a8498c8c9bc3,sorted sets saving fixed
antirez,2009-11-24 12:47:26,https://api.github.com/repos/antirez/redis/git/commits/f284d963e7578a5ab4ce0b252449e2e35a3b54ea,f284d963e7578a5ab4ce0b252449e2e35a3b54ea,minor TODO change
antirez,2009-11-23 23:18:57,https://api.github.com/repos/antirez/redis/git/commits/214d880b815242fa419aa3a39411d42025566521,214d880b815242fa419aa3a39411d42025566521,minor fix to avoid a false valgrind warning.
antirez,2009-11-23 22:57:04,https://api.github.com/repos/antirez/redis/git/commits/7785121a503438cf6d72f16ba0149cad8ae26e42,7785121a503438cf6d72f16ba0149cad8ae26e42,epoll support enabled by default for Linux builds
antirez,2009-11-23 22:40:27,https://api.github.com/repos/antirez/redis/git/commits/64f36a5836c8c375247ca0623712a35f80c6cfb2,64f36a5836c8c375247ca0623712a35f80c6cfb2,epoll module for ae.c implemented. Some more testing needed
antirez,2009-11-23 17:55:35,https://api.github.com/repos/antirez/redis/git/commits/fb6a19677819cb2e35723bb5565a603cb069f461,fb6a19677819cb2e35723bb5565a603cb069f461,commented the HAVE_EPOLL test in config.h to allow compilation under Linux now that the epoll module is still missing
antirez,2009-11-23 17:52:25,https://api.github.com/repos/antirez/redis/git/commits/a51dcb8b7f63637f83e48f55c327e46ae6ac9269,a51dcb8b7f63637f83e48f55c327e46ae6ac9269,ae_select module added
antirez,2009-11-23 17:50:39,https://api.github.com/repos/antirez/redis/git/commits/266373b2834efa11b83e681bb211a0cd6c922eaa,266373b2834efa11b83e681bb211a0cd6c922eaa,"ae.c now supports multiple polling API modules, even if only ae_select.c is implemented currently. Also adding and removing an event is now O(1)."
antirez,2009-11-23 11:00:23,https://api.github.com/repos/antirez/redis/git/commits/5b2a1c292ac20d84ae2202bc21759a2f06b8041f,5b2a1c292ac20d84ae2202bc21759a2f06b8041f,ae.c initial refactoring for epoll implementation
antirez,2009-11-21 15:40:08,https://api.github.com/repos/antirez/redis/git/commits/a96ffc6641ae91e1291e30a4af7570d6aa0c5945,a96ffc6641ae91e1291e30a4af7570d6aa0c5945,version incremented up to 1.06
antirez,2009-11-21 13:16:45,https://api.github.com/repos/antirez/redis/git/commits/c35f7d5b8dbbecc41baa2afc14b4ddbdb3d337f3,c35f7d5b8dbbecc41baa2afc14b4ddbdb3d337f3,TODO aesthetic changes
antirez,2009-11-21 13:13:50,https://api.github.com/repos/antirez/redis/git/commits/7d65b33db7235971b2318518cc4ee93da0659d8c,7d65b33db7235971b2318518cc4ee93da0659d8c,TODO updated with plans up to 1.5
antirez,2009-11-21 12:56:17,https://api.github.com/repos/antirez/redis/git/commits/6cbfd2b3d900973a410d4a2fc02843ce23b501ed,6cbfd2b3d900973a410d4a2fc02843ce23b501ed,SRANDMEMBER test
antirez,2009-11-21 12:46:34,https://api.github.com/repos/antirez/redis/git/commits/ed5a857a6dc0eab237c979622a3dba23e4873203,ed5a857a6dc0eab237c979622a3dba23e4873203,Fixed a SORT memory leak that should never happen in practice
antirez,2009-11-21 12:25:51,https://api.github.com/repos/antirez/redis/git/commits/28173a49a7f6c8d5850f70c26874f3cba6f64941,28173a49a7f6c8d5850f70c26874f3cba6f64941,"SORT GET # implemented, with a test"
antirez,2009-11-21 10:15:12,https://api.github.com/repos/antirez/redis/git/commits/5446315f29fd5eed3aaa2a16a9bcc8f882d67e8c,5446315f29fd5eed3aaa2a16a9bcc8f882d67e8c,EXPIREAT test
antirez,2009-11-20 13:36:32,https://api.github.com/repos/antirez/redis/git/commits/b9febaab5dcc11f8288fa67c6168222cf7de11b0,b9febaab5dcc11f8288fa67c6168222cf7de11b0,EXPIRE tests
antirez,2009-11-20 13:27:09,https://api.github.com/repos/antirez/redis/git/commits/b9bb7ba22077ed7bf585506d889d0771ba2383da,b9bb7ba22077ed7bf585506d889d0771ba2383da,more RPOPLPUSH tests
antirez,2009-11-20 12:57:41,https://api.github.com/repos/antirez/redis/git/commits/c08f173487ca9e4a24b652e0e1c5391f8b5b8bd2,c08f173487ca9e4a24b652e0e1c5391f8b5b8bd2,RPOPLPUSH tests added
antirez,2009-11-20 10:22:20,https://api.github.com/repos/antirez/redis/git/commits/91d71bfc796cb27cf71043df504e0d84d6e1d31d,91d71bfc796cb27cf71043df504e0d84d6e1d31d,ZINCRBY return value fixed
antirez,2009-11-20 08:18:40,https://api.github.com/repos/antirez/redis/git/commits/7db723adb22bb98f3c3ca5bf4c35636ee75b25ba,7db723adb22bb98f3c3ca5bf4c35636ee75b25ba,ZINCRSCOREBY => ZINCRBY
antirez,2009-11-19 18:48:46,https://api.github.com/repos/antirez/redis/git/commits/e2665397a7d9bcac9f864aee473737eb4c74e24a,e2665397a7d9bcac9f864aee473737eb4c74e24a,ZINCRSCOREBY implemented
antirez,2009-11-19 18:04:54,https://api.github.com/repos/antirez/redis/git/commits/37f68e61024151b1a7461910fe1fcef887b0900b,37f68e61024151b1a7461910fe1fcef887b0900b,writev() finally uncommented again
antirez,2009-11-19 17:44:18,https://api.github.com/repos/antirez/redis/git/commits/b892cabed4079de8a1c6ac18041e3ea835c80300,b892cabed4079de8a1c6ac18041e3ea835c80300,redis-benchmark hopefully last bug with multi bulk reply fixed
antirez,2009-11-19 12:08:54,https://api.github.com/repos/antirez/redis/git/commits/58cd710344c2a18c6d55895dc960cd141109c5a8,58cd710344c2a18c6d55895dc960cd141109c5a8,debug mode in redis-bench
antirez,2009-11-19 10:46:28,https://api.github.com/repos/antirez/redis/git/commits/7ea870c09205c93b6e0677ad466bf46a6f11a9ea,7ea870c09205c93b6e0677ad466bf46a6f11a9ea,Use writev(2) if glue output buffers is disabled
antirez,2009-11-19 09:42:19,https://api.github.com/repos/antirez/redis/git/commits/89ee361eeffe6c117a9edb19e8468c44b394ee31,89ee361eeffe6c117a9edb19e8468c44b394ee31,benchmark.c fixes
antirez,2009-11-18 19:32:03,https://api.github.com/repos/antirez/redis/git/commits/c28b42acd9b32c8888d7265adc528ded7a787919,c28b42acd9b32c8888d7265adc528ded7a787919,"more experiments with long replies, glue output buffer, and writev."
antirez,2009-11-18 18:41:25,https://api.github.com/repos/antirez/redis/git/commits/cc30e368a3fd049bd5ffaa83f16cbac557d8279d,cc30e368a3fd049bd5ffaa83f16cbac557d8279d,benchmarking with different number of LRANGE elements. Ability to change the glue output buffer limit by #define
antirez,2009-11-18 18:02:20,https://api.github.com/repos/antirez/redis/git/commits/ccb5332c5e6644a56b2af1ba3248f882d4f1bb60,ccb5332c5e6644a56b2af1ba3248f882d4f1bb60,more writev tests/work
antirez,2009-11-18 17:47:05,https://api.github.com/repos/antirez/redis/git/commits/6c4e61b389bc9a9ce909e3ee6addb5ef6fddcf39,6c4e61b389bc9a9ce909e3ee6addb5ef6fddcf39,redis-benchmark multi bulk reply support hopefully fixed
antirez,2009-11-17 16:46:44,https://api.github.com/repos/antirez/redis/git/commits/2895e8626734136583c37ce6d4c7c76809d0d872,2895e8626734136583c37ce6d4c7c76809d0d872,support for writev implemented but currently ifdef-ed in order to understan why I can't see the improvements expected. Btw code provided by Stefano Barbato
antirez,2009-11-17 15:57:35,https://api.github.com/repos/antirez/redis/git/commits/2fd309522d22ea518a496cf203e77505ec35aaf1,2fd309522d22ea518a496cf203e77505ec35aaf1,"multi-bulk reply support for redis-bench, and as a result LRANGE is not tested, providing some number for the tuning of multi-bulk requests performances server-side"
antirez,2009-11-12 20:49:15,https://api.github.com/repos/antirez/redis/git/commits/ef3ac64a27519c65370fbe6877c514e58a29d644,ef3ac64a27519c65370fbe6877c514e58a29d644,Solaris fix thanks to Alan Harder
antirez,2009-11-12 20:40:34,https://api.github.com/repos/antirez/redis/git/commits/51e01d9b39127eb278957f0c7f122e43a8f830e0,51e01d9b39127eb278957f0c7f122e43a8f830e0,Merge git://github.com/ianxm/redis
antirez,2009-11-12 20:35:05,https://api.github.com/repos/antirez/redis/git/commits/96d8b4eeba2503c9f679e41963220a72ee5baeda,96d8b4eeba2503c9f679e41963220a72ee5baeda,"ZSCORE fixed, now returns NULL on missing key or missing element"
antirez,2009-11-12 10:36:51,https://api.github.com/repos/antirez/redis/git/commits/bbf44ecf1b33196a8302152a37fe10df2bbb359d,bbf44ecf1b33196a8302152a37fe10df2bbb359d,Redis test will not fail the SAVE test even if a background save is in progress
antirez,2009-11-12 10:21:26,https://api.github.com/repos/antirez/redis/git/commits/0f5f7e9a82e24a875023af703a89a72d5c7fe411,0f5f7e9a82e24a875023af703a89a72d5c7fe411,LPOPPUSH renamed into RPOPLPUSH
antirez,2009-11-11 22:42:31,https://api.github.com/repos/antirez/redis/git/commits/405b0a6aa5aab15c50fee38459d354a0fe27a47b,405b0a6aa5aab15c50fee38459d354a0fe27a47b,Workaround for test-redis.tcl and Tcl 8.4.x about ZSCORE test
antirez,2009-11-11 18:59:54,https://api.github.com/repos/antirez/redis/git/commits/fee803ba3eeb9a902e3e8ac27812cc9b2eba970b,fee803ba3eeb9a902e3e8ac27812cc9b2eba970b,Removed a long time warning compiling with recent GCC on Linux
antirez,2009-11-11 18:01:52,https://api.github.com/repos/antirez/redis/git/commits/a81885d9ea995d8dcf0940e544a2480f2afbd3f1,a81885d9ea995d8dcf0940e544a2480f2afbd3f1,TODO updated
antirez,2009-11-11 17:38:37,https://api.github.com/repos/antirez/redis/git/commits/12f9d551b60e5471baa70b6aa2237bf25d25f70a,12f9d551b60e5471baa70b6aa2237bf25d25f70a,LPUSHPOP first implementation
antirez,2009-11-10 18:20:32,https://api.github.com/repos/antirez/redis/git/commits/bcfc686db7351a4489d135d2fb0544fb6ee8dad9,bcfc686db7351a4489d135d2fb0544fb6ee8dad9,"Tcl script, make target, and redis.c changes to build the static symbol table automagically"
antirez,2009-11-10 16:48:01,https://api.github.com/repos/antirez/redis/git/commits/f23242938637c5c72f5a8104976a3f7764d66203,f23242938637c5c72f5a8104976a3f7764d66203,Implemented a much better lazy expiring algorithm for EXPIRE
antirez,2009-11-10 09:26:09,https://api.github.com/repos/antirez/redis/git/commits/060f6be6bf2976bad5bd6007d21e7e6ff081c92b,060f6be6bf2976bad5bd6007d21e7e6ff081c92b,Fixed issue 92 in redis: redis-cli (nil) return value lacks CR/LF
antirez,2009-11-10 01:02:30,https://api.github.com/repos/antirez/redis/git/commits/bf75f580c91645e02fb017d13a33d330ac3a8f1e,bf75f580c91645e02fb017d13a33d330ac3a8f1e,Minor TODO change with new expiring algorithm description. New expiring algorithm moved since it'll go in 1.1
antirez,2009-11-04 11:26:57,https://api.github.com/repos/antirez/redis/git/commits/eea4baf70d42500c574fc4ac23467a03bb79bb16,eea4baf70d42500c574fc4ac23467a03bb79bb16,"redis-test is now a better Redis citizen, testing everything against DB 9 and 10 and only if this DBs are empty."
antirez,2009-11-04 08:53:43,https://api.github.com/repos/antirez/redis/git/commits/d0ccebcf46a2f726117b05f2a317b0a5e7113cae,d0ccebcf46a2f726117b05f2a317b0a5e7113cae,"masterauth option merged, thanks to Anthony Lauzon"
antirez,2009-11-03 13:36:38,https://api.github.com/repos/antirez/redis/git/commits/eaa256ad256e385f6f448df6c162ff14f4d2956b,eaa256ad256e385f6f448df6c162ff14f4d2956b,ZSets double to string serialization fixed
antirez,2009-11-03 11:05:13,https://api.github.com/repos/antirez/redis/git/commits/9155ea9c710f9ba481ac2c65a6a354a90eac8442,9155ea9c710f9ba481ac2c65a6a354a90eac8442,client-libraries directory readded
antirez,2009-11-03 10:28:37,https://api.github.com/repos/antirez/redis/git/commits/f89c3a3500e0f62688ab3ee649002601844b1592,f89c3a3500e0f62688ab3ee649002601844b1592,redis.tcl put at toplevel since it's uesd for the test-redis.tcl script
antirez,2009-11-03 10:25:32,https://api.github.com/repos/antirez/redis/git/commits/1259672feb4fcad189d413a341745990a844feda,1259672feb4fcad189d413a341745990a844feda,client libs removed from Redis git
antirez,2009-11-03 00:35:39,https://api.github.com/repos/antirez/redis/git/commits/5762b7f0f8d33eda021da908b6ddced684a2ba05,5762b7f0f8d33eda021da908b6ddced684a2ba05,redis-cli now accepts a -r (repeat) switch. Still there is a memory leaks to fix
antirez,2009-11-01 14:47:40,https://api.github.com/repos/antirez/redis/git/commits/cdd140aa67be01a994dbb001e050f3dd2b0578ee,cdd140aa67be01a994dbb001e050f3dd2b0578ee,TODO updated again
antirez,2009-11-01 14:46:55,https://api.github.com/repos/antirez/redis/git/commits/cf4a492cd2653094d45c0f1a2289c3474275e6ac,cf4a492cd2653094d45c0f1a2289c3474275e6ac,TODO updated
antirez,2009-11-01 14:31:54,https://api.github.com/repos/antirez/redis/git/commits/e2aba0f9ec23d00610b315f8163d7a0ec255c370,e2aba0f9ec23d00610b315f8163d7a0ec255c370,redis-cli now makes clear when the returned string is an integer
antirez,2009-11-01 14:29:38,https://api.github.com/repos/antirez/redis/git/commits/443c6409c326792514ced7a6c68a7f44c47898f7,443c6409c326792514ced7a6c68a7f44c47898f7,SORT STORE option
antirez,2009-11-01 13:14:02,https://api.github.com/repos/antirez/redis/git/commits/d8f8b666f451a2116c93ec4ff6207d9ca013855e,d8f8b666f451a2116c93ec4ff6207d9ca013855e,now Redis prints DB stats just after the startup without to wait a second for the first report
antirez,2009-11-01 12:43:34,https://api.github.com/repos/antirez/redis/git/commits/33ed1a426da493b4fd5a6a177007d38d7e1c6770,33ed1a426da493b4fd5a6a177007d38d7e1c6770,"another fix for append only mode, now read-only operations are not appended"
antirez,2009-11-01 10:55:46,https://api.github.com/repos/antirez/redis/git/commits/1766c6dadce7dd59f3f272d8cc21a4ce52c3f561,1766c6dadce7dd59f3f272d8cc21a4ce52c3f561,appendfsync parsing in config file fixed. If you benchmarked Redis against different appendfsync options is time to try again ;)
antirez,2009-11-01 10:05:50,https://api.github.com/repos/antirez/redis/git/commits/9387d17dfeb757d685236ff5c792d102ea296631,9387d17dfeb757d685236ff5c792d102ea296631,append only file loading fixed
antirez,2009-11-01 09:54:55,https://api.github.com/repos/antirez/redis/git/commits/f80dff6212661a404c7c32c6741691b6255a4e31,f80dff6212661a404c7c32c6741691b6255a4e31,first version of append only file loading -- STILL BROKEN don't use it
antirez,2009-10-31 22:03:10,https://api.github.com/repos/antirez/redis/git/commits/412a8bcea3e2329ee255174d68b6760416cc3a59,412a8bcea3e2329ee255174d68b6760416cc3a59,Fixed Issue 83:Using TYPE on a zset results in a malformed response from the Redis server
antirez,2009-10-31 13:32:01,https://api.github.com/repos/antirez/redis/git/commits/71eba4775d886fe85337560e2103680390ed2cdd,71eba4775d886fe85337560e2103680390ed2cdd,Fixed compilation on Linux
antirez,2009-10-30 16:20:24,https://api.github.com/repos/antirez/redis/git/commits/4e141d5a21626a43ad61c91f2baddffdaf01fcb1,4e141d5a21626a43ad61c91f2baddffdaf01fcb1,append only mode is now able to translate EXPIRE into EXPIREAT transparently
antirez,2009-10-30 15:35:16,https://api.github.com/repos/antirez/redis/git/commits/0154acdc57bd73f0a7f8afe2cecc890679ee97ff,0154acdc57bd73f0a7f8afe2cecc890679ee97ff,appendfsync is now set to NO by default
antirez,2009-10-30 12:48:53,https://api.github.com/repos/antirez/redis/git/commits/48f0308ad327d3bf4a89c1fc1ca977b7ed6f0f96,48f0308ad327d3bf4a89c1fc1ca977b7ed6f0f96,"support for appendonly mode no, always, everysec"
antirez,2009-10-30 00:11:29,https://api.github.com/repos/antirez/redis/git/commits/16f9254761332a0f939cb145529d8ce5d55262a5,16f9254761332a0f939cb145529d8ce5d55262a5,first fix for append only mode
antirez,2009-10-30 00:04:17,https://api.github.com/repos/antirez/redis/git/commits/44b38ef43259e8805b01db01ad9a1c67479c6194,44b38ef43259e8805b01db01ad9a1c67479c6194,Initial implementation of append-only mode. Loading still not implemented.
antirez,2009-10-29 23:21:04,https://api.github.com/repos/antirez/redis/git/commits/43e5ccdf57e2144a8a43c04c5a64e91a155a78fb,43e5ccdf57e2144a8a43c04c5a64e91a155a78fb,"EXPIRE behaviour changed a bit, a negative TTL or an EXPIREAT with unix time in the past will now delete the key. It seems saner to me than doing nothing."
antirez,2009-10-29 23:15:45,https://api.github.com/repos/antirez/redis/git/commits/802e8373735c2708029f03b4b46ecc0e0ee50a1d,802e8373735c2708029f03b4b46ecc0e0ee50a1d,"EXPIREAT implemented, will be useful for the append-only mode"
antirez,2009-10-29 10:43:40,https://api.github.com/repos/antirez/redis/git/commits/fa4c0aba85fca17e2526831d1afa530724479ed5,fa4c0aba85fca17e2526831d1afa530724479ed5,"Fixed Issue 74 (ERR just returned on invalid password), now the error message is -ERR invalid password."
antirez,2009-10-29 10:38:32,https://api.github.com/repos/antirez/redis/git/commits/4aa701c11aae2b645583e78a808452ae7e1918da,4aa701c11aae2b645583e78a808452ae7e1918da,Fixed issue 72 (SLAVEOF shutdowns redis-server on malformed reply)
antirez,2009-10-29 10:31:55,https://api.github.com/repos/antirez/redis/git/commits/6c9385e01d127f8ffa6a783b2a571d8ac4b73666,6c9385e01d127f8ffa6a783b2a571d8ac4b73666,Fixed issue 77 (Incorrect time in log files) thanks to youwantalex
antirez,2009-10-29 10:30:43,https://api.github.com/repos/antirez/redis/git/commits/f72b934d1478add5e580e312e93831cbab178a89,f72b934d1478add5e580e312e93831cbab178a89,Fixed  Issue 76 (redis-server crashes when it can't connect to MASTER and client connects to SLAVE)
antirez,2009-10-29 10:10:16,https://api.github.com/repos/antirez/redis/git/commits/1807985bafe08e69c1665684a0a274a4f1d74c08,1807985bafe08e69c1665684a0a274a4f1d74c08,ZREMRANGEBYSCORE implemented. Remove a range of elements with score between min and max
antirez,2009-10-28 22:03:57,https://api.github.com/repos/antirez/redis/git/commits/d13f767cf2c23f47fd976380c8c8833ec525eccd,d13f767cf2c23f47fd976380c8c8833ec525eccd,TODO changes and mostly theoretical minor skiplist change
antirez,2009-10-28 12:17:14,https://api.github.com/repos/antirez/redis/git/commits/3c41331e118ca130736193b3ee26827c990b3537,3c41331e118ca130736193b3ee26827c990b3537,ZLEN renamed ZCARD for consistency with SCARD
antirez,2009-10-27 17:54:03,https://api.github.com/repos/antirez/redis/git/commits/23cff1a874693a80fc76b4b947cddfbe461ab43e,23cff1a874693a80fc76b4b947cddfbe461ab43e,TODO reworked to reflect the real roadmap
antirez,2009-10-27 17:44:17,https://api.github.com/repos/antirez/redis/git/commits/5b19e727c7bea32ddd68896bc5c4fdccf0c8a2d5,5b19e727c7bea32ddd68896bc5c4fdccf0c8a2d5,Fix for 'make 32bit'
antirez,2009-10-27 17:39:47,https://api.github.com/repos/antirez/redis/git/commits/0bc1b2f651aa054cf1b83b3d1379120b98902150,0bc1b2f651aa054cf1b83b3d1379120b98902150,a fix for the solaris fix itself ;)
antirez,2009-10-27 17:38:25,https://api.github.com/repos/antirez/redis/git/commits/5043dff351f4ad9095f66bbef8e08d363cd959a0,5043dff351f4ad9095f66bbef8e08d363cd959a0,More Solaris fixes
antirez,2009-10-27 17:31:12,https://api.github.com/repos/antirez/redis/git/commits/d7f43c081a49e31aac6b060ca8dfbc259da2c53d,d7f43c081a49e31aac6b060ca8dfbc259da2c53d,"A lot of ZSETs tests implemented, and a bug fixed thanks to this new tests"
antirez,2009-10-27 08:06:54,https://api.github.com/repos/antirez/redis/git/commits/d8b5f18f1da560dbe39e553407f0fd58d43d0129,d8b5f18f1da560dbe39e553407f0fd58d43d0129,zmalloc Solaris fixes thanks to Alan Harder
antirez,2009-10-27 00:06:49,https://api.github.com/repos/antirez/redis/git/commits/6e333bbee207941f7a91bab8f90fc9a20d6ef987,6e333bbee207941f7a91bab8f90fc9a20d6ef987,ZSCORE implemented
antirez,2009-10-26 22:06:19,https://api.github.com/repos/antirez/redis/git/commits/dbbc7285eee02ed4fed7d460d3407b02a271da72,dbbc7285eee02ed4fed7d460d3407b02a271da72,fix for ZRANGEBYSCORE
antirez,2009-10-26 22:02:56,https://api.github.com/repos/antirez/redis/git/commits/50c55df529ae207e45e156f2cd852b418caccde2,50c55df529ae207e45e156f2cd852b418caccde2,ZRANGEBYSCORE implemented. Redis got range queries!
antirez,2009-10-26 19:47:23,https://api.github.com/repos/antirez/redis/git/commits/9d60e6e466bd8f61c23d4664eba05200376cc1b9,9d60e6e466bd8f61c23d4664eba05200376cc1b9,A trivial change makes the new implementation O(log(N)) instead of O(log(N))+O(M) when there are M repeated scores!
antirez,2009-10-26 17:47:12,https://api.github.com/repos/antirez/redis/git/commits/2b59cfdfe9629b5fd8543aa8bc8416d6d3f5db04,2b59cfdfe9629b5fd8543aa8bc8416d6d3f5db04,ZSET now saved on disk like any other type
antirez,2009-10-26 17:26:04,https://api.github.com/repos/antirez/redis/git/commits/a7866db6cc5f68cd577bc9684d10bb048d63788f,a7866db6cc5f68cd577bc9684d10bb048d63788f,double serialization routines implemented
antirez,2009-10-26 16:57:24,https://api.github.com/repos/antirez/redis/git/commits/2161a9652725971e2602901410b4a5df0307f57e,2161a9652725971e2602901410b4a5df0307f57e,ZSETs random fixes. Now the implementation appears to be pretty stable
antirez,2009-10-26 16:33:31,https://api.github.com/repos/antirez/redis/git/commits/ad807e6fa3ce761a862a627316e6545f50779668,ad807e6fa3ce761a862a627316e6545f50779668,"another leak fixed. Can't find more for now, but still a bug in ZSETs to fix"
antirez,2009-10-26 16:02:05,https://api.github.com/repos/antirez/redis/git/commits/599379dddaed98b8ab037a4303d9aa3ed6c9896d,599379dddaed98b8ab037a4303d9aa3ed6c9896d,"ZSETs memory leak #1 solved, another one missing"
antirez,2009-10-26 15:43:56,https://api.github.com/repos/antirez/redis/git/commits/bb975144e4e84b618c8d4f1aa5adae428828b544,bb975144e4e84b618c8d4f1aa5adae428828b544,Fix for skiplists backward link
antirez,2009-10-26 15:25:07,https://api.github.com/repos/antirez/redis/git/commits/325d1eb4a86b59eaa8c867b2bb0a7a827d98aaf0,325d1eb4a86b59eaa8c867b2bb0a7a827d98aaf0,Merged Solaris patches provided by Alan Harder
antirez,2009-10-26 15:14:49,https://api.github.com/repos/antirez/redis/git/commits/e3870fab57b8073de1ebc04bbd300c6ab45c1c34,e3870fab57b8073de1ebc04bbd300c6ab45c1c34,"backward support to skiplists for ZREVRANGE, still broken, committing since I've to merge the Solaris patches"
antirez,2009-10-26 11:26:30,https://api.github.com/repos/antirez/redis/git/commits/9b1d5ebbe426b8158a9ee484a7e5371175e63949,9b1d5ebbe426b8158a9ee484a7e5371175e63949,TODO updated
antirez,2009-10-26 11:04:42,https://api.github.com/repos/antirez/redis/git/commits/1b7106e7dbf5317299da74cd79a1d488daa1bdaf,1b7106e7dbf5317299da74cd79a1d488daa1bdaf,ZREM implemented
antirez,2009-10-23 23:31:29,https://api.github.com/repos/antirez/redis/git/commits/f4d4c47f66a182746e3955c5240c2c0e8d528e43,f4d4c47f66a182746e3955c5240c2c0e8d528e43,fix for ZADD in score update mode
antirez,2009-10-23 23:27:18,https://api.github.com/repos/antirez/redis/git/commits/e197b441a2bc18c5b0c8ba4d2aafd5f79e54c058,e197b441a2bc18c5b0c8ba4d2aafd5f79e54c058,"some work on ZADD against existing element (score update), still broken..."
antirez,2009-10-23 20:39:25,https://api.github.com/repos/antirez/redis/git/commits/0aad7a1938c015c59d7ccdedd3dae8c2132170db,0aad7a1938c015c59d7ccdedd3dae8c2132170db,zrange now starts to work. zadd still does not support update and will crash or leak or b000mmmmm
antirez,2009-10-23 20:32:29,https://api.github.com/repos/antirez/redis/git/commits/cc81236105712f89c96a46ef401219a443b7796d,cc81236105712f89c96a46ef401219a443b7796d,zrange initial hack (not working for now)
antirez,2009-10-23 20:16:50,https://api.github.com/repos/antirez/redis/git/commits/913e9d6bcacfa28ace3b7ee1c75f8ec4e146974b,913e9d6bcacfa28ace3b7ee1c75f8ec4e146974b,"first skiplist fix, courtesy of valgrind"
antirez,2009-10-23 19:43:09,https://api.github.com/repos/antirez/redis/git/commits/ace4ee541ac6254b0634149d90fbc48bcf518ac1,ace4ee541ac6254b0634149d90fbc48bcf518ac1,zset symbols added to stack trace code. ZSets will simply crash at the moment
antirez,2009-10-23 19:24:01,https://api.github.com/repos/antirez/redis/git/commits/fd8ccf4419ab94ab5a9250c0dc7a8d1761056b48,fd8ccf4419ab94ab5a9250c0dc7a8d1761056b48,more work on ZSETs and a new make target called 32bit to build i386 binaries on mac os x leopard
antirez,2009-10-23 18:33:25,https://api.github.com/repos/antirez/redis/git/commits/6b47e12ef8d9e4fdf6fe9aa9b459baf5c107ab55,6b47e12ef8d9e4fdf6fe9aa9b459baf5c107ab55,initial skiplist implementation. Most memory checks removed and zmalloc() modified to fail with an error message and abort. Anyway Redis is not designed to recover from out of memory conditions.
antirez,2009-10-22 23:36:10,https://api.github.com/repos/antirez/redis/git/commits/cb7e07cc63f62012c953e528881367db587cb3cf,cb7e07cc63f62012c953e528881367db587cb3cf,Fixed compilation in mac os x snow leopard when compiling a 32 bit binary.
antirez,2009-10-22 14:15:26,https://api.github.com/repos/antirez/redis/git/commits/1812e0246cc6dbae16a7fc90be2d8e4866299fe0,1812e0246cc6dbae16a7fc90be2d8e4866299fe0,version incremented to 1.050 to distinguish from 1.001 stable and next stable versions with minor fixes
antirez,2009-10-21 08:58:27,https://api.github.com/repos/antirez/redis/git/commits/2c65cbc9e3aa3ff189de3bfe207f4ee8f75edecb,2c65cbc9e3aa3ff189de3bfe207f4ee8f75edecb,TODO updated
antirez,2009-10-21 08:50:24,https://api.github.com/repos/antirez/redis/git/commits/2abb95a9a849453eeb864e919ea0b8d6495a6a2a,2abb95a9a849453eeb864e919ea0b8d6495a6a2a,SRANDMEMBER added
antirez,2009-10-20 09:39:20,https://api.github.com/repos/antirez/redis/git/commits/f69f2cbafeceb03a0bc945227f08657ea1c09251,f69f2cbafeceb03a0bc945227f08657ea1c09251,"Imporant bug leading to data corruption fixed (NOT affecting stable distribution), Tcl client lib MSET/MSETNX implementation fixed, Added new tests for MSET and MSETNX in test-redis.tcl"
antirez,2009-10-17 20:17:53,https://api.github.com/repos/antirez/redis/git/commits/8165a5f2a316dd32b5c1c9e0819dc8c1fb1282b2,8165a5f2a316dd32b5c1c9e0819dc8c1fb1282b2,added multi-bulk protocol support to redis-cli and support for MSET and MSETNX
antirez,2009-10-17 20:02:59,https://api.github.com/repos/antirez/redis/git/commits/2ed22c8b29039dce0ae795c4ba3c334b9ec860f4,2ed22c8b29039dce0ae795c4ba3c334b9ec860f4,"MSET fixed, was not able to replace keys already set for a stupid bug"
antirez,2009-10-16 21:40:47,https://api.github.com/repos/antirez/redis/git/commits/8d0490e7ec240c177945512c6e1c885767d673b1,8d0490e7ec240c177945512c6e1c885767d673b1,some dead code removed
antirez,2009-10-16 21:36:33,https://api.github.com/repos/antirez/redis/git/commits/638e42aca477816ab4754ffb4e1e2816bdcc163c,638e42aca477816ab4754ffb4e1e2816bdcc163c,multi bulk input protocol fixed
antirez,2009-10-16 11:44:25,https://api.github.com/repos/antirez/redis/git/commits/f6b141c57d7339b4b1c312dad17b988ae26b85e9,f6b141c57d7339b4b1c312dad17b988ae26b85e9,MSET and MSETNX commands implemented
antirez,2009-10-07 15:34:00,https://api.github.com/repos/antirez/redis/git/commits/f1017b3fb318d8524210ce4d599a0b083036dee9,f1017b3fb318d8524210ce4d599a0b083036dee9,undoed all the sds hacking that lead just to random bugs and no memory saving ;)
antirez,2009-10-07 11:30:15,https://api.github.com/repos/antirez/redis/git/commits/e8a74421bb685abb728e95fa0bf33de52402fe0a,e8a74421bb685abb728e95fa0bf33de52402fe0a,"initial multi-bulk query protocol, this will allow MSET and other interesting features."
antirez,2009-10-03 08:54:27,https://api.github.com/repos/antirez/redis/git/commits/c32514972cbf2255d6c78e0ba4f2c7d7b3f652f5,c32514972cbf2255d6c78e0ba4f2c7d7b3f652f5,benchmark now outputs the right command line to shorten the TIME_WAIT interval on Mac OS X when keep alive is set
antirez,2009-10-02 08:23:25,https://api.github.com/repos/antirez/redis/git/commits/0ea663ea01e6cf6b552e99e3416a38ccb56b0a5f,0ea663ea01e6cf6b552e99e3416a38ccb56b0a5f,Issue 69 fixed. Object integer encoding now works with replication and MONITORing again.
antirez,2009-09-18 18:31:47,https://api.github.com/repos/antirez/redis/git/commits/724a51b1a95b9e6a6937ac363e11df647829d4c6,724a51b1a95b9e6a6937ac363e11df647829d4c6,"LREM fixed, used to crash since the new object integer encoding is on the stage"
antirez,2009-09-17 15:23:59,https://api.github.com/repos/antirez/redis/git/commits/d44659004125de932378e0cedb2abfc8cd5e64e1,d44659004125de932378e0cedb2abfc8cd5e64e1,maxmemory didn't worked in 64 systems for values > 4GB since it used to be an unsigned int. Fixed
antirez,2009-09-10 15:46:21,https://api.github.com/repos/antirez/redis/git/commits/244de507b304596b2e853d2294b9421e17b1fba5,244de507b304596b2e853d2294b9421e17b1fba5,"incremented version number to 1.001, AKA Redis edge is no longer stable..."
antirez,2009-09-10 15:45:30,https://api.github.com/repos/antirez/redis/git/commits/942a39618b8a7fe59435f632ccfb5e7495564fa1,942a39618b8a7fe59435f632ccfb5e7495564fa1,in-memory specialized object encoding (for now 32 signed integers only)
antirez,2009-09-03 08:42:47,https://api.github.com/repos/antirez/redis/git/commits/557a74e56308325874c573e6dd2c6b228136de86,557a74e56308325874c573e6dd2c6b228136de86,Latest doc changes for 1.0
antirez,2009-09-03 08:38:15,https://api.github.com/repos/antirez/redis/git/commits/26cdd4dd2d108384f94a614e42b469fab8cba9ba,26cdd4dd2d108384f94a614e42b469fab8cba9ba,Redis 1.0.0 release
antirez,2009-09-02 09:37:01,https://api.github.com/repos/antirez/redis/git/commits/61c38ac53138e489d7e7260cc4d931b71c9c22ea,61c38ac53138e489d7e7260cc4d931b71c9c22ea,Redis version pushed to 1.0
antirez,2009-09-02 08:37:32,https://api.github.com/repos/antirez/redis/git/commits/3113921a454a6fad2b745cf8b5c146d396bdf771,3113921a454a6fad2b745cf8b5c146d396bdf771,Ruby client lib updated to the latest git version
antirez,2009-09-02 08:36:03,https://api.github.com/repos/antirez/redis/git/commits/123d7c93cb73a0d09f2a8b34322f1a0f4acc71ba,123d7c93cb73a0d09f2a8b34322f1a0f4acc71ba,update-scala-client script added
antirez,2009-09-02 08:34:27,https://api.github.com/repos/antirez/redis/git/commits/7c44bbb1108c9460027776138f4079f8ec46934c,7c44bbb1108c9460027776138f4079f8ec46934c,Scala client added thanks to Alejanro Crosa
antirez,2009-09-02 08:29:58,https://api.github.com/repos/antirez/redis/git/commits/45636487143097d360dfba4f3fa602b08927e355,45636487143097d360dfba4f3fa602b08927e355,QuickStart added
antirez,2009-09-01 14:30:52,https://api.github.com/repos/antirez/redis/git/commits/af807d87e8e30978f9a0d162b8004a4af8e4e3a3,af807d87e8e30978f9a0d162b8004a4af8e4e3a3,"Fixed crash with only space and newline as command (issue 61), thanks to a guy having as nick ""fixxxerrr"""
antirez,2009-08-11 01:00:50,https://api.github.com/repos/antirez/redis/git/commits/ae21a529262a160521d6d4715c718118c840fa61,ae21a529262a160521d6d4715c718118c840fa61,TODO list modified
antirez,2009-07-24 12:43:20,https://api.github.com/repos/antirez/redis/git/commits/cbc59b38108dd71b8091be46bd7bdd3cd40c6fe3,cbc59b38108dd71b8091be46bd7bdd3cd40c6fe3,more snow leopard related fixes (for 32bit systems)
antirez,2009-07-24 12:32:58,https://api.github.com/repos/antirez/redis/git/commits/06db1f50cd754995130ece657a39d534b82d14ae,06db1f50cd754995130ece657a39d534b82d14ae,"fixed compilation with Snow Leopard, thanks to Lon Baker for providing SSH access to Snow Leopard box"
antirez,2009-07-22 08:32:21,https://api.github.com/repos/antirez/redis/git/commits/fbf9bcdb6f87d4c9c50d050803c39a139eec35fb,fbf9bcdb6f87d4c9c50d050803c39a139eec35fb,Fixed NetBSD compile problems
antirez,2009-07-17 09:56:56,https://api.github.com/repos/antirez/redis/git/commits/21aecf4babfd3e7942ea6ce07657727dd007bbbb,21aecf4babfd3e7942ea6ce07657727dd007bbbb,"now the size of the shared pool can be really modified via config, also the number of objects in the sharing pool is logged when the log level is set to debug. Thanks to Aman Gupta"
antirez,2009-07-05 10:56:59,https://api.github.com/repos/antirez/redis/git/commits/8034b0f9e0a7830f8fde62ad999fc58e103e9d7f,8034b0f9e0a7830f8fde62ad999fc58e103e9d7f,"added utils/redis-copy.rb, a script that is able to copy data from one Redis server to another one on the fly."
antirez,2009-07-04 13:43:57,https://api.github.com/repos/antirez/redis/git/commits/b91cf5ef2bca4704a21cee929588a4d455035497,b91cf5ef2bca4704a21cee929588a4d455035497,"Applied three different patches thanks to Chris Lamb, one to fix compilation and get the IP register value on Linux IA64 and other systems. One in order to log the overcommit problem on the logs instead of the standard output when Redis is demonized. The latest in order to suggest a more consistent way in order to switch to 1 the memory overcommit Linux feature."
antirez,2009-07-03 17:57:26,https://api.github.com/repos/antirez/redis/git/commits/774230260ff61dbc143236f690ccc73048f7fdfe,774230260ff61dbc143236f690ccc73048f7fdfe,bugfix: EXPIRE now propagates to the Slave.
antirez,2009-06-16 15:33:58,https://api.github.com/repos/antirez/redis/git/commits/f0dec43b53a972bb8959b146d058e754e68be8c8,f0dec43b53a972bb8959b146d058e754e68be8c8,Redis version modified to 0.900
antirez,2009-06-16 14:46:33,https://api.github.com/repos/antirez/redis/git/commits/88a88bb6672a9ccebccef91799a4c59abbe5ef22,88a88bb6672a9ccebccef91799a4c59abbe5ef22,update-ruby-client script already points to ezmobius repo
antirez,2009-06-16 14:45:04,https://api.github.com/repos/antirez/redis/git/commits/111d9959c05ac675bb713da589eb7b08fe876d56,111d9959c05ac675bb713da589eb7b08fe876d56,client libraries updated
antirez,2009-06-16 14:42:53,https://api.github.com/repos/antirez/redis/git/commits/df3fd8d88da1432bbf42f6b02ecc19f92c02a2c3,df3fd8d88da1432bbf42f6b02ecc19f92c02a2c3,Redis release candidate 1
antirez,2009-06-16 14:42:20,https://api.github.com/repos/antirez/redis/git/commits/a3b21203d2c89a298fee34d1e60cf97fb2aa6e1d,a3b21203d2c89a298fee34d1e60cf97fb2aa6e1d,Better handling of background saving process killed or crashed
antirez,2009-06-14 21:34:25,https://api.github.com/repos/antirez/redis/git/commits/c3cb078d4684d3daba7cf2824fe41c747f69ef51,c3cb078d4684d3daba7cf2824fe41c747f69ef51,number of keys info in INFO command thanks to Diego Rosario Brogna
antirez,2009-06-14 21:22:09,https://api.github.com/repos/antirez/redis/git/commits/7492bbe9f52a655bac2480f069083aaf220ac01b,7492bbe9f52a655bac2480f069083aaf220ac01b,SPOP documented
antirez,2009-06-14 21:15:21,https://api.github.com/repos/antirez/redis/git/commits/e59229a2d540b00566f44c8f29764de3ae89b5be,e59229a2d540b00566f44c8f29764de3ae89b5be,Clojure library thanks to Ragnar Dahlén
antirez,2009-06-10 12:40:11,https://api.github.com/repos/antirez/redis/git/commits/c9a111acf47cb5bb2138d1f699253f87d68e53e8,c9a111acf47cb5bb2138d1f699253f87d68e53e8,It is now possible to specify - as config file name to read it from stdin
antirez,2009-06-09 22:11:17,https://api.github.com/repos/antirez/redis/git/commits/0df1ead745f74d7643b73e3065f5c85b240b38fa,0df1ead745f74d7643b73e3065f5c85b240b38fa,sync with jodosha redis-rb
antirez,2009-06-09 22:08:10,https://api.github.com/repos/antirez/redis/git/commits/38210f7fe571c6b892f539d11d0c69ee1a93d00b,38210f7fe571c6b892f539d11d0c69ee1a93d00b,Redis-rb sync
antirez,2009-06-09 22:03:53,https://api.github.com/repos/antirez/redis/git/commits/cd19463854027eb7e378bcd0ea8e072e7d17f4d0,cd19463854027eb7e378bcd0ea8e072e7d17f4d0,max inline request raised again to 1024*1024*256 bytes
antirez,2009-06-09 22:02:08,https://api.github.com/repos/antirez/redis/git/commits/644fafa3830dd5f889142a0077bf153d536e9d45,644fafa3830dd5f889142a0077bf153d536e9d45,"max bytes in an inline command raised to 1024*1024 bytes, in order to allow for very large MGETs and still protect from client crashes"
antirez,2009-06-08 21:51:35,https://api.github.com/repos/antirez/redis/git/commits/12fea9289063753ddd478f484636c343eeef49ba,12fea9289063753ddd478f484636c343eeef49ba,SPOP implemented. Hash table resizing for Sets and Expires too. Changed the resize policy to play better with RANDOMKEY and SPOP.
antirez,2009-06-07 18:22:43,https://api.github.com/repos/antirez/redis/git/commits/d76412d1d1268c168332d7a4ca6020a5ac461b72,d76412d1d1268c168332d7a4ca6020a5ac461b72,some minor changes to the backtrace code
antirez,2009-06-07 13:47:59,https://api.github.com/repos/antirez/redis/git/commits/e65fdc78380761bc9b9531f92a8b78c42263286c,e65fdc78380761bc9b9531f92a8b78c42263286c,enable backtrace capabilities only for Linux and MacOSX
antirez,2009-06-07 12:00:31,https://api.github.com/repos/antirez/redis/git/commits/56906eefea4b77e1cd43d0b483d11470a3dab90d,56906eefea4b77e1cd43d0b483d11470a3dab90d,"Dump a backtrace on sigsegv/sigbus, original coded thanks to Diego Rosario Brogna, modified in order to work on different OSes and to enhance reliability"
antirez,2009-06-06 21:40:48,https://api.github.com/repos/antirez/redis/git/commits/c4cd5f393ced23cb298c52eaa5ed67569d3f8d0d,c4cd5f393ced23cb298c52eaa5ed67569d3f8d0d,Merge git://github.com/dierbro/redis
antirez,2009-06-06 08:00:12,https://api.github.com/repos/antirez/redis/git/commits/a3cc9e36aa9fe82bdd62cfb4916e3c1e4cb29583,a3cc9e36aa9fe82bdd62cfb4916e3c1e4cb29583,TODO updated
antirez,2009-06-06 06:24:23,https://api.github.com/repos/antirez/redis/git/commits/9e9c0ce1702db12a71bef5ef877b5bf97c3c935e,9e9c0ce1702db12a71bef5ef877b5bf97c3c935e,Makefile dependencies updated
antirez,2009-06-05 21:44:26,https://api.github.com/repos/antirez/redis/git/commits/6f376729209b8af1f2e0ea6a7e04598f7644c5e3,6f376729209b8af1f2e0ea6a7e04598f7644c5e3,"Avoid a busy loop while sending very large replies against very fast links, this allows to be more responsive with other clients even under a KEY * against the loopback interface"
antirez,2009-06-05 20:52:30,https://api.github.com/repos/antirez/redis/git/commits/9f3c422c72d4cede717b5f61bb7bde5823db53f2,9f3c422c72d4cede717b5f61bb7bde5823db53f2,Kill the background saving process before performing SHUTDOWN to avoid races
antirez,2009-06-05 14:07:22,https://api.github.com/repos/antirez/redis/git/commits/33c08b39164eb669313f4871ce1b16a8e4cb2e5c,33c08b39164eb669313f4871ce1b16a8e4cb2e5c,LREM now returns :0 for non existing keys
antirez,2009-06-05 08:50:51,https://api.github.com/repos/antirez/redis/git/commits/dde65f3f3c9949570cf19fb56e35ba195b48227d,dde65f3f3c9949570cf19fb56e35ba195b48227d,"added config.h for #ifdef business isolation, added fstat64 for Mac OS X"
antirez,2009-06-04 16:50:54,https://api.github.com/repos/antirez/redis/git/commits/ec93bba353113cb81dc97a738dc94de03f16b143,ec93bba353113cb81dc97a738dc94de03f16b143,"macosx specific zmalloc.c, uses malloc_size function in order to avoid to waste memory and time to put an additional header"
antirez,2009-06-04 15:13:33,https://api.github.com/repos/antirez/redis/git/commits/333298dac3e4b9c147851772be854b5dabcab8c2,333298dac3e4b9c147851772be854b5dabcab8c2,DEBUG OBJECT implemented
antirez,2009-06-04 14:50:24,https://api.github.com/repos/antirez/redis/git/commits/b5ff27084f593f64d47337c5f47ea3bf76c63a5a,b5ff27084f593f64d47337c5f47ea3bf76c63a5a,backtrace support removed: unreliable stack trace :(
antirez,2009-06-04 14:45:57,https://api.github.com/repos/antirez/redis/git/commits/7f957c925bb2b9dd8b89b1017b24b0d5f852cd7f,7f957c925bb2b9dd8b89b1017b24b0d5f852cd7f,initial backtrace dumping on sigsegv/sigbus + debug command
antirez,2009-06-03 14:03:21,https://api.github.com/repos/antirez/redis/git/commits/f7acd60336702b273886ef49650de34b143cbf36,f7acd60336702b273886ef49650de34b143cbf36,Python lib updated
antirez,2009-06-03 14:01:32,https://api.github.com/repos/antirez/redis/git/commits/e52c65b90af21d1eba73ddc0a75eedba69b2f7b8,e52c65b90af21d1eba73ddc0a75eedba69b2f7b8,"shareobjectspoolsize implemented in reds.conf, in order to control the pool size when object sharing is on"
antirez,2009-05-30 08:17:06,https://api.github.com/repos/antirez/redis/git/commits/67d3e950bae378fe73812feaeb649a61ea6894bf,67d3e950bae378fe73812feaeb649a61ea6894bf,Erlang client updated
antirez,2009-05-30 08:14:57,https://api.github.com/repos/antirez/redis/git/commits/be42428336aeb2059c6312cfeaac8d2bd23b53f1,be42428336aeb2059c6312cfeaac8d2bd23b53f1,Python client library updated
antirez,2009-05-29 10:52:21,https://api.github.com/repos/antirez/redis/git/commits/6a97a74f5ebd7d95dc241634e0982552418d5bb3,6a97a74f5ebd7d95dc241634e0982552418d5bb3,Redis-rb minor bool convertion fix
antirez,2009-05-29 10:28:37,https://api.github.com/repos/antirez/redis/git/commits/69664139b5a57d08b2a17f624d5e9940761c9a3f,69664139b5a57d08b2a17f624d5e9940761c9a3f,"ruby library client is not Redis-rb merged with RubyRedis ""engine"" by Brian McKinney"
antirez,2009-05-28 16:31:02,https://api.github.com/repos/antirez/redis/git/commits/d90b352ded98b79fdddca6e057445237531835f3,d90b352ded98b79fdddca6e057445237531835f3,__P completely removed from pqsort.c/h
antirez,2009-05-28 16:28:55,https://api.github.com/repos/antirez/redis/git/commits/5cf5fa656274752965939115f18528b20d962087,5cf5fa656274752965939115f18528b20d962087,another minor fix for Solaris boxes
antirez,2009-05-28 16:26:28,https://api.github.com/repos/antirez/redis/git/commits/edd9f775f0b51f031a04c7fc7573b276d152a74f,edd9f775f0b51f031a04c7fc7573b276d152a74f,minor fix for Solaris boxes
antirez,2009-05-28 16:25:22,https://api.github.com/repos/antirez/redis/git/commits/144d479b7cd6f503d97f9d9ef3115839a0fa53c3,144d479b7cd6f503d97f9d9ef3115839a0fa53c3,minor fix for Solaris boxes
antirez,2009-05-27 20:53:20,https://api.github.com/repos/antirez/redis/git/commits/3fd78bcd45338e96f761b558bfa68e83a8141f0b,3fd78bcd45338e96f761b558bfa68e83a8141f0b,maxmemory implemented
antirez,2009-05-26 18:54:47,https://api.github.com/repos/antirez/redis/git/commits/16edf32dc3eeacb718046f954621b3574abafaa9,16edf32dc3eeacb718046f954621b3574abafaa9,Redis git version modified to 0.101 in order to distinguish that from the latest tar.gz via INFO ;)
antirez,2009-05-26 16:13:40,https://api.github.com/repos/antirez/redis/git/commits/77b78dc401fc6fc144f43b740047cc09d8ab93fe,77b78dc401fc6fc144f43b740047cc09d8ab93fe,Redis 0.100 released
antirez,2009-05-26 16:10:50,https://api.github.com/repos/antirez/redis/git/commits/d7fc9edb182d361ac5c31b21fcdd25345c972898,d7fc9edb182d361ac5c31b21fcdd25345c972898,client libraries synched in git
antirez,2009-05-26 14:45:57,https://api.github.com/repos/antirez/redis/git/commits/e083d7526209d0faf2ac0fabbc1a1e59b9974ce2,e083d7526209d0faf2ac0fabbc1a1e59b9974ce2,"ignore gcc warning about write() return code not checked. It is esplicitily this way since the ""max number of clients reached"" is a best-effort error"
antirez,2009-05-26 14:35:18,https://api.github.com/repos/antirez/redis/git/commits/a1f6fa5edc0d258b234f77a8cbe6084a3ade5325,a1f6fa5edc0d258b234f77a8cbe6084a3ade5325,max bytes of a received command enlarged from 1k to 16k
antirez,2009-05-25 23:12:46,https://api.github.com/repos/antirez/redis/git/commits/a56785f73cc3a2e09571f46941caf56133551400,a56785f73cc3a2e09571f46941caf56133551400,"RubyRedis: set TCP_NODELAY TCP socket option to to disable the neagle algorithm. Makes a huge difference under some OS, notably Linux"
antirez,2009-05-25 21:29:18,https://api.github.com/repos/antirez/redis/git/commits/285add5558c8d6cd6f6e659fbfcbc06af165218f,285add5558c8d6cd6f6e659fbfcbc06af165218f,"maxclients implemented, see redis.conf for details"
antirez,2009-05-25 21:02:42,https://api.github.com/repos/antirez/redis/git/commits/a0f643ea4c574d7f393a325f8f6e7c6c2e1c476f,a0f643ea4c574d7f393a325f8f6e7c6c2e1c476f,INFO command now reports replication info
antirez,2009-05-25 19:30:20,https://api.github.com/repos/antirez/redis/git/commits/0b420168b485d0a9c4b66d0a6c341597fb155947,0b420168b485d0a9c4b66d0a6c341597fb155947,minor fix to RubyRedis about bulk commands sent without arguments
antirez,2009-05-24 07:21:35,https://api.github.com/repos/antirez/redis/git/commits/8cca9b82773e2ca3d13bc1bb009d4e4d98141021,8cca9b82773e2ca3d13bc1bb009d4e4d98141021,Warns if using the default config
antirez,2009-05-24 07:15:40,https://api.github.com/repos/antirez/redis/git/commits/2073a849dfdd4e8975bcf9cf3cff7c4c210e098b,2073a849dfdd4e8975bcf9cf3cff7c4c210e098b,"Issue with redis-client used in scripts solved, now to check if the latest argument must come from standard input we do not check that stdin is or not a tty but the command arity"
antirez,2009-05-23 09:33:21,https://api.github.com/repos/antirez/redis/git/commits/4d30232b0408f78d904ee484456e53b2b8fa6b0f,4d30232b0408f78d904ee484456e53b2b8fa6b0f,"RubyRedis: now sets are returned as arrays again, and not as Set objects"
antirez,2009-05-23 09:16:38,https://api.github.com/repos/antirez/redis/git/commits/e9f0b930fecb02ef9fa025e78da5b3338b36f03b,e9f0b930fecb02ef9fa025e78da5b3338b36f03b,SLAVEOF command documented
antirez,2009-05-23 08:56:32,https://api.github.com/repos/antirez/redis/git/commits/321b0e13f6d48e61ee558c2ba32e86430bbe55af,321b0e13f6d48e61ee558c2ba32e86430bbe55af,SLAVEOF command implemented for replication remote control
antirez,2009-05-22 19:56:00,https://api.github.com/repos/antirez/redis/git/commits/c7cf2ec97cc81a854ab58fd6755dcfe1cbc3fdc9,c7cf2ec97cc81a854ab58fd6755dcfe1cbc3fdc9,Fix: no connection timeout for the master!
antirez,2009-05-22 18:55:09,https://api.github.com/repos/antirez/redis/git/commits/8c4d91fcf8624ebff4434d259c19046fdd13240d,8c4d91fcf8624ebff4434d259c19046fdd13240d,"replication slave timeout when receiving the initial bulk data set to 3600 seconds, now that replication is non-blocking the server must save the db before to start the async replication and this can take a lot of time with huge datasets"
antirez,2009-05-22 16:44:44,https://api.github.com/repos/antirez/redis/git/commits/2abee6f2154e75a68488cd508bf2eddcfcc33ebc,2abee6f2154e75a68488cd508bf2eddcfcc33ebc,README tutorial now reflects the new proto
antirez,2009-05-22 16:35:51,https://api.github.com/repos/antirez/redis/git/commits/6fdc78ac69865b79b16fda97cf29a063dc3d026a,6fdc78ac69865b79b16fda97cf29a063dc3d026a,"critical bug about glueoutputbuffers=yes fixed. Under load and with pipelining and clients disconnecting on the middle of the chat with the server, Redis could block. Now it's ok"
antirez,2009-05-22 14:08:20,https://api.github.com/repos/antirez/redis/git/commits/32c3a426a6f0b4f99e46dfb805dbca522bce7f8a,32c3a426a6f0b4f99e46dfb805dbca522bce7f8a,TTL command doc added
antirez,2009-05-22 13:55:38,https://api.github.com/repos/antirez/redis/git/commits/fd88489a417ba33e287b9ba4286328b6c18185df,fd88489a417ba33e287b9ba4286328b6c18185df,TTL command implemented
antirez,2009-05-22 13:29:27,https://api.github.com/repos/antirez/redis/git/commits/03fd01c7eb56e1878e133857e95dcc8d23d14445,03fd01c7eb56e1878e133857e95dcc8d23d14445,S*STORE now return the cardinality of the resulting set
antirez,2009-05-22 10:16:57,https://api.github.com/repos/antirez/redis/git/commits/e3d48807b9b1350a8ea3f7e28d7a040d2e6249b9,e3d48807b9b1350a8ea3f7e28d7a040d2e6249b9,rubyredis more compatible with Redis-rb
antirez,2009-05-21 19:18:31,https://api.github.com/repos/antirez/redis/git/commits/06374c4b17be54086b674549f0a8e4c76602d84c,06374c4b17be54086b674549f0a8e4c76602d84c,minor indentation fix
antirez,2009-05-21 19:03:41,https://api.github.com/repos/antirez/redis/git/commits/0dd8fce106f4a45328cbf42d5eedbcc7afa10e5e,0dd8fce106f4a45328cbf42d5eedbcc7afa10e5e,timeout support and Redis-rb compatibility aliases implemented in RubyRedis
antirez,2009-05-21 11:51:30,https://api.github.com/repos/antirez/redis/git/commits/f5bf7e3e30d2089704d8b0b5147bb1abd869ef0b,f5bf7e3e30d2089704d8b0b5147bb1abd869ef0b,RubyRedis info postprocessor rewritten in a more functional way
antirez,2009-05-21 11:31:00,https://api.github.com/repos/antirez/redis/git/commits/fc9aeaeaf8d6d9a96b1b22ec5641c8e4290bc673,fc9aeaeaf8d6d9a96b1b22ec5641c8e4290bc673,dead code removed from RubyRedis
antirez,2009-05-21 11:22:20,https://api.github.com/repos/antirez/redis/git/commits/3ba37089b57156619b07efd7a1587730217eca4d,3ba37089b57156619b07efd7a1587730217eca4d,command postprocessing implemented into RubyRedis
antirez,2009-05-20 15:52:47,https://api.github.com/repos/antirez/redis/git/commits/3f32f1f691b3ee60fe9f7e472bc605b1ccf2c404,3f32f1f691b3ee60fe9f7e472bc605b1ccf2c404,Automagically reconnection of RubyRedis
antirez,2009-05-20 15:34:20,https://api.github.com/repos/antirez/redis/git/commits/ad0ea27c83f23819c515116117413a1a86555c36,ad0ea27c83f23819c515116117413a1a86555c36,RubyRedis: Array alike operators implemented
antirez,2009-05-20 15:23:06,https://api.github.com/repos/antirez/redis/git/commits/cd71a5705d16e5af90bc6be7ad960133391a5932,cd71a5705d16e5af90bc6be7ad960133391a5932,random testing code removed
antirez,2009-05-20 15:22:29,https://api.github.com/repos/antirez/redis/git/commits/4e1684df0921c6d49f2e5f89927b2f068f0efa91,4e1684df0921c6d49f2e5f89927b2f068f0efa91,RubyRedis DB selection forced at object creation
antirez,2009-05-20 14:36:12,https://api.github.com/repos/antirez/redis/git/commits/4a327b4af9885d89b5860548f44569d1d2bde5ab,4a327b4af9885d89b5860548f44569d1d2bde5ab,Initial version of an alternative Ruby client added
antirez,2009-05-20 09:09:09,https://api.github.com/repos/antirez/redis/git/commits/1350d27e59a888ffd83d67ceb7e2ac9cdd4e6869,1350d27e59a888ffd83d67ceb7e2ac9cdd4e6869,SDIFF / SDIFFSTORE added to doc
antirez,2009-05-20 08:44:08,https://api.github.com/repos/antirez/redis/git/commits/d214bb4894af1790d9e9974218c48730ce824845,d214bb4894af1790d9e9974218c48730ce824845,Aman Gupta changes merged
antirez,2009-05-20 08:42:43,https://api.github.com/repos/antirez/redis/git/commits/6d4371d46939ef6b10b9205af6af56e1146cdf91,6d4371d46939ef6b10b9205af6af56e1146cdf91,Merge git://github.com/tmm1/redis
tmm1,2009-05-20 05:36:11,https://api.github.com/repos/antirez/redis/git/commits/0150db364d939a5a69244aca6a66ad05903979fe,0150db364d939a5a69244aca6a66ad05903979fe,Allow timeout=0 config to disable client timeouts
antirez,2009-05-19 16:39:58,https://api.github.com/repos/antirez/redis/git/commits/5f5b9840c3d3f2ba6dd2f8c4d177f2bfac6f0d32,5f5b9840c3d3f2ba6dd2f8c4d177f2bfac6f0d32,"Partial qsort implemented in SORT command, only when both BY and LIMIT is used. minor fix for a warning compiling under Linux."
antirez,2009-05-19 15:34:30,https://api.github.com/repos/antirez/redis/git/commits/75fd597daf80800feb18eab312c5f99e4c22e567,75fd597daf80800feb18eab312c5f99e4c22e567,psort.c/h added. This is a partial qsort implementation that Redis will use when SORT+LIMIT is requested
tmm1,2009-05-17 21:16:24,https://api.github.com/repos/antirez/redis/git/commits/83cdfe182f4e24e0785d13b358c84fe5f195df32,83cdfe182f4e24e0785d13b358c84fe5f195df32,Fix SINTER/UNIONSTORE to allow for &=/|= style operations (i.e. SINTERSTORE set1 set1 set2)
tmm1,2009-05-17 19:25:05,https://api.github.com/repos/antirez/redis/git/commits/51829ed3f09bb4381f075900521bcaafee8819bb,51829ed3f09bb4381f075900521bcaafee8819bb,Optimize SDIFF to return as soon as the result set is empty
antirez,2009-05-17 11:45:08,https://api.github.com/repos/antirez/redis/git/commits/f4f56e1dfba6c8b9b0654f332420fc2e4933fda3,f4f56e1dfba6c8b9b0654f332420fc2e4933fda3,SDIFF/SDIFFSTORE implemnted unifying it with the implementation of SUNION/SUNIONSTORE
antirez,2009-05-11 17:45:47,https://api.github.com/repos/antirez/redis/git/commits/1904ecc165735a859ef6a25fc7a8bd0c14505153,1904ecc165735a859ef6a25fc7a8bd0c14505153,timestamp in log lines
antirez,2009-05-11 11:50:09,https://api.github.com/repos/antirez/redis/git/commits/7407797596cdc7ff4df1588cb0bacd2d3d5c67ac,7407797596cdc7ff4df1588cb0bacd2d3d5c67ac,Python client updated pushing from Ludo's repository
antirez,2009-05-10 22:36:12,https://api.github.com/repos/antirez/redis/git/commits/ecfaf6da92d8d482460d9491a69d80f91b2af7c0,ecfaf6da92d8d482460d9491a69d80f91b2af7c0,benchmark utility now supports random keys
antirez,2009-05-10 08:48:37,https://api.github.com/repos/antirez/redis/git/commits/391b4a60a1e493ffa169ffc8014fed4415d1614e,391b4a60a1e493ffa169ffc8014fed4415d1614e,minor doc changes
antirez,2009-05-09 10:32:29,https://api.github.com/repos/antirez/redis/git/commits/cc582a77084840218c5cdcecb19be62f374f0a03,cc582a77084840218c5cdcecb19be62f374f0a03,added tests for vararg DEL
antirez,2009-05-09 10:18:32,https://api.github.com/repos/antirez/redis/git/commits/5109cdff8305ad1ea2047524f9d8221fc7cbdfff,5109cdff8305ad1ea2047524f9d8221fc7cbdfff,"DEL is now a vararg, IMPORTANT: memory leak fixed in loading DB code"
antirez,2009-05-09 07:58:26,https://api.github.com/repos/antirez/redis/git/commits/efc296a1d6068f4e0cde584415d4c14a963c175c,efc296a1d6068f4e0cde584415d4c14a963c175c,doc changes
antirez,2009-05-09 07:25:59,https://api.github.com/repos/antirez/redis/git/commits/57172ffb316b5e681c4f515927894f5129739237,57172ffb316b5e681c4f515927894f5129739237,CPP client added thanks to Brian Hammond
antirez,2009-05-06 21:54:57,https://api.github.com/repos/antirez/redis/git/commits/93ea375904fa2a5d1cab110698d15f43e63d84f1,93ea375904fa2a5d1cab110698d15f43e63d84f1,Infinite number of arguments for MGET and all the other commands
antirez,2009-05-04 14:26:06,https://api.github.com/repos/antirez/redis/git/commits/0bc03378965e6cd465b49ba5503d35c7adbffe2e,0bc03378965e6cd465b49ba5503d35c7adbffe2e,Warns if /proc/sys/vm/overcommit_memory is set to 0 on Linux. Also make sure to don't resize the hash tables while the child process is saving in order to avoid copy-on-write of memory pages
antirez,2009-04-30 18:15:18,https://api.github.com/repos/antirez/redis/git/commits/8d196ebac2554d77c15c38b3e730c8f85bdb26a6,8d196ebac2554d77c15c38b3e730c8f85bdb26a6,"zmalloc fix, return NULL or real malloc failure"
antirez,2009-04-30 18:08:43,https://api.github.com/repos/antirez/redis/git/commits/71aee3e959e205d3acc906c1c1cc91d7e4d87f14,71aee3e959e205d3acc906c1c1cc91d7e4d87f14,more fixes for dict.c and the 150 million keys limit
antirez,2009-04-30 12:48:02,https://api.github.com/repos/antirez/redis/git/commits/f2923becc6cb11dc5cd979ad72a32d1801560df4,f2923becc6cb11dc5cd979ad72a32d1801560df4,"dict.c modified to be able to handle more than 150,000,000 keys"
antirez,2009-04-29 17:49:19,https://api.github.com/repos/antirez/redis/git/commits/75398fbcae19a52ea21c518f5f0fd1e6668edcd3,75398fbcae19a52ea21c518f5f0fd1e6668edcd3,fuzz stresser implemented in redis-test
antirez,2009-04-29 14:50:48,https://api.github.com/repos/antirez/redis/git/commits/dec423d9cf21dfe3ed7493eeb08deed9f1cc51a4,dec423d9cf21dfe3ed7493eeb08deed9f1cc51a4,fixed for HT resize check 32bits overflow
antirez,2009-04-29 08:33:29,https://api.github.com/repos/antirez/redis/git/commits/5a7c647e9acb6034e2bfbe879b1cba4209a76c05,5a7c647e9acb6034e2bfbe879b1cba4209a76c05,Check for fork() failure in background saving
antirez,2009-04-28 23:04:04,https://api.github.com/repos/antirez/redis/git/commits/3a2694c44130c82aa216c1961d33e50fc1eb53a6,3a2694c44130c82aa216c1961d33e50fc1eb53a6,fix for the LZF off-by-one bug added
antirez,2009-04-28 20:04:41,https://api.github.com/repos/antirez/redis/git/commits/b284af55d8d1d38fa2013bc45842c94e42eba3d4,b284af55d8d1d38fa2013bc45842c94e42eba3d4,print bytes used at exit on SHUTDOWN
antirez,2009-04-28 19:19:37,https://api.github.com/repos/antirez/redis/git/commits/0eeb2a4b8ff31b4e441ab7565fd4d7e26392091f,0eeb2a4b8ff31b4e441ab7565fd4d7e26392091f,SMOVE test added
antirez,2009-04-28 18:36:08,https://api.github.com/repos/antirez/redis/git/commits/a4460ef43f9625e6c09cdc327614d1b47c043489,a4460ef43f9625e6c09cdc327614d1b47c043489,SMOVE command implemented
antirez,2009-04-28 14:54:56,https://api.github.com/repos/antirez/redis/git/commits/bb0b03a3d7d2c321fdbbf42fc44ab75766947ae6,bb0b03a3d7d2c321fdbbf42fc44ab75766947ae6,"less CPU usage in command parsing, case insensitive config directives"
antirez,2009-04-28 14:33:35,https://api.github.com/repos/antirez/redis/git/commits/02fdd5ab4c8691156c150bc3948cbebbe8b208ad,02fdd5ab4c8691156c150bc3948cbebbe8b208ad,GETSET command doc added
antirez,2009-04-28 14:21:16,https://api.github.com/repos/antirez/redis/git/commits/7ac6d4613f3552ec17b4ccc6b4493ae9250e3fd2,7ac6d4613f3552ec17b4ccc6b4493ae9250e3fd2,GETSET tests
antirez,2009-04-28 12:42:55,https://api.github.com/repos/antirez/redis/git/commits/a431eb74ba7162f575792efc1586b0eaf62eaca7,a431eb74ba7162f575792efc1586b0eaf62eaca7,GETSET implemented
antirez,2009-04-27 16:10:00,https://api.github.com/repos/antirez/redis/git/commits/b8b553c84fd1d9200fc35a08b9ea42ec9dbc73ee,b8b553c84fd1d9200fc35a08b9ea42ec9dbc73ee,ability to specify a different file name for the DB
antirez,2009-04-27 16:03:34,https://api.github.com/repos/antirez/redis/git/commits/85dd2f3ad232725df668eb9d96553e58e45ad23f,85dd2f3ad232725df668eb9d96553e58e45ad23f,log file parsing code improved a bit
antirez,2009-04-27 15:52:04,https://api.github.com/repos/antirez/redis/git/commits/be2bb6b07e9627e22d4afebab4d0863b898e0098,be2bb6b07e9627e22d4afebab4d0863b898e0098,bgsave_in_progress field in INFO output
antirez,2009-04-27 15:50:26,https://api.github.com/repos/antirez/redis/git/commits/d68ed1201a8c29d98d63f206946de037b6c5b29d,d68ed1201a8c29d98d63f206946de037b6c5b29d,"INCRBY/DECRBY now support 64bit increments, with tests"
antirez,2009-04-23 16:48:11,https://api.github.com/repos/antirez/redis/git/commits/f5785ae997611ac2fc628b6ad2d437a79530f7d6,f5785ae997611ac2fc628b6ad2d437a79530f7d6,RANDOMKEY regression test added
antirez,2009-04-23 16:46:11,https://api.github.com/repos/antirez/redis/git/commits/6f864e62661637917ce6b449ae2c5e11538dfa1f,6f864e62661637917ce6b449ae2c5e11538dfa1f,"dictGetRandomKey bug fixed, RANDOMKEY will not block the server anymore"
antirez,2009-04-21 23:44:48,https://api.github.com/repos/antirez/redis/git/commits/ca37e9cde814dd093cf2cf5d36f178854d768b3e,ca37e9cde814dd093cf2cf5d36f178854d768b3e,"FLUSHALL/FLUSHDB no longer sync on disk. Just increment the dirty counter by the number of elements removed, that will probably trigger a background saving operation"
antirez,2009-04-21 17:47:12,https://api.github.com/repos/antirez/redis/git/commits/975a5b6f9876beb55272160c8f602b9e248c0300,975a5b6f9876beb55272160c8f602b9e248c0300,forgot to comment testing code in PHP lib. Now it is ok
antirez,2009-04-21 17:43:02,https://api.github.com/repos/antirez/redis/git/commits/8d03032a83fefb817e244d4ce3ca695732090deb,8d03032a83fefb817e244d4ce3ca695732090deb,PHP client ported to PHP5 and fixed
antirez,2009-04-20 22:33:34,https://api.github.com/repos/antirez/redis/git/commits/3c910136c1050ce3943c63201eedb7e940652f38,3c910136c1050ce3943c63201eedb7e940652f38,doc update
antirez,2009-04-20 21:51:51,https://api.github.com/repos/antirez/redis/git/commits/6208b3a77644afe5c7c28688cd6d7554a0281953,6208b3a77644afe5c7c28688cd6d7554a0281953,Non blocking replication (finally!). C-side linked lists API improved.
antirez,2009-04-19 08:02:36,https://api.github.com/repos/antirez/redis/git/commits/40d224a9e3df29e27e967ec2f1b9b0ecf66df50f,40d224a9e3df29e27e967ec2f1b9b0ecf66df50f,"SUNION, SUNIONSTORE, Initial work on non blocking replication"
antirez,2009-04-10 11:49:50,https://api.github.com/repos/antirez/redis/git/commits/6bea3d5f58a5aae62ce2083309a9ab88e1e673d8,6bea3d5f58a5aae62ce2083309a9ab88e1e673d8,Redis 0.091 released
antirez,2009-04-10 11:43:41,https://api.github.com/repos/antirez/redis/git/commits/5faa6025f52e4ee8443a111cbb42a775a0206396,5faa6025f52e4ee8443a111cbb42a775a0206396,"SINTER/SINTERSTORE/SLEMENTS fix: misisng keys are now not errors, but just like empty sets"
antirez,2009-04-09 06:44:55,https://api.github.com/repos/antirez/redis/git/commits/cc1db901e934826ce273b19a3f257d235719046f,cc1db901e934826ce273b19a3f257d235719046f,doc changes
antirez,2009-04-08 11:46:26,https://api.github.com/repos/antirez/redis/git/commits/290deb8b8c05fbb030587515add6e51d9a138b50,290deb8b8c05fbb030587515add6e51d9a138b50,"TODO changes, minor change to default redis.conf"
antirez,2009-04-08 11:42:34,https://api.github.com/repos/antirez/redis/git/commits/7f4e28e75046104599a5d83c493fdfd78f93ab49,7f4e28e75046104599a5d83c493fdfd78f93ab49,html doc updated
antirez,2009-04-08 11:26:36,https://api.github.com/repos/antirez/redis/git/commits/0bd06e524ae437c6fd1286f5508e2c5521afe0ac,0bd06e524ae437c6fd1286f5508e2c5521afe0ac,library clients update scripts
antirez,2009-04-08 11:20:03,https://api.github.com/repos/antirez/redis/git/commits/9495122b1853a97b3f15f0ddbf69d69698f9c82b,9495122b1853a97b3f15f0ddbf69d69698f9c82b,Ruby client updated
antirez,2009-04-08 11:17:55,https://api.github.com/repos/antirez/redis/git/commits/928394cd12eb75c35eac72952b29e4dc9e75d154,928394cd12eb75c35eac72952b29e4dc9e75d154,Lua client updated
antirez,2009-04-08 10:25:15,https://api.github.com/repos/antirez/redis/git/commits/8b382972b0d000e51dc573c95ce546e16a7d30fa,8b382972b0d000e51dc573c95ce546e16a7d30fa,Changelog updated
antirez,2009-04-08 10:13:56,https://api.github.com/repos/antirez/redis/git/commits/575acbf1f72b783bba13aee3ddf3bb1110f114fc,575acbf1f72b783bba13aee3ddf3bb1110f114fc,Merge git://github.com/ludoo/redis
bpot,2009-04-07 23:40:33,https://api.github.com/repos/antirez/redis/git/commits/5a6e8b1daa259141917ccc83cb3851614efac615,5a6e8b1daa259141917ccc83cb3851614efac615,Rearrange redisObject struct to reduce memory usage in 64bit environments (as recommended http://groups.google.com/group/redis-db/msg/68f5a743f8f4e287)
bpot,2009-04-07 23:36:23,https://api.github.com/repos/antirez/redis/git/commits/27dd15268c9b519e94a4194bd32bac2d39c6c9fb,27dd15268c9b519e94a4194bd32bac2d39c6c9fb,ruby19 compat: use each_line on string
bpot,2009-04-07 23:33:44,https://api.github.com/repos/antirez/redis/git/commits/5fba9f717be77af5bd5a5149595a1b934d4d5057,5fba9f717be77af5bd5a5149595a1b934d4d5057,64bit fixes for usedmemory
antirez,2009-04-07 22:59:53,https://api.github.com/repos/antirez/redis/git/commits/ce7bef0795e6137b36cdfdfa4e747e31fae09405,ce7bef0795e6137b36cdfdfa4e747e31fae09405,"RANDOMKEY issue 26 fixed, generic test + regression added"
antirez,2009-04-06 08:29:36,https://api.github.com/repos/antirez/redis/git/commits/05557f6de7fd7a4ae29614ae2cde78cd08ebd1b9,05557f6de7fd7a4ae29614ae2cde78cd08ebd1b9,Don't accept SAVE if BGSAVE is in progress
antirez,2009-04-03 09:07:37,https://api.github.com/repos/antirez/redis/git/commits/bb32ede52e8e222735d12d7b350532a06b648c8d,bb32ede52e8e222735d12d7b350532a06b648c8d,persistent EXPIRE
antirez,2009-04-03 08:04:51,https://api.github.com/repos/antirez/redis/git/commits/0c66a4713ab3ce3d0e88dcd10bc5a3cf4420faf6,0c66a4713ab3ce3d0e88dcd10bc5a3cf4420faf6,dirty increment was missing in two points. TODO updated
antirez,2009-04-02 21:00:27,https://api.github.com/repos/antirez/redis/git/commits/7a596b2f0fa649f1f47c60e75a1ebe3b9f5cddce,7a596b2f0fa649f1f47c60e75a1ebe3b9f5cddce,LZF configured to initalize the HT in order to be determinsitic and play well with valgrind
antirez,2009-04-02 15:10:02,https://api.github.com/repos/antirez/redis/git/commits/88e859984a89091f20713d0ba90f7a9437c59c5d,88e859984a89091f20713d0ba90f7a9437c59c5d,compression/decompression of large values on disk now working
antirez,2009-04-02 08:02:06,https://api.github.com/repos/antirez/redis/git/commits/40c32c3e4980d581c8468a9befa67e427c5249f3,40c32c3e4980d581c8468a9befa67e427c5249f3,"disable LZF compression since it's not able to load the DB for now, the load part is missing"
antirez,2009-04-02 08:00:49,https://api.github.com/repos/antirez/redis/git/commits/d07519372b980b112cae65988a5cd4bd9d1e1daa,d07519372b980b112cae65988a5cd4bd9d1e1daa,new LZF files added
antirez,2009-04-02 07:57:06,https://api.github.com/repos/antirez/redis/git/commits/2e77c2ee72c97d33da568efcde3ec3dc954ccc13,2e77c2ee72c97d33da568efcde3ec3dc954ccc13,Fixed issue 23 about AUTH
antirez,2009-04-02 07:54:45,https://api.github.com/repos/antirez/redis/git/commits/774e30478070d780f739db047e5551690a090db1,774e30478070d780f739db047e5551690a090db1,Issue 22 fixed
antirez,2009-04-01 18:40:00,https://api.github.com/repos/antirez/redis/git/commits/94754ccc3cb33bc16a9a17b664adfc3f8949f3df,94754ccc3cb33bc16a9a17b664adfc3f8949f3df,non-lazy expired keys purging implemented
antirez,2009-04-01 12:36:29,https://api.github.com/repos/antirez/redis/git/commits/98c541c517585171f98b0a4082ff857f97246dc7,98c541c517585171f98b0a4082ff857f97246dc7,fastlz dependence removed
antirez,2009-04-01 11:22:35,https://api.github.com/repos/antirez/redis/git/commits/3305306f0933bdfbd958cb12bd559636d50e4dc7,3305306f0933bdfbd958cb12bd559636d50e4dc7,Initial implementation of EXPIRE
antirez,2009-03-30 14:27:35,https://api.github.com/repos/antirez/redis/git/commits/300827b60dcb7eec8cbcc9d2b59c9dbd765efd40,300827b60dcb7eec8cbcc9d2b59c9dbd765efd40,TODO updated
antirez,2009-03-30 10:13:43,https://api.github.com/repos/antirez/redis/git/commits/378fd42197242327111995481c92c0890ac4e715,378fd42197242327111995481c92c0890ac4e715,changelog added
antirez,2009-03-28 10:50:27,https://api.github.com/repos/antirez/redis/git/commits/8de4907a86e25ac8a50be57f5c2a80f872017e77,8de4907a86e25ac8a50be57f5c2a80f872017e77,redis-sha1 utility added
antirez,2009-03-28 09:58:19,https://api.github.com/repos/antirez/redis/git/commits/e3566d4b46735c33bc85540c65c94e6a9778c1bf,e3566d4b46735c33bc85540c65c94e6a9778c1bf,Integer encoding implemented in dump file. Doc updated
antirez,2009-03-27 21:01:04,https://api.github.com/repos/antirez/redis/git/commits/e9a9afd35ef5a44b89771b41b3e66466c5c42be5,e9a9afd35ef5a44b89771b41b3e66466c5c42be5,feature macros defined to play well with C99
antirez,2009-03-27 21:00:27,https://api.github.com/repos/antirez/redis/git/commits/23d4709dfbdc5d8f669c2e376159ffdfb4d37471,23d4709dfbdc5d8f669c2e376159ffdfb4d37471,feature macros defined to play well with C99
antirez,2009-03-27 20:37:57,https://api.github.com/repos/antirez/redis/git/commits/53f8c2c71e5962eeaccb80d04d2e0ff575d520fd,53f8c2c71e5962eeaccb80d04d2e0ff575d520fd,now Redis is C99-ok
antirez,2009-03-27 20:27:42,https://api.github.com/repos/antirez/redis/git/commits/17be1a4a173461772230716ad99d373a512e8f9e,17be1a4a173461772230716ad99d373a512e8f9e,IMPORTANT FIX: new dump format implementation was broken. Now it's ok but tests for the 32-bit case values are needed
antirez,2009-03-27 19:48:32,https://api.github.com/repos/antirez/redis/git/commits/a4d1ba9a73e459d68423c4da623f8cf1663c70ba,a4d1ba9a73e459d68423c4da623f8cf1663c70ba,ANSI-C compatibility changes
antirez,2009-03-27 11:14:35,https://api.github.com/repos/antirez/redis/git/commits/29fac6170a308c1ed765d4f7edee94985959225c,29fac6170a308c1ed765d4f7edee94985959225c,Ruby client library updated. Important changes in this new version!
antirez,2009-03-26 16:24:53,https://api.github.com/repos/antirez/redis/git/commits/1a4601492cbe55b77fef7c335d6764c278c3595a,1a4601492cbe55b77fef7c335d6764c278c3595a,Lua client added thanks to Daniele Alessandri
antirez,2009-03-26 16:23:51,https://api.github.com/repos/antirez/redis/git/commits/f2aa84bd638b8d18e80531abfd7191f5d0a58c71,f2aa84bd638b8d18e80531abfd7191f5d0a58c71,Lua client added thanks to Daniele Alessandri
antirez,2009-03-26 10:46:14,https://api.github.com/repos/antirez/redis/git/commits/e63943a4502a8173d395ccd273eebf0787090d9c,e63943a4502a8173d395ccd273eebf0787090d9c,"AUTH merged from Brian Hammond fork, reworked a bit to fix minor problems"
fictorial,2009-03-26 03:03:56,https://api.github.com/repos/antirez/redis/git/commits/abcb223ec05740c3534b31e3c756ac0d63f8c07e,abcb223ec05740c3534b31e3c756ac0d63f8c07e,"Adds AUTH command.

$ make
cc -c -O2 -Wall -W -DSDS_ABORT_ON_OOM -g  adlist.c
cc -c -O2 -Wall -W -DSDS_ABORT_ON_OOM -g  ae.c
cc -c -O2 -Wall -W -DSDS_ABORT_ON_OOM -g  anet.c
cc -c -O2 -Wall -W -DSDS_ABORT_ON_OOM -g  dict.c
cc -c -O2 -Wall -W -DSDS_ABORT_ON_OOM -g  redis.c
cc -c -O2 -Wall -W -DSDS_ABORT_ON_OOM -g  sds.c
cc -c -O2 -Wall -W -DSDS_ABORT_ON_OOM -g  zmalloc.c
cc -o redis-server -O2 -Wall -W -DSDS_ABORT_ON_OOM -g adlist.o ae.o anet.o dict.o redis.o sds.o zmalloc.o

Hint: To run the test-redis.tcl script is a good idea.
Launch the redis server with ./redis-server, then in another
terminal window enter this directory and run 'make test'.

cc -c -O2 -Wall -W -DSDS_ABORT_ON_OOM -g  benchmark.c
cc -o redis-benchmark -O2 -Wall -W -DSDS_ABORT_ON_OOM -g ae.o anet.o benchmark.o sds.o adlist.o zmalloc.o
cc -c -O2 -Wall -W -DSDS_ABORT_ON_OOM -g  redis-cli.c
cc -o redis-cli -O2 -Wall -W -DSDS_ABORT_ON_OOM -g anet.o sds.o adlist.o redis-cli.o zmalloc.o

$ tail -1 redis.conf

$ ./redis-server redis.conf &
[1] 52494
$ - Server started, Redis version 0.08
- DB loaded from disk
- The server is now ready to accept connections on port 6379
. 0 clients connected (0 slaves), 1932 bytes in use

$ make test
tclsh test-redis.tcl
DEL all keys to start with a clean DB                                  . Accepted 127.0.0.1:54490
PASSED
SET and GET an item                                                    PASSED
DEL against a single item                                              PASSED
KEYS with pattern                                                      PASSED
KEYS to get all keys                                                   PASSED
DBSIZE                                                                 PASSED
DEL all keys                                                           PASSED
Very big payload in GET/SET                                            PASSED
SET 10000 numeric keys and access all them in reverse order            . DB 0: 10001 keys in 16384 slots HT.
. 1 clients connected (0 slaves), 4885707 bytes in use
PASSED
DBSIZE should be 10001 now                                             PASSED
INCR against non existing key                                          PASSED
INCR against key created by incr itself                                PASSED
INCR against key originally set with SET                               PASSED
SETNX target key missing                                               PASSED
SETNX target key exists                                                PASSED
EXISTS                                                                 PASSED
Zero length value in key. SET/GET/EXISTS                               PASSED
Commands pipelining                                                    PASSED
Non existing command                                                   PASSED
Basic LPUSH, RPUSH, LLENGTH, LINDEX                                    PASSED
DEL a list                                                             PASSED
Create a long list and check every single element with LINDEX          PASSED
Test elements with LINDEX in random access                             PASSED
LLEN against non-list value error                                      PASSED
LINDEX against non-list value error                                    PASSED
LPUSH against non-list value error                                     PASSED
RPUSH against non-list value error                                     PASSED
RENAME basic usage                                                     PASSED
RENAME source key should no longer exist                               PASSED
RENAME against already existing key                                    PASSED
RENAMENX basic usage                                                   PASSED
RENAMENX against already existing key                                  PASSED
RENAMENX against already existing key (2)                              PASSED
RENAME against non existing source key                                 PASSED
RENAME where source and dest key is the same                           PASSED
DEL all keys again (DB 0)                                              PASSED
DEL all keys again (DB 1)                                              PASSED
MOVE basic usage                                                       PASSED
MOVE against key existing in the target DB                             PASSED
SET/GET keys in different DBs                                          PASSED
Basic LPOP/RPOP                                                        PASSED
LPOP/RPOP against empty list                                           PASSED
LPOP against non list value                                            PASSED
Mass LPUSH/LPOP                                                        PASSED
LRANGE basics                                                          PASSED
LRANGE inverted indexes                                                PASSED
LRANGE out of range indexes including the full list                    PASSED
LRANGE against non existing key                                        PASSED
LTRIM basics                                                           PASSED
LSET                                                                   PASSED
LSET out of range index                                                PASSED
LSET against non existing key                                          PASSED
LSET against non list value                                            PASSED
SADD, SCARD, SISMEMBER, SMEMBERS basics                                PASSED
SADD adding the same element multiple times                            PASSED
SADD against non set                                                   PASSED
SREM basics                                                            PASSED
Mass SADD and SINTER with two sets                                     PASSED
SINTERSTORE with two sets                                              PASSED
SINTER against three sets                                              PASSED
SINTERSTORE with three sets                                            PASSED
SAVE - make sure there are all the types as values                     - DB saved on disk
PASSED
Create a random list                                                   . DB 0: 6057 keys in 16384 slots HT.
. DB 1: 3 keys in 16 slots HT.
. 1 clients connected (0 slaves), 1045147 bytes in use
PASSED
SORT with BY against the newly created list                            PASSED
SORT direct, numeric, against the newly created list                   PASSED
SORT decreasing sort                                                   PASSED
SORT speed, sorting 10000 elements list using BY, 100 times
  Average time to sort: 5.28 milliseconds PASSED
SORT speed, sorting 10000 elements list directly, 100 times
  Average time to sort: 1.53 milliseconds PASSED
SORT speed, pseudo-sorting 10000 elements list, BY <const>, 100 times
  Average time to sort: 0.47 milliseconds PASSED
SORT regression for issue #19, sorting floats                          - DB saved on disk
PASSED
LREM, remove all the occurrences                                       - DB saved on disk
PASSED
LREM, remove the first occurrence                                      PASSED
LREM, remove non existing element                                      PASSED
LREM, starting from tail with negative count                           - DB saved on disk
PASSED
LREM, starting from tail with negative count (2)                       PASSED
MGET                                                                   - DB saved on disk
PASSED
MGET against non existing key                                          PASSED
MGET against non-string key                                            PASSED
FLUSHALL                                                               - DB saved on disk
PASSED

79 tests, 79 passed, 0 failed
. Client closed connection
. 0 clients connected (0 slaves), 1347660 bytes in use

$ kill -15 %1
[1]+  Terminated              ./redis-server redis.conf

$ vim redis.conf

$ tail -1 redis.conf
requirepass foobared

$ ./redis-server redis.conf &
[1] 52518
$ - Server started, Redis version 0.08
- DB loaded from disk
- The server is now ready to accept connections on port 6379
. 0 clients connected (0 slaves), 1945 bytes in use

$ make test
tclsh test-redis.tcl
. Accepted 127.0.0.1:54492
DEL all keys to start with a clean DB

ERR operation not permitted

    while executing
""::redis::redis_read_reply $fd""
    (procedure ""::redis::__dispatch__"" line 13)
    invoked from within
""$r keys *""
    (""uplevel"" body line 2)
    invoked from within
""uplevel 1 $code""
    (procedure ""test"" line 4)
    invoked from within
""test {DEL all keys to start with a clean DB} {
        foreach key [$r keys *] {$r del $key}
        $r dbsize
    } {0}""
    (procedure ""main"" line 13)
    invoked from within
""main 127.0.0.1 6379""
    invoked from within
""if {[llength $argv] == 0} {
    main 127.0.0.1 6379
} elseif {[llength $argv] == 1 && [lindex $argv 0] eq {stress}} {
    stress
} else {
    main [li...""
    (file ""test-redis.tcl"" line 630)
. Client closed connection
make: *** [test] Error 1
. 0 clients connected (0 slaves), 2041 bytes in use
. 0 clients connected (0 slaves), 2041 bytes in use

$ kill -15 %1
[1]+  Terminated              ./redis-server redis.conf

$ vim test-redis.tcl

$ git diff test-redis.tcl"
antirez,2009-03-25 20:00:48,https://api.github.com/repos/antirez/redis/git/commits/10c43610dee70032db40008996790bdeb54632b6,10c43610dee70032db40008996790bdeb54632b6,"Nasty bug of the new DB format fixed, objects sharing implemented"
antirez,2009-03-25 15:49:58,https://api.github.com/repos/antirez/redis/git/commits/d9f650b990def521c92fdfe811e423bd5dd4ca4a,d9f650b990def521c92fdfe811e423bd5dd4ca4a,doc update
antirez,2009-03-25 15:49:27,https://api.github.com/repos/antirez/redis/git/commits/916686686f54d78950fd06eac92ace5c5527290f,916686686f54d78950fd06eac92ace5c5527290f,Erlang client synched with Valentiono's repo
antirez,2009-03-25 15:47:22,https://api.github.com/repos/antirez/redis/git/commits/f78fd11b71988ea91bda72f464df6cb7a1a45620,f78fd11b71988ea91bda72f464df6cb7a1a45620,"New file dump format, perl client library added"
antirez,2009-03-24 23:26:47,https://api.github.com/repos/antirez/redis/git/commits/7b45bfb2a4f9bc0296d9126274010a11d1073e8d,7b45bfb2a4f9bc0296d9126274010a11d1073e8d,New protocol fix for LREM
antirez,2009-03-24 20:48:04,https://api.github.com/repos/antirez/redis/git/commits/4e4055779fc46370b2b1b99a0a2b1ff9cfc64013,4e4055779fc46370b2b1b99a0a2b1ff9cfc64013,two typos fixed
antirez,2009-03-24 19:00:15,https://api.github.com/repos/antirez/redis/git/commits/43c9dc7bd273f39522119415318ec750e678748a,43c9dc7bd273f39522119415318ec750e678748a,Now the Redis test uses the proper Tcl client library
antirez,2009-03-24 18:22:45,https://api.github.com/repos/antirez/redis/git/commits/958694375564578103bb053d3845f3d4a89b8e4e,958694375564578103bb053d3845f3d4a89b8e4e,Tcl client library
antirez,2009-03-24 14:22:27,https://api.github.com/repos/antirez/redis/git/commits/4c26a79a8d5eb80c8e68442486d3ebb1905221fc,4c26a79a8d5eb80c8e68442486d3ebb1905221fc,redis-benchmark sync with the new protocol
antirez,2009-03-24 13:22:42,https://api.github.com/repos/antirez/redis/git/commits/9eb00f21f0afd16b311daa0795b1d45ca7da8874,9eb00f21f0afd16b311daa0795b1d45ca7da8874,protocol fix in SORT reply with null elements
antirez,2009-03-24 12:38:25,https://api.github.com/repos/antirez/redis/git/commits/fab3a740ab3f4eb4e5f1697973150f516b7c8d38,fab3a740ab3f4eb4e5f1697973150f516b7c8d38,protocol doc changed
antirez,2009-03-24 12:37:32,https://api.github.com/repos/antirez/redis/git/commits/c937aa89b5835d12a1b5900beaa471908f3a236d,c937aa89b5835d12a1b5900beaa471908f3a236d,"Server replies now in the new format, test-redis.tcl and redis-cli modified accordingly"
antirez,2009-03-24 10:28:34,https://api.github.com/repos/antirez/redis/git/commits/796d05f855f00e0fda05129dd62c39e8670283e7,796d05f855f00e0fda05129dd62c39e8670283e7,"Python client library updated, thanks to Ludo!"
antirez,2009-03-23 23:43:38,https://api.github.com/repos/antirez/redis/git/commits/5a6948fbc02568a26e21c0a69e5e921edef8c1b9,5a6948fbc02568a26e21c0a69e5e921edef8c1b9,"random tested mode for test-redis.tcl, minor other stuff, version switched to 0.8"
antirez,2009-03-23 20:33:15,https://api.github.com/repos/antirez/redis/git/commits/cf3f0c012df3abeee9bc2ec511820c1a859ecfc7,cf3f0c012df3abeee9bc2ec511820c1a859ecfc7,Now MONITOR/SYNC cannot be issued multiple times
antirez,2009-03-23 18:43:39,https://api.github.com/repos/antirez/redis/git/commits/87eca72788a18969f7e350fdbd75ced5a8b8e893,87eca72788a18969f7e350fdbd75ced5a8b8e893,MONITOR command implemented.
antirez,2009-03-23 16:22:24,https://api.github.com/repos/antirez/redis/git/commits/5a039e3b95856ac9e59ce4a522f140b4ec014913,5a039e3b95856ac9e59ce4a522f140b4ec014913,"lucsky changes imported. pid file path can now be configured, redis-cli fixes"
antirez,2009-03-23 16:21:33,https://api.github.com/repos/antirez/redis/git/commits/2a200c784da1c7d33f72e3b92425f029214f70a1,2a200c784da1c7d33f72e3b92425f029214f70a1,Merge git://github.com/lucsky/redis
antirez,2009-03-23 13:50:09,https://api.github.com/repos/antirez/redis/git/commits/092dac2a64f912fe67be2e924c58979b200aa64b,092dac2a64f912fe67be2e924c58979b200aa64b,another missing free->zfree replacement fixed. Thanks to Ludo
lucsky,2009-03-23 11:43:16,https://api.github.com/repos/antirez/redis/git/commits/b91f03a4d14c166bb8ead41e5b556b1080ccd559,b91f03a4d14c166bb8ead41e5b556b1080ccd559,"Fixed redis-cli readLine loop to correctly handle EOF.

When using the shutdown command with redis-cli the server saves the database and, if successful, silently closes the connection. The redis-cli tool did not correcty handle this EOF case in its readLine loop and was therefore infinitely looping - and eating 100% of the CPU - while waiting for some data which would never come."
lucsky,2009-03-23 11:42:10,https://api.github.com/repos/antirez/redis/git/commits/46713f83d46babbc9ad48d11c52cd954a8553846,46713f83d46babbc9ad48d11c52cd954a8553846,Display the port on server startup.
lucsky,2009-03-23 11:31:33,https://api.github.com/repos/antirez/redis/git/commits/ed329fcf25bb1c41949678eec125034326f86af2,ed329fcf25bb1c41949678eec125034326f86af2,Allow to specify the pid file from the config file.
lucsky,2009-03-23 11:28:28,https://api.github.com/repos/antirez/redis/git/commits/db52edaa0d6bcb455e46703ed082f80157723178,db52edaa0d6bcb455e46703ed082f80157723178,Added gitignore file.
antirez,2009-03-22 14:27:09,https://api.github.com/repos/antirez/redis/git/commits/5b19bd7238d6036c2e920f26ba29704d83773057,5b19bd7238d6036c2e920f26ba29704d83773057,MGET tests added
antirez,2009-03-22 14:15:51,https://api.github.com/repos/antirez/redis/git/commits/e255235c20d1fae95dee3b93584b3cc277c0c79c,e255235c20d1fae95dee3b93584b3cc277c0c79c,doc changes
antirez,2009-03-22 14:08:06,https://api.github.com/repos/antirez/redis/git/commits/029524dbff9b076a5d1b7b97428981519e34886b,029524dbff9b076a5d1b7b97428981519e34886b,added doc for MGET
antirez,2009-03-22 13:59:05,https://api.github.com/repos/antirez/redis/git/commits/a74f2af61cb83e104cc9cc5ebd9292f14b6802fa,a74f2af61cb83e104cc9cc5ebd9292f14b6802fa,redis-cli now checks the arity of vararg commnads
antirez,2009-03-22 13:54:14,https://api.github.com/repos/antirez/redis/git/commits/70003d28b8d7430f9e0104575e7160be2f264602,70003d28b8d7430f9e0104575e7160be2f264602,"INFO fixed, MGET implemented, redis-cli implements INFO/MGET"
antirez,2009-03-22 09:30:00,https://api.github.com/repos/antirez/redis/git/commits/ed9b544e10b84cd43348ddfab7068b610a5df1f7,ed9b544e10b84cd43348ddfab7068b610a5df1f7,first commit
