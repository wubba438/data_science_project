benchmark,A microbenchmark support library
username,timestamp,url,sha,message
sharpe5,2019-09-16 08:05:05,https://api.github.com/repos/google/benchmark/git/commits/bf4f2ea0bd1180b34718ac26eb79b170a4f6290e,bf4f2ea0bd1180b34718ac26eb79b170a4f6290e,"Addresses issue #634. (#866)

* Update with instructions to build under Visual Studio

Fixes Issue #634.

I spent 3 days trying to build this library under Visual Studio 2017, only to discover on has to link to `Shlwapi.lib`.

Became so frustrated with the docs that I added full build instructions for Visual Studio 2015, 2017 and Intel Comiler 2015 and 2019.

* Update headings"
ambitslix,2019-09-15 17:25:32,https://api.github.com/repos/google/benchmark/git/commits/ef7d51c8ebf6fdc10687b4e9eaa48c72461e771d,ef7d51c8ebf6fdc10687b4e9eaa48c72461e771d,"Allow setting GOOGLETEST_PATH cmake argument. Fixes #867 (#868)

In `cmake/GoogleTest.cmake`, GOOGLETEST_PATH is default-initialized, but that init forgot to
account for the fact that the patch is explicitly supposed to be user-configurable.
By passing `CACHE` to `set()` we avoid that error."
aerosayan,2019-08-21 21:12:03,https://api.github.com/repos/google/benchmark/git/commits/7ee72863fdb1ccb2af5a011250b56af3f49b7511,7ee72863fdb1ccb2af5a011250b56af3f49b7511,"Remove unused `doc` argument from `DEFINE_` macros. (#857)

- Adresses : #856

  - The unused `doc` argument was removed from the `DEFINE_` macros in
    `commandlineflags.h`

  - Converted all the previous `doc` strings passed to the `DEFINE_`
    macros to multiline comments."
aerosayan,2019-08-21 20:53:15,https://api.github.com/repos/google/benchmark/git/commits/67853d3ed844fb1a2f9d47886a6820db448703b0,67853d3ed844fb1a2f9d47886a6820db448703b0,"Add .gitignore rule to ignore temporary .swp backup files created by vim. (#859)

- Addresses : #858

  - Rule `*.swp` is added to `.gitignore` to ensure that the vim temporary
    `.swp` backup files are ignored and they don't pollute the results of
    `git status -u`."
aerosayan,2019-08-21 16:51:31,https://api.github.com/repos/google/benchmark/git/commits/ffadb65d3a17452b2bd08951d1bce6b0f6bf65d9,ffadb65d3a17452b2bd08951d1bce6b0f6bf65d9,"Documentation of basic use of DenseRange. (#855)

Documentation of basic use of `DenseRange` was added to README.md."
LebedevRI,2019-08-21 12:14:27,https://api.github.com/repos/google/benchmark/git/commits/3523f11d36caf2ffe4acffe2e9fb15775cec8112,3523f11d36caf2ffe4acffe2e9fb15775cec8112,"Update README.md: fix MS VS version requirement

VS2013 is unsupported since https://github.com/google/benchmark/pull/691 / https://github.com/google/benchmark/commit/eb8cbec0776455463274ea9947ab0ecfe0f768fe
but i forgot to update docs.
References:
* https://github.com/google/benchmark/issues/689
* https://github.com/google/benchmark/pull/691
* https://github.com/google/googletest/pull/1815
* https://github.com/google/benchmark/issues/853
* https://github.com/google/benchmark/pull/854"
LebedevRI,2019-08-12 14:47:46,https://api.github.com/repos/google/benchmark/git/commits/7d97a057e16597e8020d0aca110480fe82c9ca67,7d97a057e16597e8020d0aca110480fe82c9ca67,"Custom user counters: add invert modifier. (#850)

While current counters can e.g. answer the question
""how many items is processed per second"", it is impossible to get
it to tell ""how many seconds it takes to process a single item"".

The solution is to add a yet another modifier `kInvert`,
that is *always* considered last, which simply inverts the answer.

Fixes #781, #830, #848."
EricWF,2019-08-07 19:55:40,https://api.github.com/repos/google/benchmark/git/commits/c408461983dd3adf49d450d7db926fc46f1d99a0,c408461983dd3adf49d450d7db926fc46f1d99a0,"Disable deprecated warnings when touching CSVReporter internally.

The CSVReporter is deprecated, but we still need to reference it in
a few places. To avoid breaking the build when warnings are errors,
we need to disable the warning when we do so."
LesnyRumcajs,2019-08-06 10:36:36,https://api.github.com/repos/google/benchmark/git/commits/140fc22ab22c770b44228ec6b38c745fc610269d,140fc22ab22c770b44228ec6b38c745fc610269d,"Corrected the installation procedure (#849)

* Corrected the installation procedure

Now it can be put into a script.

* Updated the file tree

Necessary after installation instruction change"
tabokie,2019-07-30 06:03:15,https://api.github.com/repos/google/benchmark/git/commits/140db8a22901f666577b7516febf184e9764f4e2,140db8a22901f666577b7516febf184e9764f4e2,fix typo in README (#844)
blackliner,2019-07-29 20:59:25,https://api.github.com/repos/google/benchmark/git/commits/66482d538d6c6041b29ab6a95cf5b6d561fbd306,66482d538d6c6041b29ab6a95cf5b6d561fbd306,"README.md: corrected cmake commands (#846)

* corrected cmake commands

* Update README.md"
froexilize,2019-07-29 20:59:06,https://api.github.com/repos/google/benchmark/git/commits/ff7e2d45a5a016a7c54f6ce385efc59b3d975598,ff7e2d45a5a016a7c54f6ce385efc59b3d975598,README.md: Spelling fix (#845)
EricBackus,2019-07-27 16:02:31,https://api.github.com/repos/google/benchmark/git/commits/32a1e3972014c27b683945f45a2b4a37ab1040c1,32a1e3972014c27b683945f45a2b4a37ab1040c1,"Bugfix/wsl selftest fixes. Fixes #839 (#843)

* Update AUTHORS and CONTRIBUTORS

* Fix WSL self-test failures

Some of the benchmark self-tests expect and check for a particular
output format from the benchmark library. The numerical values must
not be infinity or not-a-number, or the test will report an error.
Some of the values are computed bytes-per-second or items-per-second
values, so these require that the measured CPU time for the test to be
non-zero. But the loop that is being measured was empty, so the
measured CPU time for the loop was extremely small. On systems like
Windows Subsystem for Linux (WSL) the timer doesn't have enough
resolution to measure this, so the measured CPU time was zero.

This fix just makes sure that these tests have something within the
timing loop, so that the benchmark library will not decide that the
loop takes zero CPU time. This makes these tests more robust, and in
particular makes them pass on WSL."
LebedevRI,2019-07-22 12:42:12,https://api.github.com/repos/google/benchmark/git/commits/8e48105d465c586068dd8e248fe75a8971c6ba3a,8e48105d465c586068dd8e248fe75a8971c6ba3a,"CMake; windows: link to lowercase 'shlwapi' - consistent with headers (#840)

The filenames are consistently inconsistent in windows world, might
have something to do with default file system being case-insensitive.
While the native MinGW buils were fixed in 52613079824ac58d06c070aa9fbbb186a5859e2c
that only addressed the headers, but not libraries.
The problem remains when one tries to do a MinGW cross-build from
case-sensitive filesystem."
Jason-Cooke,2019-07-17 07:01:07,https://api.github.com/repos/google/benchmark/git/commits/df4f9fe36232934eea06d4c22a8619d5eb2dd2e2,df4f9fe36232934eea06d4c22a8619d5eb2dd2e2,docs: fix typo (#837)
lenary,2019-07-05 08:28:17,https://api.github.com/repos/google/benchmark/git/commits/4abdfbb802d1b514703223f5f852ce4a507d32d2,4abdfbb802d1b514703223f5f852ce4a507d32d2,"Add RISC-V support in cycleclock::Now (#833)

The RISC-V implementation of `cycleclock::Now` uses the user-space
`rdcycle` instruction to query how many cycles have happened since the
core started.

The only complexity here is on 32-bit RISC-V, where `rdcycle` can only
read the lower 32 bits of the 64-bit hardware counter. In this case,
`rdcycleh` reads the higher 32 bits of the counter. We match the powerpc
implementation to detect and correct for overflow in the high bits."
orgads,2019-06-26 08:06:24,https://api.github.com/repos/google/benchmark/git/commits/04a9343fc9b7886591c65933b94d0cee7a915452,04a9343fc9b7886591c65933b94d0cee7a915452,"Make some functions const (#832)

and ThreadManager ctor explicit.

Reported by CppCheck."
LebedevRI,2019-05-13 19:41:42,https://api.github.com/repos/google/benchmark/git/commits/090faecb454fbd6e6e17a75ef8146acb037118d4,090faecb454fbd6e6e17a75ef8146acb037118d4,"Use IterationCount in one more place

Found in -UNDEBUG build"
LebedevRI,2019-05-13 09:33:11,https://api.github.com/repos/google/benchmark/git/commits/f92903cc5338daed898242f22015d8426c065770,f92903cc5338daed898242f22015d8426c065770,"Iteration counts should be `uint64_t` globally. (#817)

This is a shameless rip-off of https://github.com/google/benchmark/pull/646
I did promise to look into why that proposed PR was producing
so much worse assembly, and so i finally did.

The reason is - that diff changes `size_t` (unsigned) to `int64_t` (signed).

There is this nice little `assert`:
https://github.com/google/benchmark/blob/7a1c37028359ca9d386d719a6ad527743cf1b753/include/benchmark/benchmark.h#L744
It ensures that we didn't magically decide to advance our iterator
when we should have finished benchmarking.

When `cached_` was unsigned, the `assert` was `cached_ UGT 0`.
But we only ever get to that `assert` if `cached_ NE 0`,
and naturally if `cached_` is not `0`, then it is bigger than `0`,
so the `assert` is tautological, and gets folded away.

But now that `cached_` became signed, the assert became `cached_ SGT 0`.
And we still only know that `cached_ NE 0`, so the assert can't be
optimized out, or at least it doesn't currently.

Regardless of whether or not that is a bug in itself,
that particular diff would have regressed the normal 64-bit systems,
by halving the maximal iteration space (since we go from unsigned counter
to signed one, of the same bit-width), which seems like a bug.
And just so it happens, fixing *this* bug, fixes the other bug.

This produces fully (bit-by-bit) identical state_assembly_test.s
The filecheck change is actually needed regardless of this patch,
else this test does not pass for me even without this diff."
LebedevRI,2019-05-11 15:56:57,https://api.github.com/repos/google/benchmark/git/commits/2e7203aa94bf49cdfb60e58a7694784260bc6cc5,2e7203aa94bf49cdfb60e58a7694784260bc6cc5,"CMake: check CMAKE_CXX_COMPILER_ID, not CMAKE_C_COMPILER_ID

This may or may not have gotten broken now that benchmark was marked as CXX-only."
janisozaur,2019-05-10 16:56:08,https://api.github.com/repos/google/benchmark/git/commits/12c978c51343a0376903a99c6435bdf52138a952,12c978c51343a0376903a99c6435bdf52138a952,"Mark CMake project as C++-only (#681)

This will make CMake skip all the checks for C compiler."
janisozaur,2019-05-09 22:22:13,https://api.github.com/repos/google/benchmark/git/commits/b988639f316ed0aca69297effbf67015c3bf0640,b988639f316ed0aca69297effbf67015c3bf0640,"Fix compilation for Android (#816)

Android doesn't support `getloadavg`"
LebedevRI,2019-05-07 23:06:50,https://api.github.com/repos/google/benchmark/git/commits/33d440465041fe83b831f537b9646756655806f0,33d440465041fe83b831f537b9646756655806f0,"Don't read CMAKE_BUILD_TYPE if it is not there (#811)

Weird, but seems consistent with the rest of cmake here."
chenshuo,2019-05-01 20:00:10,https://api.github.com/repos/google/benchmark/git/commits/7d856b03047e7bf09ccc9e9878e299493541b468,7d856b03047e7bf09ccc9e9878e299493541b468,"If gtest targets are already defined, use them. (#777)

This allows a project to include both googletest and benchmark as top-level git submodule.

This allows incorporating Benchmark to an existing CMake project that already incorporates googletest.
https://github.com/google/googletest/blob/master/googletest/README.md#incorporating-into-an-existing-cmake-project
https://github.com/abseil/abseil-cpp/tree/master/CMake#incorporating-abseil-into-a-cmake-project"
lockywolf,2019-05-01 08:13:33,https://api.github.com/repos/google/benchmark/git/commits/823d24630db0f340914bb011f1ba31657348e510,823d24630db0f340914bb011f1ba31657348e510,"Add support for GNU Install Dirs from GNU Coding Standards. Fixes #807 (#808)

* Add support for GNU Install Dirs from GNU Coding Standards

* src/CMakeLists.txt: Added support for setting the standard variables,
                      such as CMAKE_INSTALL_BINDIR.

* Replace install destinations by the ones from GNU Coding Standards.

* Set the default .cmake and .pc default path."
dominichamon,2019-05-01 08:06:12,https://api.github.com/repos/google/benchmark/git/commits/13b8bdc2b51805c3ccd666a511ae092784b1c20e,13b8bdc2b51805c3ccd666a511ae092784b1c20e,Bump required cmake version from 2.x to 3.x (#801)
LebedevRI,2019-04-30 18:07:01,https://api.github.com/repos/google/benchmark/git/commits/94115f441909ad7478d1439c01395a9b78f8a23e,94115f441909ad7478d1439c01395a9b78f8a23e,"Revert ""Travis-ci: more correctly pass -m32 to 32-bit jobs""

Very interesting, i was completely not expecting to see that cmake
failure from https://github.com/google/benchmark/pull/801 *here*.

This reverts commit 7da47d039dde28ad96e1e62ddfec85d746134738."
LebedevRI,2019-04-16 11:12:37,https://api.github.com/repos/google/benchmark/git/commits/7da47d039dde28ad96e1e62ddfec85d746134738,7da47d039dde28ad96e1e62ddfec85d746134738,"Travis-ci: more correctly pass -m32 to 32-bit jobs

Generally we can't just add -m32 in the middle of the build.
It currently just happens to work, but that is not guaranteed."
LebedevRI,2019-04-30 16:32:38,https://api.github.com/repos/google/benchmark/git/commits/727a81aabd1354c07eac652da7671b0b7192bfa7,727a81aabd1354c07eac652da7671b0b7192bfa7,"CMake: avoid incorrect extra """" around the GOOGLETEST_PATH.

It was looking in `""<...>/googlebenchmark/build/third_party/googletest""`,
with these extra `""` quotes, and wasn't finding anything.."
LebedevRI,2019-04-30 10:36:29,https://api.github.com/repos/google/benchmark/git/commits/4b771940329acf371037e55b88730cdf9fbe391e,4b771940329acf371037e55b88730cdf9fbe391e,"CMake: codedrop of googletest cmake magic from me (#809)

https://github.com/google/benchmark/pull/801 is stuck with some cryptic cmake failure due to
some linking issue between googletest and threading libraries.

I suspect that is mostly happening because of the, uhm,
intentionally extremely twisted-in-the-brains approach that is being used to
actually build the library as part of the buiild,
except without actually building it as part of the build.

If we do actually build it as part of the build,
then all the transitive dependencies should magically be in order,
and maybe everything will just work.

This new version of cmake magic was written by me in
https://github.com/darktable-org/rawspeed/blob/0e22f085c57cd629983c7351c598abd744b421b5/cmake/Modules/GoogleTest.cmake.in
https://github.com/darktable-org/rawspeed/blob/0e22f085c57cd629983c7351c598abd744b421b5/cmake/Modules/GoogleTest.cmake, based on the official googletest docs and LOTS of experimentation."
AlexSteele,2019-04-25 11:48:56,https://api.github.com/repos/google/benchmark/git/commits/05d8c1c5d09028a39306c368791c0aa545ad19e7,05d8c1c5d09028a39306c368791c0aa545ad19e7,"Improve README (#804)

* Update and organize README

* Update AUTHORS and CONTRIBUTORS

Fixes #803."
tesch1,2019-04-19 17:47:25,https://api.github.com/repos/google/benchmark/git/commits/588be0446a9cc96315ffde428dd2a4fecfb8c44d,588be0446a9cc96315ffde428dd2a4fecfb8c44d,"escape special chars in csv and json output. (#802)

* escape special chars in csv and json output.

- escape \b,\f,\n,\r,\t,\,"" from strings before dumping
  them to json or csv.
- also faithfully reproduce the sign of nan in json.
this fixes github issue #745.

* functionalize.

* split string escape functions between csv and json

* Update src/csv_reporter.cc

Co-Authored-By: tesch1 <tesch1@gmail.com>

* Update src/json_reporter.cc

Co-Authored-By: tesch1 <tesch1@gmail.com>"
dominichamon,2019-04-17 16:08:52,https://api.github.com/repos/google/benchmark/git/commits/1d41de84633bf40ddf0ad50165d77200e3d8b5fd,1d41de84633bf40ddf0ad50165d77200e3d8b5fd,"Add command line flags tests (#793)

Increase coverage"
h-2,2019-04-11 15:36:11,https://api.github.com/repos/google/benchmark/git/commits/415835e03e5e78b5c17b450903c553a079214879,415835e03e5e78b5c17b450903c553a079214879,"fix master branch on *BSD (#792)

* fix master branch on *BSD

* add name to CONTRIBUTORS"
JBakamovic,2019-04-11 09:48:29,https://api.github.com/repos/google/benchmark/git/commits/56fd56dc02a348f717461ffdaa8673a97bfbdb82,56fd56dc02a348f717461ffdaa8673a97bfbdb82,"Refactor U-Test calculation into separate function. (#740)

* Refactor U-Test calculation into separate function.

And implement 'print_utest' functionality in terms of it.

* Change 'optimal_repetitions' to 'more_optimal_repetitions'."
dominichamon,2019-04-09 12:02:45,https://api.github.com/repos/google/benchmark/git/commits/c5b2fe9357b3862b7f99b94d7999002dcf269faf,c5b2fe9357b3862b7f99b94d7999002dcf269faf,Load http_archive for bazel build
bryan-lunt,2019-04-09 12:01:33,https://api.github.com/repos/google/benchmark/git/commits/7a1c37028359ca9d386d719a6ad527743cf1b753,7a1c37028359ca9d386d719a6ad527743cf1b753,"Add process_time for better OpenMP and user-managed thread timing

* Google Benchmark now works with OpenMP and other user-managed threading."
LebedevRI,2019-04-08 09:38:11,https://api.github.com/repos/google/benchmark/git/commits/30bd6ea7f8c678ec105a65add605a0c3c1107a44,30bd6ea7f8c678ec105a65add605a0c3c1107a44,Fix .clang-format
JoeLoser,2019-04-05 10:43:47,https://api.github.com/repos/google/benchmark/git/commits/3bc802e47c430b144123160484d00adbbe70214d,3bc802e47c430b144123160484d00adbbe70214d,"Silence CMake Policy 0063 warning (#790)

Summary:
- When google benchmark is used as a submodule in a parent projects
  whose min CMake version is 3.3.2 or later, the google benchmark
  `CMakeLists.txt` triggers a warning regarding CMake policy 0063:

```
CMake Warning (dev) at tests/googlebenchmark/src/CMakeLists.txt:19 (add_library):
  Policy CMP0063 is not set: Honor visibility properties for all target
  types.  Run ""cmake --help-policy CMP0063"" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  Target ""benchmark"" of type ""STATIC_LIBRARY"" has the following visibility
  properties set for CXX:

    CXX_VISIBILITY_PRESET
    VISIBILITY_INLINES_HIDDEN

  For compatibility CMake is not honoring them for this target.
This warning is for project developers.  Use -Wno-dev to suppress it.
```

- Set CMake Policy 0063 to NEW if the policy is available. This will not
  affect parent projects who include benchmark but do not have a CMake min
  version of 3.3.2 or later, i.e. when this policy is introduced."
dominichamon,2019-03-28 10:53:47,https://api.github.com/repos/google/benchmark/git/commits/6a5c379cafef3b49314b600bec6a928ebb2f209a,6a5c379cafef3b49314b600bec6a928ebb2f209a,Set theme jekyll-theme-midnight
dominichamon,2019-03-28 10:49:40,https://api.github.com/repos/google/benchmark/git/commits/64dcec387a76f98066ee43e85a2ba3cb52f48941,64dcec387a76f98066ee43e85a2ba3cb52f48941,Set theme jekyll-theme-midnight
danielharvey458,2019-03-26 10:50:53,https://api.github.com/repos/google/benchmark/git/commits/e3666568a90b4f0e72b85252e5a64d9f1bcfca0a,e3666568a90b4f0e72b85252e5a64d9f1bcfca0a,"Negative ranges #762 (#787)

* Add FIXME in multiple_ranges_test.cc

* Improve handling of large bounds in AddRange.

Due to breaking the loop too early, AddRange
would miss a final multplier of 'mult' that
was within the numeric range of T.

* Enable negative values for Range argument

Fixes #762.

* Try to fix build of benchmark_gtest

* Try some more to fix build

* Attempt to fix format macros

* Attempt to resolve format errors for mingw32

* Review feedback

Put unit tests in benchmark::internal namespace

Fix error reporting in multiple_ranges_test.cc"
BaaMeow,2019-03-26 09:53:07,https://api.github.com/repos/google/benchmark/git/commits/478eafa36bb8763e04c61d88bb2b8e9fa3440b82,478eafa36bb8763e04c61d88bb2b8e9fa3440b82,"[JSON] add threads and repetitions to the json output (#748)

* [JSON] add threads and repetitions to the json output, for better ide…
[Tests] explicitly check for thread == 1
[Tests] specifically mark all repetition checks
[JSON] add repetition_index reporting, but only for non-aggregates (i…

* [Formatting] Be very, very explicit about pointer alignment so clang-format can not put pointers/references on the wrong side of arguments.
[Benchmark::Run] Make sure to use explanatory sentinel variable rather than a magic number.

* Do not pass redundant information"
tesch1,2019-03-19 10:12:54,https://api.github.com/repos/google/benchmark/git/commits/fae87266906c10fc055eb270eddc622404696e63,fae87266906c10fc055eb270eddc622404696e63,Replace JSON inf and nan with JS compliant Infinity and NaN
LebedevRI,2019-03-17 15:48:35,https://api.github.com/repos/google/benchmark/git/commits/5acb0f05ed4938ac3140918048cfe1da2b5c6951,5acb0f05ed4938ac3140918048cfe1da2b5c6951,"Travis-ci: fix clang+libc++ build (#783)

It broke because the libc++ is being built as part of *this*
build, with old gcc+libstdc++ (4.8?), but LLVM is preparing
to switch to C++14, and gcc+libstdc++ <5 are soft-deprecated.

Just the gcc update doesn't cut it, clang still uses old libstdc++."
danielharvey458,2019-03-17 13:38:51,https://api.github.com/repos/google/benchmark/git/commits/f6e96861a373c90ea0c727177fc68d2984e048bb,f6e96861a373c90ea0c727177fc68d2984e048bb,"BENCHMARK_CAPTURE() and Complexity() - naming problem (#761)

Created BenchmarkName class which holds the full benchmark
name and allows specifying and retrieving different components
of the name (e.g. ARGS, THREADS etc.)

Fixes #730."
LebedevRI,2019-03-06 15:13:22,https://api.github.com/repos/google/benchmark/git/commits/df7c7ee1d37dda0fb597586b4624515166a778d0,df7c7ee1d37dda0fb597586b4624515166a778d0,"[Tooling] report.py: whoops, don't ignore the rest of benches after a bad one.

Refs #779."
LebedevRI,2019-03-06 14:22:28,https://api.github.com/repos/google/benchmark/git/commits/f62c63b14f87688f0d66deafecafb1a8a2872e0c,f62c63b14f87688f0d66deafecafb1a8a2872e0c,"[Tooling] report.py: don't crash on BigO/RMS benchmarks

Run into this by accident while writing benchmark to validate
the fix for https://bugs.llvm.org/show_bug.cgi?id=40965

Fixes #779."
jilinzhou,2019-02-28 10:42:44,https://api.github.com/repos/google/benchmark/git/commits/d205ead299c7cddd5e1bc3478d57ad4320a4a53c,d205ead299c7cddd5e1bc3478d57ad4320a4a53c,"[#774] implement GetNumCPUs(), GetCPUCyclesPerSecond(), and GetCacheSizes() (#775)

- On qnx platform, cpu and cache info is stored in a syspage struct which
  is different from other OS platform.
- The fix has been verified on an aarch64 target running qnx 7.0.
Fixes #774"
jilinzhou,2019-02-19 13:05:55,https://api.github.com/repos/google/benchmark/git/commits/0ae233ab23c560547bf85ce1346580966e799861,0ae233ab23c560547bf85ce1346580966e799861,"[#766] add x-compile support for QNX SDP7 (#770)

Since googletest already supports x-compilation for QNX, it is nice to
 have google benchmark support it too.
Fixes #766"
wesm,2019-02-19 12:32:11,https://api.github.com/repos/google/benchmark/git/commits/7c571338b5cb13c2e3f5ce9106175c49c149c4a5,7c571338b5cb13c2e3f5ce9106175c49c149c4a5,Prefer -pthread to -lpthread for better compatibility when cross-compiling (#771)
LebedevRI,2019-02-04 13:26:51,https://api.github.com/repos/google/benchmark/git/commits/b8ca0c42179b7b5d656494e61dda8b861057122f,b8ca0c42179b7b5d656494e61dda8b861057122f,README.md: mention that fixture has SetUp() / TearDown()
domob1812,2019-02-01 12:51:44,https://api.github.com/repos/google/benchmark/git/commits/97393e5ef820fda0330830d56c774949b4cfbb29,97393e5ef820fda0330830d56c774949b4cfbb29,"Add -lpthread to pkg-config Libs.private. (#755)

Since pthread is required at least for GCC (according to the
documentation), this should be reflected by the pkg-config file.

The same is, for instance, also done by the gflags library:
https://github.com/gflags/gflags/blob/1005485222e8b0feff822c5723ddcaa5abadc01a/cmake/package.pc.in#L13"
dominichamon,2019-01-15 13:19:36,https://api.github.com/repos/google/benchmark/git/commits/785e2c3158589e8ef48c59ba80e48d76bdbd8902,785e2c3158589e8ef48c59ba80e48d76bdbd8902,Move Statistics struct to internal namespace (#753)
berestovskyy,2019-01-13 14:26:49,https://api.github.com/repos/google/benchmark/git/commits/4b9f43e2c4ea559c59f5d86561c02207008a15ac,4b9f43e2c4ea559c59f5d86561c02207008a15ac,"Fix header lines length (#752)

Commit 17a012d7 added a newline to the str, so the line built from
str.length() is one character longer than it should be."
Croydon,2019-01-03 13:42:07,https://api.github.com/repos/google/benchmark/git/commits/eec9a8e4976a397988c15e5a4b71a542375a2240,eec9a8e4976a397988c15e5a4b71a542375a2240,Add minimal Conan support (#728)
rnk,2018-12-30 17:46:07,https://api.github.com/repos/google/benchmark/git/commits/dc1064554905deca47386bdfc4b72f44c1bd7716,dc1064554905deca47386bdfc4b72f44c1bd7716,"Set CMP0048 policy before project() to silence warnings (#750)

If this policy isn't set, CMake emits a large warning when project() is
called from a cmake subdirectory.

This came up when the benchmark library was added to the LLVM build, and
it was reported in https://llvm.org/PR38874. This patch was the fix I
applied locally to fix the issue, and I wanted to send it upstream."
EricWF,2018-12-14 03:49:21,https://api.github.com/repos/google/benchmark/git/commits/4528c76b718acc9b57956f63069c699ae21edcab,4528c76b718acc9b57956f63069c699ae21edcab,"Print at least three significant digits for times. (#701)

Some benchmarks are particularly sensitive and they run in less than
a nanosecond. In order for the console reporter to provide meaningful
output for such benchmarks it needs to be able to display the times
using more resolution than a single nanosecond.

This patch changes the console reporter to print at least three
significant digits for all results.

Unlike the initial attempt, this patch does not align the decimal point."
LebedevRI,2018-12-13 22:20:01,https://api.github.com/repos/google/benchmark/git/commits/57bf879d494f4b070f4a403754bb4fa077977dcc,57bf879d494f4b070f4a403754bb4fa077977dcc,"README.md: document State::{Pause,Resume}Timing()

As pointed out in IRC, these are not documented."
dominichamon,2018-12-13 11:14:50,https://api.github.com/repos/google/benchmark/git/commits/0ed529a7e3701539ebf12b206670cb9707ba185f,0ed529a7e3701539ebf12b206670cb9707ba185f,"Update documentation of benchmark_filter (#744)

It should now match reality."
jatinx,2018-12-11 11:23:02,https://api.github.com/repos/google/benchmark/git/commits/47a5f77d754892f20b8c717ead26de836e0bb552,47a5f77d754892f20b8c717ead26de836e0bb552,"#722 Adding Host Name in Reporting (#733)

* Adding Host Name and test

* Addressing Review Comments

* Adding Test for JSON Reporter

* Adding HOST_NAME_MAX for MacOS systems

* Adding Explaination for MacOS HOST_NAME_MAX Addition

* Addressing Peer Review Comments

* Adding codecvt in windows header guard

* Changing name SystemInfo and adding empty message incase host name fetch fails

* Adding Comment on Struct SystemInfo"
ulvgard,2018-12-10 15:15:34,https://api.github.com/repos/google/benchmark/git/commits/1f3cba06e4f50bc35aa24941b58ae41fc2ada40e,1f3cba06e4f50bc35aa24941b58ae41fc2ada40e,Update reference to complexity calculation (#723)
Sigill,2018-12-10 10:24:22,https://api.github.com/repos/google/benchmark/git/commits/5cb8f8a03d63f157e47c4146dec40433d1046bb3,5cb8f8a03d63f157e47c4146dec40433d1046bb3,"Fix signed vs unsigned comparisons in string_util unit tests (#742)

Unit-tests fail to build due to the following errors:

/home/cfx/Dev/google-benchmark/benchmark.git/test/string_util_gtest.cc:12:5: required from here
/home/cfx/Applications/googletest-1.8.1/include/gtest/gtest.h:1444:11: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
   if (lhs == rhs) {
       ~~~~^~~~~~

Fixes #741"
JBakamovic,2018-12-07 13:34:00,https://api.github.com/repos/google/benchmark/git/commits/eee8b05c97d7b832bf67d6e000958d012ab30165,eee8b05c97d7b832bf67d6e000958d012ab30165,[tools] Run autopep8 and apply fixes found. (#739)
EricWF,2018-11-30 03:51:44,https://api.github.com/repos/google/benchmark/git/commits/eafa34a5e80c352b078307be312d3fafd0a5d13e,eafa34a5e80c352b078307be312d3fafd0a5d13e,"Remove use of std::tmpnam. (#734)

std::tmpnam is deprecated and its use is discouraged. For our purposes
in the tests, we really just need a file name which is unlikely to
exist.

This patch converts the tests to using a dummy random file name
generator, which should hopefully avoid name conflicts."
LebedevRI,2018-11-28 22:23:25,https://api.github.com/repos/google/benchmark/git/commits/19f7d5c2bcc98d34f4dadad04cc3c979589fc3ae,19f7d5c2bcc98d34f4dadad04cc3c979589fc3ae,README.md: complexity lambda takes int64_t arg. Fixes #719
LebedevRI,2018-11-27 00:55:05,https://api.github.com/repos/google/benchmark/git/commits/c9f2693ea97e94c8afcefb57d3074c6a6236ca23,c9f2693ea97e94c8afcefb57d3074c6a6236ca23,"StrFormat() is a printf-like function, mark it as such, fix fallout. (#727)

Fixes #714."
LebedevRI,2018-11-26 12:39:36,https://api.github.com/repos/google/benchmark/git/commits/c9311a44e1280853632fe2472345dd04514a2f74,c9311a44e1280853632fe2472345dd04514a2f74,"README.md: BM_Sequential(): the return type is 'void'

Used that example as a snippet, and it took a moment to notice
what needed to be changed to make it compile.."
traceon,2018-11-22 02:38:25,https://api.github.com/repos/google/benchmark/git/commits/56f5cd6a729280ba7639574bd49a2bf4be7f1c4b,56f5cd6a729280ba7639574bd49a2bf4be7f1c4b,Fix C++17 mode compilation with Apple clang (#721)
dominichamon,2018-11-13 10:14:28,https://api.github.com/repos/google/benchmark/git/commits/b1717916d1acafbd0753c145f30f76b06f2933e5,b1717916d1acafbd0753c145f30f76b06f2933e5,Merge branch 'atdt-report_loadavg'
dominichamon,2018-11-13 10:13:58,https://api.github.com/repos/google/benchmark/git/commits/b5082bbd65e869929dfbd04f70fc668c149a1aa6,b5082bbd65e869929dfbd04f70fc668c149a1aa6,Merge branch 'report_loadavg' of https://github.com/atdt/benchmark into atdt-report_loadavg
dominichamon,2018-11-13 09:56:22,https://api.github.com/repos/google/benchmark/git/commits/bb15a4e3bf4c5941ee7124d284ed9ef96e9a1c68,bb15a4e3bf4c5941ee7124d284ed9ef96e9a1c68,Ensure all informational cmake messages have STATUS type
kirillbobyrev,2018-11-02 16:03:49,https://api.github.com/repos/google/benchmark/git/commits/a9b31c51b1ee7ec7b31438c647123c2cbac5d956,a9b31c51b1ee7ec7b31438c647123c2cbac5d956,"Disable exceptions in Microsoft STL (#715)

This is the copy of patch proposed to LLVM's copy of benchmark via
https://reviews.llvm.org/D52998."
gladk,2018-10-21 08:01:42,https://api.github.com/repos/google/benchmark/git/commits/c6193afe7eb1eb7802e34833e55e1528cb65c533,c6193afe7eb1eb7802e34833e55e1528cb65c533,"Fix parsing of cpuinfo for s390 platform. (#712)

s390 has another line structure for processor-field.
It should be differently parsed."
LebedevRI,2018-10-18 14:17:14,https://api.github.com/repos/google/benchmark/git/commits/507c06e636e0d21ca900024df464e965d3e1b669,507c06e636e0d21ca900024df464e965d3e1b669,"Aggregates: use non-aggregate count as iteration count. (#706)

It is incorrect to say that an aggregate is computed over
run's iterations, because those iterations already got averaged.
Similarly, if there are N repetitions with 1 iterations each,
an aggregate will be computed over N measurements, not 1.
Thus it is best to simply use the count of separate reports.

Fixes #586."
LebedevRI,2018-10-18 12:08:59,https://api.github.com/repos/google/benchmark/git/commits/99d1356c041f49dccfc55104e79e282f815f6849,99d1356c041f49dccfc55104e79e282f815f6849,"[NFC] BenchmarkRunner: always populate *_report_aggregates_only bools. (#708)

It is better to let the RunBenchmarks(), report() decide
whether to actually *only* output aggregates or not,
depending on whether there are actually aggregates.

It's subtle indeed.

Previously, `BenchmarkRunner()` always said that ""if there are no repetitions,
then you should never output only the repetitions"". And the `report()` simply assumed
that the `report_aggregates_only` bool it received makes sense, and simply used it.

Now, the logic is the same, but the blame has shifted.
`BenchmarkRunner()` always propagates what those benchmarks would have wanted
to happen wrt the aggregates. And the `report()` lambda has to actually consider
both the `report_aggregates_only` bool, and it's meaningfulness.

To put it in the context of the patch series - if the repetition count was `1`,
but `*_report_aggregates_only` was set to `true`, and we capture each iteration separately,
then we will compute the aggregates, but then output everything, both the iteration,
and aggregates, despite `*_report_aggregates_only` being set to `true`."
LebedevRI,2018-10-18 12:03:17,https://api.github.com/repos/google/benchmark/git/commits/9cacec8e78fb359f7148b7848cd0b305bdc80732,9cacec8e78fb359f7148b7848cd0b305bdc80732,"[NFC] RunBenchmarks(): s/has_repetitions/might_have_aggregates/ (#707)

That is the real purpose of that bool. A follow-up change will
make it consider something else other than repetitions."
olzhabay,2018-10-13 08:06:41,https://api.github.com/repos/google/benchmark/git/commits/d731697a5da9cec25034683ed9807304595ea72c,d731697a5da9cec25034683ed9807304595ea72c,"Fix SOURCE_DIR in HandleGTest.cmake (#705)

If benchmark added as cmake subproject, HandleGTest throws an error as  does return absolute source dir.
Change it to , so it will be refering to it's own source dir.

Also see PR #703."
EricWF,2018-10-13 07:53:25,https://api.github.com/repos/google/benchmark/git/commits/8356d646bf953d6715e04b7b3714081cb57e8f13,8356d646bf953d6715e04b7b3714081cb57e8f13,"Revert ""Fix SOURCE_DIR in HandleGTest.cmake (#703)"" (#704)

This reverts commit 609752306fca311ee1caca2306696dfe245bdce4."
olzhabay,2018-10-13 07:51:51,https://api.github.com/repos/google/benchmark/git/commits/609752306fca311ee1caca2306696dfe245bdce4,609752306fca311ee1caca2306696dfe245bdce4,"Fix SOURCE_DIR in HandleGTest.cmake (#703)

* Fix SOURCE_DIR in HandleGTest.cmake

If benchmark added as cmake subproject, HandleGTest throws an error as  does return absolute source dir.
Change it to , so it will be refering to it's own source dir."
iillyyaa,2018-10-08 08:33:21,https://api.github.com/repos/google/benchmark/git/commits/8503dfe537a1fc60a88116ee024f57e9fb5131a1,8503dfe537a1fc60a88116ee024f57e9fb5131a1,"benchmark_color: fix auto option (#559) (#699)

As prevously written, ""--benchmark_color=auto"" was treated as true,
because IsTruthyFlagValue(""auto"") returned true.  The fix is to
rely on IsColorTerminal test only if the flag value is ""auto"",
and fall back to IsTruthyFlagValue otherwise.  I also integrated
force_no_color check into the same block."
Lord-Kamina,2018-10-05 15:44:02,https://api.github.com/repos/google/benchmark/git/commits/9ffb8df6c5d62a677ee27d19cee93a6f3197fd19,9ffb8df6c5d62a677ee27d19cee93a6f3197fd19,"Fix Clang Detection (#697)

For several versions now, CMake by default refers to macOS’ Clang as AppleClang instead of just Clang, which would fail STREQUAL. Fixed by changing it to MATCHES."
LebedevRI,2018-10-01 14:51:08,https://api.github.com/repos/google/benchmark/git/commits/a8082de5dfdd2132e8bda432314efbce3f280f99,a8082de5dfdd2132e8bda432314efbce3f280f99,"[NFC] Refactor RunBenchmark() (#690)

Ok, so, i'm still trying to get to the state when it will be a trivial change to report all the separate iterations.
The old code (LHS of the diff) was rather convoluted i'd say.
I have tried to refactor it a bit into *small* logical chunks, with proper comments.
As far as i can tell, i preserved the intent of the code, what it was doing before.
The road forward still isn't clear, but i'm quite sure it's not with the old code :)"
pwnall,2018-10-01 12:00:13,https://api.github.com/repos/google/benchmark/git/commits/d8c0f27448dfad95b94285e612bba1f7c55c9dd0,d8c0f27448dfad95b94285e612bba1f7c55c9dd0,Fix possible loss of data warnings in MSVC. (#694)
dominichamon,2018-09-28 11:28:43,https://api.github.com/repos/google/benchmark/git/commits/edc77a3669026eddc380721d5a3cdccd752b76cb,edc77a3669026eddc380721d5a3cdccd752b76cb,"Make State constructor private. (#650)

The State constructor should not be part of the public API. Adding a
utility method to BenchmarkInstance allows us to avoid leaking the
RunInThread method into the public API."
LebedevRI,2018-09-26 09:11:54,https://api.github.com/repos/google/benchmark/git/commits/eb8cbec0776455463274ea9947ab0ecfe0f768fe,eb8cbec0776455463274ea9947ab0ecfe0f768fe,"appveyor ci: drop Visual Studio 12 2013 - unsupported by Google Test master branch. (#691)

See https://github.com/google/googletest/pull/1815

Fixes #689."
LebedevRI,2018-09-19 12:59:13,https://api.github.com/repos/google/benchmark/git/commits/aad33aab3c1a8db06053665af39e4679bc774b74,aad33aab3c1a8db06053665af39e4679bc774b74,"[Tooling] Rewrite generate_difference_report(). (#678)

My knowledge of python is not great, so this is kinda horrible.

Two things:
1. If there were repetitions, for the RHS (i.e. the new value) we were always using the first repetition,
    which naturally results in incorrect change reports for the second and following repetitions.
    And what is even worse, that completely broke U test. :(
2. A better support for different repetition count for U test was missing.
    It's important if we are to be able to report 'iteration as repetition',
    since it is rather likely that the iteration count will mismatch.

Now, the rough idea on how this is implemented now. I think this is the right solution.
1. Get all benchmark names (in order) from the lhs benchmark.
2. While preserving the order, keep the unique names
3. Get all benchmark names (in order) from the rhs benchmark.
4. While preserving the order, keep the unique names
5. Intersect `2.` and `4.`, get the list of unique benchmark names that exist on both sides.
6. Now, we want to group (partition) all the benchmarks with the same name.
   ```
   BM_FOO:
       [lhs]: BM_FOO/repetition0 BM_FOO/repetition1
       [rhs]: BM_FOO/repetition0 BM_FOO/repetition1 BM_FOO/repetition2
   ...
   ```
   We also drop mismatches in `time_unit` here.
   _(whose bright idea was it to store arbitrarily scaled timers in json **?!** )_
7. Iterate for each partition
7.1. Conditionally, diff the overlapping repetitions (the count of repetitions may be different.)
7.2. Conditionally, do the U test:
7.2.1. Get **all** the values of `""real_time""` field from the lhs benchmark
7.2.2. Get **all** the values of `""cpu_time""` field from the lhs benchmark
7.2.3. Get **all** the values of `""real_time""` field from the rhs benchmark
7.2.4. Get **all** the values of `""cpu_time""` field from the rhs benchmark
          NOTE: the repetition count may be different, but we want *all* the values!
7.2.5. Do the rest of the u test stuff
7.2.6. Print u test
8. ???
9. **PROFIT**!

Fixes #677"
mstorsjo,2018-09-19 10:52:05,https://api.github.com/repos/google/benchmark/git/commits/439d6b1c2a6da5cb6adc4c4dfc555af235722396,439d6b1c2a6da5cb6adc4c4dfc555af235722396,"Include sys/time.h for cycleclock.h when building on MinGW (#680)

When building for ARM, there is a fallback codepath that uses
gettimeofday, which requires sys/time.h.

The Windows SDK doesn't have this header, but MinGW does have it.
Thus, this fixes building for Windows on ARM with MinGW
headers/libraries, while Windows on ARM with the Windows SDK still
is broken."
mstorsjo,2018-09-18 08:42:20,https://api.github.com/repos/google/benchmark/git/commits/52613079824ac58d06c070aa9fbbb186a5859e2c,52613079824ac58d06c070aa9fbbb186a5859e2c,"[benchmark] Lowercase windows specific includes (#679)

The windows SDK headers don't have self-consistent casing anyway,
and many projects consistently use lowercase for them, in order
to fix crosscompilation with mingw headers."
LebedevRI,2018-09-17 08:59:39,https://api.github.com/repos/google/benchmark/git/commits/a5e9c061d9363403c93d16cf79d16f30f94063f6,a5e9c061d9363403c93d16cf79d16f30f94063f6,"[Tooling] 'display aggregates only' support. (#674)

Works as you'd expect, both for the benchmark binaries, and
the jsons (naturally, since the tests need to work):
```
$ ~/src/googlebenchmark/tools/compare.py benchmarks ~/rawspeed/build-{0,1}/src/utilities/rsbench/rsbench --benchmark_repetitions=3 *
RUNNING: /home/lebedevri/rawspeed/build-0/src/utilities/rsbench/rsbench --benchmark_repetitions=3 2K4A9927.CR2 2K4A9928.CR2 2K4A9929.CR2 --benchmark_out=/tmp/tmpYoui5H
2018-09-12 20:23:47
Running /home/lebedevri/rawspeed/build-0/src/utilities/rsbench/rsbench
Run on (8 X 4000 MHz CPU s)
CPU Caches:
  L1 Data 16K (x8)
  L1 Instruction 64K (x4)
  L2 Unified 2048K (x4)
  L3 Unified 8192K (x1)
-----------------------------------------------------------------------------------------------
Benchmark                                        Time           CPU Iterations UserCounters...
-----------------------------------------------------------------------------------------------
2K4A9927.CR2/threads:8/real_time               447 ms        447 ms          2 CPUTime,s=0.447302 CPUTime/WallTime=1.00001 Pixels=52.6643M Pixels/CPUTime=117.738M Pixels/WallTime=117.738M Raws/CPUTime=2.23562 Raws/WallTime=2.23564 WallTime,s=0.4473
2K4A9927.CR2/threads:8/real_time               444 ms        444 ms          2 CPUTime,s=0.444228 CPUTime/WallTime=1.00001 Pixels=52.6643M Pixels/CPUTime=118.552M Pixels/WallTime=118.553M Raws/CPUTime=2.2511 Raws/WallTime=2.25111 WallTime,s=0.444226
2K4A9927.CR2/threads:8/real_time               447 ms        447 ms          2 CPUTime,s=0.446983 CPUTime/WallTime=0.999999 Pixels=52.6643M Pixels/CPUTime=117.822M Pixels/WallTime=117.822M Raws/CPUTime=2.23722 Raws/WallTime=2.23722 WallTime,s=0.446984
2K4A9927.CR2/threads:8/real_time_mean          446 ms        446 ms          2 CPUTime,s=0.446171 CPUTime/WallTime=1 Pixels=52.6643M Pixels/CPUTime=118.037M Pixels/WallTime=118.038M Raws/CPUTime=2.24131 Raws/WallTime=2.24132 WallTime,s=0.44617
2K4A9927.CR2/threads:8/real_time_median        447 ms        447 ms          2 CPUTime,s=0.446983 CPUTime/WallTime=1.00001 Pixels=52.6643M Pixels/CPUTime=117.822M Pixels/WallTime=117.822M Raws/CPUTime=2.23722 Raws/WallTime=2.23722 WallTime,s=0.446984
2K4A9927.CR2/threads:8/real_time_stddev          2 ms          2 ms          2 CPUTime,s=1.69052m CPUTime/WallTime=3.53737u Pixels=0 Pixels/CPUTime=448.178k Pixels/WallTime=448.336k Raws/CPUTime=8.51008m Raws/WallTime=8.51308m WallTime,s=1.6911m
2K4A9928.CR2/threads:8/real_time               563 ms        563 ms          1 CPUTime,s=0.562511 CPUTime/WallTime=0.999824 Pixels=27.9936M Pixels/CPUTime=49.7654M Pixels/WallTime=49.7567M Raws/CPUTime=1.77774 Raws/WallTime=1.77743 WallTime,s=0.56261
2K4A9928.CR2/threads:8/real_time               561 ms        561 ms          1 CPUTime,s=0.561328 CPUTime/WallTime=0.999917 Pixels=27.9936M Pixels/CPUTime=49.8703M Pixels/WallTime=49.8662M Raws/CPUTime=1.78149 Raws/WallTime=1.78134 WallTime,s=0.561375
2K4A9928.CR2/threads:8/real_time               570 ms        570 ms          1 CPUTime,s=0.570423 CPUTime/WallTime=0.999876 Pixels=27.9936M Pixels/CPUTime=49.0752M Pixels/WallTime=49.0691M Raws/CPUTime=1.75308 Raws/WallTime=1.75287 WallTime,s=0.570493
2K4A9928.CR2/threads:8/real_time_mean          565 ms        565 ms          1 CPUTime,s=0.564754 CPUTime/WallTime=0.999872 Pixels=27.9936M Pixels/CPUTime=49.5703M Pixels/WallTime=49.564M Raws/CPUTime=1.77077 Raws/WallTime=1.77055 WallTime,s=0.564826
2K4A9928.CR2/threads:8/real_time_median        563 ms        563 ms          1 CPUTime,s=0.562511 CPUTime/WallTime=0.999876 Pixels=27.9936M Pixels/CPUTime=49.7654M Pixels/WallTime=49.7567M Raws/CPUTime=1.77774 Raws/WallTime=1.77743 WallTime,s=0.56261
2K4A9928.CR2/threads:8/real_time_stddev          5 ms          5 ms          1 CPUTime,s=4.945m CPUTime/WallTime=46.3459u Pixels=0 Pixels/CPUTime=431.997k Pixels/WallTime=432.061k Raws/CPUTime=0.015432 Raws/WallTime=0.0154343 WallTime,s=4.94686m
2K4A9929.CR2/threads:8/real_time               306 ms        306 ms          2 CPUTime,s=0.306476 CPUTime/WallTime=0.999961 Pixels=12.4416M Pixels/CPUTime=40.5957M Pixels/WallTime=40.5941M Raws/CPUTime=3.2629 Raws/WallTime=3.26277 WallTime,s=0.306488
2K4A9929.CR2/threads:8/real_time               310 ms        310 ms          2 CPUTime,s=0.309978 CPUTime/WallTime=0.999939 Pixels=12.4416M Pixels/CPUTime=40.1371M Pixels/WallTime=40.1347M Raws/CPUTime=3.22604 Raws/WallTime=3.22584 WallTime,s=0.309996
2K4A9929.CR2/threads:8/real_time               309 ms        309 ms          2 CPUTime,s=0.30943 CPUTime/WallTime=0.999987 Pixels=12.4416M Pixels/CPUTime=40.2081M Pixels/WallTime=40.2076M Raws/CPUTime=3.23175 Raws/WallTime=3.23171 WallTime,s=0.309434
2K4A9929.CR2/threads:8/real_time_mean          309 ms        309 ms          2 CPUTime,s=0.308628 CPUTime/WallTime=0.999962 Pixels=12.4416M Pixels/CPUTime=40.3136M Pixels/WallTime=40.3121M Raws/CPUTime=3.24023 Raws/WallTime=3.24011 WallTime,s=0.308639
2K4A9929.CR2/threads:8/real_time_median        309 ms        309 ms          2 CPUTime,s=0.30943 CPUTime/WallTime=0.999961 Pixels=12.4416M Pixels/CPUTime=40.2081M Pixels/WallTime=40.2076M Raws/CPUTime=3.23175 Raws/WallTime=3.23171 WallTime,s=0.309434
2K4A9929.CR2/threads:8/real_time_stddev          2 ms          2 ms          2 CPUTime,s=1.88354m CPUTime/WallTime=23.7788u Pixels=0 Pixels/CPUTime=246.821k Pixels/WallTime=246.914k Raws/CPUTime=0.0198384 Raws/WallTime=0.0198458 WallTime,s=1.88442m
RUNNING: /home/lebedevri/rawspeed/build-1/src/utilities/rsbench/rsbench --benchmark_repetitions=3 2K4A9927.CR2 2K4A9928.CR2 2K4A9929.CR2 --benchmark_out=/tmp/tmpRShmmf
2018-09-12 20:23:55
Running /home/lebedevri/rawspeed/build-1/src/utilities/rsbench/rsbench
Run on (8 X 4000 MHz CPU s)
CPU Caches:
  L1 Data 16K (x8)
  L1 Instruction 64K (x4)
  L2 Unified 2048K (x4)
  L3 Unified 8192K (x1)
-----------------------------------------------------------------------------------------------
Benchmark                                        Time           CPU Iterations UserCounters...
-----------------------------------------------------------------------------------------------
2K4A9927.CR2/threads:8/real_time               446 ms        446 ms          2 CPUTime,s=0.445589 CPUTime/WallTime=1 Pixels=52.6643M Pixels/CPUTime=118.19M Pixels/WallTime=118.19M Raws/CPUTime=2.24422 Raws/WallTime=2.24422 WallTime,s=0.445589
2K4A9927.CR2/threads:8/real_time               446 ms        446 ms          2 CPUTime,s=0.446008 CPUTime/WallTime=1.00001 Pixels=52.6643M Pixels/CPUTime=118.079M Pixels/WallTime=118.08M Raws/CPUTime=2.24211 Raws/WallTime=2.24213 WallTime,s=0.446005
2K4A9927.CR2/threads:8/real_time               448 ms        448 ms          2 CPUTime,s=0.447763 CPUTime/WallTime=0.999994 Pixels=52.6643M Pixels/CPUTime=117.616M Pixels/WallTime=117.616M Raws/CPUTime=2.23332 Raws/WallTime=2.23331 WallTime,s=0.447766
2K4A9927.CR2/threads:8/real_time_mean          446 ms        446 ms          2 CPUTime,s=0.446453 CPUTime/WallTime=1 Pixels=52.6643M Pixels/CPUTime=117.962M Pixels/WallTime=117.962M Raws/CPUTime=2.23988 Raws/WallTime=2.23989 WallTime,s=0.446453
2K4A9927.CR2/threads:8/real_time_median        446 ms        446 ms          2 CPUTime,s=0.446008 CPUTime/WallTime=1 Pixels=52.6643M Pixels/CPUTime=118.079M Pixels/WallTime=118.08M Raws/CPUTime=2.24211 Raws/WallTime=2.24213 WallTime,s=0.446005
2K4A9927.CR2/threads:8/real_time_stddev          1 ms          1 ms          2 CPUTime,s=1.15367m CPUTime/WallTime=6.48501u Pixels=0 Pixels/CPUTime=304.437k Pixels/WallTime=305.025k Raws/CPUTime=5.7807m Raws/WallTime=5.79188m WallTime,s=1.15591m
2K4A9928.CR2/threads:8/real_time               561 ms        561 ms          1 CPUTime,s=0.560856 CPUTime/WallTime=0.999996 Pixels=27.9936M Pixels/CPUTime=49.9123M Pixels/WallTime=49.9121M Raws/CPUTime=1.78299 Raws/WallTime=1.78298 WallTime,s=0.560858
2K4A9928.CR2/threads:8/real_time               560 ms        560 ms          1 CPUTime,s=0.560023 CPUTime/WallTime=1.00001 Pixels=27.9936M Pixels/CPUTime=49.9865M Pixels/WallTime=49.9872M Raws/CPUTime=1.78564 Raws/WallTime=1.78567 WallTime,s=0.560015
2K4A9928.CR2/threads:8/real_time               562 ms        562 ms          1 CPUTime,s=0.562337 CPUTime/WallTime=0.999994 Pixels=27.9936M Pixels/CPUTime=49.7808M Pixels/WallTime=49.7805M Raws/CPUTime=1.77829 Raws/WallTime=1.77828 WallTime,s=0.56234
2K4A9928.CR2/threads:8/real_time_mean          561 ms        561 ms          1 CPUTime,s=0.561072 CPUTime/WallTime=1 Pixels=27.9936M Pixels/CPUTime=49.8932M Pixels/WallTime=49.8933M Raws/CPUTime=1.78231 Raws/WallTime=1.78231 WallTime,s=0.561071
2K4A9928.CR2/threads:8/real_time_median        561 ms        561 ms          1 CPUTime,s=0.560856 CPUTime/WallTime=0.999996 Pixels=27.9936M Pixels/CPUTime=49.9123M Pixels/WallTime=49.9121M Raws/CPUTime=1.78299 Raws/WallTime=1.78298 WallTime,s=0.560858
2K4A9928.CR2/threads:8/real_time_stddev          1 ms          1 ms          1 CPUTime,s=1.17202m CPUTime/WallTime=10.7929u Pixels=0 Pixels/CPUTime=104.164k Pixels/WallTime=104.612k Raws/CPUTime=3.721m Raws/WallTime=3.73701m WallTime,s=1.17706m
2K4A9929.CR2/threads:8/real_time               305 ms        305 ms          2 CPUTime,s=0.305436 CPUTime/WallTime=0.999926 Pixels=12.4416M Pixels/CPUTime=40.7339M Pixels/WallTime=40.7309M Raws/CPUTime=3.27401 Raws/WallTime=3.27376 WallTime,s=0.305459
2K4A9929.CR2/threads:8/real_time               306 ms        306 ms          2 CPUTime,s=0.30576 CPUTime/WallTime=0.999999 Pixels=12.4416M Pixels/CPUTime=40.6908M Pixels/WallTime=40.6908M Raws/CPUTime=3.27054 Raws/WallTime=3.27054 WallTime,s=0.30576
2K4A9929.CR2/threads:8/real_time               307 ms        307 ms          2 CPUTime,s=0.30724 CPUTime/WallTime=0.999991 Pixels=12.4416M Pixels/CPUTime=40.4947M Pixels/WallTime=40.4944M Raws/CPUTime=3.25478 Raws/WallTime=3.25475 WallTime,s=0.307243
2K4A9929.CR2/threads:8/real_time_mean          306 ms        306 ms          2 CPUTime,s=0.306145 CPUTime/WallTime=0.999972 Pixels=12.4416M Pixels/CPUTime=40.6398M Pixels/WallTime=40.6387M Raws/CPUTime=3.26645 Raws/WallTime=3.26635 WallTime,s=0.306154
2K4A9929.CR2/threads:8/real_time_median        306 ms        306 ms          2 CPUTime,s=0.30576 CPUTime/WallTime=0.999991 Pixels=12.4416M Pixels/CPUTime=40.6908M Pixels/WallTime=40.6908M Raws/CPUTime=3.27054 Raws/WallTime=3.27054 WallTime,s=0.30576
2K4A9929.CR2/threads:8/real_time_stddev          1 ms          1 ms          2 CPUTime,s=961.851u CPUTime/WallTime=40.2708u Pixels=0 Pixels/CPUTime=127.481k Pixels/WallTime=126.577k Raws/CPUTime=0.0102463 Raws/WallTime=0.0101737 WallTime,s=955.105u
Comparing /home/lebedevri/rawspeed/build-0/src/utilities/rsbench/rsbench to /home/lebedevri/rawspeed/build-1/src/utilities/rsbench/rsbench
Benchmark                                                 Time             CPU      Time Old      Time New       CPU Old       CPU New
--------------------------------------------------------------------------------------------------------------------------------------
2K4A9927.CR2/threads:8/real_time                       -0.0038         -0.0038           447           446           447           446
2K4A9927.CR2/threads:8/real_time                       +0.0031         +0.0031           444           446           444           446
2K4A9927.CR2/threads:8/real_time                       -0.0031         -0.0031           447           446           447           446
2K4A9927.CR2/threads:8/real_time_pvalue                 0.6428          0.6428      U Test, Repetitions: 3. WARNING: Results unreliable! 9+ repetitions recommended.
2K4A9927.CR2/threads:8/real_time_mean                  +0.0006         +0.0006           446           446           446           446
2K4A9927.CR2/threads:8/real_time_median                -0.0022         -0.0022           447           446           447           446
2K4A9927.CR2/threads:8/real_time_stddev                -0.3161         -0.3175             2             1             2             1
2K4A9928.CR2/threads:8/real_time                       -0.0031         -0.0029           563           561           563           561
2K4A9928.CR2/threads:8/real_time                       -0.0009         -0.0008           561           561           561           561
2K4A9928.CR2/threads:8/real_time                       -0.0169         -0.0168           570           561           570           561
2K4A9928.CR2/threads:8/real_time_pvalue                 0.0636          0.0636      U Test, Repetitions: 3. WARNING: Results unreliable! 9+ repetitions recommended.
2K4A9928.CR2/threads:8/real_time_mean                  -0.0066         -0.0065           565           561           565           561
2K4A9928.CR2/threads:8/real_time_median                -0.0031         -0.0029           563           561           563           561
2K4A9928.CR2/threads:8/real_time_stddev                -0.7620         -0.7630             5             1             5             1
2K4A9929.CR2/threads:8/real_time                       -0.0034         -0.0034           306           305           306           305
2K4A9929.CR2/threads:8/real_time                       -0.0146         -0.0146           310           305           310           305
2K4A9929.CR2/threads:8/real_time                       -0.0128         -0.0129           309           305           309           305
2K4A9929.CR2/threads:8/real_time_pvalue                 0.0636          0.0636      U Test, Repetitions: 3. WARNING: Results unreliable! 9+ repetitions recommended.
2K4A9929.CR2/threads:8/real_time_mean                  -0.0081         -0.0080           309           306           309           306
2K4A9929.CR2/threads:8/real_time_median                -0.0119         -0.0119           309           306           309           306
2K4A9929.CR2/threads:8/real_time_stddev                -0.4931         -0.4894             2             1             2             1
$ ~/src/googlebenchmark/tools/compare.py -a benchmarks ~/rawspeed/build-{0,1}/src/utilities/rsbench/rsbench --benchmark_repetitions=3 *
RUNNING: /home/lebedevri/rawspeed/build-0/src/utilities/rsbench/rsbench --benchmark_repetitions=3 2K4A9927.CR2 2K4A9928.CR2 2K4A9929.CR2 --benchmark_display_aggregates_only=true --benchmark_out=/tmp/tmpjrD2I0
2018-09-12 20:24:11
Running /home/lebedevri/rawspeed/build-0/src/utilities/rsbench/rsbench
Run on (8 X 4000 MHz CPU s)
CPU Caches:
  L1 Data 16K (x8)
  L1 Instruction 64K (x4)
  L2 Unified 2048K (x4)
  L3 Unified 8192K (x1)
-----------------------------------------------------------------------------------------------
Benchmark                                        Time           CPU Iterations UserCounters...
-----------------------------------------------------------------------------------------------
2K4A9927.CR2/threads:8/real_time_mean          446 ms        446 ms          2 CPUTime,s=0.446077 CPUTime/WallTime=1 Pixels=52.6643M Pixels/CPUTime=118.061M Pixels/WallTime=118.062M Raws/CPUTime=2.24177 Raws/WallTime=2.24178 WallTime,s=0.446076
2K4A9927.CR2/threads:8/real_time_median        446 ms        446 ms          2 CPUTime,s=0.445676 CPUTime/WallTime=1 Pixels=52.6643M Pixels/CPUTime=118.167M Pixels/WallTime=118.168M Raws/CPUTime=2.24378 Raws/WallTime=2.2438 WallTime,s=0.445673
2K4A9927.CR2/threads:8/real_time_stddev          1 ms          1 ms          2 CPUTime,s=820.275u CPUTime/WallTime=3.51513u Pixels=0 Pixels/CPUTime=216.876k Pixels/WallTime=217.229k Raws/CPUTime=4.11809m Raws/WallTime=4.12478m WallTime,s=821.607u
2K4A9928.CR2/threads:8/real_time_mean          562 ms        562 ms          1 CPUTime,s=0.561843 CPUTime/WallTime=0.999983 Pixels=27.9936M Pixels/CPUTime=49.8247M Pixels/WallTime=49.8238M Raws/CPUTime=1.77986 Raws/WallTime=1.77983 WallTime,s=0.561852
2K4A9928.CR2/threads:8/real_time_median        562 ms        562 ms          1 CPUTime,s=0.561745 CPUTime/WallTime=0.999995 Pixels=27.9936M Pixels/CPUTime=49.8333M Pixels/WallTime=49.8307M Raws/CPUTime=1.78017 Raws/WallTime=1.78008 WallTime,s=0.561774
2K4A9928.CR2/threads:8/real_time_stddev          1 ms          1 ms          1 CPUTime,s=788.58u CPUTime/WallTime=30.2578u Pixels=0 Pixels/CPUTime=69.914k Pixels/WallTime=69.4978k Raws/CPUTime=2.4975m Raws/WallTime=2.48263m WallTime,s=783.873u
2K4A9929.CR2/threads:8/real_time_mean          306 ms        306 ms          2 CPUTime,s=0.305718 CPUTime/WallTime=1.00001 Pixels=12.4416M Pixels/CPUTime=40.6964M Pixels/WallTime=40.6967M Raws/CPUTime=3.271 Raws/WallTime=3.27102 WallTime,s=0.305716
2K4A9929.CR2/threads:8/real_time_median        306 ms        306 ms          2 CPUTime,s=0.305737 CPUTime/WallTime=1 Pixels=12.4416M Pixels/CPUTime=40.6939M Pixels/WallTime=40.6945M Raws/CPUTime=3.27079 Raws/WallTime=3.27084 WallTime,s=0.305732
2K4A9929.CR2/threads:8/real_time_stddev          1 ms          1 ms          2 CPUTime,s=584.969u CPUTime/WallTime=7.87539u Pixels=0 Pixels/CPUTime=77.8769k Pixels/WallTime=77.9118k Raws/CPUTime=6.2594m Raws/WallTime=6.2622m WallTime,s=585.232u
RUNNING: /home/lebedevri/rawspeed/build-1/src/utilities/rsbench/rsbench --benchmark_repetitions=3 2K4A9927.CR2 2K4A9928.CR2 2K4A9929.CR2 --benchmark_display_aggregates_only=true --benchmark_out=/tmp/tmpN9Xhk2
2018-09-12 20:24:18
Running /home/lebedevri/rawspeed/build-1/src/utilities/rsbench/rsbench
Run on (8 X 4000 MHz CPU s)
CPU Caches:
  L1 Data 16K (x8)
  L1 Instruction 64K (x4)
  L2 Unified 2048K (x4)
  L3 Unified 8192K (x1)
-----------------------------------------------------------------------------------------------
Benchmark                                        Time           CPU Iterations UserCounters...
-----------------------------------------------------------------------------------------------
2K4A9927.CR2/threads:8/real_time_mean          446 ms        446 ms          2 CPUTime,s=0.445771 CPUTime/WallTime=1.00001 Pixels=52.6643M Pixels/CPUTime=118.142M Pixels/WallTime=118.143M Raws/CPUTime=2.2433 Raws/WallTime=2.24332 WallTime,s=0.445769
2K4A9927.CR2/threads:8/real_time_median        446 ms        446 ms          2 CPUTime,s=0.445719 CPUTime/WallTime=1.00001 Pixels=52.6643M Pixels/CPUTime=118.156M Pixels/WallTime=118.156M Raws/CPUTime=2.24356 Raws/WallTime=2.24358 WallTime,s=0.445717
2K4A9927.CR2/threads:8/real_time_stddev          0 ms          0 ms          2 CPUTime,s=184.23u CPUTime/WallTime=1.69441u Pixels=0 Pixels/CPUTime=48.8185k Pixels/WallTime=49.0086k Raws/CPUTime=926.975u Raws/WallTime=930.585u WallTime,s=184.946u
2K4A9928.CR2/threads:8/real_time_mean          562 ms        562 ms          1 CPUTime,s=0.562071 CPUTime/WallTime=0.999969 Pixels=27.9936M Pixels/CPUTime=49.8045M Pixels/WallTime=49.803M Raws/CPUTime=1.77914 Raws/WallTime=1.77908 WallTime,s=0.562088
2K4A9928.CR2/threads:8/real_time_median        562 ms        562 ms          1 CPUTime,s=0.56237 CPUTime/WallTime=0.999986 Pixels=27.9936M Pixels/CPUTime=49.7779M Pixels/WallTime=49.7772M Raws/CPUTime=1.77819 Raws/WallTime=1.77816 WallTime,s=0.562378
2K4A9928.CR2/threads:8/real_time_stddev          1 ms          1 ms          1 CPUTime,s=967.38u CPUTime/WallTime=35.0024u Pixels=0 Pixels/CPUTime=85.7806k Pixels/WallTime=84.0545k Raws/CPUTime=3.06429m Raws/WallTime=3.00263m WallTime,s=947.993u
2K4A9929.CR2/threads:8/real_time_mean          307 ms        307 ms          2 CPUTime,s=0.306511 CPUTime/WallTime=0.999995 Pixels=12.4416M Pixels/CPUTime=40.5924M Pixels/WallTime=40.5922M Raws/CPUTime=3.26264 Raws/WallTime=3.26262 WallTime,s=0.306513
2K4A9929.CR2/threads:8/real_time_median        306 ms        306 ms          2 CPUTime,s=0.306169 CPUTime/WallTime=0.999999 Pixels=12.4416M Pixels/CPUTime=40.6364M Pixels/WallTime=40.637M Raws/CPUTime=3.26618 Raws/WallTime=3.26622 WallTime,s=0.306164
2K4A9929.CR2/threads:8/real_time_stddev          2 ms          2 ms          2 CPUTime,s=2.25763m CPUTime/WallTime=21.4306u Pixels=0 Pixels/CPUTime=298.503k Pixels/WallTime=299.126k Raws/CPUTime=0.0239924 Raws/WallTime=0.0240424 WallTime,s=2.26242m
Comparing /home/lebedevri/rawspeed/build-0/src/utilities/rsbench/rsbench to /home/lebedevri/rawspeed/build-1/src/utilities/rsbench/rsbench
Benchmark                                                 Time             CPU      Time Old      Time New       CPU Old       CPU New
--------------------------------------------------------------------------------------------------------------------------------------
2K4A9927.CR2/threads:8/real_time_pvalue                 0.6428          0.6428      U Test, Repetitions: 3. WARNING: Results unreliable! 9+ repetitions recommended.
2K4A9927.CR2/threads:8/real_time_mean                  -0.0007         -0.0007           446           446           446           446
2K4A9927.CR2/threads:8/real_time_median                +0.0001         +0.0001           446           446           446           446
2K4A9927.CR2/threads:8/real_time_stddev                -0.7746         -0.7749             1             0             1             0
2K4A9928.CR2/threads:8/real_time_pvalue                 0.0636          0.0636      U Test, Repetitions: 3. WARNING: Results unreliable! 9+ repetitions recommended.
2K4A9928.CR2/threads:8/real_time_mean                  +0.0004         +0.0004           562           562           562           562
2K4A9928.CR2/threads:8/real_time_median                +0.0011         +0.0011           562           562           562           562
2K4A9928.CR2/threads:8/real_time_stddev                +0.2091         +0.2270             1             1             1             1
2K4A9929.CR2/threads:8/real_time_pvalue                 0.0636          0.0636      U Test, Repetitions: 3. WARNING: Results unreliable! 9+ repetitions recommended.
2K4A9929.CR2/threads:8/real_time_mean                  +0.0026         +0.0026           306           307           306           307
2K4A9929.CR2/threads:8/real_time_median                +0.0014         +0.0014           306           306           306           306
2K4A9929.CR2/threads:8/real_time_stddev                +2.8652         +2.8585             1             2             1             2
```"
LebedevRI,2018-09-13 19:03:47,https://api.github.com/repos/google/benchmark/git/commits/1b44120cd16712f3b5decd95dc8ff2813574b273,1b44120cd16712f3b5decd95dc8ff2813574b273,"Un-deprecate [SG]et{Item,Byte}sProcessed, re-implement as custom counters. (#676)

As discussed with @dominichamon and @dbabokin, sugar is nice.
Well, maybe not for the health, but it's sweet.
Alright, enough puns.

A special care needs to be applied not to break csv reporter. UGH.
We end up shedding some code over this.
We no longer specially pretty-print them, they are printed just like the rest of custom counters.

Fixes #627."
LebedevRI,2018-09-13 12:08:15,https://api.github.com/repos/google/benchmark/git/commits/58588476ce52c0af4cb54f9c596c4579f78bc953,58588476ce52c0af4cb54f9c596c4579f78bc953,"Track two more details about runs - the aggregate name, and run name. (#675)

This is related to @BaaMeow's work in https://github.com/google/benchmark/pull/616 but is not based on it.

Two new fields are tracked, and dumped into JSON:
* If the run is an aggregate, the aggregate's name is stored.
  It can be RMS, BigO, mean, median, stddev, or any custom stat name.
* The aggregate-name-less run name is additionally stored.
  I.e. not some name of the benchmark function, but the actual
  name, but without the 'aggregate name' suffix.

This way one can group/filter all the runs,
and filter by the particular aggregate type.

I *might* need this for further tooling improvement.
Or maybe not.
But this is certainly worthwhile for custom tooling."
LebedevRI,2018-09-12 13:26:17,https://api.github.com/repos/google/benchmark/git/commits/c614dfc0d4eadcd19b188ff9c7e226c138f894a1,c614dfc0d4eadcd19b188ff9c7e226c138f894a1,"*Display* aggregates only. (#665)

There is a flag 
https://github.com/google/benchmark/blob/d9cab612e40017af10bddaa5b60c7067032a9e1c/src/benchmark.cc#L75-L78
and a call
https://github.com/google/benchmark/blob/d9cab612e40017af10bddaa5b60c7067032a9e1c/include/benchmark/benchmark.h#L837-L840
But that affects everything, every reporter, destination:
https://github.com/google/benchmark/blob/d9cab612e40017af10bddaa5b60c7067032a9e1c/src/benchmark.cc#L316


It would be quite useful to have an ability to be more picky.


More specifically, i would like to be able to only see the aggregates in the on-screen output,
but for the file output to still contain everything. The former is useful in case of a lot of repetition
(or even more so if every iteration is reported separately), while the former is **great** for tooling.

Fixes https://github.com/google/benchmark/issues/664"
LebedevRI,2018-09-10 20:30:40,https://api.github.com/repos/google/benchmark/git/commits/f274c503e1630739e9619aa72ca08735d01ffc1c,f274c503e1630739e9619aa72ca08735d01ffc1c,"Backport LLVM's r341717 ""Fix flags used to compile benchmark library with clang-cl"" (#673)

`MSVC` is true for clang-cl, but `""${CMAKE_CXX_COMPILER_ID}"" STREQUAL
""MSVC""` is false, so we would enable -Wall, which means -Weverything
with clang-cl, and we get tons of undesired warnings.

Use the simpler condition to fix things.

Patch by: Reid Kleckner @rnk"
LebedevRI,2018-09-05 11:20:18,https://api.github.com/repos/google/benchmark/git/commits/f0901417c89d123474e6b91365029cfe32cf89dc,f0901417c89d123474e6b91365029cfe32cf89dc,"GetCacheSizesMacOSX(): use consistent types. (#667)

I have absolutely no way to test this, but this looks obviously-good.

This was reported by Tim Northover @TNorthover in
http://lists.llvm.org/pipermail/llvm-commits/Week-of-Mon-20180903/584223.html

> I think this breaks some 32-bit configurations (well, mine at least).
> I was using Clang (from Xcode 10 beta) on macOS and got a bunch of
> errors referencing sysinfo.cc:292 and onwards:

> /Users/tim/llvm/llvm-project/llvm/utils/benchmark/src/sysinfo.cc:292:47:
> error: non-constant-expression cannot be narrowed from type
> 'std::__1::array<unsigned long long, 4>::value_type' (aka 'unsigned
> long long') to 'size_t' (aka 'unsigned long') in initializer list
> [-Wc++11-narrowing]
>   } Cases[] = {{""hw.l1dcachesize"", ""Data"", 1, CacheCounts[1]},
>                                               ^~~~~~~~~~~~~~
>
> The same happens when self-hosting ToT. Unfortunately I couldn't
> reproduce the issue on Debian (Clang 6.0.1) even with libc++; I'm not
> sure what the difference is."
LebedevRI,2018-09-05 11:19:54,https://api.github.com/repos/google/benchmark/git/commits/a7ed76ad78c8ad4d0120c236a60b72c7ee39068c,a7ed76ad78c8ad4d0120c236a60b72c7ee39068c,"Travis-ci: attempt to add 32-bit osx xcode build (#669)

Maybe will show https://github.com/google/benchmark/pull/667
or maybe this is completely wrong."
snnn,2018-09-04 20:46:40,https://api.github.com/repos/google/benchmark/git/commits/305ba313be0973e83efd70ccc365d284256f6c50,305ba313be0973e83efd70ccc365d284256f6c50,Pass name by const-reference instead of by value in class Statistics' constructor (#668)
pseyfert,2018-09-03 16:45:09,https://api.github.com/repos/google/benchmark/git/commits/fbfc495d7f810dbab8d75449acd4fa1ced17eb0b,fbfc495d7f810dbab8d75449acd4fa1ced17eb0b,add missing closing bracket in --help message (#666)
LebedevRI,2018-08-30 08:59:50,https://api.github.com/repos/google/benchmark/git/commits/5159967520f45d2bb31b226b810f4f8dc03df1c4,5159967520f45d2bb31b226b810f4f8dc03df1c4,"Mark Set{Items,Bytes}Processed()/{items,bytes}_processed() as deprecated. (#654)

They are basically proto-version of custom user counters.
It does not seem that they do anything that custom user counters
don't do. And having two similar entities is not good for generalization.

Migration plan:
* ```
  SetItemsProcessed(<val>)
    =>
  state.counters.insert({
    {""<Name>"", benchmark::Counter(<val>, benchmark::Counter::kIsRate)},
    ...
  });
  ```
* ```
  SetBytesProcessed(<val>)
    =>
  state.counters.insert({
    {""<Name>"", benchmark::Counter(<val>, benchmark::Counter::kIsRate,
                                  benchmark::Counter::OneK::kIs1024)},
    ...
  });
  ```
* ```
  <Name>_processed()
    =>
  state.counters[""<Name>""]
  ```

One thing the custom user counters miss is better support
for units of measurement.

Refs. https://github.com/google/benchmark/issues/627"
LebedevRI,2018-08-29 18:11:06,https://api.github.com/repos/google/benchmark/git/commits/caa2fcb19c83e233bdcaf56d299b9951b8414066,caa2fcb19c83e233bdcaf56d299b9951b8414066,"Counter(): add 'one thousand' param. (#657)

* Counter(): add 'one thousand' param.

Needed for https://github.com/google/benchmark/pull/654

Custom user counters are quite custom. It is not guaranteed
that the user *always* expects for these to have 1k == 1000.
If the counter represents bytes/memory/etc, 1k should be 1024.

Some bikeshedding points:
1. Is this sufficient, or do we really want to go full on
   into custom types with names?
   I think just the '1000' is sufficient for now.
2. Should there be a helper benchmark::Counter::Counter{1000,1024}()
   static 'constructor' functions, since these two, by far,
   will be the most used?
3. In the future, we should be somehow encoding this info into JSON.

* Counter(): use std::pair<> to represent 'one thousand'

* Counter(): just use a new enum with two values 1000 vs 1024.

Simpler is better. If someone comes up with a real reason
to need something more advanced, it can be added later on.

* Counter: just store the 1000 or 1024 in the One_K values directly

* Counter: s/One_K/OneK/"
LebedevRI,2018-08-29 11:58:54,https://api.github.com/repos/google/benchmark/git/commits/d9cab612e40017af10bddaa5b60c7067032a9e1c,d9cab612e40017af10bddaa5b60c7067032a9e1c,"[NFC] s/console_reporter/display_reporter/ (#663)

There are two destinations:
* display (console, terminal) and
* file.

And each of the destinations can be poplulated with one of the reporters:
* console - human-friendly table-like display
* json
* csv (deprecated)

So using the name console_reporter is confusing.
Is it talking about the console reporter in the sense of
table-like reporter, or in the sense of display destination?"
Croydon,2018-08-29 11:51:20,https://api.github.com/repos/google/benchmark/git/commits/a0018c39310da35048083e4759774ba0e6cee468,a0018c39310da35048083e4759774ba0e6cee468,Ignore 32 bit build option when using MSVC (#638)
LebedevRI,2018-08-28 15:11:36,https://api.github.com/repos/google/benchmark/git/commits/8688c5c4cfa1527ceca2136b2a738d9712a01890,8688c5c4cfa1527ceca2136b2a738d9712a01890,"Track 'type' of the run - is it an actual measurement, or an aggregate. (#658)

This is *only* exposed in the JSON. Not in CSV, which is deprecated.

This *only* supposed to track these two states.
An additional field could later track which aggregate this is,
specifically (statistic name, rms, bigo, ...)

The motivation is that we already have ReportAggregatesOnly,
but it affects the entire reports, both the display,
and the reporters (json files), which isn't ideal.

It would be very useful to have a 'display aggregates only' option,
both in the library's console reporter, and the python tooling,
This will be especially needed for the 'store separate iterations'."
LebedevRI,2018-08-28 14:19:25,https://api.github.com/repos/google/benchmark/git/commits/9a179cb93faf76bbbff8410849ecb2eb3cf65024,9a179cb93faf76bbbff8410849ecb2eb3cf65024,"[NFC] Prefix ""report(_)?mode"" with Aggregation. (#656)

This only specifically represents handling of reporting of aggregates.
Not of anything else. Making it more specific makes the name less generic.

This is an issue because i want to add ""iteration report mode"",
so the naming would be conflicting."
bmwiedemann,2018-08-28 14:10:14,https://api.github.com/repos/google/benchmark/git/commits/ede90ba6c8091e457592f2d78c49d7c91a40a06c,ede90ba6c8091e457592f2d78c49d7c91a40a06c,"Make tests pass on 1-core VMs (#653)

found while working on reproducible builds for openSUSE

To reproduce there
osc checkout openSUSE:Factory/benchmark && cd $_
osc build -j1 --vm-type=kvm"
BaaMeow,2018-08-16 16:47:09,https://api.github.com/repos/google/benchmark/git/commits/af441fc1143e33e539ceec4df67c2d95ac2bf5f8,af441fc1143e33e539ceec4df67c2d95ac2bf5f8,properly escape json names (#652)
LebedevRI,2018-08-13 14:42:35,https://api.github.com/repos/google/benchmark/git/commits/94c4d6d5c65b8f0a5f9963db7d93e9568f8aa3db,94c4d6d5c65b8f0a5f9963db7d93e9568f8aa3db,"[Tools] Drop compare_bench.py, compare.py is to be used, add U-test docs. (#645)

As discussed in IRC, time to deduplicate."
kirillbobyrev,2018-08-08 13:39:57,https://api.github.com/repos/google/benchmark/git/commits/f85304e4e3a0e4e1bf15b91720df4a19e90b589f,f85304e4e3a0e4e1bf15b91720df4a19e90b589f,"Remove redundant default which causes failures (#649)

* Remove redundant default which causes failures

* Fix old GCC warnings caused by poor analysis

* Use __builtin_unreachable

* Use BENCHMARK_UNREACHABLE()

* Pull __has_builtin to benchmark.h too

* Also move compiler identification macro to main header

* Move custom compiler identification macro back"
dominichamon,2018-07-26 13:29:33,https://api.github.com/repos/google/benchmark/git/commits/d939634b8ce7e0741a79c1c1f22205fae54b375d,d939634b8ce7e0741a79c1c1f22205fae54b375d,"README improvements (#648)

* Clarifications and cleaning of the core documentation."
dominichamon,2018-07-24 14:57:15,https://api.github.com/repos/google/benchmark/git/commits/f965eab5083010ea7c3a8298176a837e5bff3016,f965eab5083010ea7c3a8298176a837e5bff3016,"Memory management and reporting hooks (#625)

* Introduce memory manager interface

* Add memory stats to JSON reporter and a test

* Add comments and switch json output test to int"
dominichamon,2018-07-23 11:08:20,https://api.github.com/repos/google/benchmark/git/commits/63e183b38945a0d67671f94bd3f74d7ffb6f5a82,63e183b38945a0d67671f94bd3f74d7ffb6f5a82,Add note to tools.md regarding scipy.
atdt,2018-07-09 14:52:07,https://api.github.com/repos/google/benchmark/git/commits/e1150acab90b39bd7da79622c0fa340d78f09f41,e1150acab90b39bd7da79622c0fa340d78f09f41,Add Ori Livneh to AUTHORS and CONTRIBUTORS
atdt,2018-07-09 04:17:44,https://api.github.com/repos/google/benchmark/git/commits/da9ec3dfca2a1266c4f35cc3d340f094cd71487a,da9ec3dfca2a1266c4f35cc3d340f094cd71487a,"Include system load average in console and JSON reports

High system load can skew benchmark results. By including system load averages
in the library's output, we help users identify a potential issue in the
quality of their measurements, and thus assist them in producing better (more
reproducible) results.

I got the idea for this from Brendan Gregg's checklist for benchmark accuracy
(http://www.brendangregg.com/blog/2018-06-30/benchmarking-checklist.html)."
nazavode,2018-07-09 11:47:16,https://api.github.com/repos/google/benchmark/git/commits/1f35fa4aa71bffb5e5672f7ca876561d6adef4fd,1f35fa4aa71bffb5e5672f7ca876561d6adef4fd,"Update AUTHORS and CONTRIBUTORS (#632)

Adding myself to AUTHORS and CONTRIBUTORS according to guidelines."
nazavode,2018-07-09 10:45:10,https://api.github.com/repos/google/benchmark/git/commits/0c21bc369aa157c10e63f4e392fd19768ac7e05b,0c21bc369aa157c10e63f4e392fd19768ac7e05b,"Fix build with Intel compiler (#631)

* Set -Wno-deprecated-declarations for Intel

Intel compiler silently ignores -Wno-deprecated-declarations
so warning no. 1786 must be explicitly suppressed.

* Make std::int64_t → double casts explicit

While std::int64_t → double is a perfectly conformant
implicit conversion, Intel compiler warns about it.
Make them explicit via static_cast<double>.

* Make std::int64_t → int casts explicit

Intel compiler warns about emplacing an std::int64_t
into an int container. Just make the conversion explicit
via static_cast<int>.

* Cleanup Intel -Wno-deprecated-declarations workaround logic"
nazavode,2018-07-03 09:13:22,https://api.github.com/repos/google/benchmark/git/commits/5946795e82f778fff891c37f56c0d7a76a118bf9,5946795e82f778fff891c37f56c0d7a76a118bf9,Disable Intel invalid offsetof warning (#629)
mumumu,2018-06-28 09:25:54,https://api.github.com/repos/google/benchmark/git/commits/847c0069021ade355b7678a305f3ac4e4d6f7e79,847c0069021ade355b7678a305f3ac4e4d6f7e79,fixed Google Test (Primer) Documentation link (#628)
LebedevRI,2018-06-27 14:45:30,https://api.github.com/repos/google/benchmark/git/commits/b123abdcf4a004ffadca7834d614bdeb36c843c0,b123abdcf4a004ffadca7834d614bdeb36c843c0,"Add Iteration-related Counter::Flags. Fixes #618 (#621)

Inspired by these [two](https://github.com/darktable-org/rawspeed/commit/a1ebe07bea5738f8607b48a7596c172be249590e) [bugs](https://github.com/darktable-org/rawspeed/commit/0891555be56b24f9f4af716604cedfa0da1efc6b) in my code due to the lack of those i have found fixed in my code:
* `kIsIterationInvariant` - `* state.iterations()`
  The value is constant for every iteration, and needs to be **multiplied** by the iteration count.
* `kAvgIterations` - `/ state.iterations()`
  The is global over all the iterations, and needs to be **divided** by the iteration count.

They play nice with `kIsRate`:
* `kIsIterationInvariantRate`
* `kAvgIterationsRate`.

I'm not sure how  meaningful they are when combined with `kAvgThreads`.
I guess the `kIsThreadInvariant` can be added, too, for symmetry with `kAvgThreads`."
dominichamon,2018-06-27 11:11:30,https://api.github.com/repos/google/benchmark/git/commits/d8584bda67320937334b038e736f5bffcd438875,d8584bda67320937334b038e736f5bffcd438875,"Use EXPECT_DOUBLE_EQ when comparing doubles in tests. (#624)

* Use EXPECT_DOUBLE_EQ when comparing doubles in tests.

Fixes #623

* disable 'float-equal' warning"
LebedevRI,2018-06-18 11:58:16,https://api.github.com/repos/google/benchmark/git/commits/7d03f2df490c89b2a2055e9be4e2c36db5aedd80,7d03f2df490c89b2a2055e9be4e2c36db5aedd80,"[Tooling] Enable U Test by default, add tooltip about repetition count. (#617)

As previously discussed, let's flip the switch ^^.

This exposes the problem that it will now be run
for everyone, even if one did not read the help
about the recommended repetition count.

This is not good. So i think we can do the smart thing:
```
$ ./compare.py benchmarks gbench/Inputs/test3_run{0,1}.json
Comparing gbench/Inputs/test3_run0.json to gbench/Inputs/test3_run1.json
Benchmark                   Time             CPU      Time Old      Time New       CPU Old       CPU New
--------------------------------------------------------------------------------------------------------
BM_One                   -0.1000         +0.1000            10             9           100           110
BM_Two                   +0.1111         -0.0111             9            10            90            89
BM_Two                   +0.2500         +0.1125             8            10            80            89
BM_Two_pvalue             0.2207          0.6831      U Test, Repetitions: 2. WARNING: Results unreliable! 9+ repetitions recommended.
BM_Two_stat              +0.0000         +0.0000             8             8            80            80
```
(old screenshot)
![image](https://user-images.githubusercontent.com/88600/41502182-ea25d872-71bc-11e8-9842-8aa049509b14.png)

Or, in the good case (noise omitted):
```
s$ ./compare.py benchmarks /tmp/run{0,1}.json
Comparing /tmp/run0.json to /tmp/run1.json
Benchmark                                            Time             CPU      Time Old      Time New       CPU Old       CPU New
---------------------------------------------------------------------------------------------------------------------------------
<99 more rows like this>
./_T012014.RW2/threads:8/real_time                +0.0160         +0.0596            46            47            10            10
./_T012014.RW2/threads:8/real_time_pvalue          0.0000          0.0000      U Test, Repetitions: 100
./_T012014.RW2/threads:8/real_time_mean           +0.0094         +0.0609            46            47            10            10
./_T012014.RW2/threads:8/real_time_median         +0.0104         +0.0613            46            46            10            10
./_T012014.RW2/threads:8/real_time_stddev         -0.1160         -0.1807             1             1             0             0
```
(old screenshot)
![image](https://user-images.githubusercontent.com/88600/41502185-fb8193f4-71bc-11e8-85fa-cbba83e39db4.png)"
dominichamon,2018-06-07 11:54:14,https://api.github.com/repos/google/benchmark/git/commits/151ead6242b2075b5a3d55905440a3aab245a800,151ead6242b2075b5a3d55905440a3aab245a800,"Disable deprecation warnings when -Werror is enabled. (#609)

Fixes #608"
Maratyszcza,2018-06-06 11:32:42,https://api.github.com/repos/google/benchmark/git/commits/505be96ab23056580a3a2315abba048f4428b04e,505be96ab23056580a3a2315abba048f4428b04e,"Avoid using CMake 3.6 feature list(FILTER ...) (#612)

list(FILTER ...) is a CMake 3.6 feature, but benchmark targets CMake 2.8.12"
sergiud,2018-06-05 14:01:44,https://api.github.com/repos/google/benchmark/git/commits/1301f53e3173e5e8c1583b9b57a34bbbd5970366,1301f53e3173e5e8c1583b9b57a34bbbd5970366,cmake: use numeric version in package config (#611)
Maratyszcza,2018-06-05 10:36:26,https://api.github.com/repos/google/benchmark/git/commits/7fb3c564e51ce3aa6100484a0b25c603ea5fd123,7fb3c564e51ce3aa6100484a0b25c603ea5fd123,"Fix compilation on Android with GNU STL (#596)

* Fix compilation on Android with GNU STL

GNU STL in Android NDK lacks string conversion functions from C++11, including std::stoul, std::stoi, and std::stod.
This patch reimplements these functions in benchmark:: namespace using C-style equivalents from C++03.

* Avoid use of log2 which doesn't exist in Android GNU STL

GNU STL in Android NDK lacks log2 function from C99/C++11.
This patch replaces their use in the code with double log(double) function."
BaaMeow,2018-06-01 10:14:19,https://api.github.com/repos/google/benchmark/git/commits/4c2af0788977d3bd900585528c2d08b875b2cd39,4c2af0788977d3bd900585528c2d08b875b2cd39,"(clang-)format all the things (#610)

* format all documents according to contributor guidelines and specifications
use clang-format on/off to stop formatting when it makes excessively poor decisions

* format all tests as well, and mark blocks which change too much"
dominichamon,2018-05-30 12:17:41,https://api.github.com/repos/google/benchmark/git/commits/4fbfa2f3368cb8d8a0cba48edda584c7dd9f0a14,4fbfa2f3368cb8d8a0cba48edda584c7dd9f0a14,"Some platforms and environments don't pass a valid argc/argv. (#607)

Specifically some iOS targets."
dominichamon,2018-05-29 13:12:51,https://api.github.com/repos/google/benchmark/git/commits/d07372e64ba16fe3d81bfffbdad7635d19a29198,d07372e64ba16fe3d81bfffbdad7635d19a29198,clang-format run on the benchmark header (#606)
EricWF,2018-05-29 12:25:32,https://api.github.com/repos/google/benchmark/git/commits/7b8d0249d8d66040ce9ffe6b94cc8421ef3e61d8,7b8d0249d8d66040ce9ffe6b94cc8421ef3e61d8,"Deprecate CSVReporter - A first step to overhauling reporting. (#488)

As @dominichamon and I have discussed, the current reporter interface
is poor at best. And something should be done to fix it.

I strongly suspect such a fix will require an entire reimagining
of the API, and therefore breaking backwards compatibility fully.

For that reason we should start deprecating and removing parts
that we don't intend to replace. One of these parts, I argue,
is the CSVReporter. I propose that the new reporter interface
should choose a single output format (JSON) and traffic entirely
in that. If somebody really wanted to replace the functionality
of the CSVReporter they would do so as an external tool which
transforms the JSON.

For these reasons I propose deprecating the CSVReporter."
dominichamon,2018-05-29 12:13:06,https://api.github.com/repos/google/benchmark/git/commits/16703ff83c1ae6d53e5155df3bb3ab0bc96083be,16703ff83c1ae6d53e5155df3bb3ab0bc96083be,cleaner and slightly larger statistics tests (#604)
dominichamon,2018-05-29 12:12:48,https://api.github.com/repos/google/benchmark/git/commits/c8adf4531f997c2701bec5084b5d92e37b632969,c8adf4531f997c2701bec5084b5d92e37b632969,Add some 'travis_wait' commands to avoid gcc@7 installation timeouts. (#605)
LebedevRI,2018-05-29 10:13:28,https://api.github.com/repos/google/benchmark/git/commits/a6a1b0d765b116bb9c777d45a299ae84a2760981,a6a1b0d765b116bb9c777d45a299ae84a2760981,"Benchmarking is hard. Making sense of the benchmarking results is even harder. (#593)

The first problem you have to solve yourself. The second one can be aided.
The benchmark library can compute some statistics over the repetitions,
which helps with grasping the results somewhat.

But that is only for the one set of results. It does not really help to compare
the two benchmark results, which is the interesting bit. Thankfully, there are
these bundled `tools/compare.py` and `tools/compare_bench.py` scripts.

They can provide a diff between two benchmarking results. Yay!
Except not really, it's just a diff, while it is very informative and better than
nothing, it does not really help answer The Question - am i just looking at the noise?
It's like not having these per-benchmark statistics...

Roughly, we can formulate the question as:
> Are these two benchmarks the same?
> Did my change actually change anything, or is the difference below the noise level?

Well, this really sounds like a [null hypothesis](https://en.wikipedia.org/wiki/Null_hypothesis), does it not?
So maybe we can use statistics here, and solve all our problems?
lol, no, it won't solve all the problems. But maybe it will act as a tool,
to better understand the output, just like the usual statistics on the repetitions...

I'm making an assumption here that most of the people care about the change
of average value, not the standard deviation. Thus i believe we can use T-Test,
be it either [Student's t-test](https://en.wikipedia.org/wiki/Student%27s_t-test), or [Welch's t-test](https://en.wikipedia.org/wiki/Welch%27s_t-test).
**EDIT**: however, after @dominichamon review, it was decided that it is better
to use more robust [Mann–Whitney U test](https://en.wikipedia.org/wiki/Mann–Whitney_U_test)
I'm using [scipy.stats.mannwhitneyu](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mannwhitneyu.html#scipy.stats.mannwhitneyu).

There are two new user-facing knobs:
```
$ ./compare.py --help
usage: compare.py [-h] [-u] [--alpha UTEST_ALPHA]
                  {benchmarks,filters,benchmarksfiltered} ...

versatile benchmark output compare tool
<...>
optional arguments:
  -h, --help            show this help message and exit

  -u, --utest           Do a two-tailed Mann-Whitney U test with the null
                        hypothesis that it is equally likely that a randomly
                        selected value from one sample will be less than or
                        greater than a randomly selected value from a second
                        sample. WARNING: requires **LARGE** (9 or more)
                        number of repetitions to be meaningful!
  --alpha UTEST_ALPHA   significance level alpha. if the calculated p-value is
                        below this value, then the result is said to be
                        statistically significant and the null hypothesis is
                        rejected. (default: 0.0500)
```

Example output:
![screenshot_20180512_175517](https://user-images.githubusercontent.com/88600/39958581-ae897924-560d-11e8-81b9-806db6c3e691.png)
As you can guess, the alpha does affect anything but the coloring of the computed p-values.
If it is green, then the change in the average values is statistically-significant.

I'm detecting the repetitions by matching name. This way, no changes to the json are _needed_.
Caveats:
* This won't work if the json is not in the same order as outputted by the benchmark,
   or if the parsing does not retain the ordering.
* This won't work if after the grouped repetitions there isn't at least one row with
  different name (e.g. statistic). Since there isn't a knob to disable printing of statistics
  (only the other way around), i'm not too worried about this.
* **The results will be wrong if the repetition count is different between the two benchmarks being compared.**
* Even though i have added (hopefully full) test coverage, the code of these python tools is staring
  to look a bit jumbled.
* So far i have added this only to the `tools/compare.py`.
  Should i add it to `tools/compare_bench.py` too?
  Or should we deduplicate them (by removing the latter one)?"
dominichamon,2018-05-29 09:36:54,https://api.github.com/repos/google/benchmark/git/commits/ec0f69c28e412ec1fb1e8d170ada4faeebdc8293,ec0f69c28e412ec1fb1e8d170ada4faeebdc8293,Update README.md
astrelni,2018-05-25 10:18:58,https://api.github.com/repos/google/benchmark/git/commits/e776aa0275e293707b6a0901e0e8d8a8a3679508,e776aa0275e293707b6a0901e0e8d8a8a3679508,"Add benchmark_main target. (#601)

* Add benchmark_main library with support for Bazel.

* fix newline at end of file

* Add CMake support for benchmark_main.

* Mention optionally using benchmark_main in README."
mattreecebentley,2018-05-24 09:50:35,https://api.github.com/repos/google/benchmark/git/commits/d7aed73677888834d4e8af2b300d01bfb724b70f,d7aed73677888834d4e8af2b300d01bfb724b70f,"Corrections, additions to initial doc (#600)

* Correct/clarify build/install instructions

GTest is google test, don't obsfucate needlessly for newcomers.
Adding google test into installation guide helps newcomers.
Third option under this  line: ""Note that Google Benchmark requires Google Test to build and run the tests. This
dependency can be provided three ways:""
Was not true (did not occur). If there is a further option that needs to be specified in order for that functionality to work it needs to be specified.

* Add prerequisite knowledge section

A lot of assumptions are made about the reader in the documentation. This is unfortunate.

* Removal of abbreviations for google test"
sam-panzer,2018-05-24 09:33:19,https://api.github.com/repos/google/benchmark/git/commits/ce3fde16cb4e3949f8d7c20f49867023af92a6e1,ce3fde16cb4e3949f8d7c20f49867023af92a6e1,"Return 0 from State::iterations() when not yet started. (#598)

* Return a reasonable value from State::iterations() even before starting a benchmark

* Optimize State::iterations() for started case."
denizevrenci,2018-05-14 14:02:49,https://api.github.com/repos/google/benchmark/git/commits/6d74c0625b8e88c1afce72b4f383c91b9a99dbe6,6d74c0625b8e88c1afce72b4f383c91b9a99dbe6,"split_list is not defined for assembly tests (#595)

* Update AUTHORS and CONTRIBUTORS

* split_list is not defined for assembly tests"
NanXiao,2018-05-09 09:31:24,https://api.github.com/repos/google/benchmark/git/commits/e90801ae475f23877319d67b96c07bf0c52405f3,e90801ae475f23877319d67b96c07bf0c52405f3,Remove unnecessary memset functions. (#591)
LebedevRI,2018-05-08 10:34:31,https://api.github.com/repos/google/benchmark/git/commits/718cc91d004e15ce483cb1ba9bcd5e3a1f025184,718cc91d004e15ce483cb1ba9bcd5e3a1f025184,[Tools] Fix a few python3-compatibility issues (#585)
LebedevRI,2018-05-08 10:33:37,https://api.github.com/repos/google/benchmark/git/commits/e8ddd907bb6a881f40069ea73caa74cb9112c564,e8ddd907bb6a881f40069ea73caa74cb9112c564,"There is no ""FATAL"" in message(), only ""FATAL_ERROR"" (#584)"
php1ic,2018-05-08 10:29:09,https://api.github.com/repos/google/benchmark/git/commits/16af64500fe13d63a5ad57e81f05cb0b9383875d,16af64500fe13d63a5ad57e81f05cb0b9383875d,"Run git from the source directory (#589) (#590)

Git was being executed in the current directory, so could not get the
latest tag if cmake was run from a build directory. Force git to be
run from with the source directory."
sbc100,2018-05-03 08:34:26,https://api.github.com/repos/google/benchmark/git/commits/8986839e4ac67facb52abc7fff3d5082e854aab5,8986839e4ac67facb52abc7fff3d5082e854aab5,"Use __EMSCRIPTEN__ (rather then EMSCRIPTEN) to check for emscripten (#583)

The old EMSCRIPTEN macro is deprecated and not enabled when
EMCC_STRICT is set.

Also fix a typo in EMSCRIPTN (not sure how this ever worked)."
NanXiao,2018-05-02 10:26:43,https://api.github.com/repos/google/benchmark/git/commits/ea5551e7b3129d8ee468b15e2a4242edd610ee02,ea5551e7b3129d8ee468b15e2a4242edd610ee02,Porting into OpenBSD (#582)
astrelni,2018-05-02 10:23:18,https://api.github.com/repos/google/benchmark/git/commits/62a9d756eacf28b5be59429d25f1fae3e202e5e3,62a9d756eacf28b5be59429d25f1fae3e202e5e3,"Update bazel WORKSPACE and BUILD files to work better on Windows. (#581)

Note, bazel only supports MSVC on Windows, and not MinGW, so
linking against shlwapi.lib only needs to follow MSVC conventions.

git_repository() did not work in local testing, so is swapped for
http_archive(). The latter is also documented as the preferred way
to depend on an external library in bazel."
astrelni,2018-05-01 14:24:38,https://api.github.com/repos/google/benchmark/git/commits/b678a2026df75bdcaebbda40440b8495babf078e,b678a2026df75bdcaebbda40440b8495babf078e,"Fix bazel config to link against pthread. (#579)

The benchmarks in the test/ currently build because they all
include a dep on gtest, which brings in pthread when needed."
Tim020,2018-04-26 09:56:06,https://api.github.com/repos/google/benchmark/git/commits/ed1bac8434b3f970a5b7de3fea8f09dc4b1773ee,ed1bac8434b3f970a5b7de3fea8f09dc4b1773ee,"Issue 571: Allow support for negative regex filtering (#576)

* Allow support for negative regex filtering

This patch allows one to apply a negation to the entire regex filter
by appending it with a '-' character, much in the same style as
GoogleTest uses.

* Address issues in PR

* Add unit tests for negative filtering"
Yangqing,2018-04-23 19:57:03,https://api.github.com/repos/google/benchmark/git/commits/105ac14b2f671f7d448f621290404098189f424d,105ac14b2f671f7d448f621290404098189f424d,Add caching for cxx_feature_check (#573)
pwnall,2018-04-23 10:58:02,https://api.github.com/repos/google/benchmark/git/commits/64d4805dd7861fa265e3d8f10efc056985d4e945,64d4805dd7861fa265e3d8f10efc056985d4e945,Fix precision loss warning in MSVC. (#574)
dominichamon,2018-04-19 17:40:08,https://api.github.com/repos/google/benchmark/git/commits/c4858d8012acd54d8ef89053c74e9cdcf0fa6649,c4858d8012acd54d8ef89053c74e9cdcf0fa6649,"Report the actual iterations run. (#572)

Before this change, we would report the number of requested iterations
passed to the state. After, we will report the actual number run. As a
side-effect, instead of multiplying the expected iterations by the
number of threads to get the total number, we can report the actual
number of iterations across all threads, which takes into account the
situation where some threads might run more iterations than others."
dominichamon,2018-04-12 14:40:24,https://api.github.com/repos/google/benchmark/git/commits/64e5a13fa05693dc0243817d6081d7c0e5081d6f,64e5a13fa05693dc0243817d6081d7c0e5081d6f,"Ensure 64-bit truncation doesn't happen for complexity_n (#569)

* Ensure 64-bit truncation doesn't happen for complexity results

* One more complexity_n 64-bit fix

* Missed another vector of int

* Piping through the int64_t"
FredTingaud,2018-04-09 12:40:58,https://api.github.com/repos/google/benchmark/git/commits/50ffc781b1df6d582d6a453b9942cc8cb512db69,50ffc781b1df6d582d6a453b9942cc8cb512db69,Optimize by using nth_element instead of partial_sort to find the median. (#565)
EricWF,2018-04-06 00:31:03,https://api.github.com/repos/google/benchmark/git/commits/2844167ff99edb63f629c9768ea1f3f94ebfb8fe,2844167ff99edb63f629c9768ea1f3f94ebfb8fe,Fix #564 - gmock/gmock.h not found in benchmark tests.
dominichamon,2018-04-03 22:12:47,https://api.github.com/repos/google/benchmark/git/commits/9913418d323e64a0111ca0da81388260c2bbe1e9,9913418d323e64a0111ca0da81388260c2bbe1e9,"Allow AddRange to work with int64_t. (#548)

* Allow AddRange to work with int64_t.

Fixes #516

Also, tweak how we manage per-test build needs, and create a standard
_gtest suffix for googletest to differentiate from non-googletest tests.

I also ran clang-format on the files that I changed (but not the
benchmark include or main src as they have too many clang-format
issues).

* Add benchmark_gtest to cmake

* Set(Items|Bytes)Processed now take int64_t"
dominichamon,2018-03-25 19:05:31,https://api.github.com/repos/google/benchmark/git/commits/e7eb54b5f8d29f3d91f5fbda0909c65c2ae70ba9,e7eb54b5f8d29f3d91f5fbda0909c65c2ae70ba9,Fix uninitialized warning (#560)
EricWF,2018-03-23 22:10:47,https://api.github.com/repos/google/benchmark/git/commits/7b03df7ff76844a39359e9233f31ca8cdb073313,7b03df7ff76844a39359e9233f31ca8cdb073313,"Add tests to verify assembler output -- Fix DoNotOptimize. (#530)

* Add tests to verify assembler output -- Fix DoNotOptimize.

For things like `DoNotOptimize`, `ClobberMemory`, and even `KeepRunning()`,
it is important exactly what assembly they generate. However, we currently
have no way to test this. Instead it must be manually validated every
time a change occurs -- including a change in compiler version.

This patch attempts to introduce a way to test the assembled output automatically.
It's mirrors how LLVM verifies compiler output, and it uses LLVM FileCheck to run
the tests in a similar way.

The tests function by generating the assembly for a test in CMake, and then
using FileCheck to verify the // CHECK lines in the source file are found
in the generated assembly.

Currently, the tests only run on 64-bit x86 systems under GCC and Clang,
and when FileCheck is found on the system.

Additionally, this patch tries to improve the code gen from DoNotOptimize.
This should probably be a separate change, but I needed something to test.

* Disable assembly tests on Bazel for now

* Link FIXME to github issue

* Fix Tests on OS X

* fix strip_asm.py to work on both Linux and OS X like targets"
dominichamon,2018-03-23 11:45:15,https://api.github.com/repos/google/benchmark/git/commits/df60aeb2667e140a6c6ae93e9e1d8eb3d33d72ab,df60aeb2667e140a6c6ae93e9e1d8eb3d33d72ab,"Rely on compiler intrinsics to identify regex engine. (#555)

Having the copts set on a per-target level can lead to ODR violations
in some cases. Avoid this by ensuring the regex engine is picked
through compiler intrinsics in the header directly."
EricWF,2018-03-21 19:47:25,https://api.github.com/repos/google/benchmark/git/commits/e668e2a1baaa969a8e5a9220e3949e3202dea9e8,e668e2a1baaa969a8e5a9220e3949e3202dea9e8,"Fix #552 - GCC and Clang warn on possibly invalid offsetof usage.

This patch disables the -Winvalid-offsetof warning for GCC and Clang
when using it to check the cache lines of the State object.

Technically this usage of offsetof is undefined behavior until C++17.
However, all major compilers support this application as an extension,
as demonstrated by the passing static assert (If a compiler encounters UB
during evaluation of a constant expression, that UB must be diagnosed).
Unfortunately, Clang and GCC also produce a warning about it.

This patch temporarily suppresses the warning using #pragma's in the
source file (instead of globally suppressing the warning in the build systems).
This way the warning is ignored for both CMake and Bazel builds without
having to modify either build system."
EricWF,2018-03-21 19:27:04,https://api.github.com/repos/google/benchmark/git/commits/68e228944e2da1b3702c6d64b01f559c8b8b91f1,68e228944e2da1b3702c6d64b01f559c8b8b91f1,"Fix #538 - gtest.h not found when building with older CMake versions.

Older CMake versions, in particular 2.8, don't seem to correctly handle
interface include directories. This causes failures when building the
tests. Additionally, older CMake versions use a different library install
directory than expected (i.e. they use lib/<target-triple>). This caused
certain tests to fail to link.

This patch fixes both those issues. The first by manually adding the
correct include directory when building the tests. The second by specifying
the library output directory when configuring the GTest build."
dominichamon,2018-03-16 10:14:38,https://api.github.com/repos/google/benchmark/git/commits/674d0498b80097d8bc720eaa7980805b5332c7ad,674d0498b80097d8bc720eaa7980805b5332c7ad,Move thread classes out to clean up monolithic code (#554)
jmillikin-stripe,2018-03-08 12:48:46,https://api.github.com/repos/google/benchmark/git/commits/a9beffda0b89a6995372100456a4ad894d29b93b,a9beffda0b89a6995372100456a4ad894d29b93b,"Add support for building with Bazel. (#533)

* Add myself to CONTRIBUTORS under the corp CLA for Stripe, Inc.

* Add support for building with Bazel.

Limitations compared to existing CMake rules:
* Defaults to using C++11 `<regex>`, with an override via Bazel flag
  `--define` of `google_benchmark.have_regex`. The TravisCI config sets
  the regex implementation to `posix` because it uses ancient compilers.
* Debug vs Opt mode can't be set per test. TravisCI runs all the tests
  in debug mode to satisfy `diagnostics_test`, which depends on `CHECK`
  being live.

* Set Bazel workspace name so other repos can refer to it by stable name.

This is recommended by the Bazel style guide to avoid each dependent
workspace defining its own name for the dependency."
winksaville,2018-03-07 11:20:06,https://api.github.com/repos/google/benchmark/git/commits/61497236ddc0d797a47ef612831fb6ab34dc5c9d,61497236ddc0d797a47ef612831fb6ab34dc5c9d,"Make string_util naming more consistent (#547)

* Rename StringXxx to StrXxx in string_util.h and its users

This makes the naming consistent within string_util and moves is the
Abseil convention.

* Style guide is 2 spaces before end of line ""//"" comments

* Rename StrPrintF/StringPrintF to StrFormat for absl compatibility."
winksaville,2018-03-06 18:15:03,https://api.github.com/repos/google/benchmark/git/commits/f48a28d12a762feb5469dee397adb91d09bc4cd6,f48a28d12a762feb5469dee397adb91d09bc4cd6,"Do not let StrCat be renamed to lstrcatA (#546)

On Windows the Shlwapi.h file has a macro:

  #define StrCat lstrcatA

And benchmark/src/string_util.h defines StrCat and it is renamed to
lstrcatA if we don't undef the macro in Shlwapi.h. This is an innocuous
bug if string_util.h is included after Shlwapi.h, but it is a compile
error if string_util.h is included before Shlwapi.h.

This fixes issue #545."
winksaville,2018-03-06 11:44:25,https://api.github.com/repos/google/benchmark/git/commits/69a52cff4fdc6a12b639c0d2ec532f6f4ab65c48,69a52cff4fdc6a12b639c0d2ec532f6f4ab65c48,"Spelling fixes (#543)

Upstream spelling fix changes from Pony, ec47ba8f565726414552f4bbf97d7,
by ka7@la-evento.com that effected google/benchmark."
alekseyshl,2018-03-02 11:53:58,https://api.github.com/repos/google/benchmark/git/commits/47df49e5731fd795043bd40c0285ba44ab3e2dbb,47df49e5731fd795043bd40c0285ba44ab3e2dbb,"Add Solaris support (#539)

* Add Solaris support

Define BENCHMARK_OS_SOLARIS for Solaris.

Platform specific implementations added:
* number of CPUs detection
* CPU cycles per second detection
* Thread CPU usage
* Process CPU usage

* Remove the special case for per process CPU time for Solaris, it's the same as the default."
guoyr,2018-03-02 11:22:03,https://api.github.com/repos/google/benchmark/git/commits/ff2c255af5bb2fc2e5cd3b3685f0c6283117ce73,ff2c255af5bb2fc2e5cd3b3685f0c6283117ce73,Use STCK to get the CPU clock on s390x (#540)
EricWF,2018-02-21 16:43:57,https://api.github.com/repos/google/benchmark/git/commits/56f52ee228783547f544d9ac4a533574b9010e3f,56f52ee228783547f544d9ac4a533574b9010e3f,"Print the executable name as part of the context. (#534)

* Print the executable name as part of the context.

A common use case of the library is to run two different
versions of a benchmark to compare them. In my experience
this often means compiling a benchmark twice, renaming
one of the executables, and then running the executables
back-to-back. In this case the name of the executable
is important contextually information.  Unfortunately the
benchmark does not report this information.

This patch adds the executable name to the context reported
by the benchmark.

* attempt to fix tests on Windows

* attempt to fix tests on Windows"
jwakely,2018-02-21 16:42:16,https://api.github.com/repos/google/benchmark/git/commits/e9a49be7f1fd6e3717687e42ad318957e8cd6c8e,e9a49be7f1fd6e3717687e42ad318957e8cd6c8e,Update note about linking with pthreads (#536)
jwakely,2018-02-21 16:41:52,https://api.github.com/repos/google/benchmark/git/commits/19048b7b65875e08c1e882e644a7a5f9bcfd3f82,19048b7b65875e08c1e882e644a7a5f9bcfd3f82,Fix typo in README.md (#535)
EricWF,2018-02-21 07:54:19,https://api.github.com/repos/google/benchmark/git/commits/858688b845b86dc43a7e23f8ec0f94a8e63bfe20,858688b845b86dc43a7e23f8ec0f94a8e63bfe20,"Ensure std::iterator_traits<StateIterator> instantiates.

Due to ADL lookup performed on the begin and end functions
of `for (auto _ : State)`, std::iterator_traits may get
incidentally instantiated. This patch ensures the library
can tolerate that."
ianloic,2018-02-14 21:17:12,https://api.github.com/repos/google/benchmark/git/commits/6ecf8a8e80b92a7292558ae32466b4df331c851d,6ecf8a8e80b92a7292558ae32466b4df331c851d,"Don't include <sys/resource.h> on Fuchsia. (#531)

* Don't include <sys/resource.h> on Fuchsia.

It doesn't support POSIX resource measurement and timing APIs.

Change-Id: Ifab4bac4296575f042c699db1ce5a4f7c2d82893

* Add BENCHMARK_OS_FUCHSIA for Fuchsia

Change-Id: Ic536f9625e413270285fbfd08471dcb6753ddad1"
EricWF,2018-02-14 20:44:41,https://api.github.com/repos/google/benchmark/git/commits/207b9c7aeccd70a1c11a27504e1627ef9f8b5938,207b9c7aeccd70a1c11a27504e1627ef9f8b5938,"Improve State packing: put important members on first cache line. (#527)

* Improve State packing: put important members on first cache line.

This patch does a few different things to ensure commonly accessed
data is on the first cache line of the `State` object.

First, it moves the `error_occurred_` member to reside after
the `started_` and `finished_` bools, since there was internal
padding there that was unused.

Second, it moves `batch_leftover_` and `max_iterations` further up
in the struct declaration. These variables are used in the calculation
of `iterations()` which users might call within the loop. Therefore
it's more important they exist on the first cache line.

Finally, this patch turns the bool members into bitfields. Although
this shouldn't have much of an effect currently, because padding is
still needed between the last bool and the first size_t, it should
help in future changes that require more ""bool like"" members.

* Remove bitfield change for now

* Move bools (and their padding) to end of ""first cache line"" vars.

I think it makes the most sense to move the padding required
following the group of bools to the end of the variables we want
on the first cache line.

This also means that the `total_iterations_` variable, which is the
most accessed, has the same address as the State object.

* Fix static assertion after moving bools"
sam-panzer,2018-02-13 20:54:46,https://api.github.com/repos/google/benchmark/git/commits/3924ee7b8a6c6427083662c861c0f51be2a38bd9,3924ee7b8a6c6427083662c861c0f51be2a38bd9,"Fixups following addition of KeepRunningBatch (296ec5693) (#526)

* Support State::KeepRunningBatch().

State::KeepRunning() can take large amounts of time relative to quick
operations (on the order of 1ns, depending on hardware). For such
sensitive operations, it is recommended to run batches of repeated
operations.

This commit simplifies handling of total_iterations_. Rather than
predecrementing such that total_iterations_ == 1 signals that
KeepRunning() should exit, total_iterations_ == 0 now signals the
intention for the benchmark to exit.

* Create better fast path in State::KeepRunningBatch()

* Replace int parameter with size_t to fix signed mismatch warnings

* Ensure benchmark State has been started even on error.

* Simplify KeepRunningBatch()

* Implement KeepRunning() in terms of KeepRunningBatch().

* Improve codegen by helping the compiler undestand dead code.

* Dummy commit for build bots' benefit."
EricWF,2018-02-13 04:28:23,https://api.github.com/repos/google/benchmark/git/commits/37dbe80f9b190b263f6eb437e93b9c8fa4df2849,37dbe80f9b190b263f6eb437e93b9c8fa4df2849,"Attempt to fix travis timeouts during apt-get. (#528)

* Attempt to fix travis timeouts during apt-get.

During some builds, travis fails to update the apt-get indexes.
This causes the build to fail in different ways.

This patch attempts to avoid this issue by manually calling
apt-get update. I'm not sure if it'll work, but it's worth a try.

* Fix missing semicolons in command"
EricWF,2018-02-13 02:07:19,https://api.github.com/repos/google/benchmark/git/commits/dd8dcc8da1fb03cced6129041e3f06a607889346,dd8dcc8da1fb03cced6129041e3f06a607889346,"Make output tests more stable on slow machines.

The appveyor bot sometimes fails because the time it
outputs is 6 digits long, but the output test regex expects at most
5 digits. This patch increases the size to 6 digits to placate the
test. This should not *really* affect the correctness of the test."
EricWF,2018-02-13 01:43:32,https://api.github.com/repos/google/benchmark/git/commits/562f9d256d30fdd2a4200109e0f79ba57d05f488,562f9d256d30fdd2a4200109e0f79ba57d05f488,Fix GTest workaround on MSVC
EricWF,2018-02-13 01:11:01,https://api.github.com/repos/google/benchmark/git/commits/906749a48e3ead4dda1e61378759c11267451fe0,906749a48e3ead4dda1e61378759c11267451fe0,"Work around Gtest build failure caused by -Werror=unused-function. (#529)

We're propagating extra warning flags to the gtest build, which
can cause it to fail. This patch prevents passing ""-Wextra"" to
gtest, since the library itself doesn't test with that flag."
sam-panzer,2018-02-10 04:57:04,https://api.github.com/repos/google/benchmark/git/commits/296ec5693e7dae47c50244a70297172fab69ccae,296ec5693e7dae47c50244a70297172fab69ccae,"Support State::KeepRunningBatch(). (#521)

* Support State::KeepRunningBatch().

State::KeepRunning() can take large amounts of time relative to quick
operations (on the order of 1ns, depending on hardware). For such
sensitive operations, it is recommended to run batches of repeated
operations.

This commit simplifies handling of total_iterations_. Rather than
predecrementing such that total_iterations_ == 1 signals that
KeepRunning() should exit, total_iterations_ == 0 now signals the
intention for the benchmark to exit.

* Create better fast path in State::KeepRunningBatch()

* Replace int parameter with size_t to fix signed mismatch warnings

* Ensure benchmark State has been started even on error.

* Simplify KeepRunningBatch()"
aJetHorn,2018-02-04 05:04:36,https://api.github.com/repos/google/benchmark/git/commits/bc83262f9d687ac7e31509b3f5177ff391a7452a,bc83262f9d687ac7e31509b3f5177ff391a7452a,.vs/ and CmakeSettings.json to gitignore (#522)
dominichamon,2018-01-29 16:38:47,https://api.github.com/repos/google/benchmark/git/commits/df415adb2abac7fc275c2cd25b0ef6e117688e1e,df415adb2abac7fc275c2cd25b0ef6e117688e1e,Some small clang-tidy fixes (#520)
oskidan,2018-01-19 17:17:01,https://api.github.com/repos/google/benchmark/git/commits/4fe0206b658c6aa1d74a2278c26b50f0938a4e64,4fe0206b658c6aa1d74a2278c26b50f0938a4e64,"Fixes compilation error caused by integer precision loss due to implicit (#518)

conversion in sysinfo.cc"
dominichamon,2018-01-12 01:22:45,https://api.github.com/repos/google/benchmark/git/commits/9f5694ceb6ed34c1eecb1be17415f3fb2d19828f,9f5694ceb6ed34c1eecb1be17415f3fb2d19828f,"Wrap COMPILER macros. (#514)

Some command line or build systems may already set these (eg, bazel) so
make sure that takes priority.

Fixes #513"
EricWF,2018-01-05 19:51:03,https://api.github.com/repos/google/benchmark/git/commits/e1c3a83b8197cf02e794f61228461c27d4e78cfb,e1c3a83b8197cf02e794f61228461c27d4e78cfb,"Merge pull request #509 from efcs/fix-gtest-install

Prevent GTest and GMock from being installed with Google Benchmark."
EricWF,2018-01-05 18:04:22,https://api.github.com/repos/google/benchmark/git/commits/778b85a7a938edccdb77b6c4fc0610999131bc1a,778b85a7a938edccdb77b6c4fc0610999131bc1a,"Prevent GTest and GMock from being installed with Google Benchmark.

When users satisfy the GTest dependancy by placing a googletest
directory in the project, the targets from GTest and GMock incorrectly
get installed along side this library. We shouldn't be installing
our test dependancies.

This patch forces the options that control installation for googletest
to OFF."
winstondu,2018-01-05 00:13:34,https://api.github.com/repos/google/benchmark/git/commits/052421c82337774e769051581a00e66dca58c122,052421c82337774e769051581a00e66dca58c122,"Updated documentation. (#503)

For people who get this library via CMake's AddExternalProject like me.
Would like a long term tutorial from someone who really understands CMake on how to actually link an externalproject's dependencies to another added external project."
dominichamon,2017-12-14 17:40:26,https://api.github.com/repos/google/benchmark/git/commits/e4ccad7c4a36f2a6dfaa2d391c00c5ec4ea63d7c,e4ccad7c4a36f2a6dfaa2d391c00c5ec4ea63d7c,Update README.md
EricWF,2017-12-13 23:26:47,https://api.github.com/repos/google/benchmark/git/commits/7db02be244cb2a960c3da48cbdb5018c7a72b5d7,7db02be244cb2a960c3da48cbdb5018c7a72b5d7,"Add support for GTest based unit tests. (#485)

* Add support for GTest based unit tests.

As Dominic and I have previously discussed, there is some
need/desire to improve the testing situation in Google Benchmark.

One step to fixing this problem is to make it easier to write
unit tests by adding support for GTest, which is what this patch does.

By default it looks for an installed version of GTest. However the
user can specify -DBENCHMARK_BUILD_EXTERNAL_GTEST=ON to instead
download, build, and use copy of gtest from source. This is
quite useful when Benchmark is being built in non-standard configurations,
such as against libc++ or in 32 bit mode."
EricWF,2017-12-13 21:51:56,https://api.github.com/repos/google/benchmark/git/commits/de725e5a7c788311e802f5ed0c3763331a9db60b,de725e5a7c788311e802f5ed0c3763331a9db60b,"Document new 'v2' branch meant for unstable development.

This patch documents the newly added v2 branch, which will
be used to stage, test, and receive feedback on upcoming
features, most of which will be breaking changes which can't
be directly applied to master."
dominichamon,2017-12-07 22:20:59,https://api.github.com/repos/google/benchmark/git/commits/7f2d2cd5b9d8f892862e9c7974ede413c76f9bff,7f2d2cd5b9d8f892862e9c7974ede413c76f9bff,fix xcode travis builds by skipping mkdir errors
ldionne,2017-12-04 01:45:07,https://api.github.com/repos/google/benchmark/git/commits/5b2c08668c2bab4120b02830d38416c3402b7894,5b2c08668c2bab4120b02830d38416c3402b7894,Enforce using a semicolon after BENCHMARK_MAIN to remove compiler warnings (#495)
pwnall,2017-11-30 23:21:32,https://api.github.com/repos/google/benchmark/git/commits/0bbaeeaf7a557469c1f672ee3b7ca926e1a13e88,0bbaeeaf7a557469c1f672ee3b7ca926e1a13e88,Add GCC on OSX to list of Travis CI configurations. (#492)
pwnall,2017-11-30 16:05:38,https://api.github.com/repos/google/benchmark/git/commits/95a1435b8171f7e781fe0465bff8146609a488c1,95a1435b8171f7e781fe0465bff8146609a488c1,Fix compilation error with GCC on OSX (issue #490). (#491)
LebedevRI,2017-11-29 20:48:43,https://api.github.com/repos/google/benchmark/git/commits/c45f01866bdfe7c62a83b51dfb974acb7fa5cab6,c45f01866bdfe7c62a83b51dfb974acb7fa5cab6,"CMake: implement LTO for clang. Fixes #478 (#487)

* CMake: implement LTO for clang. Fixes #478

* LTO: add basic docs about required executables."
Kumar-Kishan,2017-11-29 17:36:19,https://api.github.com/repos/google/benchmark/git/commits/eae42212ced6a5cbd5658b629f70d8851a922b61,eae42212ced6a5cbd5658b629f70d8851a922b61,"Added the installation guide for Ubuntu (#489)

* Initial CLA Requirement

* Added Installation steps to the Readme.md

* Fixed error in running benchmark of Installation

* Remove unwanted commands

Removed the lengthy install procedure with suggested install mechanism"
LebedevRI,2017-11-27 17:01:01,https://api.github.com/repos/google/benchmark/git/commits/ec5684ed759e01b62a82a21cf1a268da3b8ecc5d,ec5684ed759e01b62a82a21cf1a268da3b8ecc5d,"Console reporter: properly account for the lenght of custom counter names (#484)

Old output example:
```
Benchmark                                                 Time           CPU Iterations  CPUTime,s   Pixels/s ThreadingFactor
------------------------------------------------------------------------------------------------------------------------------
20170525_0036TEST.RAF/threads:8/real_time                45 ms         45 ms         16   0.718738 79.6277M/s   0.999978   2.41419GB/s    22.2613 items/s FileSize,MB=111.050781; MPix=57.231360
```

New output example:
```
Benchmark                                                 Time           CPU Iterations  CPUTime,s   Pixels/s ThreadingFactor
------------------------------------------------------------------------------------------------------------------------------
20170525_0036TEST.RAF/threads:8/real_time                45 ms         45 ms         16   0.713575 80.1713M/s        0.999571   2.43067GB/s    22.4133 items/s FileSize,MB=111.050781; MPix=57.231360
```"
EricWF,2017-11-26 20:55:37,https://api.github.com/repos/google/benchmark/git/commits/2ec7399cf1682f1e4f8f9b9f777a81e1a0cce74b,2ec7399cf1682f1e4f8f9b9f777a81e1a0cce74b,"Improve BENCHMARK_UNREACHABLE() implementation.

This patch primarily changes the BENCHMARK_UNREACHABLE()
implementation under MSVC to use __assume(false) instead
of being a NORETURN function, which ironically caused
unreachable code warnings.

Second, since the NOTHROW function attempt generated the
warnings we meant to avoid, it has been replaced with a dummy
null statement."
EricWF,2017-11-26 20:33:01,https://api.github.com/repos/google/benchmark/git/commits/11dc36822b2aaccb51bb1c75dbd43d2026b23cf6,11dc36822b2aaccb51bb1c75dbd43d2026b23cf6,"Improve CPU Cache info reporting -- Add Windows support. (#486)

* Improve CPU Cache info reporting -- Add Windows support.

This patch does a couple of thing regarding CPU Cache reporting.

First, it adds an implementation on Windows. Second it fixes
the JSONReporter to correctly (and actually) output the CPU
configuration information.

And finally, third, it detects and reports the number of
physical CPU's that share the same cache."
EricWF,2017-11-22 16:33:52,https://api.github.com/repos/google/benchmark/git/commits/27e0b439cf0f9be329f617056795b4e5c3612f34,27e0b439cf0f9be329f617056795b4e5c3612f34,"Refactor System information collection -- Add CPU Cache Info (#483)

* Refactor System information collection.

This patch refactors the system information collection,
and in particular information about the target CPU. The
motivation is to make it easier to access CPU information,
and easier to add new information as need be.

This patch additionally adds information about the cache
sizes of the CPU.

* Address review comments: Clean up integer types.

This commit cleans up the integer types used in ValueUnion to
follow the Google style guide.

Additionally it adds a BENCHMARK_UNREACHABLE macro to assist
in documenting/catching unreachable code paths.

* Rename ValueUnion accessors."
krytarowski,2017-11-17 16:46:08,https://api.github.com/repos/google/benchmark/git/commits/aad6a5fa767529d3353bd3beb89e126c7b0868ca,aad6a5fa767529d3353bd3beb89e126c7b0868ca,"Add NetBSD support (#482)

Define BENCHMARK_OS_NETBSD for NetBSD.

Add detection of cpuinfo_cycles_per_second and cpuinfo_num_cpus.
This code shared detection of these properties with FreeBSD."
sesse,2017-11-15 19:51:22,https://api.github.com/repos/google/benchmark/git/commits/0c3ec998c4cc6b7bba7226a3b35a7917613b3802,0c3ec998c4cc6b7bba7226a3b35a7917613b3802,"Add a pkg-config file, for the benefit of projects not using CMake. (#480)"
dominichamon,2017-11-13 17:20:12,https://api.github.com/repos/google/benchmark/git/commits/ed5764ea2815aa7cfbdf5ad2693a99fab10e0451,ed5764ea2815aa7cfbdf5ad2693a99fab10e0451,"Add doc specifying the scope of the timing calculation

Fixes #479"
LebedevRI,2017-11-07 21:35:25,https://api.github.com/repos/google/benchmark/git/commits/5e66248b44747fcfbbc096fa2428680358892f73,5e66248b44747fcfbbc096fa2428680358892f73,"[Tools] A new, more versatile benchmark output compare tool (#474)

* [Tools] A new, more versatile benchmark output compare tool

Sometimes, there is more than one implementation of some functionality.
And the obvious use-case is to benchmark them, which is better?

Currently, there is no easy way to compare the benchmarking results
in that case:
    The obvious solution is to have multiple binaries, each one
containing/running one implementation. And each binary must use
exactly the same benchmark family name, which is super bad,
because now the binary name should contain all the info about
benchmark family...

What if i tell you that is not the solution?
What if we could avoid producing one binary per benchmark family,
with the same family name used in each binary,
but instead could keep all the related families in one binary,
with their proper names, AND still be able to compare them?

There are three modes of operation:
1. Just compare two benchmarks, what `compare_bench.py` did:
```
$ ../tools/compare.py benchmarks ./a.out ./a.out
RUNNING: ./a.out --benchmark_out=/tmp/tmprBT5nW
Run on (8 X 4000 MHz CPU s)
2017-11-07 21:16:44
------------------------------------------------------
Benchmark               Time           CPU Iterations
------------------------------------------------------
BM_memcpy/8            36 ns         36 ns   19101577   211.669MB/s
BM_memcpy/64           76 ns         76 ns    9412571   800.199MB/s
BM_memcpy/512          84 ns         84 ns    8249070   5.64771GB/s
BM_memcpy/1024        116 ns        116 ns    6181763   8.19505GB/s
BM_memcpy/8192        643 ns        643 ns    1062855   11.8636GB/s
BM_copy/8             222 ns        222 ns    3137987   34.3772MB/s
BM_copy/64           1608 ns       1608 ns     432758   37.9501MB/s
BM_copy/512         12589 ns      12589 ns      54806   38.7867MB/s
BM_copy/1024        25169 ns      25169 ns      27713   38.8003MB/s
BM_copy/8192       201165 ns     201112 ns       3486   38.8466MB/s
RUNNING: ./a.out --benchmark_out=/tmp/tmpt1wwG_
Run on (8 X 4000 MHz CPU s)
2017-11-07 21:16:53
------------------------------------------------------
Benchmark               Time           CPU Iterations
------------------------------------------------------
BM_memcpy/8            36 ns         36 ns   19397903   211.255MB/s
BM_memcpy/64           73 ns         73 ns    9691174   839.635MB/s
BM_memcpy/512          85 ns         85 ns    8312329   5.60101GB/s
BM_memcpy/1024        118 ns        118 ns    6438774   8.11608GB/s
BM_memcpy/8192        656 ns        656 ns    1068644   11.6277GB/s
BM_copy/8             223 ns        223 ns    3146977   34.2338MB/s
BM_copy/64           1611 ns       1611 ns     435340   37.8751MB/s
BM_copy/512         12622 ns      12622 ns      54818   38.6844MB/s
BM_copy/1024        25257 ns      25239 ns      27779   38.6927MB/s
BM_copy/8192       205013 ns     205010 ns       3479    38.108MB/s
Comparing ./a.out to ./a.out
Benchmark                 Time             CPU      Time Old      Time New       CPU Old       CPU New
------------------------------------------------------------------------------------------------------
BM_memcpy/8            +0.0020         +0.0020            36            36            36            36
BM_memcpy/64           -0.0468         -0.0470            76            73            76            73
BM_memcpy/512          +0.0081         +0.0083            84            85            84            85
BM_memcpy/1024         +0.0098         +0.0097           116           118           116           118
BM_memcpy/8192         +0.0200         +0.0203           643           656           643           656
BM_copy/8              +0.0046         +0.0042           222           223           222           223
BM_copy/64             +0.0020         +0.0020          1608          1611          1608          1611
BM_copy/512            +0.0027         +0.0026         12589         12622         12589         12622
BM_copy/1024           +0.0035         +0.0028         25169         25257         25169         25239
BM_copy/8192           +0.0191         +0.0194        201165        205013        201112        205010
```

2. Compare two different filters of one benchmark:
(for simplicity, the benchmark is executed twice)
```
$ ../tools/compare.py filters ./a.out BM_memcpy BM_copy
RUNNING: ./a.out --benchmark_filter=BM_memcpy --benchmark_out=/tmp/tmpBWKk0k
Run on (8 X 4000 MHz CPU s)
2017-11-07 21:37:28
------------------------------------------------------
Benchmark               Time           CPU Iterations
------------------------------------------------------
BM_memcpy/8            36 ns         36 ns   17891491   211.215MB/s
BM_memcpy/64           74 ns         74 ns    9400999   825.646MB/s
BM_memcpy/512          87 ns         87 ns    8027453   5.46126GB/s
BM_memcpy/1024        111 ns        111 ns    6116853    8.5648GB/s
BM_memcpy/8192        657 ns        656 ns    1064679   11.6247GB/s
RUNNING: ./a.out --benchmark_filter=BM_copy --benchmark_out=/tmp/tmpAvWcOM
Run on (8 X 4000 MHz CPU s)
2017-11-07 21:37:33
----------------------------------------------------
Benchmark             Time           CPU Iterations
----------------------------------------------------
BM_copy/8           227 ns        227 ns    3038700   33.6264MB/s
BM_copy/64         1640 ns       1640 ns     426893   37.2154MB/s
BM_copy/512       12804 ns      12801 ns      55417   38.1444MB/s
BM_copy/1024      25409 ns      25407 ns      27516   38.4365MB/s
BM_copy/8192     202986 ns     202990 ns       3454   38.4871MB/s
Comparing BM_memcpy to BM_copy (from ./a.out)
Benchmark                               Time             CPU      Time Old      Time New       CPU Old       CPU New
--------------------------------------------------------------------------------------------------------------------
[BM_memcpy vs. BM_copy]/8            +5.2829         +5.2812            36           227            36           227
[BM_memcpy vs. BM_copy]/64          +21.1719        +21.1856            74          1640            74          1640
[BM_memcpy vs. BM_copy]/512        +145.6487       +145.6097            87         12804            87         12801
[BM_memcpy vs. BM_copy]/1024       +227.1860       +227.1776           111         25409           111         25407
[BM_memcpy vs. BM_copy]/8192       +308.1664       +308.2898           657        202986           656        202990
```

3. Compare filter one from benchmark one to filter two from benchmark two:
(for simplicity, the benchmark is executed twice)
```
$ ../tools/compare.py benchmarksfiltered ./a.out BM_memcpy ./a.out BM_copy
RUNNING: ./a.out --benchmark_filter=BM_memcpy --benchmark_out=/tmp/tmp_FvbYg
Run on (8 X 4000 MHz CPU s)
2017-11-07 21:38:27
------------------------------------------------------
Benchmark               Time           CPU Iterations
------------------------------------------------------
BM_memcpy/8            37 ns         37 ns   18953482   204.118MB/s
BM_memcpy/64           74 ns         74 ns    9206578   828.245MB/s
BM_memcpy/512          91 ns         91 ns    8086195   5.25476GB/s
BM_memcpy/1024        120 ns        120 ns    5804513   7.95662GB/s
BM_memcpy/8192        664 ns        664 ns    1028363   11.4948GB/s
RUNNING: ./a.out --benchmark_filter=BM_copy --benchmark_out=/tmp/tmpDfL5iE
Run on (8 X 4000 MHz CPU s)
2017-11-07 21:38:32
----------------------------------------------------
Benchmark             Time           CPU Iterations
----------------------------------------------------
BM_copy/8           230 ns        230 ns    2985909   33.1161MB/s
BM_copy/64         1654 ns       1653 ns     419408   36.9137MB/s
BM_copy/512       13122 ns      13120 ns      53403   37.2156MB/s
BM_copy/1024      26679 ns      26666 ns      26575   36.6218MB/s
BM_copy/8192     215068 ns     215053 ns       3221   36.3283MB/s
Comparing BM_memcpy (from ./a.out) to BM_copy (from ./a.out)
Benchmark                               Time             CPU      Time Old      Time New       CPU Old       CPU New
--------------------------------------------------------------------------------------------------------------------
[BM_memcpy vs. BM_copy]/8            +5.1649         +5.1637            37           230            37           230
[BM_memcpy vs. BM_copy]/64          +21.4352        +21.4374            74          1654            74          1653
[BM_memcpy vs. BM_copy]/512        +143.6022       +143.5865            91         13122            91         13120
[BM_memcpy vs. BM_copy]/1024       +221.5903       +221.4790           120         26679           120         26666
[BM_memcpy vs. BM_copy]/8192       +322.9059       +323.0096           664        215068           664        215053
```

* [Docs] Document tools/compare.py

* [docs] Document how the change is calculated"
dominichamon,2017-11-07 18:33:07,https://api.github.com/repos/google/benchmark/git/commits/90aa8665b5080f7a931567fbc92cda883bc870b4,90aa8665b5080f7a931567fbc92cda883bc870b4,"Reorder inline to avoid warning on MSVC (#469)

Fixes #467"
dominichamon,2017-11-07 18:30:17,https://api.github.com/repos/google/benchmark/git/commits/f4009ef8e3c3b29e3fb3b8846b42f58e0e23a5a2,f4009ef8e3c3b29e3fb3b8846b42f58e0e23a5a2,Fix #476. Explicit coersion of size_t to boolean (#477)
EricWF,2017-11-07 17:44:39,https://api.github.com/repos/google/benchmark/git/commits/72a4581caf5897f94256dea4be7efa745b46f719,72a4581caf5897f94256dea4be7efa745b46f719,"Fix #382 - MinGW often reports negative CPU times. (#475)

When stopping a timer, the current time is subtracted
from the start time. However, when the times are identical,
or sufficiently close together, the subtraction can result
in a negative number.

For some reason MinGW is the only platform where this problem
manifests. I suspect it's due to MinGW specific behavior in either
the CPU timing code, floating point model, or printf formatting.

Either way, the fix for MinGW should be correct across all platforms."
dominichamon,2017-11-06 16:53:23,https://api.github.com/repos/google/benchmark/git/commits/f65c6d9a2cfb01d268d0f0aa7aafa2c2ff9f1b8f,f65c6d9a2cfb01d268d0f0aa7aafa2c2ff9f1b8f,Remove deprecated headers (#473)
dominichamon,2017-11-03 19:45:16,https://api.github.com/repos/google/benchmark/git/commits/1e52560157d73d7e180e6e2c8d928be5a8e99795,1e52560157d73d7e180e6e2c8d928be5a8e99795,Add releasing doc (#472)
LebedevRI,2017-11-03 17:00:29,https://api.github.com/repos/google/benchmark/git/commits/336bb8db986cc52cdf0cefa0a7378b9567d1afee,336bb8db986cc52cdf0cefa0a7378b9567d1afee,"Update AUTHORS/CONTRIBUTORS (#471)

As requested, in a pr form :)"
ensonic,2017-11-02 15:34:06,https://api.github.com/repos/google/benchmark/git/commits/4463a60efe6d70ae9af2d58261f30d2fff06920f,4463a60efe6d70ae9af2d58261f30d2fff06920f,"Mention how to disable CPU frequency scaling while running the benchmark. (#466)

Describe how to use the cpupower command to disable CPU frequency scaling.
Document this, since there are other ways that don't see to have the same
effect. See #325"
leokoppel,2017-10-31 18:00:39,https://api.github.com/repos/google/benchmark/git/commits/fa341e51cb7f6bce69a7577f4000381a03f61c70,fa341e51cb7f6bce69a7577f4000381a03f61c70," Improve BM_SetInsert example (#465)

* Fix BM_SetInsert example

Move declaration of `std::set<int> data` outside the timing loop, so that the
destructor is not timed.

* Speed up BM_SetInsert test

Since the time taken to ConstructRandomSet() is so large compared to the time
to insert one element, but only the latter is used to determine number of
iterations, this benchmark now takes an extremely long time to run in
benchmark_test.

Speed it up two ways:
  - Increase the Ranges() parameters
  - Cache ConstructRandomSet() result (it's not random anyway), and do only
    O(N) copy every iteration

* Fix same issue in BM_MapLookup test

* Make BM_SetInsert test consistent with README

- Use the same Ranges everywhere, but increase the 2nd range
- Change order of Args() calls in README to more closely match the result of Ranges
- Don't cache ConstructRandomSet, since it doesn't make sense in README
- Get a smaller optimization inside it, by givint a hint to insert()"
Yangqing,2017-10-20 20:49:37,https://api.github.com/repos/google/benchmark/git/commits/491360b833aaab96818dce256a8409f6296dd995,491360b833aaab96818dce256a8409f6296dd995,"Add option to install benchmark (#463)

* Add option to install benchmark

* Change to BENCHMARK_ENABLE_INSTALL per @dominichamon"
EricWF,2017-10-17 18:17:02,https://api.github.com/repos/google/benchmark/git/commits/25acf220a44ccc41104a690731fcf646cc3e8192,25acf220a44ccc41104a690731fcf646cc3e8192,"Refactor most usages of KeepRunning to use the perfered ranged-for. (#459)

Recently the library added a new ranged-for variant of the KeepRunning
loop that is much faster. For this reason it should be preferred in all
new code.

Because a library, its documentation, and its tests should all embody
the best practices of using the library, this patch changes all but a
few usages of KeepRunning() into for (auto _ : state).

The remaining usages in the tests and documentation persist only
to document and test behavior that is different between the two formulations.

Also note that because the range-for loop requires C++11, the KeepRunning
variant has not been deprecated at this time."
EricWF,2017-10-17 16:24:13,https://api.github.com/repos/google/benchmark/git/commits/22fd1a556eadce4f314a9819ed29cc886e9ba552,22fd1a556eadce4f314a9819ed29cc886e9ba552,Fix and document SkipWithError(...) using ranged-for loop.
EricWF,2017-10-17 15:40:44,https://api.github.com/repos/google/benchmark/git/commits/a37fc0c48a73beefeca240e9fa853fa2def1dd06,a37fc0c48a73beefeca240e9fa853fa2def1dd06,"Improve KeepRunning loop performance to be similar to the range-based for. (#460)

This patch improves the performance of the KeepRunning loop in two ways:

(A) it removes the dependency on the max_iterations variable, preventing
it from being loaded every iteration.

(B) it loops to zero, instead of to an upper bound. This allows a single
decrement instruction to be used instead of a arithmetic op followed by a
comparison."
FredTingaud,2017-10-16 16:17:17,https://api.github.com/repos/google/benchmark/git/commits/2fc2ea0e45578704378ae452b6745d0c54b528fb,2fc2ea0e45578704378ae452b6745d0c54b528fb,Correct typo in sample code for range-based for loop. (#458)
Algunenano,2017-10-13 16:17:02,https://api.github.com/repos/google/benchmark/git/commits/cacd3218080fa648efdfe0b09227ab7f96fb6bb2,cacd3218080fa648efdfe0b09227ab7f96fb6bb2,"Avoid implicit float to double conversion (#457)

Triggered by -Werror=double-promotion"
EricWF,2017-10-10 15:56:42,https://api.github.com/repos/google/benchmark/git/commits/05267559447a610476515d1d089d142e5941f61b,05267559447a610476515d1d089d142e5941f61b,"Add C++11 Ranged For loop alternative to KeepRunning (#454)

* Add C++11 Ranged For loop alternative to KeepRunning

As pointed out by @astrelni and @dominichamon, the KeepRunning
loop requires a bunch of memory loads and stores every iterations,
which affects the measurements.

The main reason for these additional loads and stores is that the
State object is passed in by reference, making its contents externally
visible memory, and the compiler doesn't know it hasn't been changed
by non-visible code.

It's also possible the large size of the State struct is hindering
optimizations.

This patch allows the `State` object to be iterated over using
a range-based for loop. Example:

void BM_Foo(benchmark::State& state) {
	for (auto _ : state) {
		[...]
	}
}

This formulation is much more efficient, because the variable counting
the loop index is stored in the iterator produced by `State::begin()`,
which itself is stored in function-local memory and therefore not accessible
by code outside of the function. Therefore the compiler knows the iterator
hasn't been changed every iteration.

This initial patch and idea was from Alex Strelnikov.

* Fix null pointer initialization in C++03"
mwinterb,2017-10-09 22:19:01,https://api.github.com/repos/google/benchmark/git/commits/f3cd636f18aff1dc47837b37ccee5331c6427f64,f3cd636f18aff1dc47837b37ccee5331c6427f64,"Always use inline asm DoNotOptimize with clang. (#452)

* Always use inline asm DoNotOptimize with clang.

clang-cl masquerades as MSVC but not GCC, so it was using the
MSVC-compatible definitions of DoNotOptimize and ClobberMemory.
Presumably, it's better in general to use the targeted assembly for
this functionality (the codegen is different), but the specific issue
is that clang-cl deprecates the usage of _ReadWriteBarrier, and this
gets rid of that warning.

* triggering another AppVeyor run"
onto,2017-10-09 19:10:37,https://api.github.com/repos/google/benchmark/git/commits/819adb4cd111df5bbe89f8a3ecccc716b50832ca,819adb4cd111df5bbe89f8a3ecccc716b50832ca,"Add macros for create benchmark with templated fixture (#451)

* Add macros for create benchmark with templated fixture

* Add info about templated fixtures to README.md

* Add tests for templated fixtures"
dominichamon,2017-10-09 19:01:30,https://api.github.com/repos/google/benchmark/git/commits/2409cb2eb153558f66d5762a3b4228ac4e37b264,2409cb2eb153558f66d5762a3b4228ac4e37b264,Minor move of code to cleanup up namespace spaghetti a bit
dominichamon,2017-09-27 18:53:16,https://api.github.com/repos/google/benchmark/git/commits/a96ff121b34532bb007c51ffd8e626e38decd732,a96ff121b34532bb007c51ffd8e626e38decd732,"Alphabets are hard. AUTHORS version.

#448"
dominichamon,2017-09-27 18:52:47,https://api.github.com/repos/google/benchmark/git/commits/5d47e9878ff3bd6d18f3ceae4730404518346bf3,5d47e9878ff3bd6d18f3ceae4730404518346bf3,"Alphabets are hard. CONTRIBUTORS version.

#448"
dominichamon,2017-09-27 18:01:49,https://api.github.com/repos/google/benchmark/git/commits/8792dff1c9452eb5acf0374e6856b2791f6102dc,8792dff1c9452eb5acf0374e6856b2791f6102dc,"Remove myself from AUTHORS

Covered by Google Inc here and i'm in CONTRIBUTORS"
dominichamon,2017-09-27 18:01:10,https://api.github.com/repos/google/benchmark/git/commits/359120be78c17b2293c7f03f632ec0cd1b759c4e,359120be78c17b2293c7f03f632ec0cd1b759c4e,"Order CONTRIBUTORS

Fixes #448"
dominichamon,2017-09-27 18:00:12,https://api.github.com/repos/google/benchmark/git/commits/84a54ae9f49268d3eda9e1e1b6923775a9b2bd59,84a54ae9f49268d3eda9e1e1b6923775a9b2bd59,"Organize AUTHORS

Part of #448"
EricWF,2017-09-14 21:50:33,https://api.github.com/repos/google/benchmark/git/commits/6d8339dd97afea4633e54ed4b42307aff4386040,6d8339dd97afea4633e54ed4b42307aff4386040,"Fix #444 - Use BENCHMARK_HAS_CXX11 over __cplusplus. (#446)

* Fix #444 - Use BENCHMARK_HAS_CXX11 over __cplusplus.

MSVC incorrectly defines __cplusplus to report C++03, despite the compiler
actually providing C++11 or greater. Therefore we have to detect C++11 differently
for MSVC. This patch uses `_MSVC_LANG` which has been defined since
Visual Studio 2015 Update 3; which should be sufficient for detecting C++11.

Secondly this patch changes over most usages of __cplusplus >= 201103L to
check BENCHMARK_HAS_CXX11 instead.

* remove redunant comment"
disconnect3d,2017-09-14 07:31:35,https://api.github.com/repos/google/benchmark/git/commits/2a05f248be98999d14975c409683fd9f1a753ba2,2a05f248be98999d14975c409683fd9f1a753ba2,Improve README's basic usage example (#433)
schra,2017-09-13 21:42:45,https://api.github.com/repos/google/benchmark/git/commits/24b804273382d258b92b3c4beceed3a2ab8ddc65,24b804273382d258b92b3c4beceed3a2ab8ddc65,Fix Markdown typos in readme. (#445)
LebedevRI,2017-08-28 23:12:18,https://api.github.com/repos/google/benchmark/git/commits/886585a3b79710d67eb3e7368f0cb8d748eb1d5f,886585a3b79710d67eb3e7368f0cb8d748eb1d5f,"[RFC] Tools: compare-bench.py: print change% with two decimal digits (#440)

* Tools: compare-bench.py: print change% with two decimal digits

Here is a comparison of before vs. after:
```diff
-Benchmark                      Time           CPU      Time Old      Time New       CPU Old       CPU New
----------------------------------------------------------------------------------------------------------
-BM_SameTimes                  +0.00         +0.00            10            10            10            10
-BM_2xFaster                   -0.50         -0.50            50            25            50            25
-BM_2xSlower                   +1.00         +1.00            50           100            50           100
-BM_1PercentFaster             -0.01         -0.01           100            99           100            99
-BM_1PercentSlower             +0.01         +0.01           100           101           100           101
-BM_10PercentFaster            -0.10         -0.10           100            90           100            90
-BM_10PercentSlower            +0.10         +0.10           100           110           100           110
-BM_100xSlower                +99.00        +99.00           100         10000           100         10000
-BM_100xFaster                 -0.99         -0.99         10000           100         10000           100
-BM_10PercentCPUToTime         +0.10         -0.10           100           110           100            90
+Benchmark                        Time             CPU      Time Old      Time New       CPU Old       CPU New
+-------------------------------------------------------------------------------------------------------------
+BM_SameTimes                  +0.0000         +0.0000            10            10            10            10
+BM_2xFaster                   -0.5000         -0.5000            50            25            50            25
+BM_2xSlower                   +1.0000         +1.0000            50           100            50           100
+BM_1PercentFaster             -0.0100         -0.0100           100            99           100            99
+BM_1PercentSlower             +0.0100         +0.0100           100           101           100           101
+BM_10PercentFaster            -0.1000         -0.1000           100            90           100            90
+BM_10PercentSlower            +0.1000         +0.1000           100           110           100           110
+BM_100xSlower                +99.0000        +99.0000           100         10000           100         10000
+BM_100xFaster                 -0.9900         -0.9900         10000           100         10000           100
+BM_10PercentCPUToTime         +0.1000         -0.1000           100           110           100            90
+BM_ThirdFaster                -0.3333         -0.3333           100            67           100            67

```

So the first (""Time"") column is exactly where it was, but with
two more decimal digits. The position of the '.' in the second
(""CPU"") column is shifted right by those two positions, and the
rest is unmodified, but simply shifted right by those 4 positions.

As for the reasoning, i guess it is more or less the same as
with #426. In some sad times, microbenchmarking is not applicable.
In those cases, the more precise the change report is, the better.

The current formatting prints not so much the percentages,
but the fraction i'd say. It is more useful for huge changes,
much more than 100%. That is not always the case, especially
if it is not a microbenchmark. Then, even though the change
may be good/bad, the change is small (<0.5% or so),
rounding happens, and it is no longer possible to tell.

I do acknowledge that this change does not fix that problem. Of
course, confidence intervals and such would be better, and they
would probably fix the problem. But i think this is good as-is
too, because now the you see 2 fractional percentage digits!1

The obvious downside is that the output is now even wider.

* Revisit tests, more closely documents the current behavior."
LebedevRI,2017-08-28 23:10:19,https://api.github.com/repos/google/benchmark/git/commits/6e06648133f65e336489be99d0b7448bd7839463,6e06648133f65e336489be99d0b7448bd7839463,Attempting to resolve a submoduling issues... (#439)
LebedevRI,2017-08-23 23:44:29,https://api.github.com/repos/google/benchmark/git/commits/a271c36af93c7a3b19dfeb2aefa9ca77a58e52e4,a271c36af93c7a3b19dfeb2aefa9ca77a58e52e4,"Drop Stat1, refactor statistics to be user-providable, add median. (#428)

* Drop Stat1, refactor statistics to be user-providable, add median.

My main goal was to add median statistic. Since Stat1
calculated the stats incrementally, and did not store
the values themselves, it is was not possible. Thus,
i have replaced Stat1 with simple std::vector<double>,
containing all the values.

Then, i have refactored current mean/stdev to be a
function that is provided with values vector, and
returns the statistic. While there, it seemed to make
sense to deduplicate the code by storing all the
statistics functions in a map, and then simply iterate
over it. And the interface to add new statistics is
intentionally exposed, so they may be added easily.

The notable change is that Iterations are no longer
displayed as 0 for stdev. Is could be changed, but
i'm not sure how to nicely fit that into the API.

Similarly, this dance about sometimes (for some fields,
for some statistics) dividing by run.iterations, and
then multiplying the calculated stastic back is also
dropped, and if you do the math, i fail to see why
it was needed there in the first place.

Since that was the only use of stat.h, it is removed.

* complexity.h: attempt to fix MSVC build

* Update README.md

* Store statistics to compute in a vector, ensures ordering.

* Add a bit more tests for repetitions.

* Partially address review notes.

* Fix gcc build: drop extra ';'

clang, why didn't you warn me?

* Address review comments.

* double() -> 0.0
* early return"
dominichamon,2017-08-21 23:05:24,https://api.github.com/repos/google/benchmark/git/commits/d70417994a3c845c49c4443e92b26a52b320a759,d70417994a3c845c49c4443e92b26a52b320a759,"Allow the definition of 1k to be flexible. (#438)

When generating a human-readable number for user counters, we don't
generally expect 1k to be 1024. This is the default due to the more
general purpose string utility.

Fixes #437"
LebedevRI,2017-08-18 17:55:27,https://api.github.com/repos/google/benchmark/git/commits/c7192c8a9af0a1cb4d013c589af92d6dceedef60,c7192c8a9af0a1cb4d013c589af92d6dceedef60,"compare_bench.py: fixup benchmark_options. (#435)

https://github.com/google/benchmark/commit/2373382284918fda13f726aefd6e2f700784797f
reworked parsing, and introduced a regression
in handling of the optional options that
should be passed to both of the benchmarks.

Now, unless the *first* optional argument starts with
'-', it would just complain about that argument:
	Unrecognized positional argument arguments: '['q']'
which is wrong. However if some dummy arg like '-q' was
passed first, it would then happily passthrough them all...

This commit fixes benchmark_options behavior, by
restoring original passthrough behavior for all
the optional positional arguments."
pwnall,2017-08-15 22:53:30,https://api.github.com/repos/google/benchmark/git/commits/902936033d90dc42ddaa5ca5c120722d32c90602,902936033d90dc42ddaa5ca5c120722d32c90602,CMake: Fallback from try_run to try_compile when cross-compiling. (#436)
LebedevRI,2017-08-01 01:04:02,https://api.github.com/repos/google/benchmark/git/commits/3347a20e0e7aff733371cdc2ec371ea73bfdcecb,3347a20e0e7aff733371cdc2ec371ea73bfdcecb,"reporter_output_test: json: iterations is int, not float (#431)

May be relevant for flakiness of win builds

Noted by @KindDragon"
EricWF,2017-07-31 00:41:57,https://api.github.com/repos/google/benchmark/git/commits/abafced9909c7e5e8f6b8236eecd953caa4f8e6f,abafced9909c7e5e8f6b8236eecd953caa4f8e6f,"Suppress -Wodr on C++03 tests when LTO is enabled.

The benchmark library is compiled as C++11, but certain
tests are compiled as C++03. When -flto is enabled GCC 5.4
and above will diagnose an ODR violation in libstdc++'s <map>.

This ODR violation, although real, should likely be benign. For
this reason it seems sensible to simply suppress -Wodr when building
the C++03 test.

This patch fixes #420 and supersede's PR #424."
LebedevRI,2017-07-25 16:09:26,https://api.github.com/repos/google/benchmark/git/commits/d474450b8931c2c5c53e5d950341cb65f39c0f40,d474450b8931c2c5c53e5d950341cb65f39c0f40,"Tooling: generate_difference_report(): show old/new for both values (#427)

While the percentages are displayed for both of the columns,
the old/new values are only displayed for the second column,
for the CPU time. And the column is not even spelled out.

In cases where b->UseRealTime(); is used, this is at the
very least highly confusing. So why don't we just
display both the old/new for both the columns?

Fixes #425"
LebedevRI,2017-07-24 23:13:55,https://api.github.com/repos/google/benchmark/git/commits/b9be142d1e2dbc06cf2efd44919f6c422c43cddb,b9be142d1e2dbc06cf2efd44919f6c422c43cddb,"Json reporter: don't cast floating-point to int; adjust tooling (#426)

* Json reporter: passthrough fp, don't cast it to int; adjust tooling

Json output format is generally meant for further processing
using some automated tools. Thus, it makes sense not to
intentionally limit the precision of the values contained
in the report.

As it can be seen, FormatKV() for doubles, used %.2f format,
which was meant to preserve at least some of the precision.
However, before that function is ever called, the doubles
were already cast to the integer via RoundDouble()...

This is also the case for console reporter, where it makes
sense because the screen space is limited, and this reporter,
however the CSV reporter does output some( decimal digits.

Thus i can only conclude that the loss of the precision
was not really considered, so i have decided to adjust the
code of the json reporter to output the full fp precision.

There can be several reasons why that is the right thing
to do, the bigger the time_unit used, the greater the
precision loss, so i'd say any sort of further processing
(like e.g. tools/compare_bench.py does) is best done
on the values with most precision.

Also, that cast skewed the data away from zero, which
i think may or may not result in false- positives/negatives
in the output of tools/compare_bench.py

* Json reporter: FormatKV(double): address review note

* tools/gbench/report.py: skip benchmarks with different time units

While it may be useful to teach it to operate on the
measurements with different time units, which is now
possible since floats are stored, and not the integers,
but for now at least doing such a sanity-checking
is better than providing misinformation."
dominichamon,2017-07-14 22:21:20,https://api.github.com/repos/google/benchmark/git/commits/5b7683f49e1e9223cf9927b24f6fd3d6bd82e3f8,5b7683f49e1e9223cf9927b24f6fd3d6bd82e3f8,more clang tidy cleanups (#417)
dominichamon,2017-07-13 16:33:43,https://api.github.com/repos/google/benchmark/git/commits/e8fc2a2b8ccd33fefdd7f95e1a2aabee0788c4d6,e8fc2a2b8ccd33fefdd7f95e1a2aabee0788c4d6,Google-style cleanups (#416)
tommadams,2017-07-06 22:59:13,https://api.github.com/repos/google/benchmark/git/commits/ee3cfca651deae5c8af3e873f5d085074cde9fad,ee3cfca651deae5c8af3e873f5d085074cde9fad,"Fix ThreadCPUUsage when running on RTEMS. (#414)

Change ThreadCPUUsage to call ProcessCPUUsage if __rtems__ is defined.

RTEMS real time OS doesn't support CLOCK_THREAD_CPUTIME_ID. See
https://github.com/RTEMS/rtems/blob/master/cpukit/posix/src/clockgettime.c#L58-L59

Prior to this change, ThreadCPUUsage would fail when running on RTEMS with:
  ERROR: clock_gettime(CLOCK_THREAD_CPUTIME_ID, ...) failed"
EricWF,2017-07-04 22:31:47,https://api.github.com/repos/google/benchmark/git/commits/9d4b719daeda35acf3a3d81b9ac1f38fc13333d1,9d4b719daeda35acf3a3d81b9ac1f38fc13333d1,"Make Benchmark a single header library (but not header-only) (#407)

* Make Benchmark a single header library (but not header-only)

This patch refactors benchmark into a single header, to allow
for slightly easier usage.

The initial reason for the header split was to keep C++ library
components from being included by benchmark_api.h, making that
part of the library STL agnostic. However this has since changed
and there seems to be little reason to separate the reporters from
the rest of the library.

* Fix internal_macros.h

* Remove more references to macros.h"
jernkuan,2017-06-16 21:46:11,https://api.github.com/repos/google/benchmark/git/commits/710c2b89d8c6e839e51ac148b4e840ce2c009dbb,710c2b89d8c6e839e51ac148b4e840ce2c009dbb,"Fix #403 HAVE_${VAR} not passed to makefile (#404)

Add definition of ${VAR} to makefiles if specified as part of cmake
parameter."
EricWF,2017-06-14 16:16:53,https://api.github.com/repos/google/benchmark/git/commits/b8a2206fb20107c8a60a543928106a0ed71e89b5,b8a2206fb20107c8a60a543928106a0ed71e89b5,"Add ClearRegisteredBenchmark() function. (#402)

* Add ClearRegisteredBenchmark() function.

Since benchmarks can be registered at runtime using the RegisterBenchmark(...)
functions, it makes sense to have a ClearRegisteredBenchmarks() function too,
that can be used at runtime to clear the currently registered benchmark and
re-register an entirely new set.

This allows users to run a set of registered benchmarks, get the output using
a custom reporter, and then clear and re-register new benchmarks based on the
previous results.

This fixes issue #400, at least partially.

* Remove unused change"
EricWF,2017-06-14 00:42:32,https://api.github.com/repos/google/benchmark/git/commits/d6aacaf48f18d076feb2ab8c0655efc74e82dfbd,d6aacaf48f18d076feb2ab8c0655efc74e82dfbd,"Revert ""Use NEW settings for CMP0063 policy (#399)"" (#401)

This reverts commit af542061c53f9c1746c5c1c84493c903978988a7."
Timmmm,2017-06-14 00:42:07,https://api.github.com/repos/google/benchmark/git/commits/af542061c53f9c1746c5c1c84493c903978988a7,af542061c53f9c1746c5c1c84493c903978988a7,"Use NEW settings for CMP0063 policy (#399)

This removes warnings when using CMake >= 3.3 if you have symbol visibility set."
yixuan,2017-06-05 17:32:15,https://api.github.com/repos/google/benchmark/git/commits/f3b3dd99be97c330f9f4a7c0a2e5dbc3f767c558,f3b3dd99be97c330f9f4a7c0a2e5dbc3f767c558,"Use the sample version of standard deviation (#383)

* remove unnecessary weights

* use sample standard deviation

* add contributor information

* remove redundant code

* initialize variable to eliminate compiler warning"
EricWF,2017-06-02 22:47:24,https://api.github.com/repos/google/benchmark/git/commits/93bfabc8b89270c00816c3cafb601475eaf85364,93bfabc8b89270c00816c3cafb601475eaf85364,"Fix #342: DoNotOptimize causes compile errors on older GCC versions. (#398)

* Fix #342: DoNotOptimize causes compile errors on older GCC versions.

DoNotOptimize uses inline assembly contraints to tell
the compiler what the type of the input variable. The 'g'
operand allows the input to be any register, memory, or
immediate integer operand. However this constraint seems
to be too weak on older GCC versions, and certain inputs
will cause compile errors.

This patch changes the constraint to 'X', which is documented
as ""any operand whatsoever is allowed"". This appears to fix
the issues with older GCC versions.

However Clang doesn't seem to like ""X"", and will attempt
to put the input into a register even when it can't/shouldn't;
causing a compile error. However using ""g"" seems to work like
""X"" with GCC, so for this reason Clang still uses ""g"".

* Try alternative formulation to placate GCC"
dkruger,2017-05-23 15:40:31,https://api.github.com/repos/google/benchmark/git/commits/15e9ebaf8363e723478cba23d0651274201c7750,15e9ebaf8363e723478cba23d0651274201c7750,"Associate the required include directory with the benchmark library (#393)

Using target_include_directories CMake will implicitly add the the
necessary include paths to targets which link against the benchmark
library. This is useful when the benchmark repo is included as a
subdirectory in another CMake build."
dominichamon,2017-05-22 16:27:28,https://api.github.com/repos/google/benchmark/git/commits/febd0d7a7a22dc98db3303eebfaecac9c7007af0,febd0d7a7a22dc98db3303eebfaecac9c7007af0,Remove unnecessary whitespace in travis yaml
tusharpm,2017-05-22 16:26:05,https://api.github.com/repos/google/benchmark/git/commits/b1f33d44ea028bc662d8721ecd370d2472173334,b1f33d44ea028bc662d8721ecd370d2472173334,Add macOS builds to .travis.yml (#389)
EricWF,2017-05-04 05:43:16,https://api.github.com/repos/google/benchmark/git/commits/cb8a0cc10f8b634fd554251ae086da522b58f50e,cb8a0cc10f8b634fd554251ae086da522b58f50e,test commit
dominichamon,2017-05-03 16:11:45,https://api.github.com/repos/google/benchmark/git/commits/4cfe790a253d2cb47f33b29676c0a27c462704cb,4cfe790a253d2cb47f33b29676c0a27c462704cb,Merge branch 'biojppm-compact'
biojppm,2017-05-02 23:05:15,https://api.github.com/repos/google/benchmark/git/commits/ec6f03579eb7fe1296d161c838f960ca993fd182,ec6f03579eb7fe1296d161c838f960ca993fd182,"Trying again to fix error caused by -Wunused-function.

This thing with the pragma ignore was getting out of hand: now
MinGW (and probably GCC) was erroring too. So I chose to move
the definition of IsZero() out of the anonymous namespace into
benchmark.cc."
biojppm,2017-05-02 22:35:46,https://api.github.com/repos/google/benchmark/git/commits/17354131886a9eec06e5e34e0be0583ac32728ca,17354131886a9eec06e5e34e0be0583ac32728ca,Fix pragma clang ignore with gcc.
biojppm,2017-05-02 22:30:36,https://api.github.com/repos/google/benchmark/git/commits/160770fd08f8da8167edf66f55a047af1bc6291f,160770fd08f8da8167edf66f55a047af1bc6291f,Fix dropped-style elses.
biojppm,2017-05-02 22:25:22,https://api.github.com/repos/google/benchmark/git/commits/a31088632a54d179308d3d937f2e0f9a19df353d,a31088632a54d179308d3d937f2e0f9a19df353d,"Fix (that is, ignore) clang compile error."
biojppm,2017-05-02 22:00:45,https://api.github.com/repos/google/benchmark/git/commits/020bac985b93308750b90cca6921b7425ca57b3d,020bac985b93308750b90cca6921b7425ca57b3d,Extend tabular counter tests to different counter sets.
biojppm,2017-05-02 21:14:49,https://api.github.com/repos/google/benchmark/git/commits/25060449020a5f1e739064fc155ca7c4c94935a1,25060449020a5f1e739064fc155ca7c4c94935a1,Add unit test for counter sets.
biojppm,2017-05-02 21:10:08,https://api.github.com/repos/google/benchmark/git/commits/ea019f3cd8cf8433416f1c42d5e0a7e18fcbcc6f,ea019f3cd8cf8433416f1c42d5e0a7e18fcbcc6f,Allow different counter sets in CSV reporting.
biojppm,2017-05-02 19:48:29,https://api.github.com/repos/google/benchmark/git/commits/3db6254c391174b47cee8c98a2bba08bf363ffe2,3db6254c391174b47cee8c98a2bba08bf363ffe2,Console reporter: add /s prefix to counter rates.
biojppm,2017-05-02 19:47:41,https://api.github.com/repos/google/benchmark/git/commits/cf20dc967f2cf5307ca6e4bc06a36490c1b5c835,cf20dc967f2cf5307ca6e4bc06a36490c1b5c835,Add test for tabular output of rate counters.
biojppm,2017-05-02 19:33:28,https://api.github.com/repos/google/benchmark/git/commits/c69b385c9ce92ce4b05c3109cfdb8086d75600d6,c69b385c9ce92ce4b05c3109cfdb8086d75600d6,Add first unit test for benchmark_tabular_counters.
biojppm,2017-05-02 19:31:54,https://api.github.com/repos/google/benchmark/git/commits/17a012d7549fa0e962dfa0622de8aef60c42bd3a,17a012d7549fa0e962dfa0622de8aef60c42bd3a,Fix: --benchmark_counters_tabular was not being passed to tests.
biojppm,2017-05-02 17:54:37,https://api.github.com/repos/google/benchmark/git/commits/615151723e43b4e925732e33ab428b6d9b3f8b43,615151723e43b4e925732e33ab428b6d9b3f8b43,Merge remote-tracking branch 'upstream/master' into compact
dominichamon,2017-05-02 15:44:55,https://api.github.com/repos/google/benchmark/git/commits/da8cd74d85fa44c8feb08e886847517caa35a0d1,da8cd74d85fa44c8feb08e886847517caa35a0d1,Merge branch 'biojppm-test_usercounters'
dominichamon,2017-05-02 15:43:46,https://api.github.com/repos/google/benchmark/git/commits/25af505d9fbcc1ac5480a28824bdb621d004dc26,25af505d9fbcc1ac5480a28824bdb621d004dc26,Merge branch 'test_usercounters' of git://github.com/biojppm/benchmark into biojppm-test_usercounters
felixduvallet,2017-05-02 15:19:35,https://api.github.com/repos/google/benchmark/git/commits/feb69ae7102e6bdcb5736cd7c1669969217d45c0,feb69ae7102e6bdcb5736cd7c1669969217d45c0,"Ensure all the necessary keys are present before parsing JSON data (#380)

This prevents errors when additional non-timing data are present in
the JSON that is loaded, for example when complexity data has been
computed (see #379)."
biojppm,2017-05-02 10:37:46,https://api.github.com/repos/google/benchmark/git/commits/eb2bf345244eff2ceaa129e32ad112254e7603e2,eb2bf345244eff2ceaa129e32ad112254e7603e2,"Fix indentation.

[ci-skip]"
biojppm,2017-05-01 21:33:44,https://api.github.com/repos/google/benchmark/git/commits/77b9362b06d7fdef3937a28d56eb6ea24b3d9696,77b9362b06d7fdef3937a28d56eb6ea24b3d9696,Add output_test.h to output_test_helper for VisualStudio editing.
biojppm,2017-05-01 21:33:19,https://api.github.com/repos/google/benchmark/git/commits/b57b2cfd771216af2029aa2c8b6dfec5e62d70af,b57b2cfd771216af2029aa2c8b6dfec5e62d70af,Improve some comments.
biojppm,2017-05-01 21:32:40,https://api.github.com/repos/google/benchmark/git/commits/64b5f3ff2da8278c4c066bdd18a53b5057a24837,64b5f3ff2da8278c4c066bdd18a53b5057a24837,Make Results::GetTime() receive an enum.
biojppm,2017-05-01 21:29:26,https://api.github.com/repos/google/benchmark/git/commits/62b1dd9c4ae8664b1e0ddc05ccc774f2462da93a,62b1dd9c4ae8664b1e0ddc05ccc774f2462da93a,CHECK_BENCHMARK_RESULTS() was too inconspicuous.
biojppm,2017-05-01 21:27:56,https://api.github.com/repos/google/benchmark/git/commits/3443ac2103c891c75d29563b3a2bd5c8b822a133,3443ac2103c891c75d29563b3a2bd5c8b822a133,Fix brace formatting (Habits die hard!).
biojppm,2017-05-01 21:22:11,https://api.github.com/repos/google/benchmark/git/commits/21600b966f2c7736815fc95a27d9bb0ae03d04d1,21600b966f2c7736815fc95a27d9bb0ae03d04d1,Fix VS warning.
biojppm,2017-05-01 20:48:13,https://api.github.com/repos/google/benchmark/git/commits/47226ccd565fa04a6064fd55cea7164ff8b78c64,47226ccd565fa04a6064fd55cea7164ff8b78c64,CHECK(): rename EPS to FLOAT for consistency with googletest style.
biojppm,2017-04-29 21:27:55,https://api.github.com/repos/google/benchmark/git/commits/2a2eb44b3004ec67f694c26dacf488e57c63e568,2a2eb44b3004ec67f694c26dacf488e57c63e568,Fix VS2013 quirk.
biojppm,2017-04-29 19:47:32,https://api.github.com/repos/google/benchmark/git/commits/cdbcaaf2b64fbe113c9fe3b3526f22d2be282c15,cdbcaaf2b64fbe113c9fe3b3526f22d2be282c15,Fix g++-4.8 compile errors.
biojppm,2017-04-29 19:41:33,https://api.github.com/repos/google/benchmark/git/commits/ef6b4fb8577a7107622026d4e6028db62d21412a,ef6b4fb8577a7107622026d4e6028db62d21412a,Simplify  printing of counters in console reporter.
biojppm,2017-04-29 19:35:25,https://api.github.com/repos/google/benchmark/git/commits/8f69e4f6ce05fb53084030017480133446cd9137,8f69e4f6ce05fb53084030017480133446cd9137,Remove whitespace.
biojppm,2017-04-29 19:35:02,https://api.github.com/repos/google/benchmark/git/commits/c16c8fffacb5ee51fe364605db9673b7a0b41b48,c16c8fffacb5ee51fe364605db9673b7a0b41b48,CHECK_EPS: Use parentheses to wrap macro arguments.
biojppm,2017-04-29 19:31:44,https://api.github.com/repos/google/benchmark/git/commits/c81960a899135feff8adbd0a51390ce4d5f211f2,c81960a899135feff8adbd0a51390ce4d5f211f2,Add missing include of stringstream.
biojppm,2017-04-29 19:24:26,https://api.github.com/repos/google/benchmark/git/commits/b5effb30f9f01ff94d412259eea623a3c511e5e0,b5effb30f9f01ff94d412259eea623a3c511e5e0,Add missing include for providing std::function.
biojppm,2017-04-29 19:02:19,https://api.github.com/repos/google/benchmark/git/commits/55876610f169b3cf5fdfde98d49d9e9521cccbe8,55876610f169b3cf5fdfde98d49d9e9521cccbe8,Remove unused prototype.
biojppm,2017-04-29 19:01:18,https://api.github.com/repos/google/benchmark/git/commits/180719d0d6dedb7a9f892f4f2dab13d95ca5ed4d,180719d0d6dedb7a9f892f4f2dab13d95ca5ed4d,Rename ResultsCheckerEntry to Results.
biojppm,2017-04-29 18:44:13,https://api.github.com/repos/google/benchmark/git/commits/f3b82a8edad1e2bb01125804bc80701e8c92b3c6,f3b82a8edad1e2bb01125804bc80701e8c92b3c6,Adopt standard style.
biojppm,2017-04-29 18:40:39,https://api.github.com/repos/google/benchmark/git/commits/86249c57a574462cb0b30aefda0f91ae01e2f077,86249c57a574462cb0b30aefda0f91ae01e2f077,Result checking: move some function definitions to source file.
biojppm,2017-04-29 18:35:43,https://api.github.com/repos/google/benchmark/git/commits/03b0655d12c6c0102778ed1cdfe3789c5f4c58fe,03b0655d12c6c0102778ed1cdfe3789c5f4c58fe,Fix expected values of user counters as rates in unit tests.
biojppm,2017-04-29 18:34:37,https://api.github.com/repos/google/benchmark/git/commits/921a51abcfd22b4e554e25bb69387b4e3213c6ab,921a51abcfd22b4e554e25bb69387b4e3213c6ab,Console reporting of user counters: print rates like non-rates.
biojppm,2017-04-29 18:27:53,https://api.github.com/repos/google/benchmark/git/commits/5ed1b1dea7532c0bd08850bea3cf6591d4b7f167,5ed1b1dea7532c0bd08850bea3cf6591d4b7f167,Merge branch 'master' of https://github.com/vladoovtcharov/benchmark into test_usercounters
biojppm,2017-04-29 18:26:34,https://api.github.com/repos/google/benchmark/git/commits/78548f8c6edf1c2a537c6482badfda1505eda5e3,78548f8c6edf1c2a537c6482badfda1505eda5e3,Add (currently failing) tests for user counters with threads.
biojppm,2017-04-29 18:25:51,https://api.github.com/repos/google/benchmark/git/commits/2814e9d8dc5a4bb59397d8f2c58ddeb54a4b109f,2814e9d8dc5a4bb59397d8f2c58ddeb54a4b109f,Fix ResultsCheckerEntry::NumThreads()
biojppm,2017-04-29 18:02:07,https://api.github.com/repos/google/benchmark/git/commits/92034a8b84fd97306b1abe2ed1d3b733b3d03d5d,92034a8b84fd97306b1abe2ed1d3b733b3d03d5d,Make result checkers execute on all regex-matching benchmarks.
biojppm,2017-04-29 17:30:28,https://api.github.com/repos/google/benchmark/git/commits/738fcd9e6a947f979667e431ed126cf3ae5ee268,738fcd9e6a947f979667e431ed126cf3ae5ee268,Add log of the benchmark name when checking results.
biojppm,2017-04-29 17:26:30,https://api.github.com/repos/google/benchmark/git/commits/1ce286f632fb9d741a6d6828c7582de09207ebb0,1ce286f632fb9d741a6d6828c7582de09207ebb0,"Avoid compiler-specific pragmas in result check macros.

- Epsilon is now understood as relative to expected value.
- Improve error messages for epsilon checks."
biojppm,2017-04-28 19:45:30,https://api.github.com/repos/google/benchmark/git/commits/da69e5de4579df378f1148ae4d5edd47ded57531,da69e5de4579df378f1148ae4d5edd47ded57531,User counters: add more tests.
biojppm,2017-04-28 19:44:27,https://api.github.com/repos/google/benchmark/git/commits/8c757a3bb9891064172d7b1ec52965a05d0fdf8a,8c757a3bb9891064172d7b1ec52965a05d0fdf8a,Results check: add checks with epsilon.
biojppm,2017-04-28 19:43:44,https://api.github.com/repos/google/benchmark/git/commits/1826feb164f0f935900e1819d70b60106f56ffc3,1826feb164f0f935900e1819d70b60106f56ffc3,ResultsCheckerEntry: add more getter functions.
biojppm,2017-04-28 19:42:28,https://api.github.com/repos/google/benchmark/git/commits/2a8d0dd1b1c128d3058898bbbadc3099a0434915,2a8d0dd1b1c128d3058898bbbadc3099a0434915,Use const char* instead of std::string in entry name lookup.
biojppm,2017-04-28 19:40:21,https://api.github.com/repos/google/benchmark/git/commits/8adf59d7620616f435cbe37907a5eec3faba9712,8adf59d7620616f435cbe37907a5eec3faba9712,Add epsilon check macros for float comparison.
biojppm,2017-04-28 14:38:21,https://api.github.com/repos/google/benchmark/git/commits/e869e3749a2a75654f92a9dfc5258530920e862a,e869e3749a2a75654f92a9dfc5258530920e862a,Remove some whitespace.
biojppm,2017-04-28 14:02:27,https://api.github.com/repos/google/benchmark/git/commits/6452883027b6642157a54cb5ec61c55c34f4948e,6452883027b6642157a54cb5ec61c55c34f4948e,"Unit testing: add facilities to check benchmark results.

This is needed for examining the values of user counters (needed
for #348). It is also needed for checking the values of standard
benchmark results like items_processed or complexities (for example,
checking the standard deviation is needed for unit testing #357
as discussed in #362)."
biojppm,2017-04-27 21:11:40,https://api.github.com/repos/google/benchmark/git/commits/693a43013d5e7344e5f627bc773aff7fe0151391,693a43013d5e7344e5f627bc773aff7fe0151391,"User counters: add more unit tests. ...

The tests are still missing a way to check actual validity of
numerical results; this will be done next. As they currently are,
the tests pass, but the problem detected with #378 is still
standing and the results with non-standard counters are wrong."
biojppm,2017-04-27 18:25:20,https://api.github.com/repos/google/benchmark/git/commits/3c2d7f5348ed0e0a6b0dfda242a8b0211858ebe5,3c2d7f5348ed0e0a6b0dfda242a8b0211858ebe5,User counter tests: first version.
biojppm,2017-04-27 18:24:06,https://api.github.com/repos/google/benchmark/git/commits/b273d9b7d5e49d29e60b98776d5cb8fc161952bf,b273d9b7d5e49d29e60b98776d5cb8fc161952bf,Reporter tests: reuse csv header.
biojppm,2017-04-27 18:22:36,https://api.github.com/repos/google/benchmark/git/commits/409f35da50c3f2db5a8187ea1fb98342bddaa317,409f35da50c3f2db5a8187ea1fb98342bddaa317,User counters: fix misplaced newline in console reporter header.
biojppm,2017-04-27 12:16:49,https://api.github.com/repos/google/benchmark/git/commits/2d1a34626fec7db18e7198aad9e2b2439e1bf186,2d1a34626fec7db18e7198aad9e2b2439e1bf186,"Fixes #378 (hopefully). Unit tests for counters to follow.

The problem was that the call to Finish() the user counters was
lost in a big merge. If I had already written the tests for the
user counters, this would probably have been catched earlier."
biojppm,2017-04-27 11:38:28,https://api.github.com/repos/google/benchmark/git/commits/27b3bd4dc4eb859a397d027d37997bd4ada3bc75,27b3bd4dc4eb859a397d027d37997bd4ada3bc75,Merge branch 'master' of https://github.com/google/benchmark
KindDragon,2017-04-24 17:45:24,https://api.github.com/repos/google/benchmark/git/commits/3336ea00d892fc312715c3a00d33a9568261e86a,3336ea00d892fc312715c3a00d33a9568261e86a,Support VS2017 on AppVeyor (#376)
Slonegg,2017-04-21 02:07:52,https://api.github.com/repos/google/benchmark/git/commits/7a74b74856bae690a0998c967c7807dd2272af82,7a74b74856bae690a0998c967c7807dd2272af82,fix for android NDK r10e (#375)
Slonegg,2017-04-18 15:48:07,https://api.github.com/repos/google/benchmark/git/commits/09b93ccc6a9aed84c269b6f5b8130c878e518ebb,09b93ccc6a9aed84c269b6f5b8130c878e518ebb,"fix android compilation (#372)

* fix android compilation

* checking __GLIBCXX__ and __GLIBCPP__ macro in addition to __ANDROID__

* using vsnprintf instead of std::vsnprintf to compile on Android

* removed __GLIBCPP__ check on Android

* StringPrintF instead of std::to_string for Android"
EricWF,2017-04-18 06:13:18,https://api.github.com/repos/google/benchmark/git/commits/46afd8e69339b546526706056da9dd5009fa01f1,46afd8e69339b546526706056da9dd5009fa01f1,"Don't limit benchmarks with manual timers to 5x the elapsed real time.

When using CPU time to determine the correct number of iterations the
library additionally checks if the benchmark has consumed 5x the minimum
required time according to the wall clock. This prevents benchmarks
with low CPU usage from running for much longer than actually intended.

However when a benchmark uses a manual timer this heuristic isn't helpful
and likely isn't correct since we don't know what the manual timer actually
measures.

This patch removes the above restriction when a benchmark specifies a manual
timer."
EricWF,2017-04-18 04:29:28,https://api.github.com/repos/google/benchmark/git/commits/74b24058ad4914b837200d0341050657ba154e4a,74b24058ad4914b837200d0341050657ba154e4a,"Add Benchmark::Iterations for explicit iteration count control - Fixes #370 (#373)

* Add Benchmark::Iterations for explicitly specifying the number of iterations to use.

* Document that benchmark::Iterations should not be used to limit benchmark runtimes"
EricWF,2017-04-18 02:49:51,https://api.github.com/repos/google/benchmark/git/commits/7f87c98d36279b1819e9c8ee0dc93c6a8ea64aee,7f87c98d36279b1819e9c8ee0dc93c6a8ea64aee,"Enable <cassert> by removing -DNDEBUG when running the tests.

In non-debug builds CMake automatically adds -DNDEBUG, this means
that uses of `assert` in the tests are disabled for non-debug builds.
Obviously we want these tests to run, regardless of configuration.

This patch strips -DNDEBUG during non-debug builds and adds
-UNDEBUG just to be sure."
vargad,2017-04-10 15:43:05,https://api.github.com/repos/google/benchmark/git/commits/312d9d0ac5c280e81aee0689045a10ae441b4db1,312d9d0ac5c280e81aee0689045a10ae441b4db1,"Fix cmake file not to use CMAKE_SOURCE_DIR (#367)

Using CMAKE_SOURCE_DIR benchmark cannot be built as part of a project.
This change allows to add benchmark using add_subdirectory to a bigger
project."
biojppm,2017-04-06 13:12:09,https://api.github.com/repos/google/benchmark/git/commits/9986589fff66cd3336d112e891306ffcedc82b8f,9986589fff66cd3336d112e891306ffcedc82b8f,Merge branch 'master' of https://github.com/google/benchmark
biojppm,2017-04-04 19:31:28,https://api.github.com/repos/google/benchmark/git/commits/9a5072d1bf9187b32ce9a88842dffa31ef416442,9a5072d1bf9187b32ce9a88842dffa31ef416442,Fixes #357: broken RMS values when time unit is set. (#362)
dominichamon,2017-04-04 15:39:10,https://api.github.com/repos/google/benchmark/git/commits/2fa6dfff32ef57a5f5501427f77765b25ecddf3c,2fa6dfff32ef57a5f5501427f77765b25ecddf3c,Merge branch 'piribes-1.1'
dominichamon,2017-04-04 15:39:02,https://api.github.com/repos/google/benchmark/git/commits/858581ea766794aa9f37bc047adffdcef912c04a,858581ea766794aa9f37bc047adffdcef912c04a,Remove unnecessary benchmark subfolder
roberti42,2017-04-04 00:13:20,https://api.github.com/repos/google/benchmark/git/commits/128fe25025dcf75baa2e1c533b1aaf90a5f1c7fc,128fe25025dcf75baa2e1c533b1aaf90a5f1c7fc,Fix ${include_install_dir}
roberti42,2017-04-02 23:46:59,https://api.github.com/repos/google/benchmark/git/commits/824bbb818e2d34e546c77d719687ab732264603c,824bbb818e2d34e546c77d719687ab732264603c,"Add CMake Package Config files during install

- Remove target_include_directories of ${PROJECT_SOURCE_DIR}/include to
  fix error: Target ""benchmark"" INTERFACE_INCLUDE_DIRECTORIES property
  contains path which is prefixed in the source directory."
biojppm,2017-04-01 21:31:39,https://api.github.com/repos/google/benchmark/git/commits/707dd893448cc0bcacde78a45cf4d9d7454eb2fd,707dd893448cc0bcacde78a45cf4d9d7454eb2fd,User counters: document tabular output in README.md
biojppm,2017-04-01 16:04:37,https://api.github.com/repos/google/benchmark/git/commits/ea26e62a0dcaa2df529c5b0e901745a1b914063d,ea26e62a0dcaa2df529c5b0e901745a1b914063d,Fixes #357: broken RMS values when time unit is set.
rayglover-ibm,2017-03-29 10:39:18,https://api.github.com/repos/google/benchmark/git/commits/17298b2dc0e6dc9f78b149ab9256064d0ac96520,17298b2dc0e6dc9f78b149ab9256064d0ac96520,"Python 2/3 compatibility (#361)

* [tools] python 2/3 support

* update authors/contributors"
EricWF,2017-03-28 07:43:42,https://api.github.com/repos/google/benchmark/git/commits/0dbcdf56a0d0ed817a7fccf8f622259ee8dafa18,0dbcdf56a0d0ed817a7fccf8f622259ee8dafa18,"Add BENCHMARK_BUILD_32_BITS option and add builders to test it (#360)

* Add BENCHMARK_BUILD_32_BITS option and add builders to test it

* Attempt to fix travis configuration

* Make add_required_cxx_compiler_flag cause an error when the flag isn't supported

* add gcc-multilib dependancy on travis

* attempt to fix travis.yml parsing error

* Require g++-multilib instead of gcc-multilib

* Add 32 bit release configurations

* Attempt to fix libc++ travis build w/ 32 bits

* Work around CMake configuration failure on Travis"
mvafin,2017-03-28 06:35:17,https://api.github.com/repos/google/benchmark/git/commits/ec15860da5808a0b0fa43ab74a5c4404dbcc7ac5,ec15860da5808a0b0fa43ab74a5c4404dbcc7ac5,"Fix CPU frequency parsing on Linux (#355) (#356)

* Fix reading CPU info from file

Macro CHECK do nothing for release mode, meaning it doesn't invoke the
arguments

* Add myself to AUTHORS and CONTRIBUTORS"
EricWF,2017-03-28 00:32:12,https://api.github.com/repos/google/benchmark/git/commits/94c512c0439aa9b625d9e179767ce870df9f76a8,94c512c0439aa9b625d9e179767ce870df9f76a8,"Replace int64_t usages with 'int' instead. (#359)

Previously the constants used for converting between
different units of time were declared using int64_t. However
we should only use explicitly sized integer types when they
are required, and should use 'int' everwhere else, and there is
no good reason to use int64_t here.

For that reason this patch changes the type of the constants.
This should help address issue #354 as well."
rolandschulz,2017-03-28 00:30:54,https://api.github.com/repos/google/benchmark/git/commits/9b92ed76a8620354403b5f1d089560048b6843bb,9b92ed76a8620354403b5f1d089560048b6843bb,"Fix ICC compiler warnings (#358)

fixes #354

The build fails with ICC17 because of warnings and Werror. What is the correct solution to fix it?
Should a patch

disable Werror for ICC (or maybe all non known compilers)
disable the false postive warnings for all files. This could be done using:
add_cxx_compiler_flag(-wd2102) #ICC17u2: Many false positives for Wstrict-aliasing
add_cxx_compiler_flag(-wd2259) #ICC17u2: non-pointer conversion from ""long"" to ""int"" may lose significant bits (even for explicit static cast, sleep.cc(44))
add_cxx_compiler_flag(-wd654) #ICC17u2: overloaded virtual function ""benchmark::Fixture::SetUp"" is only partially overridden (because of deprecated overload)
disable warnings at file level or some other granularity"
yasushi-saito,2017-03-14 02:30:19,https://api.github.com/repos/google/benchmark/git/commits/f5ff6d0e0d3d00cf07bb8306548b637e98b13720,f5ff6d0e0d3d00cf07bb8306548b637e98b13720,Include cstdlib for timespec. Clang modules demands that. (#353)
EricWF,2017-03-11 01:47:39,https://api.github.com/repos/google/benchmark/git/commits/f682f7e9a41a88468c72ce5f7f6abe76913b82ad,f682f7e9a41a88468c72ce5f7f6abe76913b82ad,"Implement ClobberMemory() and fix DoNotOptimize on MSVC. (#352)

I recently learned Windows provides a function called _ReadWriteBarrier
which is literally ClobberMemory under a different name. This patch
uses it to implement ClobberMemory under MSVC."
EricWF,2017-03-11 00:52:02,https://api.github.com/repos/google/benchmark/git/commits/8ae6448cc7ec6353e3491a2a15f972f9735f124b,8ae6448cc7ec6353e3491a2a15f972f9735f124b,"Fix std::string detection hack for SetLabel.

Previously benchmark_api.h wasn't allowed to include standard library
headers. For this reason SetLabel had a hack to accept std::string
without including <string>. The hack worked by attempting to detect
the injected class name `basic_string`. However Clang has changed
it's behavior regarding injected class names so this hack no longer
works.

This patch removes the hack and replaces it with a function that
actually names std::string. However we still cannot pass std::string
across the dylib boundary because of libstdc++'s dual C++11 ABI."
biojppm,2017-03-02 12:19:56,https://api.github.com/repos/google/benchmark/git/commits/d84d911d37b27e0adeb780266c34ba97c11cb6e5,d84d911d37b27e0adeb780266c34ba97c11cb6e5,Tabular counters: fix missing cast on MSVC.
biojppm,2017-03-02 12:10:43,https://api.github.com/repos/google/benchmark/git/commits/c846eedfebbacaca755db7dcbf45a0cb9fbdb320,c846eedfebbacaca755db7dcbf45a0cb9fbdb320,Fix use of C-style cast.
biojppm,2017-03-02 12:10:06,https://api.github.com/repos/google/benchmark/git/commits/cbb2eb83d132d16aa2a6df2bc249712795e826ec,cbb2eb83d132d16aa2a6df2bc249712795e826ec,Tabular counters: fix dangling reference to color_output_.
biojppm,2017-03-02 02:55:36,https://api.github.com/repos/google/benchmark/git/commits/0de985ae9d4ea1582125a5414a99ca90c368ca10,0de985ae9d4ea1582125a5414a99ca90c368ca10,Add command line option --benchmark_counters_tabular
biojppm,2017-03-02 00:50:19,https://api.github.com/repos/google/benchmark/git/commits/9e3465560240ffb242b50a47cb7f19251a12ee42,9e3465560240ffb242b50a47cb7f19251a12ee42,"Rename BenchmarkCounters to UserCounters (#346)

The name UserCounters seems more accurate than the pleonastic BenchmarkCounters."
biojppm,2017-03-02 00:23:42,https://api.github.com/repos/google/benchmark/git/commits/a9a66c85bbfda1d744c267c5e5aa073ef3d1c1d5,a9a66c85bbfda1d744c267c5e5aa073ef3d1c1d5,"Add user-defined counters. (#262)

* Added user counters, and move use of bytes_processed and items_processed to user counter logic.

Each counter is a string-value pair. The counters were
made available through the State class. Two helper virtual
methods were added to the Fixture class to allow convenient
initialization and termination of the counters: InitState()
and TerminateState(). The reporting of the counters is buggy
and is still a work in progress, to be completed in the next commits.

* fix bad removal of BenchmarkCounters code during the merge

* add myself to AUTHORS/CONTRIBUTORS

* fix printing to std::cout in csv_reporter

* bytes_per_second and items_per_second are now in the UserCounters class

* add user counters to json reporter

* moving bytes_per_second and items_per_second to their old state

* console reporter dealing ok with user counters.

* update unit tests for user counters

* CSVReporter now prints user counters too.

* cleanup user counters

* reverted changes to cmake files which should have gone into later commits

* fixture_test: fix gcc 4.6 compilation

* remove ctor with default argument

see https://github.com/google/benchmark/pull/262#discussion_r72298055

* use (auto-defined) BENCHMARK_HAS_CXX11 instead of BENCHMARK_INITLIST.

https://github.com/google/benchmark/pull/262#discussion_r72298310

* leanify counters API

Discussions:
API complexity: https://github.com/google/benchmark/pull/262#discussion_r72298731
remove std::string dependency (WIP): https://github.com/google/benchmark/pull/262#discussion_r72298142
spacing & alignment: https://github.com/google/benchmark/pull/262#discussion_r72298422

* remove std::string dependency on public API - changed counter name storage to char*

* Counter ctor: use overloads instead of default arguments

discussion:
https://github.com/google/benchmark/pull/262#discussion_r72298055

* Use raw pointers to remove dependency on std::vector from public API .

For more info, see discussion at https://github.com/google/benchmark/pull/262#discussion_r72319678 .

* Move counter implementation from benchmark.cc to counter.cc.

    See discussion: https://github.com/google/benchmark/pull/262#discussion_r72298980 .

* Remove unused (commented-out) code.

* Moved thread counters to ThreadStats.

* Counters: fixed copy and move constructors.

* Counter: use an inplace buffer for small names.

* benchmark_test: move counters test out of CXX11 preprocessor conditional.

* Counter: fix VS2013 compilation error in char[] initialization.

* Fix typo.

* Expose counters from State.

See discussion: https://github.com/google/benchmark/pull/262#issuecomment-237156951

* Changed counters interface to map-like.

* Fix printing of user counters in ConsoleReporter.

* Applied clang-format to counter.cc and console_reporter.cc.

Command was `clang-format -style=Google -i counter.cc console_reporter.cc`
I also applied to all other files, but the changes were very
far-reaching so I rolled those back.

* Rename Counter::Flags_e to Counter::Flags

* Fix use of reserved names in Counter and BenchmarkCounters.

* Counter: Fix move ctor bug + change order of members.

* Fixture: remove tentative methods InitState() and TerminateState().

* Update fixture_test to the new Fixture interface.

* BenchmarkCounters: fixed a bug in the move ctor. Remove call to CHECK_LT().

CHECK_LT() was making the size_t lookup take ~double the time of a string lookup!

* BenchmarkCounters: add option to not print zero counters (defaults to false).

* Add test to compare counter storage and access with std::map.

* README: clarify cost of counter access modes.

* move counter access test to an own test.

* BenchmarkCounters: add move Insert()

* Counters access test: add accelerated lookup by name.

* Fix old range syntax.

* Fix missing include of cstdio

* Fix Visual Studio warning

* VS2013 and lower: fix use of snprintf()

* VS2013: fix use of char[] as a member of std::pair<>.

* change counter storage to std::map

* Remove skipZeroCounters logic

* Fix VS compilation error.

* Implemented request changes to PR #262.

* PR #262: More requested changes.

* README: cleanup counter text.

* PR #262: remove clang-format changes for preexisting code

* Complexity+Counters: fix counter flags which were being ignored.

* Document all Counter::Flag members

* fixed loss of counter values

* ConsoleReporter: remove tabular printing of user counters.

* ConsoleReporter: header printing should not be contingent on user counter names.

* Minor white space and alignment fixes.

* cxx03_test + counters: reuse the BM_empty() function.

* user counters: add note to README on how counters are gathered across threads"
Maratyszcza,2017-02-11 10:31:40,https://api.github.com/repos/google/benchmark/git/commits/070c0ca0a9abeaa6076d6a6118e54aa39b31d0a2,070c0ca0a9abeaa6076d6a6118e54aa39b31d0a2,"Support for Web platforms (#340)

* Implement cycleclock::Now for PNaCl

* Make cycleclock::Now compatible with NaCl/ARM

* Support Emscripten (Asm.js, WebAssembly)

* Rearrange #ifs from to handle specific cases first

* DoNotOptimize without inline asm for Emscripten & PNaCl"
grypp,2017-01-30 20:50:21,https://api.github.com/repos/google/benchmark/git/commits/fef203bd021bad019421abf5785a4ae89bd6ea15,fef203bd021bad019421abf5785a4ae89bd6ea15,Fix typename for powerpc (#337)
sieren,2017-01-24 19:31:14,https://api.github.com/repos/google/benchmark/git/commits/246ee86428758be3d3af1d2c502086eb6036d9fe,246ee86428758be3d3af1d2c502086eb6036d9fe,"Disable iOS CPU Frequency readout (#335)

* Add macro definition for iOS

Add an additional macro definition for iOS.
iOS is defined as a Mac OSX invariant in the TargetConditionals include,
thus we treat it as a subset of OSX within the defines.

* Skip error for hw.cpufrequency on iOS

hw.cpufrequency is not available on iOS devices. As there is no way to reliably
retrieve the CPU frequency on iOS we are printing out a warning
that we were unable to detect the CPU frequency and set it to 0.

This only disables cpu frequency readouts on actual physical iOS devices.
Running this code on the simulator still gives the cpu architecture of
the host computer as the simulator passes down the sysctl calls to OSX."
NiklasRosenstein,2017-01-18 03:28:20,https://api.github.com/repos/google/benchmark/git/commits/817bfee273246f2a90c08e700e67a5f32711f979,817bfee273246f2a90c08e700e67a5f32711f979,"Report unrecognized arguments from BENCHMARK_MAIN() macro (#332)

* BENCHMARK_MAIN() now reports unrecognised command-line flags (see google/benchmark#320)

* add benchmark::ReportUnrecognizedArguments()

Update BENCHMARK_MAIN() to use ReportUnrecognizedArguments() instead of
having the reporting code directly in the macro.

See issue google/benchmark#320 for reference

* let's stick to american english -- fix type in ReportUnrecognizedArguments()

* make ReportUnrecognizedArguments() print to stderr

* make ReportUnrecognizedArguments() return true if any arguments have been reported (i.e. argc > 1)"
biojppm,2017-01-13 22:19:42,https://api.github.com/repos/google/benchmark/git/commits/b4fdf6e9df82ea5a424440436dcc4ac0474decce,b4fdf6e9df82ea5a424440436dcc4ac0474decce,"HumanReadableNumber(): Simplify output for simple numbers. Examples: (#291)

* HumanReadableNumber(): Simplify output for simple numbers. Examples:

HumanReadableNumber(    0.0)=      0    ---->         0
HumanReadableNumber(    0.5)=   512m    ---->       0.5
HumanReadableNumber(    0.9)= 921.6m    ---->       0.9
HumanReadableNumber(    1.0)=  1024m    ---->         1
HumanReadableNumber(   1.05)=1075.2m    ---->      1.05
HumanReadableNumber(    1.1)=    1.1    ---->       1.1
HumanReadableNumber(    1.2)=    1.2    ---->       1.2
HumanReadableNumber( 0.0e-1)=      0    ---->         0
HumanReadableNumber( 0.5e-1)=  51.2m    ---->      0.05
HumanReadableNumber( 0.9e-1)= 92.16m    ---->      0.09
HumanReadableNumber( 1.0e-1)= 102.4m    ---->       0.1
HumanReadableNumber(1.05e-1)=107.52m    ---->     0.105
HumanReadableNumber( 1.1e-1)=112.64m    ---->      0.11
HumanReadableNumber( 1.2e-1)=122.88m    ---->      0.12
HumanReadableNumber( 0.0e-3)=      0    ---->         0
HumanReadableNumber( 0.5e-3)=524.288u   ---->   524.288u
HumanReadableNumber( 0.9e-3)=943.718u   ---->   943.718u
HumanReadableNumber( 1.0e-3)=1048.58u   ---->   1048.58u
HumanReadableNumber(1.05e-3)=  1101u    ---->   0.00105
HumanReadableNumber( 1.1e-3)=1.1264m    ---->    0.0011
HumanReadableNumber( 1.2e-3)=1.2288m    ---->    0.0012

* HumanReadableNumber(): change simple printing threshold to 0.01.

* ToExponentAndMantissa(): refactor branch sequence."
PSIAlt,2017-01-13 16:41:29,https://api.github.com/repos/google/benchmark/git/commits/34010beecb0f6fe6af6b0af4f83098c0a493c5bb,34010beecb0f6fe6af6b0af4f83098c0a493c5bb,Fix librt linking on systems which has it (#331)
BRevzin,2016-12-20 19:37:17,https://api.github.com/repos/google/benchmark/git/commits/4bf28e611b55de8a2d4eece3c335e014f8b0f630,4bf28e611b55de8a2d4eece3c335e014f8b0f630,"Issue 327 (#328)

Arguments shouldn't be AppendHumanReadable()-ed, they should just be shown as-is."
pcampr,2016-12-09 12:24:31,https://api.github.com/repos/google/benchmark/git/commits/e381139474cfd997941f7c48fe17001bf6bfdedd,e381139474cfd997941f7c48fe17001bf6bfdedd,"fix compare script - output formatting - correctly align numbers >9999 (#322)

* fix compare script - output formatting - correctly align numbers >9999

* fix failing test (report.py); fix compare script output formatting (large numbers alignment)"
NiklasRosenstein,2016-12-06 16:38:03,https://api.github.com/repos/google/benchmark/git/commits/56336e70f151f9eb828176e795f7c5dfe6d6bb59,56336e70f151f9eb828176e795f7c5dfe6d6bb59,fix argv accessed out of bounds in ParseCommandLineFlags() (#321)
EricWF,2016-12-05 17:24:09,https://api.github.com/repos/google/benchmark/git/commits/efd4e992a6aa07ac46859dadb96246430959538d,efd4e992a6aa07ac46859dadb96246430959538d,Add support for building w/o exceptions (#317)
EricWF,2016-12-05 17:22:46,https://api.github.com/repos/google/benchmark/git/commits/a3eac442c23ab74a81ffd665a7a531c51dbb8a2c,a3eac442c23ab74a81ffd665a7a531c51dbb8a2c,Update the required CMake version to 2.8.12 (#316)
EricWF,2016-12-03 02:47:27,https://api.github.com/repos/google/benchmark/git/commits/83ac086fbd96b7c0a4aae91a882fc9cf8cefb26a,83ac086fbd96b7c0a4aae91a882fc9cf8cefb26a,Add compare_bench.py documentation. Fixes #309 (#318)
EricWF,2016-11-19 12:17:52,https://api.github.com/repos/google/benchmark/git/commits/a8aa40c596edf5454ccc72604037ffc8183398fe,a8aa40c596edf5454ccc72604037ffc8183398fe,Fix obvious typo in string formatting
EricWF,2016-11-18 22:42:02,https://api.github.com/repos/google/benchmark/git/commits/2373382284918fda13f726aefd6e2f700784797f,2373382284918fda13f726aefd6e2f700784797f,"Rewrite compare_bench.py argument parsing.

This patch cleans up a number of issues with how compare_bench.py handled
the command line arguments.

* Use the 'argparse' python module instead of hand rolled parsing. This gives
  better usage messages.

* Add diagnostics for certain --benchmark flags that cannot or should not
  be used with compare_bench.py (eg --benchmark_out_format=csv).

* Don't override the user specified --benchmark_out flag if it's provided.

In future I would like the user to be able to capture both benchmark output
files, but this change is big enough for now.

This fixes issue #313."
dominichamon,2016-10-28 21:22:22,https://api.github.com/repos/google/benchmark/git/commits/4f8bfeae470950ef005327973f15b0044eceaceb,4f8bfeae470950ef005327973f15b0044eceaceb,"Report error when no benchmarks match regex. (#308)

Fixes #306"
mkurdej,2016-10-28 16:13:57,https://api.github.com/repos/google/benchmark/git/commits/0064c56abdcfebc6998a66a8cb837ec88cfc9840,0064c56abdcfebc6998a66a8cb837ec88cfc9840,"Add tests for reporters (#307)

* Test bytes_per_second and items_per_second.

* Test SetLabel.

* Reformat.

* Make State::error_occurred_ private.

* Fix tests with floats.

* Merge private blocks"
dominichamon,2016-10-26 16:22:18,https://api.github.com/repos/google/benchmark/git/commits/8e08aa75d9d25ae88ca2fbb8859238aec60b6ed4,8e08aa75d9d25ae88ca2fbb8859238aec60b6ed4,Merge branch 'mkurdej-arg-names'
mkurdej,2016-10-26 07:36:39,https://api.github.com/repos/google/benchmark/git/commits/3f23832a097db2da0d9823987dc574be3cefa1f3,3f23832a097db2da0d9823987dc574be3cefa1f3,Allow calling Args and ArgNames in any order.
mkurdej,2016-10-26 07:29:28,https://api.github.com/repos/google/benchmark/git/commits/cfee1a54e4d4dcc455ee077092aa5e2d054899c7,cfee1a54e4d4dcc455ee077092aa5e2d054899c7,Check argument count in `ArgName` and `ArgNames`.
mkurdej,2016-10-25 07:45:35,https://api.github.com/repos/google/benchmark/git/commits/c1c01b2cd303826cab1f419f1a1582d18d5905df,c1c01b2cd303826cab1f419f1a1582d18d5905df,Handle the case when the argument name is an empty string.
mkurdej,2016-10-24 07:49:36,https://api.github.com/repos/google/benchmark/git/commits/17e1c405dd67858ca47b53b5968e564895dba965,17e1c405dd67858ca47b53b5968e564895dba965,Add ArgName() and ArgNames() methods to name arguments/ranges.
dominichamon,2016-10-21 16:24:46,https://api.github.com/repos/google/benchmark/git/commits/44c25c892a6229b20db7cd9dc05584ea865896de,44c25c892a6229b20db7cd9dc05584ea865896de,Merge branch 'mkurdej-fix-time-unit'
mkurdej,2016-10-21 12:59:06,https://api.github.com/repos/google/benchmark/git/commits/8aeb20f16b7d539e3d3cf857fb4c82bf56d1a605,8aeb20f16b7d539e3d3cf857fb4c82bf56d1a605,Add tests.
mkurdej,2016-10-21 12:33:23,https://api.github.com/repos/google/benchmark/git/commits/5aa385562739652eddfd018d84e5d43c5c4777b8,5aa385562739652eddfd018d84e5d43c5c4777b8,Fix displayed time unit in mean and standard deviation.
EricWF,2016-10-08 08:12:40,https://api.github.com/repos/google/benchmark/git/commits/57a22c69b382b3f010ec4042c9574ea3fd8dcbb4,57a22c69b382b3f010ec4042c9574ea3fd8dcbb4,Fix typo in timer.cc that caused negative CPU times on OS X. Fixes #293
EricWF,2016-10-08 07:36:54,https://api.github.com/repos/google/benchmark/git/commits/721c9224b96ad6b6559bf1695ec633a35e69027c,721c9224b96ad6b6559bf1695ec633a35e69027c,Fix getting the CPU frequency on OS X
EricWF,2016-10-08 07:03:23,https://api.github.com/repos/google/benchmark/git/commits/f67ee4ad9b565ec6bca595df1278162198962998,f67ee4ad9b565ec6bca595df1278162198962998,Fix #294. Add -D_GNU_SOURCE when building under Cygwin
EricWF,2016-10-08 04:54:06,https://api.github.com/repos/google/benchmark/git/commits/03c4485d84e68f4d70ae33224570dac31a54b624,03c4485d84e68f4d70ae33224570dac31a54b624,Fix #295. Remove use of BSD extensions for comparing strings
EricWF,2016-10-08 04:26:01,https://api.github.com/repos/google/benchmark/git/commits/36a251ab3ee4e6dc668129e0ef5fa62b1b8d5d49,36a251ab3ee4e6dc668129e0ef5fa62b1b8d5d49,Fix #300. Emit RMS as a float not a percentage in JSON
EricWF,2016-10-08 03:56:22,https://api.github.com/repos/google/benchmark/git/commits/2555035f44d82160e51261c3add92cc38af352a7,2555035f44d82160e51261c3add92cc38af352a7,Use correct RE for floating point numbers in reporter_output_test.cc
dominichamon,2016-10-07 18:35:03,https://api.github.com/repos/google/benchmark/git/commits/332f677b8bec401641a2743ab5d741c13cc6811d,332f677b8bec401641a2743ab5d741c13cc6811d,Apply clang-format to all headers and source (#303)
dominichamon,2016-10-07 18:04:50,https://api.github.com/repos/google/benchmark/git/commits/1100e9190709a48b0819c84b3cebeaf2bf904d65,1100e9190709a48b0819c84b3cebeaf2bf904d65,Simplify clang-format and apply to tests (#302)
ktnyt,2016-10-05 16:19:14,https://api.github.com/repos/google/benchmark/git/commits/d1daeee4e90c1125b52baa9bcaff46a987c2a795,d1daeee4e90c1125b52baa9bcaff46a987c2a795,Pass flag string to `check_cxx_compiler_flag` (#298)
EricWF,2016-09-29 00:21:36,https://api.github.com/repos/google/benchmark/git/commits/2aca242bf69870cc208cb7da3c026c1f64b12cdb,2aca242bf69870cc208cb7da3c026c1f64b12cdb,Fix various uninitialized members
PSIAlt,2016-09-26 22:48:25,https://api.github.com/repos/google/benchmark/git/commits/6cadcf7f142b6de4cdd0d513f8d4a89a588d43c1,6cadcf7f142b6de4cdd0d513f8d4a89a588d43c1,"Fix working on mac clock_gettime (#292)

* fix working on mac clock_gettime

* Comment fixme"
dominichamon,2016-09-23 19:44:22,https://api.github.com/repos/google/benchmark/git/commits/62c68ba4f0b093f1249715d7aa276891497ec6a5,62c68ba4f0b093f1249715d7aa276891497ec6a5,s/resolved/unresolved/
nickhutchinson,2016-09-15 21:10:35,https://api.github.com/repos/google/benchmark/git/commits/917b86e615f659d9fb9819d1fa765cd459fc6861,917b86e615f659d9fb9819d1fa765cd459fc6861,"Auto-detect whether Benchmark should produce colorized output (#126)

* Auto-detect whether to produce colorized output

Rename --color_print to --benchmark_color for consistency with the other
flags (and Google Test). Old flag name is kept around for compatibility.

The --benchmark_color/--color_print flag takes a third option, ""auto"",
which is the new default. In this mode, we attempt to auto-detect
whether to produce colorized output. (The logic for deciding whether to
use colorized output was lifted from GTest:
<https://github.com/google/googletest/blob/master/googletest/src/gtest.cc#L2925>.)

* Update CONTRIBUTORS, AUTHORS"
nickhutchinson,2016-09-11 21:36:14,https://api.github.com/repos/google/benchmark/git/commits/b826143ac20a105f7caba6d1d5afe4c5204864cf,b826143ac20a105f7caba6d1d5afe4c5204864cf,"Flush reporters' output streams after writing a benchmark run (#288)

If a reporter's output stream isn't line-buffered (e.g. it's not writing
to a terminal) then it can be some time before a write to it becomes
visible.

This is problematic if, say, you're wanting to use tail -f to view the
file written to via --benchmark_out. Or if the application crashes,
leaving you with no results.

Addressed by flushing the reporters' output streams whenever we invoke
methods that may write to them."
EricWF,2016-09-06 08:28:35,https://api.github.com/repos/google/benchmark/git/commits/c6f3f0eb9cd68150371c0c45b84aeb0dc72114c9,c6f3f0eb9cd68150371c0c45b84aeb0dc72114c9,"Cleanup RunBenchmark code. (#289)

* Cleanup the code for generating and running benchmarks

* Rework calculation of real/manual time

* Add back TSAN builder"
EricWF,2016-09-05 21:48:40,https://api.github.com/repos/google/benchmark/git/commits/d038472c18e7aa5b206896a9cd71b220b36b5eb8,d038472c18e7aa5b206896a9cd71b220b36b5eb8,"Refactor benchmark.cc into benchmark_register.cc and benchmark.cc (#287)

* Refactor benchmark.cc into benchmark_register.cc and benchmark_run.cc

The benchmark.cc file is getting really big and it contains a bunch of
unrelated components. This patch separates the files into two separate
parts. The ""runtime"" parts and the ""registration"" parts.

This patch also removes the PIMPL used by Benchmark. Previously we couldn't
have STL types in the interface but now we can. Therefore there is no reason
to keep BenchmarkImp.

* add missing include

* rework windows timers again

* Guard timespec on older Windows versions

* Remove old thread safety annotation workarounds"
EricWF,2016-09-05 21:40:12,https://api.github.com/repos/google/benchmark/git/commits/9c261681266d051c0b04ddbe2064b569c8b19528,9c261681266d051c0b04ddbe2064b569c8b19528,Document --benchmark_filter. Thanks to NAThompson for the original patch
hydroo,2016-09-03 19:56:46,https://api.github.com/repos/google/benchmark/git/commits/72be9523bb88d5b96e3891776fad18b790bfd2d2,72be9523bb88d5b96e3891776fad18b790bfd2d2,"Add Benchmark::ThreadRange() version with increment instead of multiply (#283)

* add additive thread range

* add test"
EricWF,2016-09-03 08:11:42,https://api.github.com/repos/google/benchmark/git/commits/60e88c21e44c34a847b5c11e7b9f28107602cfc3,60e88c21e44c34a847b5c11e7b9f28107602cfc3,Remove TSAN builder for now.
EricWF,2016-09-03 07:45:59,https://api.github.com/repos/google/benchmark/git/commits/db376c8654c18701c111f7e789f9f2bd0ec8d689,db376c8654c18701c111f7e789f9f2bd0ec8d689,Tweak TSAN flags
EricWF,2016-09-03 06:40:44,https://api.github.com/repos/google/benchmark/git/commits/183999c0020a33cef8f6e068d18fb5d281015a2b,183999c0020a33cef8f6e068d18fb5d281015a2b,Add Thread Sanitizer bot to Travis
EricWF,2016-09-03 06:19:37,https://api.github.com/repos/google/benchmark/git/commits/07ee194092e8ad246dea873b57f00d296c16b691,07ee194092e8ad246dea873b57f00d296c16b691,Fix wording because an idiot came up with it.
EricWF,2016-09-03 06:18:02,https://api.github.com/repos/google/benchmark/git/commits/309ecb737f4ad24ff5c8fa442245192423d18e97,309ecb737f4ad24ff5c8fa442245192423d18e97,Increase complexity_test runtime slightly less.
EricWF,2016-09-03 06:13:20,https://api.github.com/repos/google/benchmark/git/commits/f261c68074ef621b1ff4079a451518ff830a166a,f261c68074ef621b1ff4079a451518ff830a166a,Try and add MSVC NORETURN attribute again
EricWF,2016-09-03 06:06:51,https://api.github.com/repos/google/benchmark/git/commits/756f069918f7791110c867064e225b467f3a45bf,756f069918f7791110c867064e225b467f3a45bf,Increase complexity_test.cc runtime to attempt to avoid appveyor failures
EricWF,2016-09-03 05:59:07,https://api.github.com/repos/google/benchmark/git/commits/2314368cb51cd19518e9c69e7cd7449ff081d969,2314368cb51cd19518e9c69e7cd7449ff081d969,Add another workaround for Appveyor warnings
EricWF,2016-09-03 05:54:58,https://api.github.com/repos/google/benchmark/git/commits/5224b63c35c6a51670cd6e922607d870d750843e,5224b63c35c6a51670cd6e922607d870d750843e,Fix BENCHMARK_NORETURN on MSVC
EricWF,2016-09-03 05:48:17,https://api.github.com/repos/google/benchmark/git/commits/a85f2a8e5b57ebabd936f1414238251f988c7419,a85f2a8e5b57ebabd936f1414238251f988c7419,attempt to suppress apveyor warnings
EricWF,2016-09-03 03:34:34,https://api.github.com/repos/google/benchmark/git/commits/cba945e37dd8f336c7c8f5367f3c7d9498d5e09b,cba945e37dd8f336c7c8f5367f3c7d9498d5e09b,"Make `PauseTiming()` and `ResumeTiming()` per thread. (#286)

* Change to using per-thread timers

* fix bad assertions

* fix copy paste error on windows

* Fix thread safety annotations

* Make null-log thread safe

* remove remaining globals

* use chrono for walltime since it is thread safe

* consolidate timer functions

* Add missing ctime include

* Rename to be consistent with Google style

* Format patch using clang-format

* cleanup -Wthread-safety configuration

* Don't trust _POSIX_FEATURE macros because OS X lies.

* Fix OS X thread timings

* attempt to fix mingw build

* Attempt to make mingw work again

* Revert old mingw workaround

* improve diagnostics

* Drastically improve OS X measurements

* Use average real time instead of max"
dominichamon,2016-09-02 21:49:59,https://api.github.com/repos/google/benchmark/git/commits/94c2a30a3eefa6ae91b2e44825a8ca5884b47707,94c2a30a3eefa6ae91b2e44825a8ca5884b47707,Add clang-format file
biojppm,2016-09-01 17:51:48,https://api.github.com/repos/google/benchmark/git/commits/6a28f1e96819be19377472fa59a04602769c9c9d,6a28f1e96819be19377472fa59a04602769c9c9d,"Fixture: add non const Setup() and TearDown(). (#285)

* Fixture: add non const Setup() and TearDown().

This allows write-access to the State variable, which is important in
upcoming user-defined counter functionality.

* Fix const placement in the Fixture methods.

* Fixture: use const_cast instead of static_cast."
biojppm,2016-08-31 22:28:43,https://api.github.com/repos/google/benchmark/git/commits/83561f05803dc2001626b61652e02192fa528690,83561f05803dc2001626b61652e02192fa528690,"CMake: add headers to the list of source files. (#284)

cmake does not require this, but IDEs such as VisualStudio or QtCreator
need this to add the headers to the generated project."
EricWF,2016-08-30 09:41:58,https://api.github.com/repos/google/benchmark/git/commits/61f570e82a9334ef13f794b9149013feeb1a2ab1,61f570e82a9334ef13f794b9149013feeb1a2ab1,Fix #202 - Document Windows dependency on shlwapi.lib
EricWF,2016-08-29 18:43:55,https://api.github.com/repos/google/benchmark/git/commits/df7bd92afd9e5b803cb29d92f4f545291a5f045e,df7bd92afd9e5b803cb29d92f4f545291a5f045e,"Add warning for large benchmark families (#279)

* Add warning for large benchmark families

* reflow comment"
EricWF,2016-08-29 18:43:30,https://api.github.com/repos/google/benchmark/git/commits/6e259170011cd2fbac069b9d4ff83b42445a96cc,6e259170011cd2fbac069b9d4ff83b42445a96cc,"Add -DBENCHMARK_USE_LIBCXX:BOOL=<value> option. (#280)

* Add BENCHMARK_USE_LIBCXX option.

* Add comments

* re-add zero null pointer warning"
EricWF,2016-08-29 17:59:46,https://api.github.com/repos/google/benchmark/git/commits/49bbff2c66c7be2192a779eb4a158e91f62ce489,49bbff2c66c7be2192a779eb4a158e91f62ce489,"Supply old `RangePair` and `ArgPair` API for C++03 compatibility. (#278)

* changes

* remove other changes

* remove unneeded test

* cleanup unused include"
EricWF,2016-08-29 05:15:55,https://api.github.com/repos/google/benchmark/git/commits/2e0796e1487d2f060d5fb526d6e0e387c55233aa,2e0796e1487d2f060d5fb526d6e0e387c55233aa,Cleanup and optimize Range generation.
EricWF,2016-08-29 05:07:38,https://api.github.com/repos/google/benchmark/git/commits/db1af86d16f6ffb59e8fc628be2bfc660ec54470,db1af86d16f6ffb59e8fc628be2bfc660ec54470,"Fix out-of-bounds std::vector access.

In the `Ranges(...)` generation code a ""control"" vector which stores
the current index for each range passed to `Ranges`. Previously this vector
was incorrectly initialized to the size of the subranges not the number
of subranges.

Additionally this patch suppresses unused warnings generated by
`stream_init_anchor`."
EricWF,2016-08-29 04:48:48,https://api.github.com/repos/google/benchmark/git/commits/cbcd7b656eb921d6a8ad8643a20439e71c42a76c,cbcd7b656eb921d6a8ad8643a20439e71c42a76c,"Fix std::cout/std::cerr static initialization order fiasco.

The benchmark library internals write to std::cout/std::cerr during program
startup. This can cause segfaults when the user doesn't include <iostream> in
the benchmark (which init's the streams). This patch fixes this by emitting
a dynamic initializer in every TU which initializes the streams."
EricWF,2016-08-28 20:26:54,https://api.github.com/repos/google/benchmark/git/commits/78e22f10de53033cbc1139df91274bc2c8fbf802,78e22f10de53033cbc1139df91274bc2c8fbf802,Update libc++ install script to use new names
EricWF,2016-08-28 20:22:11,https://api.github.com/repos/google/benchmark/git/commits/aaa25ac376f2c6e68a46afacd552bc0f50052e6e,aaa25ac376f2c6e68a46afacd552bc0f50052e6e,Improve diagnostic output for output tests.
EricWF,2016-08-28 19:24:16,https://api.github.com/repos/google/benchmark/git/commits/0ed44560973cad74be04848a74eca3dda0ed7957,0ed44560973cad74be04848a74eca3dda0ed7957,"Refactor output test runner into standalone module. (#277)

* refactor

* Move default substitutions into library

* Move default substitutions to the *right* place in the library

* Fix init order issues that caused test failures

* improve diagnostics

* add missing include

* general cleanup

* Address review comments"
EricWF,2016-08-11 00:23:50,https://api.github.com/repos/google/benchmark/git/commits/577baa0dbdc6ea6d916db0f12ed2dcc5cee19b99,577baa0dbdc6ea6d916db0f12ed2dcc5cee19b99,"Remove MinGW builder in preference of MinGW-w64.

The plain MinGW enviroment does not provide any threading supporting, including
in the C++ STL. The MinGW-w64 enviroment does not have this problem.

This patch removes the 32 bit bot since it's always going to fail."
EricWF,2016-08-11 00:20:54,https://api.github.com/repos/google/benchmark/git/commits/a11fb69c89eae0f5619917da209c6a7f057b6bd1,a11fb69c89eae0f5619917da209c6a7f057b6bd1,Add --benchmark_report_aggregates_only={true|false} flag for better summary output. (#267)
EricWF,2016-08-09 20:36:15,https://api.github.com/repos/google/benchmark/git/commits/c9d747e5e6faf333dfde286dad7243a2907697da,c9d747e5e6faf333dfde286dad7243a2907697da,Test different Appveyor MinGW installation
EricWF,2016-08-09 20:14:15,https://api.github.com/repos/google/benchmark/git/commits/a7a7c561524d3fc7e3606c983ede3445c2deb550,a7a7c561524d3fc7e3606c983ede3445c2deb550,"Workaround flaky complexity_test.cc test case.

See https://github.com/google/benchmark/issues/272"
EricWF,2016-08-09 18:33:57,https://api.github.com/repos/google/benchmark/git/commits/5eac66249ce28f6baae80a2565d8d53e1a3f3945,5eac66249ce28f6baae80a2565d8d53e1a3f3945,"Add a ""compare_bench.py"" tooling script. (#266)

This patch adds the compare_bench.py utility which can be used to compare the result of benchmarks.
The program is invoked like:

$ compare_bench.py <old-benchmark> <new-benchmark> [benchmark options]...
Where <old-benchmark> and <new-benchmark> either specify a benchmark executable file, or a JSON output file. The type of the input file is automatically detected. If a benchmark executable is specified then the benchmark is run to obtain the results. Otherwise the results are simply loaded from the output file."
EricWF,2016-08-09 18:31:44,https://api.github.com/repos/google/benchmark/git/commits/de4ead7a53a3ee1128e0d86150fc8ef598d7ffbd,de4ead7a53a3ee1128e0d86150fc8ef598d7ffbd,Document compiler requirements (#269)
EricWF,2016-08-09 18:09:37,https://api.github.com/repos/google/benchmark/git/commits/96a5965b6ed2f3723b5c71e6ef32a008b8b0c107,96a5965b6ed2f3723b5c71e6ef32a008b8b0c107,"Use pre-installed MinGW on Appveyor

Currently out Appveyor CI downloads and stashes a custom MinGW installation.
However the builder already provides both 64 and 32 bit installations of MinGW.
This patch changes our CI to use those instead.

I'm hoping this will fix issues where the g++ is broken due to the Appveyor
package caching semantics."
EricWF,2016-08-08 08:22:49,https://api.github.com/repos/google/benchmark/git/commits/95dee3c699e0c972fca9ad414f80e451e0bf4d7f,95dee3c699e0c972fca9ad414f80e451e0bf4d7f,Work around bogus GCC warning
EricWF,2016-08-08 08:04:59,https://api.github.com/repos/google/benchmark/git/commits/ee54a3f03e66f69d9355013486f3d5e963a36dd4,ee54a3f03e66f69d9355013486f3d5e963a36dd4,"Rework Appveyor config

Currently the Appveyor bot is a PIT. It never passes and it often hangs
or gives very poor output. This patch rewrites the configuration.

This patch also attempts to fix a flaky complexity test as a drive-by."
EricWF,2016-08-08 07:41:01,https://api.github.com/repos/google/benchmark/git/commits/cfd717e43be63ba778cc50eb8716e22065629246,cfd717e43be63ba778cc50eb8716e22065629246,Increase Appveyor timeout and fix build warning
EricWF,2016-08-08 06:04:59,https://api.github.com/repos/google/benchmark/git/commits/9e13b95b7285d2bcca4a79baa6af60a91066b99b,9e13b95b7285d2bcca4a79baa6af60a91066b99b,fix Appveyor config and add timeout
EricWF,2016-08-08 05:44:34,https://api.github.com/repos/google/benchmark/git/commits/85e7ed7eea3e4da4676942ab2c5ecedc04c6dac3,85e7ed7eea3e4da4676942ab2c5ecedc04c6dac3,"Add libc++ and MSAN builders to to travis.

This patch adds three new build configurations to the travis CI.

* Clang 3.8 w/ libc++
* Clang 3.8 w/ libc++, UBSAN, ASAN
* Clang 3.8 w/ libc++, MSAN"
EricWF,2016-08-08 02:09:52,https://api.github.com/repos/google/benchmark/git/commits/8228b3e8a7298c4725cc079f96e5fa4bc96919b6,8228b3e8a7298c4725cc079f96e5fa4bc96919b6,Make Appveyor show test output on failure
EricWF,2016-08-08 01:25:19,https://api.github.com/repos/google/benchmark/git/commits/8267117a92c0c30294839f4c5006b2e1b77dd14a,8267117a92c0c30294839f4c5006b2e1b77dd14a,"Add ASAN and UBSAN builders to travis for both GCC and Clang.

This patch adds new builders that test against GCC 6 and Clang 3.8 respectivly.
They also enable both address and undefined sanitizer. MSAN currently won't work
since it requires a sanitized STL."
EricWF,2016-08-07 23:33:18,https://api.github.com/repos/google/benchmark/git/commits/c04f703ab499058c62d6e3c4e05c11d3cb1e8781,c04f703ab499058c62d6e3c4e05c11d3cb1e8781,"Fix signed integer overflow UB in complexity computations.

Previously the FittingCurve functions for n^2 and n^3 did the calculation
using int types. This can overflow and cause UB. This patch changes the
calculations to use std::pow to prevent this.

Also re-enable VC 2013 appveyor bot since I *hope* this is what was causing
the failures."
EricWF,2016-08-07 23:09:31,https://api.github.com/repos/google/benchmark/git/commits/5121b8546b58afb03d0507ec4002fb3b5a67d083,5121b8546b58afb03d0507ec4002fb3b5a67d083,Temporarly disable VC 2013 appveyor build in order to test VC 2015
EricWF,2016-08-07 22:31:43,https://api.github.com/repos/google/benchmark/git/commits/9820035998dea3dbcfd4be0e46a0d56a0e8ed53e,9820035998dea3dbcfd4be0e46a0d56a0e8ed53e,Whitespace change to trigger appveyor.
EricWF,2016-08-07 21:19:20,https://api.github.com/repos/google/benchmark/git/commits/1b57a2ad056a80f919eb3841aefc859c0bde64fb,1b57a2ad056a80f919eb3841aefc859c0bde64fb,"Add myself to AUTHORS.

This is secretly just a test commit to get appveyor to run again."
EricWF,2016-08-07 20:57:39,https://api.github.com/repos/google/benchmark/git/commits/f30028b2a8ebe7f6aec5e5b23da7912de6faccaa,f30028b2a8ebe7f6aec5e5b23da7912de6faccaa,"Attempt to fix VC 2013 build.

VC 2013 injects valid when  assigning an initializer list to std::set.
This attempts to work around this issue by using std::set's constructors
instead of the assignment operators."
loganek,2016-08-04 19:30:14,https://api.github.com/repos/google/benchmark/git/commits/dfe026075480f117f424d254c2f701ac97ea4cdd,dfe026075480f117f424d254c2f701ac97ea4cdd,"Support multiple ranges in the benchmark (#257)

* Support multiple ranges in the benchmark

google-benchmark library allows to provide up to two ranges to the
benchmark method (range_x and range_y). However, in many cases it's not
sufficient. The patch introduces multi-range features, so user can easily
define multiple ranges by passing a vector of integers, and access values
through the method range(i).

* Remove redundant API

Functions State::range_x() and State::range_y() have been removed. They should
be replaced by State::range(0) and State::range(1).
Functions Benchmark::ArgPair() and Benchmark::RangePair() have been removed.
They should be replaced by Benchmark::Args() and Benchmark::Ranges()."
EricWF,2016-08-03 04:09:06,https://api.github.com/repos/google/benchmark/git/commits/7f1da4a68b83fa8474ff61c13d26922866871285,7f1da4a68b83fa8474ff61c13d26922866871285,Hide yet another test from MSVC 2013
EricWF,2016-08-03 01:33:41,https://api.github.com/repos/google/benchmark/git/commits/25eae60c4c8145553a50d536dac922a5b65bcee6,25eae60c4c8145553a50d536dac922a5b65bcee6,Attempt to fix MSVC build failures
EricWF,2016-08-02 23:22:46,https://api.github.com/repos/google/benchmark/git/commits/5f5ca31ce0f9e5fa33e622aa98f9feee31b0c099,5f5ca31ce0f9e5fa33e622aa98f9feee31b0c099,"Add `RegisterBenchmark(name, func, args...)`  for creating/registering benchmarks. (#259)

* Add RegisterBenchmark

* fix test inputs

* fix UB caused by unitialized value

* Add RegisterBenchmark

* fix test inputs

* fix UB caused by unitialized value

* Work around GCC 4.6/4.7/4.8 bug"
EricWF,2016-08-02 21:47:29,https://api.github.com/repos/google/benchmark/git/commits/b7f8e355eea6e1f19007fd80b4ecbeca9d9ab541,b7f8e355eea6e1f19007fd80b4ecbeca9d9ab541,"update travis, squash history (#265)"
EricWF,2016-08-02 21:12:43,https://api.github.com/repos/google/benchmark/git/commits/44128d87d2846fc20d540ef41eda6da9ffbb6aba,44128d87d2846fc20d540ef41eda6da9ffbb6aba,"Add --benchmark_out=<filename> and --benchmark_out_format=<format> options.

These options allow you to write the output of a benchmark to the specified
file and with the specified format. The goal of this change is to help support
tooling."
drozdvadym,2016-07-25 19:13:09,https://api.github.com/repos/google/benchmark/git/commits/f68e64c60a6b20a1f50046df58111107a09fd6a3,f68e64c60a6b20a1f50046df58111107a09fd6a3,add support for step in DenseRange() (#260)
EricWF,2016-07-23 22:22:13,https://api.github.com/repos/google/benchmark/git/commits/a2ca94dd10eb663345070bab68df510ffa2dc145,a2ca94dd10eb663345070bab68df510ffa2dc145,Fix missing SYSTEM_INFO initializers
EricWF,2016-07-22 23:48:37,https://api.github.com/repos/google/benchmark/git/commits/3b2d0abd2b4d9c31c70eb13dc14e7ee627621b3c,3b2d0abd2b4d9c31c70eb13dc14e7ee627621b3c,Use correct integer type for complexity. MSVC warns otherwise
EricWF,2016-07-22 23:31:05,https://api.github.com/repos/google/benchmark/git/commits/950c8b74403f6f0ad962cac63efe1ccb18100692,950c8b74403f6f0ad962cac63efe1ccb18100692,Fix suprious failures in complexity_test.cc
EricWF,2016-07-22 22:18:34,https://api.github.com/repos/google/benchmark/git/commits/440df36e7a3b69ff46bead20b1b30ac7e0c811e2,440df36e7a3b69ff46bead20b1b30ac7e0c811e2,Improve failure mode in complexity_test.cc
EricWF,2016-07-22 21:42:26,https://api.github.com/repos/google/benchmark/git/commits/1bd62bd0becbb692c7088f331c876ca3aeff4c65,1bd62bd0becbb692c7088f331c876ca3aeff4c65,"Revert ""Workaround missing std::this_thread::sleep_for function in tests.""

GCC 4.6 doesn't provide std::chrono::steady_clock and GCC 4.7 doesn't provide
std::this_thread::sleep_for. I would prefer to support GCC 4.7 but I'm
reverting this since the bots are GCC 4.6.

This reverts commit c5f454957d457e8b6ae5a1a1eaf8eb6739c17f67."
EricWF,2016-07-22 21:35:26,https://api.github.com/repos/google/benchmark/git/commits/c5f454957d457e8b6ae5a1a1eaf8eb6739c17f67,c5f454957d457e8b6ae5a1a1eaf8eb6739c17f67,"Workaround missing std::this_thread::sleep_for function in tests.

GCC 4.7 doesn't provide std::this_thread::sleep_for on my system.
This patch changes the tests to use a different method for wasting
cycles."
SvenJo,2016-07-13 20:00:32,https://api.github.com/repos/google/benchmark/git/commits/ebd37b191c757cd0b20c9c8517e38d1e1ac45069,ebd37b191c757cd0b20c9c8517e38d1e1ac45069,set cpuinfo_num_cpus on Windows (#254)
enh,2016-07-12 19:40:09,https://api.github.com/repos/google/benchmark/git/commits/b805b7c6e02d0a1d1709f14295c0b05b988a5668,b805b7c6e02d0a1d1709f14295c0b05b988a5668,"Add missing `volatile`s to 32-bit ARM cycleclock assembler. (#253)

Without these, clang reorders these instructions as if they were
regular loads/stores which causes SIGILL from the kernel because
it performs all the loads before it starts testing the values."
EricWF,2016-07-11 20:58:50,https://api.github.com/repos/google/benchmark/git/commits/7e40ff9e35699ea14a6addd2ce20cd23be519430,7e40ff9e35699ea14a6addd2ce20cd23be519430,"Provide a better implementation of DoNotOptimize(...).

This implementation is less likely to ICE compilers, and is more correct.
It also acts as a memory barrier which will help prevent writes to global memory
from being optimized away."
steve-downey,2016-07-06 19:36:56,https://api.github.com/repos/google/benchmark/git/commits/2149577f892116d4080d16fbf0b0455b1026b219,2149577f892116d4080d16fbf0b0455b1026b219,"Add export linker flags policy to cmake (#251)

Add policy CMP0056, which honors the link flags in try_compile and
try_run. This allows for building against non-system libc++ by providing
the correct -L and rpath options in a containing project.

For example:

    set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -L ${LLVM_ROOT}/lib -l c++ -l c++abi"")
    set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -Wl,-rpath,${LLVM_ROOT}/lib"")"
ismaelJimenez,2016-06-27 18:26:23,https://api.github.com/repos/google/benchmark/git/commits/885ca41cf835313eca052ad112608631685ae6f2,885ca41cf835313eca052ad112608631685ae6f2,added check for SetComplexityN (#248)
ismaelJimenez,2016-06-27 18:25:43,https://api.github.com/repos/google/benchmark/git/commits/a0783fd7f629789cd406d74392427a73a692bf57,a0783fd7f629789cd406d74392427a73a692bf57,fix 244 (#247)
NAThompson,2016-06-27 18:24:13,https://api.github.com/repos/google/benchmark/git/commits/d147797aaccb71f44d7ee3df94dcf14f8d713247,d147797aaccb71f44d7ee3df94dcf14f8d713247,"Add  state.SetComplexityN to docs. (#245)

Add `state.SetComplexityN(state.range_x());` to documentation so that complexity is calculated correctly."
ryanvo,2016-06-20 16:15:09,https://api.github.com/repos/google/benchmark/git/commits/1d53e5e0d8d0c5b69fc19d7e95dda2c8385d03f4,1d53e5e0d8d0c5b69fc19d7e95dda2c8385d03f4,Clarified output formats (#241)
ismaelJimenez,2016-06-03 16:33:17,https://api.github.com/repos/google/benchmark/git/commits/3fdd76bd14ff122c6881d7f15ec5cb2629241e7a,3fdd76bd14ff122c6881d7f15ec5cb2629241e7a,fix issue 235 (#236)
dominichamon,2016-06-02 21:37:31,https://api.github.com/repos/google/benchmark/git/commits/2d088a9f2d41acb77afc99d045f669e1a21b61ef,2d088a9f2d41acb77afc99d045f669e1a21b61ef,Merge branch 'ismaelJimenez-added_lambdas'
dominichamon,2016-06-02 21:37:14,https://api.github.com/repos/google/benchmark/git/commits/e49814316891c8d6e125da5d3f72c7bc45f31bf4,e49814316891c8d6e125da5d3f72c7bc45f31bf4,fix warning on loss of integer precision
dominichamon,2016-06-02 21:33:14,https://api.github.com/repos/google/benchmark/git/commits/51c23a9115e4c4eb91e8286ba00069380374937d,51c23a9115e4c4eb91e8286ba00069380374937d,Merge branch 'added_lambdas' of git://github.com/ismaelJimenez/benchmark into ismaelJimenez-added_lambdas
ismaelJimenez,2016-06-02 21:27:29,https://api.github.com/repos/google/benchmark/git/commits/2859ae93949a7a3415082e65001f25e8e5e78284,2859ae93949a7a3415082e65001f25e8e5e78284,changed complexity_n to int and fix some whitespaces
ismaelJimenez,2016-06-02 20:40:21,https://api.github.com/repos/google/benchmark/git/commits/8ba94b4c1842d9424c592258a6dfc9beea4912c8,8ba94b4c1842d9424c592258a6dfc9beea4912c8,changed global string to const char *
ismaelJimenez,2016-06-02 20:23:39,https://api.github.com/repos/google/benchmark/git/commits/1a633969b31b2a486bdfae80576c53f40293281e,1a633969b31b2a486bdfae80576c53f40293281e,changed BigO logic order
ismaelJimenez,2016-06-02 20:21:52,https://api.github.com/repos/google/benchmark/git/commits/240ba4e64eb46e1f5acbafaadae34c2b2ca701eb,240ba4e64eb46e1f5acbafaadae34c2b2ca701eb,changed BigOFunc argument from size_t to int
ismaelJimenez,2016-06-02 20:02:17,https://api.github.com/repos/google/benchmark/git/commits/f964480080c3e2b3f6f437b76ccd07bbfdb92ad1,f964480080c3e2b3f6f437b76ccd07bbfdb92ad1,Merge branch 'added_lambdas' of https://github.com/ismaelJimenez/benchmark into added_lambdas
ismaelJimenez,2016-06-02 20:01:31,https://api.github.com/repos/google/benchmark/git/commits/22cb9d9ce0ff12219f5ca6c4a28124d11730e66f,22cb9d9ce0ff12219f5ca6c4a28124d11730e66f,google formated
ismaelJimenez,2016-06-02 18:58:14,https://api.github.com/repos/google/benchmark/git/commits/3ef63399716c7ac213d4016ab9454422f4f9d6d1,3ef63399716c7ac213d4016ab9454422f4f9d6d1,Update Readme.md
ismaelJimenez,2016-06-02 17:48:53,https://api.github.com/repos/google/benchmark/git/commits/109f528a4039c298e1f02ff4ce2fd32c552c5a38,109f528a4039c298e1f02ff4ce2fd32c552c5a38,removed functional library not needed
ismaelJimenez,2016-06-02 17:42:08,https://api.github.com/repos/google/benchmark/git/commits/11e304355492670709c60e6d39eb42fc01fd878a,11e304355492670709c60e6d39eb42fc01fd878a,checked format before pull request
ismaelJimenez,2016-06-02 17:01:10,https://api.github.com/repos/google/benchmark/git/commits/212cfe1c2e659d9523cbc453917d0cdde4699bcd,212cfe1c2e659d9523cbc453917d0cdde4699bcd,"removed check on automatic fit, to avoid random convergence misfits breaking the build"
ismaelJimenez,2016-06-01 21:13:10,https://api.github.com/repos/google/benchmark/git/commits/8c73d49b775610a4ee027a7f44b37962684a2370,8c73d49b775610a4ee027a7f44b37962684a2370,fixed reporter_output_test
ismaelJimenez,2016-06-01 21:08:01,https://api.github.com/repos/google/benchmark/git/commits/867f9145a0a45f8b993cec8b48309c19391acaa0,867f9145a0a45f8b993cec8b48309c19391acaa0,added lambdas to complexity report
BillyONeal,2016-05-31 23:54:02,https://api.github.com/repos/google/benchmark/git/commits/84cd50b85e2c7ff384a362933446691d3c3be357,84cd50b85e2c7ff384a362933446691d3c3be357,Add workaround for VS2013 const-incorrect atomic (#230)
BillyONeal,2016-05-31 21:52:26,https://api.github.com/repos/google/benchmark/git/commits/3685cad68c5180e0da2afb7c05bd03422c0fe454,3685cad68c5180e0da2afb7c05bd03422c0fe454,Added new noexcept macros for VS2013 (#229)
EricWF,2016-05-30 23:13:41,https://api.github.com/repos/google/benchmark/git/commits/74a278e206f9387dec72ec000436a18bfcb3070e,74a278e206f9387dec72ec000436a18bfcb3070e,Fix flaky test
EricWF,2016-05-30 22:52:24,https://api.github.com/repos/google/benchmark/git/commits/519e8d0e56ac41813aa60bb6b39bf05308205b5b,519e8d0e56ac41813aa60bb6b39bf05308205b5b,Fix missing declaration of FLAGS_color_print
EricWF,2016-05-30 21:33:52,https://api.github.com/repos/google/benchmark/git/commits/7188824c333d86fe999988ad61cbb0825780ab8b,7188824c333d86fe999988ad61cbb0825780ab8b,Fix windows build in console_reporter.cc. Fixes #228
EricWF,2016-05-27 22:53:30,https://api.github.com/repos/google/benchmark/git/commits/02230445e065456371cea2a18d5fee6a33b0c1d9,02230445e065456371cea2a18d5fee6a33b0c1d9,Move UnitTime helpers to reporter.h
EricWF,2016-05-27 22:45:25,https://api.github.com/repos/google/benchmark/git/commits/1b263fe6d906bb0854b84247f1b395bbacd3b88e,1b263fe6d906bb0854b84247f1b395bbacd3b88e,"Cleanup reporters (#226)

* Move ComputeStats call out of the reporters

* Cleanup adjusted time calculations in reporters

* Move ComputeBigO call out of reporters

* Remove ReportComplexity interface using ReportRuns instead

* Factor out reporting of basic context information

* Attempt to fix GCC 4.6 build errors

* Move ComputeStats to complexity.cc"
EricWF,2016-05-27 19:37:10,https://api.github.com/repos/google/benchmark/git/commits/238e558fdb6f00a2e3eb75d6c353030f8a510f8c,238e558fdb6f00a2e3eb75d6c353030f8a510f8c,"Allow benchmarks to take arbitrary arguments. (#221)

* Add lambda benchmarks

* Remove lambda capture since the lambda is not at a block scope

* Remove LambdaBenchmark helper since FunctionBenchmark can be used with non-capturing lambas

* Add lambda benchmarks

* Remove lambda capture since the lambda is not at a block scope

* Remove LambdaBenchmark helper since FunctionBenchmark can be used with non-capturing lambas

* Add more docs for BENCHMARK_CAPTURE.

* Fix use of misnamed parameter

* Guard BENCHMARK_CAPTURE tests against non-c++11 compilers

* Move tests out of basic_test.cc"
EricWF,2016-05-27 19:34:37,https://api.github.com/repos/google/benchmark/git/commits/5686bf1b38f8aa713267097d7c1944140f71b5d3,5686bf1b38f8aa713267097d7c1944140f71b5d3,"Change reporters to use a specified output and error stream. Add tests for output. (#219)

* Add test for reporter output.

* setup err_stream tests

* Fix warnings in tests

* whitespace

* Fix build errors caused by super pedantic compilers

* Pass streams by pointer not non-const reference"
dominichamon,2016-05-26 21:02:58,https://api.github.com/repos/google/benchmark/git/commits/3f7a9c76fbbd0a4b8f54f866ccbcc4d6871c7cd1,3f7a9c76fbbd0a4b8f54f866ccbcc4d6871c7cd1,Merge branch 'ismaelJimenez-update_complexity'
dominichamon,2016-05-26 21:01:28,https://api.github.com/repos/google/benchmark/git/commits/d6bc7e1581c4c8c6c3fcccd093c047158b4bf461,d6bc7e1581c4c8c6c3fcccd093c047158b4bf461,Merge branch 'update_complexity' of git://github.com/ismaelJimenez/benchmark into ismaelJimenez-update_complexity
ismaelJimenez,2016-05-26 20:39:17,https://api.github.com/repos/google/benchmark/git/commits/c1c7d33279b463088550986fe6f311a3ad2faa2e,c1c7d33279b463088550986fe6f311a3ad2faa2e,added benchmar_apit to complexity.cc
ismaelJimenez,2016-05-26 19:26:43,https://api.github.com/repos/google/benchmark/git/commits/805e8baee9da3744428e3f646f321c29283c4072,805e8baee9da3744428e3f646f321c29283c4072,small refactor
ismaelJimenez,2016-05-26 19:16:40,https://api.github.com/repos/google/benchmark/git/commits/ac3ec2ded37e4f9e4083f8b65644f7c4b60336d7,ac3ec2ded37e4f9e4083f8b65644f7c4b60336d7,moved complexity.h into src and BigO enum into benchmark_api
ismaelJimenez,2016-05-26 18:57:27,https://api.github.com/repos/google/benchmark/git/commits/d82f0c313133c60e3a5db5be6f7d2299cd5ffdd8,d82f0c313133c60e3a5db5be6f7d2299cd5ffdd8,added includes
ismaelJimenez,2016-05-26 17:44:11,https://api.github.com/repos/google/benchmark/git/commits/37ab858e4b245a49805b01358655fab069474a7c,37ab858e4b245a49805b01358655fab069474a7c,initialized doubles to 0.0
EricWF,2016-05-26 06:53:38,https://api.github.com/repos/google/benchmark/git/commits/3ff8a6ecc8bfbfa62af85ccfc07b035149eb13cb,3ff8a6ecc8bfbfa62af85ccfc07b035149eb13cb,"Merge pull request #224 from zabereer/donotoptimize_with_test_merged

Force DoNotOptimize operand to memory for both gcc and clang"
dominichamon,2016-05-25 22:35:17,https://api.github.com/repos/google/benchmark/git/commits/a38f022b5a2b21c272c672f2d7651e1bee1c18bf,a38f022b5a2b21c272c672f2d7651e1bee1c18bf,Merge branch 'efcs-skip_with_error'
dominichamon,2016-05-25 22:35:04,https://api.github.com/repos/google/benchmark/git/commits/5e51e439a8a65ca5aec52e7d8caff5c21a6e9ec4,5e51e439a8a65ca5aec52e7d8caff5c21a6e9ec4,Merge branch 'skip_with_error' of git://github.com/efcs/benchmark into efcs-skip_with_error
ismaelJimenez,2016-05-25 21:33:25,https://api.github.com/repos/google/benchmark/git/commits/171588561112744263caa5847847e76e9bbde562,171588561112744263caa5847847e76e9bbde562,fixed typos
ismaelJimenez,2016-05-25 21:22:53,https://api.github.com/repos/google/benchmark/git/commits/340fe557e2995addcb2af24dfdc7d86801487330,340fe557e2995addcb2af24dfdc7d86801487330,indent
ismaelJimenez,2016-05-25 21:19:32,https://api.github.com/repos/google/benchmark/git/commits/290ac9ee0ed445811897c790715e47d490dacd9f,290ac9ee0ed445811897c790715e47d490dacd9f,updated complexity_test.cc to new interface for auto
ismaelJimenez,2016-05-25 21:13:19,https://api.github.com/repos/google/benchmark/git/commits/1ee11056c1f1117142af36dd3ac4df2c2e6ce1bb,1ee11056c1f1117142af36dd3ac4df2c2e6ce1bb,move include from .h into .cc
ismaelJimenez,2016-05-25 21:06:27,https://api.github.com/repos/google/benchmark/git/commits/90a85080636d0626ed975531d08bc1339a405fa9,90a85080636d0626ed975531d08bc1339a405fa9,Update Readme.md
ismaelJimenez,2016-05-25 20:57:52,https://api.github.com/repos/google/benchmark/git/commits/2f61f8aee0bc8b09429fce8b7d2718f805ed18ac,2f61f8aee0bc8b09429fce8b7d2718f805ed18ac,refactor leastsq into complexity
ismaelJimenez,2016-05-25 20:26:57,https://api.github.com/repos/google/benchmark/git/commits/087f0d3f1bc6610ceaa346f8e573dd23236cea08,087f0d3f1bc6610ceaa346f8e573dd23236cea08,upgraded leastsq
ismaelJimenez,2016-05-25 19:18:56,https://api.github.com/repos/google/benchmark/git/commits/e246699f25f50e80fad71a1352313f5f3d3e21d3,e246699f25f50e80fad71a1352313f5f3d3e21d3,added auto as default value for complexity
dominichamon,2016-05-25 16:00:31,https://api.github.com/repos/google/benchmark/git/commits/9686f1769e2a4e053cf51fdd69beec58ca8d7081,9686f1769e2a4e053cf51fdd69beec58ca8d7081,Merge branch 'skip_with_error' of git://github.com/efcs/benchmark into efcs-skip_with_error
EricWF,2016-05-25 03:52:55,https://api.github.com/repos/google/benchmark/git/commits/90a069f67f6674248faa7c46ca791f0afb211008,90a069f67f6674248faa7c46ca791f0afb211008,Merge branch 'master' into skip_with_error
EricWF,2016-05-25 03:52:23,https://api.github.com/repos/google/benchmark/git/commits/84bc4d703b6f27a0bdcb48443c9bca3f60e1818c,84bc4d703b6f27a0bdcb48443c9bca3f60e1818c,Add a per benchmark 'Repetitions' option.
EricWF,2016-05-25 01:45:18,https://api.github.com/repos/google/benchmark/git/commits/1003a70e5fe80967fe465da54c2f924944ad9fa6,1003a70e5fe80967fe465da54c2f924944ad9fa6,Fix csv_reporter when reporting errors
EricWF,2016-05-25 00:25:44,https://api.github.com/repos/google/benchmark/git/commits/6f84ffcd8b53b035fe4430070dbca19641892def,6f84ffcd8b53b035fe4430070dbca19641892def,fix another bad merge
EricWF,2016-05-24 22:19:04,https://api.github.com/repos/google/benchmark/git/commits/ee8e37c67db9a717059f9f7bdfb83549208d65e9,ee8e37c67db9a717059f9f7bdfb83549208d65e9,Fix bad merge which caused the benchmark name to be printed twice
EricWF,2016-05-24 22:12:30,https://api.github.com/repos/google/benchmark/git/commits/6a45324e1d1c1f2c7e56a2df970e38a62122fc4f,6a45324e1d1c1f2c7e56a2df970e38a62122fc4f,Address review comments.
EricWF,2016-05-24 21:45:02,https://api.github.com/repos/google/benchmark/git/commits/b195f82554819d7e152e2b32b39220b85af18cf7,b195f82554819d7e152e2b32b39220b85af18cf7,Merge branch 'master' into skip_with_error
EricWF,2016-05-24 21:44:58,https://api.github.com/repos/google/benchmark/git/commits/525858e68797d053ab4c859528164974978162ba,525858e68797d053ab4c859528164974978162ba,Fix error-handling in reporters
EricWF,2016-05-24 21:21:41,https://api.github.com/repos/google/benchmark/git/commits/924b8cee7af0a302ecb07b3429760c4a906460c7,924b8cee7af0a302ecb07b3429760c4a906460c7,Reflow some wording. NFC
EricWF,2016-05-24 21:09:31,https://api.github.com/repos/google/benchmark/git/commits/1080b17bf5d0a093e5aa6fb2a474df443e05bb82,1080b17bf5d0a093e5aa6fb2a474df443e05bb82,Fix build error with libc++
EricWF,2016-05-24 21:01:07,https://api.github.com/repos/google/benchmark/git/commits/bdeb38718e23468613c000463e7e42e3b5516b23,bdeb38718e23468613c000463e7e42e3b5516b23,merge
dominichamon,2016-05-24 20:25:59,https://api.github.com/repos/google/benchmark/git/commits/2440b752fd335d00349b6dd77d67e5a6401565fb,2440b752fd335d00349b6dd77d67e5a6401565fb,Formatting updates
dominichamon,2016-05-24 20:15:55,https://api.github.com/repos/google/benchmark/git/commits/a86545874a2c4c84a7361f268d621c72c1af24c8,a86545874a2c4c84a7361f268d621c72c1af24c8,Merge branch 'ismaelJimenez-complexity'
dominichamon,2016-05-24 20:15:16,https://api.github.com/repos/google/benchmark/git/commits/f126852c8fe0cbd4f702d696b88d3ca8c4911499,f126852c8fe0cbd4f702d696b88d3ca8c4911499,simplify format string for complexity output
dominichamon,2016-05-24 20:09:41,https://api.github.com/repos/google/benchmark/git/commits/31cdabf6bbb63c5dd55cc679b84cd38db7cd3658,31cdabf6bbb63c5dd55cc679b84cd38db7cd3658,"Merge pull request #216 from efcs/diagnostic-checks

Add checks that <Resume|Pause>Timing functions are not called outside of the KeepRunning() loop. Fixes #204"
ismaelJimenez,2016-05-24 18:48:34,https://api.github.com/repos/google/benchmark/git/commits/a24ef95e1199c463bb088d321caa1b0591817813,a24ef95e1199c463bb088d321caa1b0591817813,adapt complexity_n to leastsq inteface
ismaelJimenez,2016-05-24 18:35:39,https://api.github.com/repos/google/benchmark/git/commits/64d72ee7b27c719be3233b1f1dd691084e07ffde,64d72ee7b27c719be3233b1f1dd691084e07ffde,changed complexity_n from int to size_t
ismaelJimenez,2016-05-24 18:26:21,https://api.github.com/repos/google/benchmark/git/commits/5e10e120db2ddf36d75e910ec2c77adebbf7543f,5e10e120db2ddf36d75e910ec2c77adebbf7543f,fixed overshadow
ismaelJimenez,2016-05-24 18:06:54,https://api.github.com/repos/google/benchmark/git/commits/e5cf020d9730d24391e1cd1dfb37aef2c163d82c,e5cf020d9730d24391e1cd1dfb37aef2c163d82c,fixed warning
ismaelJimenez,2016-05-24 17:56:49,https://api.github.com/repos/google/benchmark/git/commits/36a9ae197f220df65ef7ed1a21015a8fb4ef1ece,36a9ae197f220df65ef7ed1a21015a8fb4ef1ece,added SetComplexityN
EricWF,2016-05-24 06:42:11,https://api.github.com/repos/google/benchmark/git/commits/9341d705a14afed7c4e0f8a22b1e6e8a6259fcc4,9341d705a14afed7c4e0f8a22b1e6e8a6259fcc4,"Change --benchmark_list_tests to respect the benchmark filter.

This behavior mirrors how GTest handles these two flags."
EricWF,2016-05-24 05:32:05,https://api.github.com/repos/google/benchmark/git/commits/e0de8171c678c0f0c643efa9e18de40ad119122b,e0de8171c678c0f0c643efa9e18de40ad119122b,Change RunSpecifiedBenchmarks to return the number of benchmarks run. Fixes #145
EricWF,2016-05-24 02:51:15,https://api.github.com/repos/google/benchmark/git/commits/9fcdd6fc25fcb232038355c6103eb6f06bcd5dd5,9fcdd6fc25fcb232038355c6103eb6f06bcd5dd5,Prevent re-execution of slow feature tests.
EricWF,2016-05-24 02:44:10,https://api.github.com/repos/google/benchmark/git/commits/c7108df977c40c7794701c369a8cb66135d75e14,c7108df977c40c7794701c369a8cb66135d75e14,Only compile and run the C++03 test when -std=c++03 is supported. Fixes #164
EricWF,2016-05-24 02:35:09,https://api.github.com/repos/google/benchmark/git/commits/90c9ab1d8e0a44d229dae6b4f5f6355161de761a,90c9ab1d8e0a44d229dae6b4f5f6355161de761a,add doc
EricWF,2016-05-24 01:24:56,https://api.github.com/repos/google/benchmark/git/commits/43017f8b1510a50855e6b0ea145a534d3d754068,43017f8b1510a50855e6b0ea145a534d3d754068,Add SkipWithError(...) function.
EricWF,2016-05-23 21:38:30,https://api.github.com/repos/google/benchmark/git/commits/029f37446daeef98db8dc3b26165405a1df2cc80,029f37446daeef98db8dc3b26165405a1df2cc80,Allow test to compile with -fno-exceptions
EricWF,2016-05-23 21:27:43,https://api.github.com/repos/google/benchmark/git/commits/481e06e65acc2d82e8f3a02fba2fd226de56b3ad,481e06e65acc2d82e8f3a02fba2fd226de56b3ad,Address review comments
EricWF,2016-05-23 21:07:54,https://api.github.com/repos/google/benchmark/git/commits/751e07d42da22f8ab554394cd3e242fc2ac80002,751e07d42da22f8ab554394cd3e242fc2ac80002,add newline
EricWF,2016-05-23 21:05:55,https://api.github.com/repos/google/benchmark/git/commits/69d1a524079e07508b4af08cbd1e83576387b468,69d1a524079e07508b4af08cbd1e83576387b468,Add checks that <Resume|Pause>Timing functions are not called outside of the benchmark. Fixes #204
ismaelJimenez,2016-05-23 20:49:16,https://api.github.com/repos/google/benchmark/git/commits/855786acf518db0162779f8196d930820e4f6b8c,855786acf518db0162779f8196d930820e4f6b8c,added end of file carriage return
ismaelJimenez,2016-05-23 20:31:40,https://api.github.com/repos/google/benchmark/git/commits/0c23d2852f58dd8e264f67045fd6e454cf481c5c,0c23d2852f58dd8e264f67045fd6e454cf481c5c,extracted BigO and GetBigO in own file
ismaelJimenez,2016-05-23 20:09:55,https://api.github.com/repos/google/benchmark/git/commits/266b3bd635a37b28d6e92125c615d3e17f5022ea,266b3bd635a37b28d6e92125c615d3e17f5022ea,changed color and remove iterations
EricWF,2016-05-23 18:59:12,https://api.github.com/repos/google/benchmark/git/commits/f434ce3fb650d40db186780ea3506269d5035ffd,f434ce3fb650d40db186780ea3506269d5035ffd,Add myself to the CONTRIBUTORS file
ismaelJimenez,2016-05-23 18:50:35,https://api.github.com/repos/google/benchmark/git/commits/43ef17441cc8767f5523031878a2f43ab1d7790b,43ef17441cc8767f5523031878a2f43ab1d7790b,refactor names
ismaelJimenez,2016-05-23 18:40:41,https://api.github.com/repos/google/benchmark/git/commits/d577987fd76595cb52602bd75b2866886e95b0f2,d577987fd76595cb52602bd75b2866886e95b0f2,changed indentation
ismaelJimenez,2016-05-23 18:34:54,https://api.github.com/repos/google/benchmark/git/commits/ea69a8479046413d96b0eb826f1d982985281a67,ea69a8479046413d96b0eb826f1d982985281a67,fix
ismaelJimenez,2016-05-23 18:34:01,https://api.github.com/repos/google/benchmark/git/commits/fed9b6f211a9ca67860bcaf183cb450e3695bb07,fed9b6f211a9ca67860bcaf183cb450e3695bb07,refactor least square .h
ismaelJimenez,2016-05-23 18:21:34,https://api.github.com/repos/google/benchmark/git/commits/266addc3f51f07ec182ed34af06e6d75b0f6d09f,266addc3f51f07ec182ed34af06e6d75b0f6d09f,fixed last_benchmark_instance
ismaelJimenez,2016-05-23 18:12:54,https://api.github.com/repos/google/benchmark/git/commits/ac05c045335d3e32ec75e3aae930ecc1c6533212,ac05c045335d3e32ec75e3aae930ecc1c6533212,refactor MinimalLEastSq
ismaelJimenez,2016-05-23 17:19:29,https://api.github.com/repos/google/benchmark/git/commits/5e52d2d6c048205626c4103d397bedf0527f67d8,5e52d2d6c048205626c4103d397bedf0527f67d8,refactor fitting curve
ismaelJimenez,2016-05-23 16:51:29,https://api.github.com/repos/google/benchmark/git/commits/5f9823bd92b2a24da06fac7b43f6658ec20cc901,5f9823bd92b2a24da06fac7b43f6658ec20cc901,fixed non-const reference arguments
ismaelJimenez,2016-05-21 14:45:45,https://api.github.com/repos/google/benchmark/git/commits/8afbf0ed3801ad12c4066d10e9d25764181321f4,8afbf0ed3801ad12c4066d10e9d25764181321f4,reworked comment for complexity report
ismaelJimenez,2016-05-21 14:34:12,https://api.github.com/repos/google/benchmark/git/commits/07efafbf5c0e95fabbae284eedcc1dfe3d57a396,07efafbf5c0e95fabbae284eedcc1dfe3d57a396,Update Readme
ismaelJimenez,2016-05-21 10:40:27,https://api.github.com/repos/google/benchmark/git/commits/dc667d048678f3cb6b4355d4da8b5d121db8bbf2,dc667d048678f3cb6b4355d4da8b5d121db8bbf2,Added asymptotic complexity to Readme
ismaelJimenez,2016-05-21 10:16:40,https://api.github.com/repos/google/benchmark/git/commits/5812d545efcd3bcbfd4e2e8d203bd42b8e5a7148,5812d545efcd3bcbfd4e2e8d203bd42b8e5a7148,Added range multiplier to Readme
ismaelJimenez,2016-05-21 09:51:42,https://api.github.com/repos/google/benchmark/git/commits/290bd60289ef571875415cf82be805f9a446c6a9,290bd60289ef571875415cf82be805f9a446c6a9,Refactor for pull request
ismaelJimenez,2016-05-21 06:55:43,https://api.github.com/repos/google/benchmark/git/commits/2e5c397b4829503a5cb023ac67d2a1f13ebda3aa,2e5c397b4829503a5cb023ac67d2a1f13ebda3aa,implemented complexity reporting
ismaelJimenez,2016-05-20 14:49:39,https://api.github.com/repos/google/benchmark/git/commits/872ff01a49390ccaf8ee5f13c18ae7be9cce8275,872ff01a49390ccaf8ee5f13c18ae7be9cce8275,addaptation of minimal_leastsq library
ismaelJimenez,2016-05-18 19:25:00,https://api.github.com/repos/google/benchmark/git/commits/b73dc22944cb933289bbdbf5bb6616dbfc50168f,b73dc22944cb933289bbdbf5bb6616dbfc50168f,implemented Complexity for O(1)
ismaelJimenez,2016-05-18 17:59:34,https://api.github.com/repos/google/benchmark/git/commits/27f0baa190b4ebd31436b3e8a89bee7fbdc50eb9,27f0baa190b4ebd31436b3e8a89bee7fbdc50eb9,Added test file and Complexity() interface
dominichamon,2016-05-16 16:37:08,https://api.github.com/repos/google/benchmark/git/commits/0a60062b3e8ae0376e6fcd41c5da50714a9ef47b,0a60062b3e8ae0376e6fcd41c5da50714a9ef47b,"Merge pull request #212 from ismaelJimenez/master

added option to change range multiplier"
ismaelJimenez,2016-05-16 16:17:11,https://api.github.com/repos/google/benchmark/git/commits/d2103de3d390715845f0cb42d3f070a039814580,d2103de3d390715845f0cb42d3f070a039814580,Modified check for range multiplier
ismaelJimenez,2016-05-14 13:56:34,https://api.github.com/repos/google/benchmark/git/commits/c60eefdbb78b29522568b1055941f3c20c843e78,c60eefdbb78b29522568b1055941f3c20c843e78,added option to change range multiplier
dominichamon,2016-05-11 19:07:59,https://api.github.com/repos/google/benchmark/git/commits/360e66c1c4777c99402cf8cd535aa510fee16573,360e66c1c4777c99402cf8cd535aa510fee16573,"Merge pull request #210 from BillyONeal/travis-init

Mark sudo: required for Travis"
BillyONeal,2016-05-11 18:16:48,https://api.github.com/repos/google/benchmark/git/commits/fa0e7ef8c66f85007170e69f28afe9e1b86a957f,fa0e7ef8c66f85007170e69f28afe9e1b86a957f,"Mark sudo: required for Travis

Google Benchmark's Travis build currently requires ""sudo"" to install newer
versions of CMake and similar. See this for more details:

https://docs.travis-ci.com/user/workers/container-based-infrastructure/

Since Google Benchmark was put into Travis before 2015-01-01, it gets the
standard infrastructure implicitly, so sudo works. But anyone who forks this
repository and tries to add Travis.CI (so they can see if the build works
before creating a PR) gets broken builds before this change."
dominichamon,2016-05-11 16:20:54,https://api.github.com/repos/google/benchmark/git/commits/336fd111f56b60ff5b622041bc1ba60856dae787,336fd111f56b60ff5b622041bc1ba60856dae787,"Merge pull request #208 from BillyONeal/msvc-cli-warnings

Fix MSVC++ command line warnings and support RELWITHDEBINFO / MINSIZEREL builds"
dominichamon,2016-05-11 16:06:55,https://api.github.com/repos/google/benchmark/git/commits/539da1125089ae6c29b361663a47bb4b33e7f647,539da1125089ae6c29b361663a47bb4b33e7f647,"Merge pull request #209 from BillyONeal/fix-appveyor

Fix appveyor's older MSVC++ builds by working around 2015 Update 2 bugfix"
BillyONeal,2016-05-11 00:35:36,https://api.github.com/repos/google/benchmark/git/commits/df9ab80113a890c38ff93ef37699078eeceb29fc,df9ab80113a890c38ff93ef37699078eeceb29fc,"Use nanoseconds instead of duration<double, milli>

MSVC++ before 2015 Update 2 has a bug in sleep_for where it tries to
implicitly += the input with a nanoseconds variable. Work around this by
using nanoseconds directly (which can be implicitly +='d with
chrono::nanoseconds)."
BillyONeal,2016-04-28 01:49:17,https://api.github.com/repos/google/benchmark/git/commits/09edc486b851ab948cc859e2c4a85a189378b284,09edc486b851ab948cc859e2c4a85a189378b284,Added GCC/Clang support for other rel configs
BillyONeal,2016-04-28 01:48:43,https://api.github.com/repos/google/benchmark/git/commits/d89ab075fd0b545f4c69732839e2a978df602abf,d89ab075fd0b545f4c69732839e2a978df602abf,"Added support for CMake's other rel configs

In addition to release, CMake supports RELWITHDEBINFO and MINSIZEREL
build configurations. In particular, debug info is necessary for many
profilers to do anything useful, making RELWITHDEBINFO important here.

MINSIZEREL was added for completeness' sake."
BillyONeal,2016-04-28 01:47:03,https://api.github.com/repos/google/benchmark/git/commits/9bb1ba6b76f6af2f32e2f146c3e97fdac67e8340,9bb1ba6b76f6af2f32e2f146c3e97fdac67e8340,"Fix clobbering of default CMAKE_CXX_FLAGS_RELEASE

BENCHMARK_ENABLE_LTO=true was completely replacing
CMAKE_CXX_FLAGS_RELEASE; meaning neither CMake's release defaults nor
user customizations were being applied."
BillyONeal,2016-04-28 01:44:39,https://api.github.com/repos/google/benchmark/git/commits/60b59217359ecac2060637906e9eae14216a47d7,60b59217359ecac2060637906e9eae14216a47d7,"Remove redundant MSVC++ /W3 triggering warnings

This change looks for CMake's default setting for MSVC++, /W3 (and any
other level should that change in the future), and removes it before
adding /W4. This stops the build for MSVC++ emitting warnings about
/W4 overriding /W3 earlier on the command line."
BillyONeal,2016-05-10 23:46:26,https://api.github.com/repos/google/benchmark/git/commits/fa8b2d617152ee840ee924910cf3f20bf9c61277,fa8b2d617152ee840ee924910cf3f20bf9c61277,Add myself to the contributors list
dominichamon,2016-05-05 21:07:46,https://api.github.com/repos/google/benchmark/git/commits/354b14d1a0770da28f1725fa8409af3264de3a79,354b14d1a0770da28f1725fa8409af3264de3a79,"Merge pull request #199 from jknuuttila/master

Support for manual timing (see issue #198, https://github.com/google/benchmark/issues/198)"
jknuuttila,2016-04-30 13:23:58,https://api.github.com/repos/google/benchmark/git/commits/e253a284029c34f764fc26bb7859298d4ec0551b,e253a284029c34f764fc26bb7859298d4ec0551b,Manual timing support.
jknuuttila,2016-04-30 11:55:19,https://api.github.com/repos/google/benchmark/git/commits/dce2ebb40394237f75e577e1a5e2b4dfc20eb006,dce2ebb40394237f75e577e1a5e2b4dfc20eb006,Fixed a warning caused by an implicit narrowing cast.
dominichamon,2016-05-02 19:10:54,https://api.github.com/repos/google/benchmark/git/commits/277e7aafe693e3617c0911bc5defbc0804326cb4,277e7aafe693e3617c0911bc5defbc0804326cb4,"Merge pull request #201 from google/200

Only output optional fields if they're set"
dominichamon,2016-05-02 19:04:16,https://api.github.com/repos/google/benchmark/git/commits/02f409a71f5231bf9b8803e771bdfa1056da23cc,02f409a71f5231bf9b8803e771bdfa1056da23cc,Only output optional fields if they're set
dominichamon,2016-05-02 18:17:36,https://api.github.com/repos/google/benchmark/git/commits/9fa66eb1305a4d12db94e4c7162326ae8aca1eac,9fa66eb1305a4d12db94e4c7162326ae8aca1eac,Merge branch 'NewProggie-feature/add-ms-time-report'
NewProggie,2016-05-02 17:53:45,https://api.github.com/repos/google/benchmark/git/commits/fb733897c5eea5b9a04ebed5cfae37d608262129,fb733897c5eea5b9a04ebed5cfae37d608262129,Remove sleep.h dependency for tests
NewProggie,2016-04-29 19:42:21,https://api.github.com/repos/google/benchmark/git/commits/f352c30f1cc4312760c5d704433945a492276947,f352c30f1cc4312760c5d704433945a492276947,Merge branch 'master' into feature/add-ms-time-report
dominichamon,2016-04-25 16:11:57,https://api.github.com/repos/google/benchmark/git/commits/0500ec0ab877f4eebaefd4ec89a391ed22c95ef2,0500ec0ab877f4eebaefd4ec89a391ed22c95ef2,"Merge pull request #174 from alycm/fix-leak

Close a memory leak in configuration code"
dominichamon,2016-04-20 15:31:33,https://api.github.com/repos/google/benchmark/git/commits/27f8a6231368c679a04f351cf2632ce1f315ed40,27f8a6231368c679a04f351cf2632ce1f315ed40,"Merge pull request #196 from google/iterationdoc

Add section on iterations."
dominichamon,2016-04-19 16:34:13,https://api.github.com/repos/google/benchmark/git/commits/d6f96ed6399bd943be7592e1114bf0ddf64d68b0,d6f96ed6399bd943be7592e1114bf0ddf64d68b0,"Add section on iterations.

Also add some subheadings, and fix up the line lengths.

Fixes #194"
dominichamon,2016-04-18 16:54:56,https://api.github.com/repos/google/benchmark/git/commits/075a8a6fbf90edeb653865657b8caa1854e4e411,075a8a6fbf90edeb653865657b8caa1854e4e411,"Merge pull request #195 from dvyukov/patch-1

Fix SetLabel usage example"
dvyukov,2016-04-18 12:24:13,https://api.github.com/repos/google/benchmark/git/commits/838719dc02d1104153fb4193acea32a64d5559e7,838719dc02d1104153fb4193acea32a64d5559e7,Update benchmark_api.h
NewProggie,2016-03-30 07:14:04,https://api.github.com/repos/google/benchmark/git/commits/1203b3cbe47ad772291fe520efb2a029687229ed,1203b3cbe47ad772291fe520efb2a029687229ed,Fix missing <tuple> header in csv/json_reporter
NewProggie,2016-03-29 20:10:07,https://api.github.com/repos/google/benchmark/git/commits/1043f45bedb5afcd982f4a4b4be716bcabb286f4,1043f45bedb5afcd982f4a4b4be716bcabb286f4,Add explanatory comment why src headers are needed in test/CMakeLists.txt
NewProggie,2016-03-29 18:35:38,https://api.github.com/repos/google/benchmark/git/commits/e6d62fd135d7c1c621ff3b25056bd5ea4d1754ec,e6d62fd135d7c1c621ff3b25056bd5ea4d1754ec,Add GetTimeAndMultiplier to json and csv reporter as well
NewProggie,2016-03-28 19:32:11,https://api.github.com/repos/google/benchmark/git/commits/0b4111c3b31db8806e0c3960c7f1f541b20cdb8b,0b4111c3b31db8806e0c3960c7f1f541b20cdb8b,Refactor GetTimeUnitAndMultiplier and add example
NewProggie,2016-03-25 21:47:27,https://api.github.com/repos/google/benchmark/git/commits/7c69b36078b5773fbd6b09b539a30400138607a7,7c69b36078b5773fbd6b09b539a30400138607a7,Add an additional parameter for time units
NewProggie,2016-03-24 21:34:23,https://api.github.com/repos/google/benchmark/git/commits/3a02c462c795fd60e2620fc78c6f8c5b63aa1764,3a02c462c795fd60e2620fc78c6f8c5b63aa1764,Add myself to the contributors list
NewProggie,2016-03-24 21:18:55,https://api.github.com/repos/google/benchmark/git/commits/cded70a1660e81f854b5d41795a514ec0825c32a,cded70a1660e81f854b5d41795a514ec0825c32a,"Add optional ms time unit for console reporter

Some benchmarks may run a few milliseconds which makes it kind of hard to visually compare, since the currently only available nanoseconds numbers can get very large in this case. Therefore this commit adds an optional command line flag --benchmark_time_unit which lets the user choose between ns and ms time units for displaying the mean execution time."
dominichamon,2016-02-26 01:39:44,https://api.github.com/repos/google/benchmark/git/commits/b2e734087532897b7bb4c51a6b4f503060c9a20f,b2e734087532897b7bb4c51a6b4f503060c9a20f,"Merge pull request #187 from insertinterestingnamehere/libcpp_include_fix

Fix missing include in map_test.cc"
insertinterestingnamehere,2016-02-24 19:31:31,https://api.github.com/repos/google/benchmark/git/commits/0dca953b135d967d1a8d3271718d9729ec026280,0dca953b135d967d1a8d3271718d9729ec026280,"Include cstdlib in map_test to make sure std::rand is available when
building with libc++."
dominichamon,2016-02-24 15:46:44,https://api.github.com/repos/google/benchmark/git/commits/e4ad1afa1f3cb6ba60704878d4964a31784477dc,e4ad1afa1f3cb6ba60704878d4964a31784477dc,"Merge pull request #186 from amin-jabri/multithreaded_Fixture_TearDown

Pass const State to Fixture::TearDown. Fix memory leak in fixture_test"
amin-jabri,2016-02-24 08:36:34,https://api.github.com/repos/google/benchmark/git/commits/53aca9bc7128b7c0cd513163c5432481f12025ee,53aca9bc7128b7c0cd513163c5432481f12025ee,Pass const State to Fixture::TearDown. Fix memory leak in fixture_test
dominichamon,2016-02-17 10:45:59,https://api.github.com/repos/google/benchmark/git/commits/c5b80ff1acd56407b295a5bcb8a2a69d8c87c48e,c5b80ff1acd56407b295a5bcb8a2a69d8c87c48e,"Merge pull request #184 from KindDragon/patch-1

Format json in README.md"
KindDragon,2016-02-16 20:29:24,https://api.github.com/repos/google/benchmark/git/commits/8da907c2c2786685c7da9f4759de052e3990f6f1,8da907c2c2786685c7da9f4759de052e3990f6f1,Update README.md
dominichamon,2016-02-16 10:08:29,https://api.github.com/repos/google/benchmark/git/commits/31e71be77c0f45400628cf618c0360d544a522c5,31e71be77c0f45400628cf618c0360d544a522c5,"Merge pull request #181 from google/map_test

Pass const state to Fixture::SetUp. Add map_test."
dominichamon,2016-02-16 10:08:02,https://api.github.com/repos/google/benchmark/git/commits/7fd3fa8e3c67c550a98e35a6d22962edd8460db9,7fd3fa8e3c67c550a98e35a6d22962edd8460db9,"Merge pull request #182 from buchgr/state_threads

Add number of threads to State."
buchgr,2016-02-15 13:19:43,https://api.github.com/repos/google/benchmark/git/commits/007efee75186d1aa54be7e83e80986e753a2ee44,007efee75186d1aa54be7e83e80986e753a2ee44,"Add number of threads to State.

Having access to the thread count from within a benchmark is useful,
for when one wants to distribute a workload dynamically among the
benchmarks running in parallel e.g when using ThreadRange() or
ThreadPerCpu()."
dominichamon,2016-02-15 11:04:19,https://api.github.com/repos/google/benchmark/git/commits/53068f974c0d69849b6437ffe0d545aec2932309,53068f974c0d69849b6437ffe0d545aec2932309,Pass const state to Fixture::SetUp. Add map_test.
dominichamon,2016-02-14 17:29:40,https://api.github.com/repos/google/benchmark/git/commits/bdb9f697d77bdf399569a3d5872d4c2d12fa458a,bdb9f697d77bdf399569a3d5872d4c2d12fa458a,"Merge pull request #180 from google/release

Add section on optimisations to README"
dominichamon,2016-02-14 17:28:10,https://api.github.com/repos/google/benchmark/git/commits/211f23ee1366cb7dab68c038edd329cdcf15377d,211f23ee1366cb7dab68c038edd329cdcf15377d,Add section on optimisations to README
dominichamon,2016-02-13 21:05:16,https://api.github.com/repos/google/benchmark/git/commits/af489cd4a36e52102246bcd7300290836f13883c,af489cd4a36e52102246bcd7300290836f13883c,"Merge pull request #176 from enh/cycle-timer-aarch64

Add aarch64 support to src/cycleclock.h."
dominichamon,2016-02-13 21:05:09,https://api.github.com/repos/google/benchmark/git/commits/cff1541b0ccc4459284e5851192c0a68717ffbf6,cff1541b0ccc4459284e5851192c0a68717ffbf6,"Merge pull request #177 from enh/cpuinfo-arm

Fix ARM /proc/cpuinfo parsing."
dominichamon,2016-02-13 21:04:57,https://api.github.com/repos/google/benchmark/git/commits/1c4df750c45abf701cc53fc62cc490ec25748fcc,1c4df750c45abf701cc53fc62cc490ec25748fcc,"Merge pull request #175 from KindDragon/master

Support MSVC on appveyor"
KindDragon,2016-02-08 22:48:19,https://api.github.com/repos/google/benchmark/git/commits/9e37d69b23743db226a284ca709a3a89bda30c2d,9e37d69b23743db226a284ca709a3a89bda30c2d,Support MSVC on appveyor
enh-google,2016-02-11 00:13:51,https://api.github.com/repos/google/benchmark/git/commits/930d3af052bcbe7cbea5f6c510cc7eee2c16b79b,930d3af052bcbe7cbea5f6c510cc7eee2c16b79b,"Fix ARM /proc/cpuinfo parsing.

Also fix related warning message typos."
enh-google,2016-02-10 23:48:27,https://api.github.com/repos/google/benchmark/git/commits/d9630aee882b7f36aeca5fb797ebd2a4aea81f03,d9630aee882b7f36aeca5fb797ebd2a4aea81f03,"Add aarch64 support to src/cycleclock.h.

From google3's base/cycleclock."
alycm,2016-02-09 13:08:56,https://api.github.com/repos/google/benchmark/git/commits/a5741100482eb50bb00ac0f8d22198277cd41fa5,a5741100482eb50bb00ac0f8d22198277cd41fa5,"Close a memory leak in configuration code

This was causing configuration failures on address sanitizer builds."
dominichamon,2015-12-30 18:22:39,https://api.github.com/repos/google/benchmark/git/commits/cd525ae85d4a46ecb2e3bdbdd1df101e48c5195e,cd525ae85d4a46ecb2e3bdbdd1df101e48c5195e,"Merge pull request #171 from eliben/update-doc-userealtime

Update README to mention UseRealTime for wallclock time measurements."
eliben,2015-12-30 14:01:19,https://api.github.com/repos/google/benchmark/git/commits/c7ab1b987ba9badeda367145b2e2073fc0ed0d57,c7ab1b987ba9badeda367145b2e2073fc0ed0d57,"Update README to mention UseRealTime for wallclock time measurements.

Also adding a use case in the API header.

Fixes #170"
EricWF,2015-12-14 22:02:30,https://api.github.com/repos/google/benchmark/git/commits/f662e8be5bc9d40640e10b72092780b401612bf2,f662e8be5bc9d40640e10b72092780b401612bf2,Rename OS_MACOSX macro to new name BENCHMARK_OS_MACOSX. Fix #169
dominichamon,2015-11-30 17:50:29,https://api.github.com/repos/google/benchmark/git/commits/0a1f4849a6a6d704036f1189f62ffd7c8f061b06,0a1f4849a6a6d704036f1189f62ffd7c8f061b06,"Merge pull request #166 from disconnect3d/master

Fixes #165: CustomArguments ret type in README"
disconnect3d,2015-11-30 15:15:00,https://api.github.com/repos/google/benchmark/git/commits/d2917bcdeddff6da6cab8a85c77df8ed45060aef,d2917bcdeddff6da6cab8a85c77df8ed45060aef,"Fixes #165: CustomArguments ret type in README

* adds myself to AUTHORS/CONTRIBUTORS"
EricWF,2015-11-06 21:37:50,https://api.github.com/repos/google/benchmark/git/commits/475fc830195d629ae4d136060e60eff498975196,475fc830195d629ae4d136060e60eff498975196,"Merge pull request #162 from RYOBG/add-cstdio

Fixes #159: Add inclusion of cstdio to files using stdout, printf and etc."
ryobg,2015-11-06 18:09:57,https://api.github.com/repos/google/benchmark/git/commits/13a67d20e6d3ae325b9bae2c39ba0401a618ca9f,13a67d20e6d3ae325b9bae2c39ba0401a618ca9f,Add myself to AUTHORS and CONTRIBUTORS as requested wrt Fix #159.
ryobg,2015-11-06 09:03:43,https://api.github.com/repos/google/benchmark/git/commits/a863aead1330bf52d4230667a5aae4b7fa5ef69e,a863aead1330bf52d4230667a5aae4b7fa5ef69e,"Fixes #159: Add inclusion of cstdio to files using stdout, vprintf, printf and etc."
dominichamon,2015-11-05 17:53:08,https://api.github.com/repos/google/benchmark/git/commits/4499e8e415092221febfd3309d5ceae9acc014a0,4499e8e415092221febfd3309d5ceae9acc014a0,Fixes #161
dominichamon,2015-10-29 15:22:31,https://api.github.com/repos/google/benchmark/git/commits/7c8d8c9dd7effb19337277320c3cd0491317d95b,7c8d8c9dd7effb19337277320c3cd0491317d95b,"Merge pull request #157 from guanqun/fix-static-cast

add static_cast to get rid of warnings for intel compiler on linux platform"
guanqun,2015-10-25 12:43:27,https://api.github.com/repos/google/benchmark/git/commits/65cd2bac6c5d1400c1a4014f8636484c03019875,65cd2bac6c5d1400c1a4014f8636484c03019875,add static_cast to get rid of warnings for intel compiler on linux platform
dominichamon,2015-10-19 17:06:44,https://api.github.com/repos/google/benchmark/git/commits/87ab54ad6a728e5ff14a8d44108bbb4792195eac,87ab54ad6a728e5ff14a8d44108bbb4792195eac,"Merge pull request #156 from Zbyl/fix-getgitversion

Fix get_git_version to use GIT_EXECUTABLE."
Zbyl,2015-10-18 00:13:37,https://api.github.com/repos/google/benchmark/git/commits/cd2e633fe5527020801a7198ecd096bf72ef33d1,cd2e633fe5527020801a7198ecd096bf72ef33d1,"Fix get_git_version to use GIT_EXECUTABLE.

get_git_version CMake function uses 'git' command directly, instead of
GIT_EXECUTABLE variable. This causes CMake errors while generating
project files in environments, where 'git' command is not present
in PATH."
dominichamon,2015-10-13 19:02:08,https://api.github.com/repos/google/benchmark/git/commits/559c71d840876783e071569b5e6a3863a8c44ae3,559c71d840876783e071569b5e6a3863a8c44ae3,Added IRC channel to README.md
dominichamon,2015-10-12 16:55:02,https://api.github.com/repos/google/benchmark/git/commits/9b84ead0fb510b709fcd3f11fcf13f2112d75ac3,9b84ead0fb510b709fcd3f11fcf13f2112d75ac3,"Merge pull request #148 from DiracResearch/cmake-git-fix

Fixes #144  CMake fails without Git"
dominichamon,2015-10-12 16:50:01,https://api.github.com/repos/google/benchmark/git/commits/90e7cf000e0b7c62a13569fac481e514b6367d23,90e7cf000e0b7c62a13569fac481e514b6367d23,Update macro names in comments.
dominichamon,2015-10-12 16:16:25,https://api.github.com/repos/google/benchmark/git/commits/3c83ed5b47c55965fbd64a93ec365792c2b395c6,3c83ed5b47c55965fbd64a93ec365792c2b395c6,"Merge pull request #149 from DiracResearch/android-fix

Android fix"
anton-dirac,2015-10-09 07:09:14,https://api.github.com/repos/google/benchmark/git/commits/8c71c307ac4a78b6ad15cbb009d9e656de03194b,8c71c307ac4a78b6ad15cbb009d9e656de03194b,Fixed OS macros changed in previous pull request.
anton-dirac,2015-10-09 07:05:19,https://api.github.com/repos/google/benchmark/git/commits/a2f2a28b315248e9bd8651cb1cfc0d4d69c425af,a2f2a28b315248e9bd8651cb1cfc0d4d69c425af,Changed date format to ISO 8601.
anton-dirac,2015-10-09 07:00:42,https://api.github.com/repos/google/benchmark/git/commits/032c190c4a38697d6d92ec905e43e5c0c3933a71,032c190c4a38697d6d92ec905e43e5c0c3933a71,Removed newline.
anton-dirac,2015-10-08 09:52:49,https://api.github.com/repos/google/benchmark/git/commits/7e9800e78aa2da840d6e68e53afa650e91f13009,7e9800e78aa2da840d6e68e53afa650e91f13009,Added a comment why std::vsnprintf is not used.
anton-dirac,2015-10-08 09:43:45,https://api.github.com/repos/google/benchmark/git/commits/c8f4690fd42c0a90d5afc3fd0a23124427f16322,c8f4690fd42c0a90d5afc3fd0a23124427f16322,Sorted include of headers.
anton-dirac,2015-10-07 07:12:56,https://api.github.com/repos/google/benchmark/git/commits/6abd53777bf013d5bf6bab2cd1ddce78c3b5b9ad,6abd53777bf013d5bf6bab2cd1ddce78c3b5b9ad,"Use stringstream instead of atoi to avoid sign error.

The sane thing here would be to use std::stoul but this is not available in the android-ndk..."
anton-dirac,2015-10-05 08:43:06,https://api.github.com/repos/google/benchmark/git/commits/df0df4aba9d5997cdcddcec351ed5b5af180bb88,df0df4aba9d5997cdcddcec351ed5b5af180bb88,"Fixed tests so they build on android.

- Added missing header to test/benchmark_test.cc
- Changed std::stoul to std::atol in test/filter_test.cc because of a
  limitation in the android-ndk (http://stackoverflow.com/questions/17950814/how-to-use-stdstoul-and-stdstoull-in-android)"
anton-dirac,2015-10-05 08:24:12,https://api.github.com/repos/google/benchmark/git/commits/0d35f5f68a545a1eddd36dab930c250765298e25,0d35f5f68a545a1eddd36dab930c250765298e25,"Only include ""sys/sysctl.h"" if it is needed.

sys/sysctl.h is not available in the android-ndk."
anton-dirac,2015-10-05 08:07:29,https://api.github.com/repos/google/benchmark/git/commits/c1e03a4b58b79bcffa880e897588272d3f6ac05a,c1e03a4b58b79bcffa880e897588272d3f6ac05a,"Changed ""std::vsnprintf"" to ""vsnprintf"" to be able to build with the android-ndk."
anton-dirac,2015-10-05 07:20:37,https://api.github.com/repos/google/benchmark/git/commits/aecd746691918e5f6333e94dff57015d2d238525,aecd746691918e5f6333e94dff57015d2d238525,"Added include of cstdlib needed for strtol, strtod and getenv."
dominichamon,2015-10-08 18:22:28,https://api.github.com/repos/google/benchmark/git/commits/f7022075e05642109bc2880771e8c9b0c87449de,f7022075e05642109bc2880771e8c9b0c87449de,"Merge pull request #152 from mdavezac/master

Fixes compilation issue on Macs"
dominichamon,2015-10-08 17:06:01,https://api.github.com/repos/google/benchmark/git/commits/e2327733e6582b3e1bb3b6255e87676a83619ba7,e2327733e6582b3e1bb3b6255e87676a83619ba7,"Merge pull request #150 from DiracResearch/visual-studio-warnings-fix

Visual studio warnings fix"
anton-dirac,2015-10-05 13:26:03,https://api.github.com/repos/google/benchmark/git/commits/9195fd07d686c437787accde8cc66389b04b0a98,9195fd07d686c437787accde8cc66389b04b0a98,"Revert ""Added Wconversion so the gcc/clang warnings will be more similar to W4 on MSVC.""

This reverts commit 0a2bd8935391e42f2581ec4826f7ac5f8fc9041a."
anton-dirac,2015-10-05 13:02:08,https://api.github.com/repos/google/benchmark/git/commits/5cced076d2385895f9cf052ac0bc4a88cf786625,5cced076d2385895f9cf052ac0bc4a88cf786625,Fixed int to char warning.
anton-dirac,2015-10-05 12:59:15,https://api.github.com/repos/google/benchmark/git/commits/0a8e0dbb0bff14479da3fbd779afa398caaeae4b,0a8e0dbb0bff14479da3fbd779afa398caaeae4b,"Added Wconversion so the gcc/clang warnings will be more similar to W4 on MSVC.

This also points out some important issues like:
warning: conversion to 'size_t {aka unsigned int}' from 'long long int' may alter its value [-Wconversion]
   state.SetBytesProcessed(items_processed * sizeof(v));
This occurs on 32 bit systems where size_t is only 32 bits."
anton-dirac,2015-10-05 12:51:56,https://api.github.com/repos/google/benchmark/git/commits/fcf4e99e019cc1a44ab7e0bbe90054f0384c788a,fcf4e99e019cc1a44ab7e0bbe90054f0384c788a,Use IsWindowsXPOrGreater instead of the deprecated GetVersionEx.
anton-dirac,2015-10-05 12:38:07,https://api.github.com/repos/google/benchmark/git/commits/e605cb0802f97cab812939752b327cb72a8ab357,e605cb0802f97cab812939752b327cb72a8ab357,"Changed ""while(true)"" to ""for(;;)"" to avoid warning in visual studio."
anton-dirac,2015-10-05 12:36:09,https://api.github.com/repos/google/benchmark/git/commits/53b1896c534ff6c643f4bfe4a2349bf80dfa5630,53b1896c534ff6c643f4bfe4a2349bf80dfa5630,Added _CRT_SECURE_NO_WARNINGS under MSVC.
anton-dirac,2015-10-05 12:31:56,https://api.github.com/repos/google/benchmark/git/commits/2589e69e0564269b4bebe55f7e82cd8bed4032a3,2589e69e0564269b4bebe55f7e82cd8bed4032a3,Fixed double to float warning.
anton-dirac,2015-10-05 12:26:31,https://api.github.com/repos/google/benchmark/git/commits/e7f6c42a793e3736398f19740cc341fed177253a,e7f6c42a793e3736398f19740cc341fed177253a,"Fixed bug in ""ToExponentAndMantissa"" when negative exponents where created.

Unary minus where applied to an unsigned type."
anton-dirac,2015-10-05 12:05:06,https://api.github.com/repos/google/benchmark/git/commits/a822c716552f87551ee1d65b6f3229f49d39d7df,a822c716552f87551ee1d65b6f3229f49d39d7df,"Removed default constructor, copy constructor and assignment operator for CheckHandler."
anton-dirac,2015-10-05 12:00:20,https://api.github.com/repos/google/benchmark/git/commits/96ca9a7aba12e919c82ea06c0ce89cc86a724b2c,96ca9a7aba12e919c82ea06c0ce89cc86a724b2c,Fixed int64 to double cast warning.
anton-dirac,2015-10-05 11:58:35,https://api.github.com/repos/google/benchmark/git/commits/ba141ac0d9f2042c73f57fcf870f2a69030fa8da,ba141ac0d9f2042c73f57fcf870f2a69030fa8da,Renamed the internal os macros to avoid a name clash in Shlwapi.h where OS_WINDOWS is defined to 0.
anton-dirac,2015-10-05 11:42:14,https://api.github.com/repos/google/benchmark/git/commits/02440964e8e09bd58a70973b9ee4f8f1059246d7,02440964e8e09bd58a70973b9ee4f8f1059246d7,Changed MSVC warnings from Wall to W4 to avoid 10000+ warnings from stl/windows headers.
ulvgard,2015-10-07 15:28:00,https://api.github.com/repos/google/benchmark/git/commits/c06da04bcf28237a803fae1445e7589a4d5f6cd7,c06da04bcf28237a803fae1445e7589a4d5f6cd7,Adds Dirac Research and me as Author and Contributor
dominichamon,2015-10-06 16:23:47,https://api.github.com/repos/google/benchmark/git/commits/406c2049a37b0833d2e3d2add53b21caba232687,406c2049a37b0833d2e3d2add53b21caba232687,"Merge pull request #151 from izaid/clang-fix

Fix for Ubuntu & Clang & C++14"
ulvgard,2015-10-02 15:05:58,https://api.github.com/repos/google/benchmark/git/commits/775ef51d04f3281b1b2ea857d7862470069aaf6a,775ef51d04f3281b1b2ea857d7862470069aaf6a,CMake check for git on the system
dominichamon,2015-10-02 19:06:11,https://api.github.com/repos/google/benchmark/git/commits/414941295ee56ee0824f53070d4bec6b8b989038,414941295ee56ee0824f53070d4bec6b8b989038,"Merge pull request #146 from efcs/fix-iteration-type

Fix issue #141. Use size_t instead of int for the iteration count"
EricWF,2015-10-02 00:46:39,https://api.github.com/repos/google/benchmark/git/commits/3dd14f07241ab52484dd14fb8427042c07c6cccc,3dd14f07241ab52484dd14fb8427042c07c6cccc,Make the type of kMaxIterations consistent with the type of the iteration count
EricWF,2015-10-01 21:08:44,https://api.github.com/repos/google/benchmark/git/commits/ed0a2eb7411da5650551088905d13ed941b21e69,ed0a2eb7411da5650551088905d13ed941b21e69,use size_t instead of int for the iteration count
EricWF,2015-10-01 21:05:39,https://api.github.com/repos/google/benchmark/git/commits/cf40a0f1172afc061e910eb5590f71e6ffdece66,cf40a0f1172afc061e910eb5590f71e6ffdece66,"Merge pull request #136 from efcs/remove-check

Remove std::is_trivially_destructible assertion. Fix issue #134."
EricWF,2015-10-01 20:53:46,https://api.github.com/repos/google/benchmark/git/commits/bcb933a9fbaed88b222dd7abd27c50aa82df387b,bcb933a9fbaed88b222dd7abd27c50aa82df387b,dynamically allocate WallTimeImp
EricWF,2015-10-01 20:52:46,https://api.github.com/repos/google/benchmark/git/commits/e0441ef5d0e5c4b405bcddb5e42c933f07031ec4,e0441ef5d0e5c4b405bcddb5e42c933f07031ec4,Merge branch 'master' into remove-check
dominichamon,2015-09-30 20:31:59,https://api.github.com/repos/google/benchmark/git/commits/eeaec441a742025dfad555fc6822163642f0c4a3,eeaec441a742025dfad555fc6822163642f0c4a3,"Merge pull request #143 from devjgm/master

Updates Initialize() to work with an argv as 'char**'"
devjgm,2015-09-30 20:14:50,https://api.github.com/repos/google/benchmark/git/commits/2463339d0b76953eb1d1183a927c5c40bb5c3c30,2463339d0b76953eb1d1183a927c5c40bb5c3c30,Updates Initialize() to work with an argv as 'char**'
dominichamon,2015-09-30 17:23:57,https://api.github.com/repos/google/benchmark/git/commits/7583ed936306a96e5385c4cdcb307946be24c2bb,7583ed936306a96e5385c4cdcb307946be24c2bb,"Merge pull request #137 from jll63/jleroy/vs2013-compatibility

Jleroy/vs2013 compatibility"
jll63,2015-09-25 13:37:03,https://api.github.com/repos/google/benchmark/git/commits/11042c7fe7ae4b6c4e5653db2639d6551fee9b7d,11042c7fe7ae4b6c4e5653db2639d6551fee9b7d,"Remove unused FormatKV(..., size_t) overload."
dominichamon,2015-09-23 20:12:20,https://api.github.com/repos/google/benchmark/git/commits/fcf8860e6acea05cdb1c503ebbbb479424cbde8a,fcf8860e6acea05cdb1c503ebbbb479424cbde8a,"Merge pull request #140 from eliben/fix-custom-arguments-return

Fix documentation comment in benchmark_api.h w.r.t CustomArguments"
eliben,2015-09-23 18:44:26,https://api.github.com/repos/google/benchmark/git/commits/1dd40c99c092e16488387c3409a6f8600a406d00,1dd40c99c092e16488387c3409a6f8600a406d00,Custom arguments function usage with Apply - fix doc and add test.
dominichamon,2015-09-18 15:23:25,https://api.github.com/repos/google/benchmark/git/commits/6319252533556be18cb54223c16762f182d157b9,6319252533556be18cb54223c16762f182d157b9,"Merge pull request #139 from eliben/master

Fix doc sample typos in header and README"
eliben,2015-09-18 03:14:10,https://api.github.com/repos/google/benchmark/git/commits/f338ce7965ab7b90bd8f69a981b8386ab8b54dc5,f338ce7965ab7b90bd8f69a981b8386ab8b54dc5,"Fix doc sample typos in header and README

* iterations() is a method
* int64_t fix in a couple of places"
jll63,2015-09-08 19:18:43,https://api.github.com/repos/google/benchmark/git/commits/0f5503e9a2f021014d7088eeb229356e95b80a2b,0f5503e9a2f021014d7088eeb229356e95b80a2b,Address Dominic's (stylistic) remarks.
EricWF,2015-09-08 01:33:23,https://api.github.com/repos/google/benchmark/git/commits/a69f566e0a7a20245b35b15d000f7768176e6066,a69f566e0a7a20245b35b15d000f7768176e6066,Remove std::is_trivially_destructible assertion because the trait may not be provided by the STL.
jll63,2015-06-29 21:31:52,https://api.github.com/repos/google/benchmark/git/commits/5ec78d7d443e67d4d50adf09d4230cf26c3dffde,5ec78d7d443e67d4d50adf09d4230cf26c3dffde,Do not CpuScalingEnabled on Windows.
jll63,2015-04-13 19:03:51,https://api.github.com/repos/google/benchmark/git/commits/cf830f731f95db76bf8872f66e6aaf6e930cd639,cf830f731f95db76bf8872f66e6aaf6e930cd639,Fix division in CPU usage calculation on Windows.
jll63,2015-04-13 19:03:27,https://api.github.com/repos/google/benchmark/git/commits/2cf277b6f65d882cc8d3010fc1c91deb5edb32ba,2cf277b6f65d882cc8d3010fc1c91deb5edb32ba,Iterations declared as size_t but printf'ed as a long long. Make it a long long.
jll63,2015-04-13 17:45:16,https://api.github.com/repos/google/benchmark/git/commits/d49516bc99e4c4f6e844757ba9573abffed04c37,d49516bc99e4c4f6e844757ba9573abffed04c37,Make it compile with Visual Studio 2013.
jll63,2015-04-13 17:44:49,https://api.github.com/repos/google/benchmark/git/commits/693967fe190e92448d55f39a07e80d435185f0a8,693967fe190e92448d55f39a07e80d435185f0a8,Remove unnecessary `typename'.
dominichamon,2015-08-07 18:21:47,https://api.github.com/repos/google/benchmark/git/commits/47c304536efcc06851cba318ac1b239e1e97430c,47c304536efcc06851cba318ac1b239e1e97430c,Fix #133. Comment now contains compilable code.
dominichamon,2015-06-18 17:34:03,https://api.github.com/repos/google/benchmark/git/commits/fdd99b12a8805a5523f7652b954c4d04ff4738f8,fdd99b12a8805a5523f7652b954c4d04ff4738f8,trailing whitespace
EricWF,2015-06-16 14:31:45,https://api.github.com/repos/google/benchmark/git/commits/3e1dbc81f4be86b255465e9dd89510a50c02bc95,3e1dbc81f4be86b255465e9dd89510a50c02bc95,"Merge pull request #130 from umireon/sysinfo-macosx-illegal-nullptr

Fix the compilation error against G++ on Mac OS X."
umireon,2015-06-16 13:45:57,https://api.github.com/repos/google/benchmark/git/commits/f72d24942ac4e85379409b6ec315cdb63779932e,f72d24942ac4e85379409b6ec315cdb63779932e,Add Kaito Udagawa to AUTHORS and CONTRIBUTORS
umireon,2015-06-13 10:34:20,https://api.github.com/repos/google/benchmark/git/commits/72ce39de3e428decfb1d29aa33ea81e0386c4441,72ce39de3e428decfb1d29aa33ea81e0386c4441,"Fix the compilation error against G++ on Mac OS X.

Using `0` as a null pointer is illegal when `-Wzero-as-null-pointer-constant`
is given to G++.  To avoid the warning `zero-as-null-pointer-constant`,
`nullptr` (C++11 keyword) instead of `0` is used in the `sysctl` invocation."
dominichamon,2015-06-08 16:23:04,https://api.github.com/repos/google/benchmark/git/commits/d60945ac432c5e981f4bcfaeb27891ef3b50e10b,d60945ac432c5e981f4bcfaeb27891ef3b50e10b,"Merge pull request #128 from myd7349/master

Fix issue #127"
myd7349,2015-06-05 01:25:11,https://api.github.com/repos/google/benchmark/git/commits/9afa6c986c978c8f649073e914bc8f212645d6bf,9afa6c986c978c8f649073e914bc8f212645d6bf,Fix issue #127
dominichamon,2015-05-22 21:46:11,https://api.github.com/repos/google/benchmark/git/commits/f6c2ea7fef6ba01f405e2c078cba9f58edfca966,f6c2ea7fef6ba01f405e2c078cba9f58edfca966,"Merge pull request #125 from dcoeurjo/cmakeEmptybuildtype

Fixing cmake issue with empty cmake_build_type"
dcoeurjo,2015-05-22 21:15:19,https://api.github.com/repos/google/benchmark/git/commits/68e69213e76ab1b3acf65db00253face9312e235,68e69213e76ab1b3acf65db00253face9312e235,Fixing cmake issue with empty cmake_build_type
dominichamon,2015-05-13 16:40:03,https://api.github.com/repos/google/benchmark/git/commits/d18ebcb99a8ac64a9af280e65b33a539e23de4d7,d18ebcb99a8ac64a9af280e65b33a539e23de4d7,"Merge pull request #122 from mattyclarkson/coverage

Coverage"
mattyclarkson,2015-05-12 15:17:38,https://api.github.com/repos/google/benchmark/git/commits/ef479921251d6104ca590ddf0d85c331fdbf803a,ef479921251d6104ca590ddf0d85c331fdbf803a,Added coveralls support
mattyclarkson,2015-05-05 11:13:20,https://api.github.com/repos/google/benchmark/git/commits/344775db633aef502a1ec9be967a2730a1e0c631,344775db633aef502a1ec9be967a2730a1e0c631,Enable strict aliasing warnings
mattyclarkson,2015-04-30 13:28:04,https://api.github.com/repos/google/benchmark/git/commits/36c1eb6975827e89a906e2dae90e92ee4a0f2bfb,36c1eb6975827e89a906e2dae90e92ee4a0f2bfb,"Coverage support with LCOV and GCOV

This patch adds a `coverage` target that allows coverage statisitics to be
retrieved for the project. It requires that lcov and gcov is installed and
that the generator is unix makefiles but this can be improved upon in
future releases.

To make it work use the coverage build type:

```
cmake -DCMAKE_BUILD_TYPE=Coverage .
make coverage
```"
dominichamon,2015-05-12 18:32:44,https://api.github.com/repos/google/benchmark/git/commits/d8c7605341e1a9f9ca6cabd26b0145da29f2a6f8,d8c7605341e1a9f9ca6cabd26b0145da29f2a6f8,Update README.md
mattyclarkson,2015-04-30 13:40:37,https://api.github.com/repos/google/benchmark/git/commits/3314aa43c215b1543a8d0330af4954f0c29792ae,3314aa43c215b1543a8d0330af4954f0c29792ae,"Allow the user to set the C++ standard to use

This is useful to test the library at different standard levels. Currently
doesn't search for C++14 in 'auto' mode. Can enable in the future"
mattyclarkson,2015-04-30 13:31:50,https://api.github.com/repos/google/benchmark/git/commits/8b5016034f2ffa04dbf75718d7fdd8bb20a933f5,8b5016034f2ffa04dbf75718d7fdd8bb20a933f5,Ignore tests
mattyclarkson,2015-04-30 13:14:27,https://api.github.com/repos/google/benchmark/git/commits/e44ee2d0054e2f314eef8f135de599aad651ecac,e44ee2d0054e2f314eef8f135de599aad651ecac,Group common C++ flags
mattyclarkson,2015-04-30 13:10:52,https://api.github.com/repos/google/benchmark/git/commits/bb23a9b9f2c32a1557378fd2234273e705789eb9,bb23a9b9f2c32a1557378fd2234273e705789eb9,"Compile with link time optimisation

Can provide speed improvements"
dominichamon,2015-05-11 19:34:03,https://api.github.com/repos/google/benchmark/git/commits/375e66c825c8ba043ea3a1df13e4ad1871741a7c,375e66c825c8ba043ea3a1df13e4ad1871741a7c,Update README.md
mattyclarkson,2015-04-30 13:10:06,https://api.github.com/repos/google/benchmark/git/commits/7418bbbbacaeebaac4281da075440756ea2c778f,7418bbbbacaeebaac4281da075440756ea2c778f,"Only warn on errors in release mode

This improves development iterations when working in debug mode as you
don't have to fix up warnings to get the code to compile. Once a feature
is complete you can then run a release build and fix up all the warnings."
mattyclarkson,2015-04-30 13:04:28,https://api.github.com/repos/google/benchmark/git/commits/fc883f674202353d659c13d5f0d7f8ecf5c020dd,fc883f674202353d659c13d5f0d7f8ecf5c020dd,"Improve the CMake C++ flag checker

This checks the flag on the compiler AND linker which allows it to work
with flags such as -flto and -fsanitize=address"
EricWF,2015-04-06 23:38:16,https://api.github.com/repos/google/benchmark/git/commits/d51ba32791ac95437e209abfb651bc6d30c61b8b,d51ba32791ac95437e209abfb651bc6d30c61b8b,"Merge pull request #120 from google/benchmark-fixtures

Add ability to use benchmark fixtures"
EricWF,2015-04-06 23:04:12,https://api.github.com/repos/google/benchmark/git/commits/9c25a67c1ab4e49cd813fe6afd28ca0d9e1b0c2d,9c25a67c1ab4e49cd813fe6afd28ca0d9e1b0c2d,address more review comments
EricWF,2015-04-06 21:56:05,https://api.github.com/repos/google/benchmark/git/commits/9ed538f511de5edaceecc9996e86e4d019b8c9c5,9ed538f511de5edaceecc9996e86e4d019b8c9c5,address review comments
EricWF,2015-04-06 21:00:06,https://api.github.com/repos/google/benchmark/git/commits/12f440587039ab52adfedf245a6f9d81eb889ec5,12f440587039ab52adfedf245a6f9d81eb889ec5,add ability to use benchmark filters
dominichamon,2015-04-03 20:35:00,https://api.github.com/repos/google/benchmark/git/commits/2b954213f9f6cc547326f1595a522b5e50dfbefd,2b954213f9f6cc547326f1595a522b5e50dfbefd,Merge branch 'geoffromer-cmake-patch'
dominichamon,2015-04-03 20:33:54,https://api.github.com/repos/google/benchmark/git/commits/1e0ed3a21cee0b1d7b634dd9632d26fb4e41aebc,1e0ed3a21cee0b1d7b634dd9632d26fb4e41aebc,Rearrange the pieces
geoffromer,2015-04-02 22:24:48,https://api.github.com/repos/google/benchmark/git/commits/dcb1a3dad44240a6c07118c9fb6a4ae0cca285ff,dcb1a3dad44240a6c07118c9fb6a4ae0cca285ff,"Drop down to CMake 2.8.11, and drop INTERFACE since that version doesn't
support it."
geoffromer,2015-04-02 22:00:22,https://api.github.com/repos/google/benchmark/git/commits/3078ce9bc5dc3d594dd1b1009cbf365495901b0f,3078ce9bc5dc3d594dd1b1009cbf365495901b0f,Link pthread as an INTERFACE library.
geoffromer,2015-04-02 21:35:59,https://api.github.com/repos/google/benchmark/git/commits/89a1edae15aa1662205e77c63ab9acb31488a6bb,89a1edae15aa1662205e77c63ab9acb31488a6bb,"Require cmake 2.8.12 in order to support target_include_directories, and
simplify thread linking logic."
geoffromer,2015-04-02 16:15:49,https://api.github.com/repos/google/benchmark/git/commits/a6ad799a4d26c4ed54bb1a90c1ae664e0767e6f6,a6ad799a4d26c4ed54bb1a90c1ae664e0767e6f6,"Configure 'benchmark' cmake target so that when other targets depend on it,
they get the appropriate include directories and link libraries automatically."
dominichamon,2015-04-03 20:29:12,https://api.github.com/repos/google/benchmark/git/commits/42d2b8d11a1080a1373c14185f752104ce721641,42d2b8d11a1080a1373c14185f752104ce721641,"Merge pull request #118 from davidreynolds/master

Fix typos: rangeY -> range_y()"
EricWF,2015-04-03 18:43:42,https://api.github.com/repos/google/benchmark/git/commits/818c9fcc2fa6bfb91daba46df4bbfa958ba18261,818c9fcc2fa6bfb91daba46df4bbfa958ba18261,Upgrade travis to use CMake 2.8.12 and add Clang builders
davidreynolds,2015-04-03 01:34:52,https://api.github.com/repos/google/benchmark/git/commits/30ae37b923329a943146a2b147a1a926bf2cd899,30ae37b923329a943146a2b147a1a926bf2cd899,Fix typos: rangeY -> range_y()
EricWF,2015-04-02 17:32:18,https://api.github.com/repos/google/benchmark/git/commits/bf063941d4f44ffa4ec4b5fb9977b280026335f6,bf063941d4f44ffa4ec4b5fb9977b280026335f6,Print information about travis enviroment
EricWF,2015-04-01 17:45:12,https://api.github.com/repos/google/benchmark/git/commits/bf58a90067812688c9648a520856a16e6c469fff,bf58a90067812688c9648a520856a16e6c469fff,"Merge pull request #115 from google/build-shared

Remove BENCHMARK_ENABLE_SHARED and prefer BUILD_SHARED_LIBS"
EricWF,2015-04-01 15:40:22,https://api.github.com/repos/google/benchmark/git/commits/8fcfa81d51ea54848462156da6c0e6da965268d6,8fcfa81d51ea54848462156da6c0e6da965268d6,Fix comment about linking threading
EricWF,2015-04-01 15:34:38,https://api.github.com/repos/google/benchmark/git/commits/8bb991d099e75900bd1fb60cc79032b0e9ead39e,8bb991d099e75900bd1fb60cc79032b0e9ead39e,Remove BENCHMARK_ENABLE_SHARED and prefer BUILD_SHARED_LIBS
dominichamon,2015-04-01 14:51:37,https://api.github.com/repos/google/benchmark/git/commits/9934396e1ff0cc64943a3af94ef35e01f27d25da,9934396e1ff0cc64943a3af94ef35e01f27d25da,Add missing paranthesis and documentation
dominichamon,2015-04-01 14:23:08,https://api.github.com/repos/google/benchmark/git/commits/738bd82b35339f72aa89db2685db9c6a297f7665,738bd82b35339f72aa89db2685db9c6a297f7665,"Merge pull request #113 from mattyclarkson/install-fix

Libraries are treated as runtime objects on Windows"
mattyclarkson,2015-04-01 09:57:08,https://api.github.com/repos/google/benchmark/git/commits/d676c5b375ecb143410ce4a8a9b6dd86b035b40d,d676c5b375ecb143410ce4a8a9b6dd86b035b40d,"Libraries are treated as runtime objects on Windows

When the library is created as a *.dll on Windows it is treated like a
runtime object so we must proivde the destination for the runtime
objects in our install command"
dominichamon,2015-03-31 19:32:36,https://api.github.com/repos/google/benchmark/git/commits/6674744639b459be0c0e5b4e9a7c0d2e5deb0535,6674744639b459be0c0e5b4e9a7c0d2e5deb0535,"Merge pull request #111 from google/buildtype_log

Clarify build type warning"
dominichamon,2015-03-31 18:40:46,https://api.github.com/repos/google/benchmark/git/commits/25e46848f9d584261d5960ce9394a565f58aa070,25e46848f9d584261d5960ce9394a565f58aa070,Clarify build type warning
EricWF,2015-03-31 18:16:58,https://api.github.com/repos/google/benchmark/git/commits/006d23ccca1375a973b7fae0cc351cedb41b812a,006d23ccca1375a973b7fae0cc351cedb41b812a,"Merge pull request #108 from google/list-tests

Add --benchmark_list_tests option and change filter to match generated name."
EricWF,2015-03-31 17:28:41,https://api.github.com/repos/google/benchmark/git/commits/ba1becca1aa1f89281b823a2cc6282b3c553b1f3,ba1becca1aa1f89281b823a2cc6282b3c553b1f3,Add braces for one line conditionals and loops
dominichamon,2015-03-31 13:49:56,https://api.github.com/repos/google/benchmark/git/commits/65ed470c0f5e340723da76c1b7a1eee7c0ac798a,65ed470c0f5e340723da76c1b7a1eee7c0ac798a,"Merge pull request #64 from mattyclarkson/nt

MinGW support"
mattyclarkson,2015-03-30 16:18:43,https://api.github.com/repos/google/benchmark/git/commits/36d7dc67c167a199774180928903cf3c72a438e0,36d7dc67c167a199774180928903cf3c72a438e0,"appveyor configuration file

This file provides scripting to build the benchmark library in the cloud
on the appveyor build system. It provides a matrix of configurations to
cover as many possibilities as it can. Eventually MSVC can be added to the
matrix to provide coverage of the Visual Studio solutions."
mattyclarkson,2015-03-30 13:28:27,https://api.github.com/repos/google/benchmark/git/commits/60910b3de7aa85ff28da14f34c7084711f99ac74,60910b3de7aa85ff28da14f34c7084711f99ac74,"Added a script that can download MinGW

The python script provides a method to get the repository of mingw-builds
gcc compilers and download one of them. This is useful for providing a
matrix of compilations on appveyor.

The versions of compilers are seperated by multiple things:

  - version
  - threading model
  - exception model
  - revision

All four of those things need to be matched if using the libraries built
by MinGW. The script allows you to specify all of those variations. If
a variation isn't defined it picks the most common or latest settings.

For example, if the version isn't specified the latest will be selected
and if the exception model isn't defined then the zero exception model
(seh) will be selected if available."
mattyclarkson,2015-03-30 11:37:22,https://api.github.com/repos/google/benchmark/git/commits/b35b581e7606e14ee142f5a56fd2481db445ee17,b35b581e7606e14ee142f5a56fd2481db445ee17,Ignore windows shared libraries
mattyclarkson,2015-03-30 10:55:24,https://api.github.com/repos/google/benchmark/git/commits/07de09c94c4db5dbbe5b6a644f263cf57da33e0a,07de09c94c4db5dbbe5b6a644f263cf57da33e0a,Ignore python compiled files
mattyclarkson,2014-11-03 14:28:17,https://api.github.com/repos/google/benchmark/git/commits/b2a43b491caa283a136637225b88d05a2a17434e,b2a43b491caa283a136637225b88d05a2a17434e,"NT definition of MyCPUUsage and ChildrenCPUUsage

The children CPU usage doesn't seem to have a equivalent on NT systems
so it just returns zero."
mattyclarkson,2015-03-27 13:39:11,https://api.github.com/repos/google/benchmark/git/commits/05eb1f254509f8dcddb0e487eca029f38dbfc4e4,05eb1f254509f8dcddb0e487eca029f38dbfc4e4,"Use `int64_t` rather than `int64`

For cross platform and cross compiler portability we use the
standard integer type for a 64-bit integer. MinGW on Windows doesn't
have the definition for `int64`."
mattyclarkson,2015-03-27 13:38:13,https://api.github.com/repos/google/benchmark/git/commits/65a5ebd638d927a2d443c9fa98816ee6adbc445a,65a5ebd638d927a2d443c9fa98816ee6adbc445a,Use the WINAPI `Sleep` function
mattyclarkson,2014-11-03 14:18:15,https://api.github.com/repos/google/benchmark/git/commits/6bc54ba028df7b22cd57edbc353a2102387d4629,6bc54ba028df7b22cd57edbc353a2102387d4629,"Use CMake to link Shlwapi on Windows

We use the SHGetValueA on Windows to retrieve the MHz of the processor
but this requires the shlwapi library. Previous to this patch the
library was linked with a MSVC specific pragma but there is no
guarantee that on Windows we will be using MSVC. Therefore, it is much
compile agnostic to use the standard CMAKE library linking mechanism
to provide the definition of SHGetValueA"
mattyclarkson,2015-03-27 13:41:50,https://api.github.com/repos/google/benchmark/git/commits/dd61391c5d92353c69f2789d0dabbd3311fb2564,dd61391c5d92353c69f2789d0dabbd3311fb2564,Only include the correct platform headers
mattyclarkson,2015-03-27 13:14:10,https://api.github.com/repos/google/benchmark/git/commits/6880244eea8b3afb97f95bfd7b113328e1e541fc,6880244eea8b3afb97f95bfd7b113328e1e541fc,Added windows executables to the ignore list
EricWF,2015-03-31 04:05:02,https://api.github.com/repos/google/benchmark/git/commits/e97a96f9e723bd7bbd239d205132f9462518b332,e97a96f9e723bd7bbd239d205132f9462518b332,redo filter test
EricWF,2015-03-31 03:32:37,https://api.github.com/repos/google/benchmark/git/commits/12f1c5f4711af35d768aa81a5137ccd15558305d,12f1c5f4711af35d768aa81a5137ccd15558305d,add list test internals
EricWF,2015-03-31 02:14:08,https://api.github.com/repos/google/benchmark/git/commits/805145847bc310cb4b54363b610d2f3a86fdd5e8,805145847bc310cb4b54363b610d2f3a86fdd5e8,add workaround to DoNotOptimize(...) for clang inline assembly bug.
dominichamon,2015-03-30 21:45:10,https://api.github.com/repos/google/benchmark/git/commits/b5dd1506d87e25632706d5f3520b8a2759519756,b5dd1506d87e25632706d5f3520b8a2759519756,"Merge pull request #107 from google/csv

Introduce CSV reporter"
dominichamon,2015-03-30 17:41:22,https://api.github.com/repos/google/benchmark/git/commits/2924aaa747cbf737d448dc67ba6ec32c50cf5a13,2924aaa747cbf737d448dc67ba6ec32c50cf5a13,Deal with names with embedded quotes
dominichamon,2015-03-27 21:08:46,https://api.github.com/repos/google/benchmark/git/commits/b6e4f67d75027c9b67ff1d67da4fd12b8ee996b1,b6e4f67d75027c9b67ff1d67da4fd12b8ee996b1,Add csv to help output
dominichamon,2015-03-27 21:06:33,https://api.github.com/repos/google/benchmark/git/commits/680a399a9387c4290442919681cb5d420a751232,680a399a9387c4290442919681cb5d420a751232,Add double-quotes where necessary
dominichamon,2015-03-27 20:27:15,https://api.github.com/repos/google/benchmark/git/commits/71c41cde57d7c741fca05b07585966129cf2ac5b,71c41cde57d7c741fca05b07585966129cf2ac5b,Introduce CSV reporter
EricWF,2015-03-27 21:03:52,https://api.github.com/repos/google/benchmark/git/commits/82fd5572882bc306ea8ffd7810a9bf309f38ca98,82fd5572882bc306ea8ffd7810a9bf309f38ca98,"Merge pull request #105 from google/new-benchmark-interface

Change the available Benchmark options"
EricWF,2015-03-27 20:37:53,https://api.github.com/repos/google/benchmark/git/commits/9d475520204dd5e0c1b5b9f7ce4c2882908a541f,9d475520204dd5e0c1b5b9f7ce4c2882908a541f,merge new changes in basic_test.cc
EricWF,2015-03-27 20:36:40,https://api.github.com/repos/google/benchmark/git/commits/9ed1082c33829a73e1ba5b143232ea14c5f06f3c,9ed1082c33829a73e1ba5b143232ea14c5f06f3c,Merge branch 'master' into new-benchmark-interface
EricWF,2015-03-27 20:35:46,https://api.github.com/repos/google/benchmark/git/commits/e428b9eec3291f564073cd4bc98e8c312cbfcafd,e428b9eec3291f564073cd4bc98e8c312cbfcafd,Add 'benchmark::DoNotOptimize(...)' to help users prevent optimizations
EricWF,2015-03-27 20:26:36,https://api.github.com/repos/google/benchmark/git/commits/4f9ce87e8c016ce1e1086681b2f25fd9431c2bf7,4f9ce87e8c016ce1e1086681b2f25fd9431c2bf7,Merge branch 'master' into new-benchmark-interface
EricWF,2015-03-27 19:55:01,https://api.github.com/repos/google/benchmark/git/commits/0a0bb8feb1ea9d6df308dea6ba6c738594278bbc,0a0bb8feb1ea9d6df308dea6ba6c738594278bbc,"Merge pull request #102 from google/fix-macros

Fix and improve BENCHMARK macros."
EricWF,2015-03-27 18:31:29,https://api.github.com/repos/google/benchmark/git/commits/2a7b7e4b99af360f23b80e7ad93b16064ba7862e,2a7b7e4b99af360f23b80e7ad93b16064ba7862e,"Merge pull request #104 from google/fix-negative-times

Fix #96: Prevent times from being negative."
EricWF,2015-03-27 16:28:22,https://api.github.com/repos/google/benchmark/git/commits/c5f238b18ca52668978f6c0a39b9099b4ea4f14b,c5f238b18ca52668978f6c0a39b9099b4ea4f14b,Fix column width calculation and remove duplicate test
EricWF,2015-03-27 16:13:02,https://api.github.com/repos/google/benchmark/git/commits/cfa3e181ab9a411d6b04bc442e3ba40597de3f1a,cfa3e181ab9a411d6b04bc442e3ba40597de3f1a,Make DateTimeString part of the internal implementation
EricWF,2015-03-27 03:37:26,https://api.github.com/repos/google/benchmark/git/commits/4bf6ceb50dcebe08afb10670a9e0c9c077a6305a,4bf6ceb50dcebe08afb10670a9e0c9c077a6305a,Change the available benchmark options
EricWF,2015-03-26 22:32:31,https://api.github.com/repos/google/benchmark/git/commits/b07fee6b6413354d22fce9e9e488e1c360cd8d7b,b07fee6b6413354d22fce9e9e488e1c360cd8d7b,address review comments
EricWF,2015-03-26 21:56:27,https://api.github.com/repos/google/benchmark/git/commits/1b9e55c281a82ffc37b16f8930f1877b615c22cb,1b9e55c281a82ffc37b16f8930f1877b615c22cb,Remove walltime implementation tests and expose less internals
EricWF,2015-03-26 21:52:28,https://api.github.com/repos/google/benchmark/git/commits/d3e0671a879f8ec5ced7018eb338cb7eb6d191a3,d3e0671a879f8ec5ced7018eb338cb7eb6d191a3,finish selection of clock with debug information
EricWF,2015-03-26 20:22:29,https://api.github.com/repos/google/benchmark/git/commits/48c4c9cf5060042ad145b251676eb4635772524a,48c4c9cf5060042ad145b251676eb4635772524a,"Revert ""prevent unneeded calculation of Slow()""

The calculation was actually inside the loop for a reason.

This reverts commit 47442b9054cd2e6b8c1734eca3c7b19cbb2d16ca."
EricWF,2015-03-26 20:01:29,https://api.github.com/repos/google/benchmark/git/commits/47442b9054cd2e6b8c1734eca3c7b19cbb2d16ca,47442b9054cd2e6b8c1734eca3c7b19cbb2d16ca,prevent unneeded calculation of Slow()
EricWF,2015-03-26 19:25:08,https://api.github.com/repos/google/benchmark/git/commits/21207a4df5ae471f46ef52598c701dd927e6e5b3,21207a4df5ae471f46ef52598c701dd927e6e5b3,improve walltime test
EricWF,2015-03-26 18:57:03,https://api.github.com/repos/google/benchmark/git/commits/c0755c42263d897dd06ad3f60884531a6f0cf331,c0755c42263d897dd06ad3f60884531a6f0cf331,actually add new test
EricWF,2015-03-26 18:56:52,https://api.github.com/repos/google/benchmark/git/commits/725f1f066d7e9c3834ebeb34d20e709a030e9cd9,725f1f066d7e9c3834ebeb34d20e709a030e9cd9,add walltime benchmark and fix unused variable.
EricWF,2015-03-26 18:33:48,https://api.github.com/repos/google/benchmark/git/commits/be993acbb3bada08742b0764f3adb54925e93492,be993acbb3bada08742b0764f3adb54925e93492,remove unneeded test repetitions
EricWF,2015-03-26 18:30:16,https://api.github.com/repos/google/benchmark/git/commits/d0df7ef2de97e542f336419ed2f606d43e184555,d0df7ef2de97e542f336419ed2f606d43e184555,cleanup whitespace and includes
EricWF,2015-03-26 18:26:07,https://api.github.com/repos/google/benchmark/git/commits/a3308c6d86f3ab9446d9cb93ab1c77131b84a55a,a3308c6d86f3ab9446d9cb93ab1c77131b84a55a,Introduce use of std::chrono and remove Walltime printing
EricWF,2015-03-19 02:49:09,https://api.github.com/repos/google/benchmark/git/commits/75712367c115500bf24b13396c36926df1ed1556,75712367c115500bf24b13396c36926df1ed1556,update names
EricWF,2015-03-18 23:19:17,https://api.github.com/repos/google/benchmark/git/commits/e96f068a1d903b88837c18462ba2a69df46c347a,e96f068a1d903b88837c18462ba2a69df46c347a,rename BENCHMARK_PRIVATE_NAME to BENCHMARK_PRIVATE_CONCAT
EricWF,2015-03-18 22:35:36,https://api.github.com/repos/google/benchmark/git/commits/3bf0b251a37a8dcffd610ec07ac9b8b49a713455,3bf0b251a37a8dcffd610ec07ac9b8b49a713455,remove whitespace
EricWF,2015-03-18 22:34:30,https://api.github.com/repos/google/benchmark/git/commits/035a0ba2b374ca4343a7e4e6652c6c0d0780e8dd,035a0ba2b374ca4343a7e4e6652c6c0d0780e8dd,fix macro names and use __COUNTER__
EricWF,2015-03-18 22:20:23,https://api.github.com/repos/google/benchmark/git/commits/8b0b73f06c615f2712e69e0d4ea1a356b8b7a445,8b0b73f06c615f2712e69e0d4ea1a356b8b7a445,"Merge pull request #101 from google/variadic_macros

Add variadic macro for BENCHMARK_TEMPLATE in c++11 and beyond."
EricWF,2015-03-18 21:08:15,https://api.github.com/repos/google/benchmark/git/commits/482c19d92e9684fcb4ed8b1572596a393bae487c,482c19d92e9684fcb4ed8b1572596a393bae487c,Handle creation of C++03 flags differently
EricWF,2015-03-18 21:05:53,https://api.github.com/repos/google/benchmark/git/commits/d40cb9771386558fb3e2d184011175b87c157cf5,d40cb9771386558fb3e2d184011175b87c157cf5,Don't treat CMAKE_CXX_FLAGS as a list
EricWF,2015-03-18 20:34:43,https://api.github.com/repos/google/benchmark/git/commits/daa8a67aa575ef2a52d4a90985ae40faad5c0ff1,daa8a67aa575ef2a52d4a90985ae40faad5c0ff1,add C++03 test and update README
EricWF,2015-03-18 18:50:50,https://api.github.com/repos/google/benchmark/git/commits/38066e8bdca65381f3ec89478ed4a52ec4762b3d,38066e8bdca65381f3ec89478ed4a52ec4762b3d,Add variadic macro for BENCHMARK_TEMPLATE in c++11 and beyond.
EricWF,2015-03-18 18:50:16,https://api.github.com/repos/google/benchmark/git/commits/01bba479acbb04df26b74b99215eb2050e6bbc99,01bba479acbb04df26b74b99215eb2050e6bbc99,Remove use of reserved names in benchmark macros
EricWF,2015-03-18 18:43:08,https://api.github.com/repos/google/benchmark/git/commits/a6a90ec6b8404d512ca16696740ef9baf86061cf,a6a90ec6b8404d512ca16696740ef9baf86061cf,"Revert ""Add BENCHMARK_TEMPLATE1 macro""

I didn't mean to commit this to master.
This reverts commit b7d03ac4f533eaa11026fcf17ed11fc3dbc287a3."
EricWF,2015-03-18 18:42:35,https://api.github.com/repos/google/benchmark/git/commits/b7d03ac4f533eaa11026fcf17ed11fc3dbc287a3,b7d03ac4f533eaa11026fcf17ed11fc3dbc287a3,Add BENCHMARK_TEMPLATE1 macro
EricWF,2015-03-18 16:09:18,https://api.github.com/repos/google/benchmark/git/commits/92fc9b99b2b921988e2be847f5d5b967127c58d2,92fc9b99b2b921988e2be847f5d5b967127c58d2,Add newline after every benchmark to improve readability of the json output.
EricWF,2015-03-18 14:21:25,https://api.github.com/repos/google/benchmark/git/commits/ec0c725a33a01b7d3aee8725affc3caf4f6196fb,ec0c725a33a01b7d3aee8725affc3caf4f6196fb,"Merge pull request #100 from google/json_reporter

Add JSON Reporter"
EricWF,2015-03-18 04:23:43,https://api.github.com/repos/google/benchmark/git/commits/6429348e0d986315d95a0582eb8f57a6a4488ac1,6429348e0d986315d95a0582eb8f57a6a4488ac1,address review comments and fix array type declaration
EricWF,2015-03-17 22:42:41,https://api.github.com/repos/google/benchmark/git/commits/ffb67dcabf0f901c5fc9e5ead58049615c2ba05d,ffb67dcabf0f901c5fc9e5ead58049615c2ba05d,address review comments
EricWF,2015-03-17 22:18:06,https://api.github.com/repos/google/benchmark/git/commits/f65da9d58165c6ab626d6a55b9d47968510c72ae,f65da9d58165c6ab626d6a55b9d47968510c72ae,add json reporter
EricWF,2015-03-17 20:35:39,https://api.github.com/repos/google/benchmark/git/commits/23861178a701ae6ae4c8e9393294fe8a0a7c005b,23861178a701ae6ae4c8e9393294fe8a0a7c005b,"Merge pull request #99 from google/reporter_api_change

Apply reporter interface changes."
EricWF,2015-03-17 20:16:36,https://api.github.com/repos/google/benchmark/git/commits/20f1c0e2a8e692076dd7a5586f73ab8e2d726c12,20f1c0e2a8e692076dd7a5586f73ab8e2d726c12,Apply reporter interface changes. Make report methods non-const and add a Finalize method.
EricWF,2015-03-17 20:09:53,https://api.github.com/repos/google/benchmark/git/commits/b260cf76989388e9421fad268567af6964ca319b,b260cf76989388e9421fad268567af6964ca319b,"Merge pull request #98 from google/reporter_change

move reporter internals in both headers and source"
EricWF,2015-03-17 18:15:16,https://api.github.com/repos/google/benchmark/git/commits/e45252e6f59b55f4bbf22ca4208912b68b6c6a67,e45252e6f59b55f4bbf22ca4208912b68b6c6a67,move ConsoleReporter out of internal namespace
EricWF,2015-03-17 18:02:02,https://api.github.com/repos/google/benchmark/git/commits/d71660227b7de5336cf93bb61d3e9bd72cc99d3f,d71660227b7de5336cf93bb61d3e9bd72cc99d3f,fix minimal_benchmark.h include
EricWF,2015-03-17 18:01:04,https://api.github.com/repos/google/benchmark/git/commits/8e72846da4bde9cdc8162ac99ce4168c65154f7d,8e72846da4bde9cdc8162ac99ce4168c65154f7d,rename minimal_benchmark.h and fix recursive include in benchmark_api.h
EricWF,2015-03-17 17:58:25,https://api.github.com/repos/google/benchmark/git/commits/df904a1980b148139e566028dad27e3bea828afd,df904a1980b148139e566028dad27e3bea828afd,add include to minimal_benchmark.h
EricWF,2015-03-17 17:51:04,https://api.github.com/repos/google/benchmark/git/commits/35f9de71eea5d1fd64ac12873f2ac8847ce8c515,35f9de71eea5d1fd64ac12873f2ac8847ce8c515,move to using C headers in minimal_benchmark.h to prevent getting any C++ STL headers
EricWF,2015-03-17 17:48:33,https://api.github.com/repos/google/benchmark/git/commits/ef79d0af9f7b71347d7dcf2035183f78af08a0a6,ef79d0af9f7b71347d7dcf2035183f78af08a0a6,move basic_test over to minimal benchmark
EricWF,2015-03-17 17:46:16,https://api.github.com/repos/google/benchmark/git/commits/4242f2f1d73d7800d95cfc2af0f3a3513dad2dc5,4242f2f1d73d7800d95cfc2af0f3a3513dad2dc5,move reporter internals in both headers and source
EricWF,2015-03-17 17:32:20,https://api.github.com/repos/google/benchmark/git/commits/279e502a05482b9621f5d52dd7fc80a20014dc85,279e502a05482b9621f5d52dd7fc80a20014dc85,add test for benchmark with two template parameters
EricWF,2015-03-17 16:35:11,https://api.github.com/repos/google/benchmark/git/commits/7f2ef4625583f650d703f693bef2b4964b6cdc67,7f2ef4625583f650d703f693bef2b4964b6cdc67,merge master
EricWF,2015-03-17 16:31:46,https://api.github.com/repos/google/benchmark/git/commits/efe591015d3316c85d1b1f737dba2b56999885ac,efe591015d3316c85d1b1f737dba2b56999885ac,address review comments
EricWF,2015-03-17 16:21:20,https://api.github.com/repos/google/benchmark/git/commits/1924b30a6c45a6c305393bab102fb28333c38543,1924b30a6c45a6c305393bab102fb28333c38543,Merge null pointer warnings
EricWF,2015-03-17 16:17:53,https://api.github.com/repos/google/benchmark/git/commits/957a3e339ecb8bf0b9088be857fa6f3df6e4bc66,957a3e339ecb8bf0b9088be857fa6f3df6e4bc66,"Merge pull request #92 from google/pimpl-benchmark

Pimpl the benchmark object to reduce dependencies on the STL."
dominichamon,2015-03-13 04:56:45,https://api.github.com/repos/google/benchmark/git/commits/bdf4a5f4d2d7efea55190b60f3183109cbf05248,bdf4a5f4d2d7efea55190b60f3183109cbf05248,Add reference to BENCHMARK_MAIN in README
EricWF,2015-03-13 00:27:29,https://api.github.com/repos/google/benchmark/git/commits/66bf7c8f7194ecd3b9f6426ca3b4807e8a8996a2,66bf7c8f7194ecd3b9f6426ca3b4807e8a8996a2,add floating point comparison warnings
EricWF,2015-03-13 00:17:40,https://api.github.com/repos/google/benchmark/git/commits/f022d780ebf71a842418cf3e210e68efbc7a49c3,f022d780ebf71a842418cf3e210e68efbc7a49c3,Enable int shortening warnings
EricWF,2015-03-12 23:32:50,https://api.github.com/repos/google/benchmark/git/commits/180981716ba7b568820aa21ecf15247b990a8621,180981716ba7b568820aa21ecf15247b990a8621,replace instances of NULL with nullptr
EricWF,2015-03-12 23:16:06,https://api.github.com/repos/google/benchmark/git/commits/64ba272911c2413cee516af849c4c80d7ae993b9,64ba272911c2413cee516af849c4c80d7ae993b9,Enable zero as NULL warnings and fix all occurences
EricWF,2015-03-12 22:56:36,https://api.github.com/repos/google/benchmark/git/commits/47fa9ba1a38bff90e155550b6904945985e1ff58,47fa9ba1a38bff90e155550b6904945985e1ff58,merge
EricWF,2015-03-12 22:56:07,https://api.github.com/repos/google/benchmark/git/commits/19464f7dab7d3029b89069ea8add6d54eaf08c9b,19464f7dab7d3029b89069ea8add6d54eaf08c9b,Fix includes in benchmark.h
EricWF,2015-03-12 22:45:52,https://api.github.com/repos/google/benchmark/git/commits/2b34b5d937dc8d9a365c9f60081e532a154d3d82,2b34b5d937dc8d9a365c9f60081e532a154d3d82,remove unneeded includes
EricWF,2015-03-12 22:40:34,https://api.github.com/repos/google/benchmark/git/commits/937987b63d29ec4012c7048d85f6b9ceca954a94,937987b63d29ec4012c7048d85f6b9ceca954a94,pimpl benchmark
EricWF,2015-03-12 22:03:33,https://api.github.com/repos/google/benchmark/git/commits/7a767012f1c423b37069f6d315b97164b5850271,7a767012f1c423b37069f6d315b97164b5850271,"Adopt new benchmark timing internals.

This patch adopts a new internal structure for how timings are performed.
Currently every iteration of a benchmark checks to see if it has been running
for an appropriate amount of time. Checking the clock introduces noise into
the timings and this can cause inconsistent output from each benchmark.

Now every iteration of a benchmark only checks an iteration count to see if it
should stop running. The iteration count is determined before hand by testing
the benchmark on a series of increasing iteration counts until a suitable count
is found. This increases the amount of time it takes to run the actual benchmarks
but it also greatly increases the accuracy of the results.

This patch introduces some breaking changes. The notable breaking changes are:
1. Benchmarks run on multiple threads no generate a report per thread. Instead
   only a single report is generated.
2. ::benchmark::UseRealTime() was removed and replaced with State::UseRealTime()."
EricWF,2015-03-11 17:30:28,https://api.github.com/repos/google/benchmark/git/commits/7c6a7e30845f1fb328235e5efd02c078b40f09e8,7c6a7e30845f1fb328235e5efd02c078b40f09e8,"Merge pull request #90 from google/userealtime

Enable UseRealTime and fix documentation for SetLabel."
dominichamon,2015-03-11 16:47:15,https://api.github.com/repos/google/benchmark/git/commits/d68127d8adc1111c49b372ba12f7c3e4f053a2f0,d68127d8adc1111c49b372ba12f7c3e4f053a2f0,"Enable UseRealTime and fix documentation for SetLabel.

Fixes #89

UseRealTime was defined in the internal namespace by mistake.
Similarly, documentation suggested that benchmark::SetLabel should be
used to set a label, and a function was declared but not defined, while
actually the call should be 'state.SetLabel'."
EricWF,2015-03-10 18:38:45,https://api.github.com/repos/google/benchmark/git/commits/e975efdb7ab062aa821cc46780a5447538d77565,e975efdb7ab062aa821cc46780a5447538d77565,remove third_party directory. update test args
EricWF,2015-03-10 18:32:58,https://api.github.com/repos/google/benchmark/git/commits/e2c795520c18fae0fd9b7df88f20d652eaa8d54f,e2c795520c18fae0fd9b7df88f20d652eaa8d54f,"Merge pull request #87 from google/filter_test

Add filter test, remove re test, and googletest deps"
dominichamon,2015-03-10 03:30:14,https://api.github.com/repos/google/benchmark/git/commits/3b40f0a7a320b5551259be8ffe556996efb006d6,3b40f0a7a320b5551259be8ffe556996efb006d6,"Add filter test, remove re test, and googletest deps"
EricWF,2015-03-09 22:49:52,https://api.github.com/repos/google/benchmark/git/commits/522a58916ae6b96a51f10c15b59452a6eb5e1254,522a58916ae6b96a51f10c15b59452a6eb5e1254,"Merge pull request #85 from google/upgrade-step3

Step three towards moving timer changes."
EricWF,2015-03-09 22:00:04,https://api.github.com/repos/google/benchmark/git/commits/75686a8f22b3bb2c318bd5f6a5d484568db4bd76,75686a8f22b3bb2c318bd5f6a5d484568db4bd76,remove forward declarations
EricWF,2015-03-09 20:39:03,https://api.github.com/repos/google/benchmark/git/commits/4b3bbe343a51b078f5c840fe7b1486a4cc27a05b,4b3bbe343a51b078f5c840fe7b1486a4cc27a05b,"Merge pull request #84 from google/upgrade-step2

Step two towards merging timer changes."
EricWF,2015-03-09 20:18:10,https://api.github.com/repos/google/benchmark/git/commits/60e26b7022c3e59cbee14ee84e83c965c64cea80,60e26b7022c3e59cbee14ee84e83c965c64cea80,fix missing newline and header guard name
EricWF,2015-03-09 20:15:05,https://api.github.com/repos/google/benchmark/git/commits/5cfd6bcc1470daf6335bd62c9301e40767e6978b,5cfd6bcc1470daf6335bd62c9301e40767e6978b,update more copyright
EricWF,2015-03-09 20:03:06,https://api.github.com/repos/google/benchmark/git/commits/8f5cd9760f0b1aaf1a0e52dd627f5b2c4c5d1247,8f5cd9760f0b1aaf1a0e52dd627f5b2c4c5d1247,Merge branch 'upgrade-step2' into upgrade-step3
EricWF,2015-03-09 19:48:51,https://api.github.com/repos/google/benchmark/git/commits/d20cdf19ca622ba3a162455f3efe30501473f387,d20cdf19ca622ba3a162455f3efe30501473f387,address comments
EricWF,2015-03-09 18:56:47,https://api.github.com/repos/google/benchmark/git/commits/e60561a779234aa8a5e33d7c5e0711c419e9e57f,e60561a779234aa8a5e33d7c5e0711c419e9e57f,Force static initialization of walltime.
EricWF,2015-03-09 18:49:00,https://api.github.com/repos/google/benchmark/git/commits/8cf7b18ae4aaf8fb962289ff4a450b87d4f846e4,8cf7b18ae4aaf8fb962289ff4a450b87d4f846e4,Merge branch 'master' into upgrade-step2
EricWF,2015-03-09 18:48:32,https://api.github.com/repos/google/benchmark/git/commits/61f05062e8ef41d51353dbe8702ff5fed5f7d116,61f05062e8ef41d51353dbe8702ff5fed5f7d116,"Merge pull request #81 from google/upgrade-step1

Step one towards merging timer changes."
EricWF,2015-03-09 18:43:45,https://api.github.com/repos/google/benchmark/git/commits/5b0542d583f9afa9e2cd24c9d0c83e64c3310aef,5b0542d583f9afa9e2cd24c9d0c83e64c3310aef,Merge branch 'upgrade-step1' into upgrade-step2
EricWF,2015-03-09 18:40:08,https://api.github.com/repos/google/benchmark/git/commits/e447887d16d33035a68dbb19e7768d21774d5d92,e447887d16d33035a68dbb19e7768d21774d5d92,Fix travis config by moving CTEST_OUTPUT_ON_FAILURE=1 into make test command
EricWF,2015-03-09 18:34:44,https://api.github.com/repos/google/benchmark/git/commits/6590ceab74ceea6c1e0e6b0ca43623d228e02548,6590ceab74ceea6c1e0e6b0ca43623d228e02548,Merge branch 'upgrade-step1' into upgrade-step2
EricWF,2015-03-09 18:34:32,https://api.github.com/repos/google/benchmark/git/commits/f7602badfbe3ac6ea7e2b27819c9cdb5a327d3d9,f7602badfbe3ac6ea7e2b27819c9cdb5a327d3d9,add env to make ctest print on failure
EricWF,2015-03-06 22:01:05,https://api.github.com/repos/google/benchmark/git/commits/a187aa080377f4707bb28690d51f206c0d49f436,a187aa080377f4707bb28690d51f206c0d49f436,Third step in moving towards adopting new timer semantics
EricWF,2015-03-06 21:59:32,https://api.github.com/repos/google/benchmark/git/commits/f947cebe15c6c56383d630e1f4e9f5fc6bd6332a,f947cebe15c6c56383d630e1f4e9f5fc6bd6332a,remove ifdefs around BM_Factorial
EricWF,2015-03-06 21:53:52,https://api.github.com/repos/google/benchmark/git/commits/8f96f50553d5b775148ee207b73e72b8e260799c,8f96f50553d5b775148ee207b73e72b8e260799c,comment out test to prevent failures.
EricWF,2015-03-06 19:19:06,https://api.github.com/repos/google/benchmark/git/commits/f1c398adb4396adcde58b8118fcdb9cb0699f8f6,f1c398adb4396adcde58b8118fcdb9cb0699f8f6,invert check in GetLogInstanceForLevel()
EricWF,2015-03-06 19:07:24,https://api.github.com/repos/google/benchmark/git/commits/8ed7d7664bbd64490f591339648261b642d6372e,8ed7d7664bbd64490f591339648261b642d6372e,"The second step towards merging the timer changes.

This patch does two things:

1. It overhalls the static initialization in Walltime to be simplier. It uses
   a static variable inside WallTime::Now() to initialize the timer.

2. Add a logging mechanism so that the -v flag actually has meaning and
   reimplement the CHECK macros to allow extra messages to be streamed in."
EricWF,2015-03-06 18:20:47,https://api.github.com/repos/google/benchmark/git/commits/b1f34d38800a21136aa2d7a5d5604d66d96e7823,b1f34d38800a21136aa2d7a5d5604d66d96e7823,address comments
EricWF,2015-03-06 17:35:00,https://api.github.com/repos/google/benchmark/git/commits/5b41e128b359900264464c480dfd4f107625f3c9,5b41e128b359900264464c480dfd4f107625f3c9,"Step one towards merging timer changes.

This patch cleans up our use of generic macros and also merges changes in the
build system.

It adds options -DBENCHMARK_ENABLE_TESTING and -DBENCHMARK_ENABLE_SHARED."
EricWF,2015-03-06 17:05:19,https://api.github.com/repos/google/benchmark/git/commits/c5a362b4d3d7f73c643ef485105e6e3d274da78a,c5a362b4d3d7f73c643ef485105e6e3d274da78a,"Change std::regex detection test to detect bug in libstdc++.

libstdc++'s std::regex has (or had) a bug in std::regex::operator=(...) that
caused undefined behaviour. Clang will detect this and compile the function so
that it crashes at runtime. This patch tried to detect that bug during
configuration."
EricWF,2015-03-02 19:29:21,https://api.github.com/repos/google/benchmark/git/commits/056a008afa5eec012f9b8264b3d2facc96cafd9c,056a008afa5eec012f9b8264b3d2facc96cafd9c,"Merge pull request #75 from google/outofsource

Add _build to gitignore to enable out-of-source builds"
EricWF,2015-03-02 19:10:20,https://api.github.com/repos/google/benchmark/git/commits/cff940a727820ba33215bb3b0a4c0d028f9c53af,cff940a727820ba33215bb3b0a4c0d028f9c53af,"Merge pull request #78 from pdavydov108/master

Fix #77 build on freebsd 10"
EricWF,2015-03-02 16:47:02,https://api.github.com/repos/google/benchmark/git/commits/5e77de62a196a447f689e79b8ed6270e5d3e6532,5e77de62a196a447f689e79b8ed6270e5d3e6532,"Merge pull request #76 from google/64-32

One more 64-bit to 32-bit conversion"
pdavydov108,2015-02-25 07:41:26,https://api.github.com/repos/google/benchmark/git/commits/8e3e78fc3dcae25f54dffb1cccb34c0415cee36b,8e3e78fc3dcae25f54dffb1cccb34c0415cee36b,Fix #77 add comment to headers in wrong order
dominichamon,2015-02-19 06:15:05,https://api.github.com/repos/google/benchmark/git/commits/5fe797b6f9cf0059ab418f46ba634656a21acb28,5fe797b6f9cf0059ab418f46ba634656a21acb28,Add top-level folders to gitignore to enable out-of-source builds
pdavydov108,2015-02-21 14:21:19,https://api.github.com/repos/google/benchmark/git/commits/26c01ee9ab6c0aea3ab4a671129fcdd33381229e,26c01ee9ab6c0aea3ab4a671129fcdd33381229e,Fix #77 add FreeBSD detection in cmake
pdavydov108,2015-02-21 14:05:13,https://api.github.com/repos/google/benchmark/git/commits/c8d05fcc96663e8d5300505768234c3b87d96281,c8d05fcc96663e8d5300505768234c3b87d96281,Fix #77 build on FreeBSD 10
EricWF,2015-02-19 21:38:30,https://api.github.com/repos/google/benchmark/git/commits/114886100bf10606409e9a7df78554a33cac29ef,114886100bf10606409e9a7df78554a33cac29ef,Don't use c++14
EricWF,2015-02-19 21:37:05,https://api.github.com/repos/google/benchmark/git/commits/9a118340486362072d0f26f1bec9199b80397866,9a118340486362072d0f26f1bec9199b80397866,add includes for stdint.h
dominichamon,2015-02-19 06:21:39,https://api.github.com/repos/google/benchmark/git/commits/2789aba1ce0cea9fa35a994e8ab36f9dd418b477,2789aba1ce0cea9fa35a994e8ab36f9dd418b477,One more 64-bit to 32-bit conversion
EricWF,2015-02-18 21:39:24,https://api.github.com/repos/google/benchmark/git/commits/55285fd2aee692f07e2b618159d99e21af3a779a,55285fd2aee692f07e2b618159d99e21af3a779a,"Merge pull request #73 from google/64.32

Fix #72 by avoiding 64-to-32-bit shortenings"
dominichamon,2015-02-18 18:07:45,https://api.github.com/repos/google/benchmark/git/commits/3968ff45baf9ddc526ed68a3f6ee846dc0e1f332,3968ff45baf9ddc526ed68a3f6ee846dc0e1f332,Fix #72 by avoiding 64-to-32-bit shortenings
dominichamon,2014-12-26 16:44:14,https://api.github.com/repos/google/benchmark/git/commits/fd7d288bbebbc4ca1b7e139e72ce27e4ce6d9335,fd7d288bbebbc4ca1b7e139e72ce27e4ce6d9335,Add section on linking to satisfy #67
dominichamon,2014-12-02 20:58:14,https://api.github.com/repos/google/benchmark/git/commits/b40b66ab3bfcafac4a289159a9135ea8ea2a6ef0,b40b66ab3bfcafac4a289159a9135ea8ea2a6ef0,Actually fix issue with CHECK
dominichamon,2014-12-02 20:51:46,https://api.github.com/repos/google/benchmark/git/commits/d31977bb699389533d65f41ad69a0d8a5e7da137,d31977bb699389533d65f41ad69a0d8a5e7da137,Added gtest CHECK symbol to benchmark test
dominichamon,2014-12-02 20:46:27,https://api.github.com/repos/google/benchmark/git/commits/2aa24420243e3e6e961f9c0fa4cddb5a612d9cec,2aa24420243e3e6e961f9c0fa4cddb5a612d9cec,Remove drone.io reference
dominichamon,2014-11-14 22:19:16,https://api.github.com/repos/google/benchmark/git/commits/d58d59588fa35186e0f938ee2b0af538cd69ebe0,d58d59588fa35186e0f938ee2b0af538cd69ebe0,"Merge pull request #66 from 3Hren/master

Using Travis CI."
3Hren,2014-11-14 19:39:38,https://api.github.com/repos/google/benchmark/git/commits/1bc73789e438120c5e1d0d39d3bff9fb1f658243,1bc73789e438120c5e1d0d39d3bff9fb1f658243,Update AUTHORS and CONTRIBUTORS.
dominichamon,2014-11-14 17:56:50,https://api.github.com/repos/google/benchmark/git/commits/4249753cd9dbe7436c309e27cf05f7675cbd9ab3,4249753cd9dbe7436c309e27cf05f7675cbd9ab3,"Merge pull request #68 from eddyxu/debug_factorial

Use #ifdef to protect calling Factorial in benchmark_test.cc"
3Hren,2014-11-14 07:11:45,https://api.github.com/repos/google/benchmark/git/commits/6f692460e748be768bf72e1bd2e03e1dc251983a,6f692460e748be768bf72e1bd2e03e1dc251983a,"Update readme.

Added Travis build status badge."
eddyxu,2014-11-14 00:09:21,https://api.github.com/repos/google/benchmark/git/commits/0f78cebba5640559694693386bc850df8a6d1d31,0f78cebba5640559694693386bc850df8a6d1d31,Use #ifdef to protect calling Factorial in benchmark_test.cc
dominichamon,2014-11-13 21:12:28,https://api.github.com/repos/google/benchmark/git/commits/7e290fb96530bd14c4fb6f9f40eb692af5e2e21c,7e290fb96530bd14c4fb6f9f40eb692af5e2e21c,Fix release builds
dominichamon,2014-11-13 21:11:11,https://api.github.com/repos/google/benchmark/git/commits/66f0b5d0ed0df295e2e52dcd4e4609a9f167ec79,66f0b5d0ed0df295e2e52dcd4e4609a9f167ec79,"Merge pull request #63 from google/62.CHECK

Remove CHECK_* from public API."
dominichamon,2014-11-13 21:06:28,https://api.github.com/repos/google/benchmark/git/commits/4932b72b03569f5f5c2adccfe8f893ee25a208f3,4932b72b03569f5f5c2adccfe8f893ee25a208f3,"Fix example in README.md to compile.

Fixes #65"
3Hren,2014-11-12 09:46:23,https://api.github.com/repos/google/benchmark/git/commits/35c29c7d2f26c12e8a890f257c9baac89343657c,35c29c7d2f26c12e8a890f257c9baac89343657c,Added c++11 support for Travis.
3Hren,2014-11-12 09:32:00,https://api.github.com/repos/google/benchmark/git/commits/e4d41f8a23b8ea082ded30e94d572e646aff8864,e4d41f8a23b8ea082ded30e94d572e646aff8864,Using Travis as CI.
dominichamon,2014-11-01 04:54:55,https://api.github.com/repos/google/benchmark/git/commits/a3b5e44c529996a3663ddf48a40e33cd0fe3fdf2,a3b5e44c529996a3663ddf48a40e33cd0fe3fdf2,"Remove CHECK_* from public API.

CHECK_* are now private and used internally in the library. The test
uses have been replaced with asserts.

Fixes #62."
dominichamon,2014-11-01 04:39:28,https://api.github.com/repos/google/benchmark/git/commits/d750144542de0f35321f066f03afc8d873122c6d,d750144542de0f35321f066f03afc8d873122c6d,"Merge pull request #60 from everbase/master

added googletest dependency to tests (allows compilation with -j)"
ckennelly,2014-10-18 22:34:11,https://api.github.com/repos/google/benchmark/git/commits/f9ef4f4edffb9f48da5080e52f22f8df7b98984c,f9ef4f4edffb9f48da5080e52f22f8df7b98984c,"Merge pull request #59 from zjx20/instance_mutex

Turn the global mutex into instance variables"
ckennelly,2014-10-18 22:33:40,https://api.github.com/repos/google/benchmark/git/commits/8eac5dc328b59bc261aac583c2264e270fa0e987,8eac5dc328b59bc261aac583c2264e270fa0e987,"Merge pull request #58 from google/zero_null

Fix #50 by using nullptr and adding stricter warning."
ckennelly,2014-10-18 22:33:07,https://api.github.com/repos/google/benchmark/git/commits/5f31f0dca295a6b5673c7530e1178c679893c21a,5f31f0dca295a6b5673c7530e1178c679893c21a,"Merge pull request #57 from google/flag_variants

Fix #54 by correcting reference to CXX flags for variants."
ckennelly,2014-10-18 22:32:31,https://api.github.com/repos/google/benchmark/git/commits/06201b342989214134362a74ec8b617d8da27c17,06201b342989214134362a74ec8b617d8da27c17,"Merge pull request #56 from google/pthread_dependency

Move pthread dependency to test CMakeLists.txt"
zjx20,2014-10-12 10:01:45,https://api.github.com/repos/google/benchmark/git/commits/4a3348ce221eb5747b11d40afad1020eddd6c6fe,4a3348ce221eb5747b11d40afad1020eddd6c6fe,"Turn the global mutex into instance variables

To fix #52"
dominichamon,2014-10-11 22:52:50,https://api.github.com/repos/google/benchmark/git/commits/e6107a781c35f5e0a366e526631ea8cef8f246c5,e6107a781c35f5e0a366e526631ea8cef8f246c5,Fix #50 by using nullptr and adding stricter warning.
dominichamon,2014-10-11 22:13:00,https://api.github.com/repos/google/benchmark/git/commits/f98c5760fe86360c399d952e3710944a945f10e0,f98c5760fe86360c399d952e3710944a945f10e0,Fix #54 by correcting reference to CXX flags for variants.
dominichamon,2014-10-11 21:57:45,https://api.github.com/repos/google/benchmark/git/commits/a13627bc3af216a5ca82db40a6ada39a7afea630,a13627bc3af216a5ca82db40a6ada39a7afea630,Move pthread dependency to test CMakeLists.txt
zjx20,2014-10-05 08:13:35,https://api.github.com/repos/google/benchmark/git/commits/0fcd190cd68e9a2c7574e45f3a4cbba4807c1530,0fcd190cd68e9a2c7574e45f3a4cbba4807c1530,Update CONTRIBUTORS
zjx20,2014-10-05 08:12:31,https://api.github.com/repos/google/benchmark/git/commits/b6e597713293980189a083764f8a9b1bc6321add,b6e597713293980189a083764f8a9b1bc6321add,Update AUTHORS
dominichamon,2014-08-22 18:31:03,https://api.github.com/repos/google/benchmark/git/commits/cfb34b5957ebe1873ba58559a23002f9f4a7e521,cfb34b5957ebe1873ba58559a23002f9f4a7e521,Merge branch 'mattyclarkson-regex'
mattyclarkson,2014-08-22 13:36:19,https://api.github.com/repos/google/benchmark/git/commits/9593e640763ad0cbd36d5c9104af5a389dd94cdb,9593e640763ad0cbd36d5c9104af5a389dd94cdb,Fixed the CMake add_cxx_compiler_flag function
mattyclarkson,2014-07-31 14:44:26,https://api.github.com/repos/google/benchmark/git/commits/0fd0be9789aa7fe9b60b66926f731663355bc791,0fd0be9789aa7fe9b60b66926f731663355bc791,Added more complicated regex test patterns
mattyclarkson,2014-07-30 18:08:32,https://api.github.com/repos/google/benchmark/git/commits/f043826542d6a35909825bc89892bc3a4b4edf3e,f043826542d6a35909825bc89892bc3a4b4edf3e,C++11 regular expressions
mattyclarkson,2014-07-31 14:20:20,https://api.github.com/repos/google/benchmark/git/commits/edfa60a1d12ab746e088c216fafbfc4d7a6c50e6,edfa60a1d12ab746e088c216fafbfc4d7a6c50e6,Resolve regular expression engines
mattyclarkson,2014-07-31 14:19:54,https://api.github.com/repos/google/benchmark/git/commits/fac16a662efb4ded79f74c795d81bdd688cb49a7,fac16a662efb4ded79f74c795d81bdd688cb49a7,CMakeLists.txt comments
mattyclarkson,2014-07-31 14:19:27,https://api.github.com/repos/google/benchmark/git/commits/1c82191d7a663c9fa9051fa575dda609b9637aac,1c82191d7a663c9fa9051fa575dda609b9637aac,Consistent indentation in CMakeLists.txt
dominichamon,2014-08-20 04:17:20,https://api.github.com/repos/google/benchmark/git/commits/d32c5c64426d7ec1bd2773f6ba8b11a332245a9e,d32c5c64426d7ec1bd2773f6ba8b11a332245a9e,"Merge pull request #47 from mattyclarkson/benchmark_test

Make sure all benchmark tests run"
mattyclarkson,2014-08-08 09:22:31,https://api.github.com/repos/google/benchmark/git/commits/11769369660577d67b70725c13a16b05f4d584b6,11769369660577d67b70725c13a16b05f4d584b6,"Check the number of benchmark tests ran

Previously the benchmark_test program executed the benchmark tests to make sure
the API was working but was not checking the number of tests that were
completed. If the regular expression matching breaks, zero tests could be ran.
Similarly, if one of the APIs breaks and doesn't run the correct amount of tests
then `make test` will catch this."
mattyclarkson,2014-07-30 18:06:57,https://api.github.com/repos/google/benchmark/git/commits/92ddf09f1d94d2412195dda1b77416ed68016672,92ddf09f1d94d2412195dda1b77416ed68016672,Ignore the result of make test
mattyclarkson,2014-08-15 10:08:33,https://api.github.com/repos/google/benchmark/git/commits/38c27c2cb3a5b0d391ace67e08e4e6609f0cf5bb,38c27c2cb3a5b0d391ace67e08e4e6609f0cf5bb,"Do not use CMake CONCAT

CONCAT was added quite late in the CMake release cycles so lets use `set()`
instead which has been around _forever_..."
dominichamon,2014-08-08 23:38:05,https://api.github.com/repos/google/benchmark/git/commits/b1041fc3d959dae2cdcb308ae559b47aa580d545,b1041fc3d959dae2cdcb308ae559b47aa580d545,"Merge pull request #48 from mattyclarkson/gtest_verify

Verify gtest with URL_MD5"
mattyclarkson,2014-08-08 12:46:04,https://api.github.com/repos/google/benchmark/git/commits/6a66991586bad15e36476dac4cf1fa10c890f074,6a66991586bad15e36476dac4cf1fa10c890f074,Verify gtest with URL_MD5
dominichamon,2014-08-07 17:28:55,https://api.github.com/repos/google/benchmark/git/commits/ed08661efe8dad6282bf95d6d6a0a856ed46c5ac,ed08661efe8dad6282bf95d6d6a0a856ed46c5ac,Remove URL_HASH as it is unsupported
dominichamon,2014-08-07 17:20:46,https://api.github.com/repos/google/benchmark/git/commits/0e494bcb3475f111fadd8ab9cb71743ae369990e,0e494bcb3475f111fadd8ab9cb71743ae369990e,"Merge pull request #46 from mattyclarkson/gtest_verify

Verify the download of gtest"
mattyclarkson,2014-08-07 16:22:08,https://api.github.com/repos/google/benchmark/git/commits/d2aa5c1eb329626638b6fd743274b90ad571d43e,d2aa5c1eb329626638b6fd743274b90ad571d43e,Verify the download of gtest
mattyclarkson,2014-08-04 10:38:37,https://api.github.com/repos/google/benchmark/git/commits/373cc411004a4dfb5a5486dc869b835d029ad440,373cc411004a4dfb5a5486dc869b835d029ad440,C++11 concurrency instead of pthread
mattyclarkson,2014-08-01 13:24:56,https://api.github.com/repos/google/benchmark/git/commits/6b1a6958c4b4a7a2824b3cc0c125758e26bd380f,6b1a6958c4b4a7a2824b3cc0c125758e26bd380f,CMake function for adding compiler flags
mattyclarkson,2014-08-01 09:53:24,https://api.github.com/repos/google/benchmark/git/commits/6945096ba16bfae115309e4318b077c9d9fc2f28,6945096ba16bfae115309e4318b077c9d9fc2f28,Add -Wshadow if supported
mattyclarkson,2014-08-01 09:48:16,https://api.github.com/repos/google/benchmark/git/commits/e863292dcc42dd704cd3553ae5e320f1d5c2d9ac,e863292dcc42dd704cd3553ae5e320f1d5c2d9ac,Detect compiler flags and append to default CMake flags
dominichamon,2014-08-02 04:10:48,https://api.github.com/repos/google/benchmark/git/commits/4940eebf659a00c6b46aec0e02599839f4e1b2f5,4940eebf659a00c6b46aec0e02599839f4e1b2f5,"Merge pull request #42 from mattyclarkson/versioning

Implemented git versioning"
mattyclarkson,2014-08-01 14:00:43,https://api.github.com/repos/google/benchmark/git/commits/c927845d5ad5344cb681598001d2234cefa61145,c927845d5ad5344cb681598001d2234cefa61145,get_git_version CMake function
mattyclarkson,2014-07-30 19:12:04,https://api.github.com/repos/google/benchmark/git/commits/d591edf5139e0b160bfedc88c1e1632d21fc9f28,d591edf5139e0b160bfedc88c1e1632d21fc9f28,"Implemented git versioning

This patch automatically versions the shared libraries from any annotated `git`
tags:

```
git tag -a v1.0.0
```

It expects semver version tags such as `v1.0.0`. It would be trivial to support
`1.0.0` but looking around it seems that most C/C++ projects follow `vX.X.X`
rather that `X.X.X` like a lot of `Node.js` stuff.

This determines that the if the project has had a certain amount of commits
since the last tag and also if the project is _dirty_ (has modified files), but
does __nothing__ with that information. In the future a more robust release
could be implemented in the script.

This is pretty brittle and has little in the way of configuration. Ideally we
should use `find_program` to work out where `git` is so that users can configure
it. This implementation assumes that `git` will be available in `PATH`

Outputs the following on the command line:

```
-- git Version: v[MAJOR].[MINOR].[PATCH]-[COMMITS_SINCE_TAG]-[SHA1](-dirty)?
-- Version: [MAJOR].[MINOR].[PATCH]
```"
dominichamon,2014-07-30 17:15:55,https://api.github.com/repos/google/benchmark/git/commits/890908c1976ec733125c28c70e1d1de5aa5a7447,890908c1976ec733125c28c70e1d1de5aa5a7447,"Merge pull request #39 from mattyclarkson/fixes

Allow shared libraries with BUILD_SHARED_LIBS"
mattyclarkson,2014-07-30 15:59:14,https://api.github.com/repos/google/benchmark/git/commits/57fdf38f7475cef9e3d55331fb05216ea7792196,57fdf38f7475cef9e3d55331fb05216ea7792196,Allow shared libraries with BUILD_SHARED_LIBS
mattyclarkson,2014-07-30 16:21:38,https://api.github.com/repos/google/benchmark/git/commits/4fae2944c7e99bdac33a833c2ff3aef8aba8d3de,4fae2944c7e99bdac33a833c2ff3aef8aba8d3de,Added Matt Clarkson as a contributor
mattyclarkson,2014-07-30 16:20:27,https://api.github.com/repos/google/benchmark/git/commits/ace6464b289c8f30ce7cc45bdbbcc646dfc6dde7,ace6464b289c8f30ce7cc45bdbbcc646dfc6dde7,Made AUTHORS and CONTRIBUTES alphabetical
dominichamon,2014-07-27 22:48:03,https://api.github.com/repos/google/benchmark/git/commits/20ac20ac77c52bbe5fb7cd3c5e5edf0d6a2269eb,20ac20ac77c52bbe5fb7cd3c5e5edf0d6a2269eb,Merge branch 'eddyxu-mac'
dominichamon,2014-07-27 22:47:25,https://api.github.com/repos/google/benchmark/git/commits/b30603094a3245353a5d17bfb33e58807f2472b0,b30603094a3245353a5d17bfb33e58807f2472b0,Merge branch 'mac' of git://github.com/eddyxu/benchmark into eddyxu-mac
dominichamon,2014-07-27 22:46:10,https://api.github.com/repos/google/benchmark/git/commits/2d835a0c820fc63cdc7ec145c38e072cb9c3078e,2d835a0c820fc63cdc7ec145c38e072cb9c3078e,"Merge pull request #38 from eddyxu/authors

Add Lei Xu to AUTHORS and CONTRIBUTORS"
dominichamon,2014-07-24 20:14:49,https://api.github.com/repos/google/benchmark/git/commits/f1e1ccafcc6f4565f907cc5d0592b24fe0aae5b4,f1e1ccafcc6f4565f907cc5d0592b24fe0aae5b4,"Merge pull request #34 from predmond/master

fix examples to use SetBytesProcessed"
dominichamon,2014-07-24 02:32:37,https://api.github.com/repos/google/benchmark/git/commits/58e52ba38616c4ac92250a49642f3cd08196be9e,58e52ba38616c4ac92250a49642f3cd08196be9e,Ignore stanza for ninja users
predmond,2014-07-23 17:36:58,https://api.github.com/repos/google/benchmark/git/commits/0ce150e1fcd58cbf48e8904f1ad6fa452bf566eb,0ce150e1fcd58cbf48e8904f1ad6fa452bf566eb,"fix examples to use SetBytesProcessed

- use State::SetBytesProcessed not SetBenchmarkBytesProcessed"
pphaneuf,2014-07-23 16:18:40,https://api.github.com/repos/google/benchmark/git/commits/c7eb316e7ef74744e35694a2675e5a0955567333,c7eb316e7ef74744e35694a2675e5a0955567333,Add @predmond to the AUTHORS and CONTRIBUTORS files.
pphaneuf,2014-07-23 16:18:23,https://api.github.com/repos/google/benchmark/git/commits/338eb89671953f6c4262b9036e3120b882a429e8,338eb89671953f6c4262b9036e3120b882a429e8,Ignore backup files.
dominichamon,2014-07-23 16:01:16,https://api.github.com/repos/google/benchmark/git/commits/9f01575ffa6b885adb1f5ff9a85841b72bc2a53f,9f01575ffa6b885adb1f5ff9a85841b72bc2a53f,"Merge pull request #33 from predmond/master

fix building on ubuntu"
predmond,2014-07-23 14:35:42,https://api.github.com/repos/google/benchmark/git/commits/52b3004ae3bfcac51b1c669bcfe6f1be87ca5054,52b3004ae3bfcac51b1c669bcfe6f1be87ca5054,fix linker error by reordering link libraries
predmond,2014-07-23 14:35:12,https://api.github.com/repos/google/benchmark/git/commits/b33d1f1d3953160658627c1569c5dc9d414dca15,b33d1f1d3953160658627c1569c5dc9d414dca15,fix signed/unsigned comparison warning
dominichamon,2014-06-11 05:20:33,https://api.github.com/repos/google/benchmark/git/commits/6a6fc70cf0c878828973a2f2af7cb2658a5a6948,6a6fc70cf0c878828973a2f2af7cb2658a5a6948,"Merge pull request #31 from pleroy/DestructionPure

Fix a bug in the destruction of BenchmarkFamilies."
pleroy,2014-06-09 11:27:47,https://api.github.com/repos/google/benchmark/git/commits/10dc1553720b957da73ca077b4d3a096621384ca,10dc1553720b957da73ca077b4d3a096621384ca,Fix a bug in the destruction of BenchmarkFamilies.
dominichamon,2014-06-05 21:10:32,https://api.github.com/repos/google/benchmark/git/commits/35da167b9e5af0fcf82518e7ff8025c0b8fce030,35da167b9e5af0fcf82518e7ff8025c0b8fce030,"Merge pull request #28 from pleroy/PausePure

Take the CPU time into account in PauseTiming/ResumeTiming"
pleroy,2014-06-05 21:02:22,https://api.github.com/repos/google/benchmark/git/commits/fe1b75b87e59e6a670d0b2b54db62e897b0bb93d,fe1b75b87e59e6a670d0b2b54db62e897b0bb93d,"Merge branch 'GoogleMaster' into PausePure

Conflicts:
	src/benchmark.cc"
dominichamon,2014-06-04 21:48:23,https://api.github.com/repos/google/benchmark/git/commits/5c457b06c8fdd4dd9620e3293ff9ef1822b5f6bb,5c457b06c8fdd4dd9620e3293ff9ef1822b5f6bb,"Merge pull request #25 from pleroy/StatsPure

Fix the stddev/mean computations"
pleroy,2014-06-04 21:16:45,https://api.github.com/repos/google/benchmark/git/commits/bcf08705f5bb3f928498975c0c04c2fae545c3b2,bcf08705f5bb3f928498975c0c04c2fae545c3b2,Comment.
pleroy,2014-06-04 21:12:46,https://api.github.com/repos/google/benchmark/git/commits/640dd5a492f41a94a45d0882192415a6c73f354c,640dd5a492f41a94a45d0882192415a6c73f354c,Less of a hack: avoid the division/multiplication if the stddev is 0.
pleroy,2014-06-04 20:51:29,https://api.github.com/repos/google/benchmark/git/commits/db4248e21e133481edba97a490647502461f436f,db4248e21e133481edba97a490647502461f436f,Merge branch 'TwoBugs' into StatsPure
pleroy,2014-06-04 19:54:45,https://api.github.com/repos/google/benchmark/git/commits/e189ec02837852b64a7c5b6e505a624ac65c1ce6,e189ec02837852b64a7c5b6e505a624ac65c1ce6,Print mean/stddev of the # of iterations.
dominichamon,2014-06-04 19:55:59,https://api.github.com/repos/google/benchmark/git/commits/7c428e91b76fb63f41cf399df63b5eca7635ecc2,7c428e91b76fb63f41cf399df63b5eca7635ecc2,"Merge pull request #27 from pleroy/TwoBugs

Two bug fixes in KeepRunning"
pleroy,2014-06-04 19:21:24,https://api.github.com/repos/google/benchmark/git/commits/0d9a060f5b0d55d7fc37823c612883e465b00d46,0d9a060f5b0d55d7fc37823c612883e465b00d46,Two bug fixes in KeepRunning.
pleroy,2014-05-29 15:32:04,https://api.github.com/repos/google/benchmark/git/commits/556002bec1d76bc2c3ea0c688dd0d7aa4caa1c78,556002bec1d76bc2c3ea0c688dd0d7aa4caa1c78,Adding myself to the contributors
ckennelly,2014-06-04 14:52:14,https://api.github.com/repos/google/benchmark/git/commits/883413be841394097dbeb61a49be3a79ed68638d,883413be841394097dbeb61a49be3a79ed68638d,Merge branch 'pphaneuf-gitignore'
pphaneuf,2014-06-04 14:34:58,https://api.github.com/repos/google/benchmark/git/commits/c96fb246b91596b547566b38463eda24bb19a655,c96fb246b91596b547566b38463eda24bb19a655,Add a few output files to .gitignore.
pleroy,2014-05-29 15:32:04,https://api.github.com/repos/google/benchmark/git/commits/ffcdc94c7b796cf9f73bcbe351b72449dd69e2c4,ffcdc94c7b796cf9f73bcbe351b72449dd69e2c4,Adding myself to the contributors
pleroy,2014-05-29 13:49:38,https://api.github.com/repos/google/benchmark/git/commits/ec1e09f939ab3298abc47b7494c6b7fb10a1ae40,ec1e09f939ab3298abc47b7494c6b7fb10a1ae40,"Ignore the CPU time consumed when timing is paused.

Conflicts:
	src/benchmark.cc"
pleroy,2014-05-29 12:56:24,https://api.github.com/repos/google/benchmark/git/commits/291ff1faedc5b9865dd7e43eff673421ac2cac30,291ff1faedc5b9865dd7e43eff673421ac2cac30,"Fix the stddev/mean computations which had be garbled since commit e5f5a0d30e91d94b0563a0c92bbc2a71b4361daa, leading to a mean that was not in the min/max range and to zero-divide in the stddev computation, among others."
dominichamon,2014-05-05 17:03:11,https://api.github.com/repos/google/benchmark/git/commits/e5a431998dc1c815cdac29b63441177596e08f3d,e5a431998dc1c815cdac29b63441177596e08f3d,"Merge pull request #23 from ckennelly/clock_initialization

Resolve race on approx_time_ in FastClock."
dominichamon,2014-05-05 17:02:50,https://api.github.com/repos/google/benchmark/git/commits/46507cb2762b34e07a37426343bdbce3a5b7a3ae,46507cb2762b34e07a37426343bdbce3a5b7a3ae,"Merge pull request #22 from ckennelly/mutex_initialization

Statically initialize benchmark_mutex and extend its lifetime."
dominichamon,2014-05-05 17:02:33,https://api.github.com/repos/google/benchmark/git/commits/276bda99acb53108cf2656a14d6e8fe6634b882d,276bda99acb53108cf2656a14d6e8fe6634b882d,"Merge pull request #21 from ckennelly/issue20

Resolve benchmark cleanup race condition in issue #20."
ckennelly,2014-05-05 06:11:54,https://api.github.com/repos/google/benchmark/git/commits/2c9b29c9ff2e5e6b89438258eb77086a21a26d88,2c9b29c9ff2e5e6b89438258eb77086a21a26d88,"Resolve race on approx_time_ in FastClock.

InitType should hold a lock before storing to approx_time_, which is later
read by the background worker.  When the worker is actively running (i.e., not
blocked on bg_cond_) it holds bg_mutex_.

InitType is called during benchmark setup only, so any contention induced for
the mutex should not have performance/accuracy consequences."
ckennelly,2014-05-05 06:07:18,https://api.github.com/repos/google/benchmark/git/commits/77106c1f684aca7328bfa9da336f209f63290a6e,77106c1f684aca7328bfa9da336f209f63290a6e,"Statically initialize benchmark_mutex and extend its lifetime.

RunSpecifiedBenchmarks destroys benchmark_mutex before its last usage,
typically in RemoveBenchmark during cleanup of the BenchmarkFamilies singleton."
ckennelly,2014-05-05 05:50:45,https://api.github.com/repos/google/benchmark/git/commits/54e18b8992661376f24075a843f316e361df06f2,54e18b8992661376f24075a843f316e361df06f2,"Resolve benchmark cleanup race condition in issue #20.

The multithreaded API for benchmarks provides that teardown can happen in
thread 0.  For this to be safe, all other threads executing the benchmark
function need to have exited.  Otherwise, thread 0 may begin to teardown shared
resources before the other threads have stopped using these resources as they
are in their last loop of while (KeepRunning()) { ... }.

This change creates a single exit point for KeepRunning() to return false.
When running a multithreaded benchmark, thread 0 blocks on KeepRunning() until
all other threads have exited.  This approach allows for there to be no change
to the user-facing API exemplified in the BM_MultiThreaded example."
dominichamon,2014-04-23 21:32:21,https://api.github.com/repos/google/benchmark/git/commits/efb9c302cc0d6e311546888799487ef6a636f19c,efb9c302cc0d6e311546888799487ef6a636f19c,"Merge pull request #19 from ckennelly/googletest

Remove URL_HASH and TLS_VERIFY from CMake configuration."
ckennelly,2014-04-23 21:23:20,https://api.github.com/repos/google/benchmark/git/commits/92cd2e82af8563b828f331a1b1af7b2eab901de3,92cd2e82af8563b828f331a1b1af7b2eab901de3,"Remove URL_HASH and TLS_VERIFY from CMake configuration.

Per the CMake 2.8.0 documentation, these options did not exist for
ExternalProject_Add.  These options were added in CMake 2.8.10."
dominichamon,2014-04-23 20:46:44,https://api.github.com/repos/google/benchmark/git/commits/8b34026908326e5243f0b948ebde1702b0943e3b,8b34026908326e5243f0b948ebde1702b0943e3b,"Merge pull request #18 from ckennelly/googletest

Resolve Memory Leaks #17"
ckennelly,2014-04-23 08:17:47,https://api.github.com/repos/google/benchmark/git/commits/9f27edbb1650c297f511c4b52e563ee3f0619348,9f27edbb1650c297f511c4b52e563ee3f0619348,"Resolve memory leak from benchmark instances in google/benchmark#17.

This shifts registration from a global vector to a singleton that manages
benchmark destruction during shutdown."
ckennelly,2014-04-23 07:56:17,https://api.github.com/repos/google/benchmark/git/commits/fa908926c7ab9270037e2ab71036f8f6f87e9850,fa908926c7ab9270037e2ab71036f8f6f87e9850,"Partially resolve google/benchmark#17 by fixing regular expression leak.

This adds a unit test to validate the wrapper without running the entirety of
benchmark_test."
ckennelly,2014-04-23 07:48:52,https://api.github.com/repos/google/benchmark/git/commits/6087edda9dbf6fcd91e319d3167a0f7a3f96dcc8,6087edda9dbf6fcd91e319d3167a0f7a3f96dcc8,Add ExternalProject reference to Google Test 1.7.0.
ckennelly,2014-04-23 07:47:07,https://api.github.com/repos/google/benchmark/git/commits/e38fde6450f5b102a9f3d3842a9286de4b678a5e,e38fde6450f5b102a9f3d3842a9286de4b678a5e,"Setup targets from each directory, rather than the top-level."
ckennelly,2014-04-23 03:07:57,https://api.github.com/repos/google/benchmark/git/commits/9b5ece6ece56d2c8115dd3c8b8ad63b1d1752601,9b5ece6ece56d2c8115dd3c8b8ad63b1d1752601,Include stddef.h for size_t.
ckennelly,2014-04-23 03:07:37,https://api.github.com/repos/google/benchmark/git/commits/193e4eb9a14fecddfea206e6983eaa7d1e6b061b,193e4eb9a14fecddfea206e6983eaa7d1e6b061b,Add Chris Kennelly to the contributors list.
dominichamon,2014-04-17 21:38:56,https://api.github.com/repos/google/benchmark/git/commits/98e7f89d72e538a62c45de02deb3aa39bbac73cf,98e7f89d72e538a62c45de02deb3aa39bbac73cf,"Merge pull request #16 from chenshuo/master

Use a new container in each round of push_back test."
chenshuo,2014-04-17 20:56:05,https://api.github.com/repos/google/benchmark/git/commits/e474629b6ae342d4575ac5fff646c6cdbfd8987f,e474629b6ae342d4575ac5fff646c6cdbfd8987f,Add Shuo Chen to AUTHORS
chenshuo,2014-04-17 20:55:35,https://api.github.com/repos/google/benchmark/git/commits/92b6f020ea1257486c78380880c48a2a0b4dedc7,92b6f020ea1257486c78380880c48a2a0b4dedc7,Add Shuo Chen to CONTRIBUTORS.
chenshuo,2014-04-17 17:04:02,https://api.github.com/repos/google/benchmark/git/commits/664159372cea8ce58f548172025d680c653fa68e,664159372cea8ce58f548172025d680c653fa68e,"Use a new container in each round of push_back test.

Otherwise containers keep growing and uses gigabytes of memory."
dominichamon,2014-04-08 01:57:31,https://api.github.com/repos/google/benchmark/git/commits/54cd4fd848084de53654bc384a6c4cb10e6f6705,54cd4fd848084de53654bc384a6c4cb10e6f6705,"Merge pull request #15 from Nukesor/patch-1

Unable to compile because of unused parameter"
Nukesor,2014-04-07 20:19:53,https://api.github.com/repos/google/benchmark/git/commits/92cb4ec50c039eeb37ae281ba911ef81e34afd77,92cb4ec50c039eeb37ae281ba911ef81e34afd77,Update AUTHORS
Nukesor,2014-04-06 20:03:51,https://api.github.com/repos/google/benchmark/git/commits/feea2f022f532c68cca55d4b0b43b2b3b58b7961,feea2f022f532c68cca55d4b0b43b2b3b58b7961,"Compile warning removed, adding myself to contributors"
Nukesor,2014-04-06 14:42:24,https://api.github.com/repos/google/benchmark/git/commits/50f459d2c0110b5ea752455a2094fc83abe83ff5,50f459d2c0110b5ea752455a2094fc83abe83ff5,"Unable to compile because of unused parameter

There is a unused parameter at benchmark:866 Benchmark::MeasurePeakHeapMemory .
The function is marked as TODO and the code that uses the parameter is commented out.
I just removed the parameter so it can compile again without editing the CMake compile flags."
dominichamon,2014-03-20 16:54:14,https://api.github.com/repos/google/benchmark/git/commits/ef1ccf4dea4d42486ad045677070d04c7887cc67,ef1ccf4dea4d42486ad045677070d04c7887cc67,"Merge pull request #12 from showlabor/master

Fix cycleclock.h for gcc/ARM."
showlabor,2014-03-19 07:58:21,https://api.github.com/repos/google/benchmark/git/commits/44b64c9370c823887f03f9fb35d3e25f434e8c06,44b64c9370c823887f03f9fb35d3e25f434e8c06,Added AUTHOR/CONTRIBUTOR information.
showlabor,2014-03-18 16:04:40,https://api.github.com/repos/google/benchmark/git/commits/a7c57939c813699811b0bc27f433ee5aaa98a82e,a7c57939c813699811b0bc27f433ee5aaa98a82e,"Fix cycleclock.h for gcc/ARM.

Currently there are tests for ARMV3 and ARMV6 in cycleclock.h which are not
defined using gcc on ARM. Since there is also a cast to the unknown type
int64 I assume that the ARM code has not been tested. Therefore this patch
replaces the checks for ARMV3 and ARMV6 by checks for __ARM_ARCH. Also, the
cast to int64 is fixed by casting to int64_t."
ckennelly,2014-02-23 18:55:39,https://api.github.com/repos/google/benchmark/git/commits/f835dfa807c6b07e830c337155c782beb3cbb788,f835dfa807c6b07e830c337155c782beb3cbb788,"Merge pull request #10 from Constellation/fix-segv

Ensure families is not nullptr before using it"
Constellation,2014-02-23 11:10:50,https://api.github.com/repos/google/benchmark/git/commits/45b79c3e0119aa727ef14234413967f66b3eb496,45b79c3e0119aa727ef14234413967f66b3eb496,"Check families is not nullptr before using it

When there's no benchmarks, families becomes nullptr. So before touching
it, we need to ensure families is not nullptr."
pphaneuf,2014-02-13 21:18:56,https://api.github.com/repos/google/benchmark/git/commits/254a6f9a785d8c524ab6933fbfccc7cda7c50e79,254a6f9a785d8c524ab6933fbfccc7cda7c50e79,Christopher Seymour has signed the CLA.
pphaneuf,2014-02-12 23:51:08,https://api.github.com/repos/google/benchmark/git/commits/6ec70d0f2b35eca2e7ea3214411eda49e10f4daa,6ec70d0f2b35eca2e7ea3214411eda49e10f4daa,Add information about CLAs.
dominichamon,2014-02-12 06:17:58,https://api.github.com/repos/google/benchmark/git/commits/dbb0beff57cb6c5e28f3b0419b9d97ddde46dd69,dbb0beff57cb6c5e28f3b0419b9d97ddde46dd69,Update CONTRIBUTORS
dominichamon,2014-02-12 06:17:36,https://api.github.com/repos/google/benchmark/git/commits/60869aa2157366def80142710edc350b04118a21,60869aa2157366def80142710edc350b04118a21,Update AUTHORS
dominichamon,2014-02-12 06:15:22,https://api.github.com/repos/google/benchmark/git/commits/f2d1957d2349d69f4272cbb39b47b93a88b17681,f2d1957d2349d69f4272cbb39b47b93a88b17681,"Merge pull request #9 from iiSeymour/patch-1

Update README.md"
pphaneuf,2014-02-10 23:32:08,https://api.github.com/repos/google/benchmark/git/commits/6200a22998ba1d2d852fa009364efe9db5e5bce3,6200a22998ba1d2d852fa009364efe9db5e5bce3,Add AUTHORS and CONTRIBUTORS files.
pphaneuf,2014-02-10 22:37:54,https://api.github.com/repos/google/benchmark/git/commits/99459023d9c45d514ba84c899f0bc98bd83d6df1,99459023d9c45d514ba84c899f0bc98bd83d6df1,"Create CONTRIBUTING.md

Inspired from the one from https://github.com/google/go-github."
iiSeymour,2014-02-09 19:45:17,https://api.github.com/repos/google/benchmark/git/commits/465cb09eb65b6f03b1286e37cdb9e702766cdd35,465cb09eb65b6f03b1286e37cdb9e702766cdd35,"Update README.md

Switched to language specific markdown for code sections to provide syntax highlighting when rendered."
dominichamon,2014-02-06 19:10:57,https://api.github.com/repos/google/benchmark/git/commits/0a1593b06f4c79edcd4cd150dc37c8a0446e2e4a,0a1593b06f4c79edcd4cd150dc37c8a0446e2e4a,"Merge pull request #8 from dcoeurjo/cmakeFix

Cmake edit with 'make install' target"
dcoeurjo,2014-02-05 20:07:40,https://api.github.com/repos/google/benchmark/git/commits/22f436ea84f93d3bc6b59e3b7402dff1c7af7db1,22f436ea84f93d3bc6b59e3b7402dff1c7af7db1,Missing includes in install target
dcoeurjo,2014-02-05 19:46:54,https://api.github.com/repos/google/benchmark/git/commits/cbcf159bf2975302e2af6ccda4ca32a0d776e26d,cbcf159bf2975302e2af6ccda4ca32a0d776e26d,Thread is required
dcoeurjo,2014-02-05 19:38:57,https://api.github.com/repos/google/benchmark/git/commits/25074512ff9f683c6a228aa979d0ccd207b8d1a9,25074512ff9f683c6a228aa979d0ccd207b8d1a9,Cmake edit with 'make install' target
dominichamon,2014-01-22 03:27:04,https://api.github.com/repos/google/benchmark/git/commits/be84ed037323d5d7fe1a4d22975b615b9414f93f,be84ed037323d5d7fe1a4d22975b615b9414f93f,Remove old NOTEs
ezhuk,2014-01-21 07:18:25,https://api.github.com/repos/google/benchmark/git/commits/772ff6f1f1d8d98f33666179b074f5539ab873b9,772ff6f1f1d8d98f33666179b074f5539ab873b9,[#4] Cleaned up FastClock background thread.
ezhuk,2014-01-21 06:32:16,https://api.github.com/repos/google/benchmark/git/commits/ceea4cb380890872362e19d3a2a5ae908fe30146,ceea4cb380890872362e19d3a2a5ae908fe30146,[#4] A few minor changes.
ezhuk,2014-01-18 08:50:45,https://api.github.com/repos/google/benchmark/git/commits/4ed4ff9574fb0af6c70e8f7098da8d7eaa5fd7d0,4ed4ff9574fb0af6c70e8f7098da8d7eaa5fd7d0,Fix shutting down FastClock's thread on OSX.
dominichamon,2014-01-16 21:20:59,https://api.github.com/repos/google/benchmark/git/commits/d184b2be2bebce040b4a937269fad201b76fe638,d184b2be2bebce040b4a937269fad201b76fe638,Move linux-only variable into linux/cygwin block
dominichamon,2014-01-16 17:13:18,https://api.github.com/repos/google/benchmark/git/commits/e2633b9bd75bc69b964c748250fffb28d7ce051d,e2633b9bd75bc69b964c748250fffb28d7ce051d,sysinfo conditional compilation fixes for OSX
dominichamon,2014-01-16 17:12:59,https://api.github.com/repos/google/benchmark/git/commits/076f0df7fc4572982a3983c5dfd289d844a2fa0e,076f0df7fc4572982a3983c5dfd289d844a2fa0e,Better include path for YCM users
dominichamon,2014-01-16 00:11:09,https://api.github.com/repos/google/benchmark/git/commits/d098d4c12e8dcabce8ce6cb5a71caf41c9147ce0,d098d4c12e8dcabce8ce6cb5a71caf41c9147ce0,For those using YCM
dominichamon,2014-01-16 00:09:18,https://api.github.com/repos/google/benchmark/git/commits/c44662e7e927ba044ab76d6e3ba3eda50d8e84b8,c44662e7e927ba044ab76d6e3ba3eda50d8e84b8,Missing headers for sysctl stuff on OSX
dominichamon,2014-01-15 23:02:01,https://api.github.com/repos/google/benchmark/git/commits/6df14aeed0ea0b9aee675ad522aaa990b43239df,6df14aeed0ea0b9aee675ad522aaa990b43239df,"Merge pull request #3 from sochka/patch-1

Fix int64_t_t typo in README code example"
sochka,2014-01-15 21:01:47,https://api.github.com/repos/google/benchmark/git/commits/a2781521171e553c6f72c4bb7f628f5d62cf2e7d,a2781521171e553c6f72c4bb7f628f5d62cf2e7d,"Fix int64_t_t typo in README code example

Fixes a typo where the first type was written as int64_t_t with suffixing _t twice and the second type misses suffix at all."
dominichamon,2014-01-15 20:14:05,https://api.github.com/repos/google/benchmark/git/commits/7b0fa3e1fa7d2f0ec3537c4e51ec1eca6b3ff16c,7b0fa3e1fa7d2f0ec3537c4e51ec1eca6b3ff16c,Merge branch 'master' of https://github.com/google/benchmark
dominichamon,2014-01-15 20:13:46,https://api.github.com/repos/google/benchmark/git/commits/4e21f5e18052a46f068e36cb0e5e66bf9bae260e,4e21f5e18052a46f068e36cb0e5e66bf9bae260e,Add explicit pthread.h include
dominichamon,2014-01-10 23:07:04,https://api.github.com/repos/google/benchmark/git/commits/77cd9803ce6bcf1b1e2167e7c115cbaad01af8bb,77cd9803ce6bcf1b1e2167e7c115cbaad01af8bb,add pedantic errors and fix them
dominichamon,2014-01-09 20:19:02,https://api.github.com/repos/google/benchmark/git/commits/5a71bd6e6656bb1610da794489e65ac7d0b13bc6,5a71bd6e6656bb1610da794489e65ac7d0b13bc6,More formatting tweaks
dominichamon,2014-01-09 20:16:51,https://api.github.com/repos/google/benchmark/git/commits/78fa0b93ab1599f92a0c435a0f50abff74d23723,78fa0b93ab1599f92a0c435a0f50abff74d23723,Merged with upstream
dominichamon,2014-01-09 20:12:11,https://api.github.com/repos/google/benchmark/git/commits/4ce184d86ddefe6170914a4813940dbcbe645207,4ce184d86ddefe6170914a4813940dbcbe645207,Code reformat
dominichamon,2014-01-09 19:53:14,https://api.github.com/repos/google/benchmark/git/commits/80093519382ae748d682e3914ef4ccf07da6ce35,80093519382ae748d682e3914ef4ccf07da6ce35,"Minimum iteration and overhead support.

Ensure we run at least 1 iteration.
Take into account overhead of an empty benchmark.
Minor cleanup of code."
dominichamon,2014-01-09 18:48:18,https://api.github.com/repos/google/benchmark/git/commits/96446f2f5a342b2f6a86984d7c8c7c1829ad3ad0,96446f2f5a342b2f6a86984d7c8c7c1829ad3ad0,Add discussion group to README.md
dominichamon,2014-01-09 16:01:34,https://api.github.com/repos/google/benchmark/git/commits/3fb8268eab1a0f116f5e690e13d1234265998f2c,3fb8268eab1a0f116f5e690e13d1234265998f2c,Add LICENSE and copyright headers
dominichamon,2014-01-08 17:11:50,https://api.github.com/repos/google/benchmark/git/commits/577f7410d19e3bf89ed7bba57f7a44a50a05668f,577f7410d19e3bf89ed7bba57f7a44a50a05668f,Explicitly remove unsupported memory usage support
dominichamon,2014-01-08 17:11:07,https://api.github.com/repos/google/benchmark/git/commits/dc5b533adbfd7202c3d6b8801c8119103ad1e994,dc5b533adbfd7202c3d6b8801c8119103ad1e994,Remove tunable estimate for cycles per second
dominichamon,2014-01-08 01:06:42,https://api.github.com/repos/google/benchmark/git/commits/9d230ffb47165ed1141db547c6985abba7ac46a7,9d230ffb47165ed1141db547c6985abba7ac46a7,Merge branch 'master' of https://github.com/google/benchmark
dominichamon,2014-01-08 01:04:19,https://api.github.com/repos/google/benchmark/git/commits/373a7ddf90f2a85d6441ecc42f0e64142adc3319,373a7ddf90f2a85d6441ecc42f0e64142adc3319,Add drone.io build badge to README.md
dominichamon,2014-01-08 01:02:54,https://api.github.com/repos/google/benchmark/git/commits/dd27ca30e68ad7c95c3a412e3f18cddc7a319473,dd27ca30e68ad7c95c3a412e3f18cddc7a319473,ignore tags file
dominichamon,2014-01-08 00:33:40,https://api.github.com/repos/google/benchmark/git/commits/acc65f48d3a0ff44655c05d359950ec882c73c96,acc65f48d3a0ff44655c05d359950ec882c73c96,Allow custom reporters
dominichamon,2014-01-07 22:33:59,https://api.github.com/repos/google/benchmark/git/commits/2ff306af30a4ffbca648b7a3f6eca7e943e36073,2ff306af30a4ffbca648b7a3f6eca7e943e36073,Fix right-alignment of items/s
dominichamon,2014-01-07 22:31:14,https://api.github.com/repos/google/benchmark/git/commits/3a01f8320ba44dcfaff5fbff923cde2cf7d4e7f7,3a01f8320ba44dcfaff5fbff923cde2cf7d4e7f7,Add items/bytes processed to SetInsert benchmark test
dominichamon,2014-01-07 21:48:27,https://api.github.com/repos/google/benchmark/git/commits/2d557f1c75fc49a0060c1ec65b9a986ac26f84de,2d557f1c75fc49a0060c1ec65b9a986ac26f84de,Add Threads registration example to README.md
dominichamon,2014-01-07 21:45:50,https://api.github.com/repos/google/benchmark/git/commits/fc52b862706416e237e861a6af80d263e9dc385c,fc52b862706416e237e861a6af80d263e9dc385c,"Remove dead code, tidy output"
dominichamon,2014-01-07 21:33:45,https://api.github.com/repos/google/benchmark/git/commits/e5f5a0d30e91d94b0563a0c92bbc2a71b4361daa,e5f5a0d30e91d94b0563a0c92bbc2a71b4361daa,Report mean/stddev times as mean/stddev
dominichamon,2014-01-07 21:14:41,https://api.github.com/repos/google/benchmark/git/commits/2923a481edb5399926c957b0d2433433c21ee071,2923a481edb5399926c957b0d2433433c21ee071,Multithreaded tests are reenabled
dominichamon,2013-12-20 23:10:46,https://api.github.com/repos/google/benchmark/git/commits/15bf66750cb068eb6ca51baaef14e339f7a11e87,15bf66750cb068eb6ca51baaef14e339f7a11e87,Really drop multithreading support
dominichamon,2013-12-20 23:05:16,https://api.github.com/repos/google/benchmark/git/commits/06c1fdbdb3c74c85580153162272fcab4175aed2,06c1fdbdb3c74c85580153162272fcab4175aed2,Update documentation and remove 'Threads' until threadedness works
dominichamon,2013-12-20 22:53:25,https://api.github.com/repos/google/benchmark/git/commits/80162cab323745870cb4c4d2f484eb0d767f7b8e,80162cab323745870cb4c4d2f484eb0d767f7b8e,Update README.md
dominichamon,2013-12-20 22:51:56,https://api.github.com/repos/google/benchmark/git/commits/01af2bc857f6824594b4a4af2f957fcdfe06e2dc,01af2bc857f6824594b4a4af2f957fcdfe06e2dc,Create README.md
dominichamon,2013-12-20 22:39:09,https://api.github.com/repos/google/benchmark/git/commits/d44b01a9ccee15d47b43f948ffee1f47385eda1a,d44b01a9ccee15d47b43f948ffee1f47385eda1a,Merging in work from branch
dominichamon,2013-12-20 22:38:15,https://api.github.com/repos/google/benchmark/git/commits/902fb9122625eb30a02be4ce078a00c70603b44e,902fb9122625eb30a02be4ce078a00c70603b44e,benchmark_repetitions now work
dominichamon,2013-12-20 01:21:34,https://api.github.com/repos/google/benchmark/git/commits/3a6f24c67be2d76533a541e22e542295aa16a9da,3a6f24c67be2d76533a541e22e542295aa16a9da,benchmark_iterations works as expected
dominichamon,2013-12-20 01:16:40,https://api.github.com/repos/google/benchmark/git/commits/b3f0d71e508828bb4add65a7574c52fef1949998,b3f0d71e508828bb4add65a7574c52fef1949998,benchmark_min_time now works as expected
dominichamon,2013-12-20 01:04:54,https://api.github.com/repos/google/benchmark/git/commits/d4ed240426f95fe6d79b18f82efbb40a62492af3,d4ed240426f95fe6d79b18f82efbb40a62492af3,Added some missing atomics in FastClock
dominichamon,2013-12-20 00:45:53,https://api.github.com/repos/google/benchmark/git/commits/a94b0a67414991936ef8871fe0b8bf8541107989,a94b0a67414991936ef8871fe0b8bf8541107989,Remove duplicated macros header
dominichamon,2013-12-20 00:23:25,https://api.github.com/repos/google/benchmark/git/commits/9a25f47250e51df6b4f3fe6579ff547b6daa9284,9a25f47250e51df6b4f3fe6579ff547b6daa9284,Fix printing of time
dominichamon,2013-12-20 00:18:09,https://api.github.com/repos/google/benchmark/git/commits/e390e4ebc3c728e69d335a33c0cb00547dcd0dde,e390e4ebc3c728e69d335a33c0cb00547dcd0dde,Adding benchmark namespace and removing broken flags
dominichamon,2013-12-19 00:55:45,https://api.github.com/repos/google/benchmark/git/commits/403f35442375f2ee858981b79421ca321645df08,403f35442375f2ee858981b79421ca321645df08,"Initial commit

Benchmark library builds and runs but only single-threaded. Multithreaded
support needs a bit more love.

Currently requires some C++11 support (g++ 4.6.3 seems to work)."
